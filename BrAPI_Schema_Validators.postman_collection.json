{
	"info": {
		"_postman_id": "7b4590fb-ccf7-47c3-bdde-d42d747728cd",
		"name": "BrAPI_Schema_Validators",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "5565742"
	},
	"item": [
		{
			"name": "v2",
			"item": [
				{
					"name": "POST ​/{crop}​/brapi​/v2​/search​/samples",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"    var jsonData = pm.response.json();",
									"    pm.environment.unset(\"searchResultDbId_sample\");",
									"    pm.environment.set(\"searchResultDbId_sample\", jsonData.result.searchResultsDbId);",
									"",
									"const SampleSchema = {",
									"\t\"type\": \"object\",",
									"\t\"properties\": {",
									"\t\t\"metadata\": {",
									"\t\t\t\"type\": \"object\",",
									"\t\t\t\"properties\": {",
									"\t\t\t\t\"pagination\": {",
									"\t\t\t\t\t\"type\": \"object\",",
									"\t\t\t\t\t\"properties\": {",
									"\t\t\t\t\t\t\"currentPage\": {",
									"\t\t\t\t\t\t\t\"type\": \"number\"",
									"\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\"pageSize\": {",
									"\t\t\t\t\t\t\t\"type\": \"number\"",
									"\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\"totalCount\": {",
									"\t\t\t\t\t\t\t\"type\": \"number\"",
									"\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\"totalPages\": {",
									"\t\t\t\t\t\t\t\"type\": \"number\"",
									"\t\t\t\t\t\t}",
									"\t\t\t\t\t},",
									"\t\t\t\t\t\"required\": [",
									"\t\t\t\t\t\t\"currentPage\",",
									"\t\t\t\t\t\t\"pageSize\",",
									"\t\t\t\t\t\t\"totalCount\",",
									"\t\t\t\t\t\t\"totalPages\"",
									"\t\t\t\t\t]",
									"\t\t\t\t},",
									"\t\t\t\t\"status\": {",
									"\t\t\t\t\t\"type\": \"array\",",
									"\t\t\t\t\t\"items\": {}",
									"\t\t\t\t},",
									"\t\t\t\t\"datafiles\": {",
									"\t\t\t\t\t\"type\": \"array\",",
									"\t\t\t\t\t\"items\": {}",
									"\t\t\t\t}",
									"\t\t\t},",
									"\t\t\t\"required\": [",
									"\t\t\t\t\"pagination\",",
									"\t\t\t\t\"status\",",
									"\t\t\t\t\"datafiles\"",
									"\t\t\t]",
									"\t\t},",
									"\t\t\"result\": {",
									"\t\t\t\"type\": \"object\",",
									"\t\t\t\"properties\": {",
									"\t\t\t\t\"data\": {",
									"\t\t\t\t\t\"type\": \"array\",",
									"\t\t\t\t\t\"items\": {",
									"\t\t\t\t\t\t\"type\": \"object\",",
									"\t\t\t\t\t\t\"properties\": {",
									"\t\t\t\t\t\t\t\"additionalInfo\": {",
									"\t\t\t\t\t\t\t\t\"type\": \"object\",",
									"\t\t\t\t\t\t\t\t\"properties\": {",
									"\t\t\t\t\t\t\t\t\t\"additionalProperties\": {",
									"\t\t\t\t\t\t\t\t\t\t\"type\": \"object\",",
									"\t\t\t\t\t\t\t\t\t\t\"properties\": {",
									"\t\t\t\t\t\t\t\t\t\t\t\"type\": {",
									"\t\t\t\t\t\t\t\t\t\t\t\t\"type\": \"string\"",
									"\t\t\t\t\t\t\t\t\t\t\t}",
									"\t\t\t\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\t\t\t\"required\": [",
									"\t\t\t\t\t\t\t\t\t\t\t\"type\"",
									"\t\t\t\t\t\t\t\t\t\t]",
									"\t\t\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\t\t\"description\": {",
									"\t\t\t\t\t\t\t\t\t\t\"type\": \"string\"",
									"\t\t\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\t\t\"type\": {",
									"\t\t\t\t\t\t\t\t\t\t\"type\": \"string\"",
									"\t\t\t\t\t\t\t\t\t}",
									"\t\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\t\"required\": [",
									"\t\t\t\t\t\t\t\t\t\"additionalProperties\",",
									"\t\t\t\t\t\t\t\t\t\"description\",",
									"\t\t\t\t\t\t\t\t\t\"type\"",
									"\t\t\t\t\t\t\t\t]",
									"\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\"column\": {",
									"\t\t\t\t\t\t\t\t\"type\": \"object\",",
									"\t\t\t\t\t\t\t\t\"properties\": {",
									"\t\t\t\t\t\t\t\t\t\"description\": {",
									"\t\t\t\t\t\t\t\t\t\t\"type\": \"string\"",
									"\t\t\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\t\t\"example\": {",
									"\t\t\t\t\t\t\t\t\t\t\"type\": \"number\"",
									"\t\t\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\t\t\"maximum\": {",
									"\t\t\t\t\t\t\t\t\t\t\"type\": \"number\"",
									"\t\t\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\t\t\"minimum\": {",
									"\t\t\t\t\t\t\t\t\t\t\"type\": \"number\"",
									"\t\t\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\t\t\"type\": {",
									"\t\t\t\t\t\t\t\t\t\t\"type\": \"string\"",
									"\t\t\t\t\t\t\t\t\t}",
									"\t\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\t\"required\": [",
									"\t\t\t\t\t\t\t\t\t\"description\",",
									"\t\t\t\t\t\t\t\t\t\"example\",",
									"\t\t\t\t\t\t\t\t\t\"maximum\",",
									"\t\t\t\t\t\t\t\t\t\"minimum\",",
									"\t\t\t\t\t\t\t\t\t\"type\"",
									"\t\t\t\t\t\t\t\t]",
									"\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\"externalReferences\": {",
									"\t\t\t\t\t\t\t\t\"type\": \"array\",",
									"\t\t\t\t\t\t\t\t\"properties\": {",
									"\t\t\t\t\t\t\t\t\t\"description\": {",
									"\t\t\t\t\t\t\t\t\t\t\"type\": \"string\"",
									"\t\t\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\t\t\"example\": {",
									"\t\t\t\t\t\t\t\t\t\t\"type\": \"array\",",
									"\t\t\t\t\t\t\t\t\t\t\"items\": {",
									"\t\t\t\t\t\t\t\t\t\t\t\"type\": \"object\",",
									"\t\t\t\t\t\t\t\t\t\t\t\"properties\": {",
									"\t\t\t\t\t\t\t\t\t\t\t\t\"referenceID\": {",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t\"type\": \"string\"",
									"\t\t\t\t\t\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\t\t\t\t\t\"referenceSource\": {",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t\"type\": \"string\"",
									"\t\t\t\t\t\t\t\t\t\t\t\t}",
									"\t\t\t\t\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\t\t\t\t\"required\": [",
									"\t\t\t\t\t\t\t\t\t\t\t\t\"referenceID\",",
									"\t\t\t\t\t\t\t\t\t\t\t\t\"referenceSource\"",
									"\t\t\t\t\t\t\t\t\t\t\t]",
									"\t\t\t\t\t\t\t\t\t\t}",
									"\t\t\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\t\t\"items\": {",
									"\t\t\t\t\t\t\t\t\t\t\"type\": \"object\",",
									"\t\t\t\t\t\t\t\t\t\t\"properties\": {",
									"\t\t\t\t\t\t\t\t\t\t\t\"properties\": {",
									"\t\t\t\t\t\t\t\t\t\t\t\t\"type\": \"object\",",
									"\t\t\t\t\t\t\t\t\t\t\t\t\"properties\": {",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t\"referenceID\": {",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"type\": \"object\",",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"properties\": {",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"description\": {",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"type\": \"string\"",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"type\": {",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"type\": \"string\"",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"required\": [",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"description\",",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"type\"",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t\t]",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t\"referenceSource\": {",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"type\": \"object\",",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"properties\": {",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"description\": {",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"type\": \"string\"",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"type\": {",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"type\": \"string\"",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"required\": [",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"description\",",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"type\"",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t\t]",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t}",
									"\t\t\t\t\t\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\t\t\t\t\t\"required\": [",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t\"referenceID\",",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t\"referenceSource\"",
									"\t\t\t\t\t\t\t\t\t\t\t\t]",
									"\t\t\t\t\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\t\t\t\t\"type\": {",
									"\t\t\t\t\t\t\t\t\t\t\t\t\"type\": \"string\"",
									"\t\t\t\t\t\t\t\t\t\t\t}",
									"\t\t\t\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\t\t\t\"required\": [",
									"\t\t\t\t\t\t\t\t\t\t\t\"properties\",",
									"\t\t\t\t\t\t\t\t\t\t\t\"type\"",
									"\t\t\t\t\t\t\t\t\t\t]",
									"\t\t\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\t\t\"title\": {",
									"\t\t\t\t\t\t\t\t\t\t\"type\": \"string\"",
									"\t\t\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\t\t\"type\": {",
									"\t\t\t\t\t\t\t\t\t\t\"type\": \"string\"",
									"\t\t\t\t\t\t\t\t\t}",
									"\t\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\t\"required\": [",
									"\t\t\t\t\t\t\t\t\t\"description\",",
									"\t\t\t\t\t\t\t\t\t\"example\",",
									"\t\t\t\t\t\t\t\t\t\"items\",",
									"\t\t\t\t\t\t\t\t\t\"title\",",
									"\t\t\t\t\t\t\t\t\t\"type\"",
									"\t\t\t\t\t\t\t\t]",
									"\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\"germplasmDbId\": {",
									"\t\t\t\t\t\t\t\t\"type\": \"string\"\t\t\t\t\t\t\t",
									"\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\"observationUnitDbId\": {",
									"\t\t\t\t\t\t\t\t\"type\": \"string\"",
									"\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\"plateDbId\": {",
									"\t\t\t\t\t\t\t\t\"type\": \"string\"",
									"\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\"plateName\": {",
									"\t\t\t\t\t\t\t\t\"type\": \"string\",\t\t\t\t\t\t\t\t",
									"\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\"programDbId\": {",
									"\t\t\t\t\t\t\t\t\"type\": \"string\"",
									"\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\"row\": {",
									"\t\t\t\t\t\t\t\t\"type\": \"string\"",
									"\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\"sampleBarcode\": {",
									"\t\t\t\t\t\t\t\t\"type\": \"string\"",
									"\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\"sampleDbId\": {",
									"\t\t\t\t\t\t\t\t\"type\": \"string\"",
									"\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\"sampleDescription\": {",
									"\t\t\t\t\t\t\t\t\"type\": \"string\"",
									"\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\"sampleGroupDbId\": {",
									"\t\t\t\t\t\t\t\t\"type\": \"string\"",
									"\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\"sampleName\": {",
									"\t\t\t\t\t\t\t\t\"type\": \"string\"",
									"\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\"samplePUI\": {",
									"\t\t\t\t\t\t\t\t\"type\": \"string\"",
									"\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\"sampleTimestamp\": {",
									"\t\t\t\t\t\t\t\t\"type\": \"string\"",
									"\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\"sampleType\": {",
									"\t\t\t\t\t\t\t\t\"type\": \"string\"",
									"\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\"studyDbId\": {",
									"\t\t\t\t\t\t\t\t\"type\": \"string\"",
									"\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\"takenBy\": {",
									"\t\t\t\t\t\t\t\t\"type\": \"string\"",
									"\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\"tissueType\": {",
									"\t\t\t\t\t\t\t\t\"type\": \"string\"",
									"\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\"trialDbId\": {",
									"\t\t\t\t\t\t\t\t\"type\": \"string\"",
									"\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\"well\": {",
									"\t\t\t\t\t\t\t\t\"type\": \"string\"",
									"\t\t\t\t\t\t\t}",
									"\t\t\t\t\t\t}",
									"\t\t\t\t\t\t",
									"\t\t\t\t\t}",
									"\t\t\t\t}",
									"\t\t\t},",
									"\t\t\t\"required\": [",
									"\t\t\t\t\"data\"",
									"\t\t\t]",
									"\t\t}",
									"\t},",
									"\t\"required\": [",
									"\t\t\"metadata\",",
									"\t\t\"result\"",
									"\t]",
									"}",
									"",
									"pm.environment.unset(\"SampleSchema_v2\");",
									"pm.environment.set(\"SampleSchema_v2\", JSON.stringify(SampleSchema));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{masterToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"sampleDbIds\": [\n    \"PKWDS2ooiNApo\"\n  ]\n}"
						},
						"url": {
							"raw": "{{BMSurl}}/{{crop}}/brapi/v2/search/samples",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"{{crop}}",
								"brapi",
								"v2",
								"search",
								"samples"
							]
						},
						"description": "POST ​/{crop}​/brapi​/v2​/search​/observationunits"
					},
					"response": []
				},
				{
					"name": "GET ​/{crop}​/brapi​/v2​/search​/samples​/{searchResultsDbId}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const SampleSchema_v2 = JSON.parse(pm.environment.get(\"SampleSchema_v2\"));\r",
									"pm.test(\"Validate schema\", () => {\r",
									"    pm.response.to.have.jsonSchema(SampleSchema_v2);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{masterToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BMSurl}}/{{crop}}/brapi/v2/search/samples/{{searchResultDbId_sample}}",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"{{crop}}",
								"brapi",
								"v2",
								"search",
								"samples",
								"{{searchResultDbId_sample}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET ​/{crop}​/brapi​/v2​/samples",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const SampleSchema_v2 = JSON.parse(pm.environment.get(\"SampleSchema_v2\"));\r",
									"pm.test(\"Validate schema\", () => {\r",
									"    pm.response.to.have.jsonSchema(SampleSchema_v2);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{masterToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BMSurl}}/{{crop}}/brapi/v2/samples?page=0&pageSize=10000",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"{{crop}}",
								"brapi",
								"v2",
								"samples"
							],
							"query": [
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "pageSize",
									"value": "10000"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "POST v2​/search​/observationunits",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"    var jsonData = pm.response.json();",
									"    pm.environment.unset(\"searchResultDbId2_observationunit\");",
									"    pm.environment.set(\"searchResultDbId2_observationunit\", jsonData.result.searchResultsDbId);",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{masterToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"trialDbIds\": [\n\t\t\"3086\"\n\t]\n}"
						},
						"url": {
							"raw": "{{BMSurl}}/{{crop}}/brapi/v2/search/observationunits",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"{{crop}}",
								"brapi",
								"v2",
								"search",
								"observationunits"
							]
						},
						"description": "POST ​/{crop}​/brapi​/v2​/search​/observationunits"
					},
					"response": []
				},
				{
					"name": "GET ​v2​/search​/observationunits​/{searchResultsDbid}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const ObservationUnitSchema_v2 = JSON.parse(pm.environment.get(\"ObservationUnitSchema_v2\"));\r",
									"pm.test(\"Validate schema\", () => {\r",
									"    pm.response.to.have.jsonSchema(ObservationUnitSchema_v2);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{masterToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BMSurl}}/{{crop}}/brapi/v2/search/observationunits/{{searchResultDbId2_observationunit}}?page=0&pageSize=10000",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"{{crop}}",
								"brapi",
								"v2",
								"search",
								"observationunits",
								"{{searchResultDbId2_observationunit}}"
							],
							"query": [
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "pageSize",
									"value": "10000"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "POST v2/search/germplasm",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const GermplasmSchema = {",
									"\t\"type\": \"object\",",
									"\t\"required\": [",
									"\t\t\"metadata\",",
									"\t\t\"result\"",
									"\t],",
									"\t\"properties\": {",
									"\t\t\"metadata\": {",
									"\t\t\t\"type\": \"object\",",
									"\t\t\t\"required\": [",
									"\t\t\t\t\"pagination\",",
									"\t\t\t\t\"status\",",
									"\t\t\t\t\"datafiles\"",
									"\t\t\t],",
									"\t\t\t\"properties\": {",
									"\t\t\t\t\"pagination\": {",
									"\t\t\t\t\t\"type\": \"object\",",
									"\t\t\t\t\t\"required\": [",
									"\t\t\t\t\t\t\"currentPage\",",
									"\t\t\t\t\t\t\"pageSize\",",
									"\t\t\t\t\t\t\"totalCount\",",
									"\t\t\t\t\t\t\"totalPages\"",
									"\t\t\t\t\t],",
									"\t\t\t\t\t\"properties\": {",
									"\t\t\t\t\t\t\"currentPage\": {",
									"\t\t\t\t\t\t\t\"type\": \"integer\"",
									"\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\"pageSize\": {",
									"\t\t\t\t\t\t\t\"type\": \"integer\"",
									"\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\"totalCount\": {",
									"\t\t\t\t\t\t\t\"type\": \"integer\"",
									"\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\"totalPages\": {",
									"\t\t\t\t\t\t\t\"type\": \"integer\"",
									"\t\t\t\t\t\t}",
									"\t\t\t\t\t}",
									"\t\t\t\t},",
									"\t\t\t\t\"status\": {",
									"\t\t\t\t\t\"type\": \"array\"",
									"\t\t\t\t},",
									"\t\t\t\t\"datafiles\": {",
									"\t\t\t\t\t\"type\": \"array\"",
									"\t\t\t\t}",
									"\t\t\t}",
									"\t\t},",
									"\t\t\"result\": {",
									"\t\t\t\"properties\": {",
									"\t\t\t\t\"data\": {",
									"\t\t\t\t\t\"items\": {",
									"\t\t\t\t\t\t\"required\": [",
									"\t\t\t\t\t\t\t\"acquisitionDate\",",
									"\t\t\t\t\t\t\t\"additionalInfo\",",
									"\t\t\t\t\t\t\t\"breedingMethodDbId\",",
									"\t\t\t\t\t\t\t\"countryOfOriginCode\",",
									"\t\t\t\t\t\t\t\"defaultDisplayName\",",
									"\t\t\t\t\t\t\t\"donors\",",
									"\t\t\t\t\t\t\t\"germplasmDbId\",",
									"\t\t\t\t\t\t\t\"germplasmName\",",
									"\t\t\t\t\t\t\t\"pedigree\",",
									"\t\t\t\t\t\t\t\"seedSource\",",
									"\t\t\t\t\t\t\t\"storageTypes\",",
									"\t\t\t\t\t\t\t\"synonyms\",",
									"\t\t\t\t\t\t\t\"taxonIds\"",
									"\t\t\t\t\t\t],",
									"\t\t\t\t\t\t\"properties\": {",
									"\t\t\t\t\t\t\t\"accessionNumber\": {",
									"\t\t\t\t\t\t\t\t\"type\": \"string\"",
									"\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\"acquisitionDate\": {",
									"\t\t\t\t\t\t\t\t\"format\": \"date\",",
									"\t\t\t\t\t\t\t\t\"type\": \"string\"",
									"\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\"additionalInfo\": {",
									"\t\t\t\t\t\t\t\t\"additionalProperties\": {",
									"\t\t\t\t\t\t\t\t\t\"type\": \"string\"",
									"\t\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\t\"type\": \"object\"",
									"\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\"biologicalStatusOfAccessionCode\": {",
									"\t\t\t\t\t\t\t\t\"enum\": [",
									"\t\t\t\t\t\t\t\t\t\"100\",",
									"\t\t\t\t\t\t\t\t\t\"110\",",
									"\t\t\t\t\t\t\t\t\t\"120\",",
									"\t\t\t\t\t\t\t\t\t\"130\",",
									"\t\t\t\t\t\t\t\t\t\"200\",",
									"\t\t\t\t\t\t\t\t\t\"300\",",
									"\t\t\t\t\t\t\t\t\t\"400\",",
									"\t\t\t\t\t\t\t\t\t\"410\",",
									"\t\t\t\t\t\t\t\t\t\"411\",",
									"\t\t\t\t\t\t\t\t\t\"412\",",
									"\t\t\t\t\t\t\t\t\t\"413\",",
									"\t\t\t\t\t\t\t\t\t\"414\",",
									"\t\t\t\t\t\t\t\t\t\"415\",",
									"\t\t\t\t\t\t\t\t\t\"416\",",
									"\t\t\t\t\t\t\t\t\t\"420\",",
									"\t\t\t\t\t\t\t\t\t\"421\",",
									"\t\t\t\t\t\t\t\t\t\"422\",",
									"\t\t\t\t\t\t\t\t\t\"423\",",
									"\t\t\t\t\t\t\t\t\t\"500\",",
									"\t\t\t\t\t\t\t\t\t\"600\",",
									"\t\t\t\t\t\t\t\t\t\"999\"",
									"\t\t\t\t\t\t\t\t],",
									"\t\t\t\t\t\t\t\t\"type\": \"string\"",
									"\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\"biologicalStatusOfAccessionDescription\": {",
									"\t\t\t\t\t\t\t\t\"type\": \"string\"",
									"\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\"breedingMethodDbId\": {",
									"\t\t\t\t\t\t\t\t\"type\": \"string\"",
									"\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\"collection\": {",
									"\t\t\t\t\t\t\t\t\"type\": \"string\"",
									"\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\"commonCropName\": {",
									"\t\t\t\t\t\t\t\t\"type\": \"string\"",
									"\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\"countryOfOriginCode\": {",
									"\t\t\t\t\t\t\t\t\"type\": \"string\"",
									"\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\"defaultDisplayName\": {",
									"\t\t\t\t\t\t\t\t\"type\": \"string\"",
									"\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\"documentationURL\": {",
									"\t\t\t\t\t\t\t\t\"format\": \"uri\",",
									"\t\t\t\t\t\t\t\t\"type\": \"string\"",
									"\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\"donors\": {",
									"\t\t\t\t\t\t\t\t\"items\": {",
									"\t\t\t\t\t\t\t\t\t\"properties\": {",
									"\t\t\t\t\t\t\t\t\t\t\"donorAccessionNumber\": {",
									"\t\t\t\t\t\t\t\t\t\t\t\"type\": \"string\"",
									"\t\t\t\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\t\t\t\"donorInstituteCode\": {",
									"\t\t\t\t\t\t\t\t\t\t\t\"type\": \"string\"",
									"\t\t\t\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\t\t\t\"germplasmPUI\": {",
									"\t\t\t\t\t\t\t\t\t\t\t\"type\": \"string\"",
									"\t\t\t\t\t\t\t\t\t\t}",
									"\t\t\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\t\t\"type\": \"object\"",
									"\t\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\t\"type\": \"array\"",
									"\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\"externalReferences\": {",
									"\t\t\t\t\t\t\t\t\"items\": {",
									"\t\t\t\t\t\t\t\t\t\"properties\": {",
									"\t\t\t\t\t\t\t\t\t\t\"referenceID\": {",
									"\t\t\t\t\t\t\t\t\t\t\t\"type\": [",
									"\t\t\t\t\t\t\t\t\t\t\t\t\"null\",",
									"\t\t\t\t\t\t\t\t\t\t\t\t\"string\"",
									"\t\t\t\t\t\t\t\t\t\t\t]",
									"\t\t\t\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\t\t\t\"referenceSource\": {",
									"\t\t\t\t\t\t\t\t\t\t\t\"type\": [",
									"\t\t\t\t\t\t\t\t\t\t\t\t\"null\",",
									"\t\t\t\t\t\t\t\t\t\t\t\t\"string\"",
									"\t\t\t\t\t\t\t\t\t\t\t]",
									"\t\t\t\t\t\t\t\t\t\t}",
									"\t\t\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\t\t\"type\": \"object\"",
									"\t\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\t\"title\": \"ExternalReferences\",",
									"\t\t\t\t\t\t\t\t\"type\": [",
									"\t\t\t\t\t\t\t\t\t\"null\",",
									"\t\t\t\t\t\t\t\t\t\"array\"",
									"\t\t\t\t\t\t\t\t]",
									"\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\"genus\": {",
									"\t\t\t\t\t\t\t\t\"type\": \"string\"",
									"\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\"germplasmDbId\": {",
									"\t\t\t\t\t\t\t\t\"type\": \"string\"",
									"\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\"germplasmName\": {",
									"\t\t\t\t\t\t\t\t\"type\": \"string\"",
									"\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\"germplasmOrigin\": {",
									"\t\t\t\t\t\t\t\t\"items\": {",
									"\t\t\t\t\t\t\t\t\t\"properties\": {",
									"\t\t\t\t\t\t\t\t\t\t\"coordinateUncertainty\": {",
									"\t\t\t\t\t\t\t\t\t\t\t\"type\": \"string\"",
									"\t\t\t\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\t\t\t\"coordinates\": {",
									"\t\t\t\t\t\t\t\t\t\t\t\"properties\": {",
									"\t\t\t\t\t\t\t\t\t\t\t\t\"geometry\": {",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t\"discriminator\": {",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"mapping\": {",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"Point\": \"#/components/schemas/pointGeometry\",",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"Polygon\": \"#/components/schemas/polygonGeometry\"",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"propertyName\": \"type\"",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t\"oneOf\": [",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t\t{",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"properties\": {",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"coordinates\": {",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"items\": {",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"type\": \"number\"",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"minItems\": 2,",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"type\": \"array\"",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"type\": {",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"default\": \"Point\",",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"type\": \"string\"",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"type\": \"object\"",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t\t{",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"properties\": {",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"coordinates\": {",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"items\": {",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"items\": {",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"items\": {",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"type\": \"number\"",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"minItems\": 2,",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"type\": \"array\"",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"minItems\": 4,",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"type\": \"array\"",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"type\": \"array\"",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"type\": {",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"default\": \"Polygon\",",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"type\": \"string\"",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"type\": \"object\"",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t\t}",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t],",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t\"title\": \"GeoJSON Geometry\",",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t\"type\": \"object\"",
									"\t\t\t\t\t\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\t\t\t\t\t\"type\": {",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t\"default\": \"Feature\",",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t\"type\": \"string\"",
									"\t\t\t\t\t\t\t\t\t\t\t\t}",
									"\t\t\t\t\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\t\t\t\t\"title\": \"GeoJSON\",",
									"\t\t\t\t\t\t\t\t\t\t\t\"type\": \"object\"",
									"\t\t\t\t\t\t\t\t\t\t}",
									"\t\t\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\t\t\"type\": \"object\"",
									"\t\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\t\"type\": \"object\"",
									"\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\"germplasmPUI\": {",
									"\t\t\t\t\t\t\t\t\"type\": \"string\"",
									"\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\"germplasmPreprocessing\": {",
									"\t\t\t\t\t\t\t\t\"type\": \"string\"",
									"\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\"instituteCode\": {",
									"\t\t\t\t\t\t\t\t\"type\": \"string\"",
									"\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\"instituteName\": {",
									"\t\t\t\t\t\t\t\t\"type\": \"string\"",
									"\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\"pedigree\": {",
									"\t\t\t\t\t\t\t\t\"type\": \"string\"",
									"\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\"seedSource\": {",
									"\t\t\t\t\t\t\t\t\"type\": \"string\"",
									"\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\"seedSourceDescription\": {",
									"\t\t\t\t\t\t\t\t\"type\": \"string\"",
									"\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\"species\": {",
									"\t\t\t\t\t\t\t\t\"type\": \"string\"",
									"\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\"speciesAuthority\": {",
									"\t\t\t\t\t\t\t\t\"type\": \"string\"",
									"\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\"storageTypes\": {",
									"\t\t\t\t\t\t\t\t\"items\": {",
									"\t\t\t\t\t\t\t\t\t\"properties\": {",
									"\t\t\t\t\t\t\t\t\t\t\"code\": {",
									"\t\t\t\t\t\t\t\t\t\t\t\"enum\": [",
									"\t\t\t\t\t\t\t\t\t\t\t\t\"10\",",
									"\t\t\t\t\t\t\t\t\t\t\t\t\"11\",",
									"\t\t\t\t\t\t\t\t\t\t\t\t\"12\",",
									"\t\t\t\t\t\t\t\t\t\t\t\t\"13\",",
									"\t\t\t\t\t\t\t\t\t\t\t\t\"20\",",
									"\t\t\t\t\t\t\t\t\t\t\t\t\"30\",",
									"\t\t\t\t\t\t\t\t\t\t\t\t\"40\",",
									"\t\t\t\t\t\t\t\t\t\t\t\t\"50\",",
									"\t\t\t\t\t\t\t\t\t\t\t\t\"99\"",
									"\t\t\t\t\t\t\t\t\t\t\t],",
									"\t\t\t\t\t\t\t\t\t\t\t\"type\": \"string\"",
									"\t\t\t\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\t\t\t\"description\": {",
									"\t\t\t\t\t\t\t\t\t\t\t\"type\": \"string\"",
									"\t\t\t\t\t\t\t\t\t\t}",
									"\t\t\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\t\t\"type\": \"object\"",
									"\t\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\t\"type\": \"array\"",
									"\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\"subtaxa\": {",
									"\t\t\t\t\t\t\t\t\"type\": \"string\"",
									"\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\"subtaxaAuthority\": {",
									"\t\t\t\t\t\t\t\t\"type\": \"string\"",
									"\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\"synonyms\": {",
									"\t\t\t\t\t\t\t\t\"items\": {",
									"\t\t\t\t\t\t\t\t\t\"properties\": {",
									"\t\t\t\t\t\t\t\t\t\t\"synonym\": {",
									"\t\t\t\t\t\t\t\t\t\t\t\"type\": \"string\"",
									"\t\t\t\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\t\t\t\"type\": {",
									"\t\t\t\t\t\t\t\t\t\t\t\"type\": \"string\"",
									"\t\t\t\t\t\t\t\t\t\t}",
									"\t\t\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\t\t\"type\": \"object\"",
									"\t\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\t\"type\": \"array\"",
									"\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\"taxonIds\": {",
									"\t\t\t\t\t\t\t\t\"items\": {",
									"\t\t\t\t\t\t\t\t\t\"properties\": {",
									"\t\t\t\t\t\t\t\t\t\t\"sourceName\": {",
									"\t\t\t\t\t\t\t\t\t\t\t\"type\": \"string\"",
									"\t\t\t\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\t\t\t\"taxonId\": {",
									"\t\t\t\t\t\t\t\t\t\t\t\"type\": \"string\"",
									"\t\t\t\t\t\t\t\t\t\t}",
									"\t\t\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\t\t\"required\": [",
									"\t\t\t\t\t\t\t\t\t\t\"sourceName\",",
									"\t\t\t\t\t\t\t\t\t\t\"taxonId\"",
									"\t\t\t\t\t\t\t\t\t],",
									"\t\t\t\t\t\t\t\t\t\"type\": \"object\"",
									"\t\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\t\"type\": \"array\"",
									"\t\t\t\t\t\t\t}",
									"\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\"type\": \"object\"",
									"\t\t\t\t\t},",
									"\t\t\t\t\t\"minItems\": 1,",
									"\t\t\t\t\t\"type\": \"array\"",
									"\t\t\t\t}",
									"\t\t\t},",
									"\t\t\t\"required\": [",
									"\t\t\t\t\"data\"",
									"\t\t\t],",
									"\t\t\t\"type\": \"object\"",
									"\t\t}",
									"\t}",
									"}",
									"pm.environment.unset(\"GermplasmSchema_v2\");",
									"pm.environment.set(\"GermplasmSchema_v2\", JSON.stringify(GermplasmSchema));",
									"    var jsonData = pm.response.json();",
									"    pm.environment.unset(\"searchResultDbId2_germplasm\");",
									"    pm.environment.set(\"searchResultDbId2_germplasm\", jsonData.result.searchResultsDbId);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{masterToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"germplasmNames\": [\r\n   \"CML1\",\"IB21\"\r\n  ]\r\n}"
						},
						"url": {
							"raw": "{{BMSurl}}/{{crop}}/brapi/v2/search/germplasm",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"{{crop}}",
								"brapi",
								"v2",
								"search",
								"germplasm"
							]
						},
						"description": "POST /{crop}/brapi/v1/search/germplasm"
					},
					"response": []
				},
				{
					"name": "GET v2/search/germplasm/{searchResultsDbid}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const GermplasmSchema_v2 = JSON.parse(pm.environment.get(\"GermplasmSchema_v2\"));\r",
									"pm.test(\"Validate schema\", () => {\r",
									"    pm.response.to.have.jsonSchema(GermplasmSchema_v2);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{masterToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BMSurl}}/{{crop}}/brapi/v2/search/germplasm/{{searchResultDbId2_germplasm}}?page=0&pageSize=100",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"{{crop}}",
								"brapi",
								"v2",
								"search",
								"germplasm",
								"{{searchResultDbId2_germplasm}}"
							],
							"query": [
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "pageSize",
									"value": "100"
								}
							]
						},
						"description": "GET /{crop}/brapi/v1/search/germplasm/{searchResultsDbid}"
					},
					"response": []
				},
				{
					"name": "POST v2​/search​/variables",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"    var jsonData = pm.response.json();",
									"    pm.environment.unset(\"searchResultsDbId2_variable\");",
									"    pm.environment.set(\"searchResultsDbId2_variable\", jsonData.result.searchResultsDbId);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{masterToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"dataTypes\": [\n    \"Numerical\"\n  ],\n  \"externalReferenceIDs\": [\n    \"doi:10.155454/12341234\"\n  ],\n  \"externalReferenceSources\": [\n    \"DOI\"\n  ],\n  \"methodDbIds\": [\n    \"16000\"\n  ],\n  \"observationVariableDbIds\": [\n    \"18000\"\n  ],\n  \"observationVariableNames\": [\n    \"Grain_yield\"\n  ],\n  \"ontologyDbIds\": [\n    \"18000\"\n  ],\n  \"page\": 0,\n  \"pageSize\": 10000,\n  \"scaleDbIds\": [\n    \"6090\"\n  ],\n  \"studyDbId\": [\n    \"2\"\n  ],\n  \"traitClasses\": [\n    \"Agronomic\"\n  ],\n  \"traitDbIds\": [\n    \"15009\"\n  ]\n}"
						},
						"url": {
							"raw": "{{BMSurl}}/{{crop}}/brapi/v2/search/variables",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"{{crop}}",
								"brapi",
								"v2",
								"search",
								"variables"
							]
						},
						"description": "POST /{crop}/brapi/v1/search/germplasm"
					},
					"response": []
				},
				{
					"name": "GET ​v2​/search​/variables​/{searchResultsDbId}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const VariableSchema = {",
									"    //TODO: To add Germplasm json schema here",
									"}",
									"",
									"pm.test(\"Validate schema\", () => {",
									"    pm.response.to.have.jsonSchema(VariableSchema);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{masterToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "X-Auth-Token",
								"type": "text",
								"value": "{{masterToken}}"
							}
						],
						"url": {
							"raw": "{{BMSurl}}/{{crop}}/brapi/v2/search/variables/{{searchResultsDbId2_variable}}",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"{{crop}}",
								"brapi",
								"v2",
								"search",
								"variables",
								"{{searchResultsDbId2_variable}}"
							]
						},
						"description": "GET ​/{crop}​/brapi​/v1​/variables"
					},
					"response": []
				},
				{
					"name": "POST ​/{crop}​/brapi​/v2​/search​/attributes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"    var jsonData = pm.response.json();",
									"    pm.environment.unset(\"searchResultDbId2_attribute\");",
									"    pm.environment.set(\"searchResultDbId2_attribute\", jsonData.result.searchResultsDbId);",
									"",
									"const AttributeSchema = {",
									"\t\"type\": \"object\",",
									"\t\"required\": [",
									"\t\t\"metadata\",",
									"\t\t\"result\"",
									"\t],",
									"\t\"properties\": {",
									"\t\t\"metadata\": {",
									"\t\t\t\"type\": \"object\",",
									"\t\t\t\"required\": [",
									"\t\t\t\t\"pagination\",",
									"\t\t\t\t\"status\",",
									"\t\t\t\t\"datafiles\"",
									"\t\t\t],",
									"\t\t\t\"properties\": {",
									"\t\t\t\t\"pagination\": {",
									"\t\t\t\t\t\"type\": \"object\",",
									"\t\t\t\t\t\"required\": [",
									"\t\t\t\t\t\t\"currentPage\",",
									"\t\t\t\t\t\t\"pageSize\",",
									"\t\t\t\t\t\t\"totalCount\",",
									"\t\t\t\t\t\t\"totalPages\"",
									"\t\t\t\t\t],",
									"\t\t\t\t\t\"properties\": {",
									"\t\t\t\t\t\t\"currentPage\": {",
									"\t\t\t\t\t\t\t\"type\": \"integer\"",
									"\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\"pageSize\": {",
									"\t\t\t\t\t\t\t\"type\": \"integer\"",
									"\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\"totalCount\": {",
									"\t\t\t\t\t\t\t\"type\": \"integer\"",
									"\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\"totalPages\": {",
									"\t\t\t\t\t\t\t\"type\": \"integer\"",
									"\t\t\t\t\t\t}",
									"\t\t\t\t\t}",
									"\t\t\t\t},",
									"\t\t\t\t\"status\": {",
									"\t\t\t\t\t\"type\": \"array\"",
									"\t\t\t\t},",
									"\t\t\t\t\"datafiles\": {",
									"\t\t\t\t\t\"type\": \"array\"",
									"\t\t\t\t}",
									"\t\t\t}",
									"\t\t},",
									"\t\t\"result\": {",
									"\t\t\t\"properties\": {",
									"\t\t\t\t\"data\": {",
									"\t\t\t\t\t\"items\": {",
									"\t\t\t\t\t\t\"required\": [",
									"\t\t\t\t\t\t\t\"additionalInfo\",",
									"\t\t\t\t\t\t\t\"attributeCategory\",",
									"\t\t\t\t\t\t\t\"attributeDbId\",",
									"\t\t\t\t\t\t\t\"attributeDescription\",",
									"\t\t\t\t\t\t\t\"attributeName\",",
									"\t\t\t\t\t\t\t\"commonCropName\",",
									"\t\t\t\t\t\t\t\"contextOfUse\",",
									"\t\t\t\t\t\t\t\"defaultValue\",",
									"\t\t\t\t\t\t\t\"externalReferences\",",
									"\t\t\t\t\t\t\t\"growthStage\",",
									"\t\t\t\t\t\t\t\"institution\",",
									"\t\t\t\t\t\t\t\"language\",",
									"\t\t\t\t\t\t\t\"method\",",
									"\t\t\t\t\t\t\t\"ontologyReference\",",
									"\t\t\t\t\t\t\t\"scale\",",
									"\t\t\t\t\t\t\t\"scientist\",",
									"\t\t\t\t\t\t\t\"status\",",
									"\t\t\t\t\t\t\t\"submissionTimestamp\",",
									"\t\t\t\t\t\t\t\"synonyms\",",
									"\t\t\t\t\t\t\t\"trait\"",
									"\t\t\t\t\t\t],",
									"\t\t\t\t\t\t\"properties\": {",
									"\t\t\t\t\t\t\t\"additionalInfo\": {",
									"\t\t\t\t\t\t\t\t\"additionalProperties\": {",
									"\t\t\t\t\t\t\t\t\t\"type\": \"string\"",
									"\t\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\t\"description\": \"Additional arbitrary info\",",
									"\t\t\t\t\t\t\t\t\"type\": \"object\"",
									"\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\"attributeCategory\": {",
									"\t\t\t\t\t\t\t\t\"type\": \"string\"",
									"\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\"attributeDbId\": {",
									"\t\t\t\t\t\t\t\t\"type\": \"string\"",
									"\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\"attributeDescription\": {",
									"\t\t\t\t\t\t\t\t\"type\": \"string\"",
									"\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\"attributeName\": {",
									"\t\t\t\t\t\t\t\t\"type\": \"string\"",
									"\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\"commonCropName\": {",
									"\t\t\t\t\t\t\t\t\"type\": \"string\"",
									"\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\"contextOfUse\": {",
									"\t\t\t\t\t\t\t\t\"items\": {",
									"\t\t\t\t\t\t\t\t\t\"type\": \"string\"",
									"\t\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\t\"type\": \"array\"",
									"\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\"defaultValue\": {",
									"\t\t\t\t\t\t\t\t\"type\": \"string\"",
									"\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\"externalReferences\": {",
									"\t\t\t\t\t\t\t\t\"items\": {",
									"\t\t\t\t\t\t\t\t\t\"properties\": {",
									"\t\t\t\t\t\t\t\t\t\t\"referenceID\": {",
									"\t\t\t\t\t\t\t\t\t\t\t\"type\": \"string\"",
									"\t\t\t\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\t\t\t\"referenceSource\": {",
									"\t\t\t\t\t\t\t\t\t\t\t\"type\": \"string\"",
									"\t\t\t\t\t\t\t\t\t\t}",
									"\t\t\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\t\t\"type\": \"object\"",
									"\t\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\t\"title\": \"ExternalReferences\",",
									"\t\t\t\t\t\t\t\t\"type\": \"array\"",
									"\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\"method\": {",
									"\t\t\t\t\t\t\t\t\"properties\": {",
									"\t\t\t\t\t\t\t\t\t\"additionalInfo\": {",
									"\t\t\t\t\t\t\t\t\t\t\"additionalProperties\": {",
									"\t\t\t\t\t\t\t\t\t\t\t\"type\": \"string\"",
									"\t\t\t\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\t\t\t\"description\": \"Additional arbitrary info\",",
									"\t\t\t\t\t\t\t\t\t\t\"type\": \"object\"",
									"\t\t\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\t\t\"bibliographicalReference\": {",
									"\t\t\t\t\t\t\t\t\t\t\"type\": [",
									"\t\t\t\t\t\t\t\t\t\t\t\"null\",",
									"\t\t\t\t\t\t\t\t\t\t\t\"string\"",
									"\t\t\t\t\t\t\t\t\t\t]",
									"\t\t\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\t\t\"externalReferences\": {",
									"\t\t\t\t\t\t\t\t\t\t\"items\": {",
									"\t\t\t\t\t\t\t\t\t\t\t\"properties\": {",
									"\t\t\t\t\t\t\t\t\t\t\t\t\"referenceID\": {",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t\"type\": [",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"null\",",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"string\"",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t]",
									"\t\t\t\t\t\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\t\t\t\t\t\"referenceSource\": {",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t\"type\": [",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"null\",",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"string\"",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t]",
									"\t\t\t\t\t\t\t\t\t\t\t\t}",
									"\t\t\t\t\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\t\t\t\t\"type\": \"object\"",
									"\t\t\t\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\t\t\t\"title\": \"ExternalReferences\",",
									"\t\t\t\t\t\t\t\t\t\t\"type\": [",
									"\t\t\t\t\t\t\t\t\t\t\t\"null\",",
									"\t\t\t\t\t\t\t\t\t\t\t\"array\"",
									"\t\t\t\t\t\t\t\t\t\t]",
									"\t\t\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\t\t\"formula\": {",
									"\t\t\t\t\t\t\t\t\t\t\"type\": \"string\"",
									"\t\t\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\t\t\"methodClass\": {",
									"\t\t\t\t\t\t\t\t\t\t\"type\": [",
									"\t\t\t\t\t\t\t\t\t\t\t\"null\",",
									"\t\t\t\t\t\t\t\t\t\t\t\"string\"",
									"\t\t\t\t\t\t\t\t\t\t]",
									"\t\t\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\t\t\"methodDbId\": {",
									"\t\t\t\t\t\t\t\t\t\t\"type\": \"string\"",
									"\t\t\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\t\t\"methodName\": {",
									"\t\t\t\t\t\t\t\t\t\t\"type\": \"string\"",
									"\t\t\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\t\t\"ontologyReference\": {",
									"\t\t\t\t\t\t\t\t\t\t\"properties\": {",
									"\t\t\t\t\t\t\t\t\t\t\t\"documentationLinks\": {",
									"\t\t\t\t\t\t\t\t\t\t\t\t\"items\": {",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t\"properties\": {",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"URL\": {",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"format\": \"uri\",",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"type\": \"string\"",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"type\": {",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"enum\": [",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"OBO\",",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"RDF\",",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"WEBPAGE\"",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t],",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"type\": \"string\"",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t\t}",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t\"type\": \"object\"",
									"\t\t\t\t\t\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\t\t\t\t\t\"type\": \"array\"",
									"\t\t\t\t\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\t\t\t\t\"ontologyDbId\": {",
									"\t\t\t\t\t\t\t\t\t\t\t\t\"type\": \"string\"",
									"\t\t\t\t\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\t\t\t\t\"ontologyName\": {",
									"\t\t\t\t\t\t\t\t\t\t\t\t\"type\": \"string\"",
									"\t\t\t\t\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\t\t\t\t\"version\": {",
									"\t\t\t\t\t\t\t\t\t\t\t\t\"type\": [",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t\"null\",",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t\"string\"",
									"\t\t\t\t\t\t\t\t\t\t\t\t]",
									"\t\t\t\t\t\t\t\t\t\t\t}",
									"\t\t\t\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\t\t\t\"required\": [",
									"\t\t\t\t\t\t\t\t\t\t\t\"ontologyName\",",
									"\t\t\t\t\t\t\t\t\t\t\t\"ontologyDbId\"",
									"\t\t\t\t\t\t\t\t\t\t],",
									"\t\t\t\t\t\t\t\t\t\t\"type\": \"object\"",
									"\t\t\t\t\t\t\t\t\t}",
									"\t\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\t\"type\": \"object\"",
									"\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\"ontologyReference\": {",
									"\t\t\t\t\t\t\t\t\"properties\": {",
									"\t\t\t\t\t\t\t\t\t\"documentationLinks\": {",
									"\t\t\t\t\t\t\t\t\t\t\"description\": \"links to various ontology documentation\",",
									"\t\t\t\t\t\t\t\t\t\t\"items\": {",
									"\t\t\t\t\t\t\t\t\t\t\t\"properties\": {",
									"\t\t\t\t\t\t\t\t\t\t\t\t\"URL\": {",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t\"format\": \"uri\",",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t\"type\": [",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"string\",",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"null\"",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t]",
									"\t\t\t\t\t\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\t\t\t\t\t\"type\": {",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t\"enum\": [",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"OBO\",",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"RDF\",",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"WEBPAGE\"",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t],",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t\"type\": [",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"string\",",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"null\"",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t]",
									"\t\t\t\t\t\t\t\t\t\t\t\t}",
									"\t\t\t\t\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\t\t\t\t\"type\": \"object\"",
									"\t\t\t\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\t\t\t\"type\": \"array\"",
									"\t\t\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\t\t\"ontologyDbId\": {",
									"\t\t\t\t\t\t\t\t\t\t\"type\": \"string\"",
									"\t\t\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\t\t\"ontologyName\": {",
									"\t\t\t\t\t\t\t\t\t\t\"type\": \"string\"",
									"\t\t\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\t\t\"version\": {",
									"\t\t\t\t\t\t\t\t\t\t\"type\": [",
									"\t\t\t\t\t\t\t\t\t\t\t\"string\",",
									"\t\t\t\t\t\t\t\t\t\t\t\"null\"",
									"\t\t\t\t\t\t\t\t\t\t]",
									"\t\t\t\t\t\t\t\t\t}",
									"\t\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\t\"required\": [",
									"\t\t\t\t\t\t\t\t\t\"ontologyName\",",
									"\t\t\t\t\t\t\t\t\t\"ontologyDbId\"",
									"\t\t\t\t\t\t\t\t],",
									"\t\t\t\t\t\t\t\t\"type\": \"object\"",
									"\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\"scale\": {",
									"\t\t\t\t\t\t\t\t\"properties\": {",
									"\t\t\t\t\t\t\t\t\t\"additionalInfo\": {",
									"\t\t\t\t\t\t\t\t\t\t\"additionalProperties\": {",
									"\t\t\t\t\t\t\t\t\t\t\t\"type\": \"string\"",
									"\t\t\t\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\t\t\t\"type\": \"object\"",
									"\t\t\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\t\t\"dataType\": {",
									"\t\t\t\t\t\t\t\t\t\t\"enum\": [",
									"\t\t\t\t\t\t\t\t\t\t\t\"Code\",",
									"\t\t\t\t\t\t\t\t\t\t\t\"Date\",",
									"\t\t\t\t\t\t\t\t\t\t\t\"Duration\",",
									"\t\t\t\t\t\t\t\t\t\t\t\"Nominal\",",
									"\t\t\t\t\t\t\t\t\t\t\t\"Numerical\",",
									"\t\t\t\t\t\t\t\t\t\t\t\"Ordinal\",",
									"\t\t\t\t\t\t\t\t\t\t\t\"Text\"",
									"\t\t\t\t\t\t\t\t\t\t],",
									"\t\t\t\t\t\t\t\t\t\t\"type\": \"string\"",
									"\t\t\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\t\t\"decimalPlaces\": {",
									"\t\t\t\t\t\t\t\t\t\t\"type\": [",
									"\t\t\t\t\t\t\t\t\t\t\t\"null\",",
									"\t\t\t\t\t\t\t\t\t\t\t\"integer\"",
									"\t\t\t\t\t\t\t\t\t\t]",
									"\t\t\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\t\t\"externalReferences\": {",
									"\t\t\t\t\t\t\t\t\t\t\"items\": {",
									"\t\t\t\t\t\t\t\t\t\t\t\"properties\": {",
									"\t\t\t\t\t\t\t\t\t\t\t\t\"referenceID\": {",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t\"type\": [",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"null\",",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"string\"",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t]",
									"\t\t\t\t\t\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\t\t\t\t\t\"referenceSource\": {",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t\"type\": [",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"null\",",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"string\"",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t]",
									"\t\t\t\t\t\t\t\t\t\t\t\t}",
									"\t\t\t\t\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\t\t\t\t\"type\": \"object\"",
									"\t\t\t\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\t\t\t\"title\": \"ExternalReferences\",",
									"\t\t\t\t\t\t\t\t\t\t\"type\": [",
									"\t\t\t\t\t\t\t\t\t\t\t\"null\",",
									"\t\t\t\t\t\t\t\t\t\t\t\"array\"",
									"\t\t\t\t\t\t\t\t\t\t]",
									"\t\t\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\t\t\"ontologyReference\": {",
									"\t\t\t\t\t\t\t\t\t\t\"properties\": {",
									"\t\t\t\t\t\t\t\t\t\t\t\"documentationLinks\": {",
									"\t\t\t\t\t\t\t\t\t\t\t\t\"items\": {",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t\"properties\": {",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"URL\": {",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"format\": \"uri\",",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"type\": \"string\"",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"type\": {",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"enum\": [",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"OBO\",",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"RDF\",",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"WEBPAGE\"",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t],",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"type\": \"string\"",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t\t}",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t\"type\": \"object\"",
									"\t\t\t\t\t\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\t\t\t\t\t\"type\": \"array\"",
									"\t\t\t\t\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\t\t\t\t\"ontologyDbId\": {",
									"\t\t\t\t\t\t\t\t\t\t\t\t\"type\": \"string\"",
									"\t\t\t\t\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\t\t\t\t\"ontologyName\": {",
									"\t\t\t\t\t\t\t\t\t\t\t\t\"type\": \"string\"",
									"\t\t\t\t\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\t\t\t\t\"version\": {",
									"\t\t\t\t\t\t\t\t\t\t\t\t\"type\": [",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t\"null\",",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t\"string\"",
									"\t\t\t\t\t\t\t\t\t\t\t\t]",
									"\t\t\t\t\t\t\t\t\t\t\t}",
									"\t\t\t\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\t\t\t\"required\": [",
									"\t\t\t\t\t\t\t\t\t\t\t\"ontologyName\",",
									"\t\t\t\t\t\t\t\t\t\t\t\"ontologyDbId\"",
									"\t\t\t\t\t\t\t\t\t\t],",
									"\t\t\t\t\t\t\t\t\t\t\"type\": \"object\"",
									"\t\t\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\t\t\"scaleDbId\": {",
									"\t\t\t\t\t\t\t\t\t\t\"type\": \"string\"",
									"\t\t\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\t\t\"scaleName\": {",
									"\t\t\t\t\t\t\t\t\t\t\"type\": \"string\"",
									"\t\t\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\t\t\"validValues\": {",
									"\t\t\t\t\t\t\t\t\t\t\"properties\": {",
									"\t\t\t\t\t\t\t\t\t\t\t\"categories\": {",
									"\t\t\t\t\t\t\t\t\t\t\t\t\"items\": {",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t\"properties\": {",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"label\": {",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"type\": \"string\"",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"value\": {",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"type\": \"string\"",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t\t}",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t\"type\": \"object\"",
									"\t\t\t\t\t\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\t\t\t\t\t\"type\": [",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t\"null\",",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t\"array\"",
									"\t\t\t\t\t\t\t\t\t\t\t\t]",
									"\t\t\t\t\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\t\t\t\t\"max\": {",
									"\t\t\t\t\t\t\t\t\t\t\t\t\"type\": [",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t\"null\",",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t\"integer\"",
									"\t\t\t\t\t\t\t\t\t\t\t\t]",
									"\t\t\t\t\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\t\t\t\t\"min\": {",
									"\t\t\t\t\t\t\t\t\t\t\t\t\"type\": [",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t\"null\",",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t\"integer\"",
									"\t\t\t\t\t\t\t\t\t\t\t\t]",
									"\t\t\t\t\t\t\t\t\t\t\t}",
									"\t\t\t\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\t\t\t\"type\": \"object\"",
									"\t\t\t\t\t\t\t\t\t}",
									"\t\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\t\"type\": \"object\"",
									"\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\"scientist\": {",
									"\t\t\t\t\t\t\t\t\"type\": [",
									"\t\t\t\t\t\t\t\t\t\"null\",",
									"\t\t\t\t\t\t\t\t\t\"string\"",
									"\t\t\t\t\t\t\t\t]",
									"\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\"status\": {",
									"\t\t\t\t\t\t\t\t\"type\": [",
									"\t\t\t\t\t\t\t\t\t\"null\",",
									"\t\t\t\t\t\t\t\t\t\"string\"",
									"\t\t\t\t\t\t\t\t]",
									"\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\"submissionTimestamp\": {",
									"\t\t\t\t\t\t\t\t\"format\": \"date-time\",",
									"\t\t\t\t\t\t\t\t\"type\": [",
									"\t\t\t\t\t\t\t\t\t\"null\",",
									"\t\t\t\t\t\t\t\t\t\"string\"",
									"\t\t\t\t\t\t\t\t]",
									"\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\"synonyms\": {",
									"\t\t\t\t\t\t\t\t\"items\": {",
									"\t\t\t\t\t\t\t\t\t\"type\": \"string\"",
									"\t\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\t\"type\": \"array\"",
									"\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\"trait\": {",
									"\t\t\t\t\t\t\t\t\"properties\": {",
									"\t\t\t\t\t\t\t\t\t\"additionalInfo\": {",
									"\t\t\t\t\t\t\t\t\t\t\"additionalProperties\": {",
									"\t\t\t\t\t\t\t\t\t\t\t\"type\": \"string\"",
									"\t\t\t\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\t\t\t\"type\": \"object\"",
									"\t\t\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\t\t\"alternativeAbbreviations\": {",
									"\t\t\t\t\t\t\t\t\t\t\"items\": {",
									"\t\t\t\t\t\t\t\t\t\t\t\"type\": \"string\"",
									"\t\t\t\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\t\t\t\"type\": \"array\"",
									"\t\t\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\t\t\"attribute\": {",
									"\t\t\t\t\t\t\t\t\t\t\"type\": [",
									"\t\t\t\t\t\t\t\t\t\t\t\"null\",",
									"\t\t\t\t\t\t\t\t\t\t\t\"string\"",
									"\t\t\t\t\t\t\t\t\t\t]",
									"\t\t\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\t\t\"entity\": {",
									"\t\t\t\t\t\t\t\t\t\t\"type\": [",
									"\t\t\t\t\t\t\t\t\t\t\t\"null\",",
									"\t\t\t\t\t\t\t\t\t\t\t\"string\"",
									"\t\t\t\t\t\t\t\t\t\t]",
									"\t\t\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\t\t\"externalReferences\": {",
									"\t\t\t\t\t\t\t\t\t\t\"items\": {",
									"\t\t\t\t\t\t\t\t\t\t\t\"properties\": {",
									"\t\t\t\t\t\t\t\t\t\t\t\t\"referenceID\": {",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t\"type\": [",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"null\",",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"string\"",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t]",
									"\t\t\t\t\t\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\t\t\t\t\t\"referenceSource\": {",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t\"type\": [",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"null\",",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"string\"",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t]",
									"\t\t\t\t\t\t\t\t\t\t\t\t}",
									"\t\t\t\t\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\t\t\t\t\"type\": \"object\"",
									"\t\t\t\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\t\t\t\"title\": \"ExternalReferences\",",
									"\t\t\t\t\t\t\t\t\t\t\"type\": [",
									"\t\t\t\t\t\t\t\t\t\t\t\"null\",",
									"\t\t\t\t\t\t\t\t\t\t\t\"array\"",
									"\t\t\t\t\t\t\t\t\t\t]",
									"\t\t\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\t\t\"mainAbbreviation\": {",
									"\t\t\t\t\t\t\t\t\t\t\"type\": [",
									"\t\t\t\t\t\t\t\t\t\t\t\"null\",",
									"\t\t\t\t\t\t\t\t\t\t\t\"string\"",
									"\t\t\t\t\t\t\t\t\t\t]",
									"\t\t\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\t\t\"ontologyReference\": {",
									"\t\t\t\t\t\t\t\t\t\t\"properties\": {",
									"\t\t\t\t\t\t\t\t\t\t\t\"documentationLinks\": {",
									"\t\t\t\t\t\t\t\t\t\t\t\t\"description\": \"links to various ontology documentation\",",
									"\t\t\t\t\t\t\t\t\t\t\t\t\"items\": {",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t\"properties\": {",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"URL\": {",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"format\": \"uri\",",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"type\": \"string\"",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"type\": {",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"enum\": [",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"OBO\",",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"RDF\",",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"WEBPAGE\"",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t],",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"type\": \"string\"",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t\t}",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t\"type\": \"object\"",
									"\t\t\t\t\t\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\t\t\t\t\t\"type\": \"array\"",
									"\t\t\t\t\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\t\t\t\t\"ontologyDbId\": {",
									"\t\t\t\t\t\t\t\t\t\t\t\t\"type\": \"string\"",
									"\t\t\t\t\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\t\t\t\t\"ontologyName\": {",
									"\t\t\t\t\t\t\t\t\t\t\t\t\"type\": \"string\"",
									"\t\t\t\t\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\t\t\t\t\"version\": {",
									"\t\t\t\t\t\t\t\t\t\t\t\t\"type\": [",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t\"null\",",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t\"string\"",
									"\t\t\t\t\t\t\t\t\t\t\t\t]",
									"\t\t\t\t\t\t\t\t\t\t\t}",
									"\t\t\t\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\t\t\t\"required\": [",
									"\t\t\t\t\t\t\t\t\t\t\t\"ontologyName\",",
									"\t\t\t\t\t\t\t\t\t\t\t\"ontologyDbId\"",
									"\t\t\t\t\t\t\t\t\t\t],",
									"\t\t\t\t\t\t\t\t\t\t\"type\": \"object\"",
									"\t\t\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\t\t\"status\": {",
									"\t\t\t\t\t\t\t\t\t\t\"type\": \"string\"",
									"\t\t\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\t\t\"synonyms\": {",
									"\t\t\t\t\t\t\t\t\t\t\"items\": {",
									"\t\t\t\t\t\t\t\t\t\t\t\"type\": \"string\"",
									"\t\t\t\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\t\t\t\"type\": \"array\"",
									"\t\t\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\t\t\"traitClass\": {",
									"\t\t\t\t\t\t\t\t\t\t\"type\": \"string\"",
									"\t\t\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\t\t\"traitDbId\": {",
									"\t\t\t\t\t\t\t\t\t\t\"type\": \"string\"",
									"\t\t\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\t\t\"traitDescription\": {",
									"\t\t\t\t\t\t\t\t\t\t\"type\": \"string\"",
									"\t\t\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\t\t\"traitName\": {",
									"\t\t\t\t\t\t\t\t\t\t\"type\": \"string\"",
									"\t\t\t\t\t\t\t\t\t}",
									"\t\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\t\"minItems\": 1,",
									"\t\t\t\t\t\t\t\t\"type\": \"object\"",
									"\t\t\t\t\t\t\t}",
									"\t\t\t\t\t\t}",
									"\t\t\t\t\t},",
									"\t\t\t\t\t\"minItems\": 1,",
									"\t\t\t\t\t\"type\": \"array\"",
									"\t\t\t\t}",
									"\t\t\t},",
									"\t\t\t\"required\": [",
									"\t\t\t\t\"data\"",
									"\t\t\t],",
									"\t\t\t\"type\": \"object\"",
									"\t\t}",
									"\t}",
									"}",
									"  ",
									"pm.environment.unset(\"AttributeSchema_v2\");",
									"pm.environment.set(\"AttributeSchema_v2\", JSON.stringify(AttributeSchema));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{masterToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"attributeDbIds\": [\n    \"100647\"\n  ]\n}"
						},
						"url": {
							"raw": "{{BMSurl}}/{{crop}}/brapi/v2/search/attributes",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"{{crop}}",
								"brapi",
								"v2",
								"search",
								"attributes"
							]
						},
						"description": "POST ​/{crop}​/brapi​/v2​/search​/observationunits"
					},
					"response": []
				},
				{
					"name": "GET ​/{crop}​/brapi​/v2​/search​/attribute​/{searchResultsDbId}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const AttributeSchema_v2 = JSON.parse(pm.environment.get(\"AttributeSchema_v2\"));\r",
									"pm.test(\"Validate schema\", () => {\r",
									"    pm.response.to.have.jsonSchema(AttributeSchema_v2);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{masterToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BMSurl}}/{{crop}}/brapi/v2/search/attribute/{{searchResultDbId2_attribute}}",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"{{crop}}",
								"brapi",
								"v2",
								"search",
								"attribute",
								"{{searchResultDbId2_attribute}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST /search/attributevalues",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"    var jsonData = pm.response.json();",
									"    pm.environment.unset(\"searchResultDbId2_attributevalues\");",
									"    pm.environment.set(\"searchResultDbId2_attributevalues\", jsonData.result.searchResultsDbId);",
									"",
									"const AttributeValuesSchema = {",
									"\t\"type\": \"object\",",
									"\t\"required\": [",
									"\t\t\"metadata\",",
									"\t\t\"result\"",
									"\t],",
									"\t\"properties\": {",
									"\t\t\"metadata\": {",
									"\t\t\t\"type\": \"object\",",
									"\t\t\t\"required\": [",
									"\t\t\t\t\"pagination\",",
									"\t\t\t\t\"status\",",
									"\t\t\t\t\"datafiles\"",
									"\t\t\t],",
									"\t\t\t\"properties\": {",
									"\t\t\t\t\"pagination\": {",
									"\t\t\t\t\t\"type\": \"object\",",
									"\t\t\t\t\t\"required\": [",
									"\t\t\t\t\t\t\"currentPage\",",
									"\t\t\t\t\t\t\"pageSize\",",
									"\t\t\t\t\t\t\"totalCount\",",
									"\t\t\t\t\t\t\"totalPages\"",
									"\t\t\t\t\t],",
									"\t\t\t\t\t\"properties\": {",
									"\t\t\t\t\t\t\"currentPage\": {",
									"\t\t\t\t\t\t\t\"type\": \"integer\"",
									"\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\"pageSize\": {",
									"\t\t\t\t\t\t\t\"type\": \"integer\"",
									"\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\"totalCount\": {",
									"\t\t\t\t\t\t\t\"type\": \"integer\"",
									"\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\"totalPages\": {",
									"\t\t\t\t\t\t\t\"type\": \"integer\"",
									"\t\t\t\t\t\t}",
									"\t\t\t\t\t}",
									"\t\t\t\t},",
									"\t\t\t\t\"status\": {",
									"\t\t\t\t\t\"type\": \"array\"",
									"\t\t\t\t},",
									"\t\t\t\t\"datafiles\": {",
									"\t\t\t\t\t\"type\": \"array\"",
									"\t\t\t\t}",
									"\t\t\t}",
									"\t\t},",
									"\t\t\"result\": {",
									"\t\t\t\"properties\": {",
									"\t\t\t\t\"data\": {",
									"\t\t\t\t\t\"items\": {",
									"\t\t\t\t\t\t\"required\": [",
									"\t\t\t\t\t\t\t\"additionalInfo\",",
									"\t\t\t\t\t\t\t\"attributeValueDbId\",",
									"\t\t\t\t\t\t\t\"attributeDbId\",",
									"\t\t\t\t\t\t\t\"attributeName\",",
									"\t\t\t\t\t\t\t\"determinedDate\",",
									"\t\t\t\t\t\t\t\"externalReferences\",",
									"\t\t\t\t\t\t\t\"germplasmDbId\",",
									"\t\t\t\t\t\t\t\"germplasmName\",",
									"\t\t\t\t\t\t\t\"value\"",
									"\t\t\t\t\t\t],",
									"\t\t\t\t\t\t\"properties\": {",
									"\t\t\t\t\t\t\t\"additionalInfo\": {",
									"\t\t\t\t\t\t\t\t\"type\": \"object\",",
									"\t\t\t\t\t\t\t\t\"properties\": {",
									"\t\t\t\t\t\t\t\t\t\"locationDbId\": {",
									"\t\t\t\t\t\t\t\t\t\t\"type\": \"string\"",
									"\t\t\t\t\t\t\t\t\t}",
									"\t\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\t\"required\": [",
									"\t\t\t\t\t\t\t\t\t\"locationDbId\"",
									"\t\t\t\t\t\t\t\t]",
									"\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\"attributeDbId\": {",
									"\t\t\t\t\t\t\t\t\"type\": \"string\"",
									"\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\"attributeName\": {",
									"\t\t\t\t\t\t\t\t\"type\": \"string\"",
									"\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\"attributeValueDbId\": {",
									"\t\t\t\t\t\t\t\t\"type\": \"string\"",
									"\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\"determinedDate\": {",
									"\t\t\t\t\t\t\t\t\"format\": \"date-time\",",
									"\t\t\t\t\t\t\t\t\"type\": \"string\"",
									"\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\"externalReferences\": {",
									"\t\t\t\t\t\t\t\t\"description\": \"An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI.\",",
									"\t\t\t\t\t\t\t\t\"items\": {",
									"\t\t\t\t\t\t\t\t\t\"properties\": {",
									"\t\t\t\t\t\t\t\t\t\t\"referenceID\": {",
									"\t\t\t\t\t\t\t\t\t\t\t\"description\": \"The external reference ID. Could be a simple string or a URI.\",",
									"\t\t\t\t\t\t\t\t\t\t\t\"type\": [",
									"\t\t\t\t\t\t\t\t\t\t\t\t\"null\",",
									"\t\t\t\t\t\t\t\t\t\t\t\t\"string\"",
									"\t\t\t\t\t\t\t\t\t\t\t]",
									"\t\t\t\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\t\t\t\"referenceSource\": {",
									"\t\t\t\t\t\t\t\t\t\t\t\"description\": \"An identifier for the source system or database of this reference\",",
									"\t\t\t\t\t\t\t\t\t\t\t\"type\": [",
									"\t\t\t\t\t\t\t\t\t\t\t\t\"null\",",
									"\t\t\t\t\t\t\t\t\t\t\t\t\"string\"",
									"\t\t\t\t\t\t\t\t\t\t\t]",
									"\t\t\t\t\t\t\t\t\t\t}",
									"\t\t\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\t\t\"type\": \"object\"",
									"\t\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\t\"title\": \"ExternalReferences\",",
									"\t\t\t\t\t\t\t\t\"type\": [",
									"\t\t\t\t\t\t\t\t\t\"null\",",
									"\t\t\t\t\t\t\t\t\t\"array\"",
									"\t\t\t\t\t\t\t\t]",
									"\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\"germplasmDbId\": {",
									"\t\t\t\t\t\t\t\t\"type\": \"string\"",
									"\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\"germplasmName\": {",
									"\t\t\t\t\t\t\t\t\"type\": \"string\"",
									"\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\"value\": {",
									"\t\t\t\t\t\t\t\t\"type\": \"string\"",
									"\t\t\t\t\t\t\t}",
									"\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\"type\": \"object\"",
									"\t\t\t\t\t},",
									"\t\t\t\t\t\"minItems\": 1,",
									"\t\t\t\t\t\"type\": \"array\"",
									"\t\t\t\t}",
									"\t\t\t},",
									"\t\t\t\"required\": [",
									"\t\t\t\t\"data\"",
									"\t\t\t],",
									"\t\t\t\"type\": \"object\"",
									"\t\t}",
									"\t}",
									"}",
									"  ",
									"pm.environment.unset(\"AttributeValuesSchema_v2\");",
									"pm.environment.set(\"AttributeValuesSchema_v2\", JSON.stringify(AttributeValuesSchema));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{masterToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"attributeDbIds\": [\n    \"100647\"\n  ]\n}"
						},
						"url": {
							"raw": "{{BMSurl}}/{{crop}}/brapi/v2/search/attributevalues",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"{{crop}}",
								"brapi",
								"v2",
								"search",
								"attributevalues"
							]
						},
						"description": "POST ​/{crop}​/brapi​/v2​/search​/observationunits"
					},
					"response": []
				},
				{
					"name": "GET /search/attributevalues/{searchResultsDbId}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const AttributeValuesSchema_v2 = JSON.parse(pm.environment.get(\"AttributeValuesSchema_v2\"));\r",
									"pm.test(\"Validate schema\", () => {\r",
									"    pm.response.to.have.jsonSchema(AttributeValuesSchema_v2);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{masterToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BMSurl}}/{{crop}}/brapi/v2/search/attributevalues/{{searchResultDbId2_attributevalues}}",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"{{crop}}",
								"brapi",
								"v2",
								"search",
								"attributevalues",
								"{{searchResultDbId2_attributevalues}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "v1",
			"item": [
				{
					"name": "POST v1/search/germplasm",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"    var jsonData = pm.response.json();",
									"    pm.environment.unset(\"searchResultDbId_germplasm\");",
									"    pm.environment.set(\"searchResultDbId_germplasm\", jsonData.result.searchResultDbId);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{masterToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"accessionNumbers\": [\r\n    \"ACCNO1\"\r\n  ]\r\n}"
						},
						"url": {
							"raw": "{{BMSurl}}/{{crop}}/brapi/v1/search/germplasm",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"{{crop}}",
								"brapi",
								"v1",
								"search",
								"germplasm"
							]
						},
						"description": "POST /{crop}/brapi/v1/search/germplasm"
					},
					"response": []
				},
				{
					"name": "GET v1/search/germplasm/{searchResultsDbid}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const GermplasmSchema = {\r",
									"    //TODO: To add Germplasm json schema here\r",
									"}\r",
									"\r",
									"pm.test(\"Validate schema\", () => {\r",
									"    pm.response.to.have.jsonSchema(GermplasmSchema);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{masterToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BMSurl}}/{{crop}}/brapi/v1/search/germplasm/{{searchResultDbId_germplasm}}?page=0&pageSize=100",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"{{crop}}",
								"brapi",
								"v1",
								"search",
								"germplasm",
								"{{searchResultDbId_germplasm}}"
							],
							"query": [
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "pageSize",
									"value": "100"
								}
							]
						},
						"description": "GET /{crop}/brapi/v1/search/germplasm/{searchResultsDbid}"
					},
					"response": []
				},
				{
					"name": "POST v1​/phenotypes-search",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const PhenotypeSchema = {",
									"\t\"type\": \"object\",",
									"\t\"required\": [",
									"\t\t\"metadata\",",
									"\t\t\"result\"",
									"\t],",
									"\t\"properties\": {",
									"\t\t\"metadata\": {",
									"\t\t\t\"type\": \"object\",",
									"\t\t\t\"required\": [",
									"\t\t\t\t\"pagination\",",
									"\t\t\t\t\"status\",",
									"\t\t\t\t\"datafiles\"",
									"\t\t\t],",
									"\t\t\t\"properties\": {",
									"\t\t\t\t\"pagination\": {",
									"\t\t\t\t\t\"type\": \"object\",",
									"\t\t\t\t\t\"required\": [",
									"\t\t\t\t\t\t\"currentPage\",",
									"\t\t\t\t\t\t\"pageSize\",",
									"\t\t\t\t\t\t\"totalCount\",",
									"\t\t\t\t\t\t\"totalPages\"",
									"\t\t\t\t\t],",
									"\t\t\t\t\t\"properties\": {",
									"\t\t\t\t\t\t\"currentPage\": {",
									"\t\t\t\t\t\t\t\"type\": \"integer\"",
									"\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\"pageSize\": {",
									"\t\t\t\t\t\t\t\"type\": \"integer\"",
									"\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\"totalCount\": {",
									"\t\t\t\t\t\t\t\"type\": \"integer\"",
									"\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\"totalPages\": {",
									"\t\t\t\t\t\t\t\"type\": \"integer\"",
									"\t\t\t\t\t\t}",
									"\t\t\t\t\t}",
									"\t\t\t\t},",
									"\t\t\t\t\"status\": {",
									"\t\t\t\t\t\"type\": \"array\"",
									"\t\t\t\t},",
									"\t\t\t\t\"datafiles\": {",
									"\t\t\t\t\t\"type\": \"array\"",
									"\t\t\t\t}",
									"\t\t\t}",
									"\t\t},",
									"\t\t\"result\": {",
									"\t\t\t\"properties\": {",
									"\t\t\t\t\"data\": {",
									"\t\t\t\t\t\"items\": {",
									"\t\t\t\t\t\t\"required\": [",
									"\t\t\t\t\t\t\t\"observationUnitDbId\",",
									"\t\t\t\t\t\t\t\"observationUnitName\",",
									"\t\t\t\t\t\t\t\"observationLevel\",",
									"\t\t\t\t\t\t\t\"observationLevels\",",
									"\t\t\t\t\t\t\t\"germplasmDbId\",",
									"\t\t\t\t\t\t\t\"germplasmName\",",
									"\t\t\t\t\t\t\t\"studyDbId\",",
									"\t\t\t\t\t\t\t\"studyName\",",
									"\t\t\t\t\t\t\t\"studyLocationDbId\",",
									"\t\t\t\t\t\t\t\"studyLocation\",",
									"\t\t\t\t\t\t\t\"programName\",",
									"\t\t\t\t\t\t\t\"x\",",
									"\t\t\t\t\t\t\t\"y\",",
									"\t\t\t\t\t\t\t\"entryType\",",
									"\t\t\t\t\t\t\t\"entryNumber\",",
									"\t\t\t\t\t\t\t\"observations\"",
									"\t\t\t\t\t\t],",
									"\t\t\t\t\t\t\"properties\": {",
									"\t\t\t\t\t\t\t\"observationUnitDbId\": {",
									"\t\t\t\t\t\t\t\t\"type\": \"string\"",
									"\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\"observationUnitName\":{",
									"\t\t\t\t\t\t\t\t\"type\": \"string\"",
									"\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\"observationLevel\":{",
									"\t\t\t\t\t\t\t\t\"type\": \"string\"",
									"\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\"plotNumber\":{",
									"\t\t\t\t\t\t\t\t\"type\": [",
									"\t\t\t\t\t\t\t\t\t\"null\",",
									"\t\t\t\t\t\t\t\t\t\"string\"",
									"\t\t\t\t\t\t\t\t\t]",
									"\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\"plantNumber\":{",
									"\t\t\t\t\t\t\t\t\"type\": [",
									"\t\t\t\t\t\t\t\t\t\"null\",",
									"\t\t\t\t\t\t\t\t\t\"string\"",
									"\t\t\t\t\t\t\t\t\t]",
									"\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\"blockNumber\":{",
									"\t\t\t\t\t\t\t\t\"type\": [",
									"\t\t\t\t\t\t\t\t\t\"null\",",
									"\t\t\t\t\t\t\t\t\t\"string\"",
									"\t\t\t\t\t\t\t\t\t]",
									"\t\t\t\t\t\t\t},\t",
									"\t\t\t\t\t\t\t\"replicate\":{",
									"\t\t\t\t\t\t\t\t\"type\": [",
									"\t\t\t\t\t\t\t\t\t\"null\",",
									"\t\t\t\t\t\t\t\t\t\"string\"",
									"\t\t\t\t\t\t\t\t\t]",
									"\t\t\t\t\t\t\t},\t",
									"\t\t\t\t\t\t\t\"germplasmDbId\":{",
									"\t\t\t\t\t\t\t\t\"type\": \"string\"",
									"\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\"germplasmName\":{",
									"\t\t\t\t\t\t\t\t\"type\": \"string\"",
									"\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\"studyName\":{",
									"\t\t\t\t\t\t\t\t\"type\": \"string\"",
									"\t\t\t\t\t\t\t},\t",
									"\t\t\t\t\t\t\t\"studyLocationDbId\":{",
									"\t\t\t\t\t\t\t\t\"type\": \"string\"",
									"\t\t\t\t\t\t\t},\t",
									"\t\t\t\t\t\t\t\"studyLocation\":{",
									"\t\t\t\t\t\t\t\t\"type\": \"string\"",
									"\t\t\t\t\t\t\t},\t",
									"\t\t\t\t\t\t\t\"programName\":{",
									"\t\t\t\t\t\t\t\t\"type\": \"string\"",
									"\t\t\t\t\t\t\t},\t",
									"\t\t\t\t\t\t\t\"x\":{",
									"\t\t\t\t\t\t\t\t\"type\": [",
									"\t\t\t\t\t\t\t\t\t\"null\",",
									"\t\t\t\t\t\t\t\t\t\"string\"",
									"\t\t\t\t\t\t\t\t\t]",
									"\t\t\t\t\t\t\t},\t",
									"\t\t\t\t\t\t\t\"y\":{",
									"\t\t\t\t\t\t\t\t\"type\": [",
									"\t\t\t\t\t\t\t\t\t\"null\",",
									"\t\t\t\t\t\t\t\t\t\"string\"",
									"\t\t\t\t\t\t\t\t\t]",
									"\t\t\t\t\t\t\t},\t",
									"\t\t\t\t\t\t\t\"entryType\":{",
									"\t\t\t\t\t\t\t\t\"type\": \"string\"",
									"\t\t\t\t\t\t\t},\t",
									"\t\t\t\t\t\t\t\"entryNumber\":{",
									"\t\t\t\t\t\t\t\t\"type\": \"string\"",
									"\t\t\t\t\t\t\t},\t\t\t\t\t\t\t",
									"\t\t\t\t\t\t\t\"observations\": {",
									"\t\t\t\t\t\t\t\t\"items\": {",
									"\t\t\t\t\t\t\t\t\t\"properties\": {",
									"\t\t\t\t\t\t\t\t\t\t\"collector\": {",
									"\t\t\t\t\t\t\t\t\t\t\t\"type\": [",
									"\t\t\t\t\t\t\t\t\t\t\t\"null\",",
									"\t\t\t\t\t\t\t\t\t\t\t\"string\"",
									"\t\t\t\t\t\t\t\t\t\t\t]",
									"\t\t\t\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\t\t\t\"observationDbId\": {",
									"\t\t\t\t\t\t\t\t\t\t\t\"type\": \"string\"",
									"\t\t\t\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\t\t\t\"observationTimeStamp\": {",
									"\t\t\t\t\t\t\t\t\t\t\t\"format\": \"date-time\",",
									"\t\t\t\t\t\t\t\t\t\t\t\"type\": \"string\"",
									"\t\t\t\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\t\t\t\"observationVariableDbId\": {",
									"\t\t\t\t\t\t\t\t\t\t\t\"type\": \"string\"",
									"\t\t\t\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\t\t\t\"observationVariableName\": {",
									"\t\t\t\t\t\t\t\t\t\t\t\"type\": \"string\"",
									"\t\t\t\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\t\t\t\"season\": {",
									"\t\t\t\t\t\t\t\t\t\t\t\"properties\":{",
									"\t\t\t\t\t\t\t\t\t\t\t\t\"season\":{",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t\"type\": \"string\"",
									"\t\t\t\t\t\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\t\t\t\t\t\"seasonDbId\":{",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t\"type\": \"string\"",
									"\t\t\t\t\t\t\t\t\t\t\t\t}\t",
									"\t\t\t\t\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\t\t\t\t\"type\": \"object\"",
									"\t\t\t\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\t\t\t\"value\": {",
									"\t\t\t\t\t\t\t\t\t\t\t\"type\": \"string\"",
									"\t\t\t\t\t\t\t\t\t\t}",
									"\t\t\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\t\t\"required\": [",
									"\t\t\t\t\t\t\t\t\t\t\"observationVariableDbId\",",
									"\t\t\t\t\t\t\t\t\t\t\"observationVariableName\",",
									"\t\t\t\t\t\t\t\t\t\t\"collector\",",
									"\t\t\t\t\t\t\t\t\t\t\"observationTimeStamp\",",
									"\t\t\t\t\t\t\t\t\t\t\"value\"",
									"\t\t\t\t\t\t\t\t\t]",
									"\t\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\t\"type\": \"array\"",
									"\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\"studyDbId\": {",
									"\t\t\t\t\t\t\t\t\"type\": \"string\"",
									"\t\t\t\t\t\t\t}",
									"\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\"type\": \"object\"",
									"\t\t\t\t\t},",
									"\t\t\t\t\t\"minItems\": 1,",
									"\t\t\t\t\t\"type\": \"array\"",
									"\t\t\t\t}",
									"\t\t\t},",
									"\t\t\t\"required\": [",
									"\t\t\t\t\"data\"",
									"\t\t\t],",
									"\t\t\t\"type\": \"object\"",
									"\t\t}",
									"\t}",
									"}",
									"pm.environment.unset(\"PhenotypeSchema\");",
									"pm.environment.set(\"PhenotypeSchema\", JSON.stringify(PhenotypeSchema));",
									"    var jsonData = pm.response.json();",
									"    pm.test(\"Validate schema\", () => {",
									"    pm.response.to.have.jsonSchema(PhenotypeSchema);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{masterToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"observationLevel\": \"PLOT\",\n\t\"trialDbIds\": [\n\t\t\"{{trialStudyId}}\"\n\t]\n}"
						},
						"url": {
							"raw": "{{BMSurl}}/{{crop}}/brapi/v1/phenotypes-search",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"{{crop}}",
								"brapi",
								"v1",
								"phenotypes-search"
							]
						},
						"description": "POST /{crop}/brapi/v1/search/germplasm"
					},
					"response": []
				}
			]
		}
	]
}
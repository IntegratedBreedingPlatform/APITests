{
	"info": {
		"_postman_id": "fd0e4007-fdb4-4057-876d-b287294a759e",
		"name": "BRAPI",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "authentication-controller-brapi",
			"item": [
				{
					"name": "Get admin token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "93f01b3e-c5b4-4c59-a36d-44352de2e7a7",
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.environment.unset(\"masterToken\");",
									"pm.environment.set(\"masterToken\", jsonData.access_token);",
									"pm.environment.unset(\"masterTokenExpiry\");",
									"pm.environment.set(\"masterTokenExpiry\", jsonData.expires_in);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{masterToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"username\": \"{{bms_user}}\",\r\n  \"password\": \"{{bms_password}}\",\r\n  \"grant_type\": \"\",\r\n  \"client_id\": \"\"\r\n}"
						},
						"url": {
							"raw": "{{BMSurl}}/brapi/v1/token",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"brapi",
								"v1",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get test user token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bd5f7f6d-5e4a-405d-8117-53fa98d4d6a2",
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.environment.unset(\"testuser_token\");",
									"pm.environment.set(\"testuser_token\", jsonData.access_token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{masterToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"username\": \"apitestuser\",\r\n  \"password\": \"apitestuser\",\r\n  \"grant_type\": \"\",\r\n  \"client_id\": \"\"\r\n}"
						},
						"url": {
							"raw": "{{BMSurl}}/brapi/v1/token",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"brapi",
								"v1",
								"token"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "call-resource-brapi",
			"item": [
				{
					"name": "GET ​/brapi​/v1​/calls",
					"item": [
						{
							"name": "Verify calls with no specified format",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c3974ee6-24ae-458b-8dfa-dd4174753e48",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Check total call count\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.metadata.pagination.totalCount).to.eql(28);",
											"});",
											"",
											"",
											"pm.test(\"Check a call with json or application/json format\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[2].call).to.eql(\"locations\");",
											"    pm.expect(jsonData.result.data[2].dataTypes[0]).to.eql(\"application/json\");",
											"    pm.expect(jsonData.result.data[2].datatypes[0]).to.eql(\"json\");",
											"});",
											"",
											"pm.test(\"Check a call with tsv or text/tsv\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[8].call).to.eql(\"studies/{studyDbId}/table\");",
											"    pm.expect(jsonData.result.data[8].dataTypes[1]).to.eql(\"text/tsv\");",
											"    pm.expect(jsonData.result.data[8].datatypes[1]).to.eql(\"tsv\");",
											"    ",
											"});",
											"",
											"pm.test(\"Check if format of study table call is csv\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[8].call).to.eql(\"studies/{studyDbId}/table\");",
											"    pm.expect(jsonData.result.data[8].dataTypes[2]).to.eql(\"text/csv\");",
											"    pm.expect(jsonData.result.data[8].datatypes[2]).to.eql(\"csv\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ecf67253-081e-4346-8186-07354c41c152",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/brapi/v1/calls",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"brapi",
										"v1",
										"calls"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify calls with csv format",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "dda3a8dc-db86-4cd5-bae4-180b658767ba",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Check a study table call\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0].call).to.eql(\"studies/{studyDbId}/table\");",
											"        pm.expect(jsonData.result.data[0].datatypes[2]).to.eql(\"csv\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b07c67c7-89b6-4530-b8d0-99ee2c0bd6dd",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/brapi/v1/calls?dataType=csv",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"brapi",
										"v1",
										"calls"
									],
									"query": [
										{
											"key": "dataType",
											"value": "csv"
										}
									]
								},
								"description": "GET ​/brapi​/v1​/calls"
							},
							"response": []
						},
						{
							"name": "Verify calls tsv format",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a531861a-1ced-4225-9812-1ff8c66403f9",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Check a study table call\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0].call).to.eql(\"studies/{studyDbId}/table\");",
											"});",
											"",
											"pm.test(\"Check if format of samples call is tsv\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0].datatypes[1]).to.eql(\"tsv\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ec89e42a-742c-42a9-94a2-e55e5b04793c",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/brapi/v1/calls?dataType=tsv",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"brapi",
										"v1",
										"calls"
									],
									"query": [
										{
											"key": "dataType",
											"value": "tsv"
										}
									]
								},
								"description": "GET ​/brapi​/v1​/calls"
							},
							"response": []
						},
						{
							"name": "Verify calls with json format",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8bf48dd5-5d35-430f-aed5-3862d39f50a3",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Check a study table call\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[8].call).to.eql(\"studies/{studyDbId}/table\");",
											"});",
											"",
											"",
											"pm.test(\"Check if format of samples call is tsv\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[8].datatypes[0]).to.eql(\"json\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "83321d37-a741-4367-b979-39c1730bc4d9",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/brapi/v1/calls?dataType=json",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"brapi",
										"v1",
										"calls"
									],
									"query": [
										{
											"key": "dataType",
											"value": "json"
										}
									]
								},
								"description": "GET ​/brapi​/v1​/calls"
							},
							"response": []
						},
						{
							"name": "Verify calls with  text/csv format",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "835a2973-a7c1-4788-9e20-582a1413ba05",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Check total call count\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.metadata.pagination.totalCount).to.eql(1);",
											"});",
											"",
											"",
											"pm.test(\"Check a study table call\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0].call).to.eql(\"studies/{studyDbId}/table\");",
											"        pm.expect(jsonData.result.data[0].dataTypes[2]).to.eql(\"text/csv\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "25c3faad-db12-4c3b-868b-6af45d4b1ed5",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/brapi/v1/calls?dataType=text/csv",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"brapi",
										"v1",
										"calls"
									],
									"query": [
										{
											"key": "dataType",
											"value": "text/csv"
										}
									]
								},
								"description": "GET ​/brapi​/v1​/calls"
							},
							"response": []
						},
						{
							"name": "Verify calls with text/tsv format",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3e8ea3f4-a404-4ce3-9500-bf0c139ec668",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Check a study table call\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0].call).to.eql(\"studies/{studyDbId}/table\");",
											"});",
											"",
											"pm.test(\"Check if format of samples call is tsv\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0].dataTypes[1]).to.eql(\"text/tsv\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c2859280-8105-4fcc-9853-9f8756538bf0",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/brapi/v1/calls?dataType=text/tsv",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"brapi",
										"v1",
										"calls"
									],
									"query": [
										{
											"key": "dataType",
											"value": "text/tsv"
										}
									]
								},
								"description": "GET ​/brapi​/v1​/calls"
							},
							"response": []
						},
						{
							"name": "Verify calls with application/json format",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5f9bdb21-f8ef-48a8-8fe5-2abe8425c65d",
										"exec": [
											"pm.test(\"Status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Check total call count\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.metadata.pagination.totalCount).to.eql(28);",
											"});",
											"",
											"",
											"pm.test(\"Check token call\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0].call).to.eql(\"token\");",
											"    pm.expect(jsonData.result.data[0].dataTypes[0]).to.eql(\"application/json\");",
											"});",
											"pm.test(\"Check crops call\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[1].call).to.eql(\"crops\");",
											"    pm.expect(jsonData.result.data[1].dataTypes[0]).to.eql(\"application/json\");",
											"});",
											"pm.test(\"Check locations call\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[2].call).to.eql(\"locations\");",
											"    pm.expect(jsonData.result.data[2].dataTypes[0]).to.eql(\"application/json\");",
											"});",
											"pm.test(\"Check phenotypes-search call\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[3].call).to.eql(\"phenotypes-search\");",
											"    pm.expect(jsonData.result.data[3].dataTypes[0]).to.eql(\"application/json\");",
											"});",
											"pm.test(\"Check programs call\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[4].call).to.eql(\"programs\");",
											"    pm.expect(jsonData.result.data[4].dataTypes[0]).to.eql(\"application/json\");",
											"});",
											"pm.test(\"Check samples/{sampleId} call\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[5].call).to.eql(\"samples/{sampleId}\");",
											"    pm.expect(jsonData.result.data[5].dataTypes[0]).to.eql(\"application/json\");",
											"});",
											"//pm.test(\"Check studies call\", function() {",
											"//    var jsonData = pm.response.json();",
											"//    pm.expect(jsonData.result.data[6].call).to.eql(\"studies\");",
											"//    pm.expect(jsonData.result.data[6].dataTypes[0]).to.eql(\"application/json\");",
											"//});",
											"pm.test(\"Check studies/{studyDbId} call\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[7].call).to.eql(\"studies/{studyDbId}\");",
											"    pm.expect(jsonData.result.data[7].dataTypes[0]).to.eql(\"application/json\");",
											"});",
											"pm.test(\"Check studies/{studyDbId}/table call\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[8].call).to.eql(\"studies/{studyDbId}/table\");",
											"    pm.expect(jsonData.result.data[8].dataTypes[0]).to.eql(\"application/json\");",
											"});",
											"pm.test(\"Check trials call\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[9].call).to.eql(\"trials\");",
											"    pm.expect(jsonData.result.data[9].dataTypes[0]).to.eql(\"application/json\");",
											"});",
											"pm.test(\"Check calls call\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[11].call).to.eql(\"calls\");",
											"    pm.expect(jsonData.result.data[11].dataTypes[0]).to.eql(\"application/json\");",
											"});",
											"pm.test(\"Check germplasm-search call\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[12].call).to.eql(\"germplasm-search\");",
											"    pm.expect(jsonData.result.data[12].dataTypes[0]).to.eql(\"application/json\");",
											"});",
											"pm.test(\"Check germplasm/{germplasmDbId} call\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[13].call).to.eql(\"germplasm/{germplasmDbId}\");",
											"    pm.expect(jsonData.result.data[13].dataTypes[0]).to.eql(\"application/json\");",
											"});",
											"pm.test(\"Check germplasm/{germplasmDbId}/pedigree call\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[14].call).to.eql(\"germplasm/{germplasmDbId}/pedigree\");",
											"    pm.expect(jsonData.result.data[14].dataTypes[0]).to.eql(\"application/json\");",
											"});",
											"pm.test(\"Check germplasm/{germplasmDbId}/progeny call\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[15].call).to.eql(\"germplasm/{germplasmDbId}/progeny\");",
											"    pm.expect(jsonData.result.data[15].dataTypes[0]).to.eql(\"application/json\");",
											"});",
											"pm.test(\"Check search/germplasm call\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[16].call).to.eql(\"search/germplasm\");",
											"    pm.expect(jsonData.result.data[16].dataTypes[0]).to.eql(\"application/json\");",
											"});",
											"",
											"pm.test(\"Check search/germplasm/{searchResultsDbid} call\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[17].call).to.eql(\"search/germplasm/{searchResultsDbid}\");",
											"    pm.expect(jsonData.result.data[17].dataTypes[0]).to.eql(\"application/json\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "413dc95b-4d8d-4678-93b6-cad7ea780fa9",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/brapi/v1/calls?dataType=application/json",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"brapi",
										"v1",
										"calls"
									],
									"query": [
										{
											"key": "dataType",
											"value": "application/json"
										}
									]
								},
								"description": "GET ​/brapi​/v1​/calls"
							},
							"response": []
						},
						{
							"name": "Verify calls with application/flapjack",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ef5c0d28-fbc2-4cbf-b2e9-e7aeabcb2b34",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Check if format of samples call is tsv\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.metadata.status[0].message).to.eql(\"not found calls\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "59233f83-8e0f-484a-931a-32046647dfef",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/brapi/v1/calls?dataType=application/flapjack",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"brapi",
										"v1",
										"calls"
									],
									"query": [
										{
											"key": "dataType",
											"value": "application/flapjack"
										}
									]
								},
								"description": "GET ​/brapi​/v1​/calls"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "GET ​/{crop}/brapi​/v1​/calls",
					"item": [
						{
							"name": "Verify calls with no specified format",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7f9dbe64-bff8-4875-8e6e-a0d9221147b3",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Check total call count\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.metadata.pagination.totalCount).to.eql(28);",
											"});",
											"",
											"",
											"pm.test(\"Check a call with json or application/json format\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[2].call).to.eql(\"locations\");",
											"    pm.expect(jsonData.result.data[2].dataTypes[0]).to.eql(\"application/json\");",
											"    pm.expect(jsonData.result.data[2].datatypes[0]).to.eql(\"json\");",
											"});",
											"",
											"pm.test(\"Check a call with tsv or text/tsv\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[8].call).to.eql(\"studies/{studyDbId}/table\");",
											"    pm.expect(jsonData.result.data[8].dataTypes[1]).to.eql(\"text/tsv\");",
											"    pm.expect(jsonData.result.data[8].datatypes[1]).to.eql(\"tsv\");",
											"    ",
											"});",
											"",
											"pm.test(\"Check if format of study table call is csv\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[8].call).to.eql(\"studies/{studyDbId}/table\");",
											"    pm.expect(jsonData.result.data[8].dataTypes[2]).to.eql(\"text/csv\");",
											"    pm.expect(jsonData.result.data[8].datatypes[2]).to.eql(\"csv\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e6e0e4fd-1ec2-400d-aa44-021c56646f71",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/calls",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"calls"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify calls with csv format",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a2e69d23-3faa-4e3f-acb0-6197911241c0",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Check a study table call\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0].call).to.eql(\"studies/{studyDbId}/table\");",
											"        pm.expect(jsonData.result.data[0].datatypes[2]).to.eql(\"csv\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "70f8ab7a-37b9-4330-be0f-805c0026143d",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/calls?dataType=csv",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"calls"
									],
									"query": [
										{
											"key": "dataType",
											"value": "csv"
										}
									]
								},
								"description": "GET ​/brapi​/v1​/calls"
							},
							"response": []
						},
						{
							"name": "Verify calls tsv format",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0a9d5c65-2b97-480c-8312-eb4ecea8f6f1",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Check a study table call\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0].call).to.eql(\"studies/{studyDbId}/table\");",
											"});",
											"",
											"pm.test(\"Check if format of samples call is tsv\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0].datatypes[1]).to.eql(\"tsv\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "bb5df214-cf34-4505-8121-2d03f9a3e8b0",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/calls?dataType=tsv",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"calls"
									],
									"query": [
										{
											"key": "dataType",
											"value": "tsv"
										}
									]
								},
								"description": "GET ​/brapi​/v1​/calls"
							},
							"response": []
						},
						{
							"name": "Verify calls with json format",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6b4495b6-e748-4cec-a2cd-5a854c6bac7f",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Check a study table call\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[8].call).to.eql(\"studies/{studyDbId}/table\");",
											"});",
											"",
											"",
											"pm.test(\"Check if format of samples call is tsv\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[8].datatypes[0]).to.eql(\"json\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "3d456203-144f-47c1-a132-fafa52b0f9ca",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/calls?dataType=json",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"calls"
									],
									"query": [
										{
											"key": "dataType",
											"value": "json"
										}
									]
								},
								"description": "GET ​/brapi​/v1​/calls"
							},
							"response": []
						},
						{
							"name": "Verify calls with  text/csv format",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "99d5d6ae-1c50-4edd-ab29-c002a7241fcc",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Check total call count\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.metadata.pagination.totalCount).to.eql(1);",
											"});",
											"",
											"",
											"pm.test(\"Check a study table call\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0].call).to.eql(\"studies/{studyDbId}/table\");",
											"        pm.expect(jsonData.result.data[0].dataTypes[2]).to.eql(\"text/csv\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9ccb326c-c3f3-4a59-98b2-01cee919e918",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/calls?dataType=text/csv",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"calls"
									],
									"query": [
										{
											"key": "dataType",
											"value": "text/csv"
										}
									]
								},
								"description": "GET ​/brapi​/v1​/calls"
							},
							"response": []
						},
						{
							"name": "Verify calls with text/tsv format",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a73a44af-f497-4daa-bcbb-1e3f12ebcbd0",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Check a study table call\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0].call).to.eql(\"studies/{studyDbId}/table\");",
											"});",
											"",
											"pm.test(\"Check if format of samples call is tsv\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0].dataTypes[1]).to.eql(\"text/tsv\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "47216bad-ff65-46ab-8098-44336a73c246",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/calls?dataType=text/tsv",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"calls"
									],
									"query": [
										{
											"key": "dataType",
											"value": "text/tsv"
										}
									]
								},
								"description": "GET ​/brapi​/v1​/calls"
							},
							"response": []
						},
						{
							"name": "Verify calls with application/json format",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d090e920-235e-4342-ba3b-fdc0910a4b7d",
										"exec": [
											"pm.test(\"Status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Check total call count\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.metadata.pagination.totalCount).to.eql(28);",
											"});",
											"",
											"",
											"pm.test(\"Check token call\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0].call).to.eql(\"token\");",
											"    pm.expect(jsonData.result.data[0].dataTypes[0]).to.eql(\"application/json\");",
											"});",
											"pm.test(\"Check crops call\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[1].call).to.eql(\"crops\");",
											"    pm.expect(jsonData.result.data[1].dataTypes[0]).to.eql(\"application/json\");",
											"});",
											"pm.test(\"Check locations call\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[2].call).to.eql(\"locations\");",
											"    pm.expect(jsonData.result.data[2].dataTypes[0]).to.eql(\"application/json\");",
											"});",
											"pm.test(\"Check phenotypes-search call\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[3].call).to.eql(\"phenotypes-search\");",
											"    pm.expect(jsonData.result.data[3].dataTypes[0]).to.eql(\"application/json\");",
											"});",
											"pm.test(\"Check programs call\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[4].call).to.eql(\"programs\");",
											"    pm.expect(jsonData.result.data[4].dataTypes[0]).to.eql(\"application/json\");",
											"});",
											"pm.test(\"Check samples/{sampleId} call\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[5].call).to.eql(\"samples/{sampleId}\");",
											"    pm.expect(jsonData.result.data[5].dataTypes[0]).to.eql(\"application/json\");",
											"});",
											"//pm.test(\"Check studies call\", function() {",
											"//    var jsonData = pm.response.json();",
											"//    pm.expect(jsonData.result.data[6].call).to.eql(\"studies\");",
											"//    pm.expect(jsonData.result.data[6].dataTypes[0]).to.eql(\"application/json\");",
											"//});",
											"pm.test(\"Check studies/{studyDbId} call\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[7].call).to.eql(\"studies/{studyDbId}\");",
											"    pm.expect(jsonData.result.data[7].dataTypes[0]).to.eql(\"application/json\");",
											"});",
											"pm.test(\"Check studies/{studyDbId}/table call\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[8].call).to.eql(\"studies/{studyDbId}/table\");",
											"    pm.expect(jsonData.result.data[8].dataTypes[0]).to.eql(\"application/json\");",
											"});",
											"pm.test(\"Check trials call\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[9].call).to.eql(\"trials\");",
											"    pm.expect(jsonData.result.data[9].dataTypes[0]).to.eql(\"application/json\");",
											"});",
											"pm.test(\"Check calls call\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[11].call).to.eql(\"calls\");",
											"    pm.expect(jsonData.result.data[11].dataTypes[0]).to.eql(\"application/json\");",
											"});",
											"pm.test(\"Check germplasm-search call\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[12].call).to.eql(\"germplasm-search\");",
											"    pm.expect(jsonData.result.data[12].dataTypes[0]).to.eql(\"application/json\");",
											"});",
											"pm.test(\"Check germplasm/{germplasmDbId} call\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[13].call).to.eql(\"germplasm/{germplasmDbId}\");",
											"    pm.expect(jsonData.result.data[13].dataTypes[0]).to.eql(\"application/json\");",
											"});",
											"pm.test(\"Check germplasm/{germplasmDbId}/pedigree call\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[14].call).to.eql(\"germplasm/{germplasmDbId}/pedigree\");",
											"    pm.expect(jsonData.result.data[14].dataTypes[0]).to.eql(\"application/json\");",
											"});",
											"pm.test(\"Check germplasm/{germplasmDbId}/progeny call\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[15].call).to.eql(\"germplasm/{germplasmDbId}/progeny\");",
											"    pm.expect(jsonData.result.data[15].dataTypes[0]).to.eql(\"application/json\");",
											"});",
											"pm.test(\"Check search/germplasm call\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[16].call).to.eql(\"search/germplasm\");",
											"    pm.expect(jsonData.result.data[16].dataTypes[0]).to.eql(\"application/json\");",
											"});",
											"",
											"pm.test(\"Check search/germplasm/{searchResultsDbid} call\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[17].call).to.eql(\"search/germplasm/{searchResultsDbid}\");",
											"    pm.expect(jsonData.result.data[17].dataTypes[0]).to.eql(\"application/json\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c28a23a5-d7e7-474d-aad1-960a49d4b935",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/calls?dataType=application/json",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"calls"
									],
									"query": [
										{
											"key": "dataType",
											"value": "application/json"
										}
									]
								},
								"description": "GET ​/brapi​/v1​/calls"
							},
							"response": []
						},
						{
							"name": "Verify calls with application/flapjack",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5d140a68-ab07-4f66-bcdb-34fab8736302",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Check if format of samples call is tsv\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.metadata.status[0].message).to.eql(\"not found calls\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "35340e73-9060-4abe-8d73-d298f308c512",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/calls?dataType=application/flapjack",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"calls"
									],
									"query": [
										{
											"key": "dataType",
											"value": "application/flapjack"
										}
									]
								},
								"description": "GET ​/brapi​/v1​/calls"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "crop-resource-brapi",
			"item": [
				{
					"name": "GET /brapi/v1/crops",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e98484ae-fe67-48b2-b1d1-92f650435def",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Check testdata crop \", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.result.data[0]).to.eql(\"maize\");\r",
									"});\r",
									"pm.test(\"Check testdata crop \", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.result.data[1]).to.eql(\"testdata\");\r",
									"});\r",
									"\r",
									"/**\r",
									"pm.test(\"Check brachiaria crop \", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.result.data[0]).to.eql(\"brachiaria\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check chia crop \", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.result.data[1]).to.eql(\"chia\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check chickpea crop \", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.result.data[2]).to.eql(\"chickpea\");\r",
									"});\r",
									"pm.test(\"Check cowpea crop \", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.result.data[3]).to.eql(\"cowpea\");\r",
									"});\r",
									"pm.test(\"Check flax crop \", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.result.data[4]).to.eql(\"flax\");\r",
									"});\r",
									"pm.test(\"Check groundnut crop \", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.result.data[5]).to.eql(\"groundnut\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check maize crop \", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.result.data[6]).to.eql(\"maize\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check monggo crop \", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.result.data[7]).to.eql(\"monggo\");\r",
									"});\r",
									"pm.test(\"Check mustard crop \", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.result.data[8]).to.eql(\"mustard\");\r",
									"});\r",
									"pm.test(\"Check peanut crop \", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.result.data[9]).to.eql(\"peanut\");\r",
									"});\r",
									"pm.test(\"Check rapeseed crop \", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.result.data[10]).to.eql(\"rapeseed\");\r",
									"});\r",
									"pm.test(\"Check rice crop \", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.result.data[11]).to.eql(\"rice\");\r",
									"});\r",
									"pm.test(\"Check safflower crop \", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.result.data[12]).to.eql(\"safflower\");\r",
									"});\r",
									"pm.test(\"Check sorghum crop \", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.result.data[13]).to.eql(\"sorghum\");\r",
									"});\r",
									"pm.test(\"Check soybean crop \", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.result.data[14]).to.eql(\"soybean\");\r",
									"});\r",
									"pm.test(\"Check sunflower crop \", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.result.data[15]).to.eql(\"sunflower\");\r",
									"});\r",
									"pm.test(\"Check tomato crop \", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.result.data[17]).to.eql(\"tomato\");\r",
									"});\r",
									"pm.test(\"Check wheat crop \", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.result.data[18]).to.eql(\"wheat\");\r",
									"});\r",
									" */"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "0d692626-6e40-4b4e-8b8d-807c9bb7ba21",
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{masterToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BMSurl}}/brapi/v1/crops",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"brapi",
								"v1",
								"crops"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "germplasm-resource-brapi",
			"item": [
				{
					"name": "GET ​/{crop}​/brapi​/v1​/germplasm",
					"item": [
						{
							"name": "Verify response code and body when entered valid crop only",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f007ce27-03c6-4379-a2d0-58c7658766a9",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"var data = jsonData.result.data[0];",
											"pm.test(\"Verify returned metadata\", function () {",
											"    pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											"    pm.expect(jsonData.metadata.pagination.pageSize).to.eql(10000);",
											"    pm.expect(jsonData.metadata.pagination.totalCount).to.eql(60);",
											"    pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											"    pm.expect(jsonData.metadata.status).to.eql([]);",
											"    pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"",
											"pm.test(\"Check germplasmDbId \", function () {",
											"    pm.expect(data.germplasmDbId).to.eql(\"21\");",
											"});",
											"",
											"pm.test(\"Check defaultDisplayName \", function () {",
											"    pm.expect(data.defaultDisplayName).to.eql(\"CML1\");",
											"});",
											"pm.test(\"Check accessionNumber \", function () {",
											"    pm.expect(data.accessionNumber).to.eql(\"ACCNO1\");",
											"});",
											"",
											"pm.test(\"Check germplasmName \", function () {",
											"    pm.expect(data.germplasmName).to.eql(\"CML1\");",
											"});",
											"",
											"pm.test(\"Check pedigree\", function () {",
											"    pm.expect(data.pedigree).to.eql(\"CML1\");",
											"});",
											"pm.test(\"Check germplasmSeedSource\", function () {",
											"    pm.expect(data.germplasmSeedSource).to.eql(\"AA001\");",
											"});",
											"",
											"pm.test(\"Check synonyms\", function () {",
											" var names = [\"GP1\",\"ACCNO1\", \"DVNM1\", \"GENUS1\", \"DVNM1\"];",
											"   for (var i = 0; i < data.synonyms.length; i++) {",
											"    pm.expect(data.synonyms[i]).to.eql(names[i]);",
											"    }",
											"",
											"});",
											"",
											"pm.test(\"Check commonCropName\", function () {",
											"    pm.expect(data.commonCropName).to.eql(\"testdata\");",
											"});",
											"",
											"pm.test(\"Check instituteCode\", function () {",
											"    pm.expect(data.instituteCode).to.eql(\"PROGM1\");",
											"});",
											"pm.test(\"Check instituteName\", function () {",
											"    pm.expect(data.instituteName).to.eql(\"PROGM1\");",
											"});",
											"",
											"pm.test(\"Check countryOfOriginCode\", function () {",
											"    pm.expect(data.countryOfOriginCode).to.eql(\"ORI_COUN1\");",
											"});",
											"",
											"pm.test(\"Check typeOfGermplasmStorageCode\", function () {",
											"    pm.expect(data.typeOfGermplasmStorageCode).to.eql([]);",
											"});",
											"pm.test(\"Check genus\", function () {",
											"    pm.expect(data.genus).to.eql(\"GENUS1\");",
											"});",
											"pm.test(\"Check species\", function () {",
											"    pm.expect(data.species).to.eql(\"SPNAM1\");",
											"});",
											"pm.test(\"Check taxonIds\", function () {",
											"    pm.expect(data.taxonIds).to.eql([]);",
											"});",
											"pm.test(\"Check speciesAuthority\", function () {",
											"    pm.expect(data.speciesAuthority).to.eql(\"SPAUTH1\");",
											"});",
											"",
											"pm.test(\"Check subtaxa\", function () {",
											"    pm.expect(data.subtaxa).to.eql(\"SUBTAX1\");",
											"});",
											"pm.test(\"Check subtaxaAuthority\", function () {",
											"    pm.expect(data.subtaxaAuthority).to.eql(\"STAUTH1\");",
											"});",
											"pm.test(\"Check donors\", function () {",
											"    pm.expect(data.donors).to.eql([]);",
											"});",
											"pm.test(\"Check acquisitionDate\", function () {",
											"    pm.expect(data.acquisitionDate).to.eql(\"2018-10-25\");",
											"});",
											"pm.test(\"Check breedingMethodDbId\", function () {",
											"    pm.expect(data.breedingMethodDbId).to.eql(\"Accession into genebank\");",
											"});",
											"pm.test(\"Check germplasmGenus\", function () {",
											"    pm.expect(data.germplasmGenus).to.eql(\"GENUS1\");",
											"});",
											"pm.test(\"Check germplasmSpecies\", function () {",
											"    pm.expect(data.germplasmSpecies).to.eql(\"SPNAM1\");",
											"});",
											"pm.test(\"Check seedSource\", function () {",
											"    pm.expect(data.seedSource).to.eql(\"AA001\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "fc1043f6-8876-4548-ba11-75f47b024efc",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/germplasm?page=0&pageSize=10000",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"germplasm"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "10000"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered valid crop and germplasmDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e0c6deb9-3828-4adf-ba08-bb3316a00f2e",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"pm.test(\"Verify returned metadata\", function () {",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(10000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(1);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Check if all data has correct germplasmDbId\", function () {",
											"  var jsonData = pm.response.json();",
											"  var dataLength = jsonData.result.data.length;",
											"",
											"  for (i = 0; i < dataLength ; i++) {",
											"      var data = jsonData.result.data[i];",
											"      pm.expect(data.germplasmDbId).to.eql(pm.environment.get(\"germplasmDbId\"));",
											"  }",
											" ",
											"});    ",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "74ee7051-4d3e-43b7-b7d2-1bf6b55c0c7b",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/germplasm?page=0&pageSize=10000&germplasmDbId={{germplasmDbId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"germplasm"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "10000"
										},
										{
											"key": "germplasmDbId",
											"value": "{{germplasmDbId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered valid crop and germplasmName",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0b815b44-2063-4823-92bc-1413f9bb2cbe",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"pm.test(\"Verify returned metadata\", function () {",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(10000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(22);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Check if all data has correct germplasmName\", function () {",
											"  var dataLength = jsonData.result.data.length;",
											"",
											"  for (i = 0; i < dataLength ; i++) {",
											"      var data = jsonData.result.data[i];",
											"      pm.expect(data.germplasmName).to.include(\"CML1\");",
											"  }",
											" ",
											"});    ",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "7e279864-5d92-4ed2-a837-72c3f50cf100",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/germplasm?page=0&pageSize=10000&germplasmName=CML1",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"germplasm"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "10000"
										},
										{
											"key": "germplasmName",
											"value": "CML1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered valid crop and commonCropName",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "07c4b62f-5fc1-4b7c-a27c-4debc2221882",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"pm.test(\"Verify returned metadata\", function () {",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(10000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(60);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Check if all data has correct commonCropName\", function () {",
											"  var dataLength = jsonData.result.data.length;",
											"",
											"  for (i = 0; i < dataLength ; i++) {",
											"      var data = jsonData.result.data[i];",
											"      pm.expect(data.commonCropName).to.eql(pm.environment.get(\"crop\"));",
											"  }",
											" ",
											"});    ",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "019bd8bb-7a8e-4ee3-a712-4b1987f3fcad",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/germplasm?page=0&pageSize=10000&commonCropName={{crop}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"germplasm"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "10000"
										},
										{
											"key": "commonCropName",
											"value": "{{crop}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered pageSize greater than max",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ea86d266-a621-48aa-81f9-ce53c3619dfd",
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"",
											"pm.test(\"Verify returned error message\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.errors[0].message).to.eql(\"Page size must between 1 and 10000.\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "12d8ca8d-8f70-40f4-993e-b0c92f5f2815",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/germplasm?page=0&pageSize=10001",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"germplasm"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "10001"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid page",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a078e87e-c660-4cb1-979c-2067954341de",
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"",
											"pm.test(\"Verify returned error message\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.errors[0].message).to.eql(\"A total of 1 pages are available, so the page number must between 0 and 1 (exclusive).\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "fbd04cd7-42e1-4f19-8b1a-057ae5a514f7",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/germplasm?page=9999&pageSize=10000",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"germplasm"
									],
									"query": [
										{
											"key": "page",
											"value": "9999"
										},
										{
											"key": "pageSize",
											"value": "10000"
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "GET ​/{crop}​/brapi​/v1​/germplasm​/{germplasmDbId}",
					"item": [
						{
							"name": "Verify response code and body when entered valid germplasmDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c23cd268-adaf-48ec-a292-b65527e9b0a9",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Check GID \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.germplasmDbId).to.eql(\"21\");",
											"});",
											"",
											"pm.test(\"Check defaultDisplayName \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.defaultDisplayName).to.eql(\"CML1\");",
											"});",
											"pm.test(\"Check accessionNumber \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.accessionNumber).to.eql(\"ACCNO1\");",
											"});",
											"",
											"pm.test(\"Check germplasmName \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.germplasmName).to.eql(\"CML1\");",
											"});",
											"",
											"pm.test(\"Check pedigree\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.pedigree).to.eql(\"CML1\");",
											"});",
											"  ",
											"pm.test(\"Check germplasmSeedSource\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.germplasmSeedSource).to.eql(\"AA001\");",
											"});",
											"  ",
											"pm.test(\"Check commonCropName\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.commonCropName).to.eql(\"testdata\");",
											"});",
											"",
											"pm.test(\"Check instituteCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.instituteCode).to.eql(\"PROGM1\");",
											"});",
											"pm.test(\"Check instituteName\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.instituteName).to.eql(\"PROGM1\");",
											"});",
											"",
											"",
											"pm.test(\"Check countryOfOriginCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.countryOfOriginCode).to.eql(\"ORI_COUN1\");",
											"});",
											"",
											"pm.test(\"Check genus\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.genus).to.eql(\"GENUS1\");",
											"});",
											"",
											"pm.test(\"Check species\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.species).to.eql(\"SPNAM1\");",
											"});",
											"",
											"pm.test(\"Check speciesAuthority\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.speciesAuthority).to.eql(\"SPAUTH1\");",
											"});",
											"",
											"pm.test(\"Check subtaxa\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.subtaxa).to.eql(\"SUBTAX1\");",
											"});",
											"",
											"pm.test(\"Check acquisitionDate\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.acquisitionDate).to.eql(\"2018-10-25\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "19ddc545-70fb-411c-b7c7-e012d09819e7",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/germplasm/{{germplasmDbId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"germplasm",
										"{{germplasmDbId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered non-existing germplasmDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "04e94c3c-acd8-45ef-8171-8ec871f0791a",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"pm.test(\"Response message is no germplasm found \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.metadata.status[0].message).to.eql(\"no germplasm found\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9d871ad7-db9e-4021-83ae-447266aa9219",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/germplasm/{{nonExistingGID}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"germplasm",
										"{{nonExistingGID}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "GET ​/{crop}​/brapi​/v1​/germplasm​/{germplasmDbId}​/pedigree",
					"item": [
						{
							"name": "Verify response code and body when entered GID that was created via crossing,includeSiblings true",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5dd77b21-4f69-4771-97f3-a5e2bad5d765",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Verify returned metadata\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(0);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Check germplasmDbId \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.germplasmDbId).to.eql(41);",
											"});",
											"pm.test(\"Check defaultDisplayName \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.defaultDisplayName).to.eql(\"IB1\");",
											"    pm.expect(jsonData.result.pedigree).to.eql(\"CML1/CML6\");",
											"    pm.expect(jsonData.result.crossingPlan).to.eql(\"C2W|Single cross|GEN\");",
											"    pm.expect(jsonData.result.crossingYear).to.eql(2018);",
											"    pm.expect(jsonData.result.familyCode).to.equal(null);",
											"    pm.expect(jsonData.result.parent1DbId).to.eql(21);",
											"    pm.expect(jsonData.result.parent1Name).to.eql(\"CML1\");",
											"    pm.expect(jsonData.result.parent1Type).to.eql(\"FEMALE\");",
											"    pm.expect(jsonData.result.parent2DbId).to.eql(26);",
											"    pm.expect(jsonData.result.parent2Name).to.eql(\"CML6\");",
											"    pm.expect(jsonData.result.parent2Type).to.eql(\"MALE\");",
											"    pm.expect(jsonData.result.siblings[0].germplasmDbId).to.eql(61);",
											"    pm.expect(jsonData.result.siblings[0].defaultDisplayName).to.eql(\"CML1\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "38e10eb3-86c4-49eb-893c-fe71a1b2eef9",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/germplasm/{{crossGID}}/pedigree?includeSiblings=true",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"germplasm",
										"{{crossGID}}",
										"pedigree"
									],
									"query": [
										{
											"key": "includeSiblings",
											"value": "true"
										}
									]
								},
								"description": "GET /{crop}​/brapi​/v1​/germplasm​/{germplasmDbId}​/pedigree"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered GID that was created via crossing,includeSiblings false",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5259c73f-0213-42ea-ba68-6547608068aa",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Verify returned metadata\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(0);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Check germplasmDbId \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.germplasmDbId).to.eql(41);",
											"});",
											"pm.test(\"Check defaultDisplayName \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.defaultDisplayName).to.eql(\"IB1\");",
											"    pm.expect(jsonData.result.pedigree).to.eql(\"CML1/CML6\");",
											"    pm.expect(jsonData.result.crossingPlan).to.eql(\"C2W|Single cross|GEN\");",
											"    pm.expect(jsonData.result.crossingYear).to.eql(2018);",
											"    pm.expect(jsonData.result.familyCode).to.equal(null);",
											"    pm.expect(jsonData.result.parent1DbId).to.eql(21);",
											"    pm.expect(jsonData.result.parent1Name).to.eql(\"CML1\");",
											"    pm.expect(jsonData.result.parent1Type).to.eql(\"FEMALE\");",
											"    pm.expect(jsonData.result.parent2DbId).to.eql(26);",
											"    pm.expect(jsonData.result.parent2Name).to.eql(\"CML6\");",
											"    pm.expect(jsonData.result.parent2Type).to.eql(\"MALE\");",
											"    pm.expect(jsonData.result.siblings).to.eql(null);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "7dc63f00-ce33-4a32-aa6b-5c7c62d1326a",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/germplasm/{{crossGID}}/pedigree?includeSiblings=false",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"germplasm",
										"{{crossGID}}",
										"pedigree"
									],
									"query": [
										{
											"key": "includeSiblings",
											"value": "false"
										}
									]
								},
								"description": "GET /{crop}​/brapi​/v1​/germplasm​/{germplasmDbId}​/pedigree"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered GID that was created via advancing",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0fddc3c9-e6bb-4f6e-9dca-29b455161bc8",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Verify returned metadata\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(0);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Check germplasmDbId \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.germplasmDbId).to.eql(parseInt(pm.environment.get(\"advancedGID\")));",
											"});",
											"pm.test(\"Check defaultDisplayName \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.defaultDisplayName).to.eql(\"CML1\");",
											"    pm.expect(jsonData.result.pedigree).to.eql(\"CML1\");",
											"    pm.expect(jsonData.result.crossingPlan).to.eql(\"AGB1|Accession into genebank|MAN\");",
											"    pm.expect(jsonData.result.crossingYear).to.eql(2020);",
											"    pm.expect(jsonData.result.familyCode).to.equal(null);",
											"    pm.expect(jsonData.result.parent1DbId).to.eql(21);",
											"    pm.expect(jsonData.result.parent1Name).to.eql(\"CML1\");",
											"    pm.expect(jsonData.result.parent1Type).to.eql(\"POPULATION\");",
											"    pm.expect(jsonData.result.parent2DbId).to.eql(21);",
											"    pm.expect(jsonData.result.parent2Name).to.eql(\"CML1\");",
											"    pm.expect(jsonData.result.parent2Type).to.eql(\"SELF\");",
											"    pm.expect(jsonData.result.siblings).to.eql([]);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9aa4816a-672f-4f62-b1ef-43742d6f2c06",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/germplasm/{{advancedGID}}/pedigree?includeSiblings=true",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"germplasm",
										"{{advancedGID}}",
										"pedigree"
									],
									"query": [
										{
											"key": "includeSiblings",
											"value": "true"
										}
									]
								},
								"description": "GET /{crop}​/brapi​/v1​/germplasm​/{germplasmDbId}​/pedigree"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered GID that was via import (no parent)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6087a7f0-b439-4e2b-86ca-2d823213fe97",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Verify returned metadata\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(0);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Check germplasmDbId \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.germplasmDbId).to.eql(parseInt(pm.environment.get(\"noParentGID\")));",
											"});",
											"pm.test(\"Check defaultDisplayName \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.defaultDisplayName).to.eql(\"CML1\");",
											"    pm.expect(jsonData.result.pedigree).to.eql(\"CML1\");",
											"    pm.expect(jsonData.result.crossingPlan).to.eql(\"AGB1|Accession into genebank|MAN\");",
											"    pm.expect(jsonData.result.crossingYear).to.eql(2018);",
											"    pm.expect(jsonData.result.familyCode).to.equal(null);",
											"    pm.expect(jsonData.result.parent1DbId).to.eql(null);",
											"    pm.expect(jsonData.result.parent1Name).to.eql(null);",
											"    pm.expect(jsonData.result.parent1Type).to.eql(null);",
											"    pm.expect(jsonData.result.parent2DbId).to.eql(null);",
											"    pm.expect(jsonData.result.parent2Name).to.eql(null);",
											"    pm.expect(jsonData.result.parent2Type).to.eql(null);",
											"    pm.expect(jsonData.result.siblings).to.eql(null);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2e48e367-4591-47b3-b650-95c21c6ec90b",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/germplasm/{{noParentGID}}/pedigree?includeSiblings=false",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"germplasm",
										"{{noParentGID}}",
										"pedigree"
									],
									"query": [
										{
											"key": "includeSiblings",
											"value": "false"
										}
									]
								},
								"description": "GET /{crop}​/brapi​/v1​/germplasm​/{germplasmDbId}​/pedigree"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered non-existing germplasmDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "802c4055-1d00-4786-83e8-c7cc1a2d32fa",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"pm.test(\"Response message is no germplasm found \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.metadata.status[0].message).to.eql(\"no germplasm found\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b29931ee-ddc3-4bee-b676-41d93c82f71e",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/germplasm/{{nonExistingGID}}/pedigree",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"germplasm",
										"{{nonExistingGID}}",
										"pedigree"
									]
								},
								"description": "GET /{crop}​/brapi​/v1​/germplasm​/{germplasmDbId}​/pedigree"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered valid studyDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9c083122-3ae7-43bb-9a34-5c2b5729d39b",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"  var jsonData = pm.response.json();",
											"pm.test(\"Verify returned metadata\", function () {",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(20);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"",
											"pm.test(\"Verify returned data\", function () {",
											"  ",
											" pm.expect(jsonData.result.data[0].germplasmDbId).to.eql(\"21\");",
											" pm.expect(jsonData.result.data[0].defaultDisplayName).to.eql(\"CML1\");",
											" pm.expect(jsonData.result.data[0].germplasmName).to.eql(\"CML1\");",
											" pm.expect(jsonData.result.data[0].pedigree).to.eql(\"CML1\");",
											" //pm.expect(jsonData.result.data[0].synonyms).to.eql([]);",
											"",
											" pm.expect(jsonData.result.data[0].commonCropName).to.eql(\"testdata\");",
											" pm.expect(jsonData.result.data[0].instituteCode).to.eql(\"PROGM1\");",
											" pm.expect(jsonData.result.data[0].instituteName).to.eql(\"PROGM1\");",
											" pm.expect(jsonData.result.data[0].countryOfOriginCode).to.eql(\"ORI_COUN1\");",
											" pm.expect(jsonData.result.data[0].typeOfGermplasmStorageCode).to.eql([]);",
											" //pm.expect(jsonData.result.data[0].genus).to.eql(\"GENUS1\");",
											" //pm.expect(jsonData.result.data[0].species).to.eql(\"SPNAM1\");",
											" pm.expect(jsonData.result.data[0].taxonIds).to.eql([]);",
											" pm.expect(jsonData.result.data[0].speciesAuthority).to.eql(\"SPAUTH1\");",
											" pm.expect(jsonData.result.data[0].subtaxa).to.eql(\"SUBTAX1\");",
											" pm.expect(jsonData.result.data[0].subtaxaAuthority).to.eql(\"STAUTH1\");",
											" pm.expect(jsonData.result.data[0].donors).to.eql([]);",
											" pm.expect(jsonData.result.data[0].acquisitionDate).to.eql(\"2018-10-25\");",
											" pm.expect(jsonData.result.data[0].breedingMethodDbId).to.eql(\"Accession into genebank\");",
											" pm.expect(jsonData.result.data[0].germplasmGenus).to.eql(\"GENUS1\");",
											" pm.expect(jsonData.result.data[0].germplasmSpecies).to.eql(\"SPNAM1\");",
											" pm.expect(jsonData.result.data[0].seedSource).to.eql(\"AA001\");",
											" pm.expect(jsonData.result.data[0].entryNumber).to.eql(\"1\");",
											"    ",
											"});",
											"",
											"pm.test(\"Verify returned studyDbId\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.studyDbId).to.eql(pm.environment.get(\"studyDbId\"));",
											"});",
											"pm.test(\"Verify returned trialName\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.trialName).to.eql(\"Randomized Trial 20180003\");",
											"});",
											"",
											"pm.test(\"Check synonyms\", function () {",
											" var names = [\"GP1\",\"ACCNO1\", \"DVNM1\", \"GENUS1\", \"DVNM1\"];",
											"   for (var i = 0; i < jsonData.result.data[0].synonyms.length; i++) {",
											"    pm.expect(jsonData.result.data[0].synonyms[i]).to.eql(names[i]);",
											"    }",
											"",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2fb73594-56a9-4020-9235-89da19d9613d",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/studies/{{studyDbId}}/germplasm",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"studies",
										"{{studyDbId}}",
										"germplasm"
									]
								},
								"description": "GET /{crop}/brapi/v1/studies/{studyDbId}"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "GET ​/{crop}​/brapi​/v1​/germplasm​/{germplasmDbId}​/progeny",
					"item": [
						{
							"name": "Verify response code and body when entered valid germplasmDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5f578b72-5755-4115-90a4-1017b94b61b6",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(0);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"pm.test(\"Check germplasmDbId \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.germplasmDbId).to.eql(21);",
											"});",
											"pm.test(\"Check defaultDisplayName \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.defaultDisplayName).to.eql(\"CML1\");",
											"});",
											"pm.test(\"Check progeny details \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.progeny[0].germplasmDbId).to.eql(41);",
											"    pm.expect(jsonData.result.progeny[0].defaultDisplayName).to.eql(\"IB1\");",
											"   pm.expect(jsonData.result.progeny[0].parentType).to.eql(\"FEMALE\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "169b9d9e-b221-4337-9c03-a054e0724690",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/germplasm/{{germplasmDbId}}/progeny",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"germplasm",
										"{{germplasmDbId}}",
										"progeny"
									]
								},
								"description": "GET ​/{crop}​/brapi​/v1​/germplasm​/{germplasmDbId}​/progeny"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered non-existing germplasmDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "114a3a86-6404-4068-89f8-ec02597f32f9",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"pm.test(\"Response message is no germplasm found \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.metadata.status[0].message).to.eql(\"no germplasm found\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "3dfa333a-d00d-492c-b8ff-743b4ccd13f9",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/germplasm/{{nonExistingGID}}/progeny",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"germplasm",
										"{{nonExistingGID}}",
										"progeny"
									]
								},
								"description": "GET ​/{crop}​/brapi​/v1​/germplasm​/{germplasmDbId}​/progeny"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "POST /{crop}/brapi/v1/search/germplasm",
					"item": [
						{
							"name": "Post search by germplasmDbIds",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "df8d9f6b-a20e-4666-975b-c6a7a5bb69be",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"    var jsonData = pm.response.json();",
											"    pm.environment.unset(\"searchResultDbId_germplasmDbIds\");",
											"    pm.environment.set(\"searchResultDbId_germplasmDbIds\", jsonData.result.searchResultDbId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d12dbc0b-0b29-4792-bbde-aa0a56c6fa67",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"germplasmDbIds\": [\r\n    \"21\"\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/search/germplasm",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"search",
										"germplasm"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when searched by germplasmSpecies",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e4e67833-0bf6-4df8-8c93-7d3e72eb6ab1",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"    var jsonData = pm.response.json();",
											"    pm.environment.unset(\"searchResultDbId_germplasmSpecies\");",
											"    pm.environment.set(\"searchResultDbId_germplasmSpecies\", jsonData.result.searchResultDbId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "56a54487-6f0c-4b9e-8703-64a24247f11c",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"germplasmDbIds\": [\r\n    \"21\"\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/search/germplasm",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"search",
										"germplasm"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when searched by germplasmGenus",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "afd7004e-4248-4bde-a389-3aea765030a3",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"    var jsonData = pm.response.json();",
											"    pm.environment.unset(\"searchResultDbId_germplasmGenus\");",
											"    pm.environment.set(\"searchResultDbId_germplasmGenus\", jsonData.result.searchResultDbId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ae050eb5-f590-4267-9888-fd4426504c6d",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"germplasmDbIds\": [\r\n    \"21\"\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/search/germplasm",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"search",
										"germplasm"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when searched by germplasmNames",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ae70959f-10fc-4e38-978e-a9dc4e449c02",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"    var jsonData = pm.response.json();",
											"    pm.environment.unset(\"searchResultDbId_germplasmNames\");",
											"    pm.environment.set(\"searchResultDbId_germplasmNames\", jsonData.result.searchResultDbId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0869a5b2-13ac-47a7-aedd-cbad2a7de2f0",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"germplasmDbIds\": [\r\n    \"21\"\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/search/germplasm",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"search",
										"germplasm"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when searched by accessionNumbers",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "50fe99ba-d036-4918-a6c8-23bd0363aaa8",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"    var jsonData = pm.response.json();",
											"    pm.environment.unset(\"searchResultDbId_accessionNumbers\");",
											"    pm.environment.set(\"searchResultDbId_accessionNumbers\", jsonData.result.searchResultDbId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "02cd7b03-a0ce-42f6-82af-4ae8398c696f",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"accessionNumbers\": [\r\n    \"ACCNO1\"\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/search/germplasm",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"search",
										"germplasm"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when searched by commonCropNames",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "62b676a9-4dde-4017-aac5-409f2bb6f5fc",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"    var jsonData = pm.response.json();",
											"    pm.environment.unset(\"ssearchResultDbId_commonCropNames\");",
											"    pm.environment.set(\"searchResultDbId_commonCropNames\", jsonData.result.searchResultDbId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "84116758-9aaa-445a-8e9c-29e55794f26f",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"commonCropName\": [\r\n    \"testdata\"\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/search/germplasm",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"search",
										"germplasm"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when searched by searchResultDbId_preferredName",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c6eb4e86-c470-48c0-ab68-4be0382df318",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"    var jsonData = pm.response.json();",
											"    pm.environment.unset(\"searchResultDbId_preferredName\");",
											"    pm.environment.set(\"searchResultDbId_preferredName\", jsonData.result.searchResultDbId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ce236dda-cf0d-49c6-86d1-91adad2d7c07",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"germplasmDbIds\": [\r\n    \"21\"\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/search/germplasm",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"search",
										"germplasm"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "GET ​/{crop}​/brapi​/v1​/search​/germplasm​/{germplasmDbId}​/attributes",
					"item": [
						{
							"name": "Verify response code and body when entered valid germplasmDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0059893f-4909-4734-b24b-6294f8542d65",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Verify returned metadata\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(7);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"pm.test(\"Check attribute details \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0].attributeCode).to.eql(\"SPNAM\");",
											"    pm.expect(jsonData.result.data[0].attributeDbId).to.eql(2011);",
											"    pm.expect(jsonData.result.data[0].attributeName).to.eql(\"Additional details about germplasm\");",
											"    pm.expect(jsonData.result.data[0].determinedDate).to.eql(20181025);",
											"    pm.expect(jsonData.result.data[0].value).to.eql(\"SPNAM1\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a5c1f627-3fa7-45f1-b878-40a008b3d8f1",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/germplasm/{{germplasmDbId}}/attributes",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"germplasm",
										"{{germplasmDbId}}",
										"attributes"
									]
								},
								"description": "GET /{crop}​/brapi​/v1​/search​/germplasm​/{germplasmDbId}​/attributes"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered valid germplasmDbId and attributeDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1f377a7a-1b44-4b94-b1f5-54be4365bd11",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Verify returned metadata\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(1);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"pm.test(\"Check attribute details \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0].attributeCode).to.eql(\"ORI_COUN\");",
											"    pm.expect(jsonData.result.data[0].attributeDbId).to.eql(224);",
											"    pm.expect(jsonData.result.data[0].attributeName).to.eql(\"Country of Origin\");",
											"    pm.expect(jsonData.result.data[0].determinedDate).to.eql(20181025);",
											"    pm.expect(jsonData.result.data[0].value).to.eql(\"ORI_COUN1\");",
											"});",
											"",
											"pm.test(\"Check returned germplasmDbId \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.germplasmDbId).to.eql(pm.environment.get(\"germplasmDbId\"));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "bac5d025-666f-408c-9e93-3059e38f9237",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/germplasm/{{germplasmDbId}}/attributes?attributeDbIds=224",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"germplasm",
										"{{germplasmDbId}}",
										"attributes"
									],
									"query": [
										{
											"key": "attributeDbIds",
											"value": "224"
										}
									]
								},
								"description": "GET /{crop}​/brapi​/v1​/search​/germplasm​/{germplasmDbId}​/attributes"
							},
							"response": []
						},
						{
							"name": "Enter valid germplasmDbId and attributeDbId that is not associated to the germplasm",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9006c733-639c-4b31-bc1b-5a49d6d8ca5b",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"pm.test(\"Verify returned error\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.errors[0].message).to.eql(\"Invalid attribute identifier\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5d37e48b-6d6b-484a-a8c5-c78f13622a22",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/germplasm/{{germplasmDbId}}/attributes?attributeDbIds=2131",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"germplasm",
										"{{germplasmDbId}}",
										"attributes"
									],
									"query": [
										{
											"key": "attributeDbIds",
											"value": "2131"
										}
									]
								},
								"description": "GET /{crop}​/brapi​/v1​/search​/germplasm​/{germplasmDbId}​/attributes"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered non-existing germplasmDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "de4cd430-520b-4bda-a083-e1be40c6bf09",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"pm.test(\"Verify returned error\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.errors[0].message).to.eql(\"Invalid germplasm identifier\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e953f3fb-f60b-4876-ba5a-60f4cad85a30",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/germplasm/{{nonExistingGID}}/attributes",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"germplasm",
										"{{nonExistingGID}}",
										"attributes"
									]
								},
								"description": "GET /{crop}​/brapi​/v1​/search​/germplasm​/{germplasmDbId}​/attributes"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered valid germplasmDbId and attributeDbId Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "21587e88-8325-4768-9f13-30f4d0b5a6b8",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Verify returned metadata\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(10000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(1);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"pm.test(\"Check attribute details \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0].attributeCode).to.eql(\"ORI_COUN\");",
											"    pm.expect(jsonData.result.data[0].attributeDbId).to.eql(224);",
											"    pm.expect(jsonData.result.data[0].attributeName).to.eql(\"Country of Origin\");",
											"    pm.expect(jsonData.result.data[0].determinedDate).to.eql(20181025);",
											"    pm.expect(jsonData.result.data[0].value).to.eql(\"ORI_COUN1\");",
											"});",
											"",
											"pm.test(\"Check returned germplasmDbId \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.germplasmDbId).to.eql(pm.environment.get(\"germplasmDbId\"));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d0954bf0-fcfd-4c0f-aa0f-9f8c31280284",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/germplasm/{{germplasmDbId}}/attributes?attributeDbIds=224&page=0&pageSize=10000",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"germplasm",
										"{{germplasmDbId}}",
										"attributes"
									],
									"query": [
										{
											"key": "attributeDbIds",
											"value": "224"
										},
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "10000"
										}
									]
								},
								"description": "GET /{crop}​/brapi​/v1​/search​/germplasm​/{germplasmDbId}​/attributes"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered pageSize greater than max",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6cb6bcb9-8911-419b-8425-e7746f57f90f",
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"",
											"pm.test(\"Verify returned error message\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.errors[0].message).to.eql(\"Page size must between 1 and 10000.\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "da9c113b-78f4-460c-96dd-52e79fd39205",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/germplasm/{{germplasmDbId}}/attributes?attributeDbIds=224&page=0&pageSize=10001",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"germplasm",
										"{{germplasmDbId}}",
										"attributes"
									],
									"query": [
										{
											"key": "attributeDbIds",
											"value": "224"
										},
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "10001"
										}
									]
								},
								"description": "GET /{crop}​/brapi​/v1​/search​/germplasm​/{germplasmDbId}​/attributes"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "GET /{crop}/brapi/v1/search/germplasm/{searchResultsDbid}",
					"item": [
						{
							"name": "Verify results when entered searchResultsDbid that filters by preferredName",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "9591e855-2a85-4332-8d11-12dee91195e7",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "019ae179-9754-482f-bc00-54f216a45029",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"var jsonData = pm.response.json();\r",
											"var data = jsonData.result.data[0];\r",
											"pm.test(\"Verify returned metadata\", function () {\r",
											"    pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);\r",
											"    pm.expect(jsonData.metadata.pagination.pageSize).to.eql(100);\r",
											"    pm.expect(jsonData.metadata.pagination.totalCount).to.eql(1);\r",
											"    pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);\r",
											"    pm.expect(jsonData.metadata.status).to.eql([]);\r",
											"    pm.expect(jsonData.metadata.datafiles).to.eql([]);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Check germplasmDbId \", function () {\r",
											"    pm.expect(data.germplasmDbId).to.eql(\"21\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check defaultDisplayName \", function () {\r",
											"    pm.expect(data.defaultDisplayName).to.eql(\"CML1\");\r",
											"});\r",
											"pm.test(\"Check accessionNumber \", function () {\r",
											"    pm.expect(data.accessionNumber).to.eql(\"ACCNO1\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check germplasmName \", function () {\r",
											"    pm.expect(data.germplasmName).to.eql(\"CML1\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check pedigree\", function () {\r",
											"    pm.expect(data.pedigree).to.eql(\"CML1\");\r",
											"});\r",
											"pm.test(\"Check germplasmSeedSource\", function () {\r",
											"    pm.expect(data.germplasmSeedSource).to.eql(\"AA001\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check synonyms\", function () {\r",
											" var names = [\"GP1\",\"ACCNO1\", \"DVNM1\", \"GENUS1\", \"DVNM1\"];\r",
											"   for (var i = 0; i < data.synonyms.length; i++) {\r",
											"    pm.expect(data.synonyms[i]).to.eql(names[i]);\r",
											"    }\r",
											"});\r",
											"\r",
											"pm.test(\"Check commonCropName\", function () {\r",
											"    pm.expect(data.commonCropName).to.eql(\"testdata\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check instituteCode\", function () {\r",
											"    pm.expect(data.instituteCode).to.eql(\"PROGM1\");\r",
											"});\r",
											"pm.test(\"Check instituteName\", function () {\r",
											"    pm.expect(data.instituteName).to.eql(\"PROGM1\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check countryOfOriginCode\", function () {\r",
											"    pm.expect(data.countryOfOriginCode).to.eql(\"ORI_COUN1\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check typeOfGermplasmStorageCode\", function () {\r",
											"    pm.expect(data.typeOfGermplasmStorageCode).to.eql([]);\r",
											"});\r",
											"pm.test(\"Check genus\", function () {\r",
											"    pm.expect(data.genus).to.eql(\"GENUS1\");\r",
											"});\r",
											"pm.test(\"Check species\", function () {\r",
											"    pm.expect(data.species).to.eql(\"SPNAM1\");\r",
											"});\r",
											"pm.test(\"Check taxonIds\", function () {\r",
											"    pm.expect(data.taxonIds).to.eql([]);\r",
											"});\r",
											"pm.test(\"Check speciesAuthority\", function () {\r",
											"    pm.expect(data.speciesAuthority).to.eql(\"SPAUTH1\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check subtaxa\", function () {\r",
											"    pm.expect(data.subtaxa).to.eql(\"SUBTAX1\");\r",
											"});\r",
											"pm.test(\"Check subtaxaAuthority\", function () {\r",
											"    pm.expect(data.subtaxaAuthority).to.eql(\"STAUTH1\");\r",
											"});\r",
											"pm.test(\"Check donors\", function () {\r",
											"    pm.expect(data.donors).to.eql([]);\r",
											"});\r",
											"pm.test(\"Check acquisitionDate\", function () {\r",
											"    pm.expect(data.acquisitionDate).to.eql(\"2018-10-25\");\r",
											"});\r",
											"pm.test(\"Check breedingMethodDbId\", function () {\r",
											"    pm.expect(data.breedingMethodDbId).to.eql(\"Accession into genebank\");\r",
											"});\r",
											"pm.test(\"Check germplasmGenus\", function () {\r",
											"    pm.expect(data.germplasmGenus).to.eql(\"GENUS1\");\r",
											"});\r",
											"pm.test(\"Check germplasmSpecies\", function () {\r",
											"    pm.expect(data.germplasmSpecies).to.eql(\"SPNAM1\");\r",
											"});\r",
											"pm.test(\"Check seedSource\", function () {\r",
											"    pm.expect(data.seedSource).to.eql(\"AA001\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check observations\", function () {\r",
											"    pm.expect(jsonData.result.observations).to.eql([]);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/search/germplasm/{{searchResultDbId_preferredName}}?page=0&pageSize=100",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"search",
										"germplasm",
										"{{searchResultDbId_preferredName}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "100"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/search/germplasm/{searchResultsDbid}"
							},
							"response": []
						},
						{
							"name": "Verify results when entered searchResultsDbid that filters by germplasmSpecies",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "bf9bf70c-1766-4e74-904c-6b44ee3ac948",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "6dbc9716-4889-4172-9041-f6b21fb82ed4",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"var jsonData = pm.response.json();\r",
											"var data = jsonData.result.data[0];\r",
											"pm.test(\"Verify returned metadata\", function () {\r",
											"    pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);\r",
											"    pm.expect(jsonData.metadata.pagination.pageSize).to.eql(100);\r",
											"    pm.expect(jsonData.metadata.pagination.totalCount).to.eql(1);\r",
											"    pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);\r",
											"    pm.expect(jsonData.metadata.status).to.eql([]);\r",
											"    pm.expect(jsonData.metadata.datafiles).to.eql([]);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Check germplasmDbId \", function () {\r",
											"    pm.expect(data.germplasmDbId).to.eql(\"21\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check defaultDisplayName \", function () {\r",
											"    pm.expect(data.defaultDisplayName).to.eql(\"CML1\");\r",
											"});\r",
											"pm.test(\"Check accessionNumber \", function () {\r",
											"    pm.expect(data.accessionNumber).to.eql(\"ACCNO1\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check germplasmName \", function () {\r",
											"    pm.expect(data.germplasmName).to.eql(\"CML1\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check pedigree\", function () {\r",
											"    pm.expect(data.pedigree).to.eql(\"CML1\");\r",
											"});\r",
											"pm.test(\"Check germplasmSeedSource\", function () {\r",
											"    pm.expect(data.germplasmSeedSource).to.eql(\"AA001\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check synonyms\", function () {\r",
											" var names = [\"GP1\",\"ACCNO1\", \"DVNM1\", \"GENUS1\", \"DVNM1\"];\r",
											"   for (var i = 0; i < data.synonyms.length; i++) {\r",
											"    pm.expect(data.synonyms[i]).to.eql(names[i]);\r",
											"    }\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Check commonCropName\", function () {\r",
											"    pm.expect(data.commonCropName).to.eql(\"testdata\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check instituteCode\", function () {\r",
											"    pm.expect(data.instituteCode).to.eql(\"PROGM1\");\r",
											"});\r",
											"pm.test(\"Check instituteName\", function () {\r",
											"    pm.expect(data.instituteName).to.eql(\"PROGM1\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check countryOfOriginCode\", function () {\r",
											"    pm.expect(data.countryOfOriginCode).to.eql(\"ORI_COUN1\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check typeOfGermplasmStorageCode\", function () {\r",
											"    pm.expect(data.typeOfGermplasmStorageCode).to.eql([]);\r",
											"});\r",
											"pm.test(\"Check genus\", function () {\r",
											"    pm.expect(data.genus).to.eql(\"GENUS1\");\r",
											"});\r",
											"pm.test(\"Check species\", function () {\r",
											"    pm.expect(data.species).to.eql(\"SPNAM1\");\r",
											"});\r",
											"pm.test(\"Check taxonIds\", function () {\r",
											"    pm.expect(data.taxonIds).to.eql([]);\r",
											"});\r",
											"pm.test(\"Check speciesAuthority\", function () {\r",
											"    pm.expect(data.speciesAuthority).to.eql(\"SPAUTH1\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check subtaxa\", function () {\r",
											"    pm.expect(data.subtaxa).to.eql(\"SUBTAX1\");\r",
											"});\r",
											"pm.test(\"Check subtaxaAuthority\", function () {\r",
											"    pm.expect(data.subtaxaAuthority).to.eql(\"STAUTH1\");\r",
											"});\r",
											"pm.test(\"Check donors\", function () {\r",
											"    pm.expect(data.donors).to.eql([]);\r",
											"});\r",
											"pm.test(\"Check acquisitionDate\", function () {\r",
											"    pm.expect(data.acquisitionDate).to.eql(\"2018-10-25\");\r",
											"});\r",
											"pm.test(\"Check breedingMethodDbId\", function () {\r",
											"    pm.expect(data.breedingMethodDbId).to.eql(\"Accession into genebank\");\r",
											"});\r",
											"pm.test(\"Check germplasmGenus\", function () {\r",
											"    pm.expect(data.germplasmGenus).to.eql(\"GENUS1\");\r",
											"});\r",
											"pm.test(\"Check germplasmSpecies\", function () {\r",
											"    pm.expect(data.germplasmSpecies).to.eql(\"SPNAM1\");\r",
											"});\r",
											"pm.test(\"Check seedSource\", function () {\r",
											"    pm.expect(data.seedSource).to.eql(\"AA001\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check observations\", function () {\r",
											"    pm.expect(jsonData.result.observations).to.eql([]);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/search/germplasm/{{searchResultDbId_germplasmSpecies}}?page=0&pageSize=100",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"search",
										"germplasm",
										"{{searchResultDbId_germplasmSpecies}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "100"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/search/germplasm/{searchResultsDbid}"
							},
							"response": []
						},
						{
							"name": "Verify results when entered searchResultsDbid that filters by accessionNumbers",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "6dcc8d24-e822-4ac1-bfd4-7ca4d12ca743",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "160e6116-5181-4030-9c70-79bb982e5f87",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"var jsonData = pm.response.json();\r",
											"var data = jsonData.result.data[0];\r",
											"pm.test(\"Verify returned metadata\", function () {\r",
											"    pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);\r",
											"    pm.expect(jsonData.metadata.pagination.pageSize).to.eql(100);\r",
											"    pm.expect(jsonData.metadata.pagination.totalCount).to.eql(1);\r",
											"    pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);\r",
											"    pm.expect(jsonData.metadata.status).to.eql([]);\r",
											"    pm.expect(jsonData.metadata.datafiles).to.eql([]);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Check germplasmDbId \", function () {\r",
											"    pm.expect(data.germplasmDbId).to.eql(\"21\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check defaultDisplayName \", function () {\r",
											"    pm.expect(data.defaultDisplayName).to.eql(\"CML1\");\r",
											"});\r",
											"pm.test(\"Check accessionNumber \", function () {\r",
											"    pm.expect(data.accessionNumber).to.eql(\"ACCNO1\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check germplasmName \", function () {\r",
											"    pm.expect(data.germplasmName).to.eql(\"CML1\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check pedigree\", function () {\r",
											"    pm.expect(data.pedigree).to.eql(\"CML1\");\r",
											"});\r",
											"pm.test(\"Check germplasmSeedSource\", function () {\r",
											"    pm.expect(data.germplasmSeedSource).to.eql(\"AA001\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check synonyms\", function () {\r",
											" var names = [\"GP1\",\"ACCNO1\", \"DVNM1\", \"GENUS1\", \"DVNM1\"];\r",
											"   for (var i = 0; i < data.synonyms.length; i++) {\r",
											"    pm.expect(data.synonyms[i]).to.eql(names[i]);\r",
											"    }\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Check commonCropName\", function () {\r",
											"    pm.expect(data.commonCropName).to.eql(\"testdata\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check instituteCode\", function () {\r",
											"    pm.expect(data.instituteCode).to.eql(\"PROGM1\");\r",
											"});\r",
											"pm.test(\"Check instituteName\", function () {\r",
											"    pm.expect(data.instituteName).to.eql(\"PROGM1\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check countryOfOriginCode\", function () {\r",
											"    pm.expect(data.countryOfOriginCode).to.eql(\"ORI_COUN1\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check typeOfGermplasmStorageCode\", function () {\r",
											"    pm.expect(data.typeOfGermplasmStorageCode).to.eql([]);\r",
											"});\r",
											"pm.test(\"Check genus\", function () {\r",
											"    pm.expect(data.genus).to.eql(\"GENUS1\");\r",
											"});\r",
											"pm.test(\"Check species\", function () {\r",
											"    pm.expect(data.species).to.eql(\"SPNAM1\");\r",
											"});\r",
											"pm.test(\"Check taxonIds\", function () {\r",
											"    pm.expect(data.taxonIds).to.eql([]);\r",
											"});\r",
											"pm.test(\"Check speciesAuthority\", function () {\r",
											"    pm.expect(data.speciesAuthority).to.eql(\"SPAUTH1\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check subtaxa\", function () {\r",
											"    pm.expect(data.subtaxa).to.eql(\"SUBTAX1\");\r",
											"});\r",
											"pm.test(\"Check subtaxaAuthority\", function () {\r",
											"    pm.expect(data.subtaxaAuthority).to.eql(\"STAUTH1\");\r",
											"});\r",
											"pm.test(\"Check donors\", function () {\r",
											"    pm.expect(data.donors).to.eql([]);\r",
											"});\r",
											"pm.test(\"Check acquisitionDate\", function () {\r",
											"    pm.expect(data.acquisitionDate).to.eql(\"2018-10-25\");\r",
											"});\r",
											"pm.test(\"Check breedingMethodDbId\", function () {\r",
											"    pm.expect(data.breedingMethodDbId).to.eql(\"Accession into genebank\");\r",
											"});\r",
											"pm.test(\"Check germplasmGenus\", function () {\r",
											"    pm.expect(data.germplasmGenus).to.eql(\"GENUS1\");\r",
											"});\r",
											"pm.test(\"Check germplasmSpecies\", function () {\r",
											"    pm.expect(data.germplasmSpecies).to.eql(\"SPNAM1\");\r",
											"});\r",
											"pm.test(\"Check seedSource\", function () {\r",
											"    pm.expect(data.seedSource).to.eql(\"AA001\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check observations\", function () {\r",
											"    pm.expect(jsonData.result.observations).to.eql([]);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/search/germplasm/{{searchResultDbId_accessionNumbers}}?page=0&pageSize=100",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"search",
										"germplasm",
										"{{searchResultDbId_accessionNumbers}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "100"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/search/germplasm/{searchResultsDbid}"
							},
							"response": []
						},
						{
							"name": "Verify results when entered searchResultsDbid that filters by germplasmDbIds",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "65dd9178-376a-48bc-9f1e-69360a8ee787",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "4d122e58-e0ab-4651-bd7a-804b20c0f074",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"var jsonData = pm.response.json();\r",
											"var data = jsonData.result.data[0];\r",
											"pm.test(\"Verify returned metadata\", function () {\r",
											"    pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);\r",
											"    pm.expect(jsonData.metadata.pagination.pageSize).to.eql(100);\r",
											"    pm.expect(jsonData.metadata.pagination.totalCount).to.eql(1);\r",
											"    pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);\r",
											"    pm.expect(jsonData.metadata.status).to.eql([]);\r",
											"    pm.expect(jsonData.metadata.datafiles).to.eql([]);\r",
											"});\r",
											"\r",
											"pm.test(\"Check germplasmDbId \", function () {\r",
											"    pm.expect(data.germplasmDbId).to.eql(\"21\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check defaultDisplayName \", function () {\r",
											"    pm.expect(data.defaultDisplayName).to.eql(\"CML1\");\r",
											"});\r",
											"pm.test(\"Check accessionNumber \", function () {\r",
											"    pm.expect(data.accessionNumber).to.eql(\"ACCNO1\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check germplasmName \", function () {\r",
											"    pm.expect(data.germplasmName).to.eql(\"CML1\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check pedigree\", function () {\r",
											"    pm.expect(data.pedigree).to.eql(\"CML1\");\r",
											"});\r",
											"pm.test(\"Check germplasmSeedSource\", function () {\r",
											"    pm.expect(data.germplasmSeedSource).to.eql(\"AA001\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check synonyms\", function () {\r",
											" var names = [\"GP1\",\"ACCNO1\", \"DVNM1\", \"GENUS1\", \"DVNM1\"];\r",
											"   for (var i = 0; i < data.synonyms.length; i++) {\r",
											"    pm.expect(data.synonyms[i]).to.eql(names[i]);\r",
											"    }\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Check commonCropName\", function () {\r",
											"    pm.expect(data.commonCropName).to.eql(\"testdata\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check instituteCode\", function () {\r",
											"    pm.expect(data.instituteCode).to.eql(\"PROGM1\");\r",
											"});\r",
											"pm.test(\"Check instituteName\", function () {\r",
											"    pm.expect(data.instituteName).to.eql(\"PROGM1\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check countryOfOriginCode\", function () {\r",
											"    pm.expect(data.countryOfOriginCode).to.eql(\"ORI_COUN1\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check typeOfGermplasmStorageCode\", function () {\r",
											"    pm.expect(data.typeOfGermplasmStorageCode).to.eql([]);\r",
											"});\r",
											"pm.test(\"Check genus\", function () {\r",
											"    pm.expect(data.genus).to.eql(\"GENUS1\");\r",
											"});\r",
											"pm.test(\"Check species\", function () {\r",
											"    pm.expect(data.species).to.eql(\"SPNAM1\");\r",
											"});\r",
											"pm.test(\"Check taxonIds\", function () {\r",
											"    pm.expect(data.taxonIds).to.eql([]);\r",
											"});\r",
											"pm.test(\"Check speciesAuthority\", function () {\r",
											"    pm.expect(data.speciesAuthority).to.eql(\"SPAUTH1\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check subtaxa\", function () {\r",
											"    pm.expect(data.subtaxa).to.eql(\"SUBTAX1\");\r",
											"});\r",
											"pm.test(\"Check subtaxaAuthority\", function () {\r",
											"    pm.expect(data.subtaxaAuthority).to.eql(\"STAUTH1\");\r",
											"});\r",
											"pm.test(\"Check donors\", function () {\r",
											"    pm.expect(data.donors).to.eql([]);\r",
											"});\r",
											"pm.test(\"Check acquisitionDate\", function () {\r",
											"    pm.expect(data.acquisitionDate).to.eql(\"2018-10-25\");\r",
											"});\r",
											"pm.test(\"Check breedingMethodDbId\", function () {\r",
											"    pm.expect(data.breedingMethodDbId).to.eql(\"Accession into genebank\");\r",
											"});\r",
											"pm.test(\"Check germplasmGenus\", function () {\r",
											"    pm.expect(data.germplasmGenus).to.eql(\"GENUS1\");\r",
											"});\r",
											"pm.test(\"Check germplasmSpecies\", function () {\r",
											"    pm.expect(data.germplasmSpecies).to.eql(\"SPNAM1\");\r",
											"});\r",
											"pm.test(\"Check seedSource\", function () {\r",
											"    pm.expect(data.seedSource).to.eql(\"AA001\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check observations\", function () {\r",
											"    pm.expect(jsonData.result.observations).to.eql([]);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/search/germplasm/{{searchResultDbId_germplasmDbIds}}?page=0&pageSize=100",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"search",
										"germplasm",
										"{{searchResultDbId_germplasmDbIds}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "100"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/search/germplasm/{searchResultsDbid}"
							},
							"response": []
						},
						{
							"name": "Verify results when entered searchResultsDbid that filters by commonCropNames",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "d6b4b6d1-ad8c-483a-892a-b10fe95d3cd0",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "566884e0-3c60-43a0-b6c5-1f71be82a057",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"var jsonData = pm.response.json();\r",
											"var data = jsonData.result.data[0];\r",
											"pm.test(\"Verify returned metadata\", function () {\r",
											"    pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);\r",
											"    pm.expect(jsonData.metadata.pagination.pageSize).to.eql(100);\r",
											"    pm.expect(jsonData.metadata.pagination.totalCount).to.eql(60);\r",
											"    pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);\r",
											"    pm.expect(jsonData.metadata.status).to.eql([]);\r",
											"    pm.expect(jsonData.metadata.datafiles).to.eql([]);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Check germplasmDbId \", function () {\r",
											"    pm.expect(data.germplasmDbId).to.eql(\"21\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check defaultDisplayName \", function () {\r",
											"    pm.expect(data.defaultDisplayName).to.eql(\"CML1\");\r",
											"});\r",
											"pm.test(\"Check accessionNumber \", function () {\r",
											"    pm.expect(data.accessionNumber).to.eql(\"ACCNO1\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check germplasmName \", function () {\r",
											"    pm.expect(data.germplasmName).to.eql(\"CML1\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check pedigree\", function () {\r",
											"    pm.expect(data.pedigree).to.eql(\"CML1\");\r",
											"});\r",
											"pm.test(\"Check germplasmSeedSource\", function () {\r",
											"    pm.expect(data.germplasmSeedSource).to.eql(\"AA001\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check synonyms\", function () {\r",
											" var names = [\"GP1\",\"ACCNO1\", \"DVNM1\", \"GENUS1\", \"DVNM1\"];\r",
											"   for (var i = 0; i < data.synonyms.length; i++) {\r",
											"    pm.expect(data.synonyms[i]).to.eql(names[i]);\r",
											"    }\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Check commonCropName\", function () {\r",
											"    pm.expect(data.commonCropName).to.eql(\"testdata\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check instituteCode\", function () {\r",
											"    pm.expect(data.instituteCode).to.eql(\"PROGM1\");\r",
											"});\r",
											"pm.test(\"Check instituteName\", function () {\r",
											"    pm.expect(data.instituteName).to.eql(\"PROGM1\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check countryOfOriginCode\", function () {\r",
											"    pm.expect(data.countryOfOriginCode).to.eql(\"ORI_COUN1\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check typeOfGermplasmStorageCode\", function () {\r",
											"    pm.expect(data.typeOfGermplasmStorageCode).to.eql([]);\r",
											"});\r",
											"pm.test(\"Check genus\", function () {\r",
											"    pm.expect(data.genus).to.eql(\"GENUS1\");\r",
											"});\r",
											"pm.test(\"Check species\", function () {\r",
											"    pm.expect(data.species).to.eql(\"SPNAM1\");\r",
											"});\r",
											"pm.test(\"Check taxonIds\", function () {\r",
											"    pm.expect(data.taxonIds).to.eql([]);\r",
											"});\r",
											"pm.test(\"Check speciesAuthority\", function () {\r",
											"    pm.expect(data.speciesAuthority).to.eql(\"SPAUTH1\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check subtaxa\", function () {\r",
											"    pm.expect(data.subtaxa).to.eql(\"SUBTAX1\");\r",
											"});\r",
											"pm.test(\"Check subtaxaAuthority\", function () {\r",
											"    pm.expect(data.subtaxaAuthority).to.eql(\"STAUTH1\");\r",
											"});\r",
											"pm.test(\"Check donors\", function () {\r",
											"    pm.expect(data.donors).to.eql([]);\r",
											"});\r",
											"pm.test(\"Check acquisitionDate\", function () {\r",
											"    pm.expect(data.acquisitionDate).to.eql(\"2018-10-25\");\r",
											"});\r",
											"pm.test(\"Check breedingMethodDbId\", function () {\r",
											"    pm.expect(data.breedingMethodDbId).to.eql(\"Accession into genebank\");\r",
											"});\r",
											"pm.test(\"Check germplasmGenus\", function () {\r",
											"    pm.expect(data.germplasmGenus).to.eql(\"GENUS1\");\r",
											"});\r",
											"pm.test(\"Check germplasmSpecies\", function () {\r",
											"    pm.expect(data.germplasmSpecies).to.eql(\"SPNAM1\");\r",
											"});\r",
											"pm.test(\"Check seedSource\", function () {\r",
											"    pm.expect(data.seedSource).to.eql(\"AA001\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check observations\", function () {\r",
											"    pm.expect(jsonData.result.observations).to.eql([]);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/search/germplasm/{{searchResultDbId_commonCropNames}}?page=0&pageSize=100",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"search",
										"germplasm",
										"{{searchResultDbId_commonCropNames}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "100"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/search/germplasm/{searchResultsDbid}"
							},
							"response": []
						},
						{
							"name": "Verify results when entered searchResultsDbid that filters by germplasmGenus",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "00d6bb9a-257e-4e7f-886f-ac48e94a6a30",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "1acd7a70-ae71-40d4-ae3b-433d3fe4de41",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"var jsonData = pm.response.json();\r",
											"var data = jsonData.result.data[0];\r",
											"pm.test(\"Verify returned metadata\", function () {\r",
											"    pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);\r",
											"    pm.expect(jsonData.metadata.pagination.pageSize).to.eql(100);\r",
											"    pm.expect(jsonData.metadata.pagination.totalCount).to.eql(1);\r",
											"    pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);\r",
											"    pm.expect(jsonData.metadata.status).to.eql([]);\r",
											"    pm.expect(jsonData.metadata.datafiles).to.eql([]);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Check germplasmDbId \", function () {\r",
											"    pm.expect(data.germplasmDbId).to.eql(\"21\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check defaultDisplayName \", function () {\r",
											"    pm.expect(data.defaultDisplayName).to.eql(\"CML1\");\r",
											"});\r",
											"pm.test(\"Check accessionNumber \", function () {\r",
											"    pm.expect(data.accessionNumber).to.eql(\"ACCNO1\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check germplasmName \", function () {\r",
											"    pm.expect(data.germplasmName).to.eql(\"CML1\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check pedigree\", function () {\r",
											"    pm.expect(data.pedigree).to.eql(\"CML1\");\r",
											"});\r",
											"pm.test(\"Check germplasmSeedSource\", function () {\r",
											"    pm.expect(data.germplasmSeedSource).to.eql(\"AA001\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check synonyms\", function () {\r",
											" var names = [\"GP1\",\"ACCNO1\", \"DVNM1\", \"GENUS1\", \"DVNM1\"];\r",
											"   for (var i = 0; i < data.synonyms.length; i++) {\r",
											"    pm.expect(data.synonyms[i]).to.eql(names[i]);\r",
											"    }\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Check commonCropName\", function () {\r",
											"    pm.expect(data.commonCropName).to.eql(\"testdata\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check instituteCode\", function () {\r",
											"    pm.expect(data.instituteCode).to.eql(\"PROGM1\");\r",
											"});\r",
											"pm.test(\"Check instituteName\", function () {\r",
											"    pm.expect(data.instituteName).to.eql(\"PROGM1\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check countryOfOriginCode\", function () {\r",
											"    pm.expect(data.countryOfOriginCode).to.eql(\"ORI_COUN1\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check typeOfGermplasmStorageCode\", function () {\r",
											"    pm.expect(data.typeOfGermplasmStorageCode).to.eql([]);\r",
											"});\r",
											"pm.test(\"Check genus\", function () {\r",
											"    pm.expect(data.genus).to.eql(\"GENUS1\");\r",
											"});\r",
											"pm.test(\"Check species\", function () {\r",
											"    pm.expect(data.species).to.eql(\"SPNAM1\");\r",
											"});\r",
											"pm.test(\"Check taxonIds\", function () {\r",
											"    pm.expect(data.taxonIds).to.eql([]);\r",
											"});\r",
											"pm.test(\"Check speciesAuthority\", function () {\r",
											"    pm.expect(data.speciesAuthority).to.eql(\"SPAUTH1\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check subtaxa\", function () {\r",
											"    pm.expect(data.subtaxa).to.eql(\"SUBTAX1\");\r",
											"});\r",
											"pm.test(\"Check subtaxaAuthority\", function () {\r",
											"    pm.expect(data.subtaxaAuthority).to.eql(\"STAUTH1\");\r",
											"});\r",
											"pm.test(\"Check donors\", function () {\r",
											"    pm.expect(data.donors).to.eql([]);\r",
											"});\r",
											"pm.test(\"Check acquisitionDate\", function () {\r",
											"    pm.expect(data.acquisitionDate).to.eql(\"2018-10-25\");\r",
											"});\r",
											"pm.test(\"Check breedingMethodDbId\", function () {\r",
											"    pm.expect(data.breedingMethodDbId).to.eql(\"Accession into genebank\");\r",
											"});\r",
											"pm.test(\"Check germplasmGenus\", function () {\r",
											"    pm.expect(data.germplasmGenus).to.eql(\"GENUS1\");\r",
											"});\r",
											"pm.test(\"Check germplasmSpecies\", function () {\r",
											"    pm.expect(data.germplasmSpecies).to.eql(\"SPNAM1\");\r",
											"});\r",
											"pm.test(\"Check seedSource\", function () {\r",
											"    pm.expect(data.seedSource).to.eql(\"AA001\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check observations\", function () {\r",
											"    pm.expect(jsonData.result.observations).to.eql([]);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/search/germplasm/{{searchResultDbId_germplasmGenus}}?page=0&pageSize=100",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"search",
										"germplasm",
										"{{searchResultDbId_germplasmGenus}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "100"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/search/germplasm/{searchResultsDbid}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered non-existing searchResultsDbid",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "3a9605da-3ee2-4183-822f-b0124bff480d",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "9f9815f8-77ee-43c4-b31f-3cba265f2c79",
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"pm.test(\"Check error message\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.metadata.status[0].message).to.eql(\"no search request found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/search/germplasm/99999?page=0&pageSize=100",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"search",
										"germplasm",
										"99999"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "100"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/search/germplasm/{searchResultsDbid}"
							},
							"response": []
						},
						{
							"name": "Verify results when entered searchResultsDbid that filters by germplasmNames",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "add579a2-d029-44f1-b27a-45eb038da3ac",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "625eae06-b9b8-4e47-abd5-fc0579c17b77",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"var jsonData = pm.response.json();\r",
											"var data = jsonData.result.data[0];\r",
											"pm.test(\"Verify returned metadata\", function () {\r",
											"    pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);\r",
											"    pm.expect(jsonData.metadata.pagination.pageSize).to.eql(100);\r",
											"    pm.expect(jsonData.metadata.pagination.totalCount).to.eql(1);\r",
											"    pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);\r",
											"    pm.expect(jsonData.metadata.status).to.eql([]);\r",
											"    pm.expect(jsonData.metadata.datafiles).to.eql([]);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Check germplasmDbId \", function () {\r",
											"    pm.expect(data.germplasmDbId).to.eql(\"21\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check defaultDisplayName \", function () {\r",
											"    pm.expect(data.defaultDisplayName).to.eql(\"CML1\");\r",
											"});\r",
											"pm.test(\"Check accessionNumber \", function () {\r",
											"    pm.expect(data.accessionNumber).to.eql(\"ACCNO1\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check germplasmName \", function () {\r",
											"    pm.expect(data.germplasmName).to.eql(\"CML1\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check pedigree\", function () {\r",
											"    pm.expect(data.pedigree).to.eql(\"CML1\");\r",
											"});\r",
											"pm.test(\"Check germplasmSeedSource\", function () {\r",
											"    pm.expect(data.germplasmSeedSource).to.eql(\"AA001\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check synonyms\", function () {\r",
											" var names = [\"GP1\",\"ACCNO1\", \"DVNM1\", \"GENUS1\", \"DVNM1\"];\r",
											"   for (var i = 0; i < data.synonyms.length; i++) {\r",
											"    pm.expect(data.synonyms[i]).to.eql(names[i]);\r",
											"    }\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Check commonCropName\", function () {\r",
											"    pm.expect(data.commonCropName).to.eql(\"testdata\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check instituteCode\", function () {\r",
											"    pm.expect(data.instituteCode).to.eql(\"PROGM1\");\r",
											"});\r",
											"pm.test(\"Check instituteName\", function () {\r",
											"    pm.expect(data.instituteName).to.eql(\"PROGM1\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check countryOfOriginCode\", function () {\r",
											"    pm.expect(data.countryOfOriginCode).to.eql(\"ORI_COUN1\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check typeOfGermplasmStorageCode\", function () {\r",
											"    pm.expect(data.typeOfGermplasmStorageCode).to.eql([]);\r",
											"});\r",
											"pm.test(\"Check genus\", function () {\r",
											"    pm.expect(data.genus).to.eql(\"GENUS1\");\r",
											"});\r",
											"pm.test(\"Check species\", function () {\r",
											"    pm.expect(data.species).to.eql(\"SPNAM1\");\r",
											"});\r",
											"pm.test(\"Check taxonIds\", function () {\r",
											"    pm.expect(data.taxonIds).to.eql([]);\r",
											"});\r",
											"pm.test(\"Check speciesAuthority\", function () {\r",
											"    pm.expect(data.speciesAuthority).to.eql(\"SPAUTH1\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check subtaxa\", function () {\r",
											"    pm.expect(data.subtaxa).to.eql(\"SUBTAX1\");\r",
											"});\r",
											"pm.test(\"Check subtaxaAuthority\", function () {\r",
											"    pm.expect(data.subtaxaAuthority).to.eql(\"STAUTH1\");\r",
											"});\r",
											"pm.test(\"Check donors\", function () {\r",
											"    pm.expect(data.donors).to.eql([]);\r",
											"});\r",
											"pm.test(\"Check acquisitionDate\", function () {\r",
											"    pm.expect(data.acquisitionDate).to.eql(\"2018-10-25\");\r",
											"});\r",
											"pm.test(\"Check breedingMethodDbId\", function () {\r",
											"    pm.expect(data.breedingMethodDbId).to.eql(\"Accession into genebank\");\r",
											"});\r",
											"pm.test(\"Check germplasmGenus\", function () {\r",
											"    pm.expect(data.germplasmGenus).to.eql(\"GENUS1\");\r",
											"});\r",
											"pm.test(\"Check germplasmSpecies\", function () {\r",
											"    pm.expect(data.germplasmSpecies).to.eql(\"SPNAM1\");\r",
											"});\r",
											"pm.test(\"Check seedSource\", function () {\r",
											"    pm.expect(data.seedSource).to.eql(\"AA001\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check observations\", function () {\r",
											"    pm.expect(jsonData.result.observations).to.eql([]);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/search/germplasm/{{searchResultDbId_germplasmNames}}?page=0&pageSize=100",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"search",
										"germplasm",
										"{{searchResultDbId_germplasmNames}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "100"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/search/germplasm/{searchResultsDbid}"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "GET ​/{crop}​/brapi​/v1​/studies​/{studyDbId}​/germplasm",
					"item": [
						{
							"name": "Verify response code and body when entered valid studyDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5e17d224-2ea2-4db3-9a3d-c812cf717fe4",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"var data = jsonData.result.data[0];",
											"pm.test(\"Verify returned metadata\", function () {",
											"",
											"    pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											"    pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											"    pm.expect(jsonData.metadata.pagination.totalCount).to.eql(20);",
											"    pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											"    pm.expect(jsonData.metadata.status).to.eql([]);",
											"    pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"//Verify returned data",
											"pm.test(\"Check germplasmDbId\", function () {",
											"    pm.expect(data.germplasmDbId).to.eql(\"21\");",
											"});",
											"",
											"pm.test(\"Check defaultDisplayName\", function () {",
											"    pm.expect(data.defaultDisplayName).to.eql(\"CML1\");",
											"});",
											"pm.test(\"Check germplasmName\", function () {",
											"    pm.expect(data.germplasmName).to.eql(\"CML1\");",
											"});",
											"pm.test(\"Check pedigree\", function () {",
											"    pm.expect(data.pedigree).to.eql(\"CML1\");",
											"});",
											"pm.test(\"Check germplasmSeedSource\", function () {",
											"    pm.expect(data.germplasmSeedSource).to.eql(\"AA001\");",
											"});",
											"pm.test(\"Check synonyms\", function () {",
											" var names = [\"GP1\",\"ACCNO1\", \"DVNM1\", \"GENUS1\", \"DVNM1\"];",
											"   for (var i = 0; i < data.synonyms.length; i++) {",
											"    pm.expect(data.synonyms[i]).to.eql(names[i]);",
											"    }",
											"",
											"});",
											"pm.test(\"Check commonCropName\", function () {",
											"    pm.expect(data.commonCropName).to.eql(\"testdata\");",
											"});",
											"pm.test(\"Check instituteCode\", function () {",
											"    pm.expect(data.instituteCode).to.eql(\"PROGM1\");",
											"});",
											"pm.test(\"Check instituteName\", function () {",
											"    pm.expect(data.instituteName).to.eql(\"PROGM1\");",
											"});",
											"pm.test(\"Check countryOfOriginCode\", function () {",
											"    pm.expect(data.countryOfOriginCode).to.eql(\"ORI_COUN1\");",
											"});",
											"pm.test(\"Check typeOfGermplasmStorageCode\", function () {",
											"    pm.expect(data.typeOfGermplasmStorageCode).to.eql([]);",
											"});",
											"pm.test(\"Check genus\", function () {",
											"    pm.expect(data.genus).to.eql(\"GENUS1\");",
											"});",
											"pm.test(\"Check species\", function () {",
											"    pm.expect(data.species).to.eql(\"SPNAM1\");",
											"});",
											"pm.test(\"Check taxonIds\", function () {",
											"    pm.expect(data.taxonIds).to.eql([]);",
											"});",
											"pm.test(\"Check speciesAuthority\", function () {",
											"    pm.expect(data.speciesAuthority).to.eql(\"SPAUTH1\");",
											"});",
											"pm.test(\"Check subtaxa\", function () {",
											"    pm.expect(data.subtaxa).to.eql(\"SUBTAX1\");",
											"});",
											"pm.test(\"Check subtaxaAuthority\", function () {",
											"    pm.expect(data.subtaxaAuthority).to.eql(\"STAUTH1\");",
											"});",
											"pm.test(\"Check donors\", function () {",
											"    pm.expect(data.donors).to.eql([]);",
											"});",
											"pm.test(\"Check acquisitionDate\", function () {",
											"    pm.expect(data.acquisitionDate).to.eql(\"2018-10-25\");",
											"});",
											"pm.test(\"Check breedingMethodDbId\", function () {",
											"    pm.expect(data.breedingMethodDbId).to.eql(\"Accession into genebank\");",
											"});",
											"pm.test(\"Check germplasmGenus\", function () {",
											"    pm.expect(data.germplasmGenus).to.eql(\"GENUS1\");",
											"});",
											"pm.test(\"Check germplasmSpecies\", function () {",
											"    pm.expect(data.germplasmSpecies).to.eql(\"SPNAM1\");",
											"});",
											"pm.test(\"Check seedSource\", function () {",
											"    pm.expect(data.seedSource).to.eql(\"AA001\");",
											"});",
											"pm.test(\"Check entryNumber\", function () {",
											"    pm.expect(data.entryNumber).to.eql(\"1\");",
											"});",
											"",
											"",
											"pm.test(\"Verify returned studyDbId\", function () {",
											"    pm.expect(jsonData.result.studyDbId).to.eql(pm.environment.get(\"studyDbId\"));",
											"});",
											"pm.test(\"Verify returned trialName\", function () {",
											"    pm.expect(jsonData.result.trialName).to.eql(\"Randomized Trial 20180003\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "852f952a-4438-4c0d-8d18-32dbe4a83553",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/studies/{{studyDbId}}/germplasm",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"studies",
										"{{studyDbId}}",
										"germplasm"
									]
								},
								"description": "GET /{crop}/brapi/v1/studies/{studyDbId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered non-existing studyDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2b35bcff-7b91-4af7-83b6-2c5833e2052c",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Verify returned error\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"StudyDbId does not exist\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "081330c8-0b1c-4200-b80b-c4ba10b0acaf",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/studies/{{non_existing_study_id}}/germplasm",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"studies",
										"{{non_existing_study_id}}",
										"germplasm"
									]
								},
								"description": "GET /{crop}/brapi/v1/studies/{studyDbId}"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "GET ​/{crop}​/brapi​/v1​/germplasm-search",
					"item": [
						{
							"name": "GET /{crop}/brapi/v1/germplasm-search using germplasmName",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e0024d97-87c4-4bb2-b892-abf55d030101",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Check GID \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0].germplasmDbId).to.eql(\"21\");",
											"});",
											"",
											"pm.test(\"Check defaultDisplayName \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0].defaultDisplayName).to.eql(\"CML1\");",
											"});",
											"pm.test(\"Check accessionNumber \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0].accessionNumber).to.eql(\"ACCNO1\");",
											"});",
											"",
											"pm.test(\"Check germplasmName \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0].germplasmName).to.eql(\"CML1\");",
											"});",
											"",
											"pm.test(\"Check pedigree\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0].pedigree).to.eql(\"CML1\");",
											"});",
											"  ",
											"pm.test(\"Check germplasmSeedSource\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0].germplasmSeedSource).to.eql(\"AA001\");",
											"});",
											"  ",
											"pm.test(\"Check commonCropName\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0].commonCropName).to.eql(\"testdata\");",
											"});",
											"",
											"pm.test(\"Check instituteCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0].instituteCode).to.eql(\"PROGM1\");",
											"});",
											"pm.test(\"Check instituteName\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0].instituteName).to.eql(\"PROGM1\");",
											"});",
											"",
											"pm.test(\"Check countryOfOriginCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0].countryOfOriginCode).to.eql(\"ORI_COUN1\");",
											"});",
											"",
											"pm.test(\"Check genus\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0].genus).to.eql(\"GENUS1\");",
											"});",
											"",
											"pm.test(\"Check species\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0].species).to.eql(\"SPNAM1\");",
											"});",
											"",
											"pm.test(\"Check speciesAuthority\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0].speciesAuthority).to.eql(\"SPAUTH1\");",
											"});",
											"",
											"pm.test(\"Check subtaxa\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0].subtaxa).to.eql(\"SUBTAX1\");",
											"});",
											"",
											"pm.test(\"Check acquisitionDate\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0].acquisitionDate).to.eql(\"2018-10-25\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "6aba62bf-d15a-4b9f-bd06-16de0d2a8762",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/germplasm-search?germplasmName=CML1",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"germplasm-search"
									],
									"query": [
										{
											"key": "germplasmName",
											"value": "CML1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET /{crop}/brapi/v1/germplasm-search using germplasmDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0ca7873e-cd5e-4c5b-81d7-f58ee9592186",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Check GID \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0].germplasmDbId).to.eql(\"21\");",
											"});",
											"",
											"pm.test(\"Check defaultDisplayName \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0].defaultDisplayName).to.eql(\"CML1\");",
											"});",
											"pm.test(\"Check accessionNumber \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0].accessionNumber).to.eql(\"ACCNO1\");",
											"});",
											"",
											"pm.test(\"Check germplasmName \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0].germplasmName).to.eql(\"CML1\");",
											"});",
											"",
											"pm.test(\"Check pedigree\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0].pedigree).to.eql(\"CML1\");",
											"});",
											"  ",
											"pm.test(\"Check germplasmSeedSource\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0].germplasmSeedSource).to.eql(\"AA001\");",
											"});",
											"  ",
											"pm.test(\"Check commonCropName\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0].commonCropName).to.eql(\"testdata\");",
											"});",
											"",
											"pm.test(\"Check instituteCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0].instituteCode).to.eql(\"PROGM1\");",
											"});",
											"pm.test(\"Check instituteName\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0].instituteName).to.eql(\"PROGM1\");",
											"});",
											"",
											"pm.test(\"Check countryOfOriginCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0].countryOfOriginCode).to.eql(\"ORI_COUN1\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f50783c4-213e-4f23-ba00-97af705f52f1",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/germplasm-search?germplasmDbId=21",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"germplasm-search"
									],
									"query": [
										{
											"key": "germplasmDbId",
											"value": "21"
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "location-resource-brapi",
			"item": [
				{
					"name": "Verify response code and body when entered valid crop",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2c50970d-659c-4d29-bc10-82c8ff4125dc",
								"exec": [
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Check total results\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.metadata.pagination.totalCount).to.eql(5069);",
									"});",
									"",
									"pm.test(\"Check a country location\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.result.data[1].name).to.eql(\"Afghanistan\") &&",
									"    pm.expect(jsonData.result.data[1].locationType).to.eql(\"Country\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "ff03055c-48ca-41b9-bfaa-c9193439efc9",
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{masterToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BMSurl}}/{{crop}}/brapi/v1/locations",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"{{crop}}",
								"brapi",
								"v1",
								"locations"
							]
						},
						"description": "GET ​/{crop}​/brapi​/v1​/locations"
					},
					"response": []
				},
				{
					"name": "Verify response code and body when entered locationType",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e9bed654-cd1a-4ff5-9c91-84c45073a0df",
								"exec": [
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check location type of first result item\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.result.data[0].locationType).to.eql(\"Breeding Location\")",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "838af0c3-f04b-4a9c-81fc-377e6cb470fe",
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{masterToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BMSurl}}/{{crop}}/brapi/v1/locations?locationType=breeding location",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"{{crop}}",
								"brapi",
								"v1",
								"locations"
							],
							"query": [
								{
									"key": "locationType",
									"value": "breeding location"
								}
							]
						},
						"description": "GET ​/{crop}​/brapi​/v1​/locations"
					},
					"response": []
				},
				{
					"name": "Verify response code and body when entered pagination details",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0282054f-d9ef-4b97-aa21-2abf43e67279",
								"exec": [
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check current page\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0)",
									"});",
									"",
									"pm.test(\"Check pageSize\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.metadata.pagination.pageSize).to.eql(10000)",
									"});",
									"",
									"pm.test(\"Check total results\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.metadata.pagination.totalCount).to.eql(5069);",
									"});",
									"",
									"pm.test(\"Check a country location\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.result.data[1].name).to.eql(\"Afghanistan\") &&",
									"    pm.expect(jsonData.result.data[1].locationType).to.eql(\"Country\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "a74aa4fa-cafe-4d90-bf6c-a247b315829b",
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{masterToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BMSurl}}/{{crop}}/brapi/v1/locations?page=0&pageSize=10000",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"{{crop}}",
								"brapi",
								"v1",
								"locations"
							],
							"query": [
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "pageSize",
									"value": "10000"
								}
							]
						},
						"description": "GET ​/{crop}​/brapi​/v1​/locations"
					},
					"response": []
				},
				{
					"name": "Verify response code and body when entered pageSize greater than max",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a4b73cbf-d1e8-4d8b-9098-6c019b0f68ee",
								"exec": [
									"pm.test(\"Status code is 500\", function () {",
									"    pm.response.to.have.status(500);",
									"});",
									"",
									"pm.test(\"Verify returned error message\", function () {",
									"    var jsonData = pm.response.json();",
									" pm.expect(jsonData.errors[0].message).to.eql(\"Page size must between 1 and 10000.\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "8b83c6d3-7249-44ae-9ba5-509ddfe98fd6",
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{masterToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BMSurl}}/{{crop}}/brapi/v1/locations?page=0&pageSize=10001",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"{{crop}}",
								"brapi",
								"v1",
								"locations"
							],
							"query": [
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "pageSize",
									"value": "10001"
								}
							]
						},
						"description": "GET ​/{crop}​/brapi​/v1​/locations"
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "program-resource-brapi",
			"item": [
				{
					"name": "GET ​/{crop}​/brapi​/v1​/programs",
					"item": [
						{
							"name": "Verify response code and body when entered programName",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1da5f736-6926-4a23-ae1b-4a417a502fe1",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(1);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"pm.test(\"Check programDbId\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0].programDbId).to.eql(\"c9e335d2-3057-4958-a43e-e38cf61d09ca\");",
											"});",
											"pm.test(\"Check programName\",function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0].name).to.eql(\"API Program\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "11f1d43b-ff67-4429-9db0-791b1d3e8400",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/programs?programName=API Program",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"programs"
									],
									"query": [
										{
											"key": "programName",
											"value": "API Program"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v1​/programs"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered non-existing programName",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "dbe0de83-be3a-487d-9c1f-e6480ec19cd0",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"",
											"pm.test(\"Verify returned error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.metadata.status[0].message).to.eql(\"program not found.\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "31126882-4b0b-48e5-a143-168e9c484855",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/programs?programName=non-existing program name",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"programs"
									],
									"query": [
										{
											"key": "programName",
											"value": "non-existing program name"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v1​/programs"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered crop name only",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a9d25b4b-dfa9-4865-9694-fc5e661e4810",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(1);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"pm.test(\"Check programDbId\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0].programDbId).to.eql(\"c9e335d2-3057-4958-a43e-e38cf61d09ca\");",
											"});",
											"pm.test(\"Check programName\",function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0].name).to.eql(\"API Program\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2cde6eeb-e3a9-47b2-91aa-5ae0ef09e3b4",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/programs",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"programs"
									]
								},
								"description": "GET ​/{crop}​/brapi​/v1​/programs"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered pagination details",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "73231034-e40d-4f69-80d5-f0e24e01eadc",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(10000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(1);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"pm.test(\"Check programDbId\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0].programDbId).to.eql(\"c9e335d2-3057-4958-a43e-e38cf61d09ca\");",
											"});",
											"pm.test(\"Check programName\",function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0].name).to.eql(\"API Program\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "7e8f82ea-ef17-4555-9e1c-3174c525b64e",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/programs?page=0&pageSize=10000",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"programs"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "10000"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v1​/programs"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered pageSize greater than maximum",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "64578853-9fb2-4b5d-9303-6596f3d59793",
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"",
											"pm.test(\"Verify returned error message\",function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Page size must between 1 and 10000.\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f0f2d939-c57c-4ede-8b7c-5df2d484f654",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/programs?page=0&pageSize=10001",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"programs"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "10001"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v1​/programs"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "sample-resource-brapi",
			"item": [
				{
					"name": "Verify response code and body when entered valid sampleId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "76b214bb-33b1-4234-b8a7-8a9e8a2c562c",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Verify returned sampleId\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.result.sampleId).to.eql(pm.environment.get(\"study_sampleId\"));",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "de08a18a-3445-4b54-8215-90fa17404c72",
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{masterToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BMSurl}}/{{crop}}/brapi/v1/samples/{{study_sampleId}}",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"{{crop}}",
								"brapi",
								"v1",
								"samples",
								"{{study_sampleId}}"
							]
						},
						"description": "GET /{crop}/brapi/v1/samples/{sampleId}"
					},
					"response": []
				},
				{
					"name": "Verify response code and body when entered invalid sampleId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "55a41e4b-b131-471b-a506-cdf209963894",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"pm.test(\"Verify returned error message\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.metadata.status[0].message).to.eql(\"not found sample\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "063c8d3a-016f-4a63-82bd-5c232ab4b1dc",
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{masterToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BMSurl}}/{{crop}}/brapi/v1/samples/{{string_not_found}}",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"{{crop}}",
								"brapi",
								"v1",
								"samples",
								"{{string_not_found}}"
							]
						},
						"description": "GET /{crop}/brapi/v1/samples/{sampleId}"
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "trial-resource-brapi",
			"item": [
				{
					"name": "GET ​/{crop}​/brapi​/v1​/trials",
					"item": [
						{
							"name": "Verify response code and body when entered crop name only",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a82b896a-4762-49f6-9e77-ce10f3a25f08",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"var i = 1;",
											"",
											"//Check details of a trial in the list are correct",
											"pm.test(\"Check trialDbId\", function () {",
											"  pm.expect(jsonData.result.data[i].trialDbId).to.eql(JSON.parse(pm.environment.get(\"trialStudyId\")));",
											"});",
											"pm.test(\"Check trialName\", function () {",
											"    pm.expect(jsonData.result.data[i].trialName).to.eql(\"Randomized Trial 20180003\");",
											"});",
											"",
											"pm.test(\"Check programDbId\", function () {",
											"    pm.expect(jsonData.result.data[i].programDbId).to.eql(\"c9e335d2-3057-4958-a43e-e38cf61d09ca\");",
											"});",
											"",
											"pm.test(\"Check programDbId\", function () {",
											"    pm.expect(jsonData.result.data[i].programName).to.eql(\"API Program\");",
											"});",
											"pm.test(\"Check startDate\", function () {",
											"   ",
											"});",
											"pm.test(\"Check startDate\", function () {",
											"    pm.expect(jsonData.result.data[i].startDate).to.eql(\"2018-09-12\");",
											"});",
											"",
											"pm.test(\"Check endDate\", function () { ",
											"    pm.expect(jsonData.result.data[1].endDate).to.eql(\"2019-02-20\");",
											"});",
											"",
											"pm.test(\"Check active\", function () {  ",
											"    pm.expect(jsonData.result.data[i].active).to.eql(true);",
											"});",
											"",
											"//Check details of an associated environment are correct",
											"pm.test(\"Check studyDbId\", function () {  ",
											"    pm.expect(jsonData.result.data[i].studies[0].studyDbId).to.eql(2);",
											"});",
											"",
											"pm.test(\"Check studyName\", function () {  ",
											"       pm.expect(jsonData.result.data[i].studies[0].studyName).to.eql(\"Randomized Trial 20180003 Environment Number 1\");",
											"});",
											"",
											"pm.test(\"Check locationDbId\", function () { ",
											"    pm.expect(jsonData.result.data[i].studies[0].locationDbId).to.eql(\"9001\");",
											"});",
											"pm.test(\"Check locationName\", function () {",
											"    pm.expect(jsonData.result.data[i].studies[0].locationName).to.eql(\"Africa Rice Centre\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2f6a0f95-dacc-4140-9f75-91805cca3e3f",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/trials",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"trials"
									]
								},
								"description": "GET ​/{crop}​/brapi​/v1​/trials"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered programDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a647b9f8-8135-4cd3-b238-9f7b57a0eb08",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"var i = 1;",
											"",
											"//Check details of a trial in the list are correct",
											"pm.test(\"Check trialDbId\", function () {",
											"  pm.expect(jsonData.result.data[i].trialDbId).to.eql(JSON.parse(pm.environment.get(\"trialStudyId\")));",
											"});",
											"pm.test(\"Check trialName\", function () {",
											"    pm.expect(jsonData.result.data[i].trialName).to.eql(\"Randomized Trial 20180003\");",
											"});",
											"",
											"pm.test(\"Check programDbId\", function () {",
											"    pm.expect(jsonData.result.data[i].programDbId).to.eql(\"c9e335d2-3057-4958-a43e-e38cf61d09ca\");",
											"});",
											"",
											"pm.test(\"Check programDbId\", function () {",
											"    pm.expect(jsonData.result.data[i].programName).to.eql(\"API Program\");",
											"});",
											"pm.test(\"Check startDate\", function () {",
											"   ",
											"});",
											"pm.test(\"Check startDate\", function () {",
											"    pm.expect(jsonData.result.data[i].startDate).to.eql(\"2018-09-12\");",
											"});",
											"",
											"pm.test(\"Check endDate\", function () { ",
											"    pm.expect(jsonData.result.data[1].endDate).to.eql(\"2019-02-20\");",
											"});",
											"",
											"pm.test(\"Check active\", function () {  ",
											"    pm.expect(jsonData.result.data[i].active).to.eql(true);",
											"});",
											"",
											"//Check details of an associated environment are correct",
											"pm.test(\"Check studyDbId\", function () {  ",
											"    pm.expect(jsonData.result.data[i].studies[0].studyDbId).to.eql(2);",
											"});",
											"",
											"pm.test(\"Check studyName\", function () {  ",
											"       pm.expect(jsonData.result.data[i].studies[0].studyName).to.eql(\"Randomized Trial 20180003 Environment Number 1\");",
											"});",
											"",
											"pm.test(\"Check locationDbId\", function () { ",
											"    pm.expect(jsonData.result.data[i].studies[0].locationDbId).to.eql(\"9001\");",
											"});",
											"pm.test(\"Check locationName\", function () {",
											"    pm.expect(jsonData.result.data[i].studies[0].locationName).to.eql(\"Africa Rice Centre\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "760cce75-f166-4ce1-96dc-8ded1bd225ec",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/trials?programDbId={{programDbId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"trials"
									],
									"query": [
										{
											"key": "programDbId",
											"value": "{{programDbId}}"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v1​/trials"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered locationDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e4590482-d05f-4ae2-b2cb-21f7d78549d0",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "07326135-8b6a-495d-bb53-afe6f625bb11",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/trials?locationDbId=9001",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"trials"
									],
									"query": [
										{
											"key": "locationDbId",
											"value": "9001"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v1​/trials"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered page and pageSize",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7f71e8c7-61e0-4c8b-a3d3-0f243fec6f5e",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"var i = 1;",
											"",
											"//Check details of a trial in the list are correct",
											"pm.test(\"Check trialDbId\", function () {",
											"  pm.expect(jsonData.result.data[i].trialDbId).to.eql(JSON.parse(pm.environment.get(\"trialStudyId\")));",
											"});",
											"pm.test(\"Check trialName\", function () {",
											"    pm.expect(jsonData.result.data[i].trialName).to.eql(\"Randomized Trial 20180003\");",
											"});",
											"",
											"pm.test(\"Check programDbId\", function () {",
											"    pm.expect(jsonData.result.data[i].programDbId).to.eql(\"c9e335d2-3057-4958-a43e-e38cf61d09ca\");",
											"});",
											"",
											"pm.test(\"Check programDbId\", function () {",
											"    pm.expect(jsonData.result.data[i].programName).to.eql(\"API Program\");",
											"});",
											"pm.test(\"Check startDate\", function () {",
											"   ",
											"});",
											"pm.test(\"Check startDate\", function () {",
											"    pm.expect(jsonData.result.data[i].startDate).to.eql(\"2018-09-12\");",
											"});",
											"",
											"pm.test(\"Check endDate\", function () { ",
											"    pm.expect(jsonData.result.data[1].endDate).to.eql(\"2019-02-20\");",
											"});",
											"",
											"pm.test(\"Check active\", function () {  ",
											"    pm.expect(jsonData.result.data[i].active).to.eql(true);",
											"});",
											"",
											"//Check details of an associated environment are correct",
											"pm.test(\"Check studyDbId\", function () {  ",
											"    pm.expect(jsonData.result.data[i].studies[0].studyDbId).to.eql(2);",
											"});",
											"",
											"pm.test(\"Check studyName\", function () {  ",
											"       pm.expect(jsonData.result.data[i].studies[0].studyName).to.eql(\"Randomized Trial 20180003 Environment Number 1\");",
											"});",
											"",
											"pm.test(\"Check locationDbId\", function () { ",
											"    pm.expect(jsonData.result.data[i].studies[0].locationDbId).to.eql(\"9001\");",
											"});",
											"pm.test(\"Check locationName\", function () {",
											"    pm.expect(jsonData.result.data[i].studies[0].locationName).to.eql(\"Africa Rice Centre\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "55990939-aec3-4a29-a340-4c7ac38fe299",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/trials?page=0&pageSize=2",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"trials"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "2"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v1​/trials"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered pageSize greater than max",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b703510f-b0b5-4635-9808-62775f03fcab",
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"",
											"pm.test(\"Check response message when exceeded max page size\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Page size must between 1 and 10000.\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a201294e-a3b4-4682-a92e-6354c9548fa7",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/trials?page=0&pageSize=10001",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"trials"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "10001"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v1​/trials"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered active status",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "71442ef5-7d33-424c-81bc-eee3a63987a2",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"var i = 1;",
											"",
											"//Check details of a trial in the list are correct",
											"pm.test(\"Check trialDbId\", function () {",
											"  pm.expect(jsonData.result.data[i].trialDbId).to.eql(JSON.parse(pm.environment.get(\"trialStudyId\")));",
											"});",
											"pm.test(\"Check trialName\", function () {",
											"    pm.expect(jsonData.result.data[i].trialName).to.eql(\"Randomized Trial 20180003\");",
											"});",
											"",
											"pm.test(\"Check programDbId\", function () {",
											"    pm.expect(jsonData.result.data[i].programDbId).to.eql(\"c9e335d2-3057-4958-a43e-e38cf61d09ca\");",
											"});",
											"",
											"pm.test(\"Check programDbId\", function () {",
											"    pm.expect(jsonData.result.data[i].programName).to.eql(\"API Program\");",
											"});",
											"pm.test(\"Check startDate\", function () {",
											"   ",
											"});",
											"pm.test(\"Check startDate\", function () {",
											"    pm.expect(jsonData.result.data[i].startDate).to.eql(\"2018-09-12\");",
											"});",
											"",
											"pm.test(\"Check endDate\", function () { ",
											"    pm.expect(jsonData.result.data[1].endDate).to.eql(\"2019-02-20\");",
											"});",
											"",
											"pm.test(\"Check active\", function () {  ",
											"    pm.expect(jsonData.result.data[i].active).to.eql(true);",
											"});",
											"",
											"//Check details of an associated environment are correct",
											"pm.test(\"Check studyDbId\", function () {  ",
											"    pm.expect(jsonData.result.data[i].studies[0].studyDbId).to.eql(2);",
											"});",
											"",
											"pm.test(\"Check studyName\", function () {  ",
											"       pm.expect(jsonData.result.data[i].studies[0].studyName).to.eql(\"Randomized Trial 20180003 Environment Number 1\");",
											"});",
											"",
											"pm.test(\"Check locationDbId\", function () { ",
											"    pm.expect(jsonData.result.data[i].studies[0].locationDbId).to.eql(\"9001\");",
											"});",
											"pm.test(\"Check locationName\", function () {",
											"    pm.expect(jsonData.result.data[i].studies[0].locationName).to.eql(\"Africa Rice Centre\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "cb0a09d5-829d-4b50-930c-9ed825cc445e",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/trials?status=true",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"trials"
									],
									"query": [
										{
											"key": "status",
											"value": "true"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v1​/trials"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered inactive status",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5f1216e8-70a1-4029-ac97-f7566448139e",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Response message is no inactive studies found \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.metadata.status[0].message).to.eql(\"No inactive studies found.\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "269dfad6-fc45-44c3-8fb5-9fdb51df16ad",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/trials?active=false",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"trials"
									],
									"query": [
										{
											"key": "active",
											"value": "false"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v1​/trials"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered valid field name",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6ac53795-ec3d-43d5-b115-be0d2a7014e6",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"var i = 1;",
											"",
											"//Check details of a trial in the list are correct",
											"pm.test(\"Check trialDbId\", function () {",
											"  pm.expect(jsonData.result.data[i].trialDbId).to.eql(JSON.parse(pm.environment.get(\"trialStudyId\")));",
											"});",
											"pm.test(\"Check trialName\", function () {",
											"    pm.expect(jsonData.result.data[i].trialName).to.eql(\"Randomized Trial 20180003\");",
											"});",
											"",
											"pm.test(\"Check programDbId\", function () {",
											"    pm.expect(jsonData.result.data[i].programDbId).to.eql(\"c9e335d2-3057-4958-a43e-e38cf61d09ca\");",
											"});",
											"",
											"pm.test(\"Check programDbId\", function () {",
											"    pm.expect(jsonData.result.data[i].programName).to.eql(\"API Program\");",
											"});",
											"pm.test(\"Check startDate\", function () {",
											"   ",
											"});",
											"pm.test(\"Check startDate\", function () {",
											"    pm.expect(jsonData.result.data[i].startDate).to.eql(\"2018-09-12\");",
											"});",
											"",
											"pm.test(\"Check endDate\", function () { ",
											"    pm.expect(jsonData.result.data[1].endDate).to.eql(\"2019-02-20\");",
											"});",
											"",
											"pm.test(\"Check active\", function () {  ",
											"    pm.expect(jsonData.result.data[i].active).to.eql(true);",
											"});",
											"",
											"//Check details of an associated environment are correct",
											"pm.test(\"Check studyDbId\", function () {  ",
											"    pm.expect(jsonData.result.data[i].studies[0].studyDbId).to.eql(2);",
											"});",
											"",
											"pm.test(\"Check studyName\", function () {  ",
											"       pm.expect(jsonData.result.data[i].studies[0].studyName).to.eql(\"Randomized Trial 20180003 Environment Number 1\");",
											"});",
											"",
											"pm.test(\"Check locationDbId\", function () { ",
											"    pm.expect(jsonData.result.data[i].studies[0].locationDbId).to.eql(\"9001\");",
											"});",
											"pm.test(\"Check locationName\", function () {",
											"    pm.expect(jsonData.result.data[i].studies[0].locationName).to.eql(\"Africa Rice Centre\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5aa90f82-664a-4e28-b627-a397f5ffaaab",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/trials?sortedBy=trialDbId",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"trials"
									],
									"query": [
										{
											"key": "sortedBy",
											"value": "trialDbId"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v1​/trials"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid field name",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "45ef3a30-c894-4630-a1cf-2787f3ae3b1d",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Response message is correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.metadata.status[0].message).to.eql(\"sortBy bad filter, expect trialDbId/trialName/programDbId/programName/startDate/endDate/active\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d3cb33e8-e4f4-4a52-9678-610854b953ee",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/trials?sortBy=studyId",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"trials"
									],
									"query": [
										{
											"key": "sortBy",
											"value": "studyId"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v1​/trials"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when sorted in ascending order",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2c28a478-2c2f-4363-b2d2-d26fc6de4872",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check if first trialDbId is less than next trialDbId\", function () {",
											"   ",
											"  ",
											"    var jsonData = pm.response.json();",
											"    var data = jsonData.result.data;",
											"    var i;",
											"    for (i = 0; i+1 < data.length ; i++) { ",
											"      pm.expect(data[i+1].trialDbId).to.be.above(data[i].trialDbId);",
											"        ",
											"   }",
											" ",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0301105b-47f3-46cc-be70-b1cf53af5cd3",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/trials?sortOrder=asc",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"trials"
									],
									"query": [
										{
											"key": "sortOrder",
											"value": "asc"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v1​/trials"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when sorted in descending order",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d758ba60-1e76-48e3-8f3d-b54feacfa7c7",
										"exec": [
											"pm.test(\"Status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check if first trialDbId is greater than next trialDbId\", function () {",
											"    var jsonData = pm.response.json();",
											"    var data = jsonData.result.data;",
											"    var i;",
											"    for (i = 0; i+1 < data.length ; i++) { ",
											"      pm.expect(data[i].trialDbId).to.be.above(data[i+1].trialDbId);",
											"   ",
											"   }",
											" ",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "15a31efc-c8b3-4af9-bf2b-c9b9b996baf3",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/trials?sortOrder=desc",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"trials"
									],
									"query": [
										{
											"key": "sortOrder",
											"value": "desc"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v1​/trials"
							},
							"response": []
						},
						{
							"name": "Verify response code and body entered invalid sort order",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ba4922ab-4edc-4be8-ae3c-bab6867e0620",
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Response message is correct\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.metadata.status[0].message).to.eql(\"sortOrder bad filter, expect asc/desc\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2ca6fcd4-4828-4d76-bf87-df47f38edabb",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/trials?sortOrder=invalidorder",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"trials"
									],
									"query": [
										{
											"key": "sortOrder",
											"value": "invalidorder"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v1​/trials"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "GET ​/{crop}​/brapi​/v1​/trials​/{trialDbId}​/table",
					"item": [
						{
							"name": "Verify response code and body when entered valid trialDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "47685f36-ce1b-4aac-a121-58fc593d2e3e",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check trialDbId is correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.trialDbId).to.eql(JSON.parse(pm.environment.get(\"studyId\")));",
											"});",
											"",
											"pm.test(\"Check header rows are correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.headerRow).to.include(",
											"        \"year\",",
											"        \"studyDbId\",",
											"        \"studyName\",",
											"        \"locationDbId\",",
											"        \"locationName\",",
											"        \"germplasmDbId\",",
											"        \"germplasmName\",",
											"        \"observationUnitDbId\",",
											"        \"plotNumber\",",
											"        \"replicate\",",
											"        \"blockNumber\",",
											"        \"observationTimestamp\",",
											"        \"entryType\",",
											"        \"X\",",
											"        \"Y\",",
											"        \"obsUnitId\");",
											"});",
											"",
											"pm.test(\"Check observation VariableDbIds are correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.observationVariableDbIds).to.include(",
											"        18000,",
											"        18010,",
											"        18110);",
											"});",
											"",
											"pm.test(\"Check observation variable names are correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.observationVariableNames).to.include(",
											"        \"Grain_yield\",",
											"        \"Biomas_yield\",",
											"        \"Grain_size\");",
											"});",
											"",
											"/*pm.test(\"Check details of first observation row are correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    console.log(pm.environment.get(\"study_first_row\"));",
											"    pm.expect(jsonData.result.data[0]).to.include(",
											" \"2019\", \"13\", \"Study for user 2 Environment Number 1\", \"9001\", \"Africa Rice Centre\", \"26\", \"GP6\", \"7051\", \"6\", null, null, \"UnknownTimestamp\", \"Test entry\", \"null\", \"null\", \"7119ebc0-1e7f-45c8-b5ec-663582aa2167\", null, \"17\", \"35\", \"48\"",
											"    //JSON.strinpm.environment.get(\"study_first_row\")",
											");",
											"});*/",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5516fc0a-6d3c-4eb8-bde1-dbf8df5ab35b",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/trials/{{studyId}}/table",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"trials",
										"{{studyId}}",
										"table"
									]
								},
								"description": "GET​/{crop}​/brapi​/v1​/trials​/{trialDbId}​/table"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid trialDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "dcffca81-8a87-43ff-91eb-38dc51cc86cf",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "13418f07-0598-417f-b4ef-8115c6c0a50d",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/trials/{{non_existing_study_id}}/table",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"trials",
										"{{non_existing_study_id}}",
										"table"
									]
								},
								"description": "GET​/{crop}​/brapi​/v1​/trials​/{trialDbId}​/table"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "study-resource-brapi",
			"item": [
				{
					"name": "GET ​/{crop}​/brapi​/v1​/studies",
					"item": [
						{
							"name": "Verify response code and body when entered crop only",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "be35ef91-96ba-400c-bd7e-4c0b98f3a1cd",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(14);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Verify returned data\", function () {",
											" var jsonData = pm.response.json();",
											" pm.expect(jsonData.result.data[0].active).to.eql(\"true\");",
											" pm.expect(jsonData.result.data[0].startDate).to.eql(\"2018-10-25\");",
											" pm.expect(jsonData.result.data[0].studyDbId).to.eql(pm.environment.get(\"nursery1StudyDbId\"));",
											" pm.expect(jsonData.result.data[0].studyName).to.eql(\"Study with Imported Cross Nursery 2018002 Environment Number 1\");",
											" pm.expect(jsonData.result.data[0].studyTypeDbId).to.eql(\"1\");",
											" pm.expect(jsonData.result.data[0].studyTypeName).to.eql(\"Nursery\");",
											" pm.expect(jsonData.result.data[0].seasons[0].season).to.eql(\"Dry season\");",
											" pm.expect(jsonData.result.data[0].seasons[0].seasonDbId).to.eql(\"10290\");",
											" pm.expect(jsonData.result.data[0].locationDbId).to.eql(\"9001\");",
											" pm.expect(jsonData.result.data[0].locationName).to.eql(\"Africa Rice Centre\");",
											" pm.expect(jsonData.result.data[0].programDbId).to.eql(\"c9e335d2-3057-4958-a43e-e38cf61d09ca\");",
											" pm.expect(jsonData.result.data[0].programName).to.eql(\"API Program\");",
											" pm.expect(jsonData.result.data[0].trialName).to.eql(\"Study with Imported Cross Nursery 2018002\");",
											" pm.expect(jsonData.result.data[0].trialDbId).to.eql(\"3009\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b9240950-6add-4f42-80c1-b3b783c751d2",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/studies",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"studies"
									]
								},
								"description": "GET /{crop}/brapi/v1/studies/{studyDbId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when filtered by studyTypeDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "17f42bbb-b13f-4d17-819c-0f39188ecb4e",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(7);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Verify returned data\", function () {",
											" var jsonData = pm.response.json();",
											" pm.expect(jsonData.result.data[0].active).to.eql(\"true\");",
											" pm.expect(jsonData.result.data[0].startDate).to.eql(\"2018-10-25\");",
											" pm.expect(jsonData.result.data[0].studyDbId).to.eql(pm.environment.get(\"nursery1StudyDbId\"));",
											" pm.expect(jsonData.result.data[0].studyName).to.eql(\"Study with Imported Cross Nursery 2018002 Environment Number 1\");",
											" pm.expect(jsonData.result.data[0].studyTypeDbId).to.eql(\"1\");",
											" pm.expect(jsonData.result.data[0].studyTypeName).to.eql(\"Nursery\");",
											" pm.expect(jsonData.result.data[0].seasons[0].season).to.eql(\"Dry season\");",
											" pm.expect(jsonData.result.data[0].seasons[0].seasonDbId).to.eql(\"10290\");",
											" pm.expect(jsonData.result.data[0].locationDbId).to.eql(\"9001\");",
											" pm.expect(jsonData.result.data[0].locationName).to.eql(\"Africa Rice Centre\");",
											" pm.expect(jsonData.result.data[0].programDbId).to.eql(\"c9e335d2-3057-4958-a43e-e38cf61d09ca\");",
											" pm.expect(jsonData.result.data[0].programName).to.eql(\"API Program\");",
											" pm.expect(jsonData.result.data[0].trialName).to.eql(\"Study with Imported Cross Nursery 2018002\");",
											" pm.expect(jsonData.result.data[0].trialDbId).to.eql(\"3009\");",
											"});",
											"",
											"",
											"pm.test(\"Check all studyDbIds are equal to input parameter\", function () {",
											"  var jsonData = pm.response.json();",
											"   var i;",
											"    for (i = 0; i < jsonData.result.data.length; i++) { ",
											"        pm.expect(jsonData.result.data[i].studyTypeDbId).to.eql(\"1\");",
											"    }",
											"});    ",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c2a0b206-44cf-4001-a589-7fdf436e0739",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/studies?studyTypeDbId=1",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"studies"
									],
									"query": [
										{
											"key": "studyTypeDbId",
											"value": "1"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/studies/{studyDbId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when filtered by programDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d9ee454d-96de-48c4-bfb9-51c5aff3d017",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(14);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Verify returned data\", function () {",
											" var jsonData = pm.response.json();",
											" pm.expect(jsonData.result.data[0].active).to.eql(\"true\");",
											" pm.expect(jsonData.result.data[0].startDate).to.eql(\"2018-10-25\");",
											" pm.expect(jsonData.result.data[0].studyDbId).to.eql(pm.environment.get(\"nursery1StudyDbId\"));",
											" pm.expect(jsonData.result.data[0].studyName).to.eql(\"Study with Imported Cross Nursery 2018002 Environment Number 1\");",
											" pm.expect(jsonData.result.data[0].studyTypeDbId).to.eql(\"1\");",
											" pm.expect(jsonData.result.data[0].studyTypeName).to.eql(\"Nursery\");",
											" pm.expect(jsonData.result.data[0].seasons[0].season).to.eql(\"Dry season\");",
											" pm.expect(jsonData.result.data[0].seasons[0].seasonDbId).to.eql(\"10290\");",
											" pm.expect(jsonData.result.data[0].locationDbId).to.eql(\"9001\");",
											" pm.expect(jsonData.result.data[0].locationName).to.eql(\"Africa Rice Centre\");",
											" pm.expect(jsonData.result.data[0].programDbId).to.eql(\"c9e335d2-3057-4958-a43e-e38cf61d09ca\");",
											" pm.expect(jsonData.result.data[0].programName).to.eql(\"API Program\");",
											" pm.expect(jsonData.result.data[0].trialName).to.eql(\"Study with Imported Cross Nursery 2018002\");",
											" pm.expect(jsonData.result.data[0].trialDbId).to.eql(\"3009\");",
											"});",
											"",
											"",
											"pm.test(\"Check all programDbId are equal to input parameter\", function () {",
											"  var jsonData = pm.response.json();",
											"   var i;",
											"    for (i = 0; i < jsonData.result.data.length; i++) { ",
											"    pm.expect(jsonData.result.data[i].programDbId).to.eql(pm.environment.get(\"api_program_id\"));",
											"    }",
											"});    ",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "6e849780-a800-4376-afef-52a8498e5342",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/studies?programDbId={{api_program_id}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"studies"
									],
									"query": [
										{
											"key": "programDbId",
											"value": "{{api_program_id}}"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/studies/{studyDbId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when filtered by locationDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6994ea69-9467-4e96-9327-52ca275300df",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(8);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Verify returned data\", function () {",
											" var jsonData = pm.response.json();",
											" pm.expect(jsonData.result.data[0].active).to.eql(\"true\");",
											" pm.expect(jsonData.result.data[0].startDate).to.eql(\"2018-10-25\");",
											" pm.expect(jsonData.result.data[0].studyDbId).to.eql(pm.environment.get(\"nursery1StudyDbId\"));",
											" pm.expect(jsonData.result.data[0].studyName).to.eql(\"Study with Imported Cross Nursery 2018002 Environment Number 1\");",
											" pm.expect(jsonData.result.data[0].studyTypeDbId).to.eql(\"1\");",
											" pm.expect(jsonData.result.data[0].studyTypeName).to.eql(\"Nursery\");",
											" pm.expect(jsonData.result.data[0].seasons[0].season).to.eql(\"Dry season\");",
											" pm.expect(jsonData.result.data[0].seasons[0].seasonDbId).to.eql(\"10290\");",
											" pm.expect(jsonData.result.data[0].locationDbId).to.eql(\"9001\");",
											" pm.expect(jsonData.result.data[0].locationName).to.eql(\"Africa Rice Centre\");",
											" pm.expect(jsonData.result.data[0].programDbId).to.eql(\"c9e335d2-3057-4958-a43e-e38cf61d09ca\");",
											" pm.expect(jsonData.result.data[0].programName).to.eql(\"API Program\");",
											" pm.expect(jsonData.result.data[0].trialName).to.eql(\"Study with Imported Cross Nursery 2018002\");",
											" pm.expect(jsonData.result.data[0].trialDbId).to.eql(\"3009\");",
											"});",
											"",
											"",
											"pm.test(\"Check all locationDbId are equal to input parameter\", function () {",
											"  var jsonData = pm.response.json();",
											"   var i;",
											"    for (i = 0; i < jsonData.result.data.length; i++) { ",
											"    pm.expect(jsonData.result.data[i].locationDbId).to.eql(\"9001\");",
											"    }",
											"});    ",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "fb08b114-05e2-47ec-b34d-20d906a05137",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/studies?locationDbId=9001",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"studies"
									],
									"query": [
										{
											"key": "locationDbId",
											"value": "9001"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/studies/{studyDbId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when filtered by seasonDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7862290a-c45c-430f-af6d-c4db40228b81",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(2);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Verify returned data\", function () {",
											" var jsonData = pm.response.json();",
											" pm.expect(jsonData.result.data[0].active).to.eql(\"true\");",
											" pm.expect(jsonData.result.data[0].startDate).to.eql(\"2018-10-25\");",
											" pm.expect(jsonData.result.data[0].studyDbId).to.eql(pm.environment.get(\"nursery1StudyDbId\"));",
											" pm.expect(jsonData.result.data[0].studyName).to.eql(\"Study with Imported Cross Nursery 2018002 Environment Number 1\");",
											" pm.expect(jsonData.result.data[0].studyTypeDbId).to.eql(\"1\");",
											" pm.expect(jsonData.result.data[0].studyTypeName).to.eql(\"Nursery\");",
											" pm.expect(jsonData.result.data[0].seasons[0].season).to.eql(\"Dry season\");",
											" pm.expect(jsonData.result.data[0].seasons[0].seasonDbId).to.eql(\"10290\");",
											" pm.expect(jsonData.result.data[0].locationDbId).to.eql(\"9001\");",
											" pm.expect(jsonData.result.data[0].locationName).to.eql(\"Africa Rice Centre\");",
											" pm.expect(jsonData.result.data[0].programDbId).to.eql(\"c9e335d2-3057-4958-a43e-e38cf61d09ca\");",
											" pm.expect(jsonData.result.data[0].programName).to.eql(\"API Program\");",
											" pm.expect(jsonData.result.data[0].trialName).to.eql(\"Study with Imported Cross Nursery 2018002\");",
											" pm.expect(jsonData.result.data[0].trialDbId).to.eql(\"3009\");",
											"});",
											"",
											"",
											"pm.test(\"Check all seasonDbId are equal to input parameter\", function () {",
											"  var jsonData = pm.response.json();",
											"   var i;",
											"    for (i = 0; i < jsonData.result.data.length; i++) { ",
											"    pm.expect(jsonData.result.data[i].seasons[0].seasonDbId).to.eql(\"10290\");",
											"    }",
											"});    ",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "4eee3114-5f00-4972-ad96-a8b6a979590f",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/studies?seasonDbId=10290",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"studies"
									],
									"query": [
										{
											"key": "seasonDbId",
											"value": "10290"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/studies/{studyDbId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when filtered by trialDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8440ad78-3de2-4629-9a5e-149b19618e1f",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(2);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Verify returned data\", function () {",
											" var jsonData = pm.response.json();",
											" pm.expect(jsonData.result.data[0].active).to.eql(\"true\");",
											" pm.expect(jsonData.result.data[0].startDate).to.eql(\"2018-09-12\");",
											" pm.expect(jsonData.result.data[0].studyDbId).to.eql(pm.environment.get(\"studyDbId\"));",
											" pm.expect(jsonData.result.data[0].studyName).to.eql(\"Randomized Trial 20180003 Environment Number 1\");",
											" pm.expect(jsonData.result.data[0].studyTypeDbId).to.eql(\"6\");",
											" pm.expect(jsonData.result.data[0].studyTypeName).to.eql(\"Trial\");",
											" pm.expect(jsonData.result.data[0].seasons[0].season).to.eql(\"Dry season\");",
											" pm.expect(jsonData.result.data[0].seasons[0].seasonDbId).to.eql(\"10290\");",
											" pm.expect(jsonData.result.data[0].locationDbId).to.eql(\"9001\");",
											" pm.expect(jsonData.result.data[0].locationName).to.eql(\"Africa Rice Centre\");",
											" pm.expect(jsonData.result.data[0].programDbId).to.eql(\"c9e335d2-3057-4958-a43e-e38cf61d09ca\");",
											" pm.expect(jsonData.result.data[0].programName).to.eql(\"API Program\");",
											" pm.expect(jsonData.result.data[0].trialName).to.eql(\"Randomized Trial 20180003\");",
											" pm.expect(jsonData.result.data[0].trialDbId).to.eql(\"3013\");",
											"});",
											"",
											"",
											"pm.test(\"Check all trialDbId are equal to input parameter\", function () {",
											"  var jsonData = pm.response.json();",
											"   var i;",
											"    for (i = 0; i < jsonData.result.data.length; i++) { ",
											"    pm.expect(jsonData.result.data[i].trialDbId).to.eql(\"3013\");",
											"    }",
											"});    ",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "3436531c-8ed0-4056-9a61-8fe6c20b48c0",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/studies?trialDbId=3013",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"studies"
									],
									"query": [
										{
											"key": "trialDbId",
											"value": "3013"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/studies/{studyDbId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when filtered by studyDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d4da960c-afd5-4576-8301-34cad6ec6195",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(1);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Verify returned data\", function () {",
											" var jsonData = pm.response.json();",
											" pm.expect(jsonData.result.data[0].active).to.eql(\"true\");",
											" pm.expect(jsonData.result.data[0].startDate).to.eql(\"2018-10-25\");",
											" pm.expect(jsonData.result.data[0].studyDbId).to.eql(pm.environment.get(\"nursery1StudyDbId\"));",
											" pm.expect(jsonData.result.data[0].studyName).to.eql(\"Study with Imported Cross Nursery 2018002 Environment Number 1\");",
											" pm.expect(jsonData.result.data[0].studyTypeDbId).to.eql(\"1\");",
											" pm.expect(jsonData.result.data[0].studyTypeName).to.eql(\"Nursery\");",
											" pm.expect(jsonData.result.data[0].seasons[0].season).to.eql(\"Dry season\");",
											" pm.expect(jsonData.result.data[0].seasons[0].seasonDbId).to.eql(\"10290\");",
											" pm.expect(jsonData.result.data[0].locationDbId).to.eql(\"9001\");",
											" pm.expect(jsonData.result.data[0].locationName).to.eql(\"Africa Rice Centre\");",
											" pm.expect(jsonData.result.data[0].programDbId).to.eql(\"c9e335d2-3057-4958-a43e-e38cf61d09ca\");",
											" pm.expect(jsonData.result.data[0].programName).to.eql(\"API Program\");",
											" pm.expect(jsonData.result.data[0].trialName).to.eql(\"Study with Imported Cross Nursery 2018002\");",
											" pm.expect(jsonData.result.data[0].trialDbId).to.eql(\"3009\");",
											"});",
											"",
											"",
											"pm.test(\"Check all studyDbId are equal to input parameter\", function () {",
											"  var jsonData = pm.response.json();",
											"   var i;",
											"    for (i = 0; i < jsonData.result.data.length; i++) { ",
											"    pm.expect(jsonData.result.data[i].studyDbId).to.eql(pm.environment.get(\"nursery1StudyDbId\"));",
											"    }",
											"});    ",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "6a5c9698-203c-4ff0-9106-1306e3108098",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/studies?studyDbId={{nursery1StudyDbId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"studies"
									],
									"query": [
										{
											"key": "studyDbId",
											"value": "{{nursery1StudyDbId}}"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/studies/{studyDbId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when filtered by active set to true",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bdc92087-7305-4a64-a661-af86b771122d",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(14);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Verify returned data\", function () {",
											" var jsonData = pm.response.json();",
											" pm.expect(jsonData.result.data[0].active).to.eql(\"true\");",
											" pm.expect(jsonData.result.data[0].startDate).to.eql(\"2018-10-25\");",
											" pm.expect(jsonData.result.data[0].studyDbId).to.eql(pm.environment.get(\"nursery1StudyDbId\"));",
											" pm.expect(jsonData.result.data[0].studyName).to.eql(\"Study with Imported Cross Nursery 2018002 Environment Number 1\");",
											" pm.expect(jsonData.result.data[0].studyTypeDbId).to.eql(\"1\");",
											" pm.expect(jsonData.result.data[0].studyTypeName).to.eql(\"Nursery\");",
											" pm.expect(jsonData.result.data[0].seasons[0].season).to.eql(\"Dry season\");",
											" pm.expect(jsonData.result.data[0].seasons[0].seasonDbId).to.eql(\"10290\");",
											" pm.expect(jsonData.result.data[0].locationDbId).to.eql(\"9001\");",
											" pm.expect(jsonData.result.data[0].locationName).to.eql(\"Africa Rice Centre\");",
											" pm.expect(jsonData.result.data[0].programDbId).to.eql(\"c9e335d2-3057-4958-a43e-e38cf61d09ca\");",
											" pm.expect(jsonData.result.data[0].programName).to.eql(\"API Program\");",
											" pm.expect(jsonData.result.data[0].trialName).to.eql(\"Study with Imported Cross Nursery 2018002\");",
											" pm.expect(jsonData.result.data[0].trialDbId).to.eql(\"3009\");",
											"});",
											"",
											"",
											"pm.test(\"Check all actvie are equal to input parameter\", function () {",
											"  var jsonData = pm.response.json();",
											"   var i;",
											"    for (i = 0; i < jsonData.result.data.length; i++) { ",
											"    pm.expect(jsonData.result.data[i].active).to.eql(\"true\");",
											"    }",
											"});    ",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c72a0371-da2b-4839-a96f-9abc0650e26b",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/studies?active=true",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"studies"
									],
									"query": [
										{
											"key": "active",
											"value": "true"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/studies/{studyDbId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when filtered by active set to false",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7666d4e9-8626-46ba-9589-f6d2bbae9b0f",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(3);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Verify returned data\", function () {",
											" var jsonData = pm.response.json();",
											" var index = 1;",
											" pm.expect(jsonData.result.data[index].active).to.eql(\"false\");",
											" pm.expect(jsonData.result.data[index].startDate).to.eql(\"2019-04-02\");",
											" pm.expect(jsonData.result.data[index].studyDbId).to.eql(\"7\");",
											" pm.expect(jsonData.result.data[index].studyName).to.eql(\"Trial for Subobs Creation#20190402142056988 Environment Number 1\");",
											" pm.expect(jsonData.result.data[index].studyTypeDbId).to.eql(\"6\");",
											" pm.expect(jsonData.result.data[index].studyTypeName).to.eql(\"Trial\");",
											" pm.expect(jsonData.result.data[index].seasons).to.eql([]);",
											" pm.expect(jsonData.result.data[index].locationDbId).to.eql(\"9016\");",
											" pm.expect(jsonData.result.data[index].locationName).to.eql(\"Unspecified Location\");",
											" pm.expect(jsonData.result.data[index].programDbId).to.eql(\"c9e335d2-3057-4958-a43e-e38cf61d09ca\");",
											" pm.expect(jsonData.result.data[index].programName).to.eql(\"API Program\");",
											" pm.expect(jsonData.result.data[index].trialName).to.eql(\"Trial for Subobs Creation#20190402142056988\");",
											" pm.expect(jsonData.result.data[index].trialDbId).to.eql(\"3032\");",
											"});",
											"",
											"",
											"pm.test(\"Check all active are equal to input parameter\", function () {",
											"  var jsonData = pm.response.json();",
											"   var i;",
											"    for (i = 0; i < jsonData.result.data.length; i++) { ",
											"    pm.expect(jsonData.result.data[i].active).to.eql(\"false\");",
											"    }",
											"});    ",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "66e50cfb-1563-4f1e-8ec3-f2e38ff219fc",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/studies?active=false",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"studies"
									],
									"query": [
										{
											"key": "active",
											"value": "false"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/studies/{studyDbId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when sortedBy trialDbId in asc order",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "80fbed40-7a4d-41bb-98e2-930f656d7a0b",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(14);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Verify returned data\", function () {",
											" var jsonData = pm.response.json();",
											" pm.expect(jsonData.result.data[0].active).to.eql(\"true\");",
											" pm.expect(jsonData.result.data[0].startDate).to.eql(\"2018-10-25\");",
											" pm.expect(jsonData.result.data[0].studyDbId).to.eql(pm.environment.get(\"nursery1StudyDbId\"));",
											" pm.expect(jsonData.result.data[0].studyName).to.eql(\"Study with Imported Cross Nursery 2018002 Environment Number 1\");",
											" pm.expect(jsonData.result.data[0].studyTypeDbId).to.eql(\"1\");",
											" pm.expect(jsonData.result.data[0].studyTypeName).to.eql(\"Nursery\");",
											" pm.expect(jsonData.result.data[0].seasons[0].season).to.eql(\"Dry season\");",
											" pm.expect(jsonData.result.data[0].seasons[0].seasonDbId).to.eql(\"10290\");",
											" pm.expect(jsonData.result.data[0].locationDbId).to.eql(\"9001\");",
											" pm.expect(jsonData.result.data[0].locationName).to.eql(\"Africa Rice Centre\");",
											" pm.expect(jsonData.result.data[0].programDbId).to.eql(\"c9e335d2-3057-4958-a43e-e38cf61d09ca\");",
											" pm.expect(jsonData.result.data[0].programName).to.eql(\"API Program\");",
											" pm.expect(jsonData.result.data[0].trialName).to.eql(\"Study with Imported Cross Nursery 2018002\");",
											" pm.expect(jsonData.result.data[0].trialDbId).to.eql(\"3009\");",
											"});",
											"",
											"",
											"pm.test(\"Check if next trialDbId is greater or equal to previous trialDbId\", function () {",
											"  ",
											"    var jsonData = pm.response.json();",
											"    var data = jsonData.result.data;",
											"    var i;",
											"    var proceed = true",
											"    for (i = 0; i+1 < data.length ; i++) {",
											"        ",
											"           if((parseInt(data[i+1].trialDbId)) >= (parseInt(data[i].trialDbId))){",
											"               proceed = true;",
											"             ",
											"           }else{",
											"              proceed = false;",
											"     }",
											"   }",
											"       pm.expect(proceed).to.eql(true);   ",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "6bf01e95-a283-487d-8bed-397140877d2c",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/studies?sortBy=trialDbId&sortOrder=ASC",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"studies"
									],
									"query": [
										{
											"key": "sortBy",
											"value": "trialDbId"
										},
										{
											"key": "sortOrder",
											"value": "ASC"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/studies/{studyDbId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when sortedBy trialDbId in desc order",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fb110df3-81f8-40e6-9f7a-5b887fc43f2b",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(14);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Verify returned data\", function () {",
											" var jsonData = pm.response.json();",
											" pm.expect(jsonData.result.data[0].active).to.eql(\"true\");",
											" pm.expect(jsonData.result.data[0].startDate).to.eql(\"2020-09-29\");",
											" pm.expect(jsonData.result.data[0].studyDbId).to.eql(\"22\");",
											" pm.expect(jsonData.result.data[0].studyName).to.eql(\"Study for Design Generation Environment Number 1\");",
											" pm.expect(jsonData.result.data[0].studyTypeDbId).to.eql(\"6\");",
											" pm.expect(jsonData.result.data[0].studyTypeName).to.eql(\"Trial\");",
											" pm.expect(jsonData.result.data[0].seasons).to.eql([]);",
											" pm.expect(jsonData.result.data[0].locationDbId).to.eql(\"9012\");",
											" pm.expect(jsonData.result.data[0].locationName).to.eql(\"INT LIVESTOCK RESEARCH INSTITUTE\");",
											" pm.expect(jsonData.result.data[0].programDbId).to.eql(\"c9e335d2-3057-4958-a43e-e38cf61d09ca\");",
											" pm.expect(jsonData.result.data[0].programName).to.eql(\"API Program\");",
											" pm.expect(jsonData.result.data[0].trialName).to.eql(\"Study for Design Generation\");",
											" pm.expect(jsonData.result.data[0].trialDbId).to.eql(\"3083\");",
											"});",
											"",
											"",
											"pm.test(\"Check if next trialDbId is less than or equal to previous trialDbId\", function () {",
											"  ",
											"    var jsonData = pm.response.json();",
											"    var data = jsonData.result.data;",
											"    var i;",
											"    var proceed = true",
											"    for (i = 0; i+1 < data.length ; i++) {",
											"        ",
											"           if((parseInt(data[i+1].trialDbId)) <= (parseInt(data[i].trialDbId))){",
											"               proceed = true;",
											"              console.log(data[i+1].trialDbId + \"is less than/equal \" +data[i].trialDbId);",
											"           }else{",
											"              proceed = false;",
											"     }",
											"   }",
											"       pm.expect(proceed).to.eql(true);   ",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "6f3de537-eff0-4283-a137-ba3fa9891147",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/studies?sortBy=trialDbId&sortOrder=DESC",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"studies"
									],
									"query": [
										{
											"key": "sortBy",
											"value": "trialDbId"
										},
										{
											"key": "sortOrder",
											"value": "DESC"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/studies/{studyDbId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid sortOrder value",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "10eb863b-fd54-4d2a-a0b1-c896d54750b3",
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"",
											"pm.test(\"Verify returned error message\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.errors[0].message).to.eql(\"sortOrder should be either ASC or DESC\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "74c25563-1158-44c4-8dd4-1533c22fa582",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/studies?sortBy=trialDbId&sortOrder=invalid",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"studies"
									],
									"query": [
										{
											"key": "sortBy",
											"value": "trialDbId"
										},
										{
											"key": "sortOrder",
											"value": "invalid"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/studies/{studyDbId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered pagination details",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "55da0947-bdd7-404c-bf5d-00e5bf14a1bf",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(10000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(14);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Verify returned data\", function () {",
											" var jsonData = pm.response.json();",
											" pm.expect(jsonData.result.data[0].active).to.eql(\"true\");",
											" pm.expect(jsonData.result.data[0].startDate).to.eql(\"2018-10-25\");",
											" pm.expect(jsonData.result.data[0].studyDbId).to.eql(pm.environment.get(\"nursery1StudyDbId\"));",
											" pm.expect(jsonData.result.data[0].studyName).to.eql(\"Study with Imported Cross Nursery 2018002 Environment Number 1\");",
											" pm.expect(jsonData.result.data[0].studyTypeDbId).to.eql(\"1\");",
											" pm.expect(jsonData.result.data[0].studyTypeName).to.eql(\"Nursery\");",
											" pm.expect(jsonData.result.data[0].seasons[0].season).to.eql(\"Dry season\");",
											" pm.expect(jsonData.result.data[0].seasons[0].seasonDbId).to.eql(\"10290\");",
											" pm.expect(jsonData.result.data[0].locationDbId).to.eql(\"9001\");",
											" pm.expect(jsonData.result.data[0].locationName).to.eql(\"Africa Rice Centre\");",
											" pm.expect(jsonData.result.data[0].programDbId).to.eql(\"c9e335d2-3057-4958-a43e-e38cf61d09ca\");",
											" pm.expect(jsonData.result.data[0].programName).to.eql(\"API Program\");",
											" pm.expect(jsonData.result.data[0].trialName).to.eql(\"Study with Imported Cross Nursery 2018002\");",
											" pm.expect(jsonData.result.data[0].trialDbId).to.eql(\"3009\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b42e660f-3300-4835-b5bf-61c7aaf60a23",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/studies?page=0&pageSize=10000",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"studies"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "10000"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/studies/{studyDbId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid page",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8d9babfd-2801-4e45-ac49-a13f975c0eec",
										"exec": [
											"    pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"",
											"pm.test(\"Verify returned error message\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.errors[0].message).to.eql(\"A total of 1 pages are available, so the page number must between 0 and 1 (exclusive).\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "684b32e9-f9e6-46ef-888e-3065f5d26839",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/studies?page=1&pageSize=10000",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"studies"
									],
									"query": [
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "pageSize",
											"value": "10000"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/studies/{studyDbId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered pageSize greater than max",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "102d9082-07ff-4905-9b3e-876a86091b64",
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"",
											"pm.test(\"Verify returned error message\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.errors[0].message).to.eql(\"Page size must between 1 and 10000.\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "bfb88086-77df-4205-a1ac-7c9f24331672",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/studies?page=0&pageSize=10001",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"studies"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "10001"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/studies/{studyDbId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when filtered by combination of values",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bd9b165c-3c00-4f9f-bd48-15b45cce9d56",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(1);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Verify returned data\", function () {",
											" var jsonData = pm.response.json();",
											" pm.expect(jsonData.result.data[0].active).to.eql(\"true\");",
											" pm.expect(jsonData.result.data[0].startDate).to.eql(\"2018-09-12\");",
											" pm.expect(jsonData.result.data[0].studyDbId).to.eql(pm.environment.get(\"studyDbId\"));",
											" pm.expect(jsonData.result.data[0].studyName).to.eql(\"Randomized Trial 20180003 Environment Number 1\");",
											" pm.expect(jsonData.result.data[0].studyTypeDbId).to.eql(\"6\");",
											" pm.expect(jsonData.result.data[0].studyTypeName).to.eql(\"Trial\");",
											" pm.expect(jsonData.result.data[0].seasons[0].season).to.eql(\"Dry season\");",
											" pm.expect(jsonData.result.data[0].seasons[0].seasonDbId).to.eql(\"10290\");",
											" pm.expect(jsonData.result.data[0].locationDbId).to.eql(\"9001\");",
											" pm.expect(jsonData.result.data[0].locationName).to.eql(\"Africa Rice Centre\");",
											" pm.expect(jsonData.result.data[0].programDbId).to.eql(\"c9e335d2-3057-4958-a43e-e38cf61d09ca\");",
											" pm.expect(jsonData.result.data[0].programName).to.eql(\"API Program\");",
											" pm.expect(jsonData.result.data[0].trialName).to.eql(\"Randomized Trial 20180003\");",
											" pm.expect(jsonData.result.data[0].trialDbId).to.eql(\"3013\");",
											"});",
											"",
											"",
											"pm.test(\"Check all trialDbId are equal to input parameter\", function () {",
											"  var jsonData = pm.response.json();",
											"   var i;",
											"    for (i = 0; i < jsonData.result.data.length; i++) { ",
											"    pm.expect(jsonData.result.data[i].trialDbId).to.eql(\"3013\");",
											"    }",
											"});    ",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "80895a83-3395-4912-bbc2-cf7635c2cbfd",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/studies?studyTypeDbId=6&programDbId={{api_program_id}}&locationDbId=9001&seasonDbId=10290&trialDbId=3013&studyDbId={{studyDbId}}&active=true",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"studies"
									],
									"query": [
										{
											"key": "studyTypeDbId",
											"value": "6"
										},
										{
											"key": "programDbId",
											"value": "{{api_program_id}}"
										},
										{
											"key": "locationDbId",
											"value": "9001"
										},
										{
											"key": "seasonDbId",
											"value": "10290"
										},
										{
											"key": "trialDbId",
											"value": "3013"
										},
										{
											"key": "studyDbId",
											"value": "{{studyDbId}}"
										},
										{
											"key": "active",
											"value": "true"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/studies/{studyDbId}"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "GET ​/{crop}​/brapi​/v1​/studies​/{studyDbId}",
					"item": [
						{
							"name": "Verify response code and body when entered valid studyDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f9e8c023-9e82-4d90-a816-b6a2b9e8baf6",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(1);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(1);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Verify returned studyDbId\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.result.studyDbId).to.eql(pm.environment.get(\"studyDbId\"));",
											"});",
											"pm.test(\"Verify returned studyName\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.result.studyName).to.eql(\"Randomized Trial 20180003 Environment Number 1\");",
											"});",
											"",
											"pm.test(\"Verify returned studyType\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.result.studyType).to.eql(\"6\");",
											"});",
											"pm.test(\"Verify returned trialDbId\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.result.trialDbId).to.eql(pm.environment.get(\"trialStudyId\"));",
											"});",
											"",
											"pm.test(\"Verify returned startDate\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.result.startDate).to.eql(\"2018-09-12\");",
											"});",
											"pm.test(\"Verify returned active\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.result.active).to.eql(\"true\");",
											"});",
											"",
											"pm.test(\"Verify returned location details\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.result.location.locationDbId).to.eql(\"9001\");",
											" pm.expect(jsonData.result.location.locationType).to.eql(\"International Agricultural Research Center\");     ",
											" pm.expect(jsonData.result.location.name).to.eql(\"Africa Rice Centre\");",
											" pm.expect(jsonData.result.location.abbreviation).to.eql(\"WARDA\"); ",
											" pm.expect(jsonData.result.location.countryCode).to.eql(\"CIV\"); ",
											" pm.expect(jsonData.result.location.countryName).to.eql(\"Côte D'Ivoire\"); ",
											" pm.expect(jsonData.result.location.latitude).to.eql(7.68); ",
											" pm.expect(jsonData.result.location.longitude).to.eql(-5.03);     ",
											" pm.expect(jsonData.result.location.altitude).to.eql(375.0);     ",
											" pm.expect(jsonData.result.location.additionalInfo.province).to.eql(\"Bouaké\");  ",
											"            ",
											"});",
											"",
											"pm.test(\"Verify returned contacts\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.result.contacts[0].contactDbId).to.eql(120);",
											" pm.expect(jsonData.result.contacts[0].name).to.eql(\"API Test User\");",
											" pm.expect(jsonData.result.contacts[0].email).to.eql(\"api@mailinator.com\");",
											" pm.expect(jsonData.result.contacts[0].type).to.eql(\"\");",
											" pm.expect(jsonData.result.contacts[0].orcid).to.eql(\"\");",
											"    ",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b5782f12-c7d3-4dab-9092-878e7210e9f7",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/studies/{{studyDbId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"studies",
										"{{studyDbId}}"
									]
								},
								"description": "GET /{crop}/brapi/v1/studies/{studyDbId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered non-existing studyDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "415f78b9-a51f-464f-81eb-3719340c9348",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Verify returned body\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData).to.eql(null);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "6f317173-7e55-40ae-adee-4064b297c17b",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/studies/{{non_existing_study_id}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"studies",
										"{{non_existing_study_id}}"
									]
								},
								"description": "GET /{crop}/brapi/v1/studies/{studyDbId}"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "GET ​/{crop}​/brapi​/v1​/studies​/{studyDbId}​/table",
					"item": [
						{
							"name": "Verify response code and body when entered valid inputs with no format",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "eeac7453-96af-4ab2-9815-de6ad3d8e76a",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check trialDbId is correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.studyDbId).to.eql(JSON.parse(pm.environment.get(\"studyDbId\")));",
											"});",
											"",
											"pm.test(\"Check header rows are correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.headerRow).to.include(",
											"        \"year\",",
											"        \"studyDbId\",",
											"        \"studyName\",",
											"        \"locationDbId\",",
											"        \"locationName\",",
											"        \"germplasmDbId\",",
											"        \"germplasmName\",",
											"        \"observationUnitDbId\",",
											"        \"plotNumber\",",
											"        \"replicate\",",
											"        \"blockNumber\",",
											"        \"observationTimestamp\",",
											"        \"entryType\",",
											"        \"X\",",
											"        \"Y\",",
											"        \"obsUnitId\");",
											"});",
											"",
											"pm.test(\"Check observation VariableDbIds are correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.observationVariableDbIds).to.include(",
											"        18000,",
											"        18010,",
											"        18110);",
											"});",
											"",
											"pm.test(\"Check observation variable names are correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.observationVariableNames).to.include(",
											"        \"Grain_yield\",",
											"        \"Biomas_yield\",",
											"        \"Grain_size\");",
											"});",
											"",
											"pm.test(\"Check details of first observation row are correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0]).to.include(",
											"    \"2018\",",
											"    \"2\",",
											"    \"Randomized Trial 20180003 Environment Number 1\",",
											"    \"9001\",",
											"    \"WARDA-X\",",
											"    \"24\",",
											"    \"GP4\",",
											"    \"1003\",",
											"    \"1\",",
											"    \"1\",",
											"    null,",
											"    \"UnknownTimestamp\",",
											"    \"Check entry\",",
											"    \"null\",",
											"    \"null\",",
											"    \"PKWDPivJxYgde\",",
											"    \"4\",",
											"    \"18\",",
											"    \"95\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c4252f84-6121-43c1-af84-cf446fc1fdd7",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/studies/{{studyDbId}}/table",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"studies",
										"{{studyDbId}}",
										"table"
									]
								},
								"description": "GET /{crop}/brapi/v1/studies/{studyDbId}/table"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered valid inputs with csv format",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8ccfb61c-84d0-47e6-8ef3-d5034c377340",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check headers are correct\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"year,studyDbId,studyName,locationDbId,locationName,germplasmDbId,germplasmName,observationUnitDbId,plotNumber,replicate,blockNumber,observationTimestamp,entryType,X,Y,obsUnitId,Grain_yield|18000,Biomas_yield|18010,Grain_size|18110\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "30a2da16-bedb-4907-8c64-2487b5116432",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/studies/{{studyDbId}}/table?format=csv",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"studies",
										"{{studyDbId}}",
										"table"
									],
									"query": [
										{
											"key": "format",
											"value": "csv"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/studies/{studyDbId}/table"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered valid inputs with tsv format",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9191d106-0e16-4cce-80cc-543c89c30011",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check headers are correct\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"year\tstudyDbId\tstudyName\tlocationDbId\tlocationName\tgermplasmDbId\tgermplasmName\tobservationUnitDbId\tplotNumber\treplicate\tblockNumber\tobservationTimestamp\tentryType\tX\tY\tobsUnitId\tGrain_yield|18000\tBiomas_yield|18010\tGrain_size|18110\");",
											"    ",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f81f264b-c059-48f0-a199-acfc9b173c04",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/studies/{{studyDbId}}/table?format=tsv",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"studies",
										"{{studyDbId}}",
										"table"
									],
									"query": [
										{
											"key": "format",
											"value": "tsv"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/studies/{studyDbId}/table"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered non-existing studyDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9860f243-8251-4e71-bd3c-9d188f139cb3",
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"",
											"pm.test(\"Error message is correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"studyDbId 9999 does not exist\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "7b855df2-cd6a-4555-8dc7-5e1c32f7fda8",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/studies/{{non_existing_study_id}}/table",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"studies",
										"{{non_existing_study_id}}",
										"table"
									]
								},
								"description": "GET /{crop}/brapi/v1/studies/{studyDbId}/table"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "GET ​/{crop}​/brapi​/v2​/studies​/{studyDbId}",
					"item": [
						{
							"name": "Verify response code and body when entered valid studyDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fedffe67-6de6-4af7-9824-920f6324103a",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(1);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(1);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([{}]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"",
											"pm.test(\"Verify returned studyDbId\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.result.studyDbId).to.eql(pm.environment.get(\"studyDbId\"));",
											"});",
											"pm.test(\"Verify returned studyName\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.result.studyName).to.eql(\"Randomized Trial 20180003 Environment Number 1\");",
											"});",
											"pm.test(\"Verify returned studyDescription\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.result.studyDescription).to.eql(\"Trial created using RCBD design\");",
											"});",
											"pm.test(\"Verify returned studyType\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.result.studyType).to.eql(\"6\");",
											"});",
											"pm.test(\"Verify returned lastUpdate\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.result.lastUpdate).to.eql(\"20200311\");",
											"});",
											"pm.test(\"Verify returned commonCropName\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.result.commonCropName).to.eql(\"testdata\");",
											"});",
											"pm.test(\"Verify returned trialDbId\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.result.trialDbId).to.eql(pm.environment.get(\"trialStudyId\"));",
											"});",
											"",
											"pm.test(\"Verify returned startDate\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.result.startDate).to.eql(\"2018-09-12\");",
											"});",
											"pm.test(\"Verify returned active\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.result.active).to.eql(\"true\");",
											"});",
											"",
											"pm.test(\"Verify returned location details\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.result.location.locationDbId).to.eql(\"9001\");",
											" pm.expect(jsonData.result.location.locationType).to.eql(\"International Agricultural Research Center\");     ",
											" pm.expect(jsonData.result.location.name).to.eql(\"Africa Rice Centre\");",
											" pm.expect(jsonData.result.location.abbreviation).to.eql(\"WARDA\"); ",
											" pm.expect(jsonData.result.location.countryCode).to.eql(\"CIV\"); ",
											" pm.expect(jsonData.result.location.countryName).to.eql(\"Côte D'Ivoire\"); ",
											" pm.expect(jsonData.result.location.latitude).to.eql(7.68); ",
											" pm.expect(jsonData.result.location.longitude).to.eql(-5.03);     ",
											" pm.expect(jsonData.result.location.altitude).to.eql(375.0);     ",
											" pm.expect(jsonData.result.location.additionalInfo.province).to.eql(\"Bouaké\");  ",
											"            ",
											"});",
											"",
											"pm.test(\"Verify returned environmentParameter (SITE_SOIL_PH)\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.result.environmentParameters[0].parameterName).to.eql(\"SITE_SOIL_PH\");",
											" pm.expect(jsonData.result.environmentParameters[0].description).to.eql(\"Soil acidity - ph meter (pH)\");",
											" pm.expect(jsonData.result.environmentParameters[0].unit).to.eql(\"pH\");",
											" pm.expect(jsonData.result.environmentParameters[0].value).to.eql(\"1.4\");",
											"    ",
											"});",
											"",
											"pm.test(\"Verify returned environmentParameter (Selection Trait)\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.result.environmentParameters[1].parameterName).to.eql(\"Selection_Trait\");",
											" pm.expect(jsonData.result.environmentParameters[1].description).to.eql(\"Values indicate trait(s) under selection in a particular advancement process\");",
											" pm.expect(jsonData.result.environmentParameters[1].unit).to.eql(\"STCodes\");",
											" pm.expect(jsonData.result.environmentParameters[1].value).to.eql(\"DT\");",
											"    ",
											"});",
											"",
											"pm.test(\"Verify returned environmentParameter (NREP)\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.result.environmentParameters[2].parameterName).to.eql(\"NREP\");",
											" pm.expect(jsonData.result.environmentParameters[2].description).to.eql(\"Number of replications in an experiment\");",
											" pm.expect(jsonData.result.environmentParameters[2].unit).to.eql(\"Number\");",
											" pm.expect(jsonData.result.environmentParameters[2].value).to.eql(\"2\");",
											"    ",
											"});",
											"",
											"pm.test(\"Verify returned environmentParameter (LOCATION_ABBR)\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.result.environmentParameters[3].parameterName).to.eql(\"LOCATION_ABBR\");",
											" pm.expect(jsonData.result.environmentParameters[3].description).to.eql(\"Location code - assigned (LOC_ABBR)\");",
											" pm.expect(jsonData.result.environmentParameters[3].unit).to.eql(\"LOC_ABBR\");",
											" pm.expect(jsonData.result.environmentParameters[3].value).to.eql(\"WARDA-X\");",
											"    ",
											"});",
											"",
											"pm.test(\"Verify returned environmentParameter (Crop_Season_Start_Month)\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.result.environmentParameters[4].parameterName).to.eql(\"Crop_Season_Start_Month\");",
											" pm.expect(jsonData.result.environmentParameters[4].description).to.eql(\"Crop season start month (YYYYMM)\");",
											" pm.expect(jsonData.result.environmentParameters[4].unit).to.eql(\"Year-month (yyyymm)\");",
											" pm.expect(jsonData.result.environmentParameters[4].value).to.eql(\"201805\");",
											"    ",
											"});",
											"",
											"pm.test(\"Verify returned environmentParameter (CROP_SEASON)\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.result.environmentParameters[5].parameterName).to.eql(\"CROP_SEASON\");",
											" pm.expect(jsonData.result.environmentParameters[5].description).to.eql(\"Season - Assigned (Text)\");",
											" pm.expect(jsonData.result.environmentParameters[5].unit).to.eql(\"Text\");",
											" pm.expect(jsonData.result.environmentParameters[5].value).to.eql(\"Summer\");",
											"    ",
											"});",
											"",
											"pm.test(\"Verify returned environmentParameter (Crop_season_Code)\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.result.environmentParameters[6].parameterName).to.eql(\"Crop_season_Code\");",
											" pm.expect(jsonData.result.environmentParameters[6].description).to.eql(\"Season - Assigned (Code)\");",
											" pm.expect(jsonData.result.environmentParameters[6].unit).to.eql(\"Code of Crop_season_Code\");",
											" pm.expect(jsonData.result.environmentParameters[6].value).to.eql(\"10290\");",
											"    ",
											"});",
											"",
											"pm.test(\"Verify returned experimentalDesign\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.result.experimentalDesign.description).to.eql(\"Randomized complete block design\");",
											"    ",
											"});",
											"",
											"pm.test(\"Verify returned contacts\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.result.contacts[0].contactDbId).to.eql(120);",
											" pm.expect(jsonData.result.contacts[0].name).to.eql(\"API Test User\");",
											" pm.expect(jsonData.result.contacts[0].email).to.eql(\"api@mailinator.com\");",
											" pm.expect(jsonData.result.contacts[0].type).to.eql(\"\");",
											" pm.expect(jsonData.result.contacts[0].orcid).to.eql(\"\");",
											"    ",
											"});",
											"",
											"pm.test(\"Verify returned additionalInfo\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(pm.response.text()).to.include(\"Principal investigator - assigned (DBCV)\");",
											" pm.expect(pm.response.text()).to.include(\"API Test User\");",
											"    ",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ce8aad5b-651e-4cec-9d44-34aa19bee2f7",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/studies/{{studyDbId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"studies",
										"{{studyDbId}}"
									]
								},
								"description": "GET /{crop}/brapi/v2/studies/{studyDbId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered non-existing studyDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a3b8f1a9-91bb-4b6c-a7ba-08644cd12ea9",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Verify returned body\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData).to.eql(null);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "461b5497-df99-4848-b581-b5fee9b6f069",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/studies/{{non_existing_study_id}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"studies",
										"{{non_existing_study_id}}"
									]
								},
								"description": "GET /{crop}/brapi/v2/studies/{studyDbId}"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "GET ​/{crop}​/brapi​/v1​/studies​/{studyDbId}​/observationvariables",
					"item": [
						{
							"name": "Verify response code and body when entered valid studyDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8abbb28a-dded-4402-a909-f8eaca113fa5",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"pm.test(\"Verify returned metadata\", function () {",
											"",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(3);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Verify returned studyDbId\", function () {",
											" pm.expect(jsonData.result.studyDbId).to.eql(pm.environment.get(\"studyDbId\"));",
											"});",
											"",
											"pm.test(\"Verify returned observationVariableName (Grain_yield) basic details\", function () {",
											"    pm.expect(jsonData.result.data[0].crop).to.eql(\"testdata\");",
											"    pm.expect(jsonData.result.data[0].date).to.eql(null);",
											"    pm.expect(jsonData.result.data[0].defaultValue).to.eql(\"\");",
											"    pm.expect(jsonData.result.data[0].documentationURL).to.eql(null);",
											"    pm.expect(jsonData.result.data[0].growthStage).to.eql(null);",
											"    pm.expect(jsonData.result.data[0].institution).to.eql(null);",
											"    pm.expect(jsonData.result.data[0].language).to.eql(null);",
											"    pm.expect(jsonData.result.data[0].name).to.eql(\"Grain_yield\");",
											"    pm.expect(jsonData.result.data[0].observationVariableDbId).to.eql(pm.environment.get(\"study_grainYield_cvterm_id\"));",
											"    pm.expect(jsonData.result.data[0].observationVariableName).to.eql(\"Grain_yield\");",
											"    pm.expect(jsonData.result.data[0].ontologyDbId).to.eql(null);",
											"    pm.expect(jsonData.result.data[0].ontologyName).to.eql(null);",
											"    pm.expect(jsonData.result.data[0].scientist).to.eql(null);",
											"    pm.expect(jsonData.result.data[0].status).to.eql(null);",
											"    pm.expect(jsonData.result.data[0].submissionTimestamp).to.eql(null);",
											"    pm.expect(jsonData.result.data[0].synonyms).to.eql([]);",
											"    pm.expect(jsonData.result.data[0].xref).to.eql(null);",
											"});",
											"pm.test(\"Verify returned observationVariableName (Grain_yield) scale details\", function () {    ",
											"    //Verify scale details",
											"    pm.expect(jsonData.result.data[0].scale.dataType).to.eql(\"Numerical\");",
											"    pm.expect(jsonData.result.data[0].scale.decimalPlaces).to.eql(4);",
											"    pm.expect(jsonData.result.data[0].scale.name).to.eql(\"Kg/ha\");",
											"    pm.expect(jsonData.result.data[0].scale.scaleDbId).to.eql(\"6090\");",
											"    pm.expect(jsonData.result.data[0].scale.scaleName).to.eql(\"Kg/ha\");",
											"    pm.expect(jsonData.result.data[0].scale.xref).to.eql(null);",
											"    pm.expect(jsonData.result.data[0].scale.validValues.categories).to.eql([]);",
											"    pm.expect(jsonData.result.data[0].scale.validValues.max).to.eql(null);",
											"    pm.expect(jsonData.result.data[0].scale.validValues.min).to.eql(null);",
											"    pm.expect(jsonData.result.data[0].scale.ontologyReference.documentationLinks[0].type).to.eql(\"WEBPAGE\");",
											"    pm.expect(jsonData.result.data[0].scale.ontologyReference.documentationLinks[0].url).to.eql(\"https://cropontology.org\");",
											"    pm.expect(jsonData.result.data[0].scale.ontologyReference.ontologyDbId).to.eql(null);",
											"    pm.expect(jsonData.result.data[0].scale.ontologyReference.ontologyName).to.eql(\"Kg/ha\");",
											"    pm.expect(jsonData.result.data[0].scale.ontologyReference.version).to.eql(null);",
											"    ",
											"});",
											"    pm.test(\"Verify returned observationVariableName (Grain_yield) trait details\", function () {  ",
											"    //Verify trait details",
											"        pm.expect(jsonData.result.data[0].trait.attribute).to.eql(null);",
											"        pm.expect(jsonData.result.data[0].trait.class).to.eql(\"Agronomic\");",
											"        pm.expect(jsonData.result.data[0].trait.description).to.eql(\"Yield\");",
											"        pm.expect(jsonData.result.data[0].trait.entity).to.eql(null);",
											"        pm.expect(jsonData.result.data[0].trait.mainAbbreviation).to.eql(null);",
											"        pm.expect(jsonData.result.data[0].trait.name).to.eql(\"Yield\");",
											"        pm.expect(jsonData.result.data[0].trait.status).to.eql(\"Active\");",
											"        pm.expect(jsonData.result.data[0].trait.synonyms).to.eql([]);",
											"        pm.expect(jsonData.result.data[0].trait.traitDbId).to.eql(\"15009\");",
											"        pm.expect(jsonData.result.data[0].trait.traitName).to.eql(\"Yield\");",
											"        pm.expect(jsonData.result.data[0].trait.xref).to.eql(\"null\");",
											"        pm.expect(jsonData.result.data[0].trait.ontologyReference.documentationLinks[0].type).to.eql(\"WEBPAGE\");",
											"        pm.expect(jsonData.result.data[0].trait.ontologyReference.documentationLinks[0].url).to.eql(\"https://cropontology.org\");",
											"        pm.expect(jsonData.result.data[0].trait.ontologyReference.ontologyDbId).to.eql(\"null\");",
											"        pm.expect(jsonData.result.data[0].trait.ontologyReference.ontologyName).to.eql(\"Yield\");",
											"        pm.expect(jsonData.result.data[0].trait.ontologyReference.version).to.eql(null);",
											"        ",
											"    });",
											"    pm.test(\"Verify returned observationVariableName (Grain_yield) method details\", function () {  ",
											" ",
											"    //Verify method details",
											"    pm.expect(jsonData.result.data[0].method.class).to.eql(null);",
											"    pm.expect(jsonData.result.data[0].method.description).to.eql(\"Dry and weigh\");",
											"    pm.expect(jsonData.result.data[0].method.formula).to.eql(\"{{18110}}+10\");",
											"    pm.expect(jsonData.result.data[0].method.methodDbId).to.eql(\"16000\");",
											"    pm.expect(jsonData.result.data[0].method.methodName).to.eql(\"Dry and weigh\");",
											"    pm.expect(jsonData.result.data[0].method.name).to.eql(\"Dry and weigh\");",
											"    pm.expect(jsonData.result.data[0].method.reference).to.eql(null);",
											"    });",
											"  pm.test(\"Verify returned observationVariableName (Grain_yield) or details\", function () {  ",
											" ",
											"    pm.expect(jsonData.result.data[0].method.ontologyReference.documentationLinks[0].type).to.eql(\"WEBPAGE\");",
											"    pm.expect(jsonData.result.data[0].method.ontologyReference.documentationLinks[0].url).to.eql(\"https://cropontology.org\");",
											"    pm.expect(jsonData.result.data[0].method.ontologyReference.ontologyDbId).to.eql(null);",
											"    pm.expect(jsonData.result.data[0].method.ontologyReference.ontologyName).to.eql(\"Dry and weigh\");pm.expect(jsonData.result.data[0].method.ontologyReference.version).to.eql(null);",
											"});",
											"    ",
											"pm.test(\"Verify returned observationVariableName (Biomas_yield) basic details\", function () {",
											"    pm.expect(jsonData.result.data[1].crop).to.eql(\"testdata\");",
											"    pm.expect(jsonData.result.data[1].date).to.eql(null);",
											"    pm.expect(jsonData.result.data[1].defaultValue).to.eql(\"\");",
											"    pm.expect(jsonData.result.data[1].documentationURL).to.eql(null);",
											"    pm.expect(jsonData.result.data[1].growthStage).to.eql(null);",
											"    pm.expect(jsonData.result.data[1].institution).to.eql(null);",
											"    pm.expect(jsonData.result.data[1].language).to.eql(null);",
											"    pm.expect(jsonData.result.data[1].name).to.eql(\"Biomas_yield\");",
											"    pm.expect(jsonData.result.data[1].observationVariableDbId).to.eql(pm.environment.get(\"study_biomass_cvterm_id\"));",
											"    pm.expect(jsonData.result.data[1].observationVariableName).to.eql(\"Biomas_yield\");",
											"    pm.expect(jsonData.result.data[1].ontologyDbId).to.eql(null);",
											"    pm.expect(jsonData.result.data[1].ontologyName).to.eql(null);",
											"    pm.expect(jsonData.result.data[1].scientist).to.eql(null);",
											"    pm.expect(jsonData.result.data[1].status).to.eql(null);",
											"    pm.expect(jsonData.result.data[1].submissionTimestamp).to.eql(null);",
											"    pm.expect(jsonData.result.data[1].synonyms).to.eql([]);",
											"    pm.expect(jsonData.result.data[1].xref).to.eql(null);",
											"    ",
											"});",
											"    ",
											"pm.test(\"Verify returned observationVariableName (Biomas_yield) scale details\", function () {",
											"    //Verify scale details",
											"    pm.expect(jsonData.result.data[1].scale.dataType).to.eql(\"Numerical\");",
											"    pm.expect(jsonData.result.data[1].scale.decimalPlaces).to.eql(4);",
											"    pm.expect(jsonData.result.data[1].scale.name).to.eql(\"t/ha\");",
											"    pm.expect(jsonData.result.data[1].scale.scaleDbId).to.eql(\"17010\");",
											"    pm.expect(jsonData.result.data[1].scale.scaleName).to.eql(\"t/ha\");",
											"    pm.expect(jsonData.result.data[1].scale.xref).to.eql(null);",
											"    pm.expect(jsonData.result.data[1].scale.validValues.categories).to.eql([]);",
											"    pm.expect(jsonData.result.data[1].scale.validValues.max).to.eql(null);",
											"    pm.expect(jsonData.result.data[1].scale.validValues.min).to.eql(null);",
											"    pm.expect(jsonData.result.data[1].scale.ontologyReference.documentationLinks[0].type).to.eql(\"WEBPAGE\");",
											"    pm.expect(jsonData.result.data[1].scale.ontologyReference.documentationLinks[0].url).to.eql(\"https://cropontology.org\");",
											"    pm.expect(jsonData.result.data[1].scale.ontologyReference.ontologyDbId).to.eql(null);",
											"    pm.expect(jsonData.result.data[1].scale.ontologyReference.ontologyName).to.eql(\"t/ha\");",
											"    pm.expect(jsonData.result.data[1].scale.ontologyReference.version).to.eql(null);",
											"    ",
											"});",
											"    ",
											"pm.test(\"Verify returned observationVariableName (Biomas_yield) ontology reference details\", function () {",
											"    //ontology reference",
											"    pm.expect(jsonData.result.data[1].ontologyReference).to.eql(null);",
											" /*   pm.expect(jsonData.result.data[1].ontologyReference.documentationLinks[0].url).to.eql(\"https://cropontology.org\");",
											"    pm.expect(jsonData.result.data[1].ontologyReference.ontologyDbId).to.eql(null);",
											"    pm.expect(jsonData.result.data[1].ontologyReference.ontologyName).to.eql(null);",
											"    pm.expect(jsonData.result.data[1].ontologyReference.version).to.eql(null);*/",
											"    ",
											"});",
											"    ",
											"pm.test(\"Verify returned observationVariableName (Biomas_yield) trait details\", function () {",
											"    //Verify trait details",
											"        pm.expect(jsonData.result.data[1].trait.attribute).to.eql(null);",
											"        pm.expect(jsonData.result.data[1].trait.class).to.eql(\"Agronomic\");",
											"        pm.expect(jsonData.result.data[1].trait.description).to.eql(\"Biomass\");",
											"        pm.expect(jsonData.result.data[1].trait.entity).to.eql(null);",
											"        pm.expect(jsonData.result.data[1].trait.mainAbbreviation).to.eql(null);",
											"        pm.expect(jsonData.result.data[1].trait.name).to.eql(\"Biomass\");",
											"        pm.expect(jsonData.result.data[1].trait.status).to.eql(\"Active\");",
											"        pm.expect(jsonData.result.data[1].trait.synonyms).to.eql([]);",
											"        pm.expect(jsonData.result.data[1].trait.traitDbId).to.eql(\"15010\");",
											"        pm.expect(jsonData.result.data[1].trait.traitName).to.eql(\"Biomass\");",
											"        pm.expect(jsonData.result.data[1].trait.xref).to.eql(\"null\");",
											"        pm.expect(jsonData.result.data[1].trait.ontologyReference.documentationLinks[0].type).to.eql(\"WEBPAGE\");",
											"        pm.expect(jsonData.result.data[1].trait.ontologyReference.documentationLinks[0].url).to.eql(\"https://cropontology.org\");",
											"        pm.expect(jsonData.result.data[1].trait.ontologyReference.ontologyDbId).to.eql(\"null\");",
											"        pm.expect(jsonData.result.data[1].trait.ontologyReference.ontologyName).to.eql(\"Biomass\");",
											"        pm.expect(jsonData.result.data[1].trait.ontologyReference.version).to.eql(null);",
											"});",
											"    ",
											"pm.test(\"Verify returned observationVariableName (Biomas_yield) method details\", function () { ",
											"    //Verify method details",
											"    pm.expect(jsonData.result.data[1].method.class).to.eql(null);",
											"    pm.expect(jsonData.result.data[1].method.description).to.eql(\"Dry and weigh\");",
											"    pm.expect(jsonData.result.data[1].method.formula).to.eql(\"{{100020}}+5\");",
											"    pm.expect(jsonData.result.data[1].method.methodDbId).to.eql(\"16000\");",
											"    pm.expect(jsonData.result.data[1].method.methodName).to.eql(\"Dry and weigh\");",
											"    pm.expect(jsonData.result.data[1].method.name).to.eql(\"Dry and weigh\");",
											"    pm.expect(jsonData.result.data[1].method.reference).to.eql(null);",
											"    pm.expect(jsonData.result.data[1].method.ontologyReference.documentationLinks[0].type).to.eql(\"WEBPAGE\");",
											"    pm.expect(jsonData.result.data[1].method.ontologyReference.documentationLinks[0].url).to.eql(\"https://cropontology.org\");",
											"    pm.expect(jsonData.result.data[1].method.ontologyReference.ontologyDbId).to.eql(null);",
											"    pm.expect(jsonData.result.data[1].method.ontologyReference.ontologyName).to.eql(\"Dry and weigh\");pm.expect(jsonData.result.data[1].method.ontologyReference.version).to.eql(null);",
											"});",
											"",
											"pm.test(\"Verify returned observationVariableName (Grain_size) basic details\", function () {",
											"    pm.expect(jsonData.result.data[2].crop).to.eql(\"testdata\");",
											"    pm.expect(jsonData.result.data[2].date).to.eql(null);",
											"    pm.expect(jsonData.result.data[2].defaultValue).to.eql(\"\");",
											"    pm.expect(jsonData.result.data[2].documentationURL).to.eql(null);",
											"    pm.expect(jsonData.result.data[2].growthStage).to.eql(null);",
											"    pm.expect(jsonData.result.data[2].institution).to.eql(null);",
											"    pm.expect(jsonData.result.data[2].language).to.eql(null);",
											"    pm.expect(jsonData.result.data[2].name).to.eql(\"Grain_size\");",
											"    pm.expect(jsonData.result.data[2].observationVariableDbId).to.eql(pm.environment.get(\"grain_size_cvterm_id\"));",
											"    pm.expect(jsonData.result.data[2].observationVariableName).to.eql(\"Grain_size\");",
											"    pm.expect(jsonData.result.data[2].ontologyDbId).to.eql(null);",
											"    pm.expect(jsonData.result.data[2].ontologyName).to.eql(null);",
											"    pm.expect(jsonData.result.data[2].scientist).to.eql(null);",
											"    pm.expect(jsonData.result.data[2].status).to.eql(null);",
											"    pm.expect(jsonData.result.data[2].submissionTimestamp).to.eql(null);",
											"    pm.expect(jsonData.result.data[2].synonyms).to.eql([]);",
											"    pm.expect(jsonData.result.data[2].xref).to.eql(null);",
											"});",
											"",
											"pm.test(\"Verify returned observationVariableName (Grain_size) scale details\", function () {    ",
											"    //Verify scale details",
											"    pm.expect(jsonData.result.data[2].scale.dataType).to.eql(\"Numerical\");",
											"    pm.expect(jsonData.result.data[2].scale.decimalPlaces).to.eql(4);",
											"    pm.expect(jsonData.result.data[2].scale.name).to.eql(\"g\");",
											"    pm.expect(jsonData.result.data[2].scale.scaleDbId).to.eql(\"6087\");",
											"    pm.expect(jsonData.result.data[2].scale.scaleName).to.eql(\"g\");",
											"    pm.expect(jsonData.result.data[2].scale.xref).to.eql(null);",
											"    pm.expect(jsonData.result.data[2].scale.validValues.categories).to.eql([]);",
											"    pm.expect(jsonData.result.data[2].scale.validValues.max).to.eql(null);",
											"    pm.expect(jsonData.result.data[2].scale.validValues.min).to.eql(null);",
											"    pm.expect(jsonData.result.data[2].scale.ontologyReference.documentationLinks[0].type).to.eql(\"WEBPAGE\");",
											"    pm.expect(jsonData.result.data[2].scale.ontologyReference.documentationLinks[0].url).to.eql(\"https://cropontology.org\");",
											"    pm.expect(jsonData.result.data[2].scale.ontologyReference.ontologyDbId).to.eql(null);",
											"    pm.expect(jsonData.result.data[2].scale.ontologyReference.ontologyName).to.eql(\"g\");",
											"    pm.expect(jsonData.result.data[2].scale.ontologyReference.version).to.eql(null);",
											"});",
											"",
											"pm.test(\"Verify returned observationVariableName (Grain_size) ontology reference details\", function () {    ",
											"    //ontology reference",
											"    pm.expect(jsonData.result.data[2].ontologyReference).to.eql(null);",
											"});",
											"pm.test(\"Verify returned observationVariableName (Grain_size) trait details\", function () {",
											"    //Verify trait details",
											"        pm.expect(jsonData.result.data[2].trait.attribute).to.eql(null);",
											"        pm.expect(jsonData.result.data[2].trait.class).to.eql(\"Agronomic\");",
											"        pm.expect(jsonData.result.data[2].trait.description).to.eql(\"Grain size\");",
											"        pm.expect(jsonData.result.data[2].trait.entity).to.eql(null);",
											"        pm.expect(jsonData.result.data[2].trait.mainAbbreviation).to.eql(null);",
											"        pm.expect(jsonData.result.data[2].trait.name).to.eql(\"Grain size\");",
											"        pm.expect(jsonData.result.data[2].trait.status).to.eql(\"Active\");",
											"        pm.expect(jsonData.result.data[2].trait.synonyms).to.eql([]);",
											"        pm.expect(jsonData.result.data[2].trait.traitDbId).to.eql(\"15110\");",
											"        pm.expect(jsonData.result.data[2].trait.traitName).to.eql(\"Grain size\");",
											"        pm.expect(jsonData.result.data[2].trait.xref).to.eql(\"null\");",
											"        pm.expect(jsonData.result.data[2].trait.ontologyReference.documentationLinks[0].type).to.eql(\"WEBPAGE\");",
											"        pm.expect(jsonData.result.data[2].trait.ontologyReference.documentationLinks[0].url).to.eql(\"https://cropontology.org\");",
											"        pm.expect(jsonData.result.data[2].trait.ontologyReference.ontologyDbId).to.eql(\"null\");",
											"        pm.expect(jsonData.result.data[2].trait.ontologyReference.ontologyName).to.eql(\"Grain size\");",
											"        pm.expect(jsonData.result.data[2].trait.ontologyReference.version).to.eql(null);",
											"});",
											"",
											"pm.test(\"Verify returned observationVariableName (Grain_size) method details\", function () {",
											"    //Verify method details",
											"    pm.expect(jsonData.result.data[2].method.class).to.eql(null);",
											"    pm.expect(jsonData.result.data[2].method.description).to.eql(\"Weigh 1000 dry grains\");",
											"    pm.expect(jsonData.result.data[2].method.formula).to.eql(\"null\");",
											"    pm.expect(jsonData.result.data[2].method.methodDbId).to.eql(\"16070\");",
											"    pm.expect(jsonData.result.data[2].method.methodName).to.eql(\"Weigh 1000 dry grains\");",
											"    pm.expect(jsonData.result.data[2].method.name).to.eql(\"Weigh 1000 dry grains\");",
											"    pm.expect(jsonData.result.data[2].method.reference).to.eql(null);",
											"    pm.expect(jsonData.result.data[2].method.ontologyReference.documentationLinks[0].type).to.eql(\"WEBPAGE\");",
											"    pm.expect(jsonData.result.data[2].method.ontologyReference.documentationLinks[0].url).to.eql(\"https://cropontology.org\");",
											"    pm.expect(jsonData.result.data[2].method.ontologyReference.ontologyDbId).to.eql(null);",
											"    pm.expect(jsonData.result.data[2].method.ontologyReference.ontologyName).to.eql(\"Weigh 1000 dry grains\");pm.expect(jsonData.result.data[2].method.ontologyReference.version).to.eql(null);",
											"});",
											"pm.test(\"Verify returned trialName\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.result.trialName).to.eql(\"Randomized Trial 20180003\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "082bf862-504b-43b8-b5b3-616beb002db9",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/studies/{{studyDbId}}/observationvariables",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"studies",
										"{{studyDbId}}",
										"observationvariables"
									]
								},
								"description": "GET /{crop}​/brapi​/v1​/studies​/{studyDbId}​/observationvariables"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered pagination details",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "88785307-0416-4819-834c-ed3ef23395e0",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Verify returned metadata\", function () {",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(10000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(3);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Verify returned studyDbId\", function () {",
											" pm.expect(jsonData.result.studyDbId).to.eql(pm.environment.get(\"studyDbId\"));",
											"});",
											"",
											"pm.test(\"Verify returned observationVariableName (Grain_yield) basic details\", function () {",
											"    pm.expect(jsonData.result.data[0].crop).to.eql(\"testdata\");",
											"    pm.expect(jsonData.result.data[0].date).to.eql(null);",
											"    pm.expect(jsonData.result.data[0].defaultValue).to.eql(\"\");",
											"    pm.expect(jsonData.result.data[0].documentationURL).to.eql(null);",
											"    pm.expect(jsonData.result.data[0].growthStage).to.eql(null);",
											"    pm.expect(jsonData.result.data[0].institution).to.eql(null);",
											"    pm.expect(jsonData.result.data[0].language).to.eql(null);",
											"    pm.expect(jsonData.result.data[0].name).to.eql(\"Grain_yield\");",
											"    pm.expect(jsonData.result.data[0].observationVariableDbId).to.eql(pm.environment.get(\"study_grainYield_cvterm_id\"));",
											"    pm.expect(jsonData.result.data[0].observationVariableName).to.eql(\"Grain_yield\");",
											"    pm.expect(jsonData.result.data[0].ontologyDbId).to.eql(null);",
											"    pm.expect(jsonData.result.data[0].ontologyName).to.eql(null);",
											"    pm.expect(jsonData.result.data[0].scientist).to.eql(null);",
											"    pm.expect(jsonData.result.data[0].status).to.eql(null);",
											"    pm.expect(jsonData.result.data[0].submissionTimestamp).to.eql(null);",
											"    pm.expect(jsonData.result.data[0].synonyms).to.eql([]);",
											"    pm.expect(jsonData.result.data[0].xref).to.eql(null);",
											"});",
											"",
											"pm.test(\"Verify returned observationVariableName (Grain_yield) scale details\", function () {",
											"    //Verify scale details",
											"    pm.expect(jsonData.result.data[0].scale.dataType).to.eql(\"Numerical\");",
											"    pm.expect(jsonData.result.data[0].scale.decimalPlaces).to.eql(4);",
											"    pm.expect(jsonData.result.data[0].scale.name).to.eql(\"Kg/ha\");",
											"    pm.expect(jsonData.result.data[0].scale.scaleDbId).to.eql(\"6090\");",
											"    pm.expect(jsonData.result.data[0].scale.scaleName).to.eql(\"Kg/ha\");",
											"    pm.expect(jsonData.result.data[0].scale.xref).to.eql(null);",
											"    pm.expect(jsonData.result.data[0].scale.validValues.categories).to.eql([]);",
											"    pm.expect(jsonData.result.data[0].scale.validValues.max).to.eql(null);",
											"    pm.expect(jsonData.result.data[0].scale.validValues.min).to.eql(null);",
											"    pm.expect(jsonData.result.data[0].scale.ontologyReference.documentationLinks[0].type).to.eql(\"WEBPAGE\");",
											"    pm.expect(jsonData.result.data[0].scale.ontologyReference.documentationLinks[0].url).to.eql(\"https://cropontology.org\");",
											"    pm.expect(jsonData.result.data[0].scale.ontologyReference.ontologyDbId).to.eql(null);",
											"    pm.expect(jsonData.result.data[0].scale.ontologyReference.ontologyName).to.eql(\"Kg/ha\");",
											"    pm.expect(jsonData.result.data[0].scale.ontologyReference.version).to.eql(null);",
											"});",
											"",
											"pm.test(\"Verify returned observationVariableName (Grain_yield) trait details\", function () {",
											"    //Verify trait details",
											"        pm.expect(jsonData.result.data[0].trait.attribute).to.eql(null);",
											"        pm.expect(jsonData.result.data[0].trait.class).to.eql(\"Agronomic\");",
											"        pm.expect(jsonData.result.data[0].trait.description).to.eql(\"Yield\");",
											"        pm.expect(jsonData.result.data[0].trait.entity).to.eql(null);",
											"        pm.expect(jsonData.result.data[0].trait.mainAbbreviation).to.eql(null);",
											"        pm.expect(jsonData.result.data[0].trait.name).to.eql(\"Yield\");",
											"        pm.expect(jsonData.result.data[0].trait.status).to.eql(\"Active\");",
											"        pm.expect(jsonData.result.data[0].trait.synonyms).to.eql([]);",
											"        pm.expect(jsonData.result.data[0].trait.traitDbId).to.eql(\"15009\");",
											"        pm.expect(jsonData.result.data[0].trait.traitName).to.eql(\"Yield\");",
											"        pm.expect(jsonData.result.data[0].trait.xref).to.eql(\"null\");",
											"        pm.expect(jsonData.result.data[0].trait.ontologyReference.documentationLinks[0].type).to.eql(\"WEBPAGE\");",
											"        pm.expect(jsonData.result.data[0].trait.ontologyReference.documentationLinks[0].url).to.eql(\"https://cropontology.org\");",
											"        pm.expect(jsonData.result.data[0].trait.ontologyReference.ontologyDbId).to.eql(\"null\");",
											"        pm.expect(jsonData.result.data[0].trait.ontologyReference.ontologyName).to.eql(\"Yield\");",
											"        pm.expect(jsonData.result.data[0].trait.ontologyReference.version).to.eql(null);",
											"});",
											"",
											"pm.test(\"Verify returned observationVariableName (Grain_yield) method details\", function () {",
											" ",
											"    //Verify method details",
											"    pm.expect(jsonData.result.data[0].method.class).to.eql(null);",
											"    pm.expect(jsonData.result.data[0].method.description).to.eql(\"Dry and weigh\");",
											"    pm.expect(jsonData.result.data[0].method.formula).to.eql(\"{{18110}}+10\");",
											"    pm.expect(jsonData.result.data[0].method.methodDbId).to.eql(\"16000\");",
											"    pm.expect(jsonData.result.data[0].method.methodName).to.eql(\"Dry and weigh\");",
											"    pm.expect(jsonData.result.data[0].method.name).to.eql(\"Dry and weigh\");",
											"    pm.expect(jsonData.result.data[0].method.reference).to.eql(null);",
											"    pm.expect(jsonData.result.data[0].method.ontologyReference.documentationLinks[0].type).to.eql(\"WEBPAGE\");",
											"    pm.expect(jsonData.result.data[0].method.ontologyReference.documentationLinks[0].url).to.eql(\"https://cropontology.org\");",
											"    pm.expect(jsonData.result.data[0].method.ontologyReference.ontologyDbId).to.eql(null);",
											"    pm.expect(jsonData.result.data[0].method.ontologyReference.ontologyName).to.eql(\"Dry and weigh\");pm.expect(jsonData.result.data[0].method.ontologyReference.version).to.eql(null);",
											"});",
											"    ",
											"pm.test(\"Verify returned observationVariableName (Biomas_yield) basic details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[1].crop).to.eql(\"testdata\");",
											"    pm.expect(jsonData.result.data[1].date).to.eql(null);",
											"    pm.expect(jsonData.result.data[1].defaultValue).to.eql(\"\");",
											"    pm.expect(jsonData.result.data[1].documentationURL).to.eql(null);",
											"    pm.expect(jsonData.result.data[1].growthStage).to.eql(null);",
											"    pm.expect(jsonData.result.data[1].institution).to.eql(null);",
											"    pm.expect(jsonData.result.data[1].language).to.eql(null);",
											"    pm.expect(jsonData.result.data[1].name).to.eql(\"Biomas_yield\");",
											"    pm.expect(jsonData.result.data[1].observationVariableDbId).to.eql(pm.environment.get(\"study_biomass_cvterm_id\"));",
											"    pm.expect(jsonData.result.data[1].observationVariableName).to.eql(\"Biomas_yield\");",
											"    pm.expect(jsonData.result.data[1].ontologyDbId).to.eql(null);",
											"    pm.expect(jsonData.result.data[1].ontologyName).to.eql(null);",
											"    pm.expect(jsonData.result.data[1].scientist).to.eql(null);",
											"    pm.expect(jsonData.result.data[1].status).to.eql(null);",
											"    pm.expect(jsonData.result.data[1].submissionTimestamp).to.eql(null);",
											"    pm.expect(jsonData.result.data[1].synonyms).to.eql([]);",
											"    pm.expect(jsonData.result.data[1].xref).to.eql(null);",
											"});",
											"    ",
											"pm.test(\"Verify returned observationVariableName (Biomas_yield) scale details\", function () {   ",
											"    //Verify scale details",
											"    pm.expect(jsonData.result.data[1].scale.dataType).to.eql(\"Numerical\");",
											"    pm.expect(jsonData.result.data[1].scale.decimalPlaces).to.eql(4);",
											"    pm.expect(jsonData.result.data[1].scale.name).to.eql(\"t/ha\");",
											"    pm.expect(jsonData.result.data[1].scale.scaleDbId).to.eql(\"17010\");",
											"    pm.expect(jsonData.result.data[1].scale.scaleName).to.eql(\"t/ha\");",
											"    pm.expect(jsonData.result.data[1].scale.xref).to.eql(null);",
											"    pm.expect(jsonData.result.data[1].scale.validValues.categories).to.eql([]);",
											"    pm.expect(jsonData.result.data[1].scale.validValues.max).to.eql(null);",
											"    pm.expect(jsonData.result.data[1].scale.validValues.min).to.eql(null);",
											"    pm.expect(jsonData.result.data[1].scale.ontologyReference.documentationLinks[0].type).to.eql(\"WEBPAGE\");",
											"    pm.expect(jsonData.result.data[1].scale.ontologyReference.documentationLinks[0].url).to.eql(\"https://cropontology.org\");",
											"    pm.expect(jsonData.result.data[1].scale.ontologyReference.ontologyDbId).to.eql(null);",
											"    pm.expect(jsonData.result.data[1].scale.ontologyReference.ontologyName).to.eql(\"t/ha\");",
											"    pm.expect(jsonData.result.data[1].scale.ontologyReference.version).to.eql(null);",
											"});",
											"    ",
											"pm.test(\"Verify returned observationVariableName (Biomas_yield) ontology reference details\", function () {   ",
											"    //ontology reference",
											"    pm.expect(jsonData.result.data[1].ontologyReference).to.eql(null);",
											"",
											"});",
											"    ",
											"pm.test(\"Verify returned observationVariableName (Biomas_yield) trait details\", function () {",
											"    //Verify trait details",
											"        pm.expect(jsonData.result.data[1].trait.attribute).to.eql(null);",
											"        pm.expect(jsonData.result.data[1].trait.class).to.eql(\"Agronomic\");",
											"        pm.expect(jsonData.result.data[1].trait.description).to.eql(\"Biomass\");",
											"        pm.expect(jsonData.result.data[1].trait.entity).to.eql(null);",
											"        pm.expect(jsonData.result.data[1].trait.mainAbbreviation).to.eql(null);",
											"        pm.expect(jsonData.result.data[1].trait.name).to.eql(\"Biomass\");",
											"        pm.expect(jsonData.result.data[1].trait.status).to.eql(\"Active\");",
											"        pm.expect(jsonData.result.data[1].trait.synonyms).to.eql([]);",
											"        pm.expect(jsonData.result.data[1].trait.traitDbId).to.eql(\"15010\");",
											"        pm.expect(jsonData.result.data[1].trait.traitName).to.eql(\"Biomass\");",
											"        pm.expect(jsonData.result.data[1].trait.xref).to.eql(\"null\");",
											"        pm.expect(jsonData.result.data[1].trait.ontologyReference.documentationLinks[0].type).to.eql(\"WEBPAGE\");",
											"        pm.expect(jsonData.result.data[1].trait.ontologyReference.documentationLinks[0].url).to.eql(\"https://cropontology.org\");",
											"        pm.expect(jsonData.result.data[1].trait.ontologyReference.ontologyDbId).to.eql(\"null\");",
											"        pm.expect(jsonData.result.data[1].trait.ontologyReference.ontologyName).to.eql(\"Biomass\");",
											"        pm.expect(jsonData.result.data[1].trait.ontologyReference.version).to.eql(null);",
											"});",
											"    ",
											"pm.test(\"Verify returned observationVariableName (Biomas_yield) method details\", function () {",
											"    //Verify method details",
											"    pm.expect(jsonData.result.data[1].method.class).to.eql(null);",
											"    pm.expect(jsonData.result.data[1].method.description).to.eql(\"Dry and weigh\");",
											"    pm.expect(jsonData.result.data[1].method.formula).to.eql(\"{{100020}}+5\");",
											"    pm.expect(jsonData.result.data[1].method.methodDbId).to.eql(\"16000\");",
											"    pm.expect(jsonData.result.data[1].method.methodName).to.eql(\"Dry and weigh\");",
											"    pm.expect(jsonData.result.data[1].method.name).to.eql(\"Dry and weigh\");",
											"    pm.expect(jsonData.result.data[1].method.reference).to.eql(null);",
											"    pm.expect(jsonData.result.data[1].method.ontologyReference.documentationLinks[0].type).to.eql(\"WEBPAGE\");",
											"    pm.expect(jsonData.result.data[1].method.ontologyReference.documentationLinks[0].url).to.eql(\"https://cropontology.org\");",
											"    pm.expect(jsonData.result.data[1].method.ontologyReference.ontologyDbId).to.eql(null);",
											"    pm.expect(jsonData.result.data[1].method.ontologyReference.ontologyName).to.eql(\"Dry and weigh\");pm.expect(jsonData.result.data[1].method.ontologyReference.version).to.eql(null);",
											"});",
											"",
											"pm.test(\"Verify returned observationVariableName (Grain_size) basic details\", function () {",
											"    pm.expect(jsonData.result.data[2].crop).to.eql(\"testdata\");",
											"    pm.expect(jsonData.result.data[2].date).to.eql(null);",
											"    pm.expect(jsonData.result.data[2].defaultValue).to.eql(\"\");",
											"    pm.expect(jsonData.result.data[2].documentationURL).to.eql(null);",
											"    pm.expect(jsonData.result.data[2].growthStage).to.eql(null);",
											"    pm.expect(jsonData.result.data[2].institution).to.eql(null);",
											"    pm.expect(jsonData.result.data[2].language).to.eql(null);",
											"    pm.expect(jsonData.result.data[2].name).to.eql(\"Grain_size\");",
											"    pm.expect(jsonData.result.data[2].observationVariableDbId).to.eql(pm.environment.get(\"grain_size_cvterm_id\"));",
											"    pm.expect(jsonData.result.data[2].observationVariableName).to.eql(\"Grain_size\");",
											"    pm.expect(jsonData.result.data[2].ontologyDbId).to.eql(null);",
											"    pm.expect(jsonData.result.data[2].ontologyName).to.eql(null);",
											"    pm.expect(jsonData.result.data[2].scientist).to.eql(null);",
											"    pm.expect(jsonData.result.data[2].status).to.eql(null);",
											"    pm.expect(jsonData.result.data[2].submissionTimestamp).to.eql(null);",
											"    pm.expect(jsonData.result.data[2].synonyms).to.eql([]);",
											"    pm.expect(jsonData.result.data[2].xref).to.eql(null);",
											"});",
											"",
											"pm.test(\"Verify returned observationVariableName (Grain_size) scale details\", function () {    ",
											"    //Verify scale details",
											"    pm.expect(jsonData.result.data[2].scale.dataType).to.eql(\"Numerical\");",
											"    pm.expect(jsonData.result.data[2].scale.decimalPlaces).to.eql(4);",
											"    pm.expect(jsonData.result.data[2].scale.name).to.eql(\"g\");",
											"    pm.expect(jsonData.result.data[2].scale.scaleDbId).to.eql(\"6087\");",
											"    pm.expect(jsonData.result.data[2].scale.scaleName).to.eql(\"g\");",
											"    pm.expect(jsonData.result.data[2].scale.xref).to.eql(null);",
											"    pm.expect(jsonData.result.data[2].scale.validValues.categories).to.eql([]);",
											"    pm.expect(jsonData.result.data[2].scale.validValues.max).to.eql(null);",
											"    pm.expect(jsonData.result.data[2].scale.validValues.min).to.eql(null);",
											"    pm.expect(jsonData.result.data[2].scale.ontologyReference.documentationLinks[0].type).to.eql(\"WEBPAGE\");",
											"    pm.expect(jsonData.result.data[2].scale.ontologyReference.documentationLinks[0].url).to.eql(\"https://cropontology.org\");",
											"    pm.expect(jsonData.result.data[2].scale.ontologyReference.ontologyDbId).to.eql(null);",
											"    pm.expect(jsonData.result.data[2].scale.ontologyReference.ontologyName).to.eql(\"g\");",
											"    pm.expect(jsonData.result.data[2].scale.ontologyReference.version).to.eql(null);",
											"});",
											"",
											"pm.test(\"Verify returned observationVariableName (Grain_size) ontology reference details\", function () {",
											"    //ontology reference",
											"    pm.expect(jsonData.result.data[2].ontologyReference).to.eql(null);",
											"});",
											"",
											"pm.test(\"Verify returned observationVariableName (Grain_size) trait details\", function () {",
											"    //Verify trait details",
											"        pm.expect(jsonData.result.data[2].trait.attribute).to.eql(null);",
											"        pm.expect(jsonData.result.data[2].trait.class).to.eql(\"Agronomic\");",
											"        pm.expect(jsonData.result.data[2].trait.description).to.eql(\"Grain size\");",
											"        pm.expect(jsonData.result.data[2].trait.entity).to.eql(null);",
											"        pm.expect(jsonData.result.data[2].trait.mainAbbreviation).to.eql(null);",
											"        pm.expect(jsonData.result.data[2].trait.name).to.eql(\"Grain size\");",
											"        pm.expect(jsonData.result.data[2].trait.status).to.eql(\"Active\");",
											"        pm.expect(jsonData.result.data[2].trait.synonyms).to.eql([]);",
											"        pm.expect(jsonData.result.data[2].trait.traitDbId).to.eql(\"15110\");",
											"        pm.expect(jsonData.result.data[2].trait.traitName).to.eql(\"Grain size\");",
											"        pm.expect(jsonData.result.data[2].trait.xref).to.eql(\"null\");",
											"        pm.expect(jsonData.result.data[2].trait.ontologyReference.documentationLinks[0].type).to.eql(\"WEBPAGE\");",
											"        pm.expect(jsonData.result.data[2].trait.ontologyReference.documentationLinks[0].url).to.eql(\"https://cropontology.org\");",
											"        pm.expect(jsonData.result.data[2].trait.ontologyReference.ontologyDbId).to.eql(\"null\");",
											"        pm.expect(jsonData.result.data[2].trait.ontologyReference.ontologyName).to.eql(\"Grain size\");",
											"        pm.expect(jsonData.result.data[2].trait.ontologyReference.version).to.eql(null);",
											"});",
											"",
											"pm.test(\"Verify returned observationVariableName (Grain_size) method details\", function () {",
											"    pm.expect(jsonData.result.data[2].method.class).to.eql(null);",
											"    pm.expect(jsonData.result.data[2].method.description).to.eql(\"Weigh 1000 dry grains\");",
											"    pm.expect(jsonData.result.data[2].method.formula).to.eql(\"null\");",
											"    pm.expect(jsonData.result.data[2].method.methodDbId).to.eql(\"16070\");",
											"    pm.expect(jsonData.result.data[2].method.methodName).to.eql(\"Weigh 1000 dry grains\");",
											"    pm.expect(jsonData.result.data[2].method.name).to.eql(\"Weigh 1000 dry grains\");",
											"    pm.expect(jsonData.result.data[2].method.reference).to.eql(null);",
											"    pm.expect(jsonData.result.data[2].method.ontologyReference.documentationLinks[0].type).to.eql(\"WEBPAGE\");",
											"    pm.expect(jsonData.result.data[2].method.ontologyReference.documentationLinks[0].url).to.eql(\"https://cropontology.org\");",
											"    pm.expect(jsonData.result.data[2].method.ontologyReference.ontologyDbId).to.eql(null);",
											"    pm.expect(jsonData.result.data[2].method.ontologyReference.ontologyName).to.eql(\"Weigh 1000 dry grains\");pm.expect(jsonData.result.data[2].method.ontologyReference.version).to.eql(null);",
											"});",
											"pm.test(\"Verify returned trialName\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.result.trialName).to.eql(\"Randomized Trial 20180003\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2309d78b-72b4-40e4-ae2d-321e44b9e954",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/studies/{{studyDbId}}/observationvariables?page=0&pageSize=10000",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"studies",
										"{{studyDbId}}",
										"observationvariables"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "10000"
										}
									]
								},
								"description": "GET /{crop}​/brapi​/v1​/studies​/{studyDbId}​/observationvariables"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered pageSize greater than max",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "48310b2b-a46e-4dd7-91b6-2d9b29eca799",
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"",
											"pm.test(\"Verify returned error message\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.errors[0].message).to.eql(\"Page size must between 1 and 10000.\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "92b05a80-e039-4f4a-878a-e56d0f20c769",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/studies/{{studyDbId}}/observationvariables?page=0&pageSize=10001",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"studies",
										"{{studyDbId}}",
										"observationvariables"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "10001"
										}
									]
								},
								"description": "GET /{crop}​/brapi​/v1​/studies​/{studyDbId}​/observationvariables"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered non-existing studyDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3003caf8-f814-400c-bfc2-407a19fd2f15",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Verify returned error message\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"The requested object studyDbId is not found.\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "41834989-94bf-4583-a074-7b48a0a8f3f6",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/studies/{{non_existing_study_id}}/observationvariables",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"studies",
										"{{non_existing_study_id}}",
										"observationvariables"
									]
								},
								"description": "GET /{crop}​/brapi​/v1​/studies​/{studyDbId}​/observationvariables"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "GET ​/{crop}​/brapi​/v1​/studies​/{studyDbId}​/observationunits",
					"item": [
						{
							"name": "Verify response code and body when entered valid studyDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f0828b25-bac0-4a96-8772-138bd3b3321a",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"var data = jsonData.result.data[0];",
											"pm.test(\"Verify returned metadata\", function () {",
											"",
											"    pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											"    pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											"    pm.expect(jsonData.metadata.pagination.totalCount).to.eql(140);",
											"    pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											"    pm.expect(jsonData.metadata.status).to.eql([]);",
											"    pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"//Verify returned data of the first obs unit",
											"pm.test(\"Check observationUnitDbId\", function () {",
											"    pm.expect(data.observationUnitDbId).to.eql(\"PKWDPtLOzD8Sz\");",
											"});",
											"pm.test(\"Check observationUnitName\", function () {",
											"    pm.expect(data.observationUnitName).to.eql(\"PLOT1\");",
											"});",
											"pm.test(\"Check observationLevel\", function () {",
											"    pm.expect(data.observationLevel).to.eql(\"PLOT\");",
											"});",
											"pm.test(\"Check observationLevels\", function () {",
											"    pm.expect(data.observationLevels).to.eql(\"1\");",
											"});",
											"pm.test(\"Check plotNumber\", function () {",
											"    pm.expect(data.plotNumber).to.eql(\"1\");",
											"});",
											"pm.test(\"Check plantNumber\", function () {",
											"    pm.expect(data.plantNumber).to.eql(null);",
											"});",
											"pm.test(\"Check blockNumber\", function () {",
											"    pm.expect(data.blockNumber).to.eql(null);",
											"});",
											"pm.test(\"Check replicate\", function () {",
											"    pm.expect(data.replicate).to.eql(null);",
											"});",
											"pm.test(\"Check germplasmDbId\", function () {",
											"    pm.expect(data.germplasmDbId).to.eql(\"21\");",
											"});",
											"pm.test(\"Check germplasmName\", function () {",
											"    pm.expect(data.germplasmName).to.eql(\"GP1\");",
											"});",
											"pm.test(\"Check studyDbId\", function () {",
											"    pm.expect(data.studyDbId).to.eql(\"1\");",
											"});",
											"pm.test(\"Check studyName\", function () {",
											"    pm.expect(data.studyName).to.eql(\"Study with Imported Cross Nursery 2018002_1\");",
											"});",
											"pm.test(\"Check studyLocationDbId\", function () {",
											"    pm.expect(data.studyLocationDbId).to.eql(\"9001\");",
											"});",
											"pm.test(\"Check studyLocation\", function () {",
											"    pm.expect(data.studyLocation).to.eql(\"Africa Rice Centre\");",
											"});",
											"pm.test(\"Check programName\", function () {",
											"    pm.expect(data.programName).to.eql(\"API Program\");",
											"});",
											"pm.test(\"Check x\", function () {",
											"    pm.expect(data.x).to.eql(\"1\");",
											"});",
											"pm.test(\"Check y\", function () {",
											"    pm.expect(data.y).to.eql(\"1\");",
											"});",
											"pm.test(\"Check entryType\", function () {",
											"    pm.expect(data.entryType).to.eql(\"Test entry\");",
											"});",
											"pm.test(\"Check entryNumber\", function () {",
											"    pm.expect(data.entryNumber).to.eql(\"1\");",
											"});",
											"//Check first observation   ",
											"pm.test(\"Check observations\", function () {",
											"    var observation = data.observations[0];",
											"    pm.expect(observation.observationDbId).to.eql(\"65048\");",
											"    pm.expect(observation.observationVariableDbId).to.eql(\"18100\");",
											"    pm.expect(observation.observationVariableName).to.eql(\"WeedPressure_number\");",
											"    pm.expect(observation.observationTimeStamp).to.eql(\"2020-09-30T00:28:13.000Z\");",
											"    pm.expect(observation.season).to.eql(null);",
											"    pm.expect(observation.collector).to.eql(\"\");",
											"    pm.expect(observation.value).to.eql(\"21\");",
											"});",
											"pm.test(\"Check instanceNumber\", function () {",
											"    pm.expect(data.instanceNumber).to.eql(\"1\");",
											"});",
											"pm.test(\"Check positionCoordinateX\", function () {",
											"    pm.expect(data.positionCoordinateX).to.eql(\"1\");",
											"});",
											"pm.test(\"Check positionCoordinateY\", function () {",
											"    pm.expect(data.positionCoordinateY).to.eql(\"1\");",
											"});",
											"pm.test(\"Check observationUnitXRef\", function () {",
											"    pm.expect(data.observationUnitXRef).to.eql(null);",
											"});",
											"pm.test(\"Check programDbId\", function () {",
											"    pm.expect(data.programDbId).to.eql(pm.environment.get(\"api_program_id\"));",
											"});",
											"pm.test(\"Check treatments\", function () {",
											"    pm.expect(data.treatments).to.eql([]);",
											"});",
											"pm.test(\"Check trialDbId\", function () {",
											"    pm.expect(data.trialDbId).to.eql(\"3009\");",
											"});",
											"pm.test(\"Check trialName\", function () {",
											"    pm.expect(data.trialName).to.eql(\"Study with Imported Cross Nursery 2018002\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "52a73d2c-7832-452b-a0e0-a2a39d73f75b",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/studies/{{nursery1StudyDbId}}/observationunits",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"studies",
										"{{nursery1StudyDbId}}",
										"observationunits"
									]
								},
								"description": "GET ​/{crop}​/brapi​/v1​/studies​/{studyDbId}​/observationunits"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered non-existing studyDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c92d1560-249e-4bd5-a63b-82f14341e758",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Verify returned body\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.errors[0].message).to.eql(\"StudyDbId does not exist\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "7e4667e9-286d-42bf-9aaa-24d54066bde9",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/studies/{{non_existing_study_id}}/observationunits",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"studies",
										"{{non_existing_study_id}}",
										"observationunits"
									]
								},
								"description": "GET ​/{crop}​/brapi​/v1​/studies​/{studyDbId}​/observationunits"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered plot observationLevel",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b202c8ac-022f-4137-957c-7518fb008456",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(20);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"",
											"pm.test(\"Verify returned data of the first obs unit\", function () {",
											"    var jsonData = pm.response.json();",
											"     pm.expect(jsonData.result.data[0].observationUnitDbId).to.eql(\"PKWDPtLOzD8Sz\");",
											"     pm.expect(jsonData.result.data[0].observationUnitName).to.eql(\"PLOT1\");",
											"     pm.expect(jsonData.result.data[0].observationLevel).to.eql(\"PLOT\");",
											"     pm.expect(jsonData.result.data[0].plotNumber).to.eql(\"1\");",
											"     pm.expect(jsonData.result.data[0].plantNumber).to.eql(null);",
											"     pm.expect(jsonData.result.data[0].blockNumber).to.eql(null);",
											"     pm.expect(jsonData.result.data[0].replicate).to.eql(null);",
											"     pm.expect(jsonData.result.data[0].germplasmDbId).to.eql(\"21\");",
											"     pm.expect(jsonData.result.data[0].germplasmName).to.eql(\"GP1\");",
											"     pm.expect(jsonData.result.data[0].studyDbId).to.eql(\"1\");",
											"     pm.expect(jsonData.result.data[0].studyName).to.eql(\"Study with Imported Cross Nursery 2018002_1\");",
											"     pm.expect(jsonData.result.data[0].programName).to.eql(\"API Program\");",
											"     pm.expect(jsonData.result.data[0].entryType).to.eql(\"Test entry\");",
											"     pm.expect(jsonData.result.data[0].entryNumber).to.eql(\"1\");",
											"     ",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "92881255-2f08-4069-8648-1de20f3881f5",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/studies/{{nursery1StudyDbId}}/observationunits?observationLevel=PLOT",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"studies",
										"{{nursery1StudyDbId}}",
										"observationunits"
									],
									"query": [
										{
											"key": "observationLevel",
											"value": "PLOT"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v1​/studies​/{studyDbId}​/observationunits"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered plant observationLevel",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "24f2b6d7-926d-4bb8-8de3-8746c00dfc91",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(40);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"",
											"pm.test(\"Verify returned data of the first obs unit\", function () {",
											"    var jsonData = pm.response.json();",
											"     pm.expect(jsonData.result.data[0].observationUnitDbId).to.eql(\"2a664296-3d7e-459d-ad77-87a7d5dae8c5\");",
											"     pm.expect(jsonData.result.data[0].observationUnitName).to.eql(null);",
											"     pm.expect(jsonData.result.data[0].observationLevel).to.eql(\"PLANT\");",
											"     pm.expect(jsonData.result.data[0].plotNumber).to.eql(null);",
											"     pm.expect(jsonData.result.data[0].plantNumber).to.eql(null);",
											"     pm.expect(jsonData.result.data[0].blockNumber).to.eql(null);",
											"     pm.expect(jsonData.result.data[0].replicate).to.eql(null);",
											"     pm.expect(jsonData.result.data[0].germplasmDbId).to.eql(\"21\");",
											"     pm.expect(jsonData.result.data[0].germplasmName).to.eql(\"GP1\");",
											"     pm.expect(jsonData.result.data[0].studyDbId).to.eql(\"1\");",
											"     pm.expect(jsonData.result.data[0].studyName).to.eql(\"Study with Imported Cross Nursery 2018002_1\");",
											"     pm.expect(jsonData.result.data[0].programName).to.eql(\"API Program\");",
											"     pm.expect(jsonData.result.data[0].entryType).to.eql(\"Test entry\");",
											"     pm.expect(jsonData.result.data[0].entryNumber).to.eql(\"1\");",
											"     ",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f9b461c4-50ce-4678-b97c-bc2b8eb3d51e",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/studies/{{nursery1StudyDbId}}/observationunits?observationLevel=PLANT",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"studies",
										"{{nursery1StudyDbId}}",
										"observationunits"
									],
									"query": [
										{
											"key": "observationLevel",
											"value": "PLANT"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v1​/studies​/{studyDbId}​/observationunits"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered quadrat observationLevel",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2fdf16cd-d3e9-476a-bef5-6781cacecd1d",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(80);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"",
											"pm.test(\"Verify returned data of the first obs unit\", function () {",
											"    var jsonData = pm.response.json();",
											"     pm.expect(jsonData.result.data[0].observationUnitDbId).to.eql(\"0b261507-54ce-4713-b3f2-709736761734\");",
											"     pm.expect(jsonData.result.data[0].observationUnitName).to.eql(null);",
											"     pm.expect(jsonData.result.data[0].observationLevel).to.eql(\"QUADRAT\");",
											"     pm.expect(jsonData.result.data[0].plotNumber).to.eql(null);",
											"     pm.expect(jsonData.result.data[0].plantNumber).to.eql(null);",
											"     pm.expect(jsonData.result.data[0].blockNumber).to.eql(null);",
											"     pm.expect(jsonData.result.data[0].replicate).to.eql(null);",
											"     pm.expect(jsonData.result.data[0].germplasmDbId).to.eql(\"21\");",
											"     pm.expect(jsonData.result.data[0].germplasmName).to.eql(\"GP1\");",
											"     pm.expect(jsonData.result.data[0].studyDbId).to.eql(\"1\");",
											"     pm.expect(jsonData.result.data[0].studyName).to.eql(\"Study with Imported Cross Nursery 2018002_1\");",
											"     pm.expect(jsonData.result.data[0].programName).to.eql(\"API Program\");",
											"     pm.expect(jsonData.result.data[0].entryType).to.eql(\"Test entry\");",
											"     pm.expect(jsonData.result.data[0].entryNumber).to.eql(\"1\");",
											"     ",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "19b5a703-e990-4388-8aae-127d929fd646",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/studies/{{nursery1StudyDbId}}/observationunits?observationLevel=QUADRAT",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"studies",
										"{{nursery1StudyDbId}}",
										"observationunits"
									],
									"query": [
										{
											"key": "observationLevel",
											"value": "QUADRAT"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v1​/studies​/{studyDbId}​/observationunits"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid observationLevel",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "90982b27-557d-476f-86a9-2e78da78445e",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(0);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"",
											"pm.test(\"Verify returned result\", function () {",
											"    var jsonData = pm.response.json();",
											"     pm.expect(jsonData.result.data).to.eql([]);",
											"     ",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "7a857f3a-f1d5-4d4c-83c4-5c96e5da17aa",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/studies/{{nursery1StudyDbId}}/observationunits?observationLevel=INVALID",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"studies",
										"{{nursery1StudyDbId}}",
										"observationunits"
									],
									"query": [
										{
											"key": "observationLevel",
											"value": "INVALID"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v1​/studies​/{studyDbId}​/observationunits"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered pagination details",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "36658ace-cf56-4e2f-8923-bbdd409b9423",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(10000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(140);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Verify returned data of the first obs unit\", function () {",
											"    var jsonData = pm.response.json();",
											"     pm.expect(jsonData.result.data[0].observationUnitDbId).to.eql(\"PKWDPtLOzD8Sz\");",
											"     pm.expect(jsonData.result.data[0].observationUnitName).to.eql(\"PLOT1\");",
											"     pm.expect(jsonData.result.data[0].observationLevel).to.eql(\"PLOT\");",
											"     pm.expect(jsonData.result.data[0].plotNumber).to.eql(\"1\");",
											"     pm.expect(jsonData.result.data[0].plantNumber).to.eql(null);",
											"     pm.expect(jsonData.result.data[0].blockNumber).to.eql(null);",
											"     pm.expect(jsonData.result.data[0].replicate).to.eql(null);",
											"     pm.expect(jsonData.result.data[0].germplasmDbId).to.eql(\"21\");",
											"     pm.expect(jsonData.result.data[0].germplasmName).to.eql(\"GP1\");",
											"     pm.expect(jsonData.result.data[0].studyDbId).to.eql(\"1\");",
											"     pm.expect(jsonData.result.data[0].studyName).to.eql(\"Study with Imported Cross Nursery 2018002_1\");",
											"     pm.expect(jsonData.result.data[0].programName).to.eql(\"API Program\");",
											"     pm.expect(jsonData.result.data[0].entryType).to.eql(\"Test entry\");",
											"     pm.expect(jsonData.result.data[0].entryNumber).to.eql(\"1\");",
											"     ",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e77d4f31-6595-4f24-8c81-e93168bedfce",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/studies/{{nursery1StudyDbId}}/observationunits?page=0&pageSize=10000",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"studies",
										"{{nursery1StudyDbId}}",
										"observationunits"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "10000"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v1​/studies​/{studyDbId}​/observationunits"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered pageSize greater than max",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "692dc44a-8aaf-4dac-8a15-025ccbf6d581",
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"",
											"pm.test(\"Verify returned error message\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.errors[0].message).to.eql(\"Page size must between 1 and 10000.\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "30732011-36ec-456a-aef4-00b7c870c3ba",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/studies/{{nursery1StudyDbId}}/observationunits?page=0&pageSize=10001",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"studies",
										"{{nursery1StudyDbId}}",
										"observationunits"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "10001"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v1​/studies​/{studyDbId}​/observationunits"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "PUT ​/{crop}​/brapi​/v1​/studies​/{studyDbId}​/observations",
					"item": [
						{
							"name": "Verify response code and body when entered valid inputs for numeric trait",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8c49f657-eb01-42a4-95c4-0ed259030a5b",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"pm.test(\"Verify returned metadata\", function () {",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(0);",
											" pm.expect(jsonData.metadata.status[0][\"ignored-fields\"]).to.eql(\"collector, observationDbId, observationTimeStamp\");",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Verify returned collector\", function () {",
											" pm.expect(jsonData.result.observations[0].collector).to.eql(\"admin\");",
											"});",
											"pm.test(\"Verify returned observationDbId\", function () {",
											" pm.expect(jsonData.result.observations[0].observationDbId).to.eql(JSON.parse(pm.environment.get(\"study6_observationDbId_weed\")));",
											"});",
											"",
											"pm.test(\"Verify returned observationUnitDbId\", function () {",
											" pm.expect(jsonData.result.observations[0].observationUnitDbId).to.eql(pm.environment.get(\"study6_obs_unit_id\"));",
											"});",
											"",
											"pm.test(\"Verify returned observationVariableDbId\", function () {",
											" pm.expect(jsonData.result.observations[0].observationVariableDbId).to.eql(JSON.parse(pm.environment.get(\"study_weedPressure_cvterm_id\")));",
											"});",
											"",
											"pm.test(\"Verify returned value\", function () {",
											" pm.expect(jsonData.result.observations[0].value).to.eql(\"1000\");",
											"});",
											"",
											"pm.test(\"Verify returned observationTimeStamp\", function () {",
											" pm.expect(jsonData.result.observations[0].observationTimeStamp).to.eql(\"2020-04-27T07:39:11.000Z\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2c2083e1-7c56-4213-b250-5d041d590f5e",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"observations\": [\r\n    {\r\n      \"collector\": \"admin\",\r\n      \"observationDbId\": {{study6_observationDbId_weed}},\r\n      \"observationTimeStamp\": \"2020-04-27T07:39:11.000Z\",\r\n      \"observationUnitDbId\": \"{{study6_obs_unit_id}}\",\r\n      \"observationVariableDbId\": {{study_weedPressure_cvterm_id}},\r\n      \"value\": \"1000\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/studies/{{study6_studyDbId}}/observations",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"studies",
										"{{study6_studyDbId}}",
										"observations"
									]
								},
								"description": "PUT /{crop}​/brapi​/v1​/studies​/{studyDbId}​/observations"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered valid inputs for categorical trait",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e3457c84-5eed-435d-9600-4645983e14f1",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"pm.test(\"Verify returned metadata\", function () {",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(0);",
											" pm.expect(jsonData.metadata.status[0][\"ignored-fields\"]).to.eql(\"collector, observationDbId, observationTimeStamp\");",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Verify returned collector\", function () {",
											" pm.expect(jsonData.result.observations[0].collector).to.eql(\"admin\");",
											"});",
											"pm.test(\"Verify returned observationDbId\", function () {",
											" pm.expect(jsonData.result.observations[0].observationDbId).to.eql(JSON.parse(pm.environment.get(\"study6_observationDbId_dispressure\")));",
											"});",
											"",
											"pm.test(\"Verify returned observationUnitDbId\", function () {",
											" pm.expect(jsonData.result.observations[0].observationUnitDbId).to.eql(pm.environment.get(\"study6_obs_unit_id\"));",
											"});",
											"",
											"pm.test(\"Verify returned observationVariableDbId\", function () {",
											" pm.expect(jsonData.result.observations[0].observationVariableDbId).to.eql(JSON.parse(pm.environment.get(\"DisPressure_0_9_cvtermId\")));",
											"});",
											"",
											"pm.test(\"Verify returned value\", function () {",
											" pm.expect(jsonData.result.observations[0].value).to.eql(\"1\");",
											"});",
											"",
											"pm.test(\"Verify returned observationTimeStamp\", function () {",
											" pm.expect(jsonData.result.observations[0].observationTimeStamp).to.eql(\"2020-04-27T07:39:11.000Z\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9ef92f55-6fa4-412d-be46-1f999c3ca843",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"observations\": [\r\n    {\r\n      \"collector\": \"admin\",\r\n      \"observationDbId\": {{study6_observationDbId_dispressure}},\r\n      \"observationTimeStamp\": \"2020-04-27T07:39:11.000Z\",\r\n      \"observationUnitDbId\": \"{{study6_obs_unit_id}}\",\r\n      \"observationVariableDbId\": {{DisPressure_0_9_cvtermId}},\r\n      \"categoricalValueId\": 19030,\r\n      \"value\": \"1\"\r\n    }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/studies/{{study6_studyDbId}}/observations",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"studies",
										"{{study6_studyDbId}}",
										"observations"
									]
								},
								"description": "PUT /{crop}​/brapi​/v1​/studies​/{studyDbId}​/observations"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered valid inputs for date trait",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c76b51af-34b8-4c94-ba5c-1f6e91372a19",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"pm.test(\"Verify returned metadata\", function () {",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(0);",
											" pm.expect(jsonData.metadata.status[0][\"ignored-fields\"]).to.eql(\"collector, observationDbId, observationTimeStamp\");",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Verify returned collector\", function () {",
											" pm.expect(jsonData.result.observations[0].collector).to.eql(\"admin\");",
											"});",
											"pm.test(\"Verify returned observationDbId\", function () {",
											" pm.expect(jsonData.result.observations[0].observationDbId).to.eql(JSON.parse(pm.environment.get(\"study6_observationDbId_germitest\")));",
											"});",
											"",
											"pm.test(\"Verify returned observationUnitDbId\", function () {",
											" pm.expect(jsonData.result.observations[0].observationUnitDbId).to.eql(pm.environment.get(\"study6_obs_unit_id\"));",
											"});",
											"",
											"pm.test(\"Verify returned observationVariableDbId\", function () {",
											" pm.expect(jsonData.result.observations[0].observationVariableDbId).to.eql(JSON.parse(pm.environment.get(\"germitest_date_cvtermId\")));",
											"});",
											"",
											"pm.test(\"Verify returned value\", function () {",
											" pm.expect(jsonData.result.observations[0].value).to.eql(\"2020-04-20\");",
											"});",
											"",
											"pm.test(\"Verify returned observationTimeStamp\", function () {",
											" pm.expect(jsonData.result.observations[0].observationTimeStamp).to.eql(\"2020-04-27T07:39:11.000Z\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "7ff754c0-25c5-4e56-98f7-3da5dda89b68",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"observations\": [\r\n    {\r\n      \"collector\": \"admin\",\r\n      \"observationDbId\": {{study6_observationDbId_germitest}},\r\n      \"observationTimeStamp\": \"2020-04-27T07:39:11.000Z\",\r\n      \"observationUnitDbId\": \"{{study6_obs_unit_id}}\",\r\n      \"observationVariableDbId\": {{germitest_date_cvtermId}},\r\n      \"value\": \"2020-04-20\"\r\n    }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/studies/{{study6_studyDbId}}/observations",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"studies",
										"{{study6_studyDbId}}",
										"observations"
									]
								},
								"description": "PUT /{crop}​/brapi​/v1​/studies​/{studyDbId}​/observations"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered valid inputs for character trait",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b514ba89-58cb-4a37-9de7-a889c83a5c3c",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"pm.test(\"Verify returned metadata\", function () {",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(0);",
											" pm.expect(jsonData.metadata.status[0][\"ignored-fields\"]).to.eql(\"collector, observationDbId, observationTimeStamp\");",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Verify returned collector\", function () {",
											" pm.expect(jsonData.result.observations[0].collector).to.eql(\"admin\");",
											"});",
											"pm.test(\"Verify returned observationDbId\", function () {",
											" pm.expect(jsonData.result.observations[0].observationDbId).to.eql(JSON.parse(pm.environment.get(\"study6_observationDbId_note\")));",
											"});",
											"",
											"pm.test(\"Verify returned observationUnitDbId\", function () {",
											" pm.expect(jsonData.result.observations[0].observationUnitDbId).to.eql(pm.environment.get(\"study6_obs_unit_id\"));",
											"});",
											"",
											"pm.test(\"Verify returned observationVariableDbId\", function () {",
											" pm.expect(jsonData.result.observations[0].observationVariableDbId).to.eql(JSON.parse(pm.environment.get(\"notes_cvtermId\")));",
											"});",
											"",
											"pm.test(\"Verify returned value\", function () {",
											" pm.expect(jsonData.result.observations[0].value).to.eql(\"This is a test note\");",
											"});",
											"",
											"pm.test(\"Verify returned observationTimeStamp\", function () {",
											" pm.expect(jsonData.result.observations[0].observationTimeStamp).to.eql(\"2020-04-27T07:39:11.000Z\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a1b528e3-1eeb-478d-bfbf-ba2899f0a10a",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"observations\": [\r\n    {\r\n      \"collector\": \"admin\",\r\n      \"observationDbId\": {{study6_observationDbId_note}},\r\n      \"observationTimeStamp\": \"2020-04-27T07:39:11.000Z\",\r\n      \"observationUnitDbId\": \"{{study6_obs_unit_id}}\",\r\n      \"observationVariableDbId\": {{notes_cvtermId}},\r\n      \"value\": \"This is a test note\"\r\n    }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/studies/{{study6_studyDbId}}/observations",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"studies",
										"{{study6_studyDbId}}",
										"observations"
									]
								},
								"description": "PUT /{crop}​/brapi​/v1​/studies​/{studyDbId}​/observations"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered valid inputs without optional values",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e5233d3b-56d6-466b-a574-9a48cef5f218",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"pm.test(\"Verify returned metadata\", function () {",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(0);",
											" pm.expect(jsonData.metadata.status[0][\"ignored-fields\"]).to.eql(\"collector, observationDbId, observationTimeStamp\");",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Verify returned collector\", function () {",
											" pm.expect(jsonData.result.observations[0].collector).to.eql(null);",
											"});",
											"pm.test(\"Verify returned observationDbId\", function () {",
											" pm.expect(jsonData.result.observations[0].observationDbId).to.eql(JSON.parse(pm.environment.get(\"study6_observationDbId_weed\")));",
											"});",
											"",
											"pm.test(\"Verify returned observationUnitDbId\", function () {",
											" pm.expect(jsonData.result.observations[0].observationUnitDbId).to.eql(pm.environment.get(\"study6_obs_unit_id\"));",
											"});",
											"",
											"pm.test(\"Verify returned observationVariableDbId\", function () {",
											" pm.expect(jsonData.result.observations[0].observationVariableDbId).to.eql(JSON.parse(pm.environment.get(\"study_weedPressure_cvterm_id\")));",
											"});",
											"",
											"pm.test(\"Verify returned value\", function () {",
											" pm.expect(jsonData.result.observations[0].value).to.eql(\"1001\");",
											"});",
											"",
											"pm.test(\"Verify returned observationTimeStamp\", function () {",
											" pm.expect(jsonData.result.observations[0].observationTimeStamp).to.eql(null);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c0d7b7f5-2279-4ac6-922d-c956b3b97069",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"observations\": [\r\n    {\r\n      \"observationUnitDbId\": \"{{study6_obs_unit_id}}\",\r\n      \"observationVariableDbId\": {{study_weedPressure_cvterm_id}},\r\n      \"value\": \"1001\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/studies/{{study6_studyDbId}}/observations",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"studies",
										"{{study6_studyDbId}}",
										"observations"
									]
								},
								"description": "PUT /{crop}​/brapi​/v1​/studies​/{studyDbId}​/observations"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "observation-resource-brapi",
			"item": [
				{
					"name": "GET /{crop}/brapi/v1/observationLevels",
					"item": [
						{
							"name": "Verify response code and body when entered valid crop name",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "c4dbf7eb-411d-47cb-a9ad-0b69f5bf4f9d",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "b3cc4028-8c4d-443a-afec-989e6075517c",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify returned observation levels\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0]).to.eql(\"MEANS\");",
											"    pm.expect(jsonData.result.data[1]).to.eql(\"PLOT\");",
											"    pm.expect(jsonData.result.data[2]).to.eql(\"PLANT\");",
											"    pm.expect(jsonData.result.data[3]).to.eql(\"QUADRAT\");",
											"    pm.expect(jsonData.result.data[4]).to.eql(\"TIMESERIES\");",
											"    pm.expect(jsonData.result.data[5]).to.eql(\"CUSTOM\");",
											"   ",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/observationLevels",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"observationLevels"
									]
								},
								"description": "GET /{crop}/brapi/v1/observationLevels"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered page number and page size aside from required parameters",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "e705bc1f-2aa6-4f03-994b-9be21c3404a7",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "a6a35b59-12df-4460-a9ea-995f7762b391",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify returned pagination\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											"    pm.expect(jsonData.metadata.pagination.pageSize).to.eql(3);",
											"   ",
											"});",
											"pm.test(\"Verify returned observation levels\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0]).to.eql(\"MEANS\");",
											"    pm.expect(jsonData.result.data[1]).to.eql(\"PLOT\");",
											"    pm.expect(jsonData.result.data[2]).to.eql(\"PLANT\");",
											"   ",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/observationLevels?page=0&pageSize=3",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"observationLevels"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "3"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/observationLevels"
							},
							"response": []
						},
						{
							"name": "Verify if user can invoke the call using 10000 as page size",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "0f924215-01c4-4def-b5ec-604045e80f57",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "aef59cf4-b4f4-4095-b900-3a2258414062",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify returned pagination\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											"    pm.expect(jsonData.metadata.pagination.pageSize).to.eql(10000);",
											"   ",
											"});",
											"pm.test(\"Verify returned observation levels\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0]).to.eql(\"MEANS\");",
											"    pm.expect(jsonData.result.data[1]).to.eql(\"PLOT\");",
											"    pm.expect(jsonData.result.data[2]).to.eql(\"PLANT\");",
											"    pm.expect(jsonData.result.data[3]).to.eql(\"QUADRAT\");",
											"    pm.expect(jsonData.result.data[4]).to.eql(\"TIMESERIES\");",
											"    pm.expect(jsonData.result.data[5]).to.eql(\"CUSTOM\");",
											"   ",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/observationLevels?page=0&pageSize=10000",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"observationLevels"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "10000"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/observationLevels"
							},
							"response": []
						},
						{
							"name": "Verify if user can invoke the call using page size that is greater than 10000",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "f65b4c71-4357-4bb5-8eef-ee57df8f9cbc",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "dbe16888-ccaa-476f-81f9-43277374b1fd",
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"",
											"pm.test(\"Verify returned error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Page size must between 1 and 10000.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/observationLevels?page=0&pageSize=10001",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"observationLevels"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "10001"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/observationLevels"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered string input to  page number",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "ce61d377-1e8b-454b-abde-2234ec52ea58",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "90fd13f9-02b4-490e-829d-3c7278cdbe35",
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"pm.test(\"Verify error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"For input string: \\\"asd\\\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/observationLevels?page={{string_input}}&pageSize=3",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"observationLevels"
									],
									"query": [
										{
											"key": "page",
											"value": "{{string_input}}"
										},
										{
											"key": "pageSize",
											"value": "3"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/observationLevels"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered string input to  pageSize",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "e9cfd842-3bc1-497f-a0b7-732421f15d4c",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "917590a9-a860-4050-b33b-8417199027d3",
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"pm.test(\"Verify error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"For input string: \\\"asd\\\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/observationLevels?page=0&pageSize={{string_input}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"observationLevels"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "{{string_input}}"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/observationLevels"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "variable-resource-brapi",
			"item": [
				{
					"name": "Verify response code and body when entered valid crop",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0c7b4e98-c527-4cfd-911c-256f06ba3944",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Verify returned metadata\", function () {",
									"    var jsonData = pm.response.json();",
									" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
									" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
									" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(25);",
									" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
									" pm.expect(jsonData.metadata.status).to.eql([]);",
									" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
									"});",
									"",
									"pm.test(\"Verify returned variable (NOTES)\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.result.data[0].crop).to.eql(\"testdata\");",
									"    pm.expect(jsonData.result.data[0].date).to.eql(null);",
									"    pm.expect(jsonData.result.data[0].defaultValue).to.eql(\"\");",
									"    pm.expect(jsonData.result.data[0].documentationURL).to.eql(null);",
									"    pm.expect(jsonData.result.data[0].growthStage).to.eql(null);",
									"    pm.expect(jsonData.result.data[0].institution).to.eql(null);",
									"    pm.expect(jsonData.result.data[0].language).to.eql(null);",
									"    pm.expect(jsonData.result.data[0].name).to.eql(\"NOTES\");",
									"    pm.expect(jsonData.result.data[0].observationVariableDbId).to.eql(pm.environment.get(\"study_notes_cvtermId\"));",
									"    pm.expect(jsonData.result.data[0].observationVariableName).to.eql(\"NOTES\");",
									"    pm.expect(jsonData.result.data[0].ontologyDbId).to.eql(null);",
									"    pm.expect(jsonData.result.data[0].ontologyName).to.eql(null);",
									"    pm.expect(jsonData.result.data[0].scientist).to.eql(null);",
									"    pm.expect(jsonData.result.data[0].status).to.eql(null);",
									"    pm.expect(jsonData.result.data[0].submissionTimestamp).to.eql(null);",
									"    pm.expect(jsonData.result.data[0].synonyms).to.eql([]);",
									"    pm.expect(jsonData.result.data[0].xref).to.eql(null);",
									"    ",
									"    //Verify scale details",
									"    pm.expect(jsonData.result.data[0].scale.dataType).to.eql(\"Text\");",
									"    pm.expect(jsonData.result.data[0].scale.decimalPlaces).to.eql(null);",
									"    pm.expect(jsonData.result.data[0].scale.name).to.eql(\"Text\");",
									"    pm.expect(jsonData.result.data[0].scale.scaleDbId).to.eql(\"6020\");",
									"    pm.expect(jsonData.result.data[0].scale.scaleName).to.eql(\"Text\");",
									"    pm.expect(jsonData.result.data[0].scale.xref).to.eql(null);",
									"    pm.expect(jsonData.result.data[0].scale.validValues.categories).to.eql([]);",
									"    pm.expect(jsonData.result.data[0].scale.validValues.max).to.eql(null);",
									"    pm.expect(jsonData.result.data[0].scale.validValues.min).to.eql(null);",
									"    pm.expect(jsonData.result.data[0].scale.ontologyReference.documentationLinks[0].type).to.eql(\"WEBPAGE\");",
									"    pm.expect(jsonData.result.data[0].scale.ontologyReference.documentationLinks[0].url).to.eql(\"https://cropontology.org\");",
									"    pm.expect(jsonData.result.data[0].scale.ontologyReference.ontologyDbId).to.eql(null);",
									"    pm.expect(jsonData.result.data[0].scale.ontologyReference.ontologyName).to.eql(\"Text\");",
									"    pm.expect(jsonData.result.data[0].scale.ontologyReference.version).to.eql(null);",
									"    ",
									"    //Verify trait details",
									"        pm.expect(jsonData.result.data[0].trait.attribute).to.eql(null);",
									"        pm.expect(jsonData.result.data[0].trait.class).to.eql(\"General\");",
									"        pm.expect(jsonData.result.data[0].trait.description).to.eql(\"Comment\");",
									"        pm.expect(jsonData.result.data[0].trait.entity).to.eql(null);",
									"        pm.expect(jsonData.result.data[0].trait.mainAbbreviation).to.eql(null);",
									"        pm.expect(jsonData.result.data[0].trait.name).to.eql(\"Comment\");",
									"        pm.expect(jsonData.result.data[0].trait.status).to.eql(\"Active\");",
									"        pm.expect(jsonData.result.data[0].trait.synonyms).to.eql([]);",
									"        pm.expect(jsonData.result.data[0].trait.traitDbId).to.eql(\"2065\");",
									"        pm.expect(jsonData.result.data[0].trait.traitName).to.eql(\"Comment\");",
									"        pm.expect(jsonData.result.data[0].trait.xref).to.eql(\"null\");",
									"        pm.expect(jsonData.result.data[0].trait.ontologyReference.documentationLinks[0].type).to.eql(\"WEBPAGE\");",
									"        pm.expect(jsonData.result.data[0].trait.ontologyReference.documentationLinks[0].url).to.eql(\"https://cropontology.org\");",
									"        pm.expect(jsonData.result.data[0].trait.ontologyReference.ontologyDbId).to.eql(\"null\");",
									"        pm.expect(jsonData.result.data[0].trait.ontologyReference.ontologyName).to.eql(\"Comment\");",
									"        pm.expect(jsonData.result.data[0].trait.ontologyReference.version).to.eql(null);",
									" ",
									"    //Verify method details",
									"    pm.expect(jsonData.result.data[0].method.class).to.eql(null);",
									"    pm.expect(jsonData.result.data[0].method.description).to.eql(\"Value recorded after observation\");",
									"    pm.expect(jsonData.result.data[0].method.formula).to.eql(\"null\");",
									"    pm.expect(jsonData.result.data[0].method.methodDbId).to.eql(\"4110\");",
									"    pm.expect(jsonData.result.data[0].method.methodName).to.eql(\"Observed\");",
									"    pm.expect(jsonData.result.data[0].method.name).to.eql(\"Observed\");",
									"    pm.expect(jsonData.result.data[0].method.reference).to.eql(null);",
									"    pm.expect(jsonData.result.data[0].method.ontologyReference.documentationLinks[0].type).to.eql(\"WEBPAGE\");",
									"    pm.expect(jsonData.result.data[0].method.ontologyReference.documentationLinks[0].url).to.eql(\"https://cropontology.org\");",
									"    pm.expect(jsonData.result.data[0].method.ontologyReference.ontologyDbId).to.eql(null);",
									"    pm.expect(jsonData.result.data[0].method.ontologyReference.ontologyName).to.eql(\"Observed\");pm.expect(jsonData.result.data[0].method.ontologyReference.version).to.eql(null);",
									"});",
									"   "
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "02e7d682-441d-42e9-8a34-cab99c192e47",
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{masterToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "X-Auth-Token",
								"type": "text",
								"value": "{{masterToken}}"
							}
						],
						"url": {
							"raw": "{{BMSurl}}/{{crop}}/brapi/v1/variables",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"{{crop}}",
								"brapi",
								"v1",
								"variables"
							]
						},
						"description": "GET ​/{crop}​/brapi​/v1​/variables"
					},
					"response": []
				},
				{
					"name": "Verify response code and body when entered pagination details",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4a8d32c8-2e8d-4ba5-9a3a-5d080e314250",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Verify returned metadata\", function () {",
									"    var jsonData = pm.response.json();",
									" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
									" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(10000);",
									" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(25);",
									" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
									" pm.expect(jsonData.metadata.status).to.eql([]);",
									" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
									"});",
									"",
									"pm.test(\"Verify returned variable (NOTES)\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.result.data[0].crop).to.eql(\"testdata\");",
									"    pm.expect(jsonData.result.data[0].date).to.eql(null);",
									"    pm.expect(jsonData.result.data[0].defaultValue).to.eql(\"\");",
									"    pm.expect(jsonData.result.data[0].documentationURL).to.eql(null);",
									"    pm.expect(jsonData.result.data[0].growthStage).to.eql(null);",
									"    pm.expect(jsonData.result.data[0].institution).to.eql(null);",
									"    pm.expect(jsonData.result.data[0].language).to.eql(null);",
									"    pm.expect(jsonData.result.data[0].name).to.eql(\"NOTES\");",
									"    pm.expect(jsonData.result.data[0].observationVariableDbId).to.eql(pm.environment.get(\"study_notes_cvtermId\"));",
									"    pm.expect(jsonData.result.data[0].observationVariableName).to.eql(\"NOTES\");",
									"    pm.expect(jsonData.result.data[0].ontologyDbId).to.eql(null);",
									"    pm.expect(jsonData.result.data[0].ontologyName).to.eql(null);",
									"    pm.expect(jsonData.result.data[0].scientist).to.eql(null);",
									"    pm.expect(jsonData.result.data[0].status).to.eql(null);",
									"    pm.expect(jsonData.result.data[0].submissionTimestamp).to.eql(null);",
									"    pm.expect(jsonData.result.data[0].synonyms).to.eql([]);",
									"    pm.expect(jsonData.result.data[0].xref).to.eql(null);",
									"    ",
									"    //Verify scale details",
									"    pm.expect(jsonData.result.data[0].scale.dataType).to.eql(\"Text\");",
									"    pm.expect(jsonData.result.data[0].scale.decimalPlaces).to.eql(null);",
									"    pm.expect(jsonData.result.data[0].scale.name).to.eql(\"Text\");",
									"    pm.expect(jsonData.result.data[0].scale.scaleDbId).to.eql(\"6020\");",
									"    pm.expect(jsonData.result.data[0].scale.scaleName).to.eql(\"Text\");",
									"    pm.expect(jsonData.result.data[0].scale.xref).to.eql(null);",
									"    pm.expect(jsonData.result.data[0].scale.validValues.categories).to.eql([]);",
									"    pm.expect(jsonData.result.data[0].scale.validValues.max).to.eql(null);",
									"    pm.expect(jsonData.result.data[0].scale.validValues.min).to.eql(null);",
									"    pm.expect(jsonData.result.data[0].scale.ontologyReference.documentationLinks[0].type).to.eql(\"WEBPAGE\");",
									"    pm.expect(jsonData.result.data[0].scale.ontologyReference.documentationLinks[0].url).to.eql(\"https://cropontology.org\");",
									"    pm.expect(jsonData.result.data[0].scale.ontologyReference.ontologyDbId).to.eql(null);",
									"    pm.expect(jsonData.result.data[0].scale.ontologyReference.ontologyName).to.eql(\"Text\");",
									"    pm.expect(jsonData.result.data[0].scale.ontologyReference.version).to.eql(null);",
									"    ",
									"    //Verify trait details",
									"        pm.expect(jsonData.result.data[0].trait.attribute).to.eql(null);",
									"        pm.expect(jsonData.result.data[0].trait.class).to.eql(\"General\");",
									"        pm.expect(jsonData.result.data[0].trait.description).to.eql(\"Comment\");",
									"        pm.expect(jsonData.result.data[0].trait.entity).to.eql(null);",
									"        pm.expect(jsonData.result.data[0].trait.mainAbbreviation).to.eql(null);",
									"        pm.expect(jsonData.result.data[0].trait.name).to.eql(\"Comment\");",
									"        pm.expect(jsonData.result.data[0].trait.status).to.eql(\"Active\");",
									"        pm.expect(jsonData.result.data[0].trait.synonyms).to.eql([]);",
									"        pm.expect(jsonData.result.data[0].trait.traitDbId).to.eql(\"2065\");",
									"        pm.expect(jsonData.result.data[0].trait.traitName).to.eql(\"Comment\");",
									"        pm.expect(jsonData.result.data[0].trait.xref).to.eql(\"null\");",
									"        pm.expect(jsonData.result.data[0].trait.ontologyReference.documentationLinks[0].type).to.eql(\"WEBPAGE\");",
									"        pm.expect(jsonData.result.data[0].trait.ontologyReference.documentationLinks[0].url).to.eql(\"https://cropontology.org\");",
									"        pm.expect(jsonData.result.data[0].trait.ontologyReference.ontologyDbId).to.eql(\"null\");",
									"        pm.expect(jsonData.result.data[0].trait.ontologyReference.ontologyName).to.eql(\"Comment\");",
									"        pm.expect(jsonData.result.data[0].trait.ontologyReference.version).to.eql(null);",
									" ",
									"    //Verify method details",
									"    pm.expect(jsonData.result.data[0].method.class).to.eql(null);",
									"    pm.expect(jsonData.result.data[0].method.description).to.eql(\"Value recorded after observation\");",
									"    pm.expect(jsonData.result.data[0].method.formula).to.eql(\"null\");",
									"    pm.expect(jsonData.result.data[0].method.methodDbId).to.eql(\"4110\");",
									"    pm.expect(jsonData.result.data[0].method.methodName).to.eql(\"Observed\");",
									"    pm.expect(jsonData.result.data[0].method.name).to.eql(\"Observed\");",
									"    pm.expect(jsonData.result.data[0].method.reference).to.eql(null);",
									"    pm.expect(jsonData.result.data[0].method.ontologyReference.documentationLinks[0].type).to.eql(\"WEBPAGE\");",
									"    pm.expect(jsonData.result.data[0].method.ontologyReference.documentationLinks[0].url).to.eql(\"https://cropontology.org\");",
									"    pm.expect(jsonData.result.data[0].method.ontologyReference.ontologyDbId).to.eql(null);",
									"    pm.expect(jsonData.result.data[0].method.ontologyReference.ontologyName).to.eql(\"Observed\");pm.expect(jsonData.result.data[0].method.ontologyReference.version).to.eql(null);",
									"});",
									"   "
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "20aefbcc-7a58-4bf9-9095-bdadd1940ad0",
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{masterToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "X-Auth-Token",
								"type": "text",
								"value": "{{masterToken}}"
							}
						],
						"url": {
							"raw": "{{BMSurl}}/{{crop}}/brapi/v1/variables?page=0&pageSize=10000",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"{{crop}}",
								"brapi",
								"v1",
								"variables"
							],
							"query": [
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "pageSize",
									"value": "10000"
								}
							]
						},
						"description": "GET ​/{crop}​/brapi​/v1​/variables"
					},
					"response": []
				},
				{
					"name": "Verify response code and body when entered pageSize greater than max",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a5150ba6-d2f7-4d3e-b099-674dcc9af74a",
								"exec": [
									"pm.test(\"Status code is 500\", function () {",
									"    pm.response.to.have.status(500);",
									"});",
									"",
									"pm.test(\"Verify returned error message\", function () {",
									"    var jsonData = pm.response.json();",
									" pm.expect(jsonData.errors[0].message).to.eql(\"Page size must between 1 and 10000.\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "3a4bc4c2-ee65-41ea-a05e-5cc0bae385f6",
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{masterToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "X-Auth-Token",
								"type": "text",
								"value": "{{masterToken}}"
							}
						],
						"url": {
							"raw": "{{BMSurl}}/{{crop}}/brapi/v1/variables?page=0&pageSize=10001",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"{{crop}}",
								"brapi",
								"v1",
								"variables"
							],
							"query": [
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "pageSize",
									"value": "10001"
								}
							]
						},
						"description": "GET ​/{crop}​/brapi​/v1​/variables"
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "observation-unit-resource-brapi",
			"item": [
				{
					"name": "PATCH /{crop}​/brapi​/v2​/observationunits​/{observationUnitDbId}",
					"item": [
						{
							"name": "Verify response code and body when entered valid inputs",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b92abbf1-2c32-4fe2-9440-bffe02151d14",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(0);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"pm.test(\"Verify geoCoordinates type\", function () {",
											"    pm.expect(jsonData.result.observationUnitPosition.geoCoordinates.type).to.eql(\"Feature\");",
											"});",
											"",
											"pm.test(\"Verify geometry coordinates\", function () {",
											"    pm.expect(jsonData.result.observationUnitPosition.geoCoordinates.geometry.coordinates[0]).to.eql(-76.506042);",
											"    pm.expect(jsonData.result.observationUnitPosition.geoCoordinates.geometry.coordinates[1]).to.eql(42.417373);",
											"});",
											"",
											"pm.test(\"Verify geometry type\", function () {",
											"    pm.expect(jsonData.result.observationUnitPosition.geoCoordinates.geometry.type).to.eql(\"Point\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "8ec6cd70-f785-4f08-b1b1-8f5775c20a94",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"observationUnitPosition\": {\r\n    \"geoCoordinates\":  {\r\n        \"geometry\": {\r\n            \"coordinates\": [\r\n                -76.506042,\r\n                42.417373\r\n            ],\r\n            \"type\": \"Point\"\r\n        },\r\n        \"type\": \"Feature\"\r\n    }\r\n  }\r\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/observationunits/{{study6_obs_unit_id}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"observationunits",
										"{{study6_obs_unit_id}}"
									]
								},
								"description": "PATCH /{crop}​/brapi​/v2​/observationunits​/{observationUnitDbId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered non-existing observationUnitDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6f6d5bb6-46b4-4ee3-9540-31963eeb5a0c",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Verify error message\", function () {",
											"    var error = pm.response.json().errors[0].message;",
											"    pm.expect(error).to.eql(\"Invalid observation unit id.\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e5e2ea2f-3d07-4a7e-806e-4b2dd13649ff",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"observationUnitPosition\": {\r\n    \"geoCoordinates\":  {\r\n        \"geometry\": {\r\n            \"coordinates\": [\r\n                -76.506042,\r\n                42.417373\r\n            ],\r\n            \"type\": \"Point\"\r\n        },\r\n        \"type\": \"Feature\"\r\n    }\r\n  }\r\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/observationunits/nonExistingId",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"observationunits",
										"nonExistingId"
									]
								},
								"description": "PATCH /{crop}​/brapi​/v2​/observationunits​/{observationUnitDbId}"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "POST ​/{crop}​/brapi​/v2​/search​/observationunits",
					"item": [
						{
							"name": "Post search by germplasmDbIds",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "df24e2a3-2e13-4d86-80a7-1de4f83d4518",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"    var jsonData = pm.response.json();",
											"    pm.environment.unset(\"searchResultDbId2_germplasmDbId\");",
											"    pm.environment.set(\"searchResultDbId2_germplasmDbId\", jsonData.result.searchResultDbId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "fc68dbb3-b122-4889-b3ea-bfbb1b998ab9",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"germplasmDbIds\": [\n\t\t\"24\"\n\t]\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/search/observationunits",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"search",
										"observationunits"
									]
								},
								"description": "POST ​/{crop}​/brapi​/v2​/search​/observationunits"
							},
							"response": []
						},
						{
							"name": "Post search by locationDbIds",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0b62a305-9385-4639-99d1-beabf9b75302",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"    var jsonData = pm.response.json();",
											"    pm.environment.unset(\"searchResultDbId2_locationDbId\");",
											"    pm.environment.set(\"searchResultDbId2_locationDbId\", jsonData.result.searchResultDbId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5d44af2e-9afe-410f-a2ba-5dded7950047",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"locationDbIds\": [\n\t\t\"9001\"\n\t]\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/search/observationunits",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"search",
										"observationunits"
									]
								},
								"description": "POST ​/{crop}​/brapi​/v2​/search​/observationunits"
							},
							"response": []
						},
						{
							"name": "Post search by observationLevel",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "138312eb-bc69-4223-a28c-588e1eff1184",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"    var jsonData = pm.response.json();",
											"    pm.environment.unset(\"searchResultDbId2_observationLevel\");",
											"    pm.environment.set(\"searchResultDbId2_observationLevel\", jsonData.result.searchResultDbId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2d5d5c5b-8416-410a-b939-6ce41ff1dddd",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"observationLevel\":\n\t\t\"PLOT\"\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/search/observationunits",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"search",
										"observationunits"
									]
								},
								"description": "POST ​/{crop}​/brapi​/v2​/search​/observationunits"
							},
							"response": []
						},
						{
							"name": "Post search by observationUnitDbIds",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a7d86442-e23f-47e9-8423-1678c3581d6c",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"    var jsonData = pm.response.json();",
											"    pm.environment.unset(\"searchResultDbId2_observationUnitDbId\");",
											"    pm.environment.set(\"searchResultDbId2_observationUnitDbId\", jsonData.result.searchResultDbId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "efadfb6b-be46-4583-9368-5c0c73d04e2e",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"observationUnitDbIds\":[\n\t\t\"PKWDPEV6LPs1N\"\n\t\t]\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/search/observationunits",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"search",
										"observationunits"
									]
								},
								"description": "POST ​/{crop}​/brapi​/v2​/search​/observationunits"
							},
							"response": []
						},
						{
							"name": "Post search by programDbIds",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9d0a9cce-def6-4efc-ac63-f6a28f7ba951",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"    var jsonData = pm.response.json();",
											"    pm.environment.unset(\"searchResultDbId2_programDbId\");",
											"    pm.environment.set(\"searchResultDbId2_programDbId\", jsonData.result.searchResultDbId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ecdf84e6-73a2-4393-8904-d4e4bdb7a30a",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"programDbIds\": [\n\t\t\"{{api_program_id}}\"\n\t]\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/search/observationunits",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"search",
										"observationunits"
									]
								},
								"description": "POST ​/{crop}​/brapi​/v2​/search​/observationunits"
							},
							"response": []
						},
						{
							"name": "Post search by studyDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "26c74692-b729-4023-a72d-468eac725614",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"    var jsonData = pm.response.json();",
											"    pm.environment.unset(\"searchResultDbId2_studyDbId\");",
											"    pm.environment.set(\"searchResultDbId2_studyDbId\", jsonData.result.searchResultDbId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "07b19f35-c501-4fee-8521-af97a2f8c699",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"studyDbIds\": [\n\t\t\"{{studyDbId}}\"\n\t]\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/search/observationunits",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"search",
										"observationunits"
									]
								},
								"description": "POST ​/{crop}​/brapi​/v2​/search​/observationunits"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "GET ​/{crop}​/brapi​/v2​/search​/observationunits​/{searchResultsDbid}",
					"item": [
						{
							"name": "Verify results when entered searchResultsDbid that filters by germplasmDbIds",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0b53aabf-d953-4336-bd9d-725059f229d9",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"var data = jsonData.result.data[0];",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											"  pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											"  pm.expect(jsonData.metadata.pagination.pageSize).to.eql(10000);",
											"  pm.expect(jsonData.metadata.pagination.totalCount).to.eql(119);",
											"  pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											"  pm.expect(jsonData.metadata.status).to.eql([]);",
											"  pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Check if all data has correct germplasmDbId\", function () {",
											"  var jsonData = pm.response.json();",
											"  var dataLength = jsonData.result.data.length;",
											"",
											"  for (i = 0; i < dataLength; i++) {",
											"    var data = jsonData.result.data[i];",
											"    pm.expect(data.germplasmDbId).to.eql(\"24\");",
											"  }",
											"",
											"});    ",
											"",
											"pm.test(\"Check observationUnitDbId\", function () {",
											"    pm.expect(data.observationUnitDbId).to.eql(\"PKWDPEV6LPs1N\");",
											"});",
											"pm.test(\"Check observationUnitDbId\", function () {",
											"    pm.expect(data.observationUnitName).to.eql(\"PLOT4\");",
											"});",
											"pm.test(\"Check observationLevel\", function () {",
											"    pm.expect(data.observationLevel).to.eql(\"PLOT\");",
											"});",
											"pm.test(\"Check plotNumber\", function () {",
											"    pm.expect(data.plotNumber).to.eql(\"4\");",
											"});",
											"pm.test(\"Check plantNumber\", function () {",
											"    pm.expect(data.plantNumber).to.eql(null);",
											"});",
											"pm.test(\"Check blockNumber\", function () {",
											"    pm.expect(data.blockNumber).to.eql(null);",
											"});",
											"pm.test(\"Check replicate\", function () {",
											"    pm.expect(data.replicate).to.eql(null);",
											"});",
											"pm.test(\"Check germplasmDbId\", function () {",
											"    pm.expect(data.germplasmDbId).to.eql(\"24\");",
											"});",
											"pm.test(\"Check germplasmName\", function () {",
											"    pm.expect(data.germplasmName).to.eql(\"GP4\");",
											"});",
											"pm.test(\"Check studyDbId\", function () {",
											"    pm.expect(data.studyDbId).to.eql(\"1\");",
											"});",
											"pm.test(\"Check studyName\", function () {",
											"    pm.expect(data.studyName).to.eql(\"Study with Imported Cross Nursery 2018002_1\");",
											"});",
											"pm.test(\"Check studyLocationDbId\", function () {",
											"    pm.expect(data.studyLocationDbId).to.eql(\"9001\");",
											"});",
											"pm.test(\"Check studyLocation\", function () {",
											"    pm.expect(data.studyLocation).to.eql(\"Africa Rice Centre\");",
											"});",
											"pm.test(\"Check programName\", function () {",
											"    pm.expect(data.programName).to.eql(\"API Program\");",
											"});",
											"pm.test(\"Check entryType\", function () {",
											"    pm.expect(data.entryType).to.eql(\"Test entry\");",
											"});",
											"pm.test(\"Check entryNumber\", function () {",
											"    pm.expect(data.entryNumber).to.eql(\"4\");",
											"});",
											"pm.test(\"Check observations\", function () {",
											"    pm.expect(data.observations[0].observationVariableDbId).to.eql(\"18100\");",
											"    pm.expect(data.observations[0].observationVariableName).to.eql(\"WeedPressure_number\");",
											"    pm.expect(data.observations[0].observationTimeStamp).to.eql(\"2020-09-30T00:28:13.000Z\");",
											"    pm.expect(data.observations[0].season).to.eql(null);",
											"    pm.expect(data.observations[0].collector).to.eql(\"\");",
											"    pm.expect(data.observations[0].value).to.eql(\"46\"); ",
											"});",
											"pm.test(\"Check additionalInfo\", function () {",
											"    pm.expect(data.additionalInfo).to.eql(\"\");",
											"});",
											"pm.test(\"Check locationDbId\", function () {",
											"    pm.expect(data.locationDbId).to.eql(\"9001\");",
											"});",
											"pm.test(\"Check locationName\", function () {",
											"    pm.expect(data.locationName).to.eql(\"Africa Rice Centre\");",
											"});",
											"pm.test(\"Check observationUnitPUI\", function () {",
											"    pm.expect(data.observationUnitPUI).to.eql(\"\");",
											"});",
											"pm.test(\"Check observationUnitPosition\", function () {",
											"    pm.expect(data.observationUnitPosition.blockNumber).to.eql(null);",
											"    pm.expect(data.observationUnitPosition.entryNumber).to.eql(\"4\");",
											"    pm.expect(data.observationUnitPosition.entryType[0]).to.eql(\"Test entry\");",
											"    pm.expect(data.observationUnitPosition.geoCoordinates).to.eql(null);",
											"    pm.expect(data.observationUnitPosition.positionCoordinateX).to.eql(\"1\"); ",
											"    pm.expect(data.observationUnitPosition.positionCoordinateXType).to.eql(\"GRID_COL\"); ",
											"    pm.expect(data.observationUnitPosition.positionCoordinateY).to.eql(\"1\"); ",
											"    pm.expect(data.observationUnitPosition.positionCoordinateYType).to.eql(\"GRID_ROW\"); ",
											"    pm.expect(data.observationUnitPosition.replicate).to.eql(null); ",
											"});",
											"pm.test(\"Check observationUnitXRef\", function () {",
											"    pm.expect(data.observationUnitXRef).to.eql(null);",
											"});",
											"pm.test(\"Check programDbId\", function () {",
											"    pm.expect(data.programDbId).to.eql(pm.environment.get(\"api_program_id\"));",
											"});",
											"pm.test(\"Check treatments\", function () {",
											"    pm.expect(data.treatments).to.eql([]);",
											"});",
											"pm.test(\"Check trialDbId\", function () {",
											"    pm.expect(data.trialDbId).to.eql(\"3009\");",
											"});",
											"pm.test(\"Check trialName\", function () {",
											"    pm.expect(data.trialName).to.eql(\"Study with Imported Cross Nursery 2018002\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "79fc4cf0-bd09-4c3c-b2ee-aeecc8fddc8d",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"germplasmDbIds\": [\n\t\t\"24\",\n\t\t\"31\",\n\t\t\"33\"\n\t]\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/search/observationunits/{{searchResultDbId2_germplasmDbId}}?page=0&pageSize=10000",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"search",
										"observationunits",
										"{{searchResultDbId2_germplasmDbId}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "10000"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v2​/search​/observationunits​/{searchResultsDbid}"
							},
							"response": []
						},
						{
							"name": "Verify results when entered searchResultsDbid that filters by locationDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0039dad2-d19c-4fc4-bb7b-c0ecfb9e6c64",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(10000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(1460);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Check if all data has correct locationDbId\", function () {",
											"  var jsonData = pm.response.json();",
											"  var dataLength = jsonData.result.data.length;",
											"",
											"  for (i = 0; i < dataLength ; i++) {",
											"      var data = jsonData.result.data[i];",
											"      pm.expect(data.studyLocationDbId).to.eql(\"9001\");",
											"  }",
											" ",
											"});    ",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "15f9d2c5-b9a2-4a4d-a4ec-b4c622a78ccb",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"germplasmDbIds\": [\n\t\t\"24\",\n\t\t\"31\",\n\t\t\"33\"\n\t]\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/search/observationunits/{{searchResultDbId2_locationDbId}}?page=0&pageSize=10000",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"search",
										"observationunits",
										"{{searchResultDbId2_locationDbId}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "10000"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v2​/search​/observationunits​/{searchResultsDbid}"
							},
							"response": []
						},
						{
							"name": "Verify results when entered searchResultsDbid that filters by observationLevel",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "68abb2e0-4348-4d95-b442-2b223d2403a2",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											"  pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											"  pm.expect(jsonData.metadata.pagination.pageSize).to.eql(10000);",
											"  pm.expect(jsonData.metadata.pagination.totalCount).to.eql(380);",
											"  pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											"  pm.expect(jsonData.metadata.status).to.eql([]);",
											"  pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Check if all data has correct observationLevel\", function () {",
											"  var jsonData = pm.response.json();",
											"  var dataLength = jsonData.result.data.length;",
											"",
											"  for (i = 0; i < dataLength; i++) {",
											"    var data = jsonData.result.data[i];",
											"    pm.expect(data.observationLevel).to.eql(\"PLOT\");",
											"  }",
											"",
											"});    ",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "79a5850e-95bc-4afd-826a-57d91a6db662",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"germplasmDbIds\": [\n\t\t\"24\",\n\t\t\"31\",\n\t\t\"33\"\n\t]\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/search/observationunits/{{searchResultDbId2_observationLevel}}?page=0&pageSize=10000",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"search",
										"observationunits",
										"{{searchResultDbId2_observationLevel}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "10000"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v2​/search​/observationunits​/{searchResultsDbid}"
							},
							"response": []
						},
						{
							"name": "Verify results when entered searchResultsDbid that filters by observationUnitDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fabe09d9-5c5c-4b12-841c-cb0b53da6158",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(10000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(1);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Check if all data has correct observationUnitDbId\", function () {",
											"  var jsonData = pm.response.json();",
											"  var dataLength = jsonData.result.data.length;",
											"",
											"  for (i = 0; i < dataLength ; i++) {",
											"      var data = jsonData.result.data[i];",
											"      pm.expect(data.observationUnitDbId).to.eql(\"PKWDPEV6LPs1N\");",
											"  }",
											" ",
											"});    ",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "6fc8e192-f0a5-47a0-ac43-7f5ec2a785d1",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"germplasmDbIds\": [\n\t\t\"24\",\n\t\t\"31\",\n\t\t\"33\"\n\t]\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/search/observationunits/{{searchResultDbId2_observationUnitDbId}}?page=0&pageSize=10000",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"search",
										"observationunits",
										"{{searchResultDbId2_observationUnitDbId}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "10000"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v2​/search​/observationunits​/{searchResultsDbid}"
							},
							"response": []
						},
						{
							"name": "Verify results when entered searchResultsDbid that filters by programDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4175d948-03d0-4eb0-98ea-d6346fd9e15e",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											"  pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											"  pm.expect(jsonData.metadata.pagination.pageSize).to.eql(10000);",
											"  pm.expect(jsonData.metadata.pagination.totalCount).to.eql(2380);",
											"  pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											"  pm.expect(jsonData.metadata.status).to.eql([]);",
											"  pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Check if all data has correct programName\", function () {",
											"  var jsonData = pm.response.json();",
											"  var dataLength = jsonData.result.data.length;",
											"",
											"  for (i = 0; i < dataLength; i++) {",
											"    var data = jsonData.result.data[i];",
											"    pm.expect(data.programName).to.eql(\"API Program\");",
											"  }",
											"",
											"});    ",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "440813e2-ba4e-4124-abd2-df1ef206b43d",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"germplasmDbIds\": [\n\t\t\"24\",\n\t\t\"31\",\n\t\t\"33\"\n\t]\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/search/observationunits/{{searchResultDbId2_programDbId}}?page=0&pageSize=10000",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"search",
										"observationunits",
										"{{searchResultDbId2_programDbId}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "10000"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v2​/search​/observationunits​/{searchResultsDbid}"
							},
							"response": []
						},
						{
							"name": "Verify results when entered searchResultsDbid that filters by studyDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bae0b6fc-ccc7-4657-97ee-923274258706",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(10000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(60);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Check if all data has correct studyDbId\", function () {",
											"  var jsonData = pm.response.json();",
											"  var dataLength = jsonData.result.data.length;",
											"",
											"  for (i = 0; i < dataLength ; i++) {",
											"      var data = jsonData.result.data[i];",
											"      pm.expect(data.studyDbId).to.eql(pm.environment.get(\"studyDbId\"));",
											"  }",
											" ",
											"});    ",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "cf62dad2-78d5-4d74-a21b-e8ee437ee1c1",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"germplasmDbIds\": [\n\t\t\"24\",\n\t\t\"31\",\n\t\t\"33\"\n\t]\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/search/observationunits/{{searchResultDbId2_studyDbId}}?page=0&pageSize=10000",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"search",
										"observationunits",
										"{{searchResultDbId2_studyDbId}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "10000"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v2​/search​/observationunits​/{searchResultsDbid}"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "phenotype-search-resource",
			"item": [
				{
					"name": "POST ​/{crop}​/brapi​/v1​/phenotypes-search",
					"item": [
						{
							"name": "Post phenotype search by trialDbId and plot dataset level",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a39ea845-ac9d-4d09-a332-ebf2e4c22623",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(80);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Verify returned first record\", function () {",
											"    ",
											"    var data = jsonData.result.data[0];",
											"    pm.expect(data.observationUnitDbId).to.eq(\"PKWDPivJxYgde\");",
											"    pm.expect(data.observationUnitName).to.eql(\"PLOT1\");",
											"    pm.expect(data.observationLevel).to.eql(\"PLOT\");",
											"    pm.expect(data.observationLevels).to.eql(\"1\");",
											"    pm.expect(data.plotNumber).to.eql(\"1\");",
											"    pm.expect(data.plantNumber).to.eql(null);",
											"    pm.expect(data.blockNumber).to.eql(null);",
											"    pm.expect(data.replicate).to.eql(\"1\");",
											"    pm.expect(data.germplasmDbId).to.eql(\"24\");",
											"    pm.expect(data.germplasmName).to.eql(\"GP4\");",
											"    pm.expect(data.studyDbId).to.eql(\"2\");",
											"    pm.expect(data.studyName).to.eql(\"Randomized Trial 20180003_1\");",
											"    pm.expect(data.studyLocationDbId).to.eql(\"9001\");",
											"    pm.expect(data.studyLocation).to.eql(\"Africa Rice Centre\");",
											"    pm.expect(data.programName).to.eql(\"API Program\");",
											"    pm.expect(data.x).to.eql(\"1\");",
											"    pm.expect(data.y).to.eql(\"1\");",
											"    pm.expect(data.entryType).to.eql(\"Check entry\");",
											"    pm.expect(data.entryNumber).to.eql(\"4\");",
											"    pm.expect(data.instanceNumber).to.eql(\"1\");",
											"    ",
											"    //Verify Biomas_yield observation",
											"    var observation = data.observations[0];",
											"    pm.expect(observation.observationDbId).to.eql(\"1004\");",
											"    pm.expect(observation.observationVariableDbId).to.eql(pm.environment.get(\"study_biomass_cvterm_id\"));",
											"    pm.expect(observation.observationVariableName).to.eql(\"Biomas_yield\");",
											"    pm.expect(observation.observationTimeStamp).to.eql(\"2018-10-29T03:33:44.000Z\");",
											"    pm.expect(observation.season).to.eql(null);",
											"    pm.expect(observation.collector).to.eql(\"\");",
											"    pm.expect(observation.value).to.eql(\"18\");",
											"    ",
											"    //Verify Grain_size observation",
											"    observation = data.observations[1];",
											"    pm.expect(observation.observationDbId).to.eql(\"1005\");",
											"    pm.expect(observation.observationVariableDbId).to.eql(pm.environment.get(\"grain_size_cvterm_id\"));",
											"    pm.expect(observation.observationVariableName).to.eql(\"Grain_size\");",
											"    pm.expect(observation.observationTimeStamp).to.eql(\"2018-10-29T03:33:44.000Z\");",
											"    pm.expect(observation.season).to.eql(null);",
											"    pm.expect(observation.collector).to.eql(\"\");",
											"    pm.expect(observation.value).to.eql(\"95\");",
											"    ",
											"    //Verify Grain_yield measurement",
											"    observation = data.observations[2];",
											"    pm.expect(observation.observationDbId).to.eql(\"1006\");",
											"    pm.expect(observation.observationVariableDbId).to.eql(pm.environment.get(\"study_grainYield_cvterm_id\"));",
											"    pm.expect(observation.observationVariableName).to.eql(\"Grain_yield\");",
											"    pm.expect(observation.observationTimeStamp).to.eql(\"2018-10-29T03:33:44.000Z\");",
											"    pm.expect(observation.season).to.eql(null);",
											"    pm.expect(observation.collector).to.eql(\"\");",
											"    pm.expect(observation.value).to.eql(\"4\");",
											"    ",
											"});",
											"",
											"pm.test(\"Verify returned middle record\", function () {",
											"    ",
											"    var data = jsonData.result.data[35];",
											"    pm.expect(data.observationUnitDbId).to.eq(\"PKWDP7q5Tpjea\");",
											"    pm.expect(data.observationUnitName).to.eql(\"PLOT36\");",
											"    pm.expect(data.observationLevel).to.eql(\"PLOT\");",
											"    pm.expect(data.observationLevels).to.eql(\"1\");",
											"    pm.expect(data.plotNumber).to.eql(\"36\");",
											"    pm.expect(data.plantNumber).to.eql(null);",
											"    pm.expect(data.blockNumber).to.eql(null);",
											"    pm.expect(data.replicate).to.eql(\"2\");",
											"    pm.expect(data.germplasmDbId).to.eql(\"32\");",
											"    pm.expect(data.germplasmName).to.eql(\"GP12\");",
											"    pm.expect(data.studyDbId).to.eql(\"2\");",
											"    pm.expect(data.studyName).to.eql(\"Randomized Trial 20180003_1\");",
											"    pm.expect(data.studyLocationDbId).to.eql(\"9001\");",
											"    pm.expect(data.studyLocation).to.eql(\"Africa Rice Centre\");",
											"    pm.expect(data.programName).to.eql(\"API Program\");",
											"    pm.expect(data.x).to.eql(\"1\");",
											"    pm.expect(data.y).to.eql(\"1\");",
											"    pm.expect(data.entryType).to.eql(\"Test entry\");",
											"    pm.expect(data.entryNumber).to.eql(\"12\");",
											"    pm.expect(data.instanceNumber).to.eql(\"1\");",
											"    ",
											"    //Verify Biomas_yield observation",
											"    var observation = data.observations[0];",
											"    pm.expect(observation.observationDbId).to.eql(\"1179\");",
											"    pm.expect(observation.observationVariableDbId).to.eql(pm.environment.get(\"study_biomass_cvterm_id\"));",
											"    pm.expect(observation.observationVariableName).to.eql(\"Biomas_yield\");",
											"    pm.expect(observation.observationTimeStamp).to.eql(\"2018-10-29T03:33:45.000Z\");",
											"    pm.expect(observation.season).to.eql(null);",
											"    pm.expect(observation.collector).to.eql(\"\");",
											"    pm.expect(observation.value).to.eql(\"67\");",
											"    ",
											"    //Verify Grain_size observation",
											"    observation = data.observations[1];",
											"    pm.expect(observation.observationDbId).to.eql(\"1180\");",
											"    pm.expect(observation.observationVariableDbId).to.eql(pm.environment.get(\"grain_size_cvterm_id\"));",
											"    pm.expect(observation.observationVariableName).to.eql(\"Grain_size\");",
											"    pm.expect(observation.observationTimeStamp).to.eql(\"2018-10-29T03:33:45.000Z\");",
											"    pm.expect(observation.season).to.eql(null);",
											"    pm.expect(observation.collector).to.eql(\"\");",
											"    pm.expect(observation.value).to.eql(\"100\");",
											"    ",
											"    ",
											"    //Verify Grain_yield measurement",
											"    observation = data.observations[2];",
											"    pm.expect(observation.observationDbId).to.eql(\"1181\");",
											"    pm.expect(observation.observationVariableDbId).to.eql(pm.environment.get(\"study_grainYield_cvterm_id\"));",
											"    pm.expect(observation.observationVariableName).to.eql(\"Grain_yield\");",
											"    pm.expect(observation.observationTimeStamp).to.eql(\"2018-10-29T03:33:45.000Z\");",
											"    pm.expect(observation.season).to.eql(null);",
											"    pm.expect(observation.collector).to.eql(\"\");",
											"    pm.expect(observation.value).to.eql(\"36\");",
											"    ",
											"});",
											"",
											"pm.test(\"Verify returned last record\", function () {",
											"    ",
											"    var data = jsonData.result.data[72];",
											"    pm.expect(data.observationUnitDbId).to.eq(\"PKWDPWqLNmAcO\");",
											"    pm.expect(data.observationUnitName).to.eql(\"PLOT33\");",
											"    pm.expect(data.observationLevel).to.eql(\"PLOT\");",
											"    pm.expect(data.observationLevels).to.eql(\"1\");",
											"    pm.expect(data.plotNumber).to.eql(\"33\");",
											"    pm.expect(data.plantNumber).to.eql(null);",
											"    pm.expect(data.blockNumber).to.eql(null);",
											"    pm.expect(data.replicate).to.eql(\"2\");",
											"    pm.expect(data.germplasmDbId).to.eql(\"27\");",
											"    pm.expect(data.germplasmName).to.eql(\"GP7\");",
											"    pm.expect(data.studyDbId).to.eql(\"3\");",
											"    pm.expect(data.studyName).to.eql(\"Randomized Trial 20180003_2\");",
											"    pm.expect(data.studyLocationDbId).to.eql(\"9003\");",
											"    pm.expect(data.studyLocation).to.eql(\"Centro Internacional de Agricultura Tropical\");",
											"    pm.expect(data.programName).to.eql(\"API Program\");",
											"    pm.expect(data.x).to.eql(\"1\");",
											"    pm.expect(data.y).to.eql(\"1\");",
											"    pm.expect(data.entryType).to.eql(\"Test entry\");",
											"    pm.expect(data.entryNumber).to.eql(\"7\");",
											"    pm.expect(data.instanceNumber).to.eql(\"2\");",
											"    ",
											"    //Verify Biomas_yield observation",
											"    var observation = data.observations[0];",
											"    pm.expect(observation.observationDbId).to.eql(\"1364\");",
											"    pm.expect(observation.observationVariableDbId).to.eql(pm.environment.get(\"study_biomass_cvterm_id\"));",
											"    pm.expect(observation.observationVariableName).to.eql(\"Biomas_yield\");",
											"    pm.expect(observation.observationTimeStamp).to.eql(\"2018-10-29T03:34:02.000Z\");",
											"    pm.expect(observation.season).to.eql(null);",
											"    pm.expect(observation.collector).to.eql(\"\");",
											"    pm.expect(observation.value).to.eql(\"46\");",
											"    ",
											"    //Verify Grain_size observation",
											"    observation = data.observations[1];",
											"    pm.expect(observation.observationDbId).to.eql(\"1365\");",
											"    pm.expect(observation.observationVariableDbId).to.eql(pm.environment.get(\"grain_size_cvterm_id\"));",
											"    pm.expect(observation.observationVariableName).to.eql(\"Grain_size\");",
											"    pm.expect(observation.observationTimeStamp).to.eql(\"2018-10-29T03:34:02.000Z\");",
											"    pm.expect(observation.season).to.eql(null);",
											"    pm.expect(observation.collector).to.eql(\"\");",
											"    pm.expect(observation.value).to.eql(\"35\");",
											"    ",
											"    ",
											"    //Verify Grain_yield measurement",
											"    observation = data.observations[2];",
											"    pm.expect(observation.observationDbId).to.eql(\"1366\");",
											"    pm.expect(observation.observationVariableDbId).to.eql(pm.environment.get(\"study_grainYield_cvterm_id\"));",
											"    pm.expect(observation.observationVariableName).to.eql(\"Grain_yield\");",
											"    pm.expect(observation.observationTimeStamp).to.eql(\"2018-10-29T03:34:02.000Z\");",
											"    pm.expect(observation.season).to.eql(null);",
											"    pm.expect(observation.collector).to.eql(\"\");",
											"    pm.expect(observation.value).to.eql(\"94\");",
											"    ",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a2137157-ae4f-499b-aa89-f504091c5735",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"observationLevel\": \"PLOT\",\n\t\"trialDbIds\": [\n\t\t\"{{trialStudyId}}\"\n\t]\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/phenotypes-search",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"phenotypes-search"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						},
						{
							"name": "Post phenotype search by locationDbIds and plant dataset level",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "dd0263f3-111f-4ed1-a39b-ed99697c376d",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(600);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Verify returned first record\", function () {",
											"    ",
											"    var data = jsonData.result.data[0];",
											"    pm.expect(data.observationUnitDbId).to.eq(\"2a664296-3d7e-459d-ad77-87a7d5dae8c5\");",
											"    pm.expect(data.observationUnitName).to.eql(null);",
											"    pm.expect(data.observationLevel).to.eql(\"PLANT\");",
											"    pm.expect(data.observationLevels).to.eql(\"1\");",
											"    pm.expect(data.plotNumber).to.eql(null);",
											"    pm.expect(data.plantNumber).to.eql(null);",
											"    pm.expect(data.blockNumber).to.eql(null);",
											"    pm.expect(data.replicate).to.eql(null);",
											"    pm.expect(data.germplasmDbId).to.eql(\"21\");",
											"    pm.expect(data.germplasmName).to.eql(\"GP1\");",
											"    pm.expect(data.studyDbId).to.eql(\"1\");",
											"    pm.expect(data.studyName).to.eql(\"Study with Imported Cross Nursery 2018002_1\");",
											"    pm.expect(data.studyLocationDbId).to.eql(\"9001\");",
											"    pm.expect(data.studyLocation).to.eql(\"Africa Rice Centre\");",
											"    pm.expect(data.programName).to.eql(\"API Program\");",
											"    pm.expect(data.x).to.eql(\"1\");",
											"    pm.expect(data.y).to.eql(\"1\");",
											"    pm.expect(data.entryType).to.eql(\"Test entry\");",
											"    pm.expect(data.entryNumber).to.eql(\"1\");",
											"    pm.expect(data.instanceNumber).to.eql(\"1\");",
											"    pm.expect(data.observations).to.eql([]);",
											"",
											"    ",
											"});",
											"",
											"pm.test(\"Verify returned middle record\", function () {",
											"    ",
											"    var data = jsonData.result.data[296];",
											"    pm.expect(data.observationUnitDbId).to.eq(\"35534c9e-755f-4aa5-aae9-085928d04e1f\");",
											"    pm.expect(data.observationUnitName).to.eql(null);",
											"    pm.expect(data.observationLevel).to.eql(\"PLANT\");",
											"    pm.expect(data.observationLevels).to.eql(\"1\");",
											"    pm.expect(data.plotNumber).to.eql(null);",
											"    pm.expect(data.plantNumber).to.eql(null);",
											"    pm.expect(data.blockNumber).to.eql(null);",
											"    pm.expect(data.replicate).to.eql(null);",
											"    pm.expect(data.germplasmDbId).to.eql(\"25\");",
											"    pm.expect(data.germplasmName).to.eql(\"GP5\");",
											"    pm.expect(data.studyDbId).to.eql(\"15\");",
											"    pm.expect(data.studyName).to.eql(\"Study for user 3_1\");",
											"    pm.expect(data.studyLocationDbId).to.eql(\"9001\");",
											"    pm.expect(data.studyLocation).to.eql(\"Africa Rice Centre\");",
											"    pm.expect(data.programName).to.eql(\"API Program\");",
											"    pm.expect(data.x).to.eql(\"1\");",
											"    pm.expect(data.y).to.eql(\"1\");",
											"    pm.expect(data.entryType).to.eql(\"Test entry\");",
											"    pm.expect(data.entryNumber).to.eql(\"5\");",
											"    pm.expect(data.instanceNumber).to.eql(\"1\");",
											"    pm.expect(data.observations).to.eql([]);",
											"    ",
											"});",
											"",
											"pm.test(\"Verify returned last record\", function () {",
											"    ",
											"    var data = jsonData.result.data[599];",
											"    pm.expect(data.observationUnitDbId).to.eq(\"930934f4-64e1-4aba-9f8e-bd80999bd6ce\");",
											"    pm.expect(data.observationUnitName).to.eql(null);",
											"    pm.expect(data.observationLevel).to.eql(\"PLANT\");",
											"    pm.expect(data.observationLevels).to.eql(\"1\");",
											"    pm.expect(data.plotNumber).to.eql(null);",
											"    pm.expect(data.plantNumber).to.eql(null);",
											"    pm.expect(data.blockNumber).to.eql(null);",
											"    pm.expect(data.replicate).to.eql(null);",
											"    pm.expect(data.germplasmDbId).to.eql(\"40\");",
											"    pm.expect(data.germplasmName).to.eql(\"GP20\");",
											"    pm.expect(data.studyDbId).to.eql(\"21\");",
											"    pm.expect(data.studyName).to.eql(\"Study for user 6_1\");",
											"    pm.expect(data.studyLocationDbId).to.eql(\"9001\");",
											"    pm.expect(data.studyLocation).to.eql(\"Africa Rice Centre\");",
											"    pm.expect(data.programName).to.eql(\"API Program\");",
											"    pm.expect(data.x).to.eql(\"1\");",
											"    pm.expect(data.y).to.eql(\"1\");",
											"    pm.expect(data.entryType).to.eql(\"Test entry\");",
											"    pm.expect(data.entryNumber).to.eql(\"20\");",
											"    pm.expect(data.instanceNumber).to.eql(\"1\");",
											"    pm.expect(data.observations).to.eql([]);",
											"    ",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1a5d0c2a-3a1d-45ce-a17f-076dc5971c9e",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"locationDbIds\": [\n\t\t\"9001\",\n\t\t\"9003\"\n\t],\n\t\"observationLevel\": \"PLANT\"\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/phenotypes-search",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"phenotypes-search"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						},
						{
							"name": "Post phenotype search by germplasmDbIds and means observation level",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "26d5f8e1-4d2d-4a66-9234-e0729256ec3c",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(6);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Verify returned first record\", function () {",
											"    ",
											"    var data = jsonData.result.data[0];",
											"    pm.expect(data.observationUnitDbId).to.eq(\"104158af-b4d7-428a-b772-4bbeb59422e9\");",
											"    pm.expect(data.observationUnitName).to.eql(null);",
											"    pm.expect(data.observationLevel).to.eql(\"MEANS\");",
											"    pm.expect(data.observationLevels).to.eql(\"1\");",
											"    pm.expect(data.plotNumber).to.eql(null);",
											"    pm.expect(data.plantNumber).to.eql(null);",
											"    pm.expect(data.blockNumber).to.eql(null);",
											"    pm.expect(data.replicate).to.eql(null);",
											"    pm.expect(data.germplasmDbId).to.eql(\"24\");",
											"    pm.expect(data.germplasmName).to.eql(\"GP4\");",
											"    pm.expect(data.studyDbId).to.eql(\"2\");",
											"    pm.expect(data.studyName).to.eql(\"Randomized Trial 20180003_1\");",
											"    pm.expect(data.studyLocationDbId).to.eql(\"9001\");",
											"    pm.expect(data.studyLocation).to.eql(\"Africa Rice Centre\");",
											"    pm.expect(data.programName).to.eql(\"API Program\");",
											"    pm.expect(data.x).to.eql(\"1\");",
											"    pm.expect(data.y).to.eql(\"1\");",
											"    pm.expect(data.entryType).to.eql(\"Check entry\");",
											"    pm.expect(data.entryNumber).to.eql(\"4\");",
											"    pm.expect(data.instanceNumber).to.eql(\"1\");",
											"    ",
											"    //Verify Biomas_yield_means observation",
											"    var observation = data.observations[0];",
											"    pm.expect(observation.observationDbId).to.eql(\"1500\");",
											"    pm.expect(observation.observationVariableDbId).to.eql(\"100002\");",
											"    pm.expect(observation.observationVariableName).to.eql(\"Biomas_yield_Means\");",
											"    pm.expect(observation.observationTimeStamp).to.eql(\"2019-01-21T15:29:18.000Z\");",
											"    pm.expect(observation.season).to.eql(null);",
											"    pm.expect(observation.collector).to.eql(\"\");",
											"    pm.expect(observation.value).to.eql(\"41.5\");",
											"    ",
											"    //Verify Grain_size_means observation",
											"    observation = data.observations[1];",
											"    pm.expect(observation.observationDbId).to.eql(\"1501\");",
											"    pm.expect(observation.observationVariableDbId).to.eql(\"100003\");",
											"    pm.expect(observation.observationVariableName).to.eql(\"Grain_size_Means\");",
											"    pm.expect(observation.observationTimeStamp).to.eql(\"2019-01-21T15:29:18.000Z\");",
											"    pm.expect(observation.season).to.eql(null);",
											"    pm.expect(observation.collector).to.eql(\"\");",
											"    pm.expect(observation.value).to.eql(\"69.4999999999999\");",
											"    ",
											"});",
											"",
											"pm.test(\"Verify returned last record\", function () {",
											"    ",
											"    var data = jsonData.result.data[5];",
											"    pm.expect(data.observationUnitDbId).to.eq(\"b8232a78-5cd7-436c-bfc8-ad8111318b62\");",
											"    pm.expect(data.observationUnitName).to.eql(null);",
											"    pm.expect(data.observationLevel).to.eql(\"MEANS\");",
											"    pm.expect(data.observationLevels).to.eql(\"1\");",
											"    pm.expect(data.plotNumber).to.eql(null);",
											"    pm.expect(data.plantNumber).to.eql(null);",
											"    pm.expect(data.blockNumber).to.eql(null);",
											"    pm.expect(data.replicate).to.eql(null);",
											"    pm.expect(data.germplasmDbId).to.eql(\"33\");",
											"    pm.expect(data.germplasmName).to.eql(\"GP13\");",
											"    pm.expect(data.studyDbId).to.eql(\"3\");",
											"    pm.expect(data.studyName).to.eql(\"Randomized Trial 20180003_2\");",
											"    pm.expect(data.studyLocationDbId).to.eql(\"9003\");",
											"    pm.expect(data.studyLocation).to.eql(\"Centro Internacional de Agricultura Tropical\");",
											"    pm.expect(data.programName).to.eql(\"API Program\");",
											"    pm.expect(data.x).to.eql(\"1\");",
											"    pm.expect(data.y).to.eql(\"1\");",
											"    pm.expect(data.entryType).to.eql(\"Test entry\");",
											"    pm.expect(data.entryNumber).to.eql(\"13\");",
											"    pm.expect(data.instanceNumber).to.eql(\"2\");",
											"    ",
											"    //Verify Biomas_yield_Means observation",
											"    var observation = data.observations[0];",
											"    pm.expect(observation.observationDbId).to.eql(\"1542\");",
											"    pm.expect(observation.observationVariableDbId).to.eql(\"100002\");",
											"    pm.expect(observation.observationVariableName).to.eql(\"Biomas_yield_Means\");",
											"    pm.expect(observation.observationTimeStamp).to.eql(\"2019-01-21T15:29:18.000Z\");",
											"    pm.expect(observation.season).to.eql(null);",
											"    pm.expect(observation.collector).to.eql(\"\");",
											"    pm.expect(observation.value).to.eql(\"60\");",
											"    ",
											"    //Verify Grain_size_Means observation",
											"    observation = data.observations[1];",
											"    pm.expect(observation.observationDbId).to.eql(\"1543\");",
											"    pm.expect(observation.observationVariableDbId).to.eql(\"100003\");",
											"    pm.expect(observation.observationVariableName).to.eql(\"Grain_size_Means\");",
											"    pm.expect(observation.observationTimeStamp).to.eql(\"2019-01-21T15:29:18.000Z\");",
											"    pm.expect(observation.season).to.eql(null);",
											"    pm.expect(observation.collector).to.eql(\"\");",
											"    pm.expect(observation.value).to.eql(\"34.5\");",
											"    ",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c5cedd7e-c0a9-49fc-a859-541191eaea5b",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"observationLevel\": \"MEANS\",\n\t\"germplasmDbIds\": [\n\t\t\"24\",\n\t\t\"31\",\n\t\t\"33\"\n\t]\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/phenotypes-search",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"phenotypes-search"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						},
						{
							"name": "Post phenotype search by observationVariableId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8684a78a-f70c-4201-bf00-4f5fea9cb3f3",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(860);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Check if all observation has biomas_yield\", function () {",
											"  var jsonData = pm.response.json();",
											"  ",
											"",
											"  var dataLength = jsonData.result.data.length;",
											"",
											"  for (i = 0; i < dataLength ; i++) {",
											"      var data = jsonData.result.data[i];",
											"      var observationsLength = data.observations.length;",
											"   ",
											"        for (j=0; j < observationsLength; j++) {",
											"            var variableId =data.observations[j].observationVariableDbId",
											"          if(variableId==\"18010\"){",
											"              pm.expect(variableId).to.eql(\"18010\");",
											"              console.log(\"index:\"+j+ \"Found! \");",
											"          }",
											"          ",
											"      }",
											"  }",
											" ",
											"});    ",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b6b71ff7-1ad8-4e6c-9b8d-25deac176b46",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"observationVariableDbIds\": [\n    \"18010\"\n  ]\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/phenotypes-search",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"phenotypes-search"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						},
						{
							"name": "Post phenotype search by programDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5c9973a9-d515-4df9-918d-e6f734f87008",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											"  pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											"  pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											"  pm.expect(jsonData.metadata.pagination.totalCount).to.eql(2380);",
											"  pm.expect(jsonData.metadata.pagination.totalPages).to.eql(3);",
											"  pm.expect(jsonData.metadata.status).to.eql([]);",
											"  pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Check if all data has correct programName\", function () {",
											"  var jsonData = pm.response.json();",
											"  var dataLength = jsonData.result.data.length;",
											"",
											"  for (i = 0; i < dataLength; i++) {",
											"    var data = jsonData.result.data[i];",
											"    pm.expect(data.programName).to.eql(\"API Program\");",
											"  }",
											"",
											"});    ",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "da777eb1-6a24-477c-afca-cbd239323e5a",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"programDbIds\": [\n\t\t\"{{api_program_id}}\"\n\t]\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/phenotypes-search",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"phenotypes-search"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						},
						{
							"name": "Post phenotype search by studyDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d2da0e33-ef6b-41e1-861b-010416dad76a",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(60);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Check if all data has correct studyDbId\", function () {",
											"  var jsonData = pm.response.json();",
											"  var dataLength = jsonData.result.data.length;",
											"",
											"  for (i = 0; i < dataLength ; i++) {",
											"      var data = jsonData.result.data[i];",
											"      pm.expect(data.studyDbId).to.eql(pm.environment.get(\"studyDbId\"));",
											"  }",
											" ",
											"});    ",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "95a3fb71-aa3d-41f4-b0d5-4d3b63ee2e02",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"studyDbIds\": [\n\t\t\"{{studyDbId}}\"\n\t]\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/phenotypes-search",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"phenotypes-search"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						},
						{
							"name": "Post phenotype search by observationUnitDbIds",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4ff7b312-1e4b-46e4-9cb5-4976d344e884",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(1);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Check if all data has correct programName\", function () {",
											"  var jsonData = pm.response.json();",
											"  var dataLength = jsonData.result.data.length;",
											"",
											"  for (i = 0; i < dataLength ; i++) {",
											"      var data = jsonData.result.data[i];",
											"      pm.expect(data.observationUnitDbId).to.eql(\"PKWDPivJxYgde\");",
											"  }",
											" ",
											"});    ",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2cdd3adc-0411-4937-a772-9ee96f168b65",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"observationUnitDbIds\": [\n    \"PKWDPivJxYgde\"\n\t]\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/phenotypes-search",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"phenotypes-search"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						},
						{
							"name": "Post phenotype search by observationTimeStamps",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8a19851a-91b0-4fb4-9d04-c345dd7d457e",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(80);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"",
											"pm.test(\"Check if observation timestamps are within observationTimeStamps\", function () {",
											"  var jsonData = pm.response.json();",
											"  ",
											"  //var returnedTimeStamp = ",
											"",
											"  var dataLength = jsonData.result.data.length;",
											"  var moment = require('moment');",
											"  var timeStampStart = moment(\"2018-01-01 00:00:00\");",
											"  var timeStampEnd = moment(\"2018-12-30 11:59:00\");",
											"  for (i = 0; i < dataLength ; i++) {",
											"      var data = jsonData.result.data[i];",
											"      var observationsLength = data.observations.length;",
											"   ",
											"        for (j=0; j < observationsLength; j++) {",
											"            var moment2 = require('moment');",
											"            var returnedTimeStamp = data.observations[j].observationTimeStamp;",
											"            var isAfter = moment2(returnedTimeStamp).isAfter(timeStampStart);",
											"            var isBefore = moment2(returnedTimeStamp).isBefore(timeStampEnd);",
											"            pm.expect(isAfter).to.eql(true);",
											"            pm.expect(isBefore).to.eql(true);",
											"        ",
											"      }",
											"  }",
											" ",
											"});    ",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c1073c5e-03c5-40ba-8032-40a6fd1a1743",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"trialDbIds\": [\r\n\t\t\"{{trialStudyId}}\"\r\n\t],\r\n        \"observationTimeStampRangeStart\": \"2018-01-01 12:00:00\",\r\n\t    \"observationTimeStampRangeEnd\": \"2018-12-30 11:59:00\"\r\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/phenotypes-search",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"phenotypes-search"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						},
						{
							"name": "Post phenotype search with entered pagination details",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "59692b21-c6b2-4b6c-a3ef-a8506f6c488f",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(10000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(860);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Check if all observation has biomas_yield\", function () {",
											"  var jsonData = pm.response.json();",
											"  ",
											"",
											"  var dataLength = jsonData.result.data.length;",
											"",
											"  for (i = 0; i < dataLength ; i++) {",
											"      var data = jsonData.result.data[i];",
											"      var observationsLength = data.observations.length;",
											"   ",
											"        for (j=0; j < observationsLength; j++) {",
											"            var variableId =data.observations[j].observationVariableDbId",
											"          if(variableId==\"18010\"){",
											"              pm.expect(variableId).to.eql(\"18010\");",
											"              console.log(\"index:\"+j+ \"Found! \");",
											"          }",
											"          ",
											"      }",
											"  }",
											" ",
											"});    ",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1f96eab6-5e88-4d83-83af-cf74fcd2073b",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"pageSize\": 10000,\n\t\"page\": 0,\n    \"observationVariableDbIds\": [\n    \"18010\"\n  ]\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/phenotypes-search",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"phenotypes-search"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						},
						{
							"name": "Post phenotype search with entered pageSize greater than max",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f58b3fd6-e586-42d8-a346-9e1bb9140a39",
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"",
											"pm.test(\"Verify returned error message\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.errors[0].message).to.eql(\"Page size must between 1 and 10000.\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "8104869c-e4e4-4119-a170-fca73db98c54",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"pageSize\": 10001,\n\t\"page\": 0,\n    \"observationVariableDbIds\": [\n    \"18010\"\n  ]\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/phenotypes-search",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"phenotypes-search"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						},
						{
							"name": "Post phenotype search with entered invalid page",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "de7843e9-50fd-4fc7-83fe-8c5d7af7df56",
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"",
											"pm.test(\"Verify returned error message\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.errors[0].message).to.eql(\"A total of 1 pages are available, so the page number must between 0 and 1 (exclusive).\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "734e5c97-a0ce-41fd-95ff-4a59d4b3c132",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"pageSize\": 10000,\n\t\"page\": 9999,\n    \"observationVariableDbIds\": [\n    \"18010\"\n  ]\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/phenotypes-search",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"phenotypes-search"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "lot-resource-brapi",
			"item": [
				{
					"name": "GET ​/{crop}​/brapi​/v2​/seedlots",
					"item": [
						{
							"name": "Verify response code and body when entered crop name only",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aab7f441-dab6-431d-82f0-a7aac547d226",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"var data = jsonData.result.data[0];",
											"pm.test(\"Verify returned metadata\", function () {",
											"    pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											"    pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											"    pm.expect(jsonData.metadata.pagination.totalCount).to.eql(227);",
											"    pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											"    pm.expect(jsonData.metadata.status).to.eql([]);",
											"    pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"//Verify data of first lot in the results",
											"",
											"pm.test(\"Check amount \", function () {",
											"    pm.expect(data.amount).to.eql(100);",
											"});",
											"",
											"pm.test(\"Check createdDate \", function () {",
											"    pm.expect(data.createdDate).to.eql(\"2018-10-25\");",
											"});",
											"",
											"pm.test(\"Check germplasmDbId \", function () {",
											"    pm.expect(data.germplasmDbId).to.eql(34);",
											"});",
											"",
											"pm.test(\"Check locationDbId \", function () {",
											"    pm.expect(data.locationDbId).to.eql(6000);",
											"});",
											"",
											"pm.test(\"Check seedLotDescription \", function () {",
											"    pm.expect(data.seedLotDescription).to.eql(\"From List Import\");",
											"});",
											"",
											"pm.test(\"Check seedLotName \", function () {",
											"    pm.expect(data.seedLotName).to.eql(\"SID2-14\");",
											"});",
											"",
											"pm.test(\"Check storageLocation \", function () {",
											"    pm.expect(data.storageLocation).to.eql(\"Default Seed Store\");",
											"});",
											"",
											"pm.test(\"Check units \", function () {",
											"    pm.expect(data.units).to.eql(\"SEED_AMOUNT_g\");",
											"});",
											"",
											"pm.test(\"Check seedLotDbId \", function () {",
											"    pm.expect(data.seedLotDbId).to.eql(\"39725719-09b9-11ea-8631-0242ac110002\");",
											"});",
											"",
											"//Check additional info",
											"pm.test(\"Check lotInternalId \", function () {",
											"    pm.expect(data.additionalInfo.lotInternalId).to.eql(21);",
											"});",
											"",
											"pm.test(\"Check actualBalance \", function () {",
											"    pm.expect(data.additionalInfo.actualBalance).to.eql(100);",
											"});",
											"",
											"pm.test(\"Check totalWithdrawals \", function () {",
											"    pm.expect(data.additionalInfo.totalWithdrawals).to.eql(0);",
											"});",
											"",
											"pm.test(\"Check pendingDeposits \", function () {",
											"    pm.expect(data.additionalInfo.pendingDeposits).to.eql(0);",
											"});",
											"",
											"pm.test(\"Check germplasmName \", function () {",
											"    pm.expect(data.additionalInfo.germplasmName).to.eql(\"CML14\");",
											"});",
											"",
											"pm.test(\"Check lastDepositDate \", function () {",
											"    pm.expect(data.additionalInfo.lastDepositDate).to.eql(\"2018-10-25\");",
											"});",
											"",
											"pm.test(\"Check totalReserved \", function () {",
											"    pm.expect(data.additionalInfo.totalReserved).to.eql(0);",
											"});",
											"",
											"pm.test(\"Check username \", function () {",
											"    pm.expect(data.additionalInfo.username).to.eql(\"admin\");",
											"});",
											"",
											"pm.test(\"Check status \", function () {",
											"    pm.expect(data.additionalInfo.status).to.eql(\"ACTIVE\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "dd8e41a1-d670-45e1-ae5b-dc30b45cbf24",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/seedlots",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"seedlots"
									]
								},
								"description": "GET /{crop}​/brapi​/v2​/seedlots"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered seedLotDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a1035e2a-8f16-4fb7-9744-53b2ad42c57e",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"var data = jsonData.result.data[0];",
											"pm.test(\"Verify returned metadata\", function () {",
											"    pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											"    pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											"    pm.expect(jsonData.metadata.pagination.totalCount).to.eql(1);",
											"    pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											"    pm.expect(jsonData.metadata.status).to.eql([]);",
											"    pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"//Verify data of first lot in the results",
											"",
											"pm.test(\"Check amount \", function () {",
											"    pm.expect(data.amount).to.eql(100);",
											"});",
											"",
											"pm.test(\"Check createdDate \", function () {",
											"    pm.expect(data.createdDate).to.eql(\"2018-10-25\");",
											"});",
											"",
											"pm.test(\"Check germplasmDbId \", function () {",
											"    pm.expect(data.germplasmDbId).to.eql(34);",
											"});",
											"",
											"pm.test(\"Check locationDbId \", function () {",
											"    pm.expect(data.locationDbId).to.eql(6000);",
											"});",
											"",
											"pm.test(\"Check seedLotDescription \", function () {",
											"    pm.expect(data.seedLotDescription).to.eql(\"From List Import\");",
											"});",
											"",
											"pm.test(\"Check seedLotName \", function () {",
											"    pm.expect(data.seedLotName).to.eql(\"SID2-14\");",
											"});",
											"",
											"pm.test(\"Check storageLocation \", function () {",
											"    pm.expect(data.storageLocation).to.eql(\"Default Seed Store\");",
											"});",
											"",
											"pm.test(\"Check units \", function () {",
											"    pm.expect(data.units).to.eql(\"SEED_AMOUNT_g\");",
											"});",
											"",
											"pm.test(\"Check seedLotDbId \", function () {",
											"    pm.expect(data.seedLotDbId).to.eql(\"39725719-09b9-11ea-8631-0242ac110002\");",
											"});",
											"",
											"//Check additional info",
											"pm.test(\"Check lotInternalId \", function () {",
											"    pm.expect(data.additionalInfo.lotInternalId).to.eql(21);",
											"});",
											"",
											"pm.test(\"Check actualBalance \", function () {",
											"    pm.expect(data.additionalInfo.actualBalance).to.eql(100);",
											"});",
											"",
											"pm.test(\"Check totalWithdrawals \", function () {",
											"    pm.expect(data.additionalInfo.totalWithdrawals).to.eql(0);",
											"});",
											"",
											"pm.test(\"Check pendingDeposits \", function () {",
											"    pm.expect(data.additionalInfo.pendingDeposits).to.eql(0);",
											"});",
											"",
											"pm.test(\"Check germplasmName \", function () {",
											"    pm.expect(data.additionalInfo.germplasmName).to.eql(\"CML14\");",
											"});",
											"",
											"pm.test(\"Check lastDepositDate \", function () {",
											"    pm.expect(data.additionalInfo.lastDepositDate).to.eql(\"2018-10-25\");",
											"});",
											"",
											"pm.test(\"Check totalReserved \", function () {",
											"    pm.expect(data.additionalInfo.totalReserved).to.eql(0);",
											"});",
											"",
											"pm.test(\"Check username \", function () {",
											"    pm.expect(data.additionalInfo.username).to.eql(\"admin\");",
											"});",
											"",
											"pm.test(\"Check status \", function () {",
											"    pm.expect(data.additionalInfo.status).to.eql(\"ACTIVE\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "620eade3-6630-4d51-910b-9afe248e07ea",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/seedlots?seedLotDbId=39725719-09b9-11ea-8631-0242ac110002",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"seedlots"
									],
									"query": [
										{
											"key": "seedLotDbId",
											"value": "39725719-09b9-11ea-8631-0242ac110002"
										}
									]
								},
								"description": "GET /{crop}​/brapi​/v2​/seedlots"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered germplasmDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "733cb539-d439-4e67-a681-e6c0c86c96bc",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"var data = jsonData.result.data[0];",
											"pm.test(\"Verify returned metadata\", function () {",
											"    pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											"    pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											"    pm.expect(jsonData.metadata.pagination.totalCount).to.eql(1);",
											"    pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											"    pm.expect(jsonData.metadata.status).to.eql([]);",
											"    pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"//Verify data of first lot in the results",
											"",
											"pm.test(\"Check amount \", function () {",
											"    pm.expect(data.amount).to.eql(100);",
											"});",
											"",
											"pm.test(\"Check createdDate \", function () {",
											"    pm.expect(data.createdDate).to.eql(\"2018-10-25\");",
											"});",
											"",
											"pm.test(\"Check germplasmDbId \", function () {",
											"    pm.expect(data.germplasmDbId).to.eql(34);",
											"});",
											"",
											"pm.test(\"Check locationDbId \", function () {",
											"    pm.expect(data.locationDbId).to.eql(6000);",
											"});",
											"",
											"pm.test(\"Check seedLotDescription \", function () {",
											"    pm.expect(data.seedLotDescription).to.eql(\"From List Import\");",
											"});",
											"",
											"pm.test(\"Check seedLotName \", function () {",
											"    pm.expect(data.seedLotName).to.eql(\"SID2-14\");",
											"});",
											"",
											"pm.test(\"Check storageLocation \", function () {",
											"    pm.expect(data.storageLocation).to.eql(\"Default Seed Store\");",
											"});",
											"",
											"pm.test(\"Check units \", function () {",
											"    pm.expect(data.units).to.eql(\"SEED_AMOUNT_g\");",
											"});",
											"",
											"pm.test(\"Check seedLotDbId \", function () {",
											"    pm.expect(data.seedLotDbId).to.eql(\"39725719-09b9-11ea-8631-0242ac110002\");",
											"});",
											"",
											"//Check additional info",
											"pm.test(\"Check lotInternalId \", function () {",
											"    pm.expect(data.additionalInfo.lotInternalId).to.eql(21);",
											"});",
											"",
											"pm.test(\"Check actualBalance \", function () {",
											"    pm.expect(data.additionalInfo.actualBalance).to.eql(100);",
											"});",
											"",
											"pm.test(\"Check totalWithdrawals \", function () {",
											"    pm.expect(data.additionalInfo.totalWithdrawals).to.eql(0);",
											"});",
											"",
											"pm.test(\"Check pendingDeposits \", function () {",
											"    pm.expect(data.additionalInfo.pendingDeposits).to.eql(0);",
											"});",
											"",
											"pm.test(\"Check germplasmName \", function () {",
											"    pm.expect(data.additionalInfo.germplasmName).to.eql(\"CML14\");",
											"});",
											"",
											"pm.test(\"Check lastDepositDate \", function () {",
											"    pm.expect(data.additionalInfo.lastDepositDate).to.eql(\"2018-10-25\");",
											"});",
											"",
											"pm.test(\"Check totalReserved \", function () {",
											"    pm.expect(data.additionalInfo.totalReserved).to.eql(0);",
											"});",
											"",
											"pm.test(\"Check username \", function () {",
											"    pm.expect(data.additionalInfo.username).to.eql(\"admin\");",
											"});",
											"",
											"pm.test(\"Check status \", function () {",
											"    pm.expect(data.additionalInfo.status).to.eql(\"ACTIVE\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "69fde013-edda-4709-8529-36af6c77a826",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/seedlots?germplasmDbId=34",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"seedlots"
									],
									"query": [
										{
											"key": "germplasmDbId",
											"value": "34"
										}
									]
								},
								"description": "GET /{crop}​/brapi​/v2​/seedlots"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered page no and pageSize values",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c7d44831-5edd-47c1-9ed0-79484b97dd3d",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"var data = jsonData.result.data[0];",
											"pm.test(\"Verify returned metadata\", function () {",
											"    pm.expect(jsonData.metadata.pagination.currentPage).to.eql(2);",
											"    pm.expect(jsonData.metadata.pagination.pageSize).to.eql(10);",
											"    pm.expect(jsonData.metadata.pagination.totalCount).to.eql(227);",
											"    pm.expect(jsonData.metadata.pagination.totalPages).to.eql(23);",
											"    pm.expect(jsonData.metadata.status).to.eql([]);",
											"    pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"//Verify data of first lot in the results",
											"",
											"pm.test(\"Check amount \", function () {",
											"    pm.expect(data.amount).to.eql(0.0);",
											"});",
											"",
											"pm.test(\"Check createdDate \", function () {",
											"    pm.expect(data.createdDate).to.eql(\"2020-06-16\");",
											"});",
											"",
											"pm.test(\"Check germplasmDbId \", function () {",
											"    pm.expect(data.germplasmDbId).to.eql(21);",
											"});",
											"",
											"pm.test(\"Check locationDbId \", function () {",
											"    pm.expect(data.locationDbId).to.eql(6000);",
											"});",
											"",
											"pm.test(\"Check seedLotDescription \", function () {",
											"    pm.expect(data.seedLotDescription).to.eql(\"new lot record\");",
											"});",
											"",
											"pm.test(\"Check seedLotName \", function () {",
											"    pm.expect(data.seedLotName).to.eql(\"SID3-1\");",
											"});",
											"",
											"pm.test(\"Check storageLocation \", function () {",
											"    pm.expect(data.storageLocation).to.eql(\"Default Seed Store\");",
											"});",
											"",
											"pm.test(\"Check units \", function () {",
											"    pm.expect(data.units).to.eql(\"SEED_AMOUNT_g\");",
											"});",
											"",
											"pm.test(\"Check seedLotDbId \", function () {",
											"    pm.expect(data.seedLotDbId).to.eql(\"31a74660-3579-4d74-91a8-3a7f74c2cffe\");",
											"});",
											"",
											"//Check additional info",
											"pm.test(\"Check lotInternalId \", function () {",
											"    pm.expect(data.additionalInfo.lotInternalId).to.eql(41);",
											"});",
											"",
											"pm.test(\"Check actualBalance \", function () {",
											"    pm.expect(data.additionalInfo.actualBalance).to.eql(0.0);",
											"});",
											"",
											"pm.test(\"Check totalWithdrawals \", function () {",
											"    pm.expect(data.additionalInfo.totalWithdrawals).to.eql(0.0);",
											"});",
											"",
											"pm.test(\"Check pendingDeposits \", function () {",
											"    pm.expect(data.additionalInfo.pendingDeposits).to.eql(0.0);",
											"});",
											"",
											"pm.test(\"Check germplasmName \", function () {",
											"    pm.expect(data.additionalInfo.germplasmName).to.eql(\"CML1\");",
											"});",
											"",
											"//pm.test(\"Check lastDepositDate \", function () {",
											"//    pm.expect(data.additionalInfo.lastDepositDate).to.eql(\"2018-10-25\");",
											"//});",
											"",
											"pm.test(\"Check totalReserved \", function () {",
											"    pm.expect(data.additionalInfo.totalReserved).to.eql(0.0);",
											"});",
											"",
											"pm.test(\"Check username \", function () {",
											"    pm.expect(data.additionalInfo.username).to.eql(\"admin\");",
											"});",
											"",
											"pm.test(\"Check status \", function () {",
											"    pm.expect(data.additionalInfo.status).to.eql(\"ACTIVE\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "6cc323b1-6935-4c8c-91ba-6a4834043ef9",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/seedlots?page=2&pageSize=10",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"seedlots"
									],
									"query": [
										{
											"key": "page",
											"value": "2"
										},
										{
											"key": "pageSize",
											"value": "10"
										}
									]
								},
								"description": "GET /{crop}​/brapi​/v2​/seedlots"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered  page number that does not exist for the given pageSize",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "37108b6e-b9ff-4c6b-9ff3-9ee807c60ea1",
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"var jsonData = pm.response.json();",
											"pm.test(\"Check error message\", function () {",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"A total of 23 pages are available, so the page number must between 0 and 23 (exclusive).\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a70c86bc-3658-4392-a43b-aee7bffb5aac",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/seedlots?page=10000&pageSize=10",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"seedlots"
									],
									"query": [
										{
											"key": "page",
											"value": "10000"
										},
										{
											"key": "pageSize",
											"value": "10"
										}
									]
								},
								"description": "GET /{crop}​/brapi​/v2​/seedlots"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered pageSize value greater than max pageSize in the system",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "847370ef-7567-4626-8d28-ec44c7d93eae",
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"var jsonData = pm.response.json();",
											"pm.test(\"Check error message\", function () {",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Page size must between 1 and 10000.\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9a5a814c-a4bf-4eaa-9527-307826f9652e",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/seedlots?page=0&pageSize=10001",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"seedlots"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "10001"
										}
									]
								},
								"description": "GET /{crop}​/brapi​/v2​/seedlots"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered seedLotDbId of a closed lot",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e4dfc2a6-d655-4b39-8fc1-46f20aeaa735",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"pm.test(\"Verify returned metadata\", function () {",
											"    pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											"    pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											"    pm.expect(jsonData.metadata.pagination.totalCount).to.eql(0);",
											"    pm.expect(jsonData.metadata.pagination.totalPages).to.eql(0);",
											"    pm.expect(jsonData.metadata.status).to.eql([]);",
											"    pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"//Verify data of first lot in the results",
											"",
											"pm.test(\"Check data \", function () {",
											"    pm.expect(jsonData.result.data).to.eql([]);",
											"});",
											"",
											"pm.test(\"Check observations \", function () {",
											"    pm.expect(jsonData.result.observations).to.eql([]);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d4a53abc-6db1-4095-8847-989951fc8185",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/seedlots?seedLotDbId=eb55f552-2b21-451b-9e78-3dcf84f0d256",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"seedlots"
									],
									"query": [
										{
											"key": "seedLotDbId",
											"value": "eb55f552-2b21-451b-9e78-3dcf84f0d256"
										}
									]
								},
								"description": "GET /{crop}​/brapi​/v2​/seedlots"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered combination of parameter values",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f9860b6d-bb3d-4230-95ac-dcb0589788c1",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"pm.test(\"Verify returned metadata\", function () {",
											"    pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											"    pm.expect(jsonData.metadata.pagination.pageSize).to.eql(10000);",
											"    pm.expect(jsonData.metadata.pagination.totalCount).to.eql(0);",
											"    pm.expect(jsonData.metadata.pagination.totalPages).to.eql(0);",
											"    pm.expect(jsonData.metadata.status).to.eql([]);",
											"    pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"//Verify data of first lot in the results",
											"",
											"pm.test(\"Check data \", function () {",
											"    pm.expect(jsonData.result.data).to.eql([]);",
											"});",
											"",
											"pm.test(\"Check observations \", function () {",
											"    pm.expect(jsonData.result.observations).to.eql([]);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "436b4f1e-d391-42f8-a76e-a940e184f071",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/seedlots?seedLotDbId=eb55f552-2b21-451b-9e78-3dcf84f0d256&germplasmDbId=34&page=0&pageSize=10000",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"seedlots"
									],
									"query": [
										{
											"key": "seedLotDbId",
											"value": "eb55f552-2b21-451b-9e78-3dcf84f0d256"
										},
										{
											"key": "germplasmDbId",
											"value": "34"
										},
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "10000"
										}
									]
								},
								"description": "GET /{crop}​/brapi​/v2​/seedlots"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"protocolProfileBehavior": {}
}
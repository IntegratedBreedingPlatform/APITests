{
	"info": {
		"_postman_id": "27b27eac-033b-469d-8c4e-bbe40f1fddf0",
		"name": "BRAPI",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "authentication-controller-brapi",
			"item": [
				{
					"name": "Get admin token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "08ec249c-ef97-4405-b6f9-77e8ee0fabb0",
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.environment.unset(\"masterToken\");",
									"pm.environment.set(\"masterToken\", jsonData.access_token);",
									"pm.environment.unset(\"masterTokenExpiry\");",
									"pm.environment.set(\"masterTokenExpiry\", jsonData.expires_in);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{masterToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"username\": \"{{bms_user}}\",\r\n  \"password\": \"{{bms_password}}\",\r\n  \"grant_type\": \"\",\r\n  \"client_id\": \"\"\r\n}"
						},
						"url": {
							"raw": "{{BMSurl}}/brapi/v1/token",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"brapi",
								"v1",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get test user token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "595aae3b-abea-43f0-9c2b-50790d804502",
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.environment.unset(\"testuser_token\");",
									"pm.environment.set(\"testuser_token\", jsonData.access_token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{masterToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"username\": \"apitestuser\",\r\n  \"password\": \"apitestuser\",\r\n  \"grant_type\": \"\",\r\n  \"client_id\": \"\"\r\n}"
						},
						"url": {
							"raw": "{{BMSurl}}/brapi/v1/token",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"brapi",
								"v1",
								"token"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "call-resource-brapi",
			"item": [
				{
					"name": "GET ​/brapi​/v1​/calls",
					"item": [
						{
							"name": "Verify calls with no specified format",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "86ba7e00-2755-4a83-8693-78016caed286",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Check total call count\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.metadata.pagination.totalCount).to.eql(26);",
											"});",
											"",
											"",
											"pm.test(\"Check a call with json or application/json format\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[2].call).to.eql(\"locations\");",
											"    pm.expect(jsonData.result.data[2].dataTypes[0]).to.eql(\"application/json\");",
											"    pm.expect(jsonData.result.data[2].datatypes[0]).to.eql(\"json\");",
											"});",
											"",
											"pm.test(\"Check a call with tsv or text/tsv\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[8].call).to.eql(\"studies/{studyDbId}/table\");",
											"    pm.expect(jsonData.result.data[8].dataTypes[1]).to.eql(\"text/tsv\");",
											"    pm.expect(jsonData.result.data[8].datatypes[1]).to.eql(\"tsv\");",
											"    ",
											"});",
											"",
											"pm.test(\"Check if format of study table call is csv\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[8].call).to.eql(\"studies/{studyDbId}/table\");",
											"    pm.expect(jsonData.result.data[8].dataTypes[2]).to.eql(\"text/csv\");",
											"    pm.expect(jsonData.result.data[8].datatypes[2]).to.eql(\"csv\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c86526e5-74bb-4932-a4a8-959c3289c5e7",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/brapi/v1/calls",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"brapi",
										"v1",
										"calls"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify calls with csv format",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a5fe8212-b3f7-4c02-89bb-34f09d53f42e",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Check a study table call\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0].call).to.eql(\"studies/{studyDbId}/table\");",
											"        pm.expect(jsonData.result.data[0].datatypes[2]).to.eql(\"csv\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1a2ef1cc-8ff0-4272-8ac4-b459130d2a11",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/brapi/v1/calls?dataType=csv",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"brapi",
										"v1",
										"calls"
									],
									"query": [
										{
											"key": "dataType",
											"value": "csv"
										}
									]
								},
								"description": "GET ​/brapi​/v1​/calls"
							},
							"response": []
						},
						{
							"name": "Verify calls tsv format",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "48451031-0b54-4e3d-a7a5-f2c558a56458",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Check a study table call\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0].call).to.eql(\"studies/{studyDbId}/table\");",
											"});",
											"",
											"pm.test(\"Check if format of samples call is tsv\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0].datatypes[1]).to.eql(\"tsv\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "25411873-3193-4849-9a59-77d6f09b7814",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/brapi/v1/calls?dataType=tsv",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"brapi",
										"v1",
										"calls"
									],
									"query": [
										{
											"key": "dataType",
											"value": "tsv"
										}
									]
								},
								"description": "GET ​/brapi​/v1​/calls"
							},
							"response": []
						},
						{
							"name": "Verify calls with json format",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f287d112-5259-4d9f-825d-e8b8fe018f2a",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Check a study table call\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[8].call).to.eql(\"studies/{studyDbId}/table\");",
											"});",
											"",
											"",
											"pm.test(\"Check if format of samples call is tsv\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[8].datatypes[0]).to.eql(\"json\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2694aba1-b191-46d8-bdf6-341f2f7441ce",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/brapi/v1/calls?dataType=json",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"brapi",
										"v1",
										"calls"
									],
									"query": [
										{
											"key": "dataType",
											"value": "json"
										}
									]
								},
								"description": "GET ​/brapi​/v1​/calls"
							},
							"response": []
						},
						{
							"name": "Verify calls with  text/csv format",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b7c5ec06-7021-4e5e-b795-16d3a608e164",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Check total call count\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.metadata.pagination.totalCount).to.eql(1);",
											"});",
											"",
											"",
											"pm.test(\"Check a study table call\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0].call).to.eql(\"studies/{studyDbId}/table\");",
											"        pm.expect(jsonData.result.data[0].dataTypes[2]).to.eql(\"text/csv\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a1944494-dd2a-4ca9-ae2c-5b2824357b65",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/brapi/v1/calls?dataType=text/csv",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"brapi",
										"v1",
										"calls"
									],
									"query": [
										{
											"key": "dataType",
											"value": "text/csv"
										}
									]
								},
								"description": "GET ​/brapi​/v1​/calls"
							},
							"response": []
						},
						{
							"name": "Verify calls with text/tsv format",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bfa84241-9f71-4e93-a1de-1ffd906bb3f2",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Check a study table call\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0].call).to.eql(\"studies/{studyDbId}/table\");",
											"});",
											"",
											"pm.test(\"Check if format of samples call is tsv\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0].dataTypes[1]).to.eql(\"text/tsv\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "646f3d4b-71cf-467f-9399-dbf7795fde96",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/brapi/v1/calls?dataType=text/tsv",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"brapi",
										"v1",
										"calls"
									],
									"query": [
										{
											"key": "dataType",
											"value": "text/tsv"
										}
									]
								},
								"description": "GET ​/brapi​/v1​/calls"
							},
							"response": []
						},
						{
							"name": "Verify calls with application/json format",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "026450b8-ae9a-4e7f-b280-713551ce4661",
										"exec": [
											"pm.test(\"Status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Check total call count\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.metadata.pagination.totalCount).to.eql(26);",
											"});",
											"",
											"",
											"pm.test(\"Check token call\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0].call).to.eql(\"token\");",
											"    pm.expect(jsonData.result.data[0].dataTypes[0]).to.eql(\"application/json\");",
											"});",
											"pm.test(\"Check crops call\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[1].call).to.eql(\"crops\");",
											"    pm.expect(jsonData.result.data[1].dataTypes[0]).to.eql(\"application/json\");",
											"});",
											"pm.test(\"Check locations call\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[2].call).to.eql(\"locations\");",
											"    pm.expect(jsonData.result.data[2].dataTypes[0]).to.eql(\"application/json\");",
											"});",
											"pm.test(\"Check phenotypes-search call\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[3].call).to.eql(\"phenotypes-search\");",
											"    pm.expect(jsonData.result.data[3].dataTypes[0]).to.eql(\"application/json\");",
											"});",
											"pm.test(\"Check programs call\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[4].call).to.eql(\"programs\");",
											"    pm.expect(jsonData.result.data[4].dataTypes[0]).to.eql(\"application/json\");",
											"});",
											"pm.test(\"Check samples/{sampleId} call\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[5].call).to.eql(\"samples/{sampleId}\");",
											"    pm.expect(jsonData.result.data[5].dataTypes[0]).to.eql(\"application/json\");",
											"});",
											"//pm.test(\"Check studies call\", function() {",
											"//    var jsonData = pm.response.json();",
											"//    pm.expect(jsonData.result.data[6].call).to.eql(\"studies\");",
											"//    pm.expect(jsonData.result.data[6].dataTypes[0]).to.eql(\"application/json\");",
											"//});",
											"pm.test(\"Check studies/{studyDbId} call\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[7].call).to.eql(\"studies/{studyDbId}\");",
											"    pm.expect(jsonData.result.data[7].dataTypes[0]).to.eql(\"application/json\");",
											"});",
											"pm.test(\"Check studies/{studyDbId}/table call\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[8].call).to.eql(\"studies/{studyDbId}/table\");",
											"    pm.expect(jsonData.result.data[8].dataTypes[0]).to.eql(\"application/json\");",
											"});",
											"pm.test(\"Check trials call\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[9].call).to.eql(\"trials\");",
											"    pm.expect(jsonData.result.data[9].dataTypes[0]).to.eql(\"application/json\");",
											"});",
											"pm.test(\"Check calls call\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[11].call).to.eql(\"calls\");",
											"    pm.expect(jsonData.result.data[11].dataTypes[0]).to.eql(\"application/json\");",
											"});",
											"pm.test(\"Check germplasm-search call\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[12].call).to.eql(\"germplasm-search\");",
											"    pm.expect(jsonData.result.data[12].dataTypes[0]).to.eql(\"application/json\");",
											"});",
											"pm.test(\"Check germplasm/{germplasmDbId} call\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[13].call).to.eql(\"germplasm/{germplasmDbId}\");",
											"    pm.expect(jsonData.result.data[13].dataTypes[0]).to.eql(\"application/json\");",
											"});",
											"pm.test(\"Check germplasm/{germplasmDbId}/pedigree call\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[14].call).to.eql(\"germplasm/{germplasmDbId}/pedigree\");",
											"    pm.expect(jsonData.result.data[14].dataTypes[0]).to.eql(\"application/json\");",
											"});",
											"pm.test(\"Check germplasm/{germplasmDbId}/progeny call\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[15].call).to.eql(\"germplasm/{germplasmDbId}/progeny\");",
											"    pm.expect(jsonData.result.data[15].dataTypes[0]).to.eql(\"application/json\");",
											"});",
											"pm.test(\"Check search/germplasm call\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[16].call).to.eql(\"search/germplasm\");",
											"    pm.expect(jsonData.result.data[16].dataTypes[0]).to.eql(\"application/json\");",
											"});",
											"",
											"pm.test(\"Check search/germplasm/{searchResultsDbid} call\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[17].call).to.eql(\"search/germplasm/{searchResultsDbid}\");",
											"    pm.expect(jsonData.result.data[17].dataTypes[0]).to.eql(\"application/json\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e1179977-6903-4e22-9d6a-3876f99ca0f0",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/brapi/v1/calls?dataType=application/json",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"brapi",
										"v1",
										"calls"
									],
									"query": [
										{
											"key": "dataType",
											"value": "application/json"
										}
									]
								},
								"description": "GET ​/brapi​/v1​/calls"
							},
							"response": []
						},
						{
							"name": "Verify calls with application/flapjack",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aad216a3-1b5a-4aca-a511-858f06bc7085",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Check if format of samples call is tsv\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.metadata.status[0].message).to.eql(\"not found calls\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e6a9ff4c-5e4c-440e-96c3-9a37d32df8b2",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/brapi/v1/calls?dataType=application/flapjack",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"brapi",
										"v1",
										"calls"
									],
									"query": [
										{
											"key": "dataType",
											"value": "application/flapjack"
										}
									]
								},
								"description": "GET ​/brapi​/v1​/calls"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "GET ​/{crop}/brapi​/v1​/calls",
					"item": [
						{
							"name": "Verify calls with no specified format",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d118bbdc-efb6-4f09-9c53-f15f9d44002b",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Check total call count\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.metadata.pagination.totalCount).to.eql(26);",
											"});",
											"",
											"",
											"pm.test(\"Check a call with json or application/json format\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[2].call).to.eql(\"locations\");",
											"    pm.expect(jsonData.result.data[2].dataTypes[0]).to.eql(\"application/json\");",
											"    pm.expect(jsonData.result.data[2].datatypes[0]).to.eql(\"json\");",
											"});",
											"",
											"pm.test(\"Check a call with tsv or text/tsv\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[8].call).to.eql(\"studies/{studyDbId}/table\");",
											"    pm.expect(jsonData.result.data[8].dataTypes[1]).to.eql(\"text/tsv\");",
											"    pm.expect(jsonData.result.data[8].datatypes[1]).to.eql(\"tsv\");",
											"    ",
											"});",
											"",
											"pm.test(\"Check if format of study table call is csv\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[8].call).to.eql(\"studies/{studyDbId}/table\");",
											"    pm.expect(jsonData.result.data[8].dataTypes[2]).to.eql(\"text/csv\");",
											"    pm.expect(jsonData.result.data[8].datatypes[2]).to.eql(\"csv\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9e276f95-511e-47a4-bf44-90534a54c116",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/calls",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"calls"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify calls with csv format",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "edd8b728-ceca-4d20-ba47-29be597e9fda",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Check a study table call\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0].call).to.eql(\"studies/{studyDbId}/table\");",
											"        pm.expect(jsonData.result.data[0].datatypes[2]).to.eql(\"csv\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "7efaa8e1-20c4-41ae-ab21-2bc206b57a5e",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/calls?dataType=csv",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"calls"
									],
									"query": [
										{
											"key": "dataType",
											"value": "csv"
										}
									]
								},
								"description": "GET ​/brapi​/v1​/calls"
							},
							"response": []
						},
						{
							"name": "Verify calls tsv format",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6679c1f1-e668-45b2-a864-a5ccbf44bf5f",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Check a study table call\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0].call).to.eql(\"studies/{studyDbId}/table\");",
											"});",
											"",
											"pm.test(\"Check if format of samples call is tsv\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0].datatypes[1]).to.eql(\"tsv\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ff6e41d2-63df-411e-9e14-616971007428",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/calls?dataType=tsv",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"calls"
									],
									"query": [
										{
											"key": "dataType",
											"value": "tsv"
										}
									]
								},
								"description": "GET ​/brapi​/v1​/calls"
							},
							"response": []
						},
						{
							"name": "Verify calls with json format",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "94b13301-3ff7-4f9e-9a5b-4a3c1a8cc541",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Check a study table call\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[8].call).to.eql(\"studies/{studyDbId}/table\");",
											"});",
											"",
											"",
											"pm.test(\"Check if format of samples call is tsv\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[8].datatypes[0]).to.eql(\"json\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d0799f76-08c0-4fc7-8d73-9646d78a04ac",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/calls?dataType=json",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"calls"
									],
									"query": [
										{
											"key": "dataType",
											"value": "json"
										}
									]
								},
								"description": "GET ​/brapi​/v1​/calls"
							},
							"response": []
						},
						{
							"name": "Verify calls with  text/csv format",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e17c107a-4def-4767-8201-f1e6248cfc0f",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Check total call count\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.metadata.pagination.totalCount).to.eql(1);",
											"});",
											"",
											"",
											"pm.test(\"Check a study table call\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0].call).to.eql(\"studies/{studyDbId}/table\");",
											"        pm.expect(jsonData.result.data[0].dataTypes[2]).to.eql(\"text/csv\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ca719558-1080-4417-bc8c-90167f2d030f",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/calls?dataType=text/csv",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"calls"
									],
									"query": [
										{
											"key": "dataType",
											"value": "text/csv"
										}
									]
								},
								"description": "GET ​/brapi​/v1​/calls"
							},
							"response": []
						},
						{
							"name": "Verify calls with text/tsv format",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6780d531-5dc3-48c6-ae13-7279620eee30",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Check a study table call\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0].call).to.eql(\"studies/{studyDbId}/table\");",
											"});",
											"",
											"pm.test(\"Check if format of samples call is tsv\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0].dataTypes[1]).to.eql(\"text/tsv\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "86389605-c12a-4d72-bd9c-c34afced76a1",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/calls?dataType=text/tsv",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"calls"
									],
									"query": [
										{
											"key": "dataType",
											"value": "text/tsv"
										}
									]
								},
								"description": "GET ​/brapi​/v1​/calls"
							},
							"response": []
						},
						{
							"name": "Verify calls with application/json format",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "45c2c0cc-b98f-4cc7-ad87-a975242aa970",
										"exec": [
											"pm.test(\"Status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Check total call count\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.metadata.pagination.totalCount).to.eql(26);",
											"});",
											"",
											"",
											"pm.test(\"Check token call\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0].call).to.eql(\"token\");",
											"    pm.expect(jsonData.result.data[0].dataTypes[0]).to.eql(\"application/json\");",
											"});",
											"pm.test(\"Check crops call\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[1].call).to.eql(\"crops\");",
											"    pm.expect(jsonData.result.data[1].dataTypes[0]).to.eql(\"application/json\");",
											"});",
											"pm.test(\"Check locations call\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[2].call).to.eql(\"locations\");",
											"    pm.expect(jsonData.result.data[2].dataTypes[0]).to.eql(\"application/json\");",
											"});",
											"pm.test(\"Check phenotypes-search call\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[3].call).to.eql(\"phenotypes-search\");",
											"    pm.expect(jsonData.result.data[3].dataTypes[0]).to.eql(\"application/json\");",
											"});",
											"pm.test(\"Check programs call\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[4].call).to.eql(\"programs\");",
											"    pm.expect(jsonData.result.data[4].dataTypes[0]).to.eql(\"application/json\");",
											"});",
											"pm.test(\"Check samples/{sampleId} call\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[5].call).to.eql(\"samples/{sampleId}\");",
											"    pm.expect(jsonData.result.data[5].dataTypes[0]).to.eql(\"application/json\");",
											"});",
											"//pm.test(\"Check studies call\", function() {",
											"//    var jsonData = pm.response.json();",
											"//    pm.expect(jsonData.result.data[6].call).to.eql(\"studies\");",
											"//    pm.expect(jsonData.result.data[6].dataTypes[0]).to.eql(\"application/json\");",
											"//});",
											"pm.test(\"Check studies/{studyDbId} call\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[7].call).to.eql(\"studies/{studyDbId}\");",
											"    pm.expect(jsonData.result.data[7].dataTypes[0]).to.eql(\"application/json\");",
											"});",
											"pm.test(\"Check studies/{studyDbId}/table call\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[8].call).to.eql(\"studies/{studyDbId}/table\");",
											"    pm.expect(jsonData.result.data[8].dataTypes[0]).to.eql(\"application/json\");",
											"});",
											"pm.test(\"Check trials call\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[9].call).to.eql(\"trials\");",
											"    pm.expect(jsonData.result.data[9].dataTypes[0]).to.eql(\"application/json\");",
											"});",
											"pm.test(\"Check calls call\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[11].call).to.eql(\"calls\");",
											"    pm.expect(jsonData.result.data[11].dataTypes[0]).to.eql(\"application/json\");",
											"});",
											"pm.test(\"Check germplasm-search call\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[12].call).to.eql(\"germplasm-search\");",
											"    pm.expect(jsonData.result.data[12].dataTypes[0]).to.eql(\"application/json\");",
											"});",
											"pm.test(\"Check germplasm/{germplasmDbId} call\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[13].call).to.eql(\"germplasm/{germplasmDbId}\");",
											"    pm.expect(jsonData.result.data[13].dataTypes[0]).to.eql(\"application/json\");",
											"});",
											"pm.test(\"Check germplasm/{germplasmDbId}/pedigree call\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[14].call).to.eql(\"germplasm/{germplasmDbId}/pedigree\");",
											"    pm.expect(jsonData.result.data[14].dataTypes[0]).to.eql(\"application/json\");",
											"});",
											"pm.test(\"Check germplasm/{germplasmDbId}/progeny call\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[15].call).to.eql(\"germplasm/{germplasmDbId}/progeny\");",
											"    pm.expect(jsonData.result.data[15].dataTypes[0]).to.eql(\"application/json\");",
											"});",
											"pm.test(\"Check search/germplasm call\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[16].call).to.eql(\"search/germplasm\");",
											"    pm.expect(jsonData.result.data[16].dataTypes[0]).to.eql(\"application/json\");",
											"});",
											"",
											"pm.test(\"Check search/germplasm/{searchResultsDbid} call\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[17].call).to.eql(\"search/germplasm/{searchResultsDbid}\");",
											"    pm.expect(jsonData.result.data[17].dataTypes[0]).to.eql(\"application/json\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "db187818-bf97-443a-8bd6-b1df5a05dd27",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/calls?dataType=application/json",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"calls"
									],
									"query": [
										{
											"key": "dataType",
											"value": "application/json"
										}
									]
								},
								"description": "GET ​/brapi​/v1​/calls"
							},
							"response": []
						},
						{
							"name": "Verify calls with application/flapjack",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "669f2e19-591d-4004-9e1d-edf3517ebf53",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Check if format of samples call is tsv\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.metadata.status[0].message).to.eql(\"not found calls\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "558ad211-f4b3-4723-a211-25e918d9ffcc",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/calls?dataType=application/flapjack",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"calls"
									],
									"query": [
										{
											"key": "dataType",
											"value": "application/flapjack"
										}
									]
								},
								"description": "GET ​/brapi​/v1​/calls"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "crop-resource-brapi",
			"item": [
				{
					"name": "GET /brapi/v1/crops",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ffce4994-12ab-41f2-8f6c-5f26fc71a977",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Check testdata crop \", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.result.data[0]).to.eql(\"testdata\");\r",
									"});\r",
									"\r",
									"/**\r",
									"pm.test(\"Check brachiaria crop \", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.result.data[0]).to.eql(\"brachiaria\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check chia crop \", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.result.data[1]).to.eql(\"chia\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check chickpea crop \", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.result.data[2]).to.eql(\"chickpea\");\r",
									"});\r",
									"pm.test(\"Check cowpea crop \", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.result.data[3]).to.eql(\"cowpea\");\r",
									"});\r",
									"pm.test(\"Check flax crop \", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.result.data[4]).to.eql(\"flax\");\r",
									"});\r",
									"pm.test(\"Check groundnut crop \", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.result.data[5]).to.eql(\"groundnut\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check maize crop \", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.result.data[6]).to.eql(\"maize\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check monggo crop \", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.result.data[7]).to.eql(\"monggo\");\r",
									"});\r",
									"pm.test(\"Check mustard crop \", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.result.data[8]).to.eql(\"mustard\");\r",
									"});\r",
									"pm.test(\"Check peanut crop \", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.result.data[9]).to.eql(\"peanut\");\r",
									"});\r",
									"pm.test(\"Check rapeseed crop \", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.result.data[10]).to.eql(\"rapeseed\");\r",
									"});\r",
									"pm.test(\"Check rice crop \", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.result.data[11]).to.eql(\"rice\");\r",
									"});\r",
									"pm.test(\"Check safflower crop \", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.result.data[12]).to.eql(\"safflower\");\r",
									"});\r",
									"pm.test(\"Check sorghum crop \", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.result.data[13]).to.eql(\"sorghum\");\r",
									"});\r",
									"pm.test(\"Check soybean crop \", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.result.data[14]).to.eql(\"soybean\");\r",
									"});\r",
									"pm.test(\"Check sunflower crop \", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.result.data[15]).to.eql(\"sunflower\");\r",
									"});\r",
									"pm.test(\"Check tomato crop \", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.result.data[17]).to.eql(\"tomato\");\r",
									"});\r",
									"pm.test(\"Check wheat crop \", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.result.data[18]).to.eql(\"wheat\");\r",
									"});\r",
									" */"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "3742a0ba-7319-4218-a9a3-3410a8dd961d",
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{masterToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BMSurl}}/brapi/v1/crops",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"brapi",
								"v1",
								"crops"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "germplasm-resource-brapi",
			"item": [
				{
					"name": "GET ​/{crop}​/brapi​/v1​/germplasm",
					"item": [
						{
							"name": "Verify response code and body when entered valid crop only",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4df3aaf3-b453-4a2d-85da-9c4ce38bbd76",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"var data = jsonData.result.data[0];",
											"pm.test(\"Verify returned metadata\", function () {",
											"    pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											"    pm.expect(jsonData.metadata.pagination.pageSize).to.eql(10000);",
											"    pm.expect(jsonData.metadata.pagination.totalCount).to.eql(60);",
											"    pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											"    pm.expect(jsonData.metadata.status).to.eql([]);",
											"    pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"",
											"pm.test(\"Check germplasmDbId \", function () {",
											"    pm.expect(data.germplasmDbId).to.eql(\"21\");",
											"});",
											"",
											"pm.test(\"Check defaultDisplayName \", function () {",
											"    pm.expect(data.defaultDisplayName).to.eql(\"CML1\");",
											"});",
											"pm.test(\"Check accessionNumber \", function () {",
											"    pm.expect(data.accessionNumber).to.eql(\"ACCNO1\");",
											"});",
											"",
											"pm.test(\"Check germplasmName \", function () {",
											"    pm.expect(data.germplasmName).to.eql(\"CML1\");",
											"});",
											"",
											"pm.test(\"Check pedigree\", function () {",
											"    pm.expect(data.pedigree).to.eql(\"CML1\");",
											"});",
											"pm.test(\"Check germplasmSeedSource\", function () {",
											"    pm.expect(data.germplasmSeedSource).to.eql(\"AA001\");",
											"});",
											"",
											"pm.test(\"Check synonyms\", function () {",
											"    pm.expect(data.synonyms).to.eql([]);",
											"});",
											"",
											"pm.test(\"Check commonCropName\", function () {",
											"    pm.expect(data.commonCropName).to.eql(\"testdata\");",
											"});",
											"",
											"pm.test(\"Check instituteCode\", function () {",
											"    pm.expect(data.instituteCode).to.eql(\"PROGM1\");",
											"});",
											"pm.test(\"Check instituteName\", function () {",
											"    pm.expect(data.instituteName).to.eql(\"PROGM1\");",
											"});",
											"",
											"pm.test(\"Check countryOfOriginCode\", function () {",
											"    pm.expect(data.countryOfOriginCode).to.eql(\"ORI_COUN1\");",
											"});",
											"",
											"pm.test(\"Check typeOfGermplasmStorageCode\", function () {",
											"    pm.expect(data.typeOfGermplasmStorageCode).to.eql([]);",
											"});",
											"pm.test(\"Check genus\", function () {",
											"    pm.expect(data.genus).to.eql(\"GENUS1\");",
											"});",
											"pm.test(\"Check species\", function () {",
											"    pm.expect(data.species).to.eql(\"SPNAM1\");",
											"});",
											"pm.test(\"Check taxonIds\", function () {",
											"    pm.expect(data.taxonIds).to.eql([]);",
											"});",
											"pm.test(\"Check speciesAuthority\", function () {",
											"    pm.expect(data.speciesAuthority).to.eql(\"SPAUTH1\");",
											"});",
											"",
											"pm.test(\"Check subtaxa\", function () {",
											"    pm.expect(data.subtaxa).to.eql(\"SUBTAX1\");",
											"});",
											"pm.test(\"Check subtaxaAuthority\", function () {",
											"    pm.expect(data.subtaxaAuthority).to.eql(\"STAUTH1\");",
											"});",
											"pm.test(\"Check donors\", function () {",
											"    pm.expect(data.donors).to.eql([]);",
											"});",
											"pm.test(\"Check acquisitionDate\", function () {",
											"    pm.expect(data.acquisitionDate).to.eql(\"2018-10-25\");",
											"});",
											"pm.test(\"Check breedingMethodDbId\", function () {",
											"    pm.expect(data.breedingMethodDbId).to.eql(\"Accession into genebank\");",
											"});",
											"pm.test(\"Check germplasmGenus\", function () {",
											"    pm.expect(data.germplasmGenus).to.eql(\"GENUS1\");",
											"});",
											"pm.test(\"Check germplasmSpecies\", function () {",
											"    pm.expect(data.germplasmSpecies).to.eql(\"SPNAM1\");",
											"});",
											"pm.test(\"Check seedSource\", function () {",
											"    pm.expect(data.seedSource).to.eql(\"AA001\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d4b96a94-0ec6-4329-9eb6-3f1c38705a04",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/germplasm?page=0&pageSize=10000",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"germplasm"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "10000"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered valid crop and germplasmDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "af0e9211-e6a3-4487-b53c-dcc52907ee2f",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"pm.test(\"Verify returned metadata\", function () {",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(10000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(1);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Check if all data has correct germplasmDbId\", function () {",
											"  var jsonData = pm.response.json();",
											"  var dataLength = jsonData.result.data.length;",
											"",
											"  for (i = 0; i < dataLength ; i++) {",
											"      var data = jsonData.result.data[i];",
											"      pm.expect(data.germplasmDbId).to.eql(pm.environment.get(\"germplasmDbId\"));",
											"  }",
											" ",
											"});    ",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1a671a4c-1612-4928-89bf-7e822f4bf5e0",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/germplasm?page=0&pageSize=10000&germplasmDbId={{germplasmDbId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"germplasm"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "10000"
										},
										{
											"key": "germplasmDbId",
											"value": "{{germplasmDbId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered valid crop and germplasmName",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b6c33d5c-5411-4863-8de2-77a396d6e327",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"pm.test(\"Verify returned metadata\", function () {",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(10000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(22);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Check if all data has correct germplasmName\", function () {",
											"  var dataLength = jsonData.result.data.length;",
											"",
											"  for (i = 0; i < dataLength ; i++) {",
											"      var data = jsonData.result.data[i];",
											"      pm.expect(data.germplasmName).to.include(\"CML1\");",
											"  }",
											" ",
											"});    ",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "cb4208dc-3b62-47fe-8efa-c2cadafa2324",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/germplasm?page=0&pageSize=10000&germplasmName=CML1",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"germplasm"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "10000"
										},
										{
											"key": "germplasmName",
											"value": "CML1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered valid crop and commonCropName",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7f97704c-bd4e-456a-ac8e-d2340fc622e7",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"pm.test(\"Verify returned metadata\", function () {",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(10000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(60);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Check if all data has correct commonCropName\", function () {",
											"  var dataLength = jsonData.result.data.length;",
											"",
											"  for (i = 0; i < dataLength ; i++) {",
											"      var data = jsonData.result.data[i];",
											"      pm.expect(data.commonCropName).to.eql(pm.environment.get(\"crop\"));",
											"  }",
											" ",
											"});    ",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5af3f20e-4685-4654-b3a4-9debf4fd42d8",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/germplasm?page=0&pageSize=10000&commonCropName={{crop}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"germplasm"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "10000"
										},
										{
											"key": "commonCropName",
											"value": "{{crop}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered pageSize greater than max",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "95027df8-e00b-4cb9-ae51-8a9cc2825a53",
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"",
											"pm.test(\"Verify returned error message\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.errors[0].message).to.eql(\"Page size must between 1 and 10000.\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5ac74d27-f954-4135-ad28-b1c0cff48457",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/germplasm?page=0&pageSize=10001",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"germplasm"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "10001"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid page",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "690857a9-b380-42f4-9b67-3efe1a47af5d",
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"",
											"pm.test(\"Verify returned error message\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.errors[0].message).to.eql(\"A total of 1 pages are available, so the page number must between 0 and 1 (exclusive).\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "8d38be26-55d1-42eb-aac3-c1b54814cc79",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/germplasm?page=9999&pageSize=10000",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"germplasm"
									],
									"query": [
										{
											"key": "page",
											"value": "9999"
										},
										{
											"key": "pageSize",
											"value": "10000"
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "GET ​/{crop}​/brapi​/v1​/germplasm​/{germplasmDbId}",
					"item": [
						{
							"name": "Verify response code and body when entered valid germplasmDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "88edc45a-8568-4074-863c-906a2db88711",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Check GID \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.germplasmDbId).to.eql(\"21\");",
											"});",
											"",
											"pm.test(\"Check defaultDisplayName \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.defaultDisplayName).to.eql(\"CML1\");",
											"});",
											"pm.test(\"Check accessionNumber \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.accessionNumber).to.eql(\"ACCNO1\");",
											"});",
											"",
											"pm.test(\"Check germplasmName \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.germplasmName).to.eql(\"CML1\");",
											"});",
											"",
											"pm.test(\"Check pedigree\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.pedigree).to.eql(\"CML1\");",
											"});",
											"  ",
											"pm.test(\"Check germplasmSeedSource\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.germplasmSeedSource).to.eql(\"AA001\");",
											"});",
											"  ",
											"pm.test(\"Check commonCropName\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.commonCropName).to.eql(\"testdata\");",
											"});",
											"",
											"pm.test(\"Check instituteCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.instituteCode).to.eql(\"PROGM1\");",
											"});",
											"pm.test(\"Check instituteName\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.instituteName).to.eql(\"PROGM1\");",
											"});",
											"",
											"",
											"pm.test(\"Check countryOfOriginCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.countryOfOriginCode).to.eql(\"ORI_COUN1\");",
											"});",
											"",
											"pm.test(\"Check genus\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.genus).to.eql(\"GENUS1\");",
											"});",
											"",
											"pm.test(\"Check species\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.species).to.eql(\"SPNAM1\");",
											"});",
											"",
											"pm.test(\"Check speciesAuthority\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.speciesAuthority).to.eql(\"SPAUTH1\");",
											"});",
											"",
											"pm.test(\"Check subtaxa\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.subtaxa).to.eql(\"SUBTAX1\");",
											"});",
											"",
											"pm.test(\"Check acquisitionDate\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.acquisitionDate).to.eql(\"2018-10-25\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b63a2d84-7363-4def-90f1-92943a3a95c5",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/germplasm/{{germplasmDbId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"germplasm",
										"{{germplasmDbId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered non-existing germplasmDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9d0304e3-b385-4417-a697-e42dd1f6c82d",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"pm.test(\"Response message is no germplasm found \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.metadata.status[0].message).to.eql(\"no germplasm found\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2631b7f8-053a-45ef-9fbe-26ba7ae64342",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/germplasm/{{nonExistingGID}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"germplasm",
										"{{nonExistingGID}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "GET ​/{crop}​/brapi​/v1​/germplasm​/{germplasmDbId}​/pedigree",
					"item": [
						{
							"name": "Verify response code and body when entered GID that was created via crossing,includeSiblings true",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d729ac1c-8aed-47d0-8232-8e7ec42d5981",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Verify returned metadata\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(0);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Check germplasmDbId \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.germplasmDbId).to.eql(41);",
											"});",
											"pm.test(\"Check defaultDisplayName \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.defaultDisplayName).to.eql(\"IB1\");",
											"    pm.expect(jsonData.result.pedigree).to.eql(\"CML1/CML6\");",
											"    pm.expect(jsonData.result.crossingPlan).to.eql(\"C2W|Single cross|GEN\");",
											"    pm.expect(jsonData.result.crossingYear).to.eql(2018);",
											"    pm.expect(jsonData.result.familyCode).to.equal(null);",
											"    pm.expect(jsonData.result.parent1DbId).to.eql(21);",
											"    pm.expect(jsonData.result.parent1Name).to.eql(\"CML1\");",
											"    pm.expect(jsonData.result.parent1Type).to.eql(\"FEMALE\");",
											"    pm.expect(jsonData.result.parent2DbId).to.eql(26);",
											"    pm.expect(jsonData.result.parent2Name).to.eql(\"CML6\");",
											"    pm.expect(jsonData.result.parent2Type).to.eql(\"MALE\");",
											"    pm.expect(jsonData.result.siblings[0].germplasmDbId).to.eql(61);",
											"    pm.expect(jsonData.result.siblings[0].defaultDisplayName).to.eql(\"CML1\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d63e7c35-5031-45a8-9e4d-15f48d6d44f7",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/germplasm/{{crossGID}}/pedigree?includeSiblings=true",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"germplasm",
										"{{crossGID}}",
										"pedigree"
									],
									"query": [
										{
											"key": "includeSiblings",
											"value": "true"
										}
									]
								},
								"description": "GET /{crop}​/brapi​/v1​/germplasm​/{germplasmDbId}​/pedigree"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered GID that was created via crossing,includeSiblings false",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "362ebc3d-bffd-4b1d-aedd-1384a1edb984",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Verify returned metadata\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(0);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Check germplasmDbId \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.germplasmDbId).to.eql(41);",
											"});",
											"pm.test(\"Check defaultDisplayName \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.defaultDisplayName).to.eql(\"IB1\");",
											"    pm.expect(jsonData.result.pedigree).to.eql(\"CML1/CML6\");",
											"    pm.expect(jsonData.result.crossingPlan).to.eql(\"C2W|Single cross|GEN\");",
											"    pm.expect(jsonData.result.crossingYear).to.eql(2018);",
											"    pm.expect(jsonData.result.familyCode).to.equal(null);",
											"    pm.expect(jsonData.result.parent1DbId).to.eql(21);",
											"    pm.expect(jsonData.result.parent1Name).to.eql(\"CML1\");",
											"    pm.expect(jsonData.result.parent1Type).to.eql(\"FEMALE\");",
											"    pm.expect(jsonData.result.parent2DbId).to.eql(26);",
											"    pm.expect(jsonData.result.parent2Name).to.eql(\"CML6\");",
											"    pm.expect(jsonData.result.parent2Type).to.eql(\"MALE\");",
											"    pm.expect(jsonData.result.siblings).to.eql(null);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d81c3257-3c8e-4d38-90d9-2a24dc718492",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/germplasm/{{crossGID}}/pedigree?includeSiblings=false",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"germplasm",
										"{{crossGID}}",
										"pedigree"
									],
									"query": [
										{
											"key": "includeSiblings",
											"value": "false"
										}
									]
								},
								"description": "GET /{crop}​/brapi​/v1​/germplasm​/{germplasmDbId}​/pedigree"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered GID that was created via advancing",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8340ed2b-64a5-471a-837a-582d25d9c461",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Verify returned metadata\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(0);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Check germplasmDbId \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.germplasmDbId).to.eql(parseInt(pm.environment.get(\"advancedGID\")));",
											"});",
											"pm.test(\"Check defaultDisplayName \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.defaultDisplayName).to.eql(\"CML1\");",
											"    pm.expect(jsonData.result.pedigree).to.eql(\"CML1\");",
											"    pm.expect(jsonData.result.crossingPlan).to.eql(\"AGB1|Accession into genebank|MAN\");",
											"    pm.expect(jsonData.result.crossingYear).to.eql(2020);",
											"    pm.expect(jsonData.result.familyCode).to.equal(null);",
											"    pm.expect(jsonData.result.parent1DbId).to.eql(21);",
											"    pm.expect(jsonData.result.parent1Name).to.eql(\"CML1\");",
											"    pm.expect(jsonData.result.parent1Type).to.eql(\"POPULATION\");",
											"    pm.expect(jsonData.result.parent2DbId).to.eql(21);",
											"    pm.expect(jsonData.result.parent2Name).to.eql(\"CML1\");",
											"    pm.expect(jsonData.result.parent2Type).to.eql(\"SELF\");",
											"    pm.expect(jsonData.result.siblings).to.eql([]);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2ee27790-ed51-44fe-a9ef-846f33d22fa7",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/germplasm/{{advancedGID}}/pedigree?includeSiblings=true",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"germplasm",
										"{{advancedGID}}",
										"pedigree"
									],
									"query": [
										{
											"key": "includeSiblings",
											"value": "true"
										}
									]
								},
								"description": "GET /{crop}​/brapi​/v1​/germplasm​/{germplasmDbId}​/pedigree"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered GID that was via import (no parent)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4c964edf-6607-4875-ac35-eded821a8858",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Verify returned metadata\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(0);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Check germplasmDbId \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.germplasmDbId).to.eql(parseInt(pm.environment.get(\"noParentGID\")));",
											"});",
											"pm.test(\"Check defaultDisplayName \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.defaultDisplayName).to.eql(\"CML1\");",
											"    pm.expect(jsonData.result.pedigree).to.eql(\"CML1\");",
											"    pm.expect(jsonData.result.crossingPlan).to.eql(\"AGB1|Accession into genebank|MAN\");",
											"    pm.expect(jsonData.result.crossingYear).to.eql(2018);",
											"    pm.expect(jsonData.result.familyCode).to.equal(null);",
											"    pm.expect(jsonData.result.parent1DbId).to.eql(null);",
											"    pm.expect(jsonData.result.parent1Name).to.eql(null);",
											"    pm.expect(jsonData.result.parent1Type).to.eql(null);",
											"    pm.expect(jsonData.result.parent2DbId).to.eql(null);",
											"    pm.expect(jsonData.result.parent2Name).to.eql(null);",
											"    pm.expect(jsonData.result.parent2Type).to.eql(null);",
											"    pm.expect(jsonData.result.siblings).to.eql(null);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d21ea8c6-3eeb-491a-947f-9c43c5d37ea6",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/germplasm/{{noParentGID}}/pedigree?includeSiblings=false",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"germplasm",
										"{{noParentGID}}",
										"pedigree"
									],
									"query": [
										{
											"key": "includeSiblings",
											"value": "false"
										}
									]
								},
								"description": "GET /{crop}​/brapi​/v1​/germplasm​/{germplasmDbId}​/pedigree"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered non-existing germplasmDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e2137c51-441e-4462-99dd-2e00088734a6",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"pm.test(\"Response message is no germplasm found \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.metadata.status[0].message).to.eql(\"no germplasm found\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a9713d63-1c50-43b0-b984-e1cd78c806f8",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/germplasm/{{nonExistingGID}}/pedigree",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"germplasm",
										"{{nonExistingGID}}",
										"pedigree"
									]
								},
								"description": "GET /{crop}​/brapi​/v1​/germplasm​/{germplasmDbId}​/pedigree"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered valid studyDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6e5e9d93-4fc7-4431-be88-fc8cf6a6d11e",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(20);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"",
											"pm.test(\"Verify returned data\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.result.data[0].germplasmDbId).to.eql(\"21\");",
											" pm.expect(jsonData.result.data[0].defaultDisplayName).to.eql(\"CML1\");",
											" pm.expect(jsonData.result.data[0].germplasmName).to.eql(\"CML1\");",
											" pm.expect(jsonData.result.data[0].pedigree).to.eql(\"CML1\");",
											" pm.expect(jsonData.result.data[0].synonyms).to.eql([]);",
											" pm.expect(jsonData.result.data[0].commonCropName).to.eql(\"testdata\");",
											" pm.expect(jsonData.result.data[0].instituteCode).to.eql(\"PROGM1\");",
											" pm.expect(jsonData.result.data[0].instituteName).to.eql(\"PROGM1\");",
											" pm.expect(jsonData.result.data[0].countryOfOriginCode).to.eql(\"ORI_COUN1\");",
											" pm.expect(jsonData.result.data[0].typeOfGermplasmStorageCode).to.eql([]);",
											" //pm.expect(jsonData.result.data[0].genus).to.eql(\"GENUS1\");",
											" //pm.expect(jsonData.result.data[0].species).to.eql(\"SPNAM1\");",
											" pm.expect(jsonData.result.data[0].taxonIds).to.eql([]);",
											" pm.expect(jsonData.result.data[0].speciesAuthority).to.eql(\"SPAUTH1\");",
											" pm.expect(jsonData.result.data[0].subtaxa).to.eql(\"SUBTAX1\");",
											" pm.expect(jsonData.result.data[0].subtaxaAuthority).to.eql(\"STAUTH1\");",
											" pm.expect(jsonData.result.data[0].donors).to.eql([]);",
											" pm.expect(jsonData.result.data[0].acquisitionDate).to.eql(\"2018-10-25\");",
											" pm.expect(jsonData.result.data[0].breedingMethodDbId).to.eql(\"Accession into genebank\");",
											" pm.expect(jsonData.result.data[0].germplasmGenus).to.eql(\"GENUS1\");",
											" pm.expect(jsonData.result.data[0].germplasmSpecies).to.eql(\"SPNAM1\");",
											" pm.expect(jsonData.result.data[0].seedSource).to.eql(\"AA001\");",
											" pm.expect(jsonData.result.data[0].entryNumber).to.eql(\"1\");",
											"    ",
											"});",
											"",
											"pm.test(\"Verify returned studyDbId\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.studyDbId).to.eql(pm.environment.get(\"studyDbId\"));",
											"});",
											"pm.test(\"Verify returned trialName\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.trialName).to.eql(\"Randomized Trial 20180003\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "7decec6f-7421-45bd-a020-8f1433b38a17",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/studies/{{studyDbId}}/germplasm",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"studies",
										"{{studyDbId}}",
										"germplasm"
									]
								},
								"description": "GET /{crop}/brapi/v1/studies/{studyDbId}"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "GET ​/{crop}​/brapi​/v1​/germplasm​/{germplasmDbId}​/progeny",
					"item": [
						{
							"name": "Verify response code and body when entered valid germplasmDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d8991029-90d7-46aa-b63c-b622394e43b6",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(0);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"pm.test(\"Check germplasmDbId \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.germplasmDbId).to.eql(21);",
											"});",
											"pm.test(\"Check defaultDisplayName \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.defaultDisplayName).to.eql(\"CML1\");",
											"});",
											"pm.test(\"Check progeny details \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.progeny[0].germplasmDbId).to.eql(41);",
											"    pm.expect(jsonData.result.progeny[0].defaultDisplayName).to.eql(\"IB1\");",
											"   pm.expect(jsonData.result.progeny[0].parentType).to.eql(\"FEMALE\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ed0798ab-e87d-4540-9ed5-cab63fee541f",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/germplasm/{{germplasmDbId}}/progeny",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"germplasm",
										"{{germplasmDbId}}",
										"progeny"
									]
								},
								"description": "GET ​/{crop}​/brapi​/v1​/germplasm​/{germplasmDbId}​/progeny"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered non-existing germplasmDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f3b6f2d0-b53f-4d3a-b5e9-06f1c62657f9",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"pm.test(\"Response message is no germplasm found \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.metadata.status[0].message).to.eql(\"no germplasm found\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "302578aa-4ce4-43e0-9563-8fb5ec390228",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/germplasm/{{nonExistingGID}}/progeny",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"germplasm",
										"{{nonExistingGID}}",
										"progeny"
									]
								},
								"description": "GET ​/{crop}​/brapi​/v1​/germplasm​/{germplasmDbId}​/progeny"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "POST /{crop}/brapi/v1/search/germplasm",
					"item": [
						{
							"name": "Post search by germplasmDbIds",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b7f737b7-893e-4e16-9856-b6bf74057224",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"    var jsonData = pm.response.json();",
											"    pm.environment.unset(\"searchResultDbId_germplasmDbIds\");",
											"    pm.environment.set(\"searchResultDbId_germplasmDbIds\", jsonData.result.searchResultDbId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "cb0e531c-54c6-4533-a45e-24d174725a08",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"germplasmDbIds\": [\r\n    \"21\"\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/search/germplasm",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"search",
										"germplasm"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when searched by germplasmSpecies",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7f5b98d4-1e4f-4db0-88a8-1380b68b73a9",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"    var jsonData = pm.response.json();",
											"    pm.environment.unset(\"searchResultDbId_germplasmSpecies\");",
											"    pm.environment.set(\"searchResultDbId_germplasmSpecies\", jsonData.result.searchResultDbId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2acae41b-7b49-48f6-9799-fd9b91daf654",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"germplasmDbIds\": [\r\n    \"21\"\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/search/germplasm",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"search",
										"germplasm"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when searched by germplasmGenus",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "47e3bfeb-ba0a-42de-bb6e-0d99472ccaa2",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"    var jsonData = pm.response.json();",
											"    pm.environment.unset(\"searchResultDbId_germplasmGenus\");",
											"    pm.environment.set(\"searchResultDbId_germplasmGenus\", jsonData.result.searchResultDbId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0bd591b8-8457-433c-acbe-b1bc23714b4e",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"germplasmDbIds\": [\r\n    \"21\"\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/search/germplasm",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"search",
										"germplasm"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when searched by germplasmNames",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "341d152c-c8ae-408b-865a-8834902c6ecc",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"    var jsonData = pm.response.json();",
											"    pm.environment.unset(\"searchResultDbId_germplasmNames\");",
											"    pm.environment.set(\"searchResultDbId_germplasmNames\", jsonData.result.searchResultDbId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "8756e3a8-b776-4726-a455-efa57715ea64",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"germplasmDbIds\": [\r\n    \"21\"\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/search/germplasm",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"search",
										"germplasm"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when searched by accessionNumbers",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b3fdcf12-0e04-4450-94f5-4781421d3496",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"    var jsonData = pm.response.json();",
											"    pm.environment.unset(\"searchResultDbId_accessionNumbers\");",
											"    pm.environment.set(\"searchResultDbId_accessionNumbers\", jsonData.result.searchResultDbId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "179bddb2-9f4e-4fc7-9bf0-a31024d952d1",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"accessionNumbers\": [\r\n    \"ACCNO1\"\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/search/germplasm",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"search",
										"germplasm"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when searched by commonCropNames",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "db7a93a1-981e-4ef3-89f3-0af09d302131",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"    var jsonData = pm.response.json();",
											"    pm.environment.unset(\"ssearchResultDbId_commonCropNames\");",
											"    pm.environment.set(\"searchResultDbId_commonCropNames\", jsonData.result.searchResultDbId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "6453ed34-dded-49ad-b5ab-af25ffcc6d2f",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"commonCropName\": [\r\n    \"testdata\"\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/search/germplasm",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"search",
										"germplasm"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when searched by searchResultDbId_preferredName",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fc604346-627b-4d7b-8c85-9201555732fe",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"    var jsonData = pm.response.json();",
											"    pm.environment.unset(\"searchResultDbId_preferredName\");",
											"    pm.environment.set(\"searchResultDbId_preferredName\", jsonData.result.searchResultDbId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "50438eb1-d043-4a01-b09d-4e383bf47592",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"germplasmDbIds\": [\r\n    \"21\"\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/search/germplasm",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"search",
										"germplasm"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "GET ​/{crop}​/brapi​/v1​/search​/germplasm​/{germplasmDbId}​/attributes",
					"item": [
						{
							"name": "Verify response code and body when entered valid germplasmDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "eafb473a-c072-436e-977b-8cf3de37fafc",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Verify returned metadata\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(7);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"pm.test(\"Check attribute details \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0].attributeCode).to.eql(\"SPNAM\");",
											"    pm.expect(jsonData.result.data[0].attributeDbId).to.eql(2011);",
											"    pm.expect(jsonData.result.data[0].attributeName).to.eql(\"Additional details about germplasm\");",
											"    pm.expect(jsonData.result.data[0].determinedDate).to.eql(20181025);",
											"    pm.expect(jsonData.result.data[0].value).to.eql(\"SPNAM1\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "16806483-31d8-4e12-8e4d-9d1c1ea74399",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/germplasm/{{germplasmDbId}}/attributes",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"germplasm",
										"{{germplasmDbId}}",
										"attributes"
									]
								},
								"description": "GET /{crop}​/brapi​/v1​/search​/germplasm​/{germplasmDbId}​/attributes"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered valid germplasmDbId and attributeDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0a8f2391-72d6-4d55-93ca-65dc4a0c43fa",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Verify returned metadata\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(1);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"pm.test(\"Check attribute details \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0].attributeCode).to.eql(\"ORI_COUN\");",
											"    pm.expect(jsonData.result.data[0].attributeDbId).to.eql(224);",
											"    pm.expect(jsonData.result.data[0].attributeName).to.eql(\"Country of Origin\");",
											"    pm.expect(jsonData.result.data[0].determinedDate).to.eql(20181025);",
											"    pm.expect(jsonData.result.data[0].value).to.eql(\"ORI_COUN1\");",
											"});",
											"",
											"pm.test(\"Check returned germplasmDbId \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.germplasmDbId).to.eql(pm.environment.get(\"germplasmDbId\"));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e4a19579-5eee-49c4-a1ff-b99d6fb26316",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/germplasm/{{germplasmDbId}}/attributes?attributeDbIds=224",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"germplasm",
										"{{germplasmDbId}}",
										"attributes"
									],
									"query": [
										{
											"key": "attributeDbIds",
											"value": "224"
										}
									]
								},
								"description": "GET /{crop}​/brapi​/v1​/search​/germplasm​/{germplasmDbId}​/attributes"
							},
							"response": []
						},
						{
							"name": "Enter valid germplasmDbId and attributeDbId that is not associated to the germplasm",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "23335e48-d297-4781-91a5-6c51202eae0e",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"pm.test(\"Verify returned error\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.errors[0].message).to.eql(\"Invalid attribute identifier\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "eda16beb-0095-44a9-8169-1e99bdc6a37f",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/germplasm/{{germplasmDbId}}/attributes?attributeDbIds=2131",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"germplasm",
										"{{germplasmDbId}}",
										"attributes"
									],
									"query": [
										{
											"key": "attributeDbIds",
											"value": "2131"
										}
									]
								},
								"description": "GET /{crop}​/brapi​/v1​/search​/germplasm​/{germplasmDbId}​/attributes"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered non-existing germplasmDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c0689f58-fd14-43ff-b6b4-c079b4374521",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"pm.test(\"Verify returned error\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.errors[0].message).to.eql(\"Invalid germplasm identifier\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "4943df15-c26c-4783-a6b4-a5f4c9f3d68e",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/germplasm/{{nonExistingGID}}/attributes",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"germplasm",
										"{{nonExistingGID}}",
										"attributes"
									]
								},
								"description": "GET /{crop}​/brapi​/v1​/search​/germplasm​/{germplasmDbId}​/attributes"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered valid germplasmDbId and attributeDbId Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "439fe6e0-41e6-4234-8145-be1d9e40e35a",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Verify returned metadata\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(10000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(1);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"pm.test(\"Check attribute details \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0].attributeCode).to.eql(\"ORI_COUN\");",
											"    pm.expect(jsonData.result.data[0].attributeDbId).to.eql(224);",
											"    pm.expect(jsonData.result.data[0].attributeName).to.eql(\"Country of Origin\");",
											"    pm.expect(jsonData.result.data[0].determinedDate).to.eql(20181025);",
											"    pm.expect(jsonData.result.data[0].value).to.eql(\"ORI_COUN1\");",
											"});",
											"",
											"pm.test(\"Check returned germplasmDbId \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.germplasmDbId).to.eql(pm.environment.get(\"germplasmDbId\"));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2d94b727-8881-4d1b-934d-1135ea1e1b6a",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/germplasm/{{germplasmDbId}}/attributes?attributeDbIds=224&page=0&pageSize=10000",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"germplasm",
										"{{germplasmDbId}}",
										"attributes"
									],
									"query": [
										{
											"key": "attributeDbIds",
											"value": "224"
										},
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "10000"
										}
									]
								},
								"description": "GET /{crop}​/brapi​/v1​/search​/germplasm​/{germplasmDbId}​/attributes"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered pageSize greater than max",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "07d97498-1a2d-4603-b759-33ec74a3af30",
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"",
											"pm.test(\"Verify returned error message\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.errors[0].message).to.eql(\"Page size must between 1 and 10000.\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "cf884ce3-3b07-4d1d-9f58-494bc179d658",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/germplasm/{{germplasmDbId}}/attributes?attributeDbIds=224&page=0&pageSize=10001",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"germplasm",
										"{{germplasmDbId}}",
										"attributes"
									],
									"query": [
										{
											"key": "attributeDbIds",
											"value": "224"
										},
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "10001"
										}
									]
								},
								"description": "GET /{crop}​/brapi​/v1​/search​/germplasm​/{germplasmDbId}​/attributes"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "GET /{crop}/brapi/v1/search/germplasm/{searchResultsDbid}",
					"item": [
						{
							"name": "Verify results when entered searchResultsDbid that filters by preferredName",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "4cb4b8ef-d4d8-42d6-8bc2-3abecb6b4fd2",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "8c1a7a50-f4c2-4147-9c44-efb6f2152ca5",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"var jsonData = pm.response.json();\r",
											"var data = jsonData.result.data[0];\r",
											"pm.test(\"Verify returned metadata\", function () {\r",
											"    pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);\r",
											"    pm.expect(jsonData.metadata.pagination.pageSize).to.eql(100);\r",
											"    pm.expect(jsonData.metadata.pagination.totalCount).to.eql(1);\r",
											"    pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);\r",
											"    pm.expect(jsonData.metadata.status).to.eql([]);\r",
											"    pm.expect(jsonData.metadata.datafiles).to.eql([]);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Check germplasmDbId \", function () {\r",
											"    pm.expect(data.germplasmDbId).to.eql(\"21\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check defaultDisplayName \", function () {\r",
											"    pm.expect(data.defaultDisplayName).to.eql(\"CML1\");\r",
											"});\r",
											"pm.test(\"Check accessionNumber \", function () {\r",
											"    pm.expect(data.accessionNumber).to.eql(\"ACCNO1\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check germplasmName \", function () {\r",
											"    pm.expect(data.germplasmName).to.eql(\"CML1\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check pedigree\", function () {\r",
											"    pm.expect(data.pedigree).to.eql(\"CML1\");\r",
											"});\r",
											"pm.test(\"Check germplasmSeedSource\", function () {\r",
											"    pm.expect(data.germplasmSeedSource).to.eql(\"AA001\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check synonyms\", function () {\r",
											"    pm.expect(data.synonyms).to.eql([]);\r",
											"});\r",
											"\r",
											"pm.test(\"Check commonCropName\", function () {\r",
											"    pm.expect(data.commonCropName).to.eql(\"testdata\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check instituteCode\", function () {\r",
											"    pm.expect(data.instituteCode).to.eql(\"PROGM1\");\r",
											"});\r",
											"pm.test(\"Check instituteName\", function () {\r",
											"    pm.expect(data.instituteName).to.eql(\"PROGM1\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check countryOfOriginCode\", function () {\r",
											"    pm.expect(data.countryOfOriginCode).to.eql(\"ORI_COUN1\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check typeOfGermplasmStorageCode\", function () {\r",
											"    pm.expect(data.typeOfGermplasmStorageCode).to.eql([]);\r",
											"});\r",
											"pm.test(\"Check genus\", function () {\r",
											"    pm.expect(data.genus).to.eql(\"GENUS1\");\r",
											"});\r",
											"pm.test(\"Check species\", function () {\r",
											"    pm.expect(data.species).to.eql(\"SPNAM1\");\r",
											"});\r",
											"pm.test(\"Check taxonIds\", function () {\r",
											"    pm.expect(data.taxonIds).to.eql([]);\r",
											"});\r",
											"pm.test(\"Check speciesAuthority\", function () {\r",
											"    pm.expect(data.speciesAuthority).to.eql(\"SPAUTH1\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check subtaxa\", function () {\r",
											"    pm.expect(data.subtaxa).to.eql(\"SUBTAX1\");\r",
											"});\r",
											"pm.test(\"Check subtaxaAuthority\", function () {\r",
											"    pm.expect(data.subtaxaAuthority).to.eql(\"STAUTH1\");\r",
											"});\r",
											"pm.test(\"Check donors\", function () {\r",
											"    pm.expect(data.donors).to.eql([]);\r",
											"});\r",
											"pm.test(\"Check acquisitionDate\", function () {\r",
											"    pm.expect(data.acquisitionDate).to.eql(\"2018-10-25\");\r",
											"});\r",
											"pm.test(\"Check breedingMethodDbId\", function () {\r",
											"    pm.expect(data.breedingMethodDbId).to.eql(\"Accession into genebank\");\r",
											"});\r",
											"pm.test(\"Check germplasmGenus\", function () {\r",
											"    pm.expect(data.germplasmGenus).to.eql(\"GENUS1\");\r",
											"});\r",
											"pm.test(\"Check germplasmSpecies\", function () {\r",
											"    pm.expect(data.germplasmSpecies).to.eql(\"SPNAM1\");\r",
											"});\r",
											"pm.test(\"Check seedSource\", function () {\r",
											"    pm.expect(data.seedSource).to.eql(\"AA001\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check observations\", function () {\r",
											"    pm.expect(jsonData.result.observations).to.eql([]);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/search/germplasm/{{searchResultDbId_preferredName}}?page=0&pageSize=100",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"search",
										"germplasm",
										"{{searchResultDbId_preferredName}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "100"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/search/germplasm/{searchResultsDbid}"
							},
							"response": []
						},
						{
							"name": "Verify results when entered searchResultsDbid that filters by germplasmSpecies",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "04b7882c-ab34-4034-95a1-ed1eb6e14101",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "fae1ba06-3ab1-4e9e-8c8c-a63186c1e477",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"var jsonData = pm.response.json();\r",
											"var data = jsonData.result.data[0];\r",
											"pm.test(\"Verify returned metadata\", function () {\r",
											"    pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);\r",
											"    pm.expect(jsonData.metadata.pagination.pageSize).to.eql(100);\r",
											"    pm.expect(jsonData.metadata.pagination.totalCount).to.eql(1);\r",
											"    pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);\r",
											"    pm.expect(jsonData.metadata.status).to.eql([]);\r",
											"    pm.expect(jsonData.metadata.datafiles).to.eql([]);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Check germplasmDbId \", function () {\r",
											"    pm.expect(data.germplasmDbId).to.eql(\"21\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check defaultDisplayName \", function () {\r",
											"    pm.expect(data.defaultDisplayName).to.eql(\"CML1\");\r",
											"});\r",
											"pm.test(\"Check accessionNumber \", function () {\r",
											"    pm.expect(data.accessionNumber).to.eql(\"ACCNO1\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check germplasmName \", function () {\r",
											"    pm.expect(data.germplasmName).to.eql(\"CML1\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check pedigree\", function () {\r",
											"    pm.expect(data.pedigree).to.eql(\"CML1\");\r",
											"});\r",
											"pm.test(\"Check germplasmSeedSource\", function () {\r",
											"    pm.expect(data.germplasmSeedSource).to.eql(\"AA001\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check synonyms\", function () {\r",
											"    pm.expect(data.synonyms).to.eql([]);\r",
											"});\r",
											"\r",
											"pm.test(\"Check commonCropName\", function () {\r",
											"    pm.expect(data.commonCropName).to.eql(\"testdata\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check instituteCode\", function () {\r",
											"    pm.expect(data.instituteCode).to.eql(\"PROGM1\");\r",
											"});\r",
											"pm.test(\"Check instituteName\", function () {\r",
											"    pm.expect(data.instituteName).to.eql(\"PROGM1\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check countryOfOriginCode\", function () {\r",
											"    pm.expect(data.countryOfOriginCode).to.eql(\"ORI_COUN1\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check typeOfGermplasmStorageCode\", function () {\r",
											"    pm.expect(data.typeOfGermplasmStorageCode).to.eql([]);\r",
											"});\r",
											"pm.test(\"Check genus\", function () {\r",
											"    pm.expect(data.genus).to.eql(\"GENUS1\");\r",
											"});\r",
											"pm.test(\"Check species\", function () {\r",
											"    pm.expect(data.species).to.eql(\"SPNAM1\");\r",
											"});\r",
											"pm.test(\"Check taxonIds\", function () {\r",
											"    pm.expect(data.taxonIds).to.eql([]);\r",
											"});\r",
											"pm.test(\"Check speciesAuthority\", function () {\r",
											"    pm.expect(data.speciesAuthority).to.eql(\"SPAUTH1\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check subtaxa\", function () {\r",
											"    pm.expect(data.subtaxa).to.eql(\"SUBTAX1\");\r",
											"});\r",
											"pm.test(\"Check subtaxaAuthority\", function () {\r",
											"    pm.expect(data.subtaxaAuthority).to.eql(\"STAUTH1\");\r",
											"});\r",
											"pm.test(\"Check donors\", function () {\r",
											"    pm.expect(data.donors).to.eql([]);\r",
											"});\r",
											"pm.test(\"Check acquisitionDate\", function () {\r",
											"    pm.expect(data.acquisitionDate).to.eql(\"2018-10-25\");\r",
											"});\r",
											"pm.test(\"Check breedingMethodDbId\", function () {\r",
											"    pm.expect(data.breedingMethodDbId).to.eql(\"Accession into genebank\");\r",
											"});\r",
											"pm.test(\"Check germplasmGenus\", function () {\r",
											"    pm.expect(data.germplasmGenus).to.eql(\"GENUS1\");\r",
											"});\r",
											"pm.test(\"Check germplasmSpecies\", function () {\r",
											"    pm.expect(data.germplasmSpecies).to.eql(\"SPNAM1\");\r",
											"});\r",
											"pm.test(\"Check seedSource\", function () {\r",
											"    pm.expect(data.seedSource).to.eql(\"AA001\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check observations\", function () {\r",
											"    pm.expect(jsonData.result.observations).to.eql([]);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/search/germplasm/{{searchResultDbId_germplasmSpecies}}?page=0&pageSize=100",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"search",
										"germplasm",
										"{{searchResultDbId_germplasmSpecies}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "100"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/search/germplasm/{searchResultsDbid}"
							},
							"response": []
						},
						{
							"name": "Verify results when entered searchResultsDbid that filters by accessionNumbers",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "5d5dc6b8-fda0-41ff-933b-927a8e7a7933",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "5651b663-6dc3-4049-87bd-47cc8e6c3afe",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"var jsonData = pm.response.json();\r",
											"var data = jsonData.result.data[0];\r",
											"pm.test(\"Verify returned metadata\", function () {\r",
											"    pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);\r",
											"    pm.expect(jsonData.metadata.pagination.pageSize).to.eql(100);\r",
											"    pm.expect(jsonData.metadata.pagination.totalCount).to.eql(1);\r",
											"    pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);\r",
											"    pm.expect(jsonData.metadata.status).to.eql([]);\r",
											"    pm.expect(jsonData.metadata.datafiles).to.eql([]);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Check germplasmDbId \", function () {\r",
											"    pm.expect(data.germplasmDbId).to.eql(\"21\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check defaultDisplayName \", function () {\r",
											"    pm.expect(data.defaultDisplayName).to.eql(\"CML1\");\r",
											"});\r",
											"pm.test(\"Check accessionNumber \", function () {\r",
											"    pm.expect(data.accessionNumber).to.eql(\"ACCNO1\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check germplasmName \", function () {\r",
											"    pm.expect(data.germplasmName).to.eql(\"CML1\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check pedigree\", function () {\r",
											"    pm.expect(data.pedigree).to.eql(\"CML1\");\r",
											"});\r",
											"pm.test(\"Check germplasmSeedSource\", function () {\r",
											"    pm.expect(data.germplasmSeedSource).to.eql(\"AA001\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check synonyms\", function () {\r",
											"    pm.expect(data.synonyms).to.eql([]);\r",
											"});\r",
											"\r",
											"pm.test(\"Check commonCropName\", function () {\r",
											"    pm.expect(data.commonCropName).to.eql(\"testdata\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check instituteCode\", function () {\r",
											"    pm.expect(data.instituteCode).to.eql(\"PROGM1\");\r",
											"});\r",
											"pm.test(\"Check instituteName\", function () {\r",
											"    pm.expect(data.instituteName).to.eql(\"PROGM1\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check countryOfOriginCode\", function () {\r",
											"    pm.expect(data.countryOfOriginCode).to.eql(\"ORI_COUN1\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check typeOfGermplasmStorageCode\", function () {\r",
											"    pm.expect(data.typeOfGermplasmStorageCode).to.eql([]);\r",
											"});\r",
											"pm.test(\"Check genus\", function () {\r",
											"    pm.expect(data.genus).to.eql(\"GENUS1\");\r",
											"});\r",
											"pm.test(\"Check species\", function () {\r",
											"    pm.expect(data.species).to.eql(\"SPNAM1\");\r",
											"});\r",
											"pm.test(\"Check taxonIds\", function () {\r",
											"    pm.expect(data.taxonIds).to.eql([]);\r",
											"});\r",
											"pm.test(\"Check speciesAuthority\", function () {\r",
											"    pm.expect(data.speciesAuthority).to.eql(\"SPAUTH1\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check subtaxa\", function () {\r",
											"    pm.expect(data.subtaxa).to.eql(\"SUBTAX1\");\r",
											"});\r",
											"pm.test(\"Check subtaxaAuthority\", function () {\r",
											"    pm.expect(data.subtaxaAuthority).to.eql(\"STAUTH1\");\r",
											"});\r",
											"pm.test(\"Check donors\", function () {\r",
											"    pm.expect(data.donors).to.eql([]);\r",
											"});\r",
											"pm.test(\"Check acquisitionDate\", function () {\r",
											"    pm.expect(data.acquisitionDate).to.eql(\"2018-10-25\");\r",
											"});\r",
											"pm.test(\"Check breedingMethodDbId\", function () {\r",
											"    pm.expect(data.breedingMethodDbId).to.eql(\"Accession into genebank\");\r",
											"});\r",
											"pm.test(\"Check germplasmGenus\", function () {\r",
											"    pm.expect(data.germplasmGenus).to.eql(\"GENUS1\");\r",
											"});\r",
											"pm.test(\"Check germplasmSpecies\", function () {\r",
											"    pm.expect(data.germplasmSpecies).to.eql(\"SPNAM1\");\r",
											"});\r",
											"pm.test(\"Check seedSource\", function () {\r",
											"    pm.expect(data.seedSource).to.eql(\"AA001\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check observations\", function () {\r",
											"    pm.expect(jsonData.result.observations).to.eql([]);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/search/germplasm/{{searchResultDbId_accessionNumbers}}?page=0&pageSize=100",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"search",
										"germplasm",
										"{{searchResultDbId_accessionNumbers}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "100"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/search/germplasm/{searchResultsDbid}"
							},
							"response": []
						},
						{
							"name": "Verify results when entered searchResultsDbid that filters by germplasmDbIds",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "18989b3a-d176-4510-8c97-52e44985e2e8",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "dd9767a0-8827-43ed-bf66-66e926cdaea9",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"var jsonData = pm.response.json();\r",
											"var data = jsonData.result.data[0];\r",
											"pm.test(\"Verify returned metadata\", function () {\r",
											"    pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);\r",
											"    pm.expect(jsonData.metadata.pagination.pageSize).to.eql(100);\r",
											"    pm.expect(jsonData.metadata.pagination.totalCount).to.eql(1);\r",
											"    pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);\r",
											"    pm.expect(jsonData.metadata.status).to.eql([]);\r",
											"    pm.expect(jsonData.metadata.datafiles).to.eql([]);\r",
											"});\r",
											"\r",
											"pm.test(\"Check germplasmDbId \", function () {\r",
											"    pm.expect(data.germplasmDbId).to.eql(\"21\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check defaultDisplayName \", function () {\r",
											"    pm.expect(data.defaultDisplayName).to.eql(\"CML1\");\r",
											"});\r",
											"pm.test(\"Check accessionNumber \", function () {\r",
											"    pm.expect(data.accessionNumber).to.eql(\"ACCNO1\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check germplasmName \", function () {\r",
											"    pm.expect(data.germplasmName).to.eql(\"CML1\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check pedigree\", function () {\r",
											"    pm.expect(data.pedigree).to.eql(\"CML1\");\r",
											"});\r",
											"pm.test(\"Check germplasmSeedSource\", function () {\r",
											"    pm.expect(data.germplasmSeedSource).to.eql(\"AA001\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check synonyms\", function () {\r",
											"    pm.expect(data.synonyms).to.eql([]);\r",
											"});\r",
											"\r",
											"pm.test(\"Check commonCropName\", function () {\r",
											"    pm.expect(data.commonCropName).to.eql(\"testdata\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check instituteCode\", function () {\r",
											"    pm.expect(data.instituteCode).to.eql(\"PROGM1\");\r",
											"});\r",
											"pm.test(\"Check instituteName\", function () {\r",
											"    pm.expect(data.instituteName).to.eql(\"PROGM1\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check countryOfOriginCode\", function () {\r",
											"    pm.expect(data.countryOfOriginCode).to.eql(\"ORI_COUN1\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check typeOfGermplasmStorageCode\", function () {\r",
											"    pm.expect(data.typeOfGermplasmStorageCode).to.eql([]);\r",
											"});\r",
											"pm.test(\"Check genus\", function () {\r",
											"    pm.expect(data.genus).to.eql(\"GENUS1\");\r",
											"});\r",
											"pm.test(\"Check species\", function () {\r",
											"    pm.expect(data.species).to.eql(\"SPNAM1\");\r",
											"});\r",
											"pm.test(\"Check taxonIds\", function () {\r",
											"    pm.expect(data.taxonIds).to.eql([]);\r",
											"});\r",
											"pm.test(\"Check speciesAuthority\", function () {\r",
											"    pm.expect(data.speciesAuthority).to.eql(\"SPAUTH1\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check subtaxa\", function () {\r",
											"    pm.expect(data.subtaxa).to.eql(\"SUBTAX1\");\r",
											"});\r",
											"pm.test(\"Check subtaxaAuthority\", function () {\r",
											"    pm.expect(data.subtaxaAuthority).to.eql(\"STAUTH1\");\r",
											"});\r",
											"pm.test(\"Check donors\", function () {\r",
											"    pm.expect(data.donors).to.eql([]);\r",
											"});\r",
											"pm.test(\"Check acquisitionDate\", function () {\r",
											"    pm.expect(data.acquisitionDate).to.eql(\"2018-10-25\");\r",
											"});\r",
											"pm.test(\"Check breedingMethodDbId\", function () {\r",
											"    pm.expect(data.breedingMethodDbId).to.eql(\"Accession into genebank\");\r",
											"});\r",
											"pm.test(\"Check germplasmGenus\", function () {\r",
											"    pm.expect(data.germplasmGenus).to.eql(\"GENUS1\");\r",
											"});\r",
											"pm.test(\"Check germplasmSpecies\", function () {\r",
											"    pm.expect(data.germplasmSpecies).to.eql(\"SPNAM1\");\r",
											"});\r",
											"pm.test(\"Check seedSource\", function () {\r",
											"    pm.expect(data.seedSource).to.eql(\"AA001\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check observations\", function () {\r",
											"    pm.expect(jsonData.result.observations).to.eql([]);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/search/germplasm/{{searchResultDbId_germplasmDbIds}}?page=0&pageSize=100",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"search",
										"germplasm",
										"{{searchResultDbId_germplasmDbIds}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "100"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/search/germplasm/{searchResultsDbid}"
							},
							"response": []
						},
						{
							"name": "Verify results when entered searchResultsDbid that filters by commonCropNames",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "58924b01-d3af-4753-b679-2aae6b98dc8c",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "10e56c6c-f9f0-4a55-8ca9-0db3037e1cc9",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"var jsonData = pm.response.json();\r",
											"var data = jsonData.result.data[0];\r",
											"pm.test(\"Verify returned metadata\", function () {\r",
											"    pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);\r",
											"    pm.expect(jsonData.metadata.pagination.pageSize).to.eql(100);\r",
											"    pm.expect(jsonData.metadata.pagination.totalCount).to.eql(60);\r",
											"    pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);\r",
											"    pm.expect(jsonData.metadata.status).to.eql([]);\r",
											"    pm.expect(jsonData.metadata.datafiles).to.eql([]);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Check germplasmDbId \", function () {\r",
											"    pm.expect(data.germplasmDbId).to.eql(\"21\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check defaultDisplayName \", function () {\r",
											"    pm.expect(data.defaultDisplayName).to.eql(\"CML1\");\r",
											"});\r",
											"pm.test(\"Check accessionNumber \", function () {\r",
											"    pm.expect(data.accessionNumber).to.eql(\"ACCNO1\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check germplasmName \", function () {\r",
											"    pm.expect(data.germplasmName).to.eql(\"CML1\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check pedigree\", function () {\r",
											"    pm.expect(data.pedigree).to.eql(\"CML1\");\r",
											"});\r",
											"pm.test(\"Check germplasmSeedSource\", function () {\r",
											"    pm.expect(data.germplasmSeedSource).to.eql(\"AA001\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check synonyms\", function () {\r",
											"    pm.expect(data.synonyms).to.eql([]);\r",
											"});\r",
											"\r",
											"pm.test(\"Check commonCropName\", function () {\r",
											"    pm.expect(data.commonCropName).to.eql(\"testdata\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check instituteCode\", function () {\r",
											"    pm.expect(data.instituteCode).to.eql(\"PROGM1\");\r",
											"});\r",
											"pm.test(\"Check instituteName\", function () {\r",
											"    pm.expect(data.instituteName).to.eql(\"PROGM1\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check countryOfOriginCode\", function () {\r",
											"    pm.expect(data.countryOfOriginCode).to.eql(\"ORI_COUN1\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check typeOfGermplasmStorageCode\", function () {\r",
											"    pm.expect(data.typeOfGermplasmStorageCode).to.eql([]);\r",
											"});\r",
											"pm.test(\"Check genus\", function () {\r",
											"    pm.expect(data.genus).to.eql(\"GENUS1\");\r",
											"});\r",
											"pm.test(\"Check species\", function () {\r",
											"    pm.expect(data.species).to.eql(\"SPNAM1\");\r",
											"});\r",
											"pm.test(\"Check taxonIds\", function () {\r",
											"    pm.expect(data.taxonIds).to.eql([]);\r",
											"});\r",
											"pm.test(\"Check speciesAuthority\", function () {\r",
											"    pm.expect(data.speciesAuthority).to.eql(\"SPAUTH1\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check subtaxa\", function () {\r",
											"    pm.expect(data.subtaxa).to.eql(\"SUBTAX1\");\r",
											"});\r",
											"pm.test(\"Check subtaxaAuthority\", function () {\r",
											"    pm.expect(data.subtaxaAuthority).to.eql(\"STAUTH1\");\r",
											"});\r",
											"pm.test(\"Check donors\", function () {\r",
											"    pm.expect(data.donors).to.eql([]);\r",
											"});\r",
											"pm.test(\"Check acquisitionDate\", function () {\r",
											"    pm.expect(data.acquisitionDate).to.eql(\"2018-10-25\");\r",
											"});\r",
											"pm.test(\"Check breedingMethodDbId\", function () {\r",
											"    pm.expect(data.breedingMethodDbId).to.eql(\"Accession into genebank\");\r",
											"});\r",
											"pm.test(\"Check germplasmGenus\", function () {\r",
											"    pm.expect(data.germplasmGenus).to.eql(\"GENUS1\");\r",
											"});\r",
											"pm.test(\"Check germplasmSpecies\", function () {\r",
											"    pm.expect(data.germplasmSpecies).to.eql(\"SPNAM1\");\r",
											"});\r",
											"pm.test(\"Check seedSource\", function () {\r",
											"    pm.expect(data.seedSource).to.eql(\"AA001\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check observations\", function () {\r",
											"    pm.expect(jsonData.result.observations).to.eql([]);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/search/germplasm/{{searchResultDbId_commonCropNames}}?page=0&pageSize=100",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"search",
										"germplasm",
										"{{searchResultDbId_commonCropNames}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "100"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/search/germplasm/{searchResultsDbid}"
							},
							"response": []
						},
						{
							"name": "Verify results when entered searchResultsDbid that filters by germplasmGenus",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "79381e23-3324-4b5a-a93d-b2b35ffdf8f1",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "351fb2b0-208a-4886-99de-d11790417167",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"var jsonData = pm.response.json();\r",
											"var data = jsonData.result.data[0];\r",
											"pm.test(\"Verify returned metadata\", function () {\r",
											"    pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);\r",
											"    pm.expect(jsonData.metadata.pagination.pageSize).to.eql(100);\r",
											"    pm.expect(jsonData.metadata.pagination.totalCount).to.eql(1);\r",
											"    pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);\r",
											"    pm.expect(jsonData.metadata.status).to.eql([]);\r",
											"    pm.expect(jsonData.metadata.datafiles).to.eql([]);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Check germplasmDbId \", function () {\r",
											"    pm.expect(data.germplasmDbId).to.eql(\"21\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check defaultDisplayName \", function () {\r",
											"    pm.expect(data.defaultDisplayName).to.eql(\"CML1\");\r",
											"});\r",
											"pm.test(\"Check accessionNumber \", function () {\r",
											"    pm.expect(data.accessionNumber).to.eql(\"ACCNO1\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check germplasmName \", function () {\r",
											"    pm.expect(data.germplasmName).to.eql(\"CML1\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check pedigree\", function () {\r",
											"    pm.expect(data.pedigree).to.eql(\"CML1\");\r",
											"});\r",
											"pm.test(\"Check germplasmSeedSource\", function () {\r",
											"    pm.expect(data.germplasmSeedSource).to.eql(\"AA001\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check synonyms\", function () {\r",
											"    pm.expect(data.synonyms).to.eql([]);\r",
											"});\r",
											"\r",
											"pm.test(\"Check commonCropName\", function () {\r",
											"    pm.expect(data.commonCropName).to.eql(\"testdata\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check instituteCode\", function () {\r",
											"    pm.expect(data.instituteCode).to.eql(\"PROGM1\");\r",
											"});\r",
											"pm.test(\"Check instituteName\", function () {\r",
											"    pm.expect(data.instituteName).to.eql(\"PROGM1\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check countryOfOriginCode\", function () {\r",
											"    pm.expect(data.countryOfOriginCode).to.eql(\"ORI_COUN1\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check typeOfGermplasmStorageCode\", function () {\r",
											"    pm.expect(data.typeOfGermplasmStorageCode).to.eql([]);\r",
											"});\r",
											"pm.test(\"Check genus\", function () {\r",
											"    pm.expect(data.genus).to.eql(\"GENUS1\");\r",
											"});\r",
											"pm.test(\"Check species\", function () {\r",
											"    pm.expect(data.species).to.eql(\"SPNAM1\");\r",
											"});\r",
											"pm.test(\"Check taxonIds\", function () {\r",
											"    pm.expect(data.taxonIds).to.eql([]);\r",
											"});\r",
											"pm.test(\"Check speciesAuthority\", function () {\r",
											"    pm.expect(data.speciesAuthority).to.eql(\"SPAUTH1\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check subtaxa\", function () {\r",
											"    pm.expect(data.subtaxa).to.eql(\"SUBTAX1\");\r",
											"});\r",
											"pm.test(\"Check subtaxaAuthority\", function () {\r",
											"    pm.expect(data.subtaxaAuthority).to.eql(\"STAUTH1\");\r",
											"});\r",
											"pm.test(\"Check donors\", function () {\r",
											"    pm.expect(data.donors).to.eql([]);\r",
											"});\r",
											"pm.test(\"Check acquisitionDate\", function () {\r",
											"    pm.expect(data.acquisitionDate).to.eql(\"2018-10-25\");\r",
											"});\r",
											"pm.test(\"Check breedingMethodDbId\", function () {\r",
											"    pm.expect(data.breedingMethodDbId).to.eql(\"Accession into genebank\");\r",
											"});\r",
											"pm.test(\"Check germplasmGenus\", function () {\r",
											"    pm.expect(data.germplasmGenus).to.eql(\"GENUS1\");\r",
											"});\r",
											"pm.test(\"Check germplasmSpecies\", function () {\r",
											"    pm.expect(data.germplasmSpecies).to.eql(\"SPNAM1\");\r",
											"});\r",
											"pm.test(\"Check seedSource\", function () {\r",
											"    pm.expect(data.seedSource).to.eql(\"AA001\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check observations\", function () {\r",
											"    pm.expect(jsonData.result.observations).to.eql([]);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/search/germplasm/{{searchResultDbId_germplasmGenus}}?page=0&pageSize=100",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"search",
										"germplasm",
										"{{searchResultDbId_germplasmGenus}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "100"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/search/germplasm/{searchResultsDbid}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered non-existing searchResultsDbid",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "e1e5631f-8d74-46c3-9a68-d3cfe1daedec",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "da22eaf8-2bec-44a5-a8d4-2f1c48c59fad",
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"pm.test(\"Check error message\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.metadata.status[0].message).to.eql(\"no search request found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/search/germplasm/99999?page=0&pageSize=100",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"search",
										"germplasm",
										"99999"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "100"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/search/germplasm/{searchResultsDbid}"
							},
							"response": []
						},
						{
							"name": "Verify results when entered searchResultsDbid that filters by germplasmNames",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "6a8720c8-e28b-4fd3-b92c-5ad85211e170",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "af2e1875-cb96-4aee-8bb9-713bef0507e7",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"var jsonData = pm.response.json();\r",
											"var data = jsonData.result.data[0];\r",
											"pm.test(\"Verify returned metadata\", function () {\r",
											"    pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);\r",
											"    pm.expect(jsonData.metadata.pagination.pageSize).to.eql(100);\r",
											"    pm.expect(jsonData.metadata.pagination.totalCount).to.eql(1);\r",
											"    pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);\r",
											"    pm.expect(jsonData.metadata.status).to.eql([]);\r",
											"    pm.expect(jsonData.metadata.datafiles).to.eql([]);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Check germplasmDbId \", function () {\r",
											"    pm.expect(data.germplasmDbId).to.eql(\"21\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check defaultDisplayName \", function () {\r",
											"    pm.expect(data.defaultDisplayName).to.eql(\"CML1\");\r",
											"});\r",
											"pm.test(\"Check accessionNumber \", function () {\r",
											"    pm.expect(data.accessionNumber).to.eql(\"ACCNO1\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check germplasmName \", function () {\r",
											"    pm.expect(data.germplasmName).to.eql(\"CML1\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check pedigree\", function () {\r",
											"    pm.expect(data.pedigree).to.eql(\"CML1\");\r",
											"});\r",
											"pm.test(\"Check germplasmSeedSource\", function () {\r",
											"    pm.expect(data.germplasmSeedSource).to.eql(\"AA001\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check synonyms\", function () {\r",
											"    pm.expect(data.synonyms).to.eql([]);\r",
											"});\r",
											"\r",
											"pm.test(\"Check commonCropName\", function () {\r",
											"    pm.expect(data.commonCropName).to.eql(\"testdata\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check instituteCode\", function () {\r",
											"    pm.expect(data.instituteCode).to.eql(\"PROGM1\");\r",
											"});\r",
											"pm.test(\"Check instituteName\", function () {\r",
											"    pm.expect(data.instituteName).to.eql(\"PROGM1\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check countryOfOriginCode\", function () {\r",
											"    pm.expect(data.countryOfOriginCode).to.eql(\"ORI_COUN1\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check typeOfGermplasmStorageCode\", function () {\r",
											"    pm.expect(data.typeOfGermplasmStorageCode).to.eql([]);\r",
											"});\r",
											"pm.test(\"Check genus\", function () {\r",
											"    pm.expect(data.genus).to.eql(\"GENUS1\");\r",
											"});\r",
											"pm.test(\"Check species\", function () {\r",
											"    pm.expect(data.species).to.eql(\"SPNAM1\");\r",
											"});\r",
											"pm.test(\"Check taxonIds\", function () {\r",
											"    pm.expect(data.taxonIds).to.eql([]);\r",
											"});\r",
											"pm.test(\"Check speciesAuthority\", function () {\r",
											"    pm.expect(data.speciesAuthority).to.eql(\"SPAUTH1\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check subtaxa\", function () {\r",
											"    pm.expect(data.subtaxa).to.eql(\"SUBTAX1\");\r",
											"});\r",
											"pm.test(\"Check subtaxaAuthority\", function () {\r",
											"    pm.expect(data.subtaxaAuthority).to.eql(\"STAUTH1\");\r",
											"});\r",
											"pm.test(\"Check donors\", function () {\r",
											"    pm.expect(data.donors).to.eql([]);\r",
											"});\r",
											"pm.test(\"Check acquisitionDate\", function () {\r",
											"    pm.expect(data.acquisitionDate).to.eql(\"2018-10-25\");\r",
											"});\r",
											"pm.test(\"Check breedingMethodDbId\", function () {\r",
											"    pm.expect(data.breedingMethodDbId).to.eql(\"Accession into genebank\");\r",
											"});\r",
											"pm.test(\"Check germplasmGenus\", function () {\r",
											"    pm.expect(data.germplasmGenus).to.eql(\"GENUS1\");\r",
											"});\r",
											"pm.test(\"Check germplasmSpecies\", function () {\r",
											"    pm.expect(data.germplasmSpecies).to.eql(\"SPNAM1\");\r",
											"});\r",
											"pm.test(\"Check seedSource\", function () {\r",
											"    pm.expect(data.seedSource).to.eql(\"AA001\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check observations\", function () {\r",
											"    pm.expect(jsonData.result.observations).to.eql([]);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/search/germplasm/{{searchResultDbId_germplasmNames}}?page=0&pageSize=100",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"search",
										"germplasm",
										"{{searchResultDbId_germplasmNames}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "100"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/search/germplasm/{searchResultsDbid}"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "GET ​/{crop}​/brapi​/v1​/studies​/{studyDbId}​/germplasm",
					"item": [
						{
							"name": "Verify response code and body when entered valid studyDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "692500a2-cd82-4ff9-9a83-cbbb78411fa6",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"var data = jsonData.result.data[0];",
											"pm.test(\"Verify returned metadata\", function () {",
											"",
											"    pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											"    pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											"    pm.expect(jsonData.metadata.pagination.totalCount).to.eql(20);",
											"    pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											"    pm.expect(jsonData.metadata.status).to.eql([]);",
											"    pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"//Verify returned data",
											"pm.test(\"Check germplasmDbId\", function () {",
											"    pm.expect(data.germplasmDbId).to.eql(\"21\");",
											"});",
											"",
											"pm.test(\"Check defaultDisplayName\", function () {",
											"    pm.expect(data.defaultDisplayName).to.eql(\"CML1\");",
											"});",
											"pm.test(\"Check germplasmName\", function () {",
											"    pm.expect(data.germplasmName).to.eql(\"CML1\");",
											"});",
											"pm.test(\"Check pedigree\", function () {",
											"    pm.expect(data.pedigree).to.eql(\"CML1\");",
											"});",
											"pm.test(\"Check germplasmSeedSource\", function () {",
											"    pm.expect(data.germplasmSeedSource).to.eql(\"AA001\");",
											"});",
											"pm.test(\"Check synonyms\", function () {",
											"    pm.expect(data.synonyms).to.eql([]);",
											"});",
											"pm.test(\"Check commonCropName\", function () {",
											"    pm.expect(data.commonCropName).to.eql(\"testdata\");",
											"});",
											"pm.test(\"Check instituteCode\", function () {",
											"    pm.expect(data.instituteCode).to.eql(\"PROGM1\");",
											"});",
											"pm.test(\"Check instituteName\", function () {",
											"    pm.expect(data.instituteName).to.eql(\"PROGM1\");",
											"});",
											"pm.test(\"Check countryOfOriginCode\", function () {",
											"    pm.expect(data.countryOfOriginCode).to.eql(\"ORI_COUN1\");",
											"});",
											"pm.test(\"Check typeOfGermplasmStorageCode\", function () {",
											"    pm.expect(data.typeOfGermplasmStorageCode).to.eql([]);",
											"});",
											"pm.test(\"Check genus\", function () {",
											"    pm.expect(data.genus).to.eql(\"GENUS1\");",
											"});",
											"pm.test(\"Check species\", function () {",
											"    pm.expect(data.species).to.eql(\"SPNAM1\");",
											"});",
											"pm.test(\"Check taxonIds\", function () {",
											"    pm.expect(data.taxonIds).to.eql([]);",
											"});",
											"pm.test(\"Check speciesAuthority\", function () {",
											"    pm.expect(data.speciesAuthority).to.eql(\"SPAUTH1\");",
											"});",
											"pm.test(\"Check subtaxa\", function () {",
											"    pm.expect(data.subtaxa).to.eql(\"SUBTAX1\");",
											"});",
											"pm.test(\"Check subtaxaAuthority\", function () {",
											"    pm.expect(data.subtaxaAuthority).to.eql(\"STAUTH1\");",
											"});",
											"pm.test(\"Check donors\", function () {",
											"    pm.expect(data.donors).to.eql([]);",
											"});",
											"pm.test(\"Check acquisitionDate\", function () {",
											"    pm.expect(data.acquisitionDate).to.eql(\"2018-10-25\");",
											"});",
											"pm.test(\"Check breedingMethodDbId\", function () {",
											"    pm.expect(data.breedingMethodDbId).to.eql(\"Accession into genebank\");",
											"});",
											"pm.test(\"Check germplasmGenus\", function () {",
											"    pm.expect(data.germplasmGenus).to.eql(\"GENUS1\");",
											"});",
											"pm.test(\"Check germplasmSpecies\", function () {",
											"    pm.expect(data.germplasmSpecies).to.eql(\"SPNAM1\");",
											"});",
											"pm.test(\"Check seedSource\", function () {",
											"    pm.expect(data.seedSource).to.eql(\"AA001\");",
											"});",
											"pm.test(\"Check entryNumber\", function () {",
											"    pm.expect(data.entryNumber).to.eql(\"1\");",
											"});",
											"",
											"",
											"pm.test(\"Verify returned studyDbId\", function () {",
											"    pm.expect(jsonData.result.studyDbId).to.eql(pm.environment.get(\"studyDbId\"));",
											"});",
											"pm.test(\"Verify returned trialName\", function () {",
											"    pm.expect(jsonData.result.trialName).to.eql(\"Randomized Trial 20180003\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d54ec146-d4da-42b4-8e8c-81a4b50250c7",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/studies/{{studyDbId}}/germplasm",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"studies",
										"{{studyDbId}}",
										"germplasm"
									]
								},
								"description": "GET /{crop}/brapi/v1/studies/{studyDbId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered non-existing studyDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e61ee8c3-b92d-48e6-a71c-81fd0d5f6d4f",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Verify returned error\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"StudyDbId does not exist\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "7a6a1a8a-5459-47b8-a63d-2c4749b7b001",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/studies/{{non_existing_study_id}}/germplasm",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"studies",
										"{{non_existing_study_id}}",
										"germplasm"
									]
								},
								"description": "GET /{crop}/brapi/v1/studies/{studyDbId}"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "GET ​/{crop}​/brapi​/v1​/germplasm-search",
					"item": [
						{
							"name": "GET /{crop}/brapi/v1/germplasm-search using germplasmName",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "79ff72e0-3210-484d-b977-e64906b72dc8",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Check GID \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0].germplasmDbId).to.eql(\"21\");",
											"});",
											"",
											"pm.test(\"Check defaultDisplayName \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0].defaultDisplayName).to.eql(\"CML1\");",
											"});",
											"pm.test(\"Check accessionNumber \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0].accessionNumber).to.eql(\"ACCNO1\");",
											"});",
											"",
											"pm.test(\"Check germplasmName \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0].germplasmName).to.eql(\"CML1\");",
											"});",
											"",
											"pm.test(\"Check pedigree\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0].pedigree).to.eql(\"CML1\");",
											"});",
											"  ",
											"pm.test(\"Check germplasmSeedSource\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0].germplasmSeedSource).to.eql(\"AA001\");",
											"});",
											"  ",
											"pm.test(\"Check commonCropName\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0].commonCropName).to.eql(\"testdata\");",
											"});",
											"",
											"pm.test(\"Check instituteCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0].instituteCode).to.eql(\"PROGM1\");",
											"});",
											"pm.test(\"Check instituteName\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0].instituteName).to.eql(\"PROGM1\");",
											"});",
											"",
											"pm.test(\"Check countryOfOriginCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0].countryOfOriginCode).to.eql(\"ORI_COUN1\");",
											"});",
											"",
											"pm.test(\"Check genus\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0].genus).to.eql(\"GENUS1\");",
											"});",
											"",
											"pm.test(\"Check species\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0].species).to.eql(\"SPNAM1\");",
											"});",
											"",
											"pm.test(\"Check speciesAuthority\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0].speciesAuthority).to.eql(\"SPAUTH1\");",
											"});",
											"",
											"pm.test(\"Check subtaxa\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0].subtaxa).to.eql(\"SUBTAX1\");",
											"});",
											"",
											"pm.test(\"Check acquisitionDate\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0].acquisitionDate).to.eql(\"2018-10-25\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b3230a35-6527-4842-9153-664fe065c364",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/germplasm-search?germplasmName=CML1",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"germplasm-search"
									],
									"query": [
										{
											"key": "germplasmName",
											"value": "CML1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET /{crop}/brapi/v1/germplasm-search using germplasmDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a5d6956d-3a97-43d3-a724-b58f1c52f267",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Check GID \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0].germplasmDbId).to.eql(\"21\");",
											"});",
											"",
											"pm.test(\"Check defaultDisplayName \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0].defaultDisplayName).to.eql(\"CML1\");",
											"});",
											"pm.test(\"Check accessionNumber \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0].accessionNumber).to.eql(\"ACCNO1\");",
											"});",
											"",
											"pm.test(\"Check germplasmName \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0].germplasmName).to.eql(\"CML1\");",
											"});",
											"",
											"pm.test(\"Check pedigree\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0].pedigree).to.eql(\"CML1\");",
											"});",
											"  ",
											"pm.test(\"Check germplasmSeedSource\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0].germplasmSeedSource).to.eql(\"AA001\");",
											"});",
											"  ",
											"pm.test(\"Check commonCropName\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0].commonCropName).to.eql(\"testdata\");",
											"});",
											"",
											"pm.test(\"Check instituteCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0].instituteCode).to.eql(\"PROGM1\");",
											"});",
											"pm.test(\"Check instituteName\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0].instituteName).to.eql(\"PROGM1\");",
											"});",
											"",
											"pm.test(\"Check countryOfOriginCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0].countryOfOriginCode).to.eql(\"ORI_COUN1\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "6e108bd4-ebf5-41f0-a2b2-d666a536e69a",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/germplasm-search?germplasmDbId=21",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"germplasm-search"
									],
									"query": [
										{
											"key": "germplasmDbId",
											"value": "21"
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "location-resource-brapi",
			"item": [
				{
					"name": "Verify response code and body when entered valid crop",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "07c222dd-0076-43df-b3ed-116e39535ee9",
								"exec": [
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Check total results\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.metadata.pagination.totalCount).to.eql(5069);",
									"});",
									"",
									"pm.test(\"Check a country location\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.result.data[1].name).to.eql(\"Afghanistan\") &&",
									"    pm.expect(jsonData.result.data[1].locationType).to.eql(\"Country\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "daea80aa-29ea-48e7-aa90-346cd6147a22",
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{masterToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BMSurl}}/{{crop}}/brapi/v1/locations",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"{{crop}}",
								"brapi",
								"v1",
								"locations"
							]
						},
						"description": "GET ​/{crop}​/brapi​/v1​/locations"
					},
					"response": []
				},
				{
					"name": "Verify response code and body when entered locationType",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "68bcd607-0c2e-4cf9-b400-32cc2c6b3b0e",
								"exec": [
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check location type of first result item\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.result.data[0].locationType).to.eql(\"Breeding Location\")",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "536d1e57-965a-43a8-b6a6-6ab23acdb383",
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{masterToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BMSurl}}/{{crop}}/brapi/v1/locations?locationType=breeding location",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"{{crop}}",
								"brapi",
								"v1",
								"locations"
							],
							"query": [
								{
									"key": "locationType",
									"value": "breeding location"
								}
							]
						},
						"description": "GET ​/{crop}​/brapi​/v1​/locations"
					},
					"response": []
				},
				{
					"name": "Verify response code and body when entered pagination details",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "825f98fc-8668-4cfb-9ad2-938f3fcf3476",
								"exec": [
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check current page\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0)",
									"});",
									"",
									"pm.test(\"Check pageSize\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.metadata.pagination.pageSize).to.eql(10000)",
									"});",
									"",
									"pm.test(\"Check total results\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.metadata.pagination.totalCount).to.eql(5069);",
									"});",
									"",
									"pm.test(\"Check a country location\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.result.data[1].name).to.eql(\"Afghanistan\") &&",
									"    pm.expect(jsonData.result.data[1].locationType).to.eql(\"Country\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "57717a9f-67ea-4a3f-948b-fedb81e2be8e",
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{masterToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BMSurl}}/{{crop}}/brapi/v1/locations?page=0&pageSize=10000",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"{{crop}}",
								"brapi",
								"v1",
								"locations"
							],
							"query": [
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "pageSize",
									"value": "10000"
								}
							]
						},
						"description": "GET ​/{crop}​/brapi​/v1​/locations"
					},
					"response": []
				},
				{
					"name": "Verify response code and body when entered pageSize greater than max",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8b3a9e4d-ee98-4bfc-8274-19d4292c3add",
								"exec": [
									"pm.test(\"Status code is 500\", function () {",
									"    pm.response.to.have.status(500);",
									"});",
									"",
									"pm.test(\"Verify returned error message\", function () {",
									"    var jsonData = pm.response.json();",
									" pm.expect(jsonData.errors[0].message).to.eql(\"Page size must between 1 and 10000.\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "5603e4a0-f24e-4ebc-b9ef-dba59264e9e7",
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{masterToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BMSurl}}/{{crop}}/brapi/v1/locations?page=0&pageSize=10001",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"{{crop}}",
								"brapi",
								"v1",
								"locations"
							],
							"query": [
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "pageSize",
									"value": "10001"
								}
							]
						},
						"description": "GET ​/{crop}​/brapi​/v1​/locations"
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "program-resource-brapi",
			"item": [
				{
					"name": "GET ​/{crop}​/brapi​/v1​/programs",
					"item": [
						{
							"name": "Verify response code and body when entered programName",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "249cff76-5cd6-40d2-9a62-85d79076b7c1",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(1);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"pm.test(\"Check programDbId\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0].programDbId).to.eql(\"c9e335d2-3057-4958-a43e-e38cf61d09ca\");",
											"});",
											"pm.test(\"Check programName\",function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0].name).to.eql(\"API Program\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5e159d80-4e1f-4f9b-b6c7-5b65d6a2fa71",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/programs?programName=API Program",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"programs"
									],
									"query": [
										{
											"key": "programName",
											"value": "API Program"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v1​/programs"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered non-existing programName",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9920bd68-fa22-4cec-afdc-bd998be9b0b5",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"",
											"pm.test(\"Verify returned error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.metadata.status[0].message).to.eql(\"program not found.\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b44ce42c-1641-409d-818c-6e676b149426",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/programs?programName=non-existing program name",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"programs"
									],
									"query": [
										{
											"key": "programName",
											"value": "non-existing program name"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v1​/programs"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered crop name only",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "003309e4-60e5-424a-8a30-63cffff7df39",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(1);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"pm.test(\"Check programDbId\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0].programDbId).to.eql(\"c9e335d2-3057-4958-a43e-e38cf61d09ca\");",
											"});",
											"pm.test(\"Check programName\",function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0].name).to.eql(\"API Program\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "6fbb2c83-5279-4a59-98be-0d5427ac0cb7",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/programs",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"programs"
									]
								},
								"description": "GET ​/{crop}​/brapi​/v1​/programs"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered pagination details",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8c6c3c3d-a459-4acd-92d7-06655075bb69",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(10000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(1);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"pm.test(\"Check programDbId\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0].programDbId).to.eql(\"c9e335d2-3057-4958-a43e-e38cf61d09ca\");",
											"});",
											"pm.test(\"Check programName\",function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0].name).to.eql(\"API Program\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "87196efa-cef9-4506-9d5c-11eee24757d9",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/programs?page=0&pageSize=10000",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"programs"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "10000"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v1​/programs"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered pageSize greater than maximum",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "82f6c339-7806-4443-abd6-4fd72b934244",
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"",
											"pm.test(\"Verify returned error message\",function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Page size must between 1 and 10000.\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a31ff534-5020-4fbd-975e-237d54115d21",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/programs?page=0&pageSize=10001",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"programs"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "10001"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v1​/programs"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "sample-resource-brapi",
			"item": [
				{
					"name": "Verify response code and body when entered valid sampleId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "864315b1-802e-412b-8fc8-0a858af19972",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Verify returned sampleId\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.result.sampleId).to.eql(pm.environment.get(\"study_sampleId\"));",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "bab0f21e-18a8-4e77-89d0-6b55ec955645",
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{masterToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BMSurl}}/{{crop}}/brapi/v1/samples/{{study_sampleId}}",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"{{crop}}",
								"brapi",
								"v1",
								"samples",
								"{{study_sampleId}}"
							]
						},
						"description": "GET /{crop}/brapi/v1/samples/{sampleId}"
					},
					"response": []
				},
				{
					"name": "Verify response code and body when entered invalid sampleId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f7c3aef1-beac-456b-bc7b-0860e4512068",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"pm.test(\"Verify returned error message\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.metadata.status[0].message).to.eql(\"not found sample\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "4c24f5d6-2c9e-42d3-97e3-d23fa56aff84",
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{masterToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BMSurl}}/{{crop}}/brapi/v1/samples/{{string_not_found}}",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"{{crop}}",
								"brapi",
								"v1",
								"samples",
								"{{string_not_found}}"
							]
						},
						"description": "GET /{crop}/brapi/v1/samples/{sampleId}"
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "trial-resource-brapi",
			"item": [
				{
					"name": "GET ​/{crop}​/brapi​/v1​/trials",
					"item": [
						{
							"name": "Verify response code and body when entered crop name only",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6fd30626-631e-4a05-bef4-3132d02fb3a3",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check details of a trial in the list are correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[1].trialDbId).to.eql(JSON.parse(pm.environment.get(\"trialStudyId\")));",
											"    pm.expect(jsonData.result.data[1].trialName).to.eql(\"Randomized Trial 20180003\");",
											"    pm.expect(jsonData.result.data[1].programDbId).to.eql(\"c9e335d2-3057-4958-a43e-e38cf61d09ca\");",
											"    pm.expect(jsonData.result.data[1].programName).to.eql(\"API Program\");",
											"    pm.expect(jsonData.result.data[1].startDate).to.eql(\"20180912\");",
											"    pm.expect(jsonData.result.data[1].endDate).to.eql(\"20190220\");",
											"    pm.expect(jsonData.result.data[1].active).to.eql(true);",
											"});",
											"",
											"pm.test(\"Check details of an associated environment are correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[1].studies[0].studyDbId).to.eql(2);",
											"    pm.expect(jsonData.result.data[1].studies[0].studyName).to.eql(\"Randomized Trial 20180003 Environment Number 1\");",
											"    pm.expect(jsonData.result.data[1].studies[0].locationDbId).to.eql(\"9001\");",
											"    pm.expect(jsonData.result.data[1].studies[0].locationName).to.eql(\"Africa Rice Centre\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "4bedc29c-8307-4f94-a34f-c593d5179839",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/trials",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"trials"
									]
								},
								"description": "GET ​/{crop}​/brapi​/v1​/trials"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered programDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "02ae8149-cb0d-4aef-9aae-35d98e49728d",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check details of a trial in the list are correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[1].trialDbId).to.eql(JSON.parse(pm.environment.get(\"trialStudyId\")));",
											"    pm.expect(jsonData.result.data[1].trialName).to.eql(\"Randomized Trial 20180003\");",
											"    pm.expect(jsonData.result.data[1].programDbId).to.eql(\"c9e335d2-3057-4958-a43e-e38cf61d09ca\");",
											"    pm.expect(jsonData.result.data[1].programName).to.eql(\"API Program\");",
											"    pm.expect(jsonData.result.data[1].startDate).to.eql(\"20180912\");",
											"    pm.expect(jsonData.result.data[1].endDate).to.eql(\"20190220\");",
											"    pm.expect(jsonData.result.data[1].active).to.eql(true);",
											"});",
											"",
											"pm.test(\"Check details of an associated environment are correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[1].studies[0].studyDbId).to.eql(2);",
											"    pm.expect(jsonData.result.data[1].studies[0].studyName).to.eql(\"Randomized Trial 20180003 Environment Number 1\");",
											"    pm.expect(jsonData.result.data[1].studies[0].locationDbId).to.eql(\"9001\");",
											"    pm.expect(jsonData.result.data[1].studies[0].locationName).to.eql(\"Africa Rice Centre\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "24b19abc-60b7-4778-8a2e-de6210af57d5",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/trials?programDbId={{programDbId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"trials"
									],
									"query": [
										{
											"key": "programDbId",
											"value": "{{programDbId}}"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v1​/trials"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered locationDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2aced383-68e3-4330-8ab5-389a83f051c8",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "cd19dd28-4792-4d88-ab12-42d5e859a34b",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/trials?locationDbId=9001",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"trials"
									],
									"query": [
										{
											"key": "locationDbId",
											"value": "9001"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v1​/trials"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered page and pageSize",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0da89887-661e-4680-9c3b-a24e648188fd",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check details of a trial in the list are correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[1].trialDbId).to.eql(JSON.parse(pm.environment.get(\"trialStudyId\")));",
											"    pm.expect(jsonData.result.data[1].trialName).to.eql(\"Randomized Trial 20180003\");",
											"    pm.expect(jsonData.result.data[1].programDbId).to.eql(\"c9e335d2-3057-4958-a43e-e38cf61d09ca\");",
											"    pm.expect(jsonData.result.data[1].programName).to.eql(\"API Program\");",
											"    pm.expect(jsonData.result.data[1].startDate).to.eql(\"20180912\");",
											"    pm.expect(jsonData.result.data[1].endDate).to.eql(\"20190220\");",
											"    pm.expect(jsonData.result.data[1].active).to.eql(true);",
											"});",
											"",
											"pm.test(\"Check details of an associated environment are correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[1].studies[0].studyDbId).to.eql(2);",
											"    pm.expect(jsonData.result.data[1].studies[0].studyName).to.eql(\"Randomized Trial 20180003 Environment Number 1\");",
											"    pm.expect(jsonData.result.data[1].studies[0].locationDbId).to.eql(\"9001\");",
											"    pm.expect(jsonData.result.data[1].studies[0].locationName).to.eql(\"Africa Rice Centre\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e881fecf-55a9-4a7a-83ef-c1b6bb1a4163",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/trials?page=0&pageSize=2",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"trials"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "2"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v1​/trials"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered pageSize greater than max",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c6e04671-c3db-44b1-9a3c-bb90b0d2acb9",
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"",
											"pm.test(\"Check response message when exceeded max page size\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Page size must between 1 and 10000.\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "53fd1e02-2c02-4920-8c05-983263992c69",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/trials?page=0&pageSize=10001",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"trials"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "10001"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v1​/trials"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered active status",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0c84cf00-edcc-4fb1-84e8-07f47814f3df",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check details of a trial in the list are correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[1].trialDbId).to.eql(JSON.parse(pm.environment.get(\"trialStudyId\")));",
											"    pm.expect(jsonData.result.data[1].trialName).to.eql(\"Randomized Trial 20180003\");",
											"    pm.expect(jsonData.result.data[1].programDbId).to.eql(\"c9e335d2-3057-4958-a43e-e38cf61d09ca\");",
											"    pm.expect(jsonData.result.data[1].programName).to.eql(\"API Program\");",
											"    pm.expect(jsonData.result.data[1].startDate).to.eql(\"20180912\");",
											"    pm.expect(jsonData.result.data[1].endDate).to.eql(\"20190220\");",
											"    pm.expect(jsonData.result.data[1].active).to.eql(true);",
											"});",
											"",
											"pm.test(\"Check details of an associated environment are correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[1].studies[0].studyDbId).to.eql(2);",
											"    pm.expect(jsonData.result.data[1].studies[0].studyName).to.eql(\"Randomized Trial 20180003 Environment Number 1\");",
											"    pm.expect(jsonData.result.data[1].studies[0].locationDbId).to.eql(\"9001\");",
											"    pm.expect(jsonData.result.data[1].studies[0].locationName).to.eql(\"Africa Rice Centre\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2ffcbc34-acb8-4781-acd1-dec73b355004",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/trials?status=true",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"trials"
									],
									"query": [
										{
											"key": "status",
											"value": "true"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v1​/trials"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered inactive status",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ff0c35ac-c9e5-4de5-b629-2d7bbb8f0ce3",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Response message is no inactive studies found \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.metadata.status[0].message).to.eql(\"No inactive studies found.\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0d757a0b-e173-444f-8150-9a2cd22ea90d",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/trials?active=false",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"trials"
									],
									"query": [
										{
											"key": "active",
											"value": "false"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v1​/trials"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered valid field name",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f473b07c-8fbc-4e67-9cd7-93fffd51bbcd",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check details of a trial in the list are correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[1].trialDbId).to.eql(JSON.parse(pm.environment.get(\"trialStudyId\")));",
											"    pm.expect(jsonData.result.data[1].trialName).to.eql(\"Randomized Trial 20180003\");",
											"    pm.expect(jsonData.result.data[1].programDbId).to.eql(\"c9e335d2-3057-4958-a43e-e38cf61d09ca\");",
											"    pm.expect(jsonData.result.data[1].programName).to.eql(\"API Program\");",
											"    pm.expect(jsonData.result.data[1].startDate).to.eql(\"20180912\");",
											"    pm.expect(jsonData.result.data[1].endDate).to.eql(\"20190220\");",
											"    pm.expect(jsonData.result.data[1].active).to.eql(true);",
											"});",
											"",
											"pm.test(\"Check details of an associated environment are correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[1].studies[0].studyDbId).to.eql(2);",
											"    pm.expect(jsonData.result.data[1].studies[0].studyName).to.eql(\"Randomized Trial 20180003 Environment Number 1\");",
											"    pm.expect(jsonData.result.data[1].studies[0].locationDbId).to.eql(\"9001\");",
											"    pm.expect(jsonData.result.data[1].studies[0].locationName).to.eql(\"Africa Rice Centre\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1f3e3720-60ff-4635-8127-e7ffa51da71d",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/trials?sortedBy=trialDbId",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"trials"
									],
									"query": [
										{
											"key": "sortedBy",
											"value": "trialDbId"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v1​/trials"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid field name",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8bcc532f-df87-44db-bd28-2e190972baca",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Response message is correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.metadata.status[0].message).to.eql(\"sortBy bad filter, expect trialDbId/trialName/programDbId/programName/startDate/endDate/active\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2ca2aae3-e561-4f24-9105-4435c80c1007",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/trials?sortBy=studyId",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"trials"
									],
									"query": [
										{
											"key": "sortBy",
											"value": "studyId"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v1​/trials"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when sorted in ascending order",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d250b100-8bce-41a6-9223-ec44a40c2728",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check if first trialDbId is less than next trialDbId\", function () {",
											"   ",
											"  ",
											"    var jsonData = pm.response.json();",
											"    var data = jsonData.result.data;",
											"    var i;",
											"    for (i = 0; i+1 < data.length ; i++) { ",
											"      pm.expect(data[i+1].trialDbId).to.be.above(data[i].trialDbId);",
											"        ",
											"   }",
											" ",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "80df2d2d-cb6f-4e35-8874-91ce86ab2eec",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/trials?sortOrder=asc",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"trials"
									],
									"query": [
										{
											"key": "sortOrder",
											"value": "asc"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v1​/trials"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when sorted in descending order",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c82e3e7e-b7e1-47f2-999b-4b70ae4b6a95",
										"exec": [
											"pm.test(\"Status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check if first trialDbId is greater than next trialDbId\", function () {",
											"    var jsonData = pm.response.json();",
											"    var data = jsonData.result.data;",
											"    var i;",
											"    for (i = 0; i+1 < data.length ; i++) { ",
											"      pm.expect(data[i].trialDbId).to.be.above(data[i+1].trialDbId);",
											"   ",
											"   }",
											" ",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5900cbc2-7709-4087-b23b-78381cd34376",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/trials?sortOrder=desc",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"trials"
									],
									"query": [
										{
											"key": "sortOrder",
											"value": "desc"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v1​/trials"
							},
							"response": []
						},
						{
							"name": "Verify response code and body entered invalid sort order",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "694ae20e-d1e0-4783-a47a-5be513e6cd6f",
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Response message is correct\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.metadata.status[0].message).to.eql(\"sortOrder bad filter, expect asc/desc\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "29b6f105-b9f7-4bdd-ae6e-1439eac06363",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/trials?sortOrder=invalidorder",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"trials"
									],
									"query": [
										{
											"key": "sortOrder",
											"value": "invalidorder"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v1​/trials"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "GET ​/{crop}​/brapi​/v1​/trials​/{trialDbId}​/table",
					"item": [
						{
							"name": "Verify response code and body when entered valid trialDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f3ec0054-4643-42ce-8f53-55dbb7fc0a1e",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check trialDbId is correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.trialDbId).to.eql(JSON.parse(pm.environment.get(\"studyId\")));",
											"});",
											"",
											"pm.test(\"Check header rows are correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.headerRow).to.include(",
											"        \"year\",",
											"        \"studyDbId\",",
											"        \"studyName\",",
											"        \"locationDbId\",",
											"        \"locationName\",",
											"        \"germplasmDbId\",",
											"        \"germplasmName\",",
											"        \"observationUnitDbId\",",
											"        \"plotNumber\",",
											"        \"replicate\",",
											"        \"blockNumber\",",
											"        \"observationTimestamp\",",
											"        \"entryType\",",
											"        \"X\",",
											"        \"Y\",",
											"        \"obsUnitId\");",
											"});",
											"",
											"pm.test(\"Check observation VariableDbIds are correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.observationVariableDbIds).to.include(",
											"        18000,",
											"        18010,",
											"        18110);",
											"});",
											"",
											"pm.test(\"Check observation variable names are correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.observationVariableNames).to.include(",
											"        \"Grain_yield\",",
											"        \"Biomas_yield\",",
											"        \"Grain_size\");",
											"});",
											"",
											"/*pm.test(\"Check details of first observation row are correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    console.log(pm.environment.get(\"study_first_row\"));",
											"    pm.expect(jsonData.result.data[0]).to.include(",
											" \"2019\", \"13\", \"Study for user 2 Environment Number 1\", \"9001\", \"Africa Rice Centre\", \"26\", \"GP6\", \"7051\", \"6\", null, null, \"UnknownTimestamp\", \"Test entry\", \"null\", \"null\", \"7119ebc0-1e7f-45c8-b5ec-663582aa2167\", null, \"17\", \"35\", \"48\"",
											"    //JSON.strinpm.environment.get(\"study_first_row\")",
											");",
											"});*/",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9ab02780-bf9f-405f-948b-5aae377b2976",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/trials/{{studyId}}/table",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"trials",
										"{{studyId}}",
										"table"
									]
								},
								"description": "GET​/{crop}​/brapi​/v1​/trials​/{trialDbId}​/table"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid trialDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a90258dc-8554-4866-bcdb-8f685a358b51",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0e205507-da5f-4e9c-96f2-12bc266f9185",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/trials/{{non_existing_study_id}}/table",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"trials",
										"{{non_existing_study_id}}",
										"table"
									]
								},
								"description": "GET​/{crop}​/brapi​/v1​/trials​/{trialDbId}​/table"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "study-resource-brapi",
			"item": [
				{
					"name": "GET ​/{crop}​/brapi​/v1​/studies",
					"item": [
						{
							"name": "Verify response code and body when entered crop only",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "af143048-3d3a-4a99-b36b-5afb9727b075",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(14);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Verify returned data\", function () {",
											" var jsonData = pm.response.json();",
											" pm.expect(jsonData.result.data[0].active).to.eql(\"true\");",
											" pm.expect(jsonData.result.data[0].startDate).to.eql(\"2018-10-25\");",
											" pm.expect(jsonData.result.data[0].studyDbId).to.eql(pm.environment.get(\"nursery1StudyDbId\"));",
											" pm.expect(jsonData.result.data[0].studyName).to.eql(\"Study with Imported Cross Nursery 2018002 Environment Number 1\");",
											" pm.expect(jsonData.result.data[0].studyTypeDbId).to.eql(\"1\");",
											" pm.expect(jsonData.result.data[0].studyTypeName).to.eql(\"Nursery\");",
											" pm.expect(jsonData.result.data[0].seasons[0].season).to.eql(\"Dry season\");",
											" pm.expect(jsonData.result.data[0].seasons[0].seasonDbId).to.eql(\"10290\");",
											" pm.expect(jsonData.result.data[0].locationDbId).to.eql(\"9001\");",
											" pm.expect(jsonData.result.data[0].locationName).to.eql(\"Africa Rice Centre\");",
											" pm.expect(jsonData.result.data[0].programDbId).to.eql(\"c9e335d2-3057-4958-a43e-e38cf61d09ca\");",
											" pm.expect(jsonData.result.data[0].programName).to.eql(\"API Program\");",
											" pm.expect(jsonData.result.data[0].trialName).to.eql(\"Study with Imported Cross Nursery 2018002\");",
											" pm.expect(jsonData.result.data[0].trialDbId).to.eql(\"3009\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "6de36bbe-1ae7-4047-ae60-146aa15e0bf7",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/studies",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"studies"
									]
								},
								"description": "GET /{crop}/brapi/v1/studies/{studyDbId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when filtered by studyTypeDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "58e3e372-dccb-4b31-9b08-07e8f5cd033a",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(7);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Verify returned data\", function () {",
											" var jsonData = pm.response.json();",
											" pm.expect(jsonData.result.data[0].active).to.eql(\"true\");",
											" pm.expect(jsonData.result.data[0].startDate).to.eql(\"2018-10-25\");",
											" pm.expect(jsonData.result.data[0].studyDbId).to.eql(pm.environment.get(\"nursery1StudyDbId\"));",
											" pm.expect(jsonData.result.data[0].studyName).to.eql(\"Study with Imported Cross Nursery 2018002 Environment Number 1\");",
											" pm.expect(jsonData.result.data[0].studyTypeDbId).to.eql(\"1\");",
											" pm.expect(jsonData.result.data[0].studyTypeName).to.eql(\"Nursery\");",
											" pm.expect(jsonData.result.data[0].seasons[0].season).to.eql(\"Dry season\");",
											" pm.expect(jsonData.result.data[0].seasons[0].seasonDbId).to.eql(\"10290\");",
											" pm.expect(jsonData.result.data[0].locationDbId).to.eql(\"9001\");",
											" pm.expect(jsonData.result.data[0].locationName).to.eql(\"Africa Rice Centre\");",
											" pm.expect(jsonData.result.data[0].programDbId).to.eql(\"c9e335d2-3057-4958-a43e-e38cf61d09ca\");",
											" pm.expect(jsonData.result.data[0].programName).to.eql(\"API Program\");",
											" pm.expect(jsonData.result.data[0].trialName).to.eql(\"Study with Imported Cross Nursery 2018002\");",
											" pm.expect(jsonData.result.data[0].trialDbId).to.eql(\"3009\");",
											"});",
											"",
											"",
											"pm.test(\"Check all studyDbIds are equal to input parameter\", function () {",
											"  var jsonData = pm.response.json();",
											"   var i;",
											"    for (i = 0; i < jsonData.result.data.length; i++) { ",
											"        pm.expect(jsonData.result.data[i].studyTypeDbId).to.eql(\"1\");",
											"    }",
											"});    ",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b58233af-7450-4fef-a82a-107e6c92ab34",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/studies?studyTypeDbId=1",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"studies"
									],
									"query": [
										{
											"key": "studyTypeDbId",
											"value": "1"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/studies/{studyDbId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when filtered by programDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b9190775-501c-41dc-92f3-dcb3ca93b308",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(14);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Verify returned data\", function () {",
											" var jsonData = pm.response.json();",
											" pm.expect(jsonData.result.data[0].active).to.eql(\"true\");",
											" pm.expect(jsonData.result.data[0].startDate).to.eql(\"2018-10-25\");",
											" pm.expect(jsonData.result.data[0].studyDbId).to.eql(pm.environment.get(\"nursery1StudyDbId\"));",
											" pm.expect(jsonData.result.data[0].studyName).to.eql(\"Study with Imported Cross Nursery 2018002 Environment Number 1\");",
											" pm.expect(jsonData.result.data[0].studyTypeDbId).to.eql(\"1\");",
											" pm.expect(jsonData.result.data[0].studyTypeName).to.eql(\"Nursery\");",
											" pm.expect(jsonData.result.data[0].seasons[0].season).to.eql(\"Dry season\");",
											" pm.expect(jsonData.result.data[0].seasons[0].seasonDbId).to.eql(\"10290\");",
											" pm.expect(jsonData.result.data[0].locationDbId).to.eql(\"9001\");",
											" pm.expect(jsonData.result.data[0].locationName).to.eql(\"Africa Rice Centre\");",
											" pm.expect(jsonData.result.data[0].programDbId).to.eql(\"c9e335d2-3057-4958-a43e-e38cf61d09ca\");",
											" pm.expect(jsonData.result.data[0].programName).to.eql(\"API Program\");",
											" pm.expect(jsonData.result.data[0].trialName).to.eql(\"Study with Imported Cross Nursery 2018002\");",
											" pm.expect(jsonData.result.data[0].trialDbId).to.eql(\"3009\");",
											"});",
											"",
											"",
											"pm.test(\"Check all programDbId are equal to input parameter\", function () {",
											"  var jsonData = pm.response.json();",
											"   var i;",
											"    for (i = 0; i < jsonData.result.data.length; i++) { ",
											"    pm.expect(jsonData.result.data[i].programDbId).to.eql(pm.environment.get(\"api_program_id\"));",
											"    }",
											"});    ",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b9bbb22d-9ebd-4505-ae50-278373953424",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/studies?programDbId={{api_program_id}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"studies"
									],
									"query": [
										{
											"key": "programDbId",
											"value": "{{api_program_id}}"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/studies/{studyDbId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when filtered by locationDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "36dbef01-3552-42f5-be3c-0c88919fc728",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(8);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Verify returned data\", function () {",
											" var jsonData = pm.response.json();",
											" pm.expect(jsonData.result.data[0].active).to.eql(\"true\");",
											" pm.expect(jsonData.result.data[0].startDate).to.eql(\"2018-10-25\");",
											" pm.expect(jsonData.result.data[0].studyDbId).to.eql(pm.environment.get(\"nursery1StudyDbId\"));",
											" pm.expect(jsonData.result.data[0].studyName).to.eql(\"Study with Imported Cross Nursery 2018002 Environment Number 1\");",
											" pm.expect(jsonData.result.data[0].studyTypeDbId).to.eql(\"1\");",
											" pm.expect(jsonData.result.data[0].studyTypeName).to.eql(\"Nursery\");",
											" pm.expect(jsonData.result.data[0].seasons[0].season).to.eql(\"Dry season\");",
											" pm.expect(jsonData.result.data[0].seasons[0].seasonDbId).to.eql(\"10290\");",
											" pm.expect(jsonData.result.data[0].locationDbId).to.eql(\"9001\");",
											" pm.expect(jsonData.result.data[0].locationName).to.eql(\"Africa Rice Centre\");",
											" pm.expect(jsonData.result.data[0].programDbId).to.eql(\"c9e335d2-3057-4958-a43e-e38cf61d09ca\");",
											" pm.expect(jsonData.result.data[0].programName).to.eql(\"API Program\");",
											" pm.expect(jsonData.result.data[0].trialName).to.eql(\"Study with Imported Cross Nursery 2018002\");",
											" pm.expect(jsonData.result.data[0].trialDbId).to.eql(\"3009\");",
											"});",
											"",
											"",
											"pm.test(\"Check all locationDbId are equal to input parameter\", function () {",
											"  var jsonData = pm.response.json();",
											"   var i;",
											"    for (i = 0; i < jsonData.result.data.length; i++) { ",
											"    pm.expect(jsonData.result.data[i].locationDbId).to.eql(\"9001\");",
											"    }",
											"});    ",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2e34e607-6173-4c25-b038-772d4f52abef",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/studies?locationDbId=9001",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"studies"
									],
									"query": [
										{
											"key": "locationDbId",
											"value": "9001"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/studies/{studyDbId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when filtered by seasonDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "84642d0d-5948-4035-a37e-bd2d77ffd076",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(2);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Verify returned data\", function () {",
											" var jsonData = pm.response.json();",
											" pm.expect(jsonData.result.data[0].active).to.eql(\"true\");",
											" pm.expect(jsonData.result.data[0].startDate).to.eql(\"2018-10-25\");",
											" pm.expect(jsonData.result.data[0].studyDbId).to.eql(pm.environment.get(\"nursery1StudyDbId\"));",
											" pm.expect(jsonData.result.data[0].studyName).to.eql(\"Study with Imported Cross Nursery 2018002 Environment Number 1\");",
											" pm.expect(jsonData.result.data[0].studyTypeDbId).to.eql(\"1\");",
											" pm.expect(jsonData.result.data[0].studyTypeName).to.eql(\"Nursery\");",
											" pm.expect(jsonData.result.data[0].seasons[0].season).to.eql(\"Dry season\");",
											" pm.expect(jsonData.result.data[0].seasons[0].seasonDbId).to.eql(\"10290\");",
											" pm.expect(jsonData.result.data[0].locationDbId).to.eql(\"9001\");",
											" pm.expect(jsonData.result.data[0].locationName).to.eql(\"Africa Rice Centre\");",
											" pm.expect(jsonData.result.data[0].programDbId).to.eql(\"c9e335d2-3057-4958-a43e-e38cf61d09ca\");",
											" pm.expect(jsonData.result.data[0].programName).to.eql(\"API Program\");",
											" pm.expect(jsonData.result.data[0].trialName).to.eql(\"Study with Imported Cross Nursery 2018002\");",
											" pm.expect(jsonData.result.data[0].trialDbId).to.eql(\"3009\");",
											"});",
											"",
											"",
											"pm.test(\"Check all seasonDbId are equal to input parameter\", function () {",
											"  var jsonData = pm.response.json();",
											"   var i;",
											"    for (i = 0; i < jsonData.result.data.length; i++) { ",
											"    pm.expect(jsonData.result.data[i].seasons[0].seasonDbId).to.eql(\"10290\");",
											"    }",
											"});    ",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "071defc7-8e07-41b6-94d6-6d3a40abc31a",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/studies?seasonDbId=10290",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"studies"
									],
									"query": [
										{
											"key": "seasonDbId",
											"value": "10290"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/studies/{studyDbId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when filtered by trialDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0bb6379f-8878-45bd-bd9b-a08db6f4b977",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(2);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Verify returned data\", function () {",
											" var jsonData = pm.response.json();",
											" pm.expect(jsonData.result.data[0].active).to.eql(\"true\");",
											" pm.expect(jsonData.result.data[0].startDate).to.eql(\"2018-09-12\");",
											" pm.expect(jsonData.result.data[0].studyDbId).to.eql(pm.environment.get(\"studyDbId\"));",
											" pm.expect(jsonData.result.data[0].studyName).to.eql(\"Randomized Trial 20180003 Environment Number 1\");",
											" pm.expect(jsonData.result.data[0].studyTypeDbId).to.eql(\"6\");",
											" pm.expect(jsonData.result.data[0].studyTypeName).to.eql(\"Trial\");",
											" pm.expect(jsonData.result.data[0].seasons[0].season).to.eql(\"Dry season\");",
											" pm.expect(jsonData.result.data[0].seasons[0].seasonDbId).to.eql(\"10290\");",
											" pm.expect(jsonData.result.data[0].locationDbId).to.eql(\"9001\");",
											" pm.expect(jsonData.result.data[0].locationName).to.eql(\"Africa Rice Centre\");",
											" pm.expect(jsonData.result.data[0].programDbId).to.eql(\"c9e335d2-3057-4958-a43e-e38cf61d09ca\");",
											" pm.expect(jsonData.result.data[0].programName).to.eql(\"API Program\");",
											" pm.expect(jsonData.result.data[0].trialName).to.eql(\"Randomized Trial 20180003\");",
											" pm.expect(jsonData.result.data[0].trialDbId).to.eql(\"3013\");",
											"});",
											"",
											"",
											"pm.test(\"Check all trialDbId are equal to input parameter\", function () {",
											"  var jsonData = pm.response.json();",
											"   var i;",
											"    for (i = 0; i < jsonData.result.data.length; i++) { ",
											"    pm.expect(jsonData.result.data[i].trialDbId).to.eql(\"3013\");",
											"    }",
											"});    ",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "fbfc5b11-2d09-4519-a444-21d34c0fa2b0",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/studies?trialDbId=3013",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"studies"
									],
									"query": [
										{
											"key": "trialDbId",
											"value": "3013"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/studies/{studyDbId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when filtered by studyDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7986728d-fd2f-4a26-b9bf-c8feb8c4b62f",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(1);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Verify returned data\", function () {",
											" var jsonData = pm.response.json();",
											" pm.expect(jsonData.result.data[0].active).to.eql(\"true\");",
											" pm.expect(jsonData.result.data[0].startDate).to.eql(\"2018-10-25\");",
											" pm.expect(jsonData.result.data[0].studyDbId).to.eql(pm.environment.get(\"nursery1StudyDbId\"));",
											" pm.expect(jsonData.result.data[0].studyName).to.eql(\"Study with Imported Cross Nursery 2018002 Environment Number 1\");",
											" pm.expect(jsonData.result.data[0].studyTypeDbId).to.eql(\"1\");",
											" pm.expect(jsonData.result.data[0].studyTypeName).to.eql(\"Nursery\");",
											" pm.expect(jsonData.result.data[0].seasons[0].season).to.eql(\"Dry season\");",
											" pm.expect(jsonData.result.data[0].seasons[0].seasonDbId).to.eql(\"10290\");",
											" pm.expect(jsonData.result.data[0].locationDbId).to.eql(\"9001\");",
											" pm.expect(jsonData.result.data[0].locationName).to.eql(\"Africa Rice Centre\");",
											" pm.expect(jsonData.result.data[0].programDbId).to.eql(\"c9e335d2-3057-4958-a43e-e38cf61d09ca\");",
											" pm.expect(jsonData.result.data[0].programName).to.eql(\"API Program\");",
											" pm.expect(jsonData.result.data[0].trialName).to.eql(\"Study with Imported Cross Nursery 2018002\");",
											" pm.expect(jsonData.result.data[0].trialDbId).to.eql(\"3009\");",
											"});",
											"",
											"",
											"pm.test(\"Check all studyDbId are equal to input parameter\", function () {",
											"  var jsonData = pm.response.json();",
											"   var i;",
											"    for (i = 0; i < jsonData.result.data.length; i++) { ",
											"    pm.expect(jsonData.result.data[i].studyDbId).to.eql(pm.environment.get(\"nursery1StudyDbId\"));",
											"    }",
											"});    ",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "8a414fa2-8933-4121-82bd-7b0e6401bff5",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/studies?studyDbId={{nursery1StudyDbId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"studies"
									],
									"query": [
										{
											"key": "studyDbId",
											"value": "{{nursery1StudyDbId}}"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/studies/{studyDbId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when filtered by active set to true",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9b2f190b-ee1f-4fc7-98a2-df4eda2cd9e0",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(14);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Verify returned data\", function () {",
											" var jsonData = pm.response.json();",
											" pm.expect(jsonData.result.data[0].active).to.eql(\"true\");",
											" pm.expect(jsonData.result.data[0].startDate).to.eql(\"2018-10-25\");",
											" pm.expect(jsonData.result.data[0].studyDbId).to.eql(pm.environment.get(\"nursery1StudyDbId\"));",
											" pm.expect(jsonData.result.data[0].studyName).to.eql(\"Study with Imported Cross Nursery 2018002 Environment Number 1\");",
											" pm.expect(jsonData.result.data[0].studyTypeDbId).to.eql(\"1\");",
											" pm.expect(jsonData.result.data[0].studyTypeName).to.eql(\"Nursery\");",
											" pm.expect(jsonData.result.data[0].seasons[0].season).to.eql(\"Dry season\");",
											" pm.expect(jsonData.result.data[0].seasons[0].seasonDbId).to.eql(\"10290\");",
											" pm.expect(jsonData.result.data[0].locationDbId).to.eql(\"9001\");",
											" pm.expect(jsonData.result.data[0].locationName).to.eql(\"Africa Rice Centre\");",
											" pm.expect(jsonData.result.data[0].programDbId).to.eql(\"c9e335d2-3057-4958-a43e-e38cf61d09ca\");",
											" pm.expect(jsonData.result.data[0].programName).to.eql(\"API Program\");",
											" pm.expect(jsonData.result.data[0].trialName).to.eql(\"Study with Imported Cross Nursery 2018002\");",
											" pm.expect(jsonData.result.data[0].trialDbId).to.eql(\"3009\");",
											"});",
											"",
											"",
											"pm.test(\"Check all actvie are equal to input parameter\", function () {",
											"  var jsonData = pm.response.json();",
											"   var i;",
											"    for (i = 0; i < jsonData.result.data.length; i++) { ",
											"    pm.expect(jsonData.result.data[i].active).to.eql(\"true\");",
											"    }",
											"});    ",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "61c30967-cf4f-4b62-8fc8-c04cef0542b7",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/studies?active=true",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"studies"
									],
									"query": [
										{
											"key": "active",
											"value": "true"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/studies/{studyDbId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when filtered by active set to false",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "25cb48c3-7f61-42dd-8905-b96ea1eb7749",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(3);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Verify returned data\", function () {",
											" var jsonData = pm.response.json();",
											" var index = 1;",
											" pm.expect(jsonData.result.data[index].active).to.eql(\"false\");",
											" pm.expect(jsonData.result.data[index].startDate).to.eql(\"2019-04-02\");",
											" pm.expect(jsonData.result.data[index].studyDbId).to.eql(\"7\");",
											" pm.expect(jsonData.result.data[index].studyName).to.eql(\"Trial for Subobs Creation#20190402142056988 Environment Number 1\");",
											" pm.expect(jsonData.result.data[index].studyTypeDbId).to.eql(\"6\");",
											" pm.expect(jsonData.result.data[index].studyTypeName).to.eql(\"Trial\");",
											" pm.expect(jsonData.result.data[index].seasons).to.eql([]);",
											" pm.expect(jsonData.result.data[index].locationDbId).to.eql(\"9016\");",
											" pm.expect(jsonData.result.data[index].locationName).to.eql(\"Unspecified Location\");",
											" pm.expect(jsonData.result.data[index].programDbId).to.eql(\"c9e335d2-3057-4958-a43e-e38cf61d09ca\");",
											" pm.expect(jsonData.result.data[index].programName).to.eql(\"API Program\");",
											" pm.expect(jsonData.result.data[index].trialName).to.eql(\"Trial for Subobs Creation#20190402142056988\");",
											" pm.expect(jsonData.result.data[index].trialDbId).to.eql(\"3032\");",
											"});",
											"",
											"",
											"pm.test(\"Check all active are equal to input parameter\", function () {",
											"  var jsonData = pm.response.json();",
											"   var i;",
											"    for (i = 0; i < jsonData.result.data.length; i++) { ",
											"    pm.expect(jsonData.result.data[i].active).to.eql(\"false\");",
											"    }",
											"});    ",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "8a65d163-91de-4107-912c-b9e2caa82182",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/studies?active=false",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"studies"
									],
									"query": [
										{
											"key": "active",
											"value": "false"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/studies/{studyDbId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when sortedBy trialDbId in asc order",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ff68c214-df31-4065-ac68-089ce9612853",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(14);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Verify returned data\", function () {",
											" var jsonData = pm.response.json();",
											" pm.expect(jsonData.result.data[0].active).to.eql(\"true\");",
											" pm.expect(jsonData.result.data[0].startDate).to.eql(\"2018-10-25\");",
											" pm.expect(jsonData.result.data[0].studyDbId).to.eql(pm.environment.get(\"nursery1StudyDbId\"));",
											" pm.expect(jsonData.result.data[0].studyName).to.eql(\"Study with Imported Cross Nursery 2018002 Environment Number 1\");",
											" pm.expect(jsonData.result.data[0].studyTypeDbId).to.eql(\"1\");",
											" pm.expect(jsonData.result.data[0].studyTypeName).to.eql(\"Nursery\");",
											" pm.expect(jsonData.result.data[0].seasons[0].season).to.eql(\"Dry season\");",
											" pm.expect(jsonData.result.data[0].seasons[0].seasonDbId).to.eql(\"10290\");",
											" pm.expect(jsonData.result.data[0].locationDbId).to.eql(\"9001\");",
											" pm.expect(jsonData.result.data[0].locationName).to.eql(\"Africa Rice Centre\");",
											" pm.expect(jsonData.result.data[0].programDbId).to.eql(\"c9e335d2-3057-4958-a43e-e38cf61d09ca\");",
											" pm.expect(jsonData.result.data[0].programName).to.eql(\"API Program\");",
											" pm.expect(jsonData.result.data[0].trialName).to.eql(\"Study with Imported Cross Nursery 2018002\");",
											" pm.expect(jsonData.result.data[0].trialDbId).to.eql(\"3009\");",
											"});",
											"",
											"",
											"pm.test(\"Check if next trialDbId is greater or equal to previous trialDbId\", function () {",
											"  ",
											"    var jsonData = pm.response.json();",
											"    var data = jsonData.result.data;",
											"    var i;",
											"    var proceed = true",
											"    for (i = 0; i+1 < data.length ; i++) {",
											"        ",
											"           if((parseInt(data[i+1].trialDbId)) >= (parseInt(data[i].trialDbId))){",
											"               proceed = true;",
											"             ",
											"           }else{",
											"              proceed = false;",
											"     }",
											"   }",
											"       pm.expect(proceed).to.eql(true);   ",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "aa633cbb-a13c-4571-b66b-5940e4df5b64",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/studies?sortBy=trialDbId&sortOrder=ASC",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"studies"
									],
									"query": [
										{
											"key": "sortBy",
											"value": "trialDbId"
										},
										{
											"key": "sortOrder",
											"value": "ASC"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/studies/{studyDbId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when sortedBy trialDbId in desc order",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1e7a21ab-cc23-4c3b-95ca-0dd346e10e8e",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(14);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Verify returned data\", function () {",
											" var jsonData = pm.response.json();",
											" pm.expect(jsonData.result.data[0].active).to.eql(\"true\");",
											" pm.expect(jsonData.result.data[0].startDate).to.eql(\"2020-06-04\");",
											" pm.expect(jsonData.result.data[0].studyDbId).to.eql(\"34\");",
											" pm.expect(jsonData.result.data[0].studyName).to.eql(\"Study for Design Generation Environment Number 1\");",
											" pm.expect(jsonData.result.data[0].studyTypeDbId).to.eql(\"6\");",
											" pm.expect(jsonData.result.data[0].studyTypeName).to.eql(\"Trial\");",
											" pm.expect(jsonData.result.data[0].seasons).to.eql([]);",
											" pm.expect(jsonData.result.data[0].locationDbId).to.eql(\"9012\");",
											" pm.expect(jsonData.result.data[0].locationName).to.eql(\"INT LIVESTOCK RESEARCH INSTITUTE\");",
											" pm.expect(jsonData.result.data[0].programDbId).to.eql(\"c9e335d2-3057-4958-a43e-e38cf61d09ca\");",
											" pm.expect(jsonData.result.data[0].programName).to.eql(\"API Program\");",
											" pm.expect(jsonData.result.data[0].trialName).to.eql(\"Study for Design Generation\");",
											" pm.expect(jsonData.result.data[0].trialDbId).to.eql(\"3083\");",
											"});",
											"",
											"",
											"pm.test(\"Check if next trialDbId is less than or equal to previous trialDbId\", function () {",
											"  ",
											"    var jsonData = pm.response.json();",
											"    var data = jsonData.result.data;",
											"    var i;",
											"    var proceed = true",
											"    for (i = 0; i+1 < data.length ; i++) {",
											"        ",
											"           if((parseInt(data[i+1].trialDbId)) <= (parseInt(data[i].trialDbId))){",
											"               proceed = true;",
											"              console.log(data[i+1].trialDbId + \"is less than/equal \" +data[i].trialDbId);",
											"           }else{",
											"              proceed = false;",
											"     }",
											"   }",
											"       pm.expect(proceed).to.eql(true);   ",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9e08c945-e537-4ee7-951b-b9d1df7f8e63",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/studies?sortBy=trialDbId&sortOrder=DESC",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"studies"
									],
									"query": [
										{
											"key": "sortBy",
											"value": "trialDbId"
										},
										{
											"key": "sortOrder",
											"value": "DESC"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/studies/{studyDbId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid sortOrder value",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5066f5fd-de2d-4632-9002-f76cc52c16da",
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"",
											"pm.test(\"Verify returned error message\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.errors[0].message).to.eql(\"sortOrder should be either ASC or DESC\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "169c1062-dafd-401a-83a8-ce61c31ab76a",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/studies?sortBy=trialDbId&sortOrder=invalid",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"studies"
									],
									"query": [
										{
											"key": "sortBy",
											"value": "trialDbId"
										},
										{
											"key": "sortOrder",
											"value": "invalid"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/studies/{studyDbId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered pagination details",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "97e87e07-4b54-4286-82f8-d920271a7980",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(10000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(14);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Verify returned data\", function () {",
											" var jsonData = pm.response.json();",
											" pm.expect(jsonData.result.data[0].active).to.eql(\"true\");",
											" pm.expect(jsonData.result.data[0].startDate).to.eql(\"2018-10-25\");",
											" pm.expect(jsonData.result.data[0].studyDbId).to.eql(pm.environment.get(\"nursery1StudyDbId\"));",
											" pm.expect(jsonData.result.data[0].studyName).to.eql(\"Study with Imported Cross Nursery 2018002 Environment Number 1\");",
											" pm.expect(jsonData.result.data[0].studyTypeDbId).to.eql(\"1\");",
											" pm.expect(jsonData.result.data[0].studyTypeName).to.eql(\"Nursery\");",
											" pm.expect(jsonData.result.data[0].seasons[0].season).to.eql(\"Dry season\");",
											" pm.expect(jsonData.result.data[0].seasons[0].seasonDbId).to.eql(\"10290\");",
											" pm.expect(jsonData.result.data[0].locationDbId).to.eql(\"9001\");",
											" pm.expect(jsonData.result.data[0].locationName).to.eql(\"Africa Rice Centre\");",
											" pm.expect(jsonData.result.data[0].programDbId).to.eql(\"c9e335d2-3057-4958-a43e-e38cf61d09ca\");",
											" pm.expect(jsonData.result.data[0].programName).to.eql(\"API Program\");",
											" pm.expect(jsonData.result.data[0].trialName).to.eql(\"Study with Imported Cross Nursery 2018002\");",
											" pm.expect(jsonData.result.data[0].trialDbId).to.eql(\"3009\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a3f216c5-460a-4035-8c2b-70dc9040d95f",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/studies?page=0&pageSize=10000",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"studies"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "10000"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/studies/{studyDbId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid page",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ab79583c-d2ac-470e-94d5-fabd77ebaedd",
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"",
											"pm.test(\"Verify returned error message\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.errors[0].message).to.eql(\"A total of 1 pages are available, so the page number must between 0 and 1 (exclusive).\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "75403290-dbba-4a62-b3fe-7c1dc4e324d1",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/studies?page=1&pageSize=10000",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"studies"
									],
									"query": [
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "pageSize",
											"value": "10000"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/studies/{studyDbId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered pageSize greater than max",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "41543823-0ae1-4ee7-95ef-f78a9c4c3a7a",
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"",
											"pm.test(\"Verify returned error message\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.errors[0].message).to.eql(\"Page size must between 1 and 10000.\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "62abad2d-033b-4959-a4d7-b493353fbe93",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/studies?page=0&pageSize=10001",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"studies"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "10001"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/studies/{studyDbId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when filtered by combination of values",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a3aa4fb1-c819-45e3-8939-6a63177a8662",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(1);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Verify returned data\", function () {",
											" var jsonData = pm.response.json();",
											" pm.expect(jsonData.result.data[0].active).to.eql(\"true\");",
											" pm.expect(jsonData.result.data[0].startDate).to.eql(\"2018-09-12\");",
											" pm.expect(jsonData.result.data[0].studyDbId).to.eql(pm.environment.get(\"studyDbId\"));",
											" pm.expect(jsonData.result.data[0].studyName).to.eql(\"Randomized Trial 20180003 Environment Number 1\");",
											" pm.expect(jsonData.result.data[0].studyTypeDbId).to.eql(\"6\");",
											" pm.expect(jsonData.result.data[0].studyTypeName).to.eql(\"Trial\");",
											" pm.expect(jsonData.result.data[0].seasons[0].season).to.eql(\"Dry season\");",
											" pm.expect(jsonData.result.data[0].seasons[0].seasonDbId).to.eql(\"10290\");",
											" pm.expect(jsonData.result.data[0].locationDbId).to.eql(\"9001\");",
											" pm.expect(jsonData.result.data[0].locationName).to.eql(\"Africa Rice Centre\");",
											" pm.expect(jsonData.result.data[0].programDbId).to.eql(\"c9e335d2-3057-4958-a43e-e38cf61d09ca\");",
											" pm.expect(jsonData.result.data[0].programName).to.eql(\"API Program\");",
											" pm.expect(jsonData.result.data[0].trialName).to.eql(\"Randomized Trial 20180003\");",
											" pm.expect(jsonData.result.data[0].trialDbId).to.eql(\"3013\");",
											"});",
											"",
											"",
											"pm.test(\"Check all trialDbId are equal to input parameter\", function () {",
											"  var jsonData = pm.response.json();",
											"   var i;",
											"    for (i = 0; i < jsonData.result.data.length; i++) { ",
											"    pm.expect(jsonData.result.data[i].trialDbId).to.eql(\"3013\");",
											"    }",
											"});    ",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "bf35db13-1b82-44b7-a93b-dc312908f97d",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/studies?studyTypeDbId=6&programDbId={{api_program_id}}&locationDbId=9001&seasonDbId=10290&trialDbId=3013&studyDbId={{studyDbId}}&active=true",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"studies"
									],
									"query": [
										{
											"key": "studyTypeDbId",
											"value": "6"
										},
										{
											"key": "programDbId",
											"value": "{{api_program_id}}"
										},
										{
											"key": "locationDbId",
											"value": "9001"
										},
										{
											"key": "seasonDbId",
											"value": "10290"
										},
										{
											"key": "trialDbId",
											"value": "3013"
										},
										{
											"key": "studyDbId",
											"value": "{{studyDbId}}"
										},
										{
											"key": "active",
											"value": "true"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/studies/{studyDbId}"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "GET ​/{crop}​/brapi​/v1​/studies​/{studyDbId}",
					"item": [
						{
							"name": "Verify response code and body when entered valid studyDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a09f808e-0dcb-47ed-be58-2afaac59b311",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(1);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(1);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Verify returned studyDbId\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.result.studyDbId).to.eql(pm.environment.get(\"studyDbId\"));",
											"});",
											"pm.test(\"Verify returned studyName\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.result.studyName).to.eql(\"Randomized Trial 20180003 Environment Number 1\");",
											"});",
											"",
											"pm.test(\"Verify returned studyType\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.result.studyType).to.eql(\"6\");",
											"});",
											"pm.test(\"Verify returned trialDbId\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.result.trialDbId).to.eql(pm.environment.get(\"trialStudyId\"));",
											"});",
											"",
											"pm.test(\"Verify returned startDate\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.result.startDate).to.eql(\"2018-09-12\");",
											"});",
											"pm.test(\"Verify returned active\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.result.active).to.eql(\"true\");",
											"});",
											"",
											"pm.test(\"Verify returned location details\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.result.location.locationDbId).to.eql(\"9001\");",
											" pm.expect(jsonData.result.location.locationType).to.eql(\"International Agricultural Research Center\");     ",
											" pm.expect(jsonData.result.location.name).to.eql(\"Africa Rice Centre\");",
											" pm.expect(jsonData.result.location.abbreviation).to.eql(\"WARDA\"); ",
											" pm.expect(jsonData.result.location.countryCode).to.eql(\"CIV\"); ",
											" pm.expect(jsonData.result.location.countryName).to.eql(\"Côte D'Ivoire\"); ",
											" pm.expect(jsonData.result.location.latitude).to.eql(7.68); ",
											" pm.expect(jsonData.result.location.longitude).to.eql(-5.03);     ",
											" pm.expect(jsonData.result.location.altitude).to.eql(375.0);     ",
											" pm.expect(jsonData.result.location.additionalInfo.province).to.eql(\"Bouaké\");  ",
											"            ",
											"});",
											"",
											"pm.test(\"Verify returned contacts\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.result.contacts[0].contactDbId).to.eql(120);",
											" pm.expect(jsonData.result.contacts[0].name).to.eql(\"API Test User\");",
											" pm.expect(jsonData.result.contacts[0].email).to.eql(\"api@mailinator.com\");",
											" pm.expect(jsonData.result.contacts[0].type).to.eql(\"\");",
											" pm.expect(jsonData.result.contacts[0].orcid).to.eql(\"\");",
											"    ",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "be951843-cbe1-4263-b1b9-7a39d2a591b7",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/studies/{{studyDbId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"studies",
										"{{studyDbId}}"
									]
								},
								"description": "GET /{crop}/brapi/v1/studies/{studyDbId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered non-existing studyDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f01980bb-ae46-4487-8e88-33abd94d3a0a",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Verify returned body\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData).to.eql(null);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "90f7238a-b659-4845-80a4-4a7a8e71b8bf",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/studies/{{non_existing_study_id}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"studies",
										"{{non_existing_study_id}}"
									]
								},
								"description": "GET /{crop}/brapi/v1/studies/{studyDbId}"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "GET ​/{crop}​/brapi​/v1​/studies​/{studyDbId}​/table",
					"item": [
						{
							"name": "Verify response code and body when entered valid inputs with no format",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1c386457-f62c-4663-b0ca-35187fc9d4ae",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check trialDbId is correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.studyDbId).to.eql(JSON.parse(pm.environment.get(\"studyDbId\")));",
											"});",
											"",
											"pm.test(\"Check header rows are correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.headerRow).to.include(",
											"        \"year\",",
											"        \"studyDbId\",",
											"        \"studyName\",",
											"        \"locationDbId\",",
											"        \"locationName\",",
											"        \"germplasmDbId\",",
											"        \"germplasmName\",",
											"        \"observationUnitDbId\",",
											"        \"plotNumber\",",
											"        \"replicate\",",
											"        \"blockNumber\",",
											"        \"observationTimestamp\",",
											"        \"entryType\",",
											"        \"X\",",
											"        \"Y\",",
											"        \"obsUnitId\");",
											"});",
											"",
											"pm.test(\"Check observation VariableDbIds are correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.observationVariableDbIds).to.include(",
											"        18000,",
											"        18010,",
											"        18110);",
											"});",
											"",
											"pm.test(\"Check observation variable names are correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.observationVariableNames).to.include(",
											"        \"Grain_yield\",",
											"        \"Biomas_yield\",",
											"        \"Grain_size\");",
											"});",
											"",
											"pm.test(\"Check details of first observation row are correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0]).to.include(",
											"    \"2018\",",
											"    \"2\",",
											"    \"Randomized Trial 20180003 Environment Number 1\",",
											"    \"9001\",",
											"    \"WARDA-X\",",
											"    \"24\",",
											"    \"GP4\",",
											"    \"1003\",",
											"    \"1\",",
											"    \"1\",",
											"    null,",
											"    \"UnknownTimestamp\",",
											"    \"Check entry\",",
											"    \"null\",",
											"    \"null\",",
											"    \"PKWDPivJxYgde\",",
											"    \"4\",",
											"    \"18\",",
											"    \"95\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d3088f72-399b-4318-81c9-be7cbbf2f693",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/studies/{{studyDbId}}/table",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"studies",
										"{{studyDbId}}",
										"table"
									]
								},
								"description": "GET /{crop}/brapi/v1/studies/{studyDbId}/table"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered valid inputs with csv format",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "420f0316-d99e-4e37-a7d0-a8385a9d4c90",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check headers are correct\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"year,studyDbId,studyName,locationDbId,locationName,germplasmDbId,germplasmName,observationUnitDbId,plotNumber,replicate,blockNumber,observationTimestamp,entryType,X,Y,obsUnitId,Grain_yield|18000,Biomas_yield|18010,Grain_size|18110\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "52becce4-9b24-4a99-b15d-20bc03d62ce4",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/studies/{{studyDbId}}/table?format=csv",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"studies",
										"{{studyDbId}}",
										"table"
									],
									"query": [
										{
											"key": "format",
											"value": "csv"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/studies/{studyDbId}/table"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered valid inputs with tsv format",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "60572eca-fce9-4f04-8115-899152d7c6fc",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check headers are correct\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"year\tstudyDbId\tstudyName\tlocationDbId\tlocationName\tgermplasmDbId\tgermplasmName\tobservationUnitDbId\tplotNumber\treplicate\tblockNumber\tobservationTimestamp\tentryType\tX\tY\tobsUnitId\tGrain_yield|18000\tBiomas_yield|18010\tGrain_size|18110\");",
											"    ",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "4ae8271d-8771-4b34-a2c2-d4ca9af4b11b",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/studies/{{studyDbId}}/table?format=tsv",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"studies",
										"{{studyDbId}}",
										"table"
									],
									"query": [
										{
											"key": "format",
											"value": "tsv"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/studies/{studyDbId}/table"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered non-existing studyDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cf0c05d1-c60e-41e5-9e78-49b5fba41d40",
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"",
											"pm.test(\"Error message is correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"studyDbId 9999 does not exist\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "48bbac28-4393-4d9a-a0b2-55cbdcd7fe02",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/studies/{{non_existing_study_id}}/table",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"studies",
										"{{non_existing_study_id}}",
										"table"
									]
								},
								"description": "GET /{crop}/brapi/v1/studies/{studyDbId}/table"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "GET ​/{crop}​/brapi​/v2​/studies​/{studyDbId}",
					"item": [
						{
							"name": "Verify response code and body when entered valid studyDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2e55ba40-3f3d-418e-9058-85ec0a8ac045",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(1);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(1);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([{}]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"",
											"pm.test(\"Verify returned studyDbId\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.result.studyDbId).to.eql(pm.environment.get(\"studyDbId\"));",
											"});",
											"pm.test(\"Verify returned studyName\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.result.studyName).to.eql(\"Randomized Trial 20180003 Environment Number 1\");",
											"});",
											"pm.test(\"Verify returned studyDescription\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.result.studyDescription).to.eql(\"Trial created using RCBD design\");",
											"});",
											"pm.test(\"Verify returned studyType\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.result.studyType).to.eql(\"6\");",
											"});",
											"pm.test(\"Verify returned lastUpdate\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.result.lastUpdate).to.eql(\"20200311\");",
											"});",
											"pm.test(\"Verify returned commonCropName\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.result.commonCropName).to.eql(\"testdata\");",
											"});",
											"pm.test(\"Verify returned trialDbId\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.result.trialDbId).to.eql(pm.environment.get(\"trialStudyId\"));",
											"});",
											"",
											"pm.test(\"Verify returned startDate\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.result.startDate).to.eql(\"2018-09-12\");",
											"});",
											"pm.test(\"Verify returned active\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.result.active).to.eql(\"true\");",
											"});",
											"",
											"pm.test(\"Verify returned location details\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.result.location.locationDbId).to.eql(\"9001\");",
											" pm.expect(jsonData.result.location.locationType).to.eql(\"International Agricultural Research Center\");     ",
											" pm.expect(jsonData.result.location.name).to.eql(\"Africa Rice Centre\");",
											" pm.expect(jsonData.result.location.abbreviation).to.eql(\"WARDA\"); ",
											" pm.expect(jsonData.result.location.countryCode).to.eql(\"CIV\"); ",
											" pm.expect(jsonData.result.location.countryName).to.eql(\"Côte D'Ivoire\"); ",
											" pm.expect(jsonData.result.location.latitude).to.eql(7.68); ",
											" pm.expect(jsonData.result.location.longitude).to.eql(-5.03);     ",
											" pm.expect(jsonData.result.location.altitude).to.eql(375.0);     ",
											" pm.expect(jsonData.result.location.additionalInfo.province).to.eql(\"Bouaké\");  ",
											"            ",
											"});",
											"",
											"pm.test(\"Verify returned environmentParameter (SITE_SOIL_PH)\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.result.environmentParameters[0].parameterName).to.eql(\"SITE_SOIL_PH\");",
											" pm.expect(jsonData.result.environmentParameters[0].description).to.eql(\"Soil acidity - ph meter (pH)\");",
											" pm.expect(jsonData.result.environmentParameters[0].unit).to.eql(\"pH\");",
											" pm.expect(jsonData.result.environmentParameters[0].value).to.eql(\"1.4\");",
											"    ",
											"});",
											"",
											"pm.test(\"Verify returned environmentParameter (Selection Trait)\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.result.environmentParameters[1].parameterName).to.eql(\"Selection_Trait\");",
											" pm.expect(jsonData.result.environmentParameters[1].description).to.eql(\"Values indicate trait(s) under selection in a particular advancement process\");",
											" pm.expect(jsonData.result.environmentParameters[1].unit).to.eql(\"STCodes\");",
											" pm.expect(jsonData.result.environmentParameters[1].value).to.eql(\"DT\");",
											"    ",
											"});",
											"",
											"pm.test(\"Verify returned environmentParameter (NREP)\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.result.environmentParameters[2].parameterName).to.eql(\"NREP\");",
											" pm.expect(jsonData.result.environmentParameters[2].description).to.eql(\"Number of replications in an experiment\");",
											" pm.expect(jsonData.result.environmentParameters[2].unit).to.eql(\"Number\");",
											" pm.expect(jsonData.result.environmentParameters[2].value).to.eql(\"2\");",
											"    ",
											"});",
											"",
											"pm.test(\"Verify returned environmentParameter (LOCATION_ABBR)\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.result.environmentParameters[3].parameterName).to.eql(\"LOCATION_ABBR\");",
											" pm.expect(jsonData.result.environmentParameters[3].description).to.eql(\"Location code - assigned (LOC_ABBR)\");",
											" pm.expect(jsonData.result.environmentParameters[3].unit).to.eql(\"LOC_ABBR\");",
											" pm.expect(jsonData.result.environmentParameters[3].value).to.eql(\"WARDA-X\");",
											"    ",
											"});",
											"",
											"pm.test(\"Verify returned environmentParameter (Crop_Season_Start_Month)\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.result.environmentParameters[4].parameterName).to.eql(\"Crop_Season_Start_Month\");",
											" pm.expect(jsonData.result.environmentParameters[4].description).to.eql(\"Crop season start month (YYYYMM)\");",
											" pm.expect(jsonData.result.environmentParameters[4].unit).to.eql(\"Year-month (yyyymm)\");",
											" pm.expect(jsonData.result.environmentParameters[4].value).to.eql(\"201805\");",
											"    ",
											"});",
											"",
											"pm.test(\"Verify returned environmentParameter (CROP_SEASON)\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.result.environmentParameters[5].parameterName).to.eql(\"CROP_SEASON\");",
											" pm.expect(jsonData.result.environmentParameters[5].description).to.eql(\"Season - Assigned (Text)\");",
											" pm.expect(jsonData.result.environmentParameters[5].unit).to.eql(\"Text\");",
											" pm.expect(jsonData.result.environmentParameters[5].value).to.eql(\"Summer\");",
											"    ",
											"});",
											"",
											"pm.test(\"Verify returned environmentParameter (Crop_season_Code)\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.result.environmentParameters[6].parameterName).to.eql(\"Crop_season_Code\");",
											" pm.expect(jsonData.result.environmentParameters[6].description).to.eql(\"Season - Assigned (Code)\");",
											" pm.expect(jsonData.result.environmentParameters[6].unit).to.eql(\"Code of Crop_season_Code\");",
											" pm.expect(jsonData.result.environmentParameters[6].value).to.eql(\"10290\");",
											"    ",
											"});",
											"",
											"pm.test(\"Verify returned experimentalDesign\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.result.experimentalDesign.description).to.eql(\"Randomized complete block design\");",
											"    ",
											"});",
											"",
											"pm.test(\"Verify returned contacts\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.result.contacts[0].contactDbId).to.eql(120);",
											" pm.expect(jsonData.result.contacts[0].name).to.eql(\"API Test User\");",
											" pm.expect(jsonData.result.contacts[0].email).to.eql(\"api@mailinator.com\");",
											" pm.expect(jsonData.result.contacts[0].type).to.eql(\"\");",
											" pm.expect(jsonData.result.contacts[0].orcid).to.eql(\"\");",
											"    ",
											"});",
											"",
											"pm.test(\"Verify returned additionalInfo\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(pm.response.text()).to.include(\"Principal investigator - assigned (DBCV)\");",
											" pm.expect(pm.response.text()).to.include(\"API Test User\");",
											"    ",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b12e7093-3a73-4822-886e-4f70ad0184c8",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/studies/{{studyDbId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"studies",
										"{{studyDbId}}"
									]
								},
								"description": "GET /{crop}/brapi/v2/studies/{studyDbId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered non-existing studyDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4c47548f-00fc-44d2-8af2-c642fc9478e1",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Verify returned body\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData).to.eql(null);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e23d31bb-c2b6-4807-ab4e-eec715a07c2b",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/studies/{{non_existing_study_id}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"studies",
										"{{non_existing_study_id}}"
									]
								},
								"description": "GET /{crop}/brapi/v2/studies/{studyDbId}"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "GET ​/{crop}​/brapi​/v1​/studies​/{studyDbId}​/observationvariables",
					"item": [
						{
							"name": "Verify response code and body when entered valid studyDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1034c148-a155-432a-9c70-7906104e97d4",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"pm.test(\"Verify returned metadata\", function () {",
											"",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(3);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Verify returned studyDbId\", function () {",
											" pm.expect(jsonData.result.studyDbId).to.eql(pm.environment.get(\"studyDbId\"));",
											"});",
											"",
											"pm.test(\"Verify returned observationVariableName (Grain_yield) basic details\", function () {",
											"    pm.expect(jsonData.result.data[0].crop).to.eql(\"testdata\");",
											"    pm.expect(jsonData.result.data[0].date).to.eql(null);",
											"    pm.expect(jsonData.result.data[0].defaultValue).to.eql(\"\");",
											"    pm.expect(jsonData.result.data[0].documentationURL).to.eql(null);",
											"    pm.expect(jsonData.result.data[0].growthStage).to.eql(null);",
											"    pm.expect(jsonData.result.data[0].institution).to.eql(null);",
											"    pm.expect(jsonData.result.data[0].language).to.eql(null);",
											"    pm.expect(jsonData.result.data[0].name).to.eql(\"Grain_yield\");",
											"    pm.expect(jsonData.result.data[0].observationVariableDbId).to.eql(pm.environment.get(\"study_grainYield_cvterm_id\"));",
											"    pm.expect(jsonData.result.data[0].observationVariableName).to.eql(\"Grain_yield\");",
											"    pm.expect(jsonData.result.data[0].ontologyDbId).to.eql(null);",
											"    pm.expect(jsonData.result.data[0].ontologyName).to.eql(null);",
											"    pm.expect(jsonData.result.data[0].scientist).to.eql(null);",
											"    pm.expect(jsonData.result.data[0].status).to.eql(null);",
											"    pm.expect(jsonData.result.data[0].submissionTimestamp).to.eql(null);",
											"    pm.expect(jsonData.result.data[0].synonyms).to.eql([]);",
											"    pm.expect(jsonData.result.data[0].xref).to.eql(null);",
											"});",
											"pm.test(\"Verify returned observationVariableName (Grain_yield) scale details\", function () {    ",
											"    //Verify scale details",
											"    pm.expect(jsonData.result.data[0].scale.dataType).to.eql(\"Numerical\");",
											"    pm.expect(jsonData.result.data[0].scale.decimalPlaces).to.eql(4);",
											"    pm.expect(jsonData.result.data[0].scale.name).to.eql(\"Kg/ha\");",
											"    pm.expect(jsonData.result.data[0].scale.scaleDbId).to.eql(\"6090\");",
											"    pm.expect(jsonData.result.data[0].scale.scaleName).to.eql(\"Kg/ha\");",
											"    pm.expect(jsonData.result.data[0].scale.xref).to.eql(null);",
											"    pm.expect(jsonData.result.data[0].scale.validValues.categories).to.eql([]);",
											"    pm.expect(jsonData.result.data[0].scale.validValues.max).to.eql(null);",
											"    pm.expect(jsonData.result.data[0].scale.validValues.min).to.eql(null);",
											"    pm.expect(jsonData.result.data[0].scale.ontologyReference.documentationLinks[0].type).to.eql(\"WEBPAGE\");",
											"    pm.expect(jsonData.result.data[0].scale.ontologyReference.documentationLinks[0].url).to.eql(\"https://cropontology.org\");",
											"    pm.expect(jsonData.result.data[0].scale.ontologyReference.ontologyDbId).to.eql(null);",
											"    pm.expect(jsonData.result.data[0].scale.ontologyReference.ontologyName).to.eql(\"Kg/ha\");",
											"    pm.expect(jsonData.result.data[0].scale.ontologyReference.version).to.eql(null);",
											"    ",
											"});",
											"    pm.test(\"Verify returned observationVariableName (Grain_yield) trait details\", function () {  ",
											"    //Verify trait details",
											"        pm.expect(jsonData.result.data[0].trait.attribute).to.eql(null);",
											"        pm.expect(jsonData.result.data[0].trait.class).to.eql(\"Agronomic\");",
											"        pm.expect(jsonData.result.data[0].trait.description).to.eql(\"Yield\");",
											"        pm.expect(jsonData.result.data[0].trait.entity).to.eql(null);",
											"        pm.expect(jsonData.result.data[0].trait.mainAbbreviation).to.eql(null);",
											"        pm.expect(jsonData.result.data[0].trait.name).to.eql(\"Yield\");",
											"        pm.expect(jsonData.result.data[0].trait.status).to.eql(\"Active\");",
											"        pm.expect(jsonData.result.data[0].trait.synonyms).to.eql([]);",
											"        pm.expect(jsonData.result.data[0].trait.traitDbId).to.eql(\"15009\");",
											"        pm.expect(jsonData.result.data[0].trait.traitName).to.eql(\"Yield\");",
											"        pm.expect(jsonData.result.data[0].trait.xref).to.eql(\"null\");",
											"        pm.expect(jsonData.result.data[0].trait.ontologyReference.documentationLinks[0].type).to.eql(\"WEBPAGE\");",
											"        pm.expect(jsonData.result.data[0].trait.ontologyReference.documentationLinks[0].url).to.eql(\"https://cropontology.org\");",
											"        pm.expect(jsonData.result.data[0].trait.ontologyReference.ontologyDbId).to.eql(\"null\");",
											"        pm.expect(jsonData.result.data[0].trait.ontologyReference.ontologyName).to.eql(\"Yield\");",
											"        pm.expect(jsonData.result.data[0].trait.ontologyReference.version).to.eql(null);",
											"        ",
											"    });",
											"    pm.test(\"Verify returned observationVariableName (Grain_yield) method details\", function () {  ",
											" ",
											"    //Verify method details",
											"    pm.expect(jsonData.result.data[0].method.class).to.eql(null);",
											"    pm.expect(jsonData.result.data[0].method.description).to.eql(\"Dry and weigh\");",
											"    pm.expect(jsonData.result.data[0].method.formula).to.eql(\"{{18110}}+10\");",
											"    pm.expect(jsonData.result.data[0].method.methodDbId).to.eql(\"16000\");",
											"    pm.expect(jsonData.result.data[0].method.methodName).to.eql(\"Dry and weigh\");",
											"    pm.expect(jsonData.result.data[0].method.name).to.eql(\"Dry and weigh\");",
											"    pm.expect(jsonData.result.data[0].method.reference).to.eql(null);",
											"    });",
											"  pm.test(\"Verify returned observationVariableName (Grain_yield) or details\", function () {  ",
											" ",
											"    pm.expect(jsonData.result.data[0].method.ontologyReference.documentationLinks[0].type).to.eql(\"WEBPAGE\");",
											"    pm.expect(jsonData.result.data[0].method.ontologyReference.documentationLinks[0].url).to.eql(\"https://cropontology.org\");",
											"    pm.expect(jsonData.result.data[0].method.ontologyReference.ontologyDbId).to.eql(null);",
											"    pm.expect(jsonData.result.data[0].method.ontologyReference.ontologyName).to.eql(\"Dry and weigh\");pm.expect(jsonData.result.data[0].method.ontologyReference.version).to.eql(null);",
											"});",
											"    ",
											"pm.test(\"Verify returned observationVariableName (Biomas_yield) basic details\", function () {",
											"    pm.expect(jsonData.result.data[1].crop).to.eql(\"testdata\");",
											"    pm.expect(jsonData.result.data[1].date).to.eql(null);",
											"    pm.expect(jsonData.result.data[1].defaultValue).to.eql(\"\");",
											"    pm.expect(jsonData.result.data[1].documentationURL).to.eql(null);",
											"    pm.expect(jsonData.result.data[1].growthStage).to.eql(null);",
											"    pm.expect(jsonData.result.data[1].institution).to.eql(null);",
											"    pm.expect(jsonData.result.data[1].language).to.eql(null);",
											"    pm.expect(jsonData.result.data[1].name).to.eql(\"Biomas_yield\");",
											"    pm.expect(jsonData.result.data[1].observationVariableDbId).to.eql(pm.environment.get(\"study_biomass_cvterm_id\"));",
											"    pm.expect(jsonData.result.data[1].observationVariableName).to.eql(\"Biomas_yield\");",
											"    pm.expect(jsonData.result.data[1].ontologyDbId).to.eql(null);",
											"    pm.expect(jsonData.result.data[1].ontologyName).to.eql(null);",
											"    pm.expect(jsonData.result.data[1].scientist).to.eql(null);",
											"    pm.expect(jsonData.result.data[1].status).to.eql(null);",
											"    pm.expect(jsonData.result.data[1].submissionTimestamp).to.eql(null);",
											"    pm.expect(jsonData.result.data[1].synonyms).to.eql([]);",
											"    pm.expect(jsonData.result.data[1].xref).to.eql(null);",
											"    ",
											"});",
											"    ",
											"pm.test(\"Verify returned observationVariableName (Biomas_yield) scale details\", function () {",
											"    //Verify scale details",
											"    pm.expect(jsonData.result.data[1].scale.dataType).to.eql(\"Numerical\");",
											"    pm.expect(jsonData.result.data[1].scale.decimalPlaces).to.eql(4);",
											"    pm.expect(jsonData.result.data[1].scale.name).to.eql(\"t/ha\");",
											"    pm.expect(jsonData.result.data[1].scale.scaleDbId).to.eql(\"17010\");",
											"    pm.expect(jsonData.result.data[1].scale.scaleName).to.eql(\"t/ha\");",
											"    pm.expect(jsonData.result.data[1].scale.xref).to.eql(null);",
											"    pm.expect(jsonData.result.data[1].scale.validValues.categories).to.eql([]);",
											"    pm.expect(jsonData.result.data[1].scale.validValues.max).to.eql(null);",
											"    pm.expect(jsonData.result.data[1].scale.validValues.min).to.eql(null);",
											"    pm.expect(jsonData.result.data[1].scale.ontologyReference.documentationLinks[0].type).to.eql(\"WEBPAGE\");",
											"    pm.expect(jsonData.result.data[1].scale.ontologyReference.documentationLinks[0].url).to.eql(\"https://cropontology.org\");",
											"    pm.expect(jsonData.result.data[1].scale.ontologyReference.ontologyDbId).to.eql(null);",
											"    pm.expect(jsonData.result.data[1].scale.ontologyReference.ontologyName).to.eql(\"t/ha\");",
											"    pm.expect(jsonData.result.data[1].scale.ontologyReference.version).to.eql(null);",
											"    ",
											"});",
											"    ",
											"pm.test(\"Verify returned observationVariableName (Biomas_yield) ontology reference details\", function () {",
											"    //ontology reference",
											"    pm.expect(jsonData.result.data[1].ontologyReference).to.eql(null);",
											" /*   pm.expect(jsonData.result.data[1].ontologyReference.documentationLinks[0].url).to.eql(\"https://cropontology.org\");",
											"    pm.expect(jsonData.result.data[1].ontologyReference.ontologyDbId).to.eql(null);",
											"    pm.expect(jsonData.result.data[1].ontologyReference.ontologyName).to.eql(null);",
											"    pm.expect(jsonData.result.data[1].ontologyReference.version).to.eql(null);*/",
											"    ",
											"});",
											"    ",
											"pm.test(\"Verify returned observationVariableName (Biomas_yield) trait details\", function () {",
											"    //Verify trait details",
											"        pm.expect(jsonData.result.data[1].trait.attribute).to.eql(null);",
											"        pm.expect(jsonData.result.data[1].trait.class).to.eql(\"Agronomic\");",
											"        pm.expect(jsonData.result.data[1].trait.description).to.eql(\"Biomass\");",
											"        pm.expect(jsonData.result.data[1].trait.entity).to.eql(null);",
											"        pm.expect(jsonData.result.data[1].trait.mainAbbreviation).to.eql(null);",
											"        pm.expect(jsonData.result.data[1].trait.name).to.eql(\"Biomass\");",
											"        pm.expect(jsonData.result.data[1].trait.status).to.eql(\"Active\");",
											"        pm.expect(jsonData.result.data[1].trait.synonyms).to.eql([]);",
											"        pm.expect(jsonData.result.data[1].trait.traitDbId).to.eql(\"15010\");",
											"        pm.expect(jsonData.result.data[1].trait.traitName).to.eql(\"Biomass\");",
											"        pm.expect(jsonData.result.data[1].trait.xref).to.eql(\"null\");",
											"        pm.expect(jsonData.result.data[1].trait.ontologyReference.documentationLinks[0].type).to.eql(\"WEBPAGE\");",
											"        pm.expect(jsonData.result.data[1].trait.ontologyReference.documentationLinks[0].url).to.eql(\"https://cropontology.org\");",
											"        pm.expect(jsonData.result.data[1].trait.ontologyReference.ontologyDbId).to.eql(\"null\");",
											"        pm.expect(jsonData.result.data[1].trait.ontologyReference.ontologyName).to.eql(\"Biomass\");",
											"        pm.expect(jsonData.result.data[1].trait.ontologyReference.version).to.eql(null);",
											"});",
											"    ",
											"pm.test(\"Verify returned observationVariableName (Biomas_yield) method details\", function () { ",
											"    //Verify method details",
											"    pm.expect(jsonData.result.data[1].method.class).to.eql(null);",
											"    pm.expect(jsonData.result.data[1].method.description).to.eql(\"Dry and weigh\");",
											"    pm.expect(jsonData.result.data[1].method.formula).to.eql(\"{{100020}}+5\");",
											"    pm.expect(jsonData.result.data[1].method.methodDbId).to.eql(\"16000\");",
											"    pm.expect(jsonData.result.data[1].method.methodName).to.eql(\"Dry and weigh\");",
											"    pm.expect(jsonData.result.data[1].method.name).to.eql(\"Dry and weigh\");",
											"    pm.expect(jsonData.result.data[1].method.reference).to.eql(null);",
											"    pm.expect(jsonData.result.data[1].method.ontologyReference.documentationLinks[0].type).to.eql(\"WEBPAGE\");",
											"    pm.expect(jsonData.result.data[1].method.ontologyReference.documentationLinks[0].url).to.eql(\"https://cropontology.org\");",
											"    pm.expect(jsonData.result.data[1].method.ontologyReference.ontologyDbId).to.eql(null);",
											"    pm.expect(jsonData.result.data[1].method.ontologyReference.ontologyName).to.eql(\"Dry and weigh\");pm.expect(jsonData.result.data[1].method.ontologyReference.version).to.eql(null);",
											"});",
											"",
											"pm.test(\"Verify returned observationVariableName (Grain_size) basic details\", function () {",
											"    pm.expect(jsonData.result.data[2].crop).to.eql(\"testdata\");",
											"    pm.expect(jsonData.result.data[2].date).to.eql(null);",
											"    pm.expect(jsonData.result.data[2].defaultValue).to.eql(\"\");",
											"    pm.expect(jsonData.result.data[2].documentationURL).to.eql(null);",
											"    pm.expect(jsonData.result.data[2].growthStage).to.eql(null);",
											"    pm.expect(jsonData.result.data[2].institution).to.eql(null);",
											"    pm.expect(jsonData.result.data[2].language).to.eql(null);",
											"    pm.expect(jsonData.result.data[2].name).to.eql(\"Grain_size\");",
											"    pm.expect(jsonData.result.data[2].observationVariableDbId).to.eql(pm.environment.get(\"grain_size_cvterm_id\"));",
											"    pm.expect(jsonData.result.data[2].observationVariableName).to.eql(\"Grain_size\");",
											"    pm.expect(jsonData.result.data[2].ontologyDbId).to.eql(null);",
											"    pm.expect(jsonData.result.data[2].ontologyName).to.eql(null);",
											"    pm.expect(jsonData.result.data[2].scientist).to.eql(null);",
											"    pm.expect(jsonData.result.data[2].status).to.eql(null);",
											"    pm.expect(jsonData.result.data[2].submissionTimestamp).to.eql(null);",
											"    pm.expect(jsonData.result.data[2].synonyms).to.eql([]);",
											"    pm.expect(jsonData.result.data[2].xref).to.eql(null);",
											"});",
											"",
											"pm.test(\"Verify returned observationVariableName (Grain_size) scale details\", function () {    ",
											"    //Verify scale details",
											"    pm.expect(jsonData.result.data[2].scale.dataType).to.eql(\"Numerical\");",
											"    pm.expect(jsonData.result.data[2].scale.decimalPlaces).to.eql(4);",
											"    pm.expect(jsonData.result.data[2].scale.name).to.eql(\"g\");",
											"    pm.expect(jsonData.result.data[2].scale.scaleDbId).to.eql(\"6087\");",
											"    pm.expect(jsonData.result.data[2].scale.scaleName).to.eql(\"g\");",
											"    pm.expect(jsonData.result.data[2].scale.xref).to.eql(null);",
											"    pm.expect(jsonData.result.data[2].scale.validValues.categories).to.eql([]);",
											"    pm.expect(jsonData.result.data[2].scale.validValues.max).to.eql(null);",
											"    pm.expect(jsonData.result.data[2].scale.validValues.min).to.eql(null);",
											"    pm.expect(jsonData.result.data[2].scale.ontologyReference.documentationLinks[0].type).to.eql(\"WEBPAGE\");",
											"    pm.expect(jsonData.result.data[2].scale.ontologyReference.documentationLinks[0].url).to.eql(\"https://cropontology.org\");",
											"    pm.expect(jsonData.result.data[2].scale.ontologyReference.ontologyDbId).to.eql(null);",
											"    pm.expect(jsonData.result.data[2].scale.ontologyReference.ontologyName).to.eql(\"g\");",
											"    pm.expect(jsonData.result.data[2].scale.ontologyReference.version).to.eql(null);",
											"});",
											"",
											"pm.test(\"Verify returned observationVariableName (Grain_size) ontology reference details\", function () {    ",
											"    //ontology reference",
											"    pm.expect(jsonData.result.data[2].ontologyReference).to.eql(null);",
											"});",
											"pm.test(\"Verify returned observationVariableName (Grain_size) trait details\", function () {",
											"    //Verify trait details",
											"        pm.expect(jsonData.result.data[2].trait.attribute).to.eql(null);",
											"        pm.expect(jsonData.result.data[2].trait.class).to.eql(\"Agronomic\");",
											"        pm.expect(jsonData.result.data[2].trait.description).to.eql(\"Grain size\");",
											"        pm.expect(jsonData.result.data[2].trait.entity).to.eql(null);",
											"        pm.expect(jsonData.result.data[2].trait.mainAbbreviation).to.eql(null);",
											"        pm.expect(jsonData.result.data[2].trait.name).to.eql(\"Grain size\");",
											"        pm.expect(jsonData.result.data[2].trait.status).to.eql(\"Active\");",
											"        pm.expect(jsonData.result.data[2].trait.synonyms).to.eql([]);",
											"        pm.expect(jsonData.result.data[2].trait.traitDbId).to.eql(\"15110\");",
											"        pm.expect(jsonData.result.data[2].trait.traitName).to.eql(\"Grain size\");",
											"        pm.expect(jsonData.result.data[2].trait.xref).to.eql(\"null\");",
											"        pm.expect(jsonData.result.data[2].trait.ontologyReference.documentationLinks[0].type).to.eql(\"WEBPAGE\");",
											"        pm.expect(jsonData.result.data[2].trait.ontologyReference.documentationLinks[0].url).to.eql(\"https://cropontology.org\");",
											"        pm.expect(jsonData.result.data[2].trait.ontologyReference.ontologyDbId).to.eql(\"null\");",
											"        pm.expect(jsonData.result.data[2].trait.ontologyReference.ontologyName).to.eql(\"Grain size\");",
											"        pm.expect(jsonData.result.data[2].trait.ontologyReference.version).to.eql(null);",
											"});",
											"",
											"pm.test(\"Verify returned observationVariableName (Grain_size) method details\", function () {",
											"    //Verify method details",
											"    pm.expect(jsonData.result.data[2].method.class).to.eql(null);",
											"    pm.expect(jsonData.result.data[2].method.description).to.eql(\"Weigh 1000 dry grains\");",
											"    pm.expect(jsonData.result.data[2].method.formula).to.eql(\"null\");",
											"    pm.expect(jsonData.result.data[2].method.methodDbId).to.eql(\"16070\");",
											"    pm.expect(jsonData.result.data[2].method.methodName).to.eql(\"Weigh 1000 dry grains\");",
											"    pm.expect(jsonData.result.data[2].method.name).to.eql(\"Weigh 1000 dry grains\");",
											"    pm.expect(jsonData.result.data[2].method.reference).to.eql(null);",
											"    pm.expect(jsonData.result.data[2].method.ontologyReference.documentationLinks[0].type).to.eql(\"WEBPAGE\");",
											"    pm.expect(jsonData.result.data[2].method.ontologyReference.documentationLinks[0].url).to.eql(\"https://cropontology.org\");",
											"    pm.expect(jsonData.result.data[2].method.ontologyReference.ontologyDbId).to.eql(null);",
											"    pm.expect(jsonData.result.data[2].method.ontologyReference.ontologyName).to.eql(\"Weigh 1000 dry grains\");pm.expect(jsonData.result.data[2].method.ontologyReference.version).to.eql(null);",
											"});",
											"pm.test(\"Verify returned trialName\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.result.trialName).to.eql(\"Randomized Trial 20180003\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "dbfaac26-5cd0-41ee-a33e-b5f8c53e876d",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/studies/{{studyDbId}}/observationvariables",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"studies",
										"{{studyDbId}}",
										"observationvariables"
									]
								},
								"description": "GET /{crop}​/brapi​/v1​/studies​/{studyDbId}​/observationvariables"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered pagination details",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5e3fa5be-d641-4af3-b942-a71ef12a3517",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Verify returned metadata\", function () {",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(10000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(3);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Verify returned studyDbId\", function () {",
											" pm.expect(jsonData.result.studyDbId).to.eql(pm.environment.get(\"studyDbId\"));",
											"});",
											"",
											"pm.test(\"Verify returned observationVariableName (Grain_yield) basic details\", function () {",
											"    pm.expect(jsonData.result.data[0].crop).to.eql(\"testdata\");",
											"    pm.expect(jsonData.result.data[0].date).to.eql(null);",
											"    pm.expect(jsonData.result.data[0].defaultValue).to.eql(\"\");",
											"    pm.expect(jsonData.result.data[0].documentationURL).to.eql(null);",
											"    pm.expect(jsonData.result.data[0].growthStage).to.eql(null);",
											"    pm.expect(jsonData.result.data[0].institution).to.eql(null);",
											"    pm.expect(jsonData.result.data[0].language).to.eql(null);",
											"    pm.expect(jsonData.result.data[0].name).to.eql(\"Grain_yield\");",
											"    pm.expect(jsonData.result.data[0].observationVariableDbId).to.eql(pm.environment.get(\"study_grainYield_cvterm_id\"));",
											"    pm.expect(jsonData.result.data[0].observationVariableName).to.eql(\"Grain_yield\");",
											"    pm.expect(jsonData.result.data[0].ontologyDbId).to.eql(null);",
											"    pm.expect(jsonData.result.data[0].ontologyName).to.eql(null);",
											"    pm.expect(jsonData.result.data[0].scientist).to.eql(null);",
											"    pm.expect(jsonData.result.data[0].status).to.eql(null);",
											"    pm.expect(jsonData.result.data[0].submissionTimestamp).to.eql(null);",
											"    pm.expect(jsonData.result.data[0].synonyms).to.eql([]);",
											"    pm.expect(jsonData.result.data[0].xref).to.eql(null);",
											"});",
											"",
											"pm.test(\"Verify returned observationVariableName (Grain_yield) scale details\", function () {",
											"    //Verify scale details",
											"    pm.expect(jsonData.result.data[0].scale.dataType).to.eql(\"Numerical\");",
											"    pm.expect(jsonData.result.data[0].scale.decimalPlaces).to.eql(4);",
											"    pm.expect(jsonData.result.data[0].scale.name).to.eql(\"Kg/ha\");",
											"    pm.expect(jsonData.result.data[0].scale.scaleDbId).to.eql(\"6090\");",
											"    pm.expect(jsonData.result.data[0].scale.scaleName).to.eql(\"Kg/ha\");",
											"    pm.expect(jsonData.result.data[0].scale.xref).to.eql(null);",
											"    pm.expect(jsonData.result.data[0].scale.validValues.categories).to.eql([]);",
											"    pm.expect(jsonData.result.data[0].scale.validValues.max).to.eql(null);",
											"    pm.expect(jsonData.result.data[0].scale.validValues.min).to.eql(null);",
											"    pm.expect(jsonData.result.data[0].scale.ontologyReference.documentationLinks[0].type).to.eql(\"WEBPAGE\");",
											"    pm.expect(jsonData.result.data[0].scale.ontologyReference.documentationLinks[0].url).to.eql(\"https://cropontology.org\");",
											"    pm.expect(jsonData.result.data[0].scale.ontologyReference.ontologyDbId).to.eql(null);",
											"    pm.expect(jsonData.result.data[0].scale.ontologyReference.ontologyName).to.eql(\"Kg/ha\");",
											"    pm.expect(jsonData.result.data[0].scale.ontologyReference.version).to.eql(null);",
											"});",
											"",
											"pm.test(\"Verify returned observationVariableName (Grain_yield) trait details\", function () {",
											"    //Verify trait details",
											"        pm.expect(jsonData.result.data[0].trait.attribute).to.eql(null);",
											"        pm.expect(jsonData.result.data[0].trait.class).to.eql(\"Agronomic\");",
											"        pm.expect(jsonData.result.data[0].trait.description).to.eql(\"Yield\");",
											"        pm.expect(jsonData.result.data[0].trait.entity).to.eql(null);",
											"        pm.expect(jsonData.result.data[0].trait.mainAbbreviation).to.eql(null);",
											"        pm.expect(jsonData.result.data[0].trait.name).to.eql(\"Yield\");",
											"        pm.expect(jsonData.result.data[0].trait.status).to.eql(\"Active\");",
											"        pm.expect(jsonData.result.data[0].trait.synonyms).to.eql([]);",
											"        pm.expect(jsonData.result.data[0].trait.traitDbId).to.eql(\"15009\");",
											"        pm.expect(jsonData.result.data[0].trait.traitName).to.eql(\"Yield\");",
											"        pm.expect(jsonData.result.data[0].trait.xref).to.eql(\"null\");",
											"        pm.expect(jsonData.result.data[0].trait.ontologyReference.documentationLinks[0].type).to.eql(\"WEBPAGE\");",
											"        pm.expect(jsonData.result.data[0].trait.ontologyReference.documentationLinks[0].url).to.eql(\"https://cropontology.org\");",
											"        pm.expect(jsonData.result.data[0].trait.ontologyReference.ontologyDbId).to.eql(\"null\");",
											"        pm.expect(jsonData.result.data[0].trait.ontologyReference.ontologyName).to.eql(\"Yield\");",
											"        pm.expect(jsonData.result.data[0].trait.ontologyReference.version).to.eql(null);",
											"});",
											"",
											"pm.test(\"Verify returned observationVariableName (Grain_yield) method details\", function () {",
											" ",
											"    //Verify method details",
											"    pm.expect(jsonData.result.data[0].method.class).to.eql(null);",
											"    pm.expect(jsonData.result.data[0].method.description).to.eql(\"Dry and weigh\");",
											"    pm.expect(jsonData.result.data[0].method.formula).to.eql(\"{{18110}}+10\");",
											"    pm.expect(jsonData.result.data[0].method.methodDbId).to.eql(\"16000\");",
											"    pm.expect(jsonData.result.data[0].method.methodName).to.eql(\"Dry and weigh\");",
											"    pm.expect(jsonData.result.data[0].method.name).to.eql(\"Dry and weigh\");",
											"    pm.expect(jsonData.result.data[0].method.reference).to.eql(null);",
											"    pm.expect(jsonData.result.data[0].method.ontologyReference.documentationLinks[0].type).to.eql(\"WEBPAGE\");",
											"    pm.expect(jsonData.result.data[0].method.ontologyReference.documentationLinks[0].url).to.eql(\"https://cropontology.org\");",
											"    pm.expect(jsonData.result.data[0].method.ontologyReference.ontologyDbId).to.eql(null);",
											"    pm.expect(jsonData.result.data[0].method.ontologyReference.ontologyName).to.eql(\"Dry and weigh\");pm.expect(jsonData.result.data[0].method.ontologyReference.version).to.eql(null);",
											"});",
											"    ",
											"pm.test(\"Verify returned observationVariableName (Biomas_yield) basic details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[1].crop).to.eql(\"testdata\");",
											"    pm.expect(jsonData.result.data[1].date).to.eql(null);",
											"    pm.expect(jsonData.result.data[1].defaultValue).to.eql(\"\");",
											"    pm.expect(jsonData.result.data[1].documentationURL).to.eql(null);",
											"    pm.expect(jsonData.result.data[1].growthStage).to.eql(null);",
											"    pm.expect(jsonData.result.data[1].institution).to.eql(null);",
											"    pm.expect(jsonData.result.data[1].language).to.eql(null);",
											"    pm.expect(jsonData.result.data[1].name).to.eql(\"Biomas_yield\");",
											"    pm.expect(jsonData.result.data[1].observationVariableDbId).to.eql(pm.environment.get(\"study_biomass_cvterm_id\"));",
											"    pm.expect(jsonData.result.data[1].observationVariableName).to.eql(\"Biomas_yield\");",
											"    pm.expect(jsonData.result.data[1].ontologyDbId).to.eql(null);",
											"    pm.expect(jsonData.result.data[1].ontologyName).to.eql(null);",
											"    pm.expect(jsonData.result.data[1].scientist).to.eql(null);",
											"    pm.expect(jsonData.result.data[1].status).to.eql(null);",
											"    pm.expect(jsonData.result.data[1].submissionTimestamp).to.eql(null);",
											"    pm.expect(jsonData.result.data[1].synonyms).to.eql([]);",
											"    pm.expect(jsonData.result.data[1].xref).to.eql(null);",
											"});",
											"    ",
											"pm.test(\"Verify returned observationVariableName (Biomas_yield) scale details\", function () {   ",
											"    //Verify scale details",
											"    pm.expect(jsonData.result.data[1].scale.dataType).to.eql(\"Numerical\");",
											"    pm.expect(jsonData.result.data[1].scale.decimalPlaces).to.eql(4);",
											"    pm.expect(jsonData.result.data[1].scale.name).to.eql(\"t/ha\");",
											"    pm.expect(jsonData.result.data[1].scale.scaleDbId).to.eql(\"17010\");",
											"    pm.expect(jsonData.result.data[1].scale.scaleName).to.eql(\"t/ha\");",
											"    pm.expect(jsonData.result.data[1].scale.xref).to.eql(null);",
											"    pm.expect(jsonData.result.data[1].scale.validValues.categories).to.eql([]);",
											"    pm.expect(jsonData.result.data[1].scale.validValues.max).to.eql(null);",
											"    pm.expect(jsonData.result.data[1].scale.validValues.min).to.eql(null);",
											"    pm.expect(jsonData.result.data[1].scale.ontologyReference.documentationLinks[0].type).to.eql(\"WEBPAGE\");",
											"    pm.expect(jsonData.result.data[1].scale.ontologyReference.documentationLinks[0].url).to.eql(\"https://cropontology.org\");",
											"    pm.expect(jsonData.result.data[1].scale.ontologyReference.ontologyDbId).to.eql(null);",
											"    pm.expect(jsonData.result.data[1].scale.ontologyReference.ontologyName).to.eql(\"t/ha\");",
											"    pm.expect(jsonData.result.data[1].scale.ontologyReference.version).to.eql(null);",
											"});",
											"    ",
											"pm.test(\"Verify returned observationVariableName (Biomas_yield) ontology reference details\", function () {   ",
											"    //ontology reference",
											"    pm.expect(jsonData.result.data[1].ontologyReference).to.eql(null);",
											"",
											"});",
											"    ",
											"pm.test(\"Verify returned observationVariableName (Biomas_yield) trait details\", function () {",
											"    //Verify trait details",
											"        pm.expect(jsonData.result.data[1].trait.attribute).to.eql(null);",
											"        pm.expect(jsonData.result.data[1].trait.class).to.eql(\"Agronomic\");",
											"        pm.expect(jsonData.result.data[1].trait.description).to.eql(\"Biomass\");",
											"        pm.expect(jsonData.result.data[1].trait.entity).to.eql(null);",
											"        pm.expect(jsonData.result.data[1].trait.mainAbbreviation).to.eql(null);",
											"        pm.expect(jsonData.result.data[1].trait.name).to.eql(\"Biomass\");",
											"        pm.expect(jsonData.result.data[1].trait.status).to.eql(\"Active\");",
											"        pm.expect(jsonData.result.data[1].trait.synonyms).to.eql([]);",
											"        pm.expect(jsonData.result.data[1].trait.traitDbId).to.eql(\"15010\");",
											"        pm.expect(jsonData.result.data[1].trait.traitName).to.eql(\"Biomass\");",
											"        pm.expect(jsonData.result.data[1].trait.xref).to.eql(\"null\");",
											"        pm.expect(jsonData.result.data[1].trait.ontologyReference.documentationLinks[0].type).to.eql(\"WEBPAGE\");",
											"        pm.expect(jsonData.result.data[1].trait.ontologyReference.documentationLinks[0].url).to.eql(\"https://cropontology.org\");",
											"        pm.expect(jsonData.result.data[1].trait.ontologyReference.ontologyDbId).to.eql(\"null\");",
											"        pm.expect(jsonData.result.data[1].trait.ontologyReference.ontologyName).to.eql(\"Biomass\");",
											"        pm.expect(jsonData.result.data[1].trait.ontologyReference.version).to.eql(null);",
											"});",
											"    ",
											"pm.test(\"Verify returned observationVariableName (Biomas_yield) method details\", function () {",
											"    //Verify method details",
											"    pm.expect(jsonData.result.data[1].method.class).to.eql(null);",
											"    pm.expect(jsonData.result.data[1].method.description).to.eql(\"Dry and weigh\");",
											"    pm.expect(jsonData.result.data[1].method.formula).to.eql(\"{{100020}}+5\");",
											"    pm.expect(jsonData.result.data[1].method.methodDbId).to.eql(\"16000\");",
											"    pm.expect(jsonData.result.data[1].method.methodName).to.eql(\"Dry and weigh\");",
											"    pm.expect(jsonData.result.data[1].method.name).to.eql(\"Dry and weigh\");",
											"    pm.expect(jsonData.result.data[1].method.reference).to.eql(null);",
											"    pm.expect(jsonData.result.data[1].method.ontologyReference.documentationLinks[0].type).to.eql(\"WEBPAGE\");",
											"    pm.expect(jsonData.result.data[1].method.ontologyReference.documentationLinks[0].url).to.eql(\"https://cropontology.org\");",
											"    pm.expect(jsonData.result.data[1].method.ontologyReference.ontologyDbId).to.eql(null);",
											"    pm.expect(jsonData.result.data[1].method.ontologyReference.ontologyName).to.eql(\"Dry and weigh\");pm.expect(jsonData.result.data[1].method.ontologyReference.version).to.eql(null);",
											"});",
											"",
											"pm.test(\"Verify returned observationVariableName (Grain_size) basic details\", function () {",
											"    pm.expect(jsonData.result.data[2].crop).to.eql(\"testdata\");",
											"    pm.expect(jsonData.result.data[2].date).to.eql(null);",
											"    pm.expect(jsonData.result.data[2].defaultValue).to.eql(\"\");",
											"    pm.expect(jsonData.result.data[2].documentationURL).to.eql(null);",
											"    pm.expect(jsonData.result.data[2].growthStage).to.eql(null);",
											"    pm.expect(jsonData.result.data[2].institution).to.eql(null);",
											"    pm.expect(jsonData.result.data[2].language).to.eql(null);",
											"    pm.expect(jsonData.result.data[2].name).to.eql(\"Grain_size\");",
											"    pm.expect(jsonData.result.data[2].observationVariableDbId).to.eql(pm.environment.get(\"grain_size_cvterm_id\"));",
											"    pm.expect(jsonData.result.data[2].observationVariableName).to.eql(\"Grain_size\");",
											"    pm.expect(jsonData.result.data[2].ontologyDbId).to.eql(null);",
											"    pm.expect(jsonData.result.data[2].ontologyName).to.eql(null);",
											"    pm.expect(jsonData.result.data[2].scientist).to.eql(null);",
											"    pm.expect(jsonData.result.data[2].status).to.eql(null);",
											"    pm.expect(jsonData.result.data[2].submissionTimestamp).to.eql(null);",
											"    pm.expect(jsonData.result.data[2].synonyms).to.eql([]);",
											"    pm.expect(jsonData.result.data[2].xref).to.eql(null);",
											"});",
											"",
											"pm.test(\"Verify returned observationVariableName (Grain_size) scale details\", function () {    ",
											"    //Verify scale details",
											"    pm.expect(jsonData.result.data[2].scale.dataType).to.eql(\"Numerical\");",
											"    pm.expect(jsonData.result.data[2].scale.decimalPlaces).to.eql(4);",
											"    pm.expect(jsonData.result.data[2].scale.name).to.eql(\"g\");",
											"    pm.expect(jsonData.result.data[2].scale.scaleDbId).to.eql(\"6087\");",
											"    pm.expect(jsonData.result.data[2].scale.scaleName).to.eql(\"g\");",
											"    pm.expect(jsonData.result.data[2].scale.xref).to.eql(null);",
											"    pm.expect(jsonData.result.data[2].scale.validValues.categories).to.eql([]);",
											"    pm.expect(jsonData.result.data[2].scale.validValues.max).to.eql(null);",
											"    pm.expect(jsonData.result.data[2].scale.validValues.min).to.eql(null);",
											"    pm.expect(jsonData.result.data[2].scale.ontologyReference.documentationLinks[0].type).to.eql(\"WEBPAGE\");",
											"    pm.expect(jsonData.result.data[2].scale.ontologyReference.documentationLinks[0].url).to.eql(\"https://cropontology.org\");",
											"    pm.expect(jsonData.result.data[2].scale.ontologyReference.ontologyDbId).to.eql(null);",
											"    pm.expect(jsonData.result.data[2].scale.ontologyReference.ontologyName).to.eql(\"g\");",
											"    pm.expect(jsonData.result.data[2].scale.ontologyReference.version).to.eql(null);",
											"});",
											"",
											"pm.test(\"Verify returned observationVariableName (Grain_size) ontology reference details\", function () {",
											"    //ontology reference",
											"    pm.expect(jsonData.result.data[2].ontologyReference).to.eql(null);",
											"});",
											"",
											"pm.test(\"Verify returned observationVariableName (Grain_size) trait details\", function () {",
											"    //Verify trait details",
											"        pm.expect(jsonData.result.data[2].trait.attribute).to.eql(null);",
											"        pm.expect(jsonData.result.data[2].trait.class).to.eql(\"Agronomic\");",
											"        pm.expect(jsonData.result.data[2].trait.description).to.eql(\"Grain size\");",
											"        pm.expect(jsonData.result.data[2].trait.entity).to.eql(null);",
											"        pm.expect(jsonData.result.data[2].trait.mainAbbreviation).to.eql(null);",
											"        pm.expect(jsonData.result.data[2].trait.name).to.eql(\"Grain size\");",
											"        pm.expect(jsonData.result.data[2].trait.status).to.eql(\"Active\");",
											"        pm.expect(jsonData.result.data[2].trait.synonyms).to.eql([]);",
											"        pm.expect(jsonData.result.data[2].trait.traitDbId).to.eql(\"15110\");",
											"        pm.expect(jsonData.result.data[2].trait.traitName).to.eql(\"Grain size\");",
											"        pm.expect(jsonData.result.data[2].trait.xref).to.eql(\"null\");",
											"        pm.expect(jsonData.result.data[2].trait.ontologyReference.documentationLinks[0].type).to.eql(\"WEBPAGE\");",
											"        pm.expect(jsonData.result.data[2].trait.ontologyReference.documentationLinks[0].url).to.eql(\"https://cropontology.org\");",
											"        pm.expect(jsonData.result.data[2].trait.ontologyReference.ontologyDbId).to.eql(\"null\");",
											"        pm.expect(jsonData.result.data[2].trait.ontologyReference.ontologyName).to.eql(\"Grain size\");",
											"        pm.expect(jsonData.result.data[2].trait.ontologyReference.version).to.eql(null);",
											"});",
											"",
											"pm.test(\"Verify returned observationVariableName (Grain_size) method details\", function () {",
											"    pm.expect(jsonData.result.data[2].method.class).to.eql(null);",
											"    pm.expect(jsonData.result.data[2].method.description).to.eql(\"Weigh 1000 dry grains\");",
											"    pm.expect(jsonData.result.data[2].method.formula).to.eql(\"null\");",
											"    pm.expect(jsonData.result.data[2].method.methodDbId).to.eql(\"16070\");",
											"    pm.expect(jsonData.result.data[2].method.methodName).to.eql(\"Weigh 1000 dry grains\");",
											"    pm.expect(jsonData.result.data[2].method.name).to.eql(\"Weigh 1000 dry grains\");",
											"    pm.expect(jsonData.result.data[2].method.reference).to.eql(null);",
											"    pm.expect(jsonData.result.data[2].method.ontologyReference.documentationLinks[0].type).to.eql(\"WEBPAGE\");",
											"    pm.expect(jsonData.result.data[2].method.ontologyReference.documentationLinks[0].url).to.eql(\"https://cropontology.org\");",
											"    pm.expect(jsonData.result.data[2].method.ontologyReference.ontologyDbId).to.eql(null);",
											"    pm.expect(jsonData.result.data[2].method.ontologyReference.ontologyName).to.eql(\"Weigh 1000 dry grains\");pm.expect(jsonData.result.data[2].method.ontologyReference.version).to.eql(null);",
											"});",
											"pm.test(\"Verify returned trialName\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.result.trialName).to.eql(\"Randomized Trial 20180003\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f835df2f-8623-480e-9fa3-06ec27b206d5",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/studies/{{studyDbId}}/observationvariables?page=0&pageSize=10000",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"studies",
										"{{studyDbId}}",
										"observationvariables"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "10000"
										}
									]
								},
								"description": "GET /{crop}​/brapi​/v1​/studies​/{studyDbId}​/observationvariables"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered pageSize greater than max",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "765717c2-3450-4d6a-9772-ea1f30e86fd1",
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"",
											"pm.test(\"Verify returned error message\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.errors[0].message).to.eql(\"Page size must between 1 and 10000.\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "568536df-0616-49e8-ab87-8b1aecab6ae3",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/studies/{{studyDbId}}/observationvariables?page=0&pageSize=10001",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"studies",
										"{{studyDbId}}",
										"observationvariables"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "10001"
										}
									]
								},
								"description": "GET /{crop}​/brapi​/v1​/studies​/{studyDbId}​/observationvariables"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered non-existing studyDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "83ab1300-f92d-4718-a0fb-450339ca0d2c",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Verify returned error message\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"The requested object studyDbId is not found.\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "73330025-f98e-4862-aa57-16e6c2a703cd",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/studies/{{non_existing_study_id}}/observationvariables",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"studies",
										"{{non_existing_study_id}}",
										"observationvariables"
									]
								},
								"description": "GET /{crop}​/brapi​/v1​/studies​/{studyDbId}​/observationvariables"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "GET ​/{crop}​/brapi​/v1​/studies​/{studyDbId}​/observationunits",
					"item": [
						{
							"name": "Verify response code and body when entered valid studyDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "620391e2-f681-41f7-a881-f9fa85dd1f78",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"var data = jsonData.result.data[0];",
											"pm.test(\"Verify returned metadata\", function () {",
											"",
											"    pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											"    pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											"    pm.expect(jsonData.metadata.pagination.totalCount).to.eql(140);",
											"    pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											"    pm.expect(jsonData.metadata.status).to.eql([]);",
											"    pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"//Verify returned data of the first obs unit",
											"pm.test(\"Check observationUnitDbId\", function () {",
											"    pm.expect(data.observationUnitDbId).to.eql(\"PKWDPtLOzD8Sz\");",
											"});",
											"pm.test(\"Check observationUnitName\", function () {",
											"    pm.expect(data.observationUnitName).to.eql(\"PLOT1\");",
											"});",
											"pm.test(\"Check observationLevel\", function () {",
											"    pm.expect(data.observationLevel).to.eql(\"PLOT\");",
											"});",
											"pm.test(\"Check observationLevels\", function () {",
											"    pm.expect(data.observationLevels).to.eql(\"1\");",
											"});",
											"pm.test(\"Check plotNumber\", function () {",
											"    pm.expect(data.plotNumber).to.eql(\"1\");",
											"});",
											"pm.test(\"Check plantNumber\", function () {",
											"    pm.expect(data.plantNumber).to.eql(null);",
											"});",
											"pm.test(\"Check blockNumber\", function () {",
											"    pm.expect(data.blockNumber).to.eql(null);",
											"});",
											"pm.test(\"Check replicate\", function () {",
											"    pm.expect(data.replicate).to.eql(null);",
											"});",
											"pm.test(\"Check germplasmDbId\", function () {",
											"    pm.expect(data.germplasmDbId).to.eql(\"21\");",
											"});",
											"pm.test(\"Check germplasmName\", function () {",
											"    pm.expect(data.germplasmName).to.eql(\"GP1\");",
											"});",
											"pm.test(\"Check studyDbId\", function () {",
											"    pm.expect(data.studyDbId).to.eql(\"1\");",
											"});",
											"pm.test(\"Check studyName\", function () {",
											"    pm.expect(data.studyName).to.eql(\"Study with Imported Cross Nursery 2018002_1\");",
											"});",
											"pm.test(\"Check studyLocationDbId\", function () {",
											"    pm.expect(data.studyLocationDbId).to.eql(\"9001\");",
											"});",
											"pm.test(\"Check studyLocation\", function () {",
											"    pm.expect(data.studyLocation).to.eql(\"Africa Rice Centre\");",
											"});",
											"pm.test(\"Check programName\", function () {",
											"    pm.expect(data.programName).to.eql(\"API Program\");",
											"});",
											"pm.test(\"Check x\", function () {",
											"    pm.expect(data.x).to.eql(\"1\");",
											"});",
											"pm.test(\"Check y\", function () {",
											"    pm.expect(data.y).to.eql(\"1\");",
											"});",
											"pm.test(\"Check entryType\", function () {",
											"    pm.expect(data.entryType).to.eql(\"Test entry\");",
											"});",
											"pm.test(\"Check entryNumber\", function () {",
											"    pm.expect(data.entryNumber).to.eql(\"1\");",
											"});",
											"//Check first observation   ",
											"pm.test(\"Check observations\", function () {",
											"    var observation = data.observations[0];",
											"    pm.expect(observation.observationDbId).to.eql(\"1424\");",
											"    pm.expect(observation.observationVariableDbId).to.eql(\"18100\");",
											"    pm.expect(observation.observationVariableName).to.eql(\"WeedPressure_number\");",
											"    pm.expect(observation.observationTimeStamp).to.eql(\"2018-10-29T08:43:07.000Z\");",
											"    pm.expect(observation.season).to.eql(null);",
											"    pm.expect(observation.collector).to.eql(\"\");",
											"    pm.expect(observation.value).to.eql(\"21\");",
											"});",
											"pm.test(\"Check instanceNumber\", function () {",
											"    pm.expect(data.instanceNumber).to.eql(\"1\");",
											"});",
											"pm.test(\"Check positionCoordinateX\", function () {",
											"    pm.expect(data.positionCoordinateX).to.eql(\"1\");",
											"});",
											"pm.test(\"Check positionCoordinateY\", function () {",
											"    pm.expect(data.positionCoordinateY).to.eql(\"1\");",
											"});",
											"pm.test(\"Check observationUnitXRef\", function () {",
											"    pm.expect(data.observationUnitXRef).to.eql(null);",
											"});",
											"pm.test(\"Check programDbId\", function () {",
											"    pm.expect(data.programDbId).to.eql(pm.environment.get(\"api_program_id\"));",
											"});",
											"pm.test(\"Check treatments\", function () {",
											"    pm.expect(data.treatments).to.eql([]);",
											"});",
											"pm.test(\"Check trialDbId\", function () {",
											"    pm.expect(data.trialDbId).to.eql(\"3009\");",
											"});",
											"pm.test(\"Check trialName\", function () {",
											"    pm.expect(data.trialName).to.eql(\"Study with Imported Cross Nursery 2018002\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "02a276be-425e-4016-b5c2-3a68d7cced3b",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/studies/{{nursery1StudyDbId}}/observationunits",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"studies",
										"{{nursery1StudyDbId}}",
										"observationunits"
									]
								},
								"description": "GET ​/{crop}​/brapi​/v1​/studies​/{studyDbId}​/observationunits"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered non-existing studyDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b4eecb26-62df-4b1e-acb1-df1f368c54ac",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Verify returned body\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.errors[0].message).to.eql(\"StudyDbId does not exist\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "06dee221-8cb7-4204-9a73-8eb094efaef0",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/studies/{{non_existing_study_id}}/observationunits",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"studies",
										"{{non_existing_study_id}}",
										"observationunits"
									]
								},
								"description": "GET ​/{crop}​/brapi​/v1​/studies​/{studyDbId}​/observationunits"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered plot observationLevel",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ac56b706-b278-47c3-9d1e-d7ac408adc9d",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(20);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"",
											"pm.test(\"Verify returned data of the first obs unit\", function () {",
											"    var jsonData = pm.response.json();",
											"     pm.expect(jsonData.result.data[0].observationUnitDbId).to.eql(\"PKWDPtLOzD8Sz\");",
											"     pm.expect(jsonData.result.data[0].observationUnitName).to.eql(\"PLOT1\");",
											"     pm.expect(jsonData.result.data[0].observationLevel).to.eql(\"PLOT\");",
											"     pm.expect(jsonData.result.data[0].plotNumber).to.eql(\"1\");",
											"     pm.expect(jsonData.result.data[0].plantNumber).to.eql(null);",
											"     pm.expect(jsonData.result.data[0].blockNumber).to.eql(null);",
											"     pm.expect(jsonData.result.data[0].replicate).to.eql(null);",
											"     pm.expect(jsonData.result.data[0].germplasmDbId).to.eql(\"21\");",
											"     pm.expect(jsonData.result.data[0].germplasmName).to.eql(\"GP1\");",
											"     pm.expect(jsonData.result.data[0].studyDbId).to.eql(\"1\");",
											"     pm.expect(jsonData.result.data[0].studyName).to.eql(\"Study with Imported Cross Nursery 2018002_1\");",
											"     pm.expect(jsonData.result.data[0].programName).to.eql(\"API Program\");",
											"     pm.expect(jsonData.result.data[0].entryType).to.eql(\"Test entry\");",
											"     pm.expect(jsonData.result.data[0].entryNumber).to.eql(\"1\");",
											"     ",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e9723fa7-0ffc-47b0-9063-ac362bf313d7",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/studies/{{nursery1StudyDbId}}/observationunits?observationLevel=PLOT",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"studies",
										"{{nursery1StudyDbId}}",
										"observationunits"
									],
									"query": [
										{
											"key": "observationLevel",
											"value": "PLOT"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v1​/studies​/{studyDbId}​/observationunits"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered plant observationLevel",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4afcbfa2-2e57-4ab9-b360-e8ae0e9e1dc7",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(40);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"",
											"pm.test(\"Verify returned data of the first obs unit\", function () {",
											"    var jsonData = pm.response.json();",
											"     pm.expect(jsonData.result.data[0].observationUnitDbId).to.eql(\"2a664296-3d7e-459d-ad77-87a7d5dae8c5\");",
											"     pm.expect(jsonData.result.data[0].observationUnitName).to.eql(null);",
											"     pm.expect(jsonData.result.data[0].observationLevel).to.eql(\"PLANT\");",
											"     pm.expect(jsonData.result.data[0].plotNumber).to.eql(null);",
											"     pm.expect(jsonData.result.data[0].plantNumber).to.eql(null);",
											"     pm.expect(jsonData.result.data[0].blockNumber).to.eql(null);",
											"     pm.expect(jsonData.result.data[0].replicate).to.eql(null);",
											"     pm.expect(jsonData.result.data[0].germplasmDbId).to.eql(\"21\");",
											"     pm.expect(jsonData.result.data[0].germplasmName).to.eql(\"GP1\");",
											"     pm.expect(jsonData.result.data[0].studyDbId).to.eql(\"1\");",
											"     pm.expect(jsonData.result.data[0].studyName).to.eql(\"Study with Imported Cross Nursery 2018002_1\");",
											"     pm.expect(jsonData.result.data[0].programName).to.eql(\"API Program\");",
											"     pm.expect(jsonData.result.data[0].entryType).to.eql(\"Test entry\");",
											"     pm.expect(jsonData.result.data[0].entryNumber).to.eql(\"1\");",
											"     ",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "cec334af-0ca7-47f1-af0a-d87ed9909ed3",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/studies/{{nursery1StudyDbId}}/observationunits?observationLevel=PLANT",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"studies",
										"{{nursery1StudyDbId}}",
										"observationunits"
									],
									"query": [
										{
											"key": "observationLevel",
											"value": "PLANT"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v1​/studies​/{studyDbId}​/observationunits"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered quadrat observationLevel",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7ac2f934-16cb-4208-9e02-a399fbd72854",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(80);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"",
											"pm.test(\"Verify returned data of the first obs unit\", function () {",
											"    var jsonData = pm.response.json();",
											"     pm.expect(jsonData.result.data[0].observationUnitDbId).to.eql(\"0b261507-54ce-4713-b3f2-709736761734\");",
											"     pm.expect(jsonData.result.data[0].observationUnitName).to.eql(null);",
											"     pm.expect(jsonData.result.data[0].observationLevel).to.eql(\"QUADRAT\");",
											"     pm.expect(jsonData.result.data[0].plotNumber).to.eql(null);",
											"     pm.expect(jsonData.result.data[0].plantNumber).to.eql(null);",
											"     pm.expect(jsonData.result.data[0].blockNumber).to.eql(null);",
											"     pm.expect(jsonData.result.data[0].replicate).to.eql(null);",
											"     pm.expect(jsonData.result.data[0].germplasmDbId).to.eql(\"21\");",
											"     pm.expect(jsonData.result.data[0].germplasmName).to.eql(\"GP1\");",
											"     pm.expect(jsonData.result.data[0].studyDbId).to.eql(\"1\");",
											"     pm.expect(jsonData.result.data[0].studyName).to.eql(\"Study with Imported Cross Nursery 2018002_1\");",
											"     pm.expect(jsonData.result.data[0].programName).to.eql(\"API Program\");",
											"     pm.expect(jsonData.result.data[0].entryType).to.eql(\"Test entry\");",
											"     pm.expect(jsonData.result.data[0].entryNumber).to.eql(\"1\");",
											"     ",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "bf8d29c6-891d-46fa-93f5-c9a8b1e3f82f",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/studies/{{nursery1StudyDbId}}/observationunits?observationLevel=QUADRAT",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"studies",
										"{{nursery1StudyDbId}}",
										"observationunits"
									],
									"query": [
										{
											"key": "observationLevel",
											"value": "QUADRAT"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v1​/studies​/{studyDbId}​/observationunits"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid observationLevel",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "45590212-6da8-4c0d-9b99-e30f657ca9c1",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(0);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"",
											"pm.test(\"Verify returned result\", function () {",
											"    var jsonData = pm.response.json();",
											"     pm.expect(jsonData.result.data).to.eql([]);",
											"     ",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d9a205be-5895-470f-a2e5-e49157a9715c",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/studies/{{nursery1StudyDbId}}/observationunits?observationLevel=INVALID",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"studies",
										"{{nursery1StudyDbId}}",
										"observationunits"
									],
									"query": [
										{
											"key": "observationLevel",
											"value": "INVALID"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v1​/studies​/{studyDbId}​/observationunits"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered pagination details",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5a9bbabb-ad79-4b65-867f-c08098c25e67",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(10000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(140);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Verify returned data of the first obs unit\", function () {",
											"    var jsonData = pm.response.json();",
											"     pm.expect(jsonData.result.data[0].observationUnitDbId).to.eql(\"PKWDPtLOzD8Sz\");",
											"     pm.expect(jsonData.result.data[0].observationUnitName).to.eql(\"PLOT1\");",
											"     pm.expect(jsonData.result.data[0].observationLevel).to.eql(\"PLOT\");",
											"     pm.expect(jsonData.result.data[0].plotNumber).to.eql(\"1\");",
											"     pm.expect(jsonData.result.data[0].plantNumber).to.eql(null);",
											"     pm.expect(jsonData.result.data[0].blockNumber).to.eql(null);",
											"     pm.expect(jsonData.result.data[0].replicate).to.eql(null);",
											"     pm.expect(jsonData.result.data[0].germplasmDbId).to.eql(\"21\");",
											"     pm.expect(jsonData.result.data[0].germplasmName).to.eql(\"GP1\");",
											"     pm.expect(jsonData.result.data[0].studyDbId).to.eql(\"1\");",
											"     pm.expect(jsonData.result.data[0].studyName).to.eql(\"Study with Imported Cross Nursery 2018002_1\");",
											"     pm.expect(jsonData.result.data[0].programName).to.eql(\"API Program\");",
											"     pm.expect(jsonData.result.data[0].entryType).to.eql(\"Test entry\");",
											"     pm.expect(jsonData.result.data[0].entryNumber).to.eql(\"1\");",
											"     ",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "7d65498e-5611-446a-a17e-9a4812cfc9b3",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/studies/{{nursery1StudyDbId}}/observationunits?page=0&pageSize=10000",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"studies",
										"{{nursery1StudyDbId}}",
										"observationunits"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "10000"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v1​/studies​/{studyDbId}​/observationunits"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered pageSize greater than max",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2b334561-3802-4395-b1e8-094f0594263c",
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"",
											"pm.test(\"Verify returned error message\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.errors[0].message).to.eql(\"Page size must between 1 and 10000.\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c92c381a-7828-4a59-a05e-6c729ca0b7a3",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/studies/{{nursery1StudyDbId}}/observationunits?page=0&pageSize=10001",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"studies",
										"{{nursery1StudyDbId}}",
										"observationunits"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "10001"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v1​/studies​/{studyDbId}​/observationunits"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "PUT ​/{crop}​/brapi​/v1​/studies​/{studyDbId}​/observations",
					"item": [
						{
							"name": "Verify response code and body when entered valid inputs for numeric trait",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c46f30f3-328b-4698-addd-e0073298c539",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"pm.test(\"Verify returned metadata\", function () {",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(0);",
											" pm.expect(jsonData.metadata.status[0][\"ignored-fields\"]).to.eql(\"collector, observationDbId, observationTimeStamp\");",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Verify returned collector\", function () {",
											" pm.expect(jsonData.result.observations[0].collector).to.eql(\"admin\");",
											"});",
											"pm.test(\"Verify returned observationDbId\", function () {",
											" pm.expect(jsonData.result.observations[0].observationDbId).to.eql(JSON.parse(pm.environment.get(\"study6_observationDbId_weed\")));",
											"});",
											"",
											"pm.test(\"Verify returned observationUnitDbId\", function () {",
											" pm.expect(jsonData.result.observations[0].observationUnitDbId).to.eql(pm.environment.get(\"study6_obs_unit_id\"));",
											"});",
											"",
											"pm.test(\"Verify returned observationVariableDbId\", function () {",
											" pm.expect(jsonData.result.observations[0].observationVariableDbId).to.eql(JSON.parse(pm.environment.get(\"study_weedPressure_cvterm_id\")));",
											"});",
											"",
											"pm.test(\"Verify returned value\", function () {",
											" pm.expect(jsonData.result.observations[0].value).to.eql(\"1000\");",
											"});",
											"",
											"pm.test(\"Verify returned observationTimeStamp\", function () {",
											" pm.expect(jsonData.result.observations[0].observationTimeStamp).to.eql(\"2020-04-27T07:39:11.000Z\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c306936e-a63d-4f7e-a5ad-3ce84ea90ab8",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"observations\": [\r\n    {\r\n      \"collector\": \"admin\",\r\n      \"observationDbId\": {{study6_observationDbId_weed}},\r\n      \"observationTimeStamp\": \"2020-04-27T07:39:11.000Z\",\r\n      \"observationUnitDbId\": \"{{study6_obs_unit_id}}\",\r\n      \"observationVariableDbId\": {{study_weedPressure_cvterm_id}},\r\n      \"value\": \"1000\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/studies/{{study6_studyDbId}}/observations",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"studies",
										"{{study6_studyDbId}}",
										"observations"
									]
								},
								"description": "PUT /{crop}​/brapi​/v1​/studies​/{studyDbId}​/observations"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered valid inputs for categorical trait",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "080c303e-0066-4607-8463-f0edbe59bf08",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"pm.test(\"Verify returned metadata\", function () {",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(0);",
											" pm.expect(jsonData.metadata.status[0][\"ignored-fields\"]).to.eql(\"collector, observationDbId, observationTimeStamp\");",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Verify returned collector\", function () {",
											" pm.expect(jsonData.result.observations[0].collector).to.eql(\"admin\");",
											"});",
											"pm.test(\"Verify returned observationDbId\", function () {",
											" pm.expect(jsonData.result.observations[0].observationDbId).to.eql(JSON.parse(pm.environment.get(\"study6_observationDbId_dispressure\")));",
											"});",
											"",
											"pm.test(\"Verify returned observationUnitDbId\", function () {",
											" pm.expect(jsonData.result.observations[0].observationUnitDbId).to.eql(pm.environment.get(\"study6_obs_unit_id\"));",
											"});",
											"",
											"pm.test(\"Verify returned observationVariableDbId\", function () {",
											" pm.expect(jsonData.result.observations[0].observationVariableDbId).to.eql(JSON.parse(pm.environment.get(\"DisPressure_0_9_cvtermId\")));",
											"});",
											"",
											"pm.test(\"Verify returned value\", function () {",
											" pm.expect(jsonData.result.observations[0].value).to.eql(\"1\");",
											"});",
											"",
											"pm.test(\"Verify returned observationTimeStamp\", function () {",
											" pm.expect(jsonData.result.observations[0].observationTimeStamp).to.eql(\"2020-04-27T07:39:11.000Z\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "143120a2-8611-48a0-a9b1-99714086e23a",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"observations\": [\r\n    {\r\n      \"collector\": \"admin\",\r\n      \"observationDbId\": {{study6_observationDbId_dispressure}},\r\n      \"observationTimeStamp\": \"2020-04-27T07:39:11.000Z\",\r\n      \"observationUnitDbId\": \"{{study6_obs_unit_id}}\",\r\n      \"observationVariableDbId\": {{DisPressure_0_9_cvtermId}},\r\n      \"categoricalValueId\": 19030,\r\n      \"value\": \"1\"\r\n    }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/studies/{{study6_studyDbId}}/observations",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"studies",
										"{{study6_studyDbId}}",
										"observations"
									]
								},
								"description": "PUT /{crop}​/brapi​/v1​/studies​/{studyDbId}​/observations"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered valid inputs for date trait",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd1d7060-4cbd-4331-ae8c-0ff208da8aa6",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"pm.test(\"Verify returned metadata\", function () {",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(0);",
											" pm.expect(jsonData.metadata.status[0][\"ignored-fields\"]).to.eql(\"collector, observationDbId, observationTimeStamp\");",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Verify returned collector\", function () {",
											" pm.expect(jsonData.result.observations[0].collector).to.eql(\"admin\");",
											"});",
											"pm.test(\"Verify returned observationDbId\", function () {",
											" pm.expect(jsonData.result.observations[0].observationDbId).to.eql(JSON.parse(pm.environment.get(\"study6_observationDbId_germitest\")));",
											"});",
											"",
											"pm.test(\"Verify returned observationUnitDbId\", function () {",
											" pm.expect(jsonData.result.observations[0].observationUnitDbId).to.eql(pm.environment.get(\"study6_obs_unit_id\"));",
											"});",
											"",
											"pm.test(\"Verify returned observationVariableDbId\", function () {",
											" pm.expect(jsonData.result.observations[0].observationVariableDbId).to.eql(JSON.parse(pm.environment.get(\"germitest_date_cvtermId\")));",
											"});",
											"",
											"pm.test(\"Verify returned value\", function () {",
											" pm.expect(jsonData.result.observations[0].value).to.eql(\"2020-04-20\");",
											"});",
											"",
											"pm.test(\"Verify returned observationTimeStamp\", function () {",
											" pm.expect(jsonData.result.observations[0].observationTimeStamp).to.eql(\"2020-04-27T07:39:11.000Z\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "98e1a4cb-c9df-4a97-a7e9-e2476adaa9cd",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"observations\": [\r\n    {\r\n      \"collector\": \"admin\",\r\n      \"observationDbId\": {{study6_observationDbId_germitest}},\r\n      \"observationTimeStamp\": \"2020-04-27T07:39:11.000Z\",\r\n      \"observationUnitDbId\": \"{{study6_obs_unit_id}}\",\r\n      \"observationVariableDbId\": {{germitest_date_cvtermId}},\r\n      \"value\": \"2020-04-20\"\r\n    }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/studies/{{study6_studyDbId}}/observations",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"studies",
										"{{study6_studyDbId}}",
										"observations"
									]
								},
								"description": "PUT /{crop}​/brapi​/v1​/studies​/{studyDbId}​/observations"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered valid inputs for character trait",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "43773251-9ccf-4654-94d2-3a683e6de5ff",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"pm.test(\"Verify returned metadata\", function () {",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(0);",
											" pm.expect(jsonData.metadata.status[0][\"ignored-fields\"]).to.eql(\"collector, observationDbId, observationTimeStamp\");",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Verify returned collector\", function () {",
											" pm.expect(jsonData.result.observations[0].collector).to.eql(\"admin\");",
											"});",
											"pm.test(\"Verify returned observationDbId\", function () {",
											" pm.expect(jsonData.result.observations[0].observationDbId).to.eql(JSON.parse(pm.environment.get(\"study6_observationDbId_note\")));",
											"});",
											"",
											"pm.test(\"Verify returned observationUnitDbId\", function () {",
											" pm.expect(jsonData.result.observations[0].observationUnitDbId).to.eql(pm.environment.get(\"study6_obs_unit_id\"));",
											"});",
											"",
											"pm.test(\"Verify returned observationVariableDbId\", function () {",
											" pm.expect(jsonData.result.observations[0].observationVariableDbId).to.eql(JSON.parse(pm.environment.get(\"notes_cvtermId\")));",
											"});",
											"",
											"pm.test(\"Verify returned value\", function () {",
											" pm.expect(jsonData.result.observations[0].value).to.eql(\"This is a test note\");",
											"});",
											"",
											"pm.test(\"Verify returned observationTimeStamp\", function () {",
											" pm.expect(jsonData.result.observations[0].observationTimeStamp).to.eql(\"2020-04-27T07:39:11.000Z\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0af6f38e-edc6-475c-aa90-b50be34b454f",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"observations\": [\r\n    {\r\n      \"collector\": \"admin\",\r\n      \"observationDbId\": {{study6_observationDbId_note}},\r\n      \"observationTimeStamp\": \"2020-04-27T07:39:11.000Z\",\r\n      \"observationUnitDbId\": \"{{study6_obs_unit_id}}\",\r\n      \"observationVariableDbId\": {{notes_cvtermId}},\r\n      \"value\": \"This is a test note\"\r\n    }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/studies/{{study6_studyDbId}}/observations",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"studies",
										"{{study6_studyDbId}}",
										"observations"
									]
								},
								"description": "PUT /{crop}​/brapi​/v1​/studies​/{studyDbId}​/observations"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered valid inputs without optional values",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "05b54ad7-6d6e-4ce9-91a5-087531a0084e",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"pm.test(\"Verify returned metadata\", function () {",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(0);",
											" pm.expect(jsonData.metadata.status[0][\"ignored-fields\"]).to.eql(\"collector, observationDbId, observationTimeStamp\");",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Verify returned collector\", function () {",
											" pm.expect(jsonData.result.observations[0].collector).to.eql(null);",
											"});",
											"pm.test(\"Verify returned observationDbId\", function () {",
											" pm.expect(jsonData.result.observations[0].observationDbId).to.eql(JSON.parse(pm.environment.get(\"study6_observationDbId_weed\")));",
											"});",
											"",
											"pm.test(\"Verify returned observationUnitDbId\", function () {",
											" pm.expect(jsonData.result.observations[0].observationUnitDbId).to.eql(pm.environment.get(\"study6_obs_unit_id\"));",
											"});",
											"",
											"pm.test(\"Verify returned observationVariableDbId\", function () {",
											" pm.expect(jsonData.result.observations[0].observationVariableDbId).to.eql(JSON.parse(pm.environment.get(\"study_weedPressure_cvterm_id\")));",
											"});",
											"",
											"pm.test(\"Verify returned value\", function () {",
											" pm.expect(jsonData.result.observations[0].value).to.eql(\"1001\");",
											"});",
											"",
											"pm.test(\"Verify returned observationTimeStamp\", function () {",
											" pm.expect(jsonData.result.observations[0].observationTimeStamp).to.eql(null);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "84c7bf68-1223-4327-b41d-41496b2d92a8",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"observations\": [\r\n    {\r\n      \"observationUnitDbId\": \"{{study6_obs_unit_id}}\",\r\n      \"observationVariableDbId\": {{study_weedPressure_cvterm_id}},\r\n      \"value\": \"1001\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/studies/{{study6_studyDbId}}/observations",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"studies",
										"{{study6_studyDbId}}",
										"observations"
									]
								},
								"description": "PUT /{crop}​/brapi​/v1​/studies​/{studyDbId}​/observations"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "observation-resource-brapi",
			"item": [
				{
					"name": "GET /{crop}/brapi/v1/observationLevels",
					"item": [
						{
							"name": "Verify response code and body when entered valid crop name",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "5d9a7263-e466-45e1-9c4b-c8c0516098f4",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "e67192bf-8c5d-4c4f-98df-2a14d2844ec1",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify returned observation levels\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0]).to.eql(\"MEANS\");",
											"    pm.expect(jsonData.result.data[1]).to.eql(\"PLOT\");",
											"    pm.expect(jsonData.result.data[2]).to.eql(\"PLANT\");",
											"    pm.expect(jsonData.result.data[3]).to.eql(\"QUADRAT\");",
											"    pm.expect(jsonData.result.data[4]).to.eql(\"TIMESERIES\");",
											"    pm.expect(jsonData.result.data[5]).to.eql(\"CUSTOM\");",
											"   ",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/observationLevels",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"observationLevels"
									]
								},
								"description": "GET /{crop}/brapi/v1/observationLevels"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered page number and page size aside from required parameters",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "9de6b72a-f474-4627-b100-bccf96359708",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "07ac9741-d661-41f3-a642-b3e840155c7b",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify returned pagination\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											"    pm.expect(jsonData.metadata.pagination.pageSize).to.eql(3);",
											"   ",
											"});",
											"pm.test(\"Verify returned observation levels\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0]).to.eql(\"MEANS\");",
											"    pm.expect(jsonData.result.data[1]).to.eql(\"PLOT\");",
											"    pm.expect(jsonData.result.data[2]).to.eql(\"PLANT\");",
											"   ",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/observationLevels?page=0&pageSize=3",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"observationLevels"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "3"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/observationLevels"
							},
							"response": []
						},
						{
							"name": "Verify if user can invoke the call using 10000 as page size",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "2a5951c8-6f1d-4157-aae7-f3a4bf7fcc6d",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "a9b17fb1-b1de-4347-b4b5-053790a19977",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify returned pagination\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											"    pm.expect(jsonData.metadata.pagination.pageSize).to.eql(10000);",
											"   ",
											"});",
											"pm.test(\"Verify returned observation levels\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0]).to.eql(\"MEANS\");",
											"    pm.expect(jsonData.result.data[1]).to.eql(\"PLOT\");",
											"    pm.expect(jsonData.result.data[2]).to.eql(\"PLANT\");",
											"    pm.expect(jsonData.result.data[3]).to.eql(\"QUADRAT\");",
											"    pm.expect(jsonData.result.data[4]).to.eql(\"TIMESERIES\");",
											"    pm.expect(jsonData.result.data[5]).to.eql(\"CUSTOM\");",
											"   ",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/observationLevels?page=0&pageSize=10000",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"observationLevels"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "10000"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/observationLevels"
							},
							"response": []
						},
						{
							"name": "Verify if user can invoke the call using page size that is greater than 10000",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "c25f930c-ec2a-425b-a87d-aa772151e9e9",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "70281caf-8d1f-4bad-9446-fe6d238be15c",
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"",
											"pm.test(\"Verify returned error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Page size must between 1 and 10000.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/observationLevels?page=0&pageSize=10001",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"observationLevels"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "10001"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/observationLevels"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered string input to  page number",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "c80287d4-3bb8-44e9-a82b-63d3c7c190f2",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "95e412e7-aa0d-4e7c-be99-98dc486cf795",
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"pm.test(\"Verify error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"For input string: \\\"asd\\\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/observationLevels?page={{string_input}}&pageSize=3",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"observationLevels"
									],
									"query": [
										{
											"key": "page",
											"value": "{{string_input}}"
										},
										{
											"key": "pageSize",
											"value": "3"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/observationLevels"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered string input to  pageSize",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "e0400493-5b0d-4f6b-8577-003db4575c5d",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "da92e997-287f-4373-96bb-ab061a78d15d",
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"pm.test(\"Verify error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"For input string: \\\"asd\\\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/observationLevels?page=0&pageSize={{string_input}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"observationLevels"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "{{string_input}}"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/observationLevels"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "variable-resource-brapi",
			"item": [
				{
					"name": "Verify response code and body when entered valid crop",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "78c2b7f3-a6ee-4f51-b7ad-136e1c6903ca",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Verify returned metadata\", function () {",
									"    var jsonData = pm.response.json();",
									" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
									" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
									" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(25);",
									" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
									" pm.expect(jsonData.metadata.status).to.eql([]);",
									" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
									"});",
									"",
									"pm.test(\"Verify returned variable (NOTES)\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.result.data[0].crop).to.eql(\"testdata\");",
									"    pm.expect(jsonData.result.data[0].date).to.eql(null);",
									"    pm.expect(jsonData.result.data[0].defaultValue).to.eql(\"\");",
									"    pm.expect(jsonData.result.data[0].documentationURL).to.eql(null);",
									"    pm.expect(jsonData.result.data[0].growthStage).to.eql(null);",
									"    pm.expect(jsonData.result.data[0].institution).to.eql(null);",
									"    pm.expect(jsonData.result.data[0].language).to.eql(null);",
									"    pm.expect(jsonData.result.data[0].name).to.eql(\"NOTES\");",
									"    pm.expect(jsonData.result.data[0].observationVariableDbId).to.eql(pm.environment.get(\"study_notes_cvtermId\"));",
									"    pm.expect(jsonData.result.data[0].observationVariableName).to.eql(\"NOTES\");",
									"    pm.expect(jsonData.result.data[0].ontologyDbId).to.eql(null);",
									"    pm.expect(jsonData.result.data[0].ontologyName).to.eql(null);",
									"    pm.expect(jsonData.result.data[0].scientist).to.eql(null);",
									"    pm.expect(jsonData.result.data[0].status).to.eql(null);",
									"    pm.expect(jsonData.result.data[0].submissionTimestamp).to.eql(null);",
									"    pm.expect(jsonData.result.data[0].synonyms).to.eql([]);",
									"    pm.expect(jsonData.result.data[0].xref).to.eql(null);",
									"    ",
									"    //Verify scale details",
									"    pm.expect(jsonData.result.data[0].scale.dataType).to.eql(\"Text\");",
									"    pm.expect(jsonData.result.data[0].scale.decimalPlaces).to.eql(null);",
									"    pm.expect(jsonData.result.data[0].scale.name).to.eql(\"Text\");",
									"    pm.expect(jsonData.result.data[0].scale.scaleDbId).to.eql(\"6020\");",
									"    pm.expect(jsonData.result.data[0].scale.scaleName).to.eql(\"Text\");",
									"    pm.expect(jsonData.result.data[0].scale.xref).to.eql(null);",
									"    pm.expect(jsonData.result.data[0].scale.validValues.categories).to.eql([]);",
									"    pm.expect(jsonData.result.data[0].scale.validValues.max).to.eql(null);",
									"    pm.expect(jsonData.result.data[0].scale.validValues.min).to.eql(null);",
									"    pm.expect(jsonData.result.data[0].scale.ontologyReference.documentationLinks[0].type).to.eql(\"WEBPAGE\");",
									"    pm.expect(jsonData.result.data[0].scale.ontologyReference.documentationLinks[0].url).to.eql(\"https://cropontology.org\");",
									"    pm.expect(jsonData.result.data[0].scale.ontologyReference.ontologyDbId).to.eql(null);",
									"    pm.expect(jsonData.result.data[0].scale.ontologyReference.ontologyName).to.eql(\"Text\");",
									"    pm.expect(jsonData.result.data[0].scale.ontologyReference.version).to.eql(null);",
									"    ",
									"    //Verify trait details",
									"        pm.expect(jsonData.result.data[0].trait.attribute).to.eql(null);",
									"        pm.expect(jsonData.result.data[0].trait.class).to.eql(\"General\");",
									"        pm.expect(jsonData.result.data[0].trait.description).to.eql(\"Comment\");",
									"        pm.expect(jsonData.result.data[0].trait.entity).to.eql(null);",
									"        pm.expect(jsonData.result.data[0].trait.mainAbbreviation).to.eql(null);",
									"        pm.expect(jsonData.result.data[0].trait.name).to.eql(\"Comment\");",
									"        pm.expect(jsonData.result.data[0].trait.status).to.eql(\"Active\");",
									"        pm.expect(jsonData.result.data[0].trait.synonyms).to.eql([]);",
									"        pm.expect(jsonData.result.data[0].trait.traitDbId).to.eql(\"2065\");",
									"        pm.expect(jsonData.result.data[0].trait.traitName).to.eql(\"Comment\");",
									"        pm.expect(jsonData.result.data[0].trait.xref).to.eql(\"null\");",
									"        pm.expect(jsonData.result.data[0].trait.ontologyReference.documentationLinks[0].type).to.eql(\"WEBPAGE\");",
									"        pm.expect(jsonData.result.data[0].trait.ontologyReference.documentationLinks[0].url).to.eql(\"https://cropontology.org\");",
									"        pm.expect(jsonData.result.data[0].trait.ontologyReference.ontologyDbId).to.eql(\"null\");",
									"        pm.expect(jsonData.result.data[0].trait.ontologyReference.ontologyName).to.eql(\"Comment\");",
									"        pm.expect(jsonData.result.data[0].trait.ontologyReference.version).to.eql(null);",
									" ",
									"    //Verify method details",
									"    pm.expect(jsonData.result.data[0].method.class).to.eql(null);",
									"    pm.expect(jsonData.result.data[0].method.description).to.eql(\"Value recorded after observation\");",
									"    pm.expect(jsonData.result.data[0].method.formula).to.eql(\"null\");",
									"    pm.expect(jsonData.result.data[0].method.methodDbId).to.eql(\"4110\");",
									"    pm.expect(jsonData.result.data[0].method.methodName).to.eql(\"Observed\");",
									"    pm.expect(jsonData.result.data[0].method.name).to.eql(\"Observed\");",
									"    pm.expect(jsonData.result.data[0].method.reference).to.eql(null);",
									"    pm.expect(jsonData.result.data[0].method.ontologyReference.documentationLinks[0].type).to.eql(\"WEBPAGE\");",
									"    pm.expect(jsonData.result.data[0].method.ontologyReference.documentationLinks[0].url).to.eql(\"https://cropontology.org\");",
									"    pm.expect(jsonData.result.data[0].method.ontologyReference.ontologyDbId).to.eql(null);",
									"    pm.expect(jsonData.result.data[0].method.ontologyReference.ontologyName).to.eql(\"Observed\");pm.expect(jsonData.result.data[0].method.ontologyReference.version).to.eql(null);",
									"});",
									"   "
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "2594121f-6dbb-4ba4-91d9-76c7a60e0973",
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{masterToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "X-Auth-Token",
								"type": "text",
								"value": "{{masterToken}}"
							}
						],
						"url": {
							"raw": "{{BMSurl}}/{{crop}}/brapi/v1/variables",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"{{crop}}",
								"brapi",
								"v1",
								"variables"
							]
						},
						"description": "GET ​/{crop}​/brapi​/v1​/variables"
					},
					"response": []
				},
				{
					"name": "Verify response code and body when entered pagination details",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8425877d-c1f2-4196-aa22-4977c5943342",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Verify returned metadata\", function () {",
									"    var jsonData = pm.response.json();",
									" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
									" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(10000);",
									" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(25);",
									" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
									" pm.expect(jsonData.metadata.status).to.eql([]);",
									" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
									"});",
									"",
									"pm.test(\"Verify returned variable (NOTES)\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.result.data[0].crop).to.eql(\"testdata\");",
									"    pm.expect(jsonData.result.data[0].date).to.eql(null);",
									"    pm.expect(jsonData.result.data[0].defaultValue).to.eql(\"\");",
									"    pm.expect(jsonData.result.data[0].documentationURL).to.eql(null);",
									"    pm.expect(jsonData.result.data[0].growthStage).to.eql(null);",
									"    pm.expect(jsonData.result.data[0].institution).to.eql(null);",
									"    pm.expect(jsonData.result.data[0].language).to.eql(null);",
									"    pm.expect(jsonData.result.data[0].name).to.eql(\"NOTES\");",
									"    pm.expect(jsonData.result.data[0].observationVariableDbId).to.eql(pm.environment.get(\"study_notes_cvtermId\"));",
									"    pm.expect(jsonData.result.data[0].observationVariableName).to.eql(\"NOTES\");",
									"    pm.expect(jsonData.result.data[0].ontologyDbId).to.eql(null);",
									"    pm.expect(jsonData.result.data[0].ontologyName).to.eql(null);",
									"    pm.expect(jsonData.result.data[0].scientist).to.eql(null);",
									"    pm.expect(jsonData.result.data[0].status).to.eql(null);",
									"    pm.expect(jsonData.result.data[0].submissionTimestamp).to.eql(null);",
									"    pm.expect(jsonData.result.data[0].synonyms).to.eql([]);",
									"    pm.expect(jsonData.result.data[0].xref).to.eql(null);",
									"    ",
									"    //Verify scale details",
									"    pm.expect(jsonData.result.data[0].scale.dataType).to.eql(\"Text\");",
									"    pm.expect(jsonData.result.data[0].scale.decimalPlaces).to.eql(null);",
									"    pm.expect(jsonData.result.data[0].scale.name).to.eql(\"Text\");",
									"    pm.expect(jsonData.result.data[0].scale.scaleDbId).to.eql(\"6020\");",
									"    pm.expect(jsonData.result.data[0].scale.scaleName).to.eql(\"Text\");",
									"    pm.expect(jsonData.result.data[0].scale.xref).to.eql(null);",
									"    pm.expect(jsonData.result.data[0].scale.validValues.categories).to.eql([]);",
									"    pm.expect(jsonData.result.data[0].scale.validValues.max).to.eql(null);",
									"    pm.expect(jsonData.result.data[0].scale.validValues.min).to.eql(null);",
									"    pm.expect(jsonData.result.data[0].scale.ontologyReference.documentationLinks[0].type).to.eql(\"WEBPAGE\");",
									"    pm.expect(jsonData.result.data[0].scale.ontologyReference.documentationLinks[0].url).to.eql(\"https://cropontology.org\");",
									"    pm.expect(jsonData.result.data[0].scale.ontologyReference.ontologyDbId).to.eql(null);",
									"    pm.expect(jsonData.result.data[0].scale.ontologyReference.ontologyName).to.eql(\"Text\");",
									"    pm.expect(jsonData.result.data[0].scale.ontologyReference.version).to.eql(null);",
									"    ",
									"    //Verify trait details",
									"        pm.expect(jsonData.result.data[0].trait.attribute).to.eql(null);",
									"        pm.expect(jsonData.result.data[0].trait.class).to.eql(\"General\");",
									"        pm.expect(jsonData.result.data[0].trait.description).to.eql(\"Comment\");",
									"        pm.expect(jsonData.result.data[0].trait.entity).to.eql(null);",
									"        pm.expect(jsonData.result.data[0].trait.mainAbbreviation).to.eql(null);",
									"        pm.expect(jsonData.result.data[0].trait.name).to.eql(\"Comment\");",
									"        pm.expect(jsonData.result.data[0].trait.status).to.eql(\"Active\");",
									"        pm.expect(jsonData.result.data[0].trait.synonyms).to.eql([]);",
									"        pm.expect(jsonData.result.data[0].trait.traitDbId).to.eql(\"2065\");",
									"        pm.expect(jsonData.result.data[0].trait.traitName).to.eql(\"Comment\");",
									"        pm.expect(jsonData.result.data[0].trait.xref).to.eql(\"null\");",
									"        pm.expect(jsonData.result.data[0].trait.ontologyReference.documentationLinks[0].type).to.eql(\"WEBPAGE\");",
									"        pm.expect(jsonData.result.data[0].trait.ontologyReference.documentationLinks[0].url).to.eql(\"https://cropontology.org\");",
									"        pm.expect(jsonData.result.data[0].trait.ontologyReference.ontologyDbId).to.eql(\"null\");",
									"        pm.expect(jsonData.result.data[0].trait.ontologyReference.ontologyName).to.eql(\"Comment\");",
									"        pm.expect(jsonData.result.data[0].trait.ontologyReference.version).to.eql(null);",
									" ",
									"    //Verify method details",
									"    pm.expect(jsonData.result.data[0].method.class).to.eql(null);",
									"    pm.expect(jsonData.result.data[0].method.description).to.eql(\"Value recorded after observation\");",
									"    pm.expect(jsonData.result.data[0].method.formula).to.eql(\"null\");",
									"    pm.expect(jsonData.result.data[0].method.methodDbId).to.eql(\"4110\");",
									"    pm.expect(jsonData.result.data[0].method.methodName).to.eql(\"Observed\");",
									"    pm.expect(jsonData.result.data[0].method.name).to.eql(\"Observed\");",
									"    pm.expect(jsonData.result.data[0].method.reference).to.eql(null);",
									"    pm.expect(jsonData.result.data[0].method.ontologyReference.documentationLinks[0].type).to.eql(\"WEBPAGE\");",
									"    pm.expect(jsonData.result.data[0].method.ontologyReference.documentationLinks[0].url).to.eql(\"https://cropontology.org\");",
									"    pm.expect(jsonData.result.data[0].method.ontologyReference.ontologyDbId).to.eql(null);",
									"    pm.expect(jsonData.result.data[0].method.ontologyReference.ontologyName).to.eql(\"Observed\");pm.expect(jsonData.result.data[0].method.ontologyReference.version).to.eql(null);",
									"});",
									"   "
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "265f9135-cdf8-4cb1-9f7b-976fa6923a36",
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{masterToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "X-Auth-Token",
								"type": "text",
								"value": "{{masterToken}}"
							}
						],
						"url": {
							"raw": "{{BMSurl}}/{{crop}}/brapi/v1/variables?page=0&pageSize=10000",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"{{crop}}",
								"brapi",
								"v1",
								"variables"
							],
							"query": [
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "pageSize",
									"value": "10000"
								}
							]
						},
						"description": "GET ​/{crop}​/brapi​/v1​/variables"
					},
					"response": []
				},
				{
					"name": "Verify response code and body when entered pageSize greater than max",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ee3b48aa-8b13-4493-b666-8d333a85efb3",
								"exec": [
									"pm.test(\"Status code is 500\", function () {",
									"    pm.response.to.have.status(500);",
									"});",
									"",
									"pm.test(\"Verify returned error message\", function () {",
									"    var jsonData = pm.response.json();",
									" pm.expect(jsonData.errors[0].message).to.eql(\"Page size must between 1 and 10000.\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "495163d6-915a-44af-bf76-02bb5c688264",
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{masterToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "X-Auth-Token",
								"type": "text",
								"value": "{{masterToken}}"
							}
						],
						"url": {
							"raw": "{{BMSurl}}/{{crop}}/brapi/v1/variables?page=0&pageSize=10001",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"{{crop}}",
								"brapi",
								"v1",
								"variables"
							],
							"query": [
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "pageSize",
									"value": "10001"
								}
							]
						},
						"description": "GET ​/{crop}​/brapi​/v1​/variables"
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "observation-unit-resource-brapi",
			"item": [
				{
					"name": "PATCH /{crop}​/brapi​/v2​/observationunits​/{observationUnitDbId}",
					"item": [
						{
							"name": "Verify response code and body when entered valid inputs",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "36807758-d3fe-4c33-892b-58bb9501f118",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(0);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"pm.test(\"Verify geoCoordinates type\", function () {",
											"    pm.expect(jsonData.result.observationUnitPosition.geoCoordinates.type).to.eql(\"Feature\");",
											"});",
											"",
											"pm.test(\"Verify geometry coordinates\", function () {",
											"    pm.expect(jsonData.result.observationUnitPosition.geoCoordinates.geometry.coordinates[0]).to.eql(-76.506042);",
											"    pm.expect(jsonData.result.observationUnitPosition.geoCoordinates.geometry.coordinates[1]).to.eql(42.417373);",
											"});",
											"",
											"pm.test(\"Verify geometry type\", function () {",
											"    pm.expect(jsonData.result.observationUnitPosition.geoCoordinates.geometry.type).to.eql(\"Point\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d4280a05-829f-4a39-8765-b01591cfaef2",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"observationUnitPosition\": {\r\n    \"geoCoordinates\":  {\r\n        \"geometry\": {\r\n            \"coordinates\": [\r\n                -76.506042,\r\n                42.417373\r\n            ],\r\n            \"type\": \"Point\"\r\n        },\r\n        \"type\": \"Feature\"\r\n    }\r\n  }\r\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/observationunits/{{study6_obs_unit_id}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"observationunits",
										"{{study6_obs_unit_id}}"
									]
								},
								"description": "PATCH /{crop}​/brapi​/v2​/observationunits​/{observationUnitDbId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered non-existing observationUnitDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0067ab0a-534a-4d98-81fa-484008265d29",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Verify error message\", function () {",
											"    var error = pm.response.json().errors[0].message;",
											"    pm.expect(error).to.eql(\"Invalid observation unit id.\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0e5406e8-ff58-4d29-b8a1-cd99c786a453",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"observationUnitPosition\": {\r\n    \"geoCoordinates\":  {\r\n        \"geometry\": {\r\n            \"coordinates\": [\r\n                -76.506042,\r\n                42.417373\r\n            ],\r\n            \"type\": \"Point\"\r\n        },\r\n        \"type\": \"Feature\"\r\n    }\r\n  }\r\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/observationunits/nonExistingId",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"observationunits",
										"nonExistingId"
									]
								},
								"description": "PATCH /{crop}​/brapi​/v2​/observationunits​/{observationUnitDbId}"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "POST ​/{crop}​/brapi​/v2​/search​/observationunits",
					"item": [
						{
							"name": "Post search by germplasmDbIds",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "94a89828-35cc-4cf1-92fd-97adc8899009",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"    var jsonData = pm.response.json();",
											"    pm.environment.unset(\"searchResultDbId2_germplasmDbId\");",
											"    pm.environment.set(\"searchResultDbId2_germplasmDbId\", jsonData.result.searchResultDbId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f91c9137-1a99-4338-b540-f7b625a24878",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"germplasmDbIds\": [\n\t\t\"24\"\n\t]\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/search/observationunits",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"search",
										"observationunits"
									]
								},
								"description": "POST ​/{crop}​/brapi​/v2​/search​/observationunits"
							},
							"response": []
						},
						{
							"name": "Post search by locationDbIds",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "00051e04-d8c0-4f63-bd59-0d902454b822",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"    var jsonData = pm.response.json();",
											"    pm.environment.unset(\"searchResultDbId2_locationDbId\");",
											"    pm.environment.set(\"searchResultDbId2_locationDbId\", jsonData.result.searchResultDbId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "3c0e16d1-363f-4878-8899-b20ea4d5cf32",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"locationDbIds\": [\n\t\t\"9001\"\n\t]\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/search/observationunits",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"search",
										"observationunits"
									]
								},
								"description": "POST ​/{crop}​/brapi​/v2​/search​/observationunits"
							},
							"response": []
						},
						{
							"name": "Post search by observationLevel",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f919a3a2-8c8f-41c8-acfa-e96bd68d1935",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"    var jsonData = pm.response.json();",
											"    pm.environment.unset(\"searchResultDbId2_observationLevel\");",
											"    pm.environment.set(\"searchResultDbId2_observationLevel\", jsonData.result.searchResultDbId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e3eba008-378c-4f85-a028-895fb117ce64",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"observationLevel\":\n\t\t\"PLOT\"\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/search/observationunits",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"search",
										"observationunits"
									]
								},
								"description": "POST ​/{crop}​/brapi​/v2​/search​/observationunits"
							},
							"response": []
						},
						{
							"name": "Post search by observationUnitDbIds",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8eaaa4de-690d-4cad-ac6a-7947b13f27fe",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"    var jsonData = pm.response.json();",
											"    pm.environment.unset(\"searchResultDbId2_observationUnitDbId\");",
											"    pm.environment.set(\"searchResultDbId2_observationUnitDbId\", jsonData.result.searchResultDbId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b7c51f1d-8b5b-485c-96d2-883a6c5ce5a7",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"observationUnitDbIds\":[\n\t\t\"PKWDPEV6LPs1N\"\n\t\t]\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/search/observationunits",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"search",
										"observationunits"
									]
								},
								"description": "POST ​/{crop}​/brapi​/v2​/search​/observationunits"
							},
							"response": []
						},
						{
							"name": "Post search by programDbIds",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6bee9367-d92c-4f0c-9a1d-1d8270de2b31",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"    var jsonData = pm.response.json();",
											"    pm.environment.unset(\"searchResultDbId2_programDbId\");",
											"    pm.environment.set(\"searchResultDbId2_programDbId\", jsonData.result.searchResultDbId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "bb2e6d3a-e7f4-443b-8c34-bae6f807eaf4",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"programDbIds\": [\n\t\t\"{{api_program_id}}\"\n\t]\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/search/observationunits",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"search",
										"observationunits"
									]
								},
								"description": "POST ​/{crop}​/brapi​/v2​/search​/observationunits"
							},
							"response": []
						},
						{
							"name": "Post search by studyDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6553f951-6f71-4719-9686-18f914279919",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"    var jsonData = pm.response.json();",
											"    pm.environment.unset(\"searchResultDbId2_studyDbId\");",
											"    pm.environment.set(\"searchResultDbId2_studyDbId\", jsonData.result.searchResultDbId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "92ae8d5b-edcf-4c6f-bc04-d37c924c0b71",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"studyDbIds\": [\n\t\t\"{{studyDbId}}\"\n\t]\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/search/observationunits",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"search",
										"observationunits"
									]
								},
								"description": "POST ​/{crop}​/brapi​/v2​/search​/observationunits"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "GET ​/{crop}​/brapi​/v2​/search​/observationunits​/{searchResultsDbid}",
					"item": [
						{
							"name": "Verify results when entered searchResultsDbid that filters by germplasmDbIds",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "33926005-2103-4eb2-94e1-6482348408e2",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"var data = jsonData.result.data[0];",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											"  pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											"  pm.expect(jsonData.metadata.pagination.pageSize).to.eql(10000);",
											"  pm.expect(jsonData.metadata.pagination.totalCount).to.eql(119);",
											"  pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											"  pm.expect(jsonData.metadata.status).to.eql([]);",
											"  pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Check if all data has correct germplasmDbId\", function () {",
											"  var jsonData = pm.response.json();",
											"  var dataLength = jsonData.result.data.length;",
											"",
											"  for (i = 0; i < dataLength; i++) {",
											"    var data = jsonData.result.data[i];",
											"    pm.expect(data.germplasmDbId).to.eql(\"24\");",
											"  }",
											"",
											"});    ",
											"",
											"pm.test(\"Check observationUnitDbId\", function () {",
											"    pm.expect(data.observationUnitDbId).to.eql(\"PKWDPEV6LPs1N\");",
											"});",
											"pm.test(\"Check observationUnitDbId\", function () {",
											"    pm.expect(data.observationUnitName).to.eql(\"PLOT4\");",
											"});",
											"pm.test(\"Check observationLevel\", function () {",
											"    pm.expect(data.observationLevel).to.eql(\"PLOT\");",
											"});",
											"pm.test(\"Check plotNumber\", function () {",
											"    pm.expect(data.plotNumber).to.eql(\"4\");",
											"});",
											"pm.test(\"Check plantNumber\", function () {",
											"    pm.expect(data.plantNumber).to.eql(null);",
											"});",
											"pm.test(\"Check blockNumber\", function () {",
											"    pm.expect(data.blockNumber).to.eql(null);",
											"});",
											"pm.test(\"Check replicate\", function () {",
											"    pm.expect(data.replicate).to.eql(null);",
											"});",
											"pm.test(\"Check germplasmDbId\", function () {",
											"    pm.expect(data.germplasmDbId).to.eql(\"24\");",
											"});",
											"pm.test(\"Check germplasmName\", function () {",
											"    pm.expect(data.germplasmName).to.eql(\"GP4\");",
											"});",
											"pm.test(\"Check studyDbId\", function () {",
											"    pm.expect(data.studyDbId).to.eql(\"1\");",
											"});",
											"pm.test(\"Check studyName\", function () {",
											"    pm.expect(data.studyName).to.eql(\"Study with Imported Cross Nursery 2018002_1\");",
											"});",
											"pm.test(\"Check studyLocationDbId\", function () {",
											"    pm.expect(data.studyLocationDbId).to.eql(\"9001\");",
											"});",
											"pm.test(\"Check studyLocation\", function () {",
											"    pm.expect(data.studyLocation).to.eql(\"Africa Rice Centre\");",
											"});",
											"pm.test(\"Check programName\", function () {",
											"    pm.expect(data.programName).to.eql(\"API Program\");",
											"});",
											"pm.test(\"Check entryType\", function () {",
											"    pm.expect(data.entryType).to.eql(\"Test entry\");",
											"});",
											"pm.test(\"Check entryNumber\", function () {",
											"    pm.expect(data.entryNumber).to.eql(\"4\");",
											"});",
											"pm.test(\"Check observations\", function () {",
											"    pm.expect(data.observations[0].observationVariableDbId).to.eql(\"18100\");",
											"    pm.expect(data.observations[0].observationVariableName).to.eql(\"WeedPressure_number\");",
											"    pm.expect(data.observations[0].observationTimeStamp).to.eql(\"2018-10-29T08:43:07.000Z\");",
											"    pm.expect(data.observations[0].season).to.eql(null);",
											"    pm.expect(data.observations[0].collector).to.eql(\"\");",
											"    pm.expect(data.observations[0].value).to.eql(\"46\"); ",
											"});",
											"pm.test(\"Check additionalInfo\", function () {",
											"    pm.expect(data.additionalInfo).to.eql(\"\");",
											"});",
											"pm.test(\"Check locationDbId\", function () {",
											"    pm.expect(data.locationDbId).to.eql(\"9001\");",
											"});",
											"pm.test(\"Check locationName\", function () {",
											"    pm.expect(data.locationName).to.eql(\"Africa Rice Centre\");",
											"});",
											"pm.test(\"Check observationUnitPUI\", function () {",
											"    pm.expect(data.observationUnitPUI).to.eql(\"\");",
											"});",
											"pm.test(\"Check observationUnitPosition\", function () {",
											"    pm.expect(data.observationUnitPosition.blockNumber).to.eql(null);",
											"    pm.expect(data.observationUnitPosition.entryNumber).to.eql(\"4\");",
											"    pm.expect(data.observationUnitPosition.entryType[0]).to.eql(\"Test entry\");",
											"    pm.expect(data.observationUnitPosition.geoCoordinates).to.eql(null);",
											"    pm.expect(data.observationUnitPosition.positionCoordinateX).to.eql(\"1\"); ",
											"    pm.expect(data.observationUnitPosition.positionCoordinateXType).to.eql(\"GRID_COL\"); ",
											"    pm.expect(data.observationUnitPosition.positionCoordinateY).to.eql(\"1\"); ",
											"    pm.expect(data.observationUnitPosition.positionCoordinateYType).to.eql(\"GRID_ROW\"); ",
											"    pm.expect(data.observationUnitPosition.replicate).to.eql(null); ",
											"});",
											"pm.test(\"Check observationUnitXRef\", function () {",
											"    pm.expect(data.observationUnitXRef).to.eql(null);",
											"});",
											"pm.test(\"Check programDbId\", function () {",
											"    pm.expect(data.programDbId).to.eql(pm.environment.get(\"api_program_id\"));",
											"});",
											"pm.test(\"Check treatments\", function () {",
											"    pm.expect(data.treatments).to.eql([]);",
											"});",
											"pm.test(\"Check trialDbId\", function () {",
											"    pm.expect(data.trialDbId).to.eql(\"3009\");",
											"});",
											"pm.test(\"Check trialName\", function () {",
											"    pm.expect(data.trialName).to.eql(\"Study with Imported Cross Nursery 2018002\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c867ab87-5892-4fea-89a1-46d775618f97",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"germplasmDbIds\": [\n\t\t\"24\",\n\t\t\"31\",\n\t\t\"33\"\n\t]\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/search/observationunits/{{searchResultDbId2_germplasmDbId}}?page=0&pageSize=10000",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"search",
										"observationunits",
										"{{searchResultDbId2_germplasmDbId}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "10000"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v2​/search​/observationunits​/{searchResultsDbid}"
							},
							"response": []
						},
						{
							"name": "Verify results when entered searchResultsDbid that filters by locationDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6920af1a-6cab-4eb5-a29b-98e90b8303f3",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(10000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(1460);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Check if all data has correct locationDbId\", function () {",
											"  var jsonData = pm.response.json();",
											"  var dataLength = jsonData.result.data.length;",
											"",
											"  for (i = 0; i < dataLength ; i++) {",
											"      var data = jsonData.result.data[i];",
											"      pm.expect(data.studyLocationDbId).to.eql(\"9001\");",
											"  }",
											" ",
											"});    ",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "bb5c0f26-2ad2-462d-803f-e464329a4dcb",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"germplasmDbIds\": [\n\t\t\"24\",\n\t\t\"31\",\n\t\t\"33\"\n\t]\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/search/observationunits/{{searchResultDbId2_locationDbId}}?page=0&pageSize=10000",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"search",
										"observationunits",
										"{{searchResultDbId2_locationDbId}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "10000"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v2​/search​/observationunits​/{searchResultsDbid}"
							},
							"response": []
						},
						{
							"name": "Verify results when entered searchResultsDbid that filters by observationLevel",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "58e567c1-63b8-4f59-8682-21936fe25c6f",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											"  pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											"  pm.expect(jsonData.metadata.pagination.pageSize).to.eql(10000);",
											"  pm.expect(jsonData.metadata.pagination.totalCount).to.eql(380);",
											"  pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											"  pm.expect(jsonData.metadata.status).to.eql([]);",
											"  pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Check if all data has correct observationLevel\", function () {",
											"  var jsonData = pm.response.json();",
											"  var dataLength = jsonData.result.data.length;",
											"",
											"  for (i = 0; i < dataLength; i++) {",
											"    var data = jsonData.result.data[i];",
											"    pm.expect(data.observationLevel).to.eql(\"PLOT\");",
											"  }",
											"",
											"});    ",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e00e233f-9b4c-482b-9d79-d5a3b3215068",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"germplasmDbIds\": [\n\t\t\"24\",\n\t\t\"31\",\n\t\t\"33\"\n\t]\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/search/observationunits/{{searchResultDbId2_observationLevel}}?page=0&pageSize=10000",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"search",
										"observationunits",
										"{{searchResultDbId2_observationLevel}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "10000"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v2​/search​/observationunits​/{searchResultsDbid}"
							},
							"response": []
						},
						{
							"name": "Verify results when entered searchResultsDbid that filters by observationUnitDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5d21834f-242e-44e7-a9df-d59fb80eae86",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(10000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(1);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Check if all data has correct observationUnitDbId\", function () {",
											"  var jsonData = pm.response.json();",
											"  var dataLength = jsonData.result.data.length;",
											"",
											"  for (i = 0; i < dataLength ; i++) {",
											"      var data = jsonData.result.data[i];",
											"      pm.expect(data.observationUnitDbId).to.eql(\"PKWDPEV6LPs1N\");",
											"  }",
											" ",
											"});    ",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a4d92601-9621-4323-9e79-f44e1ac74ab2",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"germplasmDbIds\": [\n\t\t\"24\",\n\t\t\"31\",\n\t\t\"33\"\n\t]\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/search/observationunits/{{searchResultDbId2_observationUnitDbId}}?page=0&pageSize=10000",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"search",
										"observationunits",
										"{{searchResultDbId2_observationUnitDbId}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "10000"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v2​/search​/observationunits​/{searchResultsDbid}"
							},
							"response": []
						},
						{
							"name": "Verify results when entered searchResultsDbid that filters by programDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "20295c68-7055-4696-8cd6-11c8d5f957c2",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											"  pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											"  pm.expect(jsonData.metadata.pagination.pageSize).to.eql(10000);",
											"  pm.expect(jsonData.metadata.pagination.totalCount).to.eql(2380);",
											"  pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											"  pm.expect(jsonData.metadata.status).to.eql([]);",
											"  pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Check if all data has correct programName\", function () {",
											"  var jsonData = pm.response.json();",
											"  var dataLength = jsonData.result.data.length;",
											"",
											"  for (i = 0; i < dataLength; i++) {",
											"    var data = jsonData.result.data[i];",
											"    pm.expect(data.programName).to.eql(\"API Program\");",
											"  }",
											"",
											"});    ",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "10f48007-5401-4207-89f3-7f6dcdf8171b",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"germplasmDbIds\": [\n\t\t\"24\",\n\t\t\"31\",\n\t\t\"33\"\n\t]\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/search/observationunits/{{searchResultDbId2_programDbId}}?page=0&pageSize=10000",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"search",
										"observationunits",
										"{{searchResultDbId2_programDbId}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "10000"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v2​/search​/observationunits​/{searchResultsDbid}"
							},
							"response": []
						},
						{
							"name": "Verify results when entered searchResultsDbid that filters by studyDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c350b163-6029-414f-af5a-42f9515634b5",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(10000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(60);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Check if all data has correct studyDbId\", function () {",
											"  var jsonData = pm.response.json();",
											"  var dataLength = jsonData.result.data.length;",
											"",
											"  for (i = 0; i < dataLength ; i++) {",
											"      var data = jsonData.result.data[i];",
											"      pm.expect(data.studyDbId).to.eql(pm.environment.get(\"studyDbId\"));",
											"  }",
											" ",
											"});    ",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d2594bd3-3314-4c54-88f9-59579e20bf66",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"germplasmDbIds\": [\n\t\t\"24\",\n\t\t\"31\",\n\t\t\"33\"\n\t]\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/search/observationunits/{{searchResultDbId2_studyDbId}}?page=0&pageSize=10000",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"search",
										"observationunits",
										"{{searchResultDbId2_studyDbId}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "10000"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v2​/search​/observationunits​/{searchResultsDbid}"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "phenotype-search-resource",
			"item": [
				{
					"name": "POST ​/{crop}​/brapi​/v1​/phenotypes-search",
					"item": [
						{
							"name": "Post phenotype search by trialDbId and plot dataset level",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0c7ac5fd-17f0-4e66-a5fa-344d660f5ed6",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(80);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Verify returned first record\", function () {",
											"    ",
											"    var data = jsonData.result.data[0];",
											"    pm.expect(data.observationUnitDbId).to.eq(\"PKWDPivJxYgde\");",
											"    pm.expect(data.observationUnitName).to.eql(\"PLOT1\");",
											"    pm.expect(data.observationLevel).to.eql(\"PLOT\");",
											"    pm.expect(data.observationLevels).to.eql(\"1\");",
											"    pm.expect(data.plotNumber).to.eql(\"1\");",
											"    pm.expect(data.plantNumber).to.eql(null);",
											"    pm.expect(data.blockNumber).to.eql(null);",
											"    pm.expect(data.replicate).to.eql(\"1\");",
											"    pm.expect(data.germplasmDbId).to.eql(\"24\");",
											"    pm.expect(data.germplasmName).to.eql(\"GP4\");",
											"    pm.expect(data.studyDbId).to.eql(\"2\");",
											"    pm.expect(data.studyName).to.eql(\"Randomized Trial 20180003_1\");",
											"    pm.expect(data.studyLocationDbId).to.eql(\"9001\");",
											"    pm.expect(data.studyLocation).to.eql(\"Africa Rice Centre\");",
											"    pm.expect(data.programName).to.eql(\"API Program\");",
											"    pm.expect(data.x).to.eql(\"1\");",
											"    pm.expect(data.y).to.eql(\"1\");",
											"    pm.expect(data.entryType).to.eql(\"Check entry\");",
											"    pm.expect(data.entryNumber).to.eql(\"4\");",
											"    pm.expect(data.instanceNumber).to.eql(\"1\");",
											"    ",
											"    //Verify Biomas_yield observation",
											"    var observation = data.observations[0];",
											"    pm.expect(observation.observationDbId).to.eql(\"1004\");",
											"    pm.expect(observation.observationVariableDbId).to.eql(pm.environment.get(\"study_biomass_cvterm_id\"));",
											"    pm.expect(observation.observationVariableName).to.eql(\"Biomas_yield\");",
											"    pm.expect(observation.observationTimeStamp).to.eql(\"2018-10-29T03:33:44.000Z\");",
											"    pm.expect(observation.season).to.eql(null);",
											"    pm.expect(observation.collector).to.eql(\"\");",
											"    pm.expect(observation.value).to.eql(\"18\");",
											"    ",
											"    //Verify Grain_size observation",
											"    observation = data.observations[1];",
											"    pm.expect(observation.observationDbId).to.eql(\"1005\");",
											"    pm.expect(observation.observationVariableDbId).to.eql(pm.environment.get(\"grain_size_cvterm_id\"));",
											"    pm.expect(observation.observationVariableName).to.eql(\"Grain_size\");",
											"    pm.expect(observation.observationTimeStamp).to.eql(\"2018-10-29T03:33:44.000Z\");",
											"    pm.expect(observation.season).to.eql(null);",
											"    pm.expect(observation.collector).to.eql(\"\");",
											"    pm.expect(observation.value).to.eql(\"95\");",
											"    ",
											"    //Verify Grain_yield measurement",
											"    observation = data.observations[2];",
											"    pm.expect(observation.observationDbId).to.eql(\"1006\");",
											"    pm.expect(observation.observationVariableDbId).to.eql(pm.environment.get(\"study_grainYield_cvterm_id\"));",
											"    pm.expect(observation.observationVariableName).to.eql(\"Grain_yield\");",
											"    pm.expect(observation.observationTimeStamp).to.eql(\"2018-10-29T03:33:44.000Z\");",
											"    pm.expect(observation.season).to.eql(null);",
											"    pm.expect(observation.collector).to.eql(\"\");",
											"    pm.expect(observation.value).to.eql(\"4\");",
											"    ",
											"});",
											"",
											"pm.test(\"Verify returned middle record\", function () {",
											"    ",
											"    var data = jsonData.result.data[35];",
											"    pm.expect(data.observationUnitDbId).to.eq(\"PKWDP7q5Tpjea\");",
											"    pm.expect(data.observationUnitName).to.eql(\"PLOT36\");",
											"    pm.expect(data.observationLevel).to.eql(\"PLOT\");",
											"    pm.expect(data.observationLevels).to.eql(\"1\");",
											"    pm.expect(data.plotNumber).to.eql(\"36\");",
											"    pm.expect(data.plantNumber).to.eql(null);",
											"    pm.expect(data.blockNumber).to.eql(null);",
											"    pm.expect(data.replicate).to.eql(\"2\");",
											"    pm.expect(data.germplasmDbId).to.eql(\"32\");",
											"    pm.expect(data.germplasmName).to.eql(\"GP12\");",
											"    pm.expect(data.studyDbId).to.eql(\"2\");",
											"    pm.expect(data.studyName).to.eql(\"Randomized Trial 20180003_1\");",
											"    pm.expect(data.studyLocationDbId).to.eql(\"9001\");",
											"    pm.expect(data.studyLocation).to.eql(\"Africa Rice Centre\");",
											"    pm.expect(data.programName).to.eql(\"API Program\");",
											"    pm.expect(data.x).to.eql(\"1\");",
											"    pm.expect(data.y).to.eql(\"1\");",
											"    pm.expect(data.entryType).to.eql(\"Test entry\");",
											"    pm.expect(data.entryNumber).to.eql(\"12\");",
											"    pm.expect(data.instanceNumber).to.eql(\"1\");",
											"    ",
											"    //Verify Biomas_yield observation",
											"    var observation = data.observations[0];",
											"    pm.expect(observation.observationDbId).to.eql(\"1179\");",
											"    pm.expect(observation.observationVariableDbId).to.eql(pm.environment.get(\"study_biomass_cvterm_id\"));",
											"    pm.expect(observation.observationVariableName).to.eql(\"Biomas_yield\");",
											"    pm.expect(observation.observationTimeStamp).to.eql(\"2018-10-29T03:33:45.000Z\");",
											"    pm.expect(observation.season).to.eql(null);",
											"    pm.expect(observation.collector).to.eql(\"\");",
											"    pm.expect(observation.value).to.eql(\"67\");",
											"    ",
											"    //Verify Grain_size observation",
											"    observation = data.observations[1];",
											"    pm.expect(observation.observationDbId).to.eql(\"1180\");",
											"    pm.expect(observation.observationVariableDbId).to.eql(pm.environment.get(\"grain_size_cvterm_id\"));",
											"    pm.expect(observation.observationVariableName).to.eql(\"Grain_size\");",
											"    pm.expect(observation.observationTimeStamp).to.eql(\"2018-10-29T03:33:45.000Z\");",
											"    pm.expect(observation.season).to.eql(null);",
											"    pm.expect(observation.collector).to.eql(\"\");",
											"    pm.expect(observation.value).to.eql(\"100\");",
											"    ",
											"    ",
											"    //Verify Grain_yield measurement",
											"    observation = data.observations[2];",
											"    pm.expect(observation.observationDbId).to.eql(\"1181\");",
											"    pm.expect(observation.observationVariableDbId).to.eql(pm.environment.get(\"study_grainYield_cvterm_id\"));",
											"    pm.expect(observation.observationVariableName).to.eql(\"Grain_yield\");",
											"    pm.expect(observation.observationTimeStamp).to.eql(\"2018-10-29T03:33:45.000Z\");",
											"    pm.expect(observation.season).to.eql(null);",
											"    pm.expect(observation.collector).to.eql(\"\");",
											"    pm.expect(observation.value).to.eql(\"36\");",
											"    ",
											"});",
											"",
											"pm.test(\"Verify returned last record\", function () {",
											"    ",
											"    var data = jsonData.result.data[72];",
											"    pm.expect(data.observationUnitDbId).to.eq(\"PKWDPWqLNmAcO\");",
											"    pm.expect(data.observationUnitName).to.eql(\"PLOT33\");",
											"    pm.expect(data.observationLevel).to.eql(\"PLOT\");",
											"    pm.expect(data.observationLevels).to.eql(\"1\");",
											"    pm.expect(data.plotNumber).to.eql(\"33\");",
											"    pm.expect(data.plantNumber).to.eql(null);",
											"    pm.expect(data.blockNumber).to.eql(null);",
											"    pm.expect(data.replicate).to.eql(\"2\");",
											"    pm.expect(data.germplasmDbId).to.eql(\"27\");",
											"    pm.expect(data.germplasmName).to.eql(\"GP7\");",
											"    pm.expect(data.studyDbId).to.eql(\"3\");",
											"    pm.expect(data.studyName).to.eql(\"Randomized Trial 20180003_2\");",
											"    pm.expect(data.studyLocationDbId).to.eql(\"9003\");",
											"    pm.expect(data.studyLocation).to.eql(\"Centro Internacional de Agricultura Tropical\");",
											"    pm.expect(data.programName).to.eql(\"API Program\");",
											"    pm.expect(data.x).to.eql(\"1\");",
											"    pm.expect(data.y).to.eql(\"1\");",
											"    pm.expect(data.entryType).to.eql(\"Test entry\");",
											"    pm.expect(data.entryNumber).to.eql(\"7\");",
											"    pm.expect(data.instanceNumber).to.eql(\"2\");",
											"    ",
											"    //Verify Biomas_yield observation",
											"    var observation = data.observations[0];",
											"    pm.expect(observation.observationDbId).to.eql(\"1364\");",
											"    pm.expect(observation.observationVariableDbId).to.eql(pm.environment.get(\"study_biomass_cvterm_id\"));",
											"    pm.expect(observation.observationVariableName).to.eql(\"Biomas_yield\");",
											"    pm.expect(observation.observationTimeStamp).to.eql(\"2018-10-29T03:34:02.000Z\");",
											"    pm.expect(observation.season).to.eql(null);",
											"    pm.expect(observation.collector).to.eql(\"\");",
											"    pm.expect(observation.value).to.eql(\"46\");",
											"    ",
											"    //Verify Grain_size observation",
											"    observation = data.observations[1];",
											"    pm.expect(observation.observationDbId).to.eql(\"1365\");",
											"    pm.expect(observation.observationVariableDbId).to.eql(pm.environment.get(\"grain_size_cvterm_id\"));",
											"    pm.expect(observation.observationVariableName).to.eql(\"Grain_size\");",
											"    pm.expect(observation.observationTimeStamp).to.eql(\"2018-10-29T03:34:02.000Z\");",
											"    pm.expect(observation.season).to.eql(null);",
											"    pm.expect(observation.collector).to.eql(\"\");",
											"    pm.expect(observation.value).to.eql(\"35\");",
											"    ",
											"    ",
											"    //Verify Grain_yield measurement",
											"    observation = data.observations[2];",
											"    pm.expect(observation.observationDbId).to.eql(\"1366\");",
											"    pm.expect(observation.observationVariableDbId).to.eql(pm.environment.get(\"study_grainYield_cvterm_id\"));",
											"    pm.expect(observation.observationVariableName).to.eql(\"Grain_yield\");",
											"    pm.expect(observation.observationTimeStamp).to.eql(\"2018-10-29T03:34:02.000Z\");",
											"    pm.expect(observation.season).to.eql(null);",
											"    pm.expect(observation.collector).to.eql(\"\");",
											"    pm.expect(observation.value).to.eql(\"94\");",
											"    ",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "6fb792a2-f8c3-49f5-ba60-bfc0834b82c9",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"observationLevel\": \"PLOT\",\n\t\"trialDbIds\": [\n\t\t\"{{trialStudyId}}\"\n\t]\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/phenotypes-search",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"phenotypes-search"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						},
						{
							"name": "Post phenotype search by locationDbIds and plant dataset level",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c6346196-f8e3-4719-b331-ac2873f9ab9a",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(600);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Verify returned first record\", function () {",
											"    ",
											"    var data = jsonData.result.data[0];",
											"    pm.expect(data.observationUnitDbId).to.eq(\"2a664296-3d7e-459d-ad77-87a7d5dae8c5\");",
											"    pm.expect(data.observationUnitName).to.eql(null);",
											"    pm.expect(data.observationLevel).to.eql(\"PLANT\");",
											"    pm.expect(data.observationLevels).to.eql(\"1\");",
											"    pm.expect(data.plotNumber).to.eql(null);",
											"    pm.expect(data.plantNumber).to.eql(null);",
											"    pm.expect(data.blockNumber).to.eql(null);",
											"    pm.expect(data.replicate).to.eql(null);",
											"    pm.expect(data.germplasmDbId).to.eql(\"21\");",
											"    pm.expect(data.germplasmName).to.eql(\"GP1\");",
											"    pm.expect(data.studyDbId).to.eql(\"1\");",
											"    pm.expect(data.studyName).to.eql(\"Study with Imported Cross Nursery 2018002_1\");",
											"    pm.expect(data.studyLocationDbId).to.eql(\"9001\");",
											"    pm.expect(data.studyLocation).to.eql(\"Africa Rice Centre\");",
											"    pm.expect(data.programName).to.eql(\"API Program\");",
											"    pm.expect(data.x).to.eql(\"1\");",
											"    pm.expect(data.y).to.eql(\"1\");",
											"    pm.expect(data.entryType).to.eql(\"Test entry\");",
											"    pm.expect(data.entryNumber).to.eql(\"1\");",
											"    pm.expect(data.instanceNumber).to.eql(\"1\");",
											"    pm.expect(data.observations).to.eql([]);",
											"",
											"    ",
											"});",
											"",
											"pm.test(\"Verify returned middle record\", function () {",
											"    ",
											"    var data = jsonData.result.data[296];",
											"    pm.expect(data.observationUnitDbId).to.eq(\"35534c9e-755f-4aa5-aae9-085928d04e1f\");",
											"    pm.expect(data.observationUnitName).to.eql(null);",
											"    pm.expect(data.observationLevel).to.eql(\"PLANT\");",
											"    pm.expect(data.observationLevels).to.eql(\"1\");",
											"    pm.expect(data.plotNumber).to.eql(null);",
											"    pm.expect(data.plantNumber).to.eql(null);",
											"    pm.expect(data.blockNumber).to.eql(null);",
											"    pm.expect(data.replicate).to.eql(null);",
											"    pm.expect(data.germplasmDbId).to.eql(\"25\");",
											"    pm.expect(data.germplasmName).to.eql(\"GP5\");",
											"    pm.expect(data.studyDbId).to.eql(\"15\");",
											"    pm.expect(data.studyName).to.eql(\"Study for user 3_1\");",
											"    pm.expect(data.studyLocationDbId).to.eql(\"9001\");",
											"    pm.expect(data.studyLocation).to.eql(\"Africa Rice Centre\");",
											"    pm.expect(data.programName).to.eql(\"API Program\");",
											"    pm.expect(data.x).to.eql(\"1\");",
											"    pm.expect(data.y).to.eql(\"1\");",
											"    pm.expect(data.entryType).to.eql(\"Test entry\");",
											"    pm.expect(data.entryNumber).to.eql(\"5\");",
											"    pm.expect(data.instanceNumber).to.eql(\"1\");",
											"    pm.expect(data.observations).to.eql([]);",
											"    ",
											"});",
											"",
											"pm.test(\"Verify returned last record\", function () {",
											"    ",
											"    var data = jsonData.result.data[599];",
											"    pm.expect(data.observationUnitDbId).to.eq(\"930934f4-64e1-4aba-9f8e-bd80999bd6ce\");",
											"    pm.expect(data.observationUnitName).to.eql(null);",
											"    pm.expect(data.observationLevel).to.eql(\"PLANT\");",
											"    pm.expect(data.observationLevels).to.eql(\"1\");",
											"    pm.expect(data.plotNumber).to.eql(null);",
											"    pm.expect(data.plantNumber).to.eql(null);",
											"    pm.expect(data.blockNumber).to.eql(null);",
											"    pm.expect(data.replicate).to.eql(null);",
											"    pm.expect(data.germplasmDbId).to.eql(\"40\");",
											"    pm.expect(data.germplasmName).to.eql(\"GP20\");",
											"    pm.expect(data.studyDbId).to.eql(\"21\");",
											"    pm.expect(data.studyName).to.eql(\"Study for user 6_1\");",
											"    pm.expect(data.studyLocationDbId).to.eql(\"9001\");",
											"    pm.expect(data.studyLocation).to.eql(\"Africa Rice Centre\");",
											"    pm.expect(data.programName).to.eql(\"API Program\");",
											"    pm.expect(data.x).to.eql(\"1\");",
											"    pm.expect(data.y).to.eql(\"1\");",
											"    pm.expect(data.entryType).to.eql(\"Test entry\");",
											"    pm.expect(data.entryNumber).to.eql(\"20\");",
											"    pm.expect(data.instanceNumber).to.eql(\"1\");",
											"    pm.expect(data.observations).to.eql([]);",
											"    ",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "997be87c-411f-41a3-8407-325df2ed671a",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"locationDbIds\": [\n\t\t\"9001\",\n\t\t\"9003\"\n\t],\n\t\"observationLevel\": \"PLANT\"\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/phenotypes-search",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"phenotypes-search"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						},
						{
							"name": "Post phenotype search by germplasmDbIds and means observation level",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "47a80073-f038-457f-9741-80a357d00ae0",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(6);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Verify returned first record\", function () {",
											"    ",
											"    var data = jsonData.result.data[0];",
											"    pm.expect(data.observationUnitDbId).to.eq(\"104158af-b4d7-428a-b772-4bbeb59422e9\");",
											"    pm.expect(data.observationUnitName).to.eql(null);",
											"    pm.expect(data.observationLevel).to.eql(\"MEANS\");",
											"    pm.expect(data.observationLevels).to.eql(\"1\");",
											"    pm.expect(data.plotNumber).to.eql(null);",
											"    pm.expect(data.plantNumber).to.eql(null);",
											"    pm.expect(data.blockNumber).to.eql(null);",
											"    pm.expect(data.replicate).to.eql(null);",
											"    pm.expect(data.germplasmDbId).to.eql(\"24\");",
											"    pm.expect(data.germplasmName).to.eql(\"GP4\");",
											"    pm.expect(data.studyDbId).to.eql(\"2\");",
											"    pm.expect(data.studyName).to.eql(\"Randomized Trial 20180003_1\");",
											"    pm.expect(data.studyLocationDbId).to.eql(\"9001\");",
											"    pm.expect(data.studyLocation).to.eql(\"Africa Rice Centre\");",
											"    pm.expect(data.programName).to.eql(\"API Program\");",
											"    pm.expect(data.x).to.eql(\"1\");",
											"    pm.expect(data.y).to.eql(\"1\");",
											"    pm.expect(data.entryType).to.eql(\"Check entry\");",
											"    pm.expect(data.entryNumber).to.eql(\"4\");",
											"    pm.expect(data.instanceNumber).to.eql(\"1\");",
											"    ",
											"    //Verify Biomas_yield_means observation",
											"    var observation = data.observations[0];",
											"    pm.expect(observation.observationDbId).to.eql(\"1500\");",
											"    pm.expect(observation.observationVariableDbId).to.eql(\"100002\");",
											"    pm.expect(observation.observationVariableName).to.eql(\"Biomas_yield_Means\");",
											"    pm.expect(observation.observationTimeStamp).to.eql(\"2019-01-21T15:29:18.000Z\");",
											"    pm.expect(observation.season).to.eql(null);",
											"    pm.expect(observation.collector).to.eql(\"\");",
											"    pm.expect(observation.value).to.eql(\"41.5\");",
											"    ",
											"    //Verify Grain_size_means observation",
											"    observation = data.observations[1];",
											"    pm.expect(observation.observationDbId).to.eql(\"1501\");",
											"    pm.expect(observation.observationVariableDbId).to.eql(\"100003\");",
											"    pm.expect(observation.observationVariableName).to.eql(\"Grain_size_Means\");",
											"    pm.expect(observation.observationTimeStamp).to.eql(\"2019-01-21T15:29:18.000Z\");",
											"    pm.expect(observation.season).to.eql(null);",
											"    pm.expect(observation.collector).to.eql(\"\");",
											"    pm.expect(observation.value).to.eql(\"69.4999999999999\");",
											"    ",
											"});",
											"",
											"pm.test(\"Verify returned last record\", function () {",
											"    ",
											"    var data = jsonData.result.data[5];",
											"    pm.expect(data.observationUnitDbId).to.eq(\"b8232a78-5cd7-436c-bfc8-ad8111318b62\");",
											"    pm.expect(data.observationUnitName).to.eql(null);",
											"    pm.expect(data.observationLevel).to.eql(\"MEANS\");",
											"    pm.expect(data.observationLevels).to.eql(\"1\");",
											"    pm.expect(data.plotNumber).to.eql(null);",
											"    pm.expect(data.plantNumber).to.eql(null);",
											"    pm.expect(data.blockNumber).to.eql(null);",
											"    pm.expect(data.replicate).to.eql(null);",
											"    pm.expect(data.germplasmDbId).to.eql(\"33\");",
											"    pm.expect(data.germplasmName).to.eql(\"GP13\");",
											"    pm.expect(data.studyDbId).to.eql(\"3\");",
											"    pm.expect(data.studyName).to.eql(\"Randomized Trial 20180003_2\");",
											"    pm.expect(data.studyLocationDbId).to.eql(\"9003\");",
											"    pm.expect(data.studyLocation).to.eql(\"Centro Internacional de Agricultura Tropical\");",
											"    pm.expect(data.programName).to.eql(\"API Program\");",
											"    pm.expect(data.x).to.eql(\"1\");",
											"    pm.expect(data.y).to.eql(\"1\");",
											"    pm.expect(data.entryType).to.eql(\"Test entry\");",
											"    pm.expect(data.entryNumber).to.eql(\"13\");",
											"    pm.expect(data.instanceNumber).to.eql(\"2\");",
											"    ",
											"    //Verify Biomas_yield_Means observation",
											"    var observation = data.observations[0];",
											"    pm.expect(observation.observationDbId).to.eql(\"1542\");",
											"    pm.expect(observation.observationVariableDbId).to.eql(\"100002\");",
											"    pm.expect(observation.observationVariableName).to.eql(\"Biomas_yield_Means\");",
											"    pm.expect(observation.observationTimeStamp).to.eql(\"2019-01-21T15:29:18.000Z\");",
											"    pm.expect(observation.season).to.eql(null);",
											"    pm.expect(observation.collector).to.eql(\"\");",
											"    pm.expect(observation.value).to.eql(\"60\");",
											"    ",
											"    //Verify Grain_size_Means observation",
											"    observation = data.observations[1];",
											"    pm.expect(observation.observationDbId).to.eql(\"1543\");",
											"    pm.expect(observation.observationVariableDbId).to.eql(\"100003\");",
											"    pm.expect(observation.observationVariableName).to.eql(\"Grain_size_Means\");",
											"    pm.expect(observation.observationTimeStamp).to.eql(\"2019-01-21T15:29:18.000Z\");",
											"    pm.expect(observation.season).to.eql(null);",
											"    pm.expect(observation.collector).to.eql(\"\");",
											"    pm.expect(observation.value).to.eql(\"34.5\");",
											"    ",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "cf12119a-44d2-41d4-8b4d-dff033f5a164",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"observationLevel\": \"MEANS\",\n\t\"germplasmDbIds\": [\n\t\t\"24\",\n\t\t\"31\",\n\t\t\"33\"\n\t]\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/phenotypes-search",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"phenotypes-search"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						},
						{
							"name": "Post phenotype search by observationVariableId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "041e2e23-a1f2-42db-93fc-fb4dccbd8e7e",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(860);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Check if all observation has biomas_yield\", function () {",
											"  var jsonData = pm.response.json();",
											"  ",
											"",
											"  var dataLength = jsonData.result.data.length;",
											"",
											"  for (i = 0; i < dataLength ; i++) {",
											"      var data = jsonData.result.data[i];",
											"      var observationsLength = data.observations.length;",
											"   ",
											"        for (j=0; j < observationsLength; j++) {",
											"            var variableId =data.observations[j].observationVariableDbId",
											"          if(variableId==\"18010\"){",
											"              pm.expect(variableId).to.eql(\"18010\");",
											"              console.log(\"index:\"+j+ \"Found! \");",
											"          }",
											"          ",
											"      }",
											"  }",
											" ",
											"});    ",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "6c0291f5-a3c9-4010-8cd4-79b81776fa1d",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"observationVariableDbIds\": [\n    \"18010\"\n  ]\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/phenotypes-search",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"phenotypes-search"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						},
						{
							"name": "Post phenotype search by programDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4bc73b79-2ddc-47c4-bb5f-f12e94b36e37",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											"  pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											"  pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											"  pm.expect(jsonData.metadata.pagination.totalCount).to.eql(2380);",
											"  pm.expect(jsonData.metadata.pagination.totalPages).to.eql(3);",
											"  pm.expect(jsonData.metadata.status).to.eql([]);",
											"  pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Check if all data has correct programName\", function () {",
											"  var jsonData = pm.response.json();",
											"  var dataLength = jsonData.result.data.length;",
											"",
											"  for (i = 0; i < dataLength; i++) {",
											"    var data = jsonData.result.data[i];",
											"    pm.expect(data.programName).to.eql(\"API Program\");",
											"  }",
											"",
											"});    ",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ab372388-f1d5-4fe4-85fc-ffa3c0af953d",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"programDbIds\": [\n\t\t\"{{api_program_id}}\"\n\t]\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/phenotypes-search",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"phenotypes-search"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						},
						{
							"name": "Post phenotype search by studyDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fe0c1981-cbd5-4878-aa2f-3e835925b7f3",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(60);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Check if all data has correct studyDbId\", function () {",
											"  var jsonData = pm.response.json();",
											"  var dataLength = jsonData.result.data.length;",
											"",
											"  for (i = 0; i < dataLength ; i++) {",
											"      var data = jsonData.result.data[i];",
											"      pm.expect(data.studyDbId).to.eql(pm.environment.get(\"studyDbId\"));",
											"  }",
											" ",
											"});    ",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "39b1b2fd-006f-492f-9e1e-4d07b9c81789",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"studyDbIds\": [\n\t\t\"{{studyDbId}}\"\n\t]\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/phenotypes-search",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"phenotypes-search"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						},
						{
							"name": "Post phenotype search by observationUnitDbIds",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "24659f51-e842-489b-b9f3-433f15b856df",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(1);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Check if all data has correct programName\", function () {",
											"  var jsonData = pm.response.json();",
											"  var dataLength = jsonData.result.data.length;",
											"",
											"  for (i = 0; i < dataLength ; i++) {",
											"      var data = jsonData.result.data[i];",
											"      pm.expect(data.observationUnitDbId).to.eql(\"PKWDPivJxYgde\");",
											"  }",
											" ",
											"});    ",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d7a83e01-2d09-45f2-bbdb-ecfdb18037b9",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"observationUnitDbIds\": [\n    \"PKWDPivJxYgde\"\n\t]\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/phenotypes-search",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"phenotypes-search"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						},
						{
							"name": "Post phenotype search by observationTimeStamps",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "08c9aff9-08d5-413f-8988-fda2c9603aae",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(80);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"",
											"pm.test(\"Check if observation timestamps are within observationTimeStamps\", function () {",
											"  var jsonData = pm.response.json();",
											"  ",
											"  //var returnedTimeStamp = ",
											"",
											"  var dataLength = jsonData.result.data.length;",
											"  var moment = require('moment');",
											"  var timeStampStart = moment(\"2018-01-01 00:00:00\");",
											"  var timeStampEnd = moment(\"2018-12-30 11:59:00\");",
											"  for (i = 0; i < dataLength ; i++) {",
											"      var data = jsonData.result.data[i];",
											"      var observationsLength = data.observations.length;",
											"   ",
											"        for (j=0; j < observationsLength; j++) {",
											"            var moment2 = require('moment');",
											"            var returnedTimeStamp = data.observations[j].observationTimeStamp;",
											"            var isAfter = moment2(returnedTimeStamp).isAfter(timeStampStart);",
											"            var isBefore = moment2(returnedTimeStamp).isBefore(timeStampEnd);",
											"            pm.expect(isAfter).to.eql(true);",
											"            pm.expect(isBefore).to.eql(true);",
											"        ",
											"      }",
											"  }",
											" ",
											"});    ",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a2ab4d48-15e0-4e39-b627-be8d2b5137cf",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"trialDbIds\": [\r\n\t\t\"{{trialStudyId}}\"\r\n\t],\r\n        \"observationTimeStampRangeStart\": \"2018-01-01 12:00:00\",\r\n\t    \"observationTimeStampRangeEnd\": \"2018-12-30 11:59:00\"\r\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/phenotypes-search",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"phenotypes-search"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						},
						{
							"name": "Post phenotype search with entered pagination details",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fdb507bf-89fe-462d-895f-47183e385246",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(10000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(860);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Check if all observation has biomas_yield\", function () {",
											"  var jsonData = pm.response.json();",
											"  ",
											"",
											"  var dataLength = jsonData.result.data.length;",
											"",
											"  for (i = 0; i < dataLength ; i++) {",
											"      var data = jsonData.result.data[i];",
											"      var observationsLength = data.observations.length;",
											"   ",
											"        for (j=0; j < observationsLength; j++) {",
											"            var variableId =data.observations[j].observationVariableDbId",
											"          if(variableId==\"18010\"){",
											"              pm.expect(variableId).to.eql(\"18010\");",
											"              console.log(\"index:\"+j+ \"Found! \");",
											"          }",
											"          ",
											"      }",
											"  }",
											" ",
											"});    ",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b3c50185-360b-4ea1-adda-4bff28ec4be4",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"pageSize\": 10000,\n\t\"page\": 0,\n    \"observationVariableDbIds\": [\n    \"18010\"\n  ]\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/phenotypes-search",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"phenotypes-search"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						},
						{
							"name": "Post phenotype search with entered pageSize greater than max",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "25a45974-bf84-456d-8bfb-910500b1eeeb",
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"",
											"pm.test(\"Verify returned error message\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.errors[0].message).to.eql(\"Page size must between 1 and 10000.\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d37a99a9-4c75-4454-aa4b-366bdd2685ff",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"pageSize\": 10001,\n\t\"page\": 0,\n    \"observationVariableDbIds\": [\n    \"18010\"\n  ]\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/phenotypes-search",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"phenotypes-search"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						},
						{
							"name": "Post phenotype search with entered invalid page",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9e11744e-e050-4601-87ef-0d4ccfc41170",
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"",
											"pm.test(\"Verify returned error message\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.errors[0].message).to.eql(\"A total of 1 pages are available, so the page number must between 0 and 1 (exclusive).\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f05d18c2-574c-46b8-8a77-6addf744fcbb",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"pageSize\": 10000,\n\t\"page\": 9999,\n    \"observationVariableDbIds\": [\n    \"18010\"\n  ]\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/phenotypes-search",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"phenotypes-search"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "lot-resource-brapi",
			"item": [
				{
					"name": "GET ​/{crop}​/brapi​/v2​/seedlots",
					"item": [
						{
							"name": "Verify response code and body when entered crop name only",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3aa93e6e-5e35-4b93-a639-80ae332efcb0",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"var data = jsonData.result.data[0];",
											"pm.test(\"Verify returned metadata\", function () {",
											"    pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											"    pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											"    pm.expect(jsonData.metadata.pagination.totalCount).to.eql(227);",
											"    pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											"    pm.expect(jsonData.metadata.status).to.eql([]);",
											"    pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"//Verify data of first lot in the results",
											"",
											"pm.test(\"Check amount \", function () {",
											"    pm.expect(data.amount).to.eql(100);",
											"});",
											"",
											"pm.test(\"Check createdDate \", function () {",
											"    pm.expect(data.createdDate).to.eql(\"2018-10-25\");",
											"});",
											"",
											"pm.test(\"Check germplasmDbId \", function () {",
											"    pm.expect(data.germplasmDbId).to.eql(34);",
											"});",
											"",
											"pm.test(\"Check locationDbId \", function () {",
											"    pm.expect(data.locationDbId).to.eql(6000);",
											"});",
											"",
											"pm.test(\"Check seedLotDescription \", function () {",
											"    pm.expect(data.seedLotDescription).to.eql(\"From List Import\");",
											"});",
											"",
											"pm.test(\"Check seedLotName \", function () {",
											"    pm.expect(data.seedLotName).to.eql(\"SID2-14\");",
											"});",
											"",
											"pm.test(\"Check storageLocation \", function () {",
											"    pm.expect(data.storageLocation).to.eql(\"Default Seed Store\");",
											"});",
											"",
											"pm.test(\"Check units \", function () {",
											"    pm.expect(data.units).to.eql(\"SEED_AMOUNT_g\");",
											"});",
											"",
											"pm.test(\"Check seedLotDbId \", function () {",
											"    pm.expect(data.seedLotDbId).to.eql(\"39725719-09b9-11ea-8631-0242ac110002\");",
											"});",
											"",
											"//Check additional info",
											"pm.test(\"Check lotInternalId \", function () {",
											"    pm.expect(data.additionalInfo.lotInternalId).to.eql(21);",
											"});",
											"",
											"pm.test(\"Check actualBalance \", function () {",
											"    pm.expect(data.additionalInfo.actualBalance).to.eql(100);",
											"});",
											"",
											"pm.test(\"Check totalWithdrawals \", function () {",
											"    pm.expect(data.additionalInfo.totalWithdrawals).to.eql(0);",
											"});",
											"",
											"pm.test(\"Check pendingDeposits \", function () {",
											"    pm.expect(data.additionalInfo.pendingDeposits).to.eql(0);",
											"});",
											"",
											"pm.test(\"Check germplasmName \", function () {",
											"    pm.expect(data.additionalInfo.germplasmName).to.eql(\"CML14\");",
											"});",
											"",
											"pm.test(\"Check lastDepositDate \", function () {",
											"    pm.expect(data.additionalInfo.lastDepositDate).to.eql(\"2018-10-25\");",
											"});",
											"",
											"pm.test(\"Check totalReserved \", function () {",
											"    pm.expect(data.additionalInfo.totalReserved).to.eql(0);",
											"});",
											"",
											"pm.test(\"Check username \", function () {",
											"    pm.expect(data.additionalInfo.username).to.eql(\"admin\");",
											"});",
											"",
											"pm.test(\"Check status \", function () {",
											"    pm.expect(data.additionalInfo.status).to.eql(\"ACTIVE\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ca8a434c-e528-468a-86c4-1323c4fcf04e",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/seedlots",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"seedlots"
									]
								},
								"description": "GET /{crop}​/brapi​/v2​/seedlots"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"protocolProfileBehavior": {}
}
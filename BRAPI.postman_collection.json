{
	"info": {
		"_postman_id": "262084c2-9326-45d0-a409-5e13def3dc0e",
		"name": "BRAPI",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "authentication-controller-brapi",
			"item": [
				{
					"name": "GET ​/brapi​/authorize authorize",
					"item": [
						{
							"name": "Verify GET ​/brapi​/authorize",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{BMSurl}}/brapi/authorize?display_name=admin&return_url=bmspro.io",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"brapi",
										"authorize"
									],
									"query": [
										{
											"key": "display_name",
											"value": "admin"
										},
										{
											"key": "return_url",
											"value": "bmspro.io"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "POST ​/brapi​/v1​/token",
					"item": [
						{
							"name": "Get admin token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"pm.environment.unset(\"masterToken\");",
											"pm.environment.set(\"masterToken\", jsonData.access_token);",
											"pm.environment.unset(\"masterTokenExpiry\");",
											"pm.environment.set(\"masterTokenExpiry\", jsonData.expires_in);",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"   var jsonData = pm.response.json();",
											"pm.test(\"Verify userDisplayname\", function () {",
											"    pm.expect(jsonData.userDisplayName).to.eql(\"admin\");",
											"});",
											"",
											"pm.test(\"Verify if access_token contains correct username\", function () {",
											"    pm.expect(jsonData.access_token).contains(\"admin\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"username\": \"{{bms_user}}\",\r\n  \"password\": \"{{bms_password}}\",\r\n  \"grant_type\": \"\",\r\n  \"client_id\": \"\"\r\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/brapi/v1/token",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"brapi",
										"v1",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response when entered non-existing username",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Check error message\", function () {",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Bad credentials\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"username\": \"invalid\",\r\n  \"password\": \"{{bms_password}}\",\r\n  \"grant_type\": \"\",\r\n  \"client_id\": \"\"\r\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/brapi/v1/token",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"brapi",
										"v1",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response when entered incorrect password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"username\": \"{{bms_user}}\",\r\n  \"password\": \"incorrect\",\r\n  \"grant_type\": \"\",\r\n  \"client_id\": \"\"\r\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/brapi/v1/token",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"brapi",
										"v1",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get test user token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"pm.environment.unset(\"testuser_token\");",
											"pm.environment.set(\"testuser_token\", jsonData.access_token);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"username\": \"apitestuser\",\r\n  \"password\": \"apitestuser\",\r\n  \"grant_type\": \"\",\r\n  \"client_id\": \"\"\r\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/brapi/v1/token",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"brapi",
										"v1",
										"token"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "POST ​/token",
					"item": [
						{
							"name": "Verify response when entered valid credentials",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"   var jsonData = pm.response.json();",
											"pm.test(\"Verify userDisplayname\", function () {",
											"    pm.expect(jsonData.userDisplayName).to.eql(\"admin\");",
											"});",
											"",
											"pm.test(\"Verify if access_token contains correct username\", function () {",
											"    pm.expect(jsonData.access_token).contains(\"admin\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"username\": \"{{bms_user}}\",\r\n  \"password\": \"{{bms_password}}\",\r\n  \"grant_type\": \"\",\r\n  \"client_id\": \"\"\r\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/token",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response when entered non-existing username",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Check error message\", function () {",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Bad credentials\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"username\": \"invalid\",\r\n  \"password\": \"{{bms_password}}\",\r\n  \"grant_type\": \"\",\r\n  \"client_id\": \"\"\r\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/token",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response when entered incorrect password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"username\": \"{{bms_user}}\",\r\n  \"password\": \"incorrect\",\r\n  \"grant_type\": \"\",\r\n  \"client_id\": \"\"\r\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/token",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"token"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "GET ​/{crop}​/brapi​/authorize",
					"item": [
						{
							"name": "Verify GET ​/{crop}/brapi​/authorize",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/authorize?display_name=admin&return_url=bmspro.io",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"authorize"
									],
									"query": [
										{
											"key": "display_name",
											"value": "admin"
										},
										{
											"key": "return_url",
											"value": "bmspro.io"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "call-resource-brapi",
			"item": [
				{
					"name": "GET ​/brapi​/v1​/calls",
					"item": [
						{
							"name": "Verify calls with no specified format",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Verify returned metadata\", function () {",
											"    pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											"    pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											"    pm.expect(jsonData.metadata.pagination.totalCount).to.eql(27);",
											"    pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											"    pm.expect(jsonData.metadata.status).to.eql([]);",
											"    pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Check a call with json or application/json format\", function () {",
											"    pm.expect(jsonData.result.data[2].call).to.eql(\"locations\");",
											"    pm.expect(jsonData.result.data[2].dataTypes[0]).to.eql(\"application/json\");",
											"    pm.expect(jsonData.result.data[2].datatypes[0]).to.eql(\"json\");",
											"});",
											"",
											"pm.test(\"Check a call with tsv or text/tsv\", function () {",
											"    pm.expect(jsonData.result.data[8].call).to.eql(\"studies/{studyDbId}/table\");",
											"    pm.expect(jsonData.result.data[8].dataTypes[1]).to.eql(\"text/tsv\");",
											"    pm.expect(jsonData.result.data[8].datatypes[1]).to.eql(\"tsv\");",
											"    ",
											"});",
											"",
											"pm.test(\"Check if format of study table call is csv\", function () {",
											"    pm.expect(jsonData.result.data[8].call).to.eql(\"studies/{studyDbId}/table\");",
											"    pm.expect(jsonData.result.data[8].dataTypes[2]).to.eql(\"text/csv\");",
											"    pm.expect(jsonData.result.data[8].datatypes[2]).to.eql(\"csv\");",
											"});",
											"",
											"pm.test(\"Check token call\", function () {",
											"    var index = 0;",
											"    var selectedData = jsonData.result.data[index];",
											"    pm.expect(selectedData.call).to.eql(\"token\");",
											"    pm.expect(selectedData.dataTypes).to.eql(['application/json']);",
											"    pm.expect(selectedData.datatypes).to.eql(['json']);",
											"    pm.expect(selectedData.methods).to.eql(['POST'])",
											"    pm.expect(selectedData.versions).to.eql([",
											"                    \"1.0\",",
											"                    \"1.1\",",
											"                    \"1.2\",",
											"                    \"1.3\"",
											"                ]);",
											"});",
											"pm.test(\"Check crops call\", function () {",
											"    var index = 1;",
											"    var selectedData = jsonData.result.data[index];",
											"    pm.expect(selectedData.call).to.eql(\"crops\");",
											"    pm.expect(selectedData.dataTypes).to.eql(['application/json']);",
											"    pm.expect(selectedData.datatypes).to.eql(['json']);",
											"    pm.expect(selectedData.methods).to.eql(['GET'])",
											"    pm.expect(selectedData.versions).to.eql([",
											"                    \"1.0\",",
											"                    \"1.1\"",
											"                ]);",
											"});",
											"",
											"pm.test(\"Check locations call\", function () {",
											"    var index = 2;",
											"    var selectedData = jsonData.result.data[index];",
											"    pm.expect(selectedData.call).to.eql(\"locations\");",
											"    pm.expect(selectedData.dataTypes).to.eql(['application/json']);",
											"    pm.expect(selectedData.datatypes).to.eql(['json']);",
											"    pm.expect(selectedData.methods).to.eql(['GET'])",
											"    pm.expect(selectedData.versions).to.eql([",
											"                    \"1.0\",",
											"                    \"1.1\"",
											"                ]);",
											"});",
											"",
											"pm.test(\"Check phenotypes-search call\", function () {",
											"    var index = 3;",
											"    var selectedData = jsonData.result.data[index];",
											"    pm.expect(selectedData.call).to.eql(\"phenotypes-search\");",
											"    pm.expect(selectedData.dataTypes).to.eql(['application/json']);",
											"    pm.expect(selectedData.datatypes).to.eql(['json']);",
											"    pm.expect(selectedData.methods).to.eql(['POST'])",
											"    pm.expect(selectedData.versions).to.eql([",
											"                    \"1.0\",",
											"                    \"1.1\",",
											"                    \"1.2\"",
											"                ]);",
											"});",
											"",
											"pm.test(\"Check programs call\", function () {",
											"    var index = 4;",
											"    var selectedData = jsonData.result.data[index];",
											"    pm.expect(selectedData.call).to.eql(\"programs\");",
											"    pm.expect(selectedData.dataTypes).to.eql(['application/json']);",
											"    pm.expect(selectedData.datatypes).to.eql(['json']);",
											"    pm.expect(selectedData.methods).to.eql(['GET'])",
											"    pm.expect(selectedData.versions).to.eql([",
											"                    \"1.0\",",
											"                    \"1.1\",",
											"                    \"1.2\"",
											"                ]);",
											"});",
											"",
											"pm.test(\"Check samples call\", function () {",
											"    var index = 5;",
											"    var selectedData = jsonData.result.data[index];",
											"    pm.expect(selectedData.call).to.eql(\"samples/{sampleDbId}\");",
											"    pm.expect(selectedData.dataTypes).to.eql(['application/json']);",
											"    pm.expect(selectedData.datatypes).to.eql(['json']);",
											"    pm.expect(selectedData.methods).to.eql(['GET'])",
											"    pm.expect(selectedData.versions).to.eql([",
											"                    \"1.3\"",
											"                ]);",
											"});",
											"",
											"pm.test(\"Check studies call\", function () {",
											"    var index = 6;",
											"    var selectedData = jsonData.result.data[index];",
											"    pm.expect(selectedData.call).to.eql(\"studies\");",
											"    pm.expect(selectedData.dataTypes).to.eql(['application/json']);",
											"    pm.expect(selectedData.datatypes).to.eql(['json']);",
											"    pm.expect(selectedData.methods).to.eql(['GET'])",
											"    pm.expect(selectedData.versions).to.eql([",
											"                    \"1.3\"",
											"                ]);",
											"});",
											"",
											"pm.test(\"Check studies/{studyDbId} call\", function () {",
											"    var index = 7;",
											"    var selectedData = jsonData.result.data[index];",
											"    pm.expect(selectedData.call).to.eql(\"studies/{studyDbId}\");",
											"    pm.expect(selectedData.dataTypes).to.eql(['application/json']);",
											"    pm.expect(selectedData.datatypes).to.eql(['json']);",
											"    pm.expect(selectedData.methods).to.eql(['GET'])",
											"    pm.expect(selectedData.versions).to.eql([",
											"                    \"1.0\",",
											"                    \"1.1\"",
											"                ]);",
											"});",
											"",
											"pm.test(\"Check studies/{studyDbId}/table call\", function () {",
											"    var index = 8;",
											"    var selectedData = jsonData.result.data[index];",
											"    pm.expect(selectedData.call).to.eql(\"studies/{studyDbId}/table\");",
											"    pm.expect(selectedData.dataTypes).to.eql([",
											"                    \"application/json\",",
											"                    \"text/tsv\",",
											"                    \"text/csv\"]);",
											"    pm.expect(selectedData.datatypes).to.eql([",
											"                    \"json\",",
											"                    \"tsv\",",
											"                    \"csv\"]);",
											"    pm.expect(selectedData.methods).to.eql([",
											"                    'GET']);",
											"    pm.expect(selectedData.versions).to.eql([",
											"                   \"1.1\"",
											"                ]);",
											"});",
											"",
											"pm.test(\"Check trials call\", function () {",
											"    var index = 9;",
											"    var selectedData = jsonData.result.data[index];",
											"    pm.expect(selectedData.call).to.eql(\"trials\");",
											"    pm.expect(selectedData.dataTypes).to.eql([",
											"                    \"application/json\"]);",
											"    pm.expect(selectedData.datatypes).to.eql([",
											"                    \"json\"]);",
											"    pm.expect(selectedData.methods).to.eql([",
											"                    'GET']);",
											"    pm.expect(selectedData.versions).to.eql([",
											"                   \"1.0\",",
											"                   \"1.1\"",
											"                ]);",
											"});",
											"",
											"pm.test(\"Check trials/{trialDbId}/table call\", function () {",
											"    var index = 10;",
											"    var selectedData = jsonData.result.data[index];",
											"    pm.expect(selectedData.call).to.eql(\"trials/{trialDbId}/table\");",
											"    pm.expect(selectedData.dataTypes).to.eql([",
											"                    \"application/json\"]);",
											"    pm.expect(selectedData.datatypes).to.eql([",
											"                    \"json\"]);",
											"    pm.expect(selectedData.methods).to.eql([",
											"                    'GET']);",
											"    pm.expect(selectedData.versions).to.eql([",
											"                   \"1.0\",",
											"                   \"1.1\"",
											"                ]);",
											"});",
											"",
											"pm.test(\"Check calls call\", function () {",
											"    var index = 11;",
											"    var selectedData = jsonData.result.data[index];",
											"    pm.expect(selectedData.call).to.eql(\"calls\");",
											"    pm.expect(selectedData.dataTypes).to.eql([",
											"                    \"application/json\"]);",
											"    pm.expect(selectedData.datatypes).to.eql([",
											"                    \"json\"]);",
											"    pm.expect(selectedData.methods).to.eql([",
											"                    'GET']);",
											"    pm.expect(selectedData.versions).to.eql([",
											"                   \"1.0\",",
											"                   \"1.1\",",
											"                   \"1.2\",",
											"                   \"1.3\"",
											"                ]);",
											"});",
											"",
											"pm.test(\"Check germplasm-search call\", function () {",
											"    var index = 12;",
											"    var selectedData = jsonData.result.data[index];",
											"    pm.expect(selectedData.call).to.eql(\"germplasm-search\");",
											"    pm.expect(selectedData.dataTypes).to.eql([",
											"                    \"application/json\"]);",
											"    pm.expect(selectedData.datatypes).to.eql([",
											"                    \"json\"]);",
											"    pm.expect(selectedData.methods).to.eql([",
											"                    'GET']);",
											"    pm.expect(selectedData.versions).to.eql([",
											"                   \"1.0\",",
											"                   \"1.1\",",
											"                   \"1.2\"",
											"                ]);",
											"});",
											"",
											"pm.test(\"Check germplasm/{germplasmDbId} call\", function () {",
											"    var index = 13;",
											"    var selectedData = jsonData.result.data[index];",
											"    pm.expect(selectedData.call).to.eql(\"germplasm/{germplasmDbId}\");",
											"    pm.expect(selectedData.dataTypes).to.eql([",
											"                    \"application/json\"]);",
											"    pm.expect(selectedData.datatypes).to.eql([",
											"                    \"json\"]);",
											"    pm.expect(selectedData.methods).to.eql([",
											"                    'GET']);",
											"    pm.expect(selectedData.versions).to.eql([",
											"                   \"1.0\",",
											"                   \"1.1\",",
											"                   \"1.2\"",
											"                ]);",
											"});",
											"",
											"pm.test(\"Check germplasm/{germplasmDbId}/pedigree call\", function () {",
											"    var index = 14;",
											"    var selectedData = jsonData.result.data[index];",
											"    pm.expect(selectedData.call).to.eql(\"germplasm/{germplasmDbId}/pedigree\");",
											"    pm.expect(selectedData.dataTypes).to.eql([",
											"                    \"application/json\"]);",
											"    pm.expect(selectedData.datatypes).to.eql([",
											"                    \"json\"]);",
											"    pm.expect(selectedData.methods).to.eql([",
											"                    'GET']);",
											"    pm.expect(selectedData.versions).to.eql([",
											"                   \"1.0\",",
											"                   \"1.1\"",
											"                ]);",
											"});",
											"pm.test(\"Check germplasm/{germplasmDbId}/progeny call\", function () {",
											"    var index = 15;",
											"    var selectedData = jsonData.result.data[index];",
											"    pm.expect(selectedData.call).to.eql(\"germplasm/{germplasmDbId}/progeny\");",
											"    pm.expect(selectedData.dataTypes).to.eql([",
											"                    \"application/json\"]);",
											"    pm.expect(selectedData.datatypes).to.eql([",
											"                    \"json\"]);",
											"    pm.expect(selectedData.methods).to.eql([",
											"                    'GET']);",
											"    pm.expect(selectedData.versions).to.eql([",
											"                   \"1.0\",",
											"                   \"1.1\",",
											"                   \"1.2\"",
											"                ]);",
											"});",
											"pm.test(\"Check search/germplasm call\", function () {",
											"    var index = 16;",
											"    var selectedData = jsonData.result.data[index];",
											"    pm.expect(selectedData.call).to.eql(\"search/germplasm\");",
											"    pm.expect(selectedData.dataTypes).to.eql([",
											"                    \"application/json\"]);",
											"    pm.expect(selectedData.datatypes).to.eql([",
											"                    \"json\"]);",
											"    pm.expect(selectedData.methods).to.eql([",
											"                    'POST']);",
											"    pm.expect(selectedData.versions).to.eql([",
											"                   \"1.3\"",
											"                ]);",
											"});",
											"pm.test(\"Check search/germplasm/{searchResultsDbid} call\", function () {",
											"    var index = 17;",
											"    var selectedData = jsonData.result.data[index];",
											"    pm.expect(selectedData.call).to.eql(\"search/germplasm/{searchResultsDbid}\");",
											"    pm.expect(selectedData.dataTypes).to.eql([",
											"                    \"application/json\"]);",
											"    pm.expect(selectedData.datatypes).to.eql([",
											"                    \"json\"]);",
											"    pm.expect(selectedData.methods).to.eql([",
											"                    'POST']);",
											"    pm.expect(selectedData.versions).to.eql([",
											"                   \"1.3\"",
											"                ]);",
											"});",
											"",
											"pm.test(\"Check observationLevels call\", function () {",
											"    var index = 18;",
											"    var selectedData = jsonData.result.data[index];",
											"    pm.expect(selectedData.call).to.eql(\"observationLevels\");",
											"    pm.expect(selectedData.dataTypes).to.eql([",
											"                    \"application/json\"]);",
											"    pm.expect(selectedData.datatypes).to.eql([",
											"                    \"json\"]);",
											"    pm.expect(selectedData.methods).to.eql([",
											"                    'GET']);",
											"    pm.expect(selectedData.versions).to.eql([",
											"                   \"1.3\"",
											"                ]);",
											"});",
											"",
											"pm.test(\"Check studies/{studyDbId}/germplasm call\", function () {",
											"    var index = 19;",
											"    var selectedData = jsonData.result.data[index];",
											"    pm.expect(selectedData.call).to.eql(\"studies/{studyDbId}/germplasm\");",
											"    pm.expect(selectedData.dataTypes).to.eql([",
											"                    \"application/json\"]);",
											"    pm.expect(selectedData.datatypes).to.eql([",
											"                    \"json\"]);",
											"    pm.expect(selectedData.methods).to.eql([",
											"                    'GET']);",
											"    pm.expect(selectedData.versions).to.eql([",
											"                   \"1.3\"",
											"                ]);",
											"});",
											"",
											"pm.test(\"Check studies/{studyDbId}/observationvariables call\", function () {",
											"    var index = 20;",
											"    var selectedData = jsonData.result.data[index];",
											"    pm.expect(selectedData.call).to.eql(\"studies/{studyDbId}/observationvariables\");",
											"    pm.expect(selectedData.dataTypes).to.eql([",
											"                    \"application/json\"]);",
											"    pm.expect(selectedData.datatypes).to.eql([",
											"                    \"json\"]);",
											"    pm.expect(selectedData.methods).to.eql([",
											"                    'GET']);",
											"    pm.expect(selectedData.versions).to.eql([",
											"                   \"1.3\"",
											"                ]);",
											"});",
											"pm.test(\"Check germplasm call\", function () {",
											"    var index = 21;",
											"    var selectedData = jsonData.result.data[index];",
											"    pm.expect(selectedData.call).to.eql(\"germplasm\");",
											"    pm.expect(selectedData.dataTypes).to.eql([",
											"                    \"application/json\"]);",
											"    pm.expect(selectedData.datatypes).to.eql([",
											"                    \"json\"]);",
											"    pm.expect(selectedData.methods).to.eql([",
											"                    'GET']);",
											"    pm.expect(selectedData.versions).to.eql([",
											"                   \"1.3\"",
											"                ]);",
											"});",
											"pm.test(\"Check germplasm/{germplasmDbId}/attributes call\", function () {",
											"    var index = 22;",
											"    var selectedData = jsonData.result.data[index];",
											"    pm.expect(selectedData.call).to.eql(\"germplasm/{germplasmDbId}/attributes\");",
											"    pm.expect(selectedData.dataTypes).to.eql([",
											"                    \"application/json\"]);",
											"    pm.expect(selectedData.datatypes).to.eql([",
											"                    \"json\"]);",
											"    pm.expect(selectedData.methods).to.eql([",
											"                    'GET']);",
											"    pm.expect(selectedData.versions).to.eql([",
											"                   \"1.3\"",
											"                ]);",
											"});",
											"pm.test(\"Check variables call\", function () {",
											"    var index = 23;",
											"    var selectedData = jsonData.result.data[index];",
											"    pm.expect(selectedData.call).to.eql(\"variables\");",
											"    pm.expect(selectedData.dataTypes).to.eql([",
											"                    \"application/json\"]);",
											"    pm.expect(selectedData.datatypes).to.eql([",
											"                    \"json\"]);",
											"    pm.expect(selectedData.methods).to.eql([",
											"                    'GET']);",
											"    pm.expect(selectedData.versions).to.eql([",
											"                   \"1.3\"",
											"                ]);",
											"});",
											"",
											"pm.test(\"Check images call\", function () {",
											"    var index = 24;",
											"    var selectedData = jsonData.result.data[index];",
											"    pm.expect(selectedData.call).to.eql(\"images\");",
											"    pm.expect(selectedData.dataTypes).to.eql([",
											"                    \"application/json\"]);",
											"    pm.expect(selectedData.datatypes).to.eql([",
											"                    \"json\"]);",
											"    pm.expect(selectedData.methods).to.eql([",
											"                    'POST']);",
											"    pm.expect(selectedData.versions).to.eql([",
											"                   \"1.3\"",
											"                ]);",
											"});",
											"",
											"pm.test(\"Check images/{imageDbId} call\", function () {",
											"    var index = 25;",
											"    var selectedData = jsonData.result.data[index];",
											"    pm.expect(selectedData.call).to.eql(\"images/{imageDbId}\");",
											"    pm.expect(selectedData.dataTypes).to.eql([",
											"                    \"application/json\"]);",
											"    pm.expect(selectedData.datatypes).to.eql([",
											"                    \"json\"]);",
											"    pm.expect(selectedData.methods).to.eql([",
											"                    'PUT']);",
											"    pm.expect(selectedData.versions).to.eql([",
											"                   \"1.3\"",
											"                ]);",
											"});",
											"pm.test(\"Check images/{imageDbId}/imagecontent call\", function () {",
											"    var index = 26;",
											"    var selectedData = jsonData.result.data[index];",
											"    pm.expect(selectedData.call).to.eql(\"images/{imageDbId}/imagecontent\");",
											"    pm.expect(selectedData.dataTypes).to.eql([",
											"                    \"application/json\"]);",
											"    pm.expect(selectedData.datatypes).to.eql([",
											"                    \"json\"]);",
											"    pm.expect(selectedData.methods).to.eql([",
											"                    'POST']);",
											"    pm.expect(selectedData.versions).to.eql([",
											"                   \"1.3\"",
											"                ]);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/brapi/v1/calls",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"brapi",
										"v1",
										"calls"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify calls with csv format",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"pm.test(\"Verify returned metadata\", function () {",
											"    pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											"    pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											"    pm.expect(jsonData.metadata.pagination.totalCount).to.eql(1);",
											"    pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											"    pm.expect(jsonData.metadata.status).to.eql([]);",
											"    pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"pm.test(\"Check if csv exists from datatypes\", function () {",
											"    var i;",
											"    for (i = 0; i < jsonData.result.data.length; i++){",
											"        pm.expect(jsonData.result.data[i].datatypes).contains(\"csv\");",
											"    }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/brapi/v1/calls?dataType=csv",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"brapi",
										"v1",
										"calls"
									],
									"query": [
										{
											"key": "dataType",
											"value": "csv"
										}
									]
								},
								"description": "GET ​/brapi​/v1​/calls"
							},
							"response": []
						},
						{
							"name": "Verify calls tsv format",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Verify returned metadata\", function () {",
											"    pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											"    pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											"    pm.expect(jsonData.metadata.pagination.totalCount).to.eql(1);",
											"    pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											"    pm.expect(jsonData.metadata.status).to.eql([]);",
											"    pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Check if tsv exists from datatypes\", function () {",
											"    var i;",
											"    for (i = 0; i < jsonData.result.data.length; i++){",
											"        pm.expect(jsonData.result.data[i].datatypes).contains(\"tsv\");",
											"    }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/brapi/v1/calls?dataType=tsv",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"brapi",
										"v1",
										"calls"
									],
									"query": [
										{
											"key": "dataType",
											"value": "tsv"
										}
									]
								},
								"description": "GET ​/brapi​/v1​/calls"
							},
							"response": []
						},
						{
							"name": "Verify calls with json format",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"pm.test(\"Verify returned metadata\", function () {",
											"    pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											"    pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											"    pm.expect(jsonData.metadata.pagination.totalCount).to.eql(27);",
											"    pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											"    pm.expect(jsonData.metadata.status).to.eql([]);",
											"    pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Check if json exists from datatypes\", function () {",
											"    var i;",
											"    for (i = 0; i < jsonData.result.data.length; i++){",
											"        pm.expect(jsonData.result.data[i].datatypes).contains(\"json\");",
											"    }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/brapi/v1/calls?dataType=json",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"brapi",
										"v1",
										"calls"
									],
									"query": [
										{
											"key": "dataType",
											"value": "json"
										}
									]
								},
								"description": "GET ​/brapi​/v1​/calls"
							},
							"response": []
						},
						{
							"name": "Verify calls with  text/csv format",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"pm.test(\"Verify returned metadata\", function () {",
											"    pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											"    pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											"    pm.expect(jsonData.metadata.pagination.totalCount).to.eql(1);",
											"    pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											"    pm.expect(jsonData.metadata.status).to.eql([]);",
											"    pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Check if text/csv exists from dataTypes\", function () {",
											"    var i;",
											"    for (i = 0; i < jsonData.result.data.length; i++){",
											"        pm.expect(jsonData.result.data[i].dataTypes).contains(\"text/csv\");",
											"    }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/brapi/v1/calls?dataType=text/csv",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"brapi",
										"v1",
										"calls"
									],
									"query": [
										{
											"key": "dataType",
											"value": "text/csv"
										}
									]
								},
								"description": "GET ​/brapi​/v1​/calls"
							},
							"response": []
						},
						{
							"name": "Verify calls with text/tsv format",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"pm.test(\"Verify returned metadata\", function () {",
											"    pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											"    pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											"    pm.expect(jsonData.metadata.pagination.totalCount).to.eql(1);",
											"    pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											"    pm.expect(jsonData.metadata.status).to.eql([]);",
											"    pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Check if text/tsv exists from dataTypes\", function () {",
											"    var i;",
											"    for (i = 0; i < jsonData.result.data.length; i++){",
											"        pm.expect(jsonData.result.data[i].dataTypes).contains(\"text/tsv\");",
											"    }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/brapi/v1/calls?dataType=text/tsv",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"brapi",
										"v1",
										"calls"
									],
									"query": [
										{
											"key": "dataType",
											"value": "text/tsv"
										}
									]
								},
								"description": "GET ​/brapi​/v1​/calls"
							},
							"response": []
						},
						{
							"name": "Verify calls with application/json format",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"pm.test(\"Verify returned metadata\", function () {",
											"    pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											"    pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											"    pm.expect(jsonData.metadata.pagination.totalCount).to.eql(27);",
											"    pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											"    pm.expect(jsonData.metadata.status).to.eql([]);",
											"    pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Check if application/json exists from dataTypes\", function () {",
											"    var i;",
											"    for (i = 0; i < jsonData.result.data.length; i++){",
											"        pm.expect(jsonData.result.data[i].dataTypes).contains(\"application/json\");",
											"    }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/brapi/v1/calls?dataType=application/json",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"brapi",
										"v1",
										"calls"
									],
									"query": [
										{
											"key": "dataType",
											"value": "application/json"
										}
									]
								},
								"description": "GET ​/brapi​/v1​/calls"
							},
							"response": []
						},
						{
							"name": "Verify calls with application/flapjack",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"",
											"pm.test(\"Check error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.metadata.status[0].message).contains(\"not found calls\");",
											"",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/brapi/v1/calls?dataType=application/flapjack",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"brapi",
										"v1",
										"calls"
									],
									"query": [
										{
											"key": "dataType",
											"value": "application/flapjack"
										}
									]
								},
								"description": "GET ​/brapi​/v1​/calls"
							},
							"response": []
						}
					]
				},
				{
					"name": "GET ​/{crop}/brapi​/v1​/calls",
					"item": [
						{
							"name": "Verify calls with no specified format",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Verify returned metadata\", function () {",
											"    pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											"    pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											"    pm.expect(jsonData.metadata.pagination.totalCount).to.eql(27);",
											"    pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											"    pm.expect(jsonData.metadata.status).to.eql([]);",
											"    pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Check a call with json or application/json format\", function () {",
											"    pm.expect(jsonData.result.data[2].call).to.eql(\"locations\");",
											"    pm.expect(jsonData.result.data[2].dataTypes[0]).to.eql(\"application/json\");",
											"    pm.expect(jsonData.result.data[2].datatypes[0]).to.eql(\"json\");",
											"});",
											"",
											"pm.test(\"Check a call with tsv or text/tsv\", function () {",
											"    pm.expect(jsonData.result.data[8].call).to.eql(\"studies/{studyDbId}/table\");",
											"    pm.expect(jsonData.result.data[8].dataTypes[1]).to.eql(\"text/tsv\");",
											"    pm.expect(jsonData.result.data[8].datatypes[1]).to.eql(\"tsv\");",
											"    ",
											"});",
											"",
											"pm.test(\"Check if format of study table call is csv\", function () {",
											"    pm.expect(jsonData.result.data[8].call).to.eql(\"studies/{studyDbId}/table\");",
											"    pm.expect(jsonData.result.data[8].dataTypes[2]).to.eql(\"text/csv\");",
											"    pm.expect(jsonData.result.data[8].datatypes[2]).to.eql(\"csv\");",
											"});",
											"",
											"pm.test(\"Check token call\", function () {",
											"    var index = 0;",
											"    var selectedData = jsonData.result.data[index];",
											"    pm.expect(selectedData.call).to.eql(\"token\");",
											"    pm.expect(selectedData.dataTypes).to.eql(['application/json']);",
											"    pm.expect(selectedData.datatypes).to.eql(['json']);",
											"    pm.expect(selectedData.methods).to.eql(['POST'])",
											"    pm.expect(selectedData.versions).to.eql([",
											"                    \"1.0\",",
											"                    \"1.1\",",
											"                    \"1.2\",",
											"                    \"1.3\"",
											"                ]);",
											"});",
											"pm.test(\"Check crops call\", function () {",
											"    var index = 1;",
											"    var selectedData = jsonData.result.data[index];",
											"    pm.expect(selectedData.call).to.eql(\"crops\");",
											"    pm.expect(selectedData.dataTypes).to.eql(['application/json']);",
											"    pm.expect(selectedData.datatypes).to.eql(['json']);",
											"    pm.expect(selectedData.methods).to.eql(['GET'])",
											"    pm.expect(selectedData.versions).to.eql([",
											"                    \"1.0\",",
											"                    \"1.1\"",
											"                ]);",
											"});",
											"",
											"pm.test(\"Check locations call\", function () {",
											"    var index = 2;",
											"    var selectedData = jsonData.result.data[index];",
											"    pm.expect(selectedData.call).to.eql(\"locations\");",
											"    pm.expect(selectedData.dataTypes).to.eql(['application/json']);",
											"    pm.expect(selectedData.datatypes).to.eql(['json']);",
											"    pm.expect(selectedData.methods).to.eql(['GET'])",
											"    pm.expect(selectedData.versions).to.eql([",
											"                    \"1.0\",",
											"                    \"1.1\"",
											"                ]);",
											"});",
											"",
											"pm.test(\"Check phenotypes-search call\", function () {",
											"    var index = 3;",
											"    var selectedData = jsonData.result.data[index];",
											"    pm.expect(selectedData.call).to.eql(\"phenotypes-search\");",
											"    pm.expect(selectedData.dataTypes).to.eql(['application/json']);",
											"    pm.expect(selectedData.datatypes).to.eql(['json']);",
											"    pm.expect(selectedData.methods).to.eql(['POST'])",
											"    pm.expect(selectedData.versions).to.eql([",
											"                    \"1.0\",",
											"                    \"1.1\",",
											"                    \"1.2\"",
											"                ]);",
											"});",
											"",
											"pm.test(\"Check programs call\", function () {",
											"    var index = 4;",
											"    var selectedData = jsonData.result.data[index];",
											"    pm.expect(selectedData.call).to.eql(\"programs\");",
											"    pm.expect(selectedData.dataTypes).to.eql(['application/json']);",
											"    pm.expect(selectedData.datatypes).to.eql(['json']);",
											"    pm.expect(selectedData.methods).to.eql(['GET'])",
											"    pm.expect(selectedData.versions).to.eql([",
											"                    \"1.0\",",
											"                    \"1.1\",",
											"                    \"1.2\"",
											"                ]);",
											"});",
											"",
											"pm.test(\"Check samples call\", function () {",
											"    var index = 5;",
											"    var selectedData = jsonData.result.data[index];",
											"    pm.expect(selectedData.call).to.eql(\"samples/{sampleDbId}\");",
											"    pm.expect(selectedData.dataTypes).to.eql(['application/json']);",
											"    pm.expect(selectedData.datatypes).to.eql(['json']);",
											"    pm.expect(selectedData.methods).to.eql(['GET'])",
											"    pm.expect(selectedData.versions).to.eql([",
											"                    \"1.3\"",
											"                ]);",
											"});",
											"",
											"pm.test(\"Check studies call\", function () {",
											"    var index = 6;",
											"    var selectedData = jsonData.result.data[index];",
											"    pm.expect(selectedData.call).to.eql(\"studies\");",
											"    pm.expect(selectedData.dataTypes).to.eql(['application/json']);",
											"    pm.expect(selectedData.datatypes).to.eql(['json']);",
											"    pm.expect(selectedData.methods).to.eql(['GET'])",
											"    pm.expect(selectedData.versions).to.eql([",
											"                    \"1.3\"",
											"                ]);",
											"});",
											"",
											"pm.test(\"Check studies/{studyDbId} call\", function () {",
											"    var index = 7;",
											"    var selectedData = jsonData.result.data[index];",
											"    pm.expect(selectedData.call).to.eql(\"studies/{studyDbId}\");",
											"    pm.expect(selectedData.dataTypes).to.eql(['application/json']);",
											"    pm.expect(selectedData.datatypes).to.eql(['json']);",
											"    pm.expect(selectedData.methods).to.eql(['GET'])",
											"    pm.expect(selectedData.versions).to.eql([",
											"                    \"1.0\",",
											"                    \"1.1\"",
											"                ]);",
											"});",
											"",
											"pm.test(\"Check studies/{studyDbId}/table call\", function () {",
											"    var index = 8;",
											"    var selectedData = jsonData.result.data[index];",
											"    pm.expect(selectedData.call).to.eql(\"studies/{studyDbId}/table\");",
											"    pm.expect(selectedData.dataTypes).to.eql([",
											"                    \"application/json\",",
											"                    \"text/tsv\",",
											"                    \"text/csv\"]);",
											"    pm.expect(selectedData.datatypes).to.eql([",
											"                    \"json\",",
											"                    \"tsv\",",
											"                    \"csv\"]);",
											"    pm.expect(selectedData.methods).to.eql([",
											"                    'GET']);",
											"    pm.expect(selectedData.versions).to.eql([",
											"                   \"1.1\"",
											"                ]);",
											"});",
											"",
											"pm.test(\"Check trials call\", function () {",
											"    var index = 9;",
											"    var selectedData = jsonData.result.data[index];",
											"    pm.expect(selectedData.call).to.eql(\"trials\");",
											"    pm.expect(selectedData.dataTypes).to.eql([",
											"                    \"application/json\"]);",
											"    pm.expect(selectedData.datatypes).to.eql([",
											"                    \"json\"]);",
											"    pm.expect(selectedData.methods).to.eql([",
											"                    'GET']);",
											"    pm.expect(selectedData.versions).to.eql([",
											"                   \"1.0\",",
											"                   \"1.1\"",
											"                ]);",
											"});",
											"",
											"pm.test(\"Check trials/{trialDbId}/table call\", function () {",
											"    var index = 10;",
											"    var selectedData = jsonData.result.data[index];",
											"    pm.expect(selectedData.call).to.eql(\"trials/{trialDbId}/table\");",
											"    pm.expect(selectedData.dataTypes).to.eql([",
											"                    \"application/json\"]);",
											"    pm.expect(selectedData.datatypes).to.eql([",
											"                    \"json\"]);",
											"    pm.expect(selectedData.methods).to.eql([",
											"                    'GET']);",
											"    pm.expect(selectedData.versions).to.eql([",
											"                   \"1.0\",",
											"                   \"1.1\"",
											"                ]);",
											"});",
											"",
											"pm.test(\"Check calls call\", function () {",
											"    var index = 11;",
											"    var selectedData = jsonData.result.data[index];",
											"    pm.expect(selectedData.call).to.eql(\"calls\");",
											"    pm.expect(selectedData.dataTypes).to.eql([",
											"                    \"application/json\"]);",
											"    pm.expect(selectedData.datatypes).to.eql([",
											"                    \"json\"]);",
											"    pm.expect(selectedData.methods).to.eql([",
											"                    'GET']);",
											"    pm.expect(selectedData.versions).to.eql([",
											"                   \"1.0\",",
											"                   \"1.1\",",
											"                   \"1.2\",",
											"                   \"1.3\"",
											"                ]);",
											"});",
											"",
											"pm.test(\"Check germplasm-search call\", function () {",
											"    var index = 12;",
											"    var selectedData = jsonData.result.data[index];",
											"    pm.expect(selectedData.call).to.eql(\"germplasm-search\");",
											"    pm.expect(selectedData.dataTypes).to.eql([",
											"                    \"application/json\"]);",
											"    pm.expect(selectedData.datatypes).to.eql([",
											"                    \"json\"]);",
											"    pm.expect(selectedData.methods).to.eql([",
											"                    'GET']);",
											"    pm.expect(selectedData.versions).to.eql([",
											"                   \"1.0\",",
											"                   \"1.1\",",
											"                   \"1.2\"",
											"                ]);",
											"});",
											"",
											"pm.test(\"Check germplasm/{germplasmDbId} call\", function () {",
											"    var index = 13;",
											"    var selectedData = jsonData.result.data[index];",
											"    pm.expect(selectedData.call).to.eql(\"germplasm/{germplasmDbId}\");",
											"    pm.expect(selectedData.dataTypes).to.eql([",
											"                    \"application/json\"]);",
											"    pm.expect(selectedData.datatypes).to.eql([",
											"                    \"json\"]);",
											"    pm.expect(selectedData.methods).to.eql([",
											"                    'GET']);",
											"    pm.expect(selectedData.versions).to.eql([",
											"                   \"1.0\",",
											"                   \"1.1\",",
											"                   \"1.2\"",
											"                ]);",
											"});",
											"",
											"pm.test(\"Check germplasm/{germplasmDbId}/pedigree call\", function () {",
											"    var index = 14;",
											"    var selectedData = jsonData.result.data[index];",
											"    pm.expect(selectedData.call).to.eql(\"germplasm/{germplasmDbId}/pedigree\");",
											"    pm.expect(selectedData.dataTypes).to.eql([",
											"                    \"application/json\"]);",
											"    pm.expect(selectedData.datatypes).to.eql([",
											"                    \"json\"]);",
											"    pm.expect(selectedData.methods).to.eql([",
											"                    'GET']);",
											"    pm.expect(selectedData.versions).to.eql([",
											"                   \"1.0\",",
											"                   \"1.1\"",
											"                ]);",
											"});",
											"pm.test(\"Check germplasm/{germplasmDbId}/progeny call\", function () {",
											"    var index = 15;",
											"    var selectedData = jsonData.result.data[index];",
											"    pm.expect(selectedData.call).to.eql(\"germplasm/{germplasmDbId}/progeny\");",
											"    pm.expect(selectedData.dataTypes).to.eql([",
											"                    \"application/json\"]);",
											"    pm.expect(selectedData.datatypes).to.eql([",
											"                    \"json\"]);",
											"    pm.expect(selectedData.methods).to.eql([",
											"                    'GET']);",
											"    pm.expect(selectedData.versions).to.eql([",
											"                   \"1.0\",",
											"                   \"1.1\",",
											"                   \"1.2\"",
											"                ]);",
											"});",
											"pm.test(\"Check search/germplasm call\", function () {",
											"    var index = 16;",
											"    var selectedData = jsonData.result.data[index];",
											"    pm.expect(selectedData.call).to.eql(\"search/germplasm\");",
											"    pm.expect(selectedData.dataTypes).to.eql([",
											"                    \"application/json\"]);",
											"    pm.expect(selectedData.datatypes).to.eql([",
											"                    \"json\"]);",
											"    pm.expect(selectedData.methods).to.eql([",
											"                    'POST']);",
											"    pm.expect(selectedData.versions).to.eql([",
											"                   \"1.3\"",
											"                ]);",
											"});",
											"pm.test(\"Check search/germplasm/{searchResultsDbid} call\", function () {",
											"    var index = 17;",
											"    var selectedData = jsonData.result.data[index];",
											"    pm.expect(selectedData.call).to.eql(\"search/germplasm/{searchResultsDbid}\");",
											"    pm.expect(selectedData.dataTypes).to.eql([",
											"                    \"application/json\"]);",
											"    pm.expect(selectedData.datatypes).to.eql([",
											"                    \"json\"]);",
											"    pm.expect(selectedData.methods).to.eql([",
											"                    'POST']);",
											"    pm.expect(selectedData.versions).to.eql([",
											"                   \"1.3\"",
											"                ]);",
											"});",
											"",
											"pm.test(\"Check observationLevels call\", function () {",
											"    var index = 18;",
											"    var selectedData = jsonData.result.data[index];",
											"    pm.expect(selectedData.call).to.eql(\"observationLevels\");",
											"    pm.expect(selectedData.dataTypes).to.eql([",
											"                    \"application/json\"]);",
											"    pm.expect(selectedData.datatypes).to.eql([",
											"                    \"json\"]);",
											"    pm.expect(selectedData.methods).to.eql([",
											"                    'GET']);",
											"    pm.expect(selectedData.versions).to.eql([",
											"                   \"1.3\"",
											"                ]);",
											"});",
											"",
											"pm.test(\"Check studies/{studyDbId}/germplasm call\", function () {",
											"    var index = 19;",
											"    var selectedData = jsonData.result.data[index];",
											"    pm.expect(selectedData.call).to.eql(\"studies/{studyDbId}/germplasm\");",
											"    pm.expect(selectedData.dataTypes).to.eql([",
											"                    \"application/json\"]);",
											"    pm.expect(selectedData.datatypes).to.eql([",
											"                    \"json\"]);",
											"    pm.expect(selectedData.methods).to.eql([",
											"                    'GET']);",
											"    pm.expect(selectedData.versions).to.eql([",
											"                   \"1.3\"",
											"                ]);",
											"});",
											"",
											"pm.test(\"Check studies/{studyDbId}/observationvariables call\", function () {",
											"    var index = 20;",
											"    var selectedData = jsonData.result.data[index];",
											"    pm.expect(selectedData.call).to.eql(\"studies/{studyDbId}/observationvariables\");",
											"    pm.expect(selectedData.dataTypes).to.eql([",
											"                    \"application/json\"]);",
											"    pm.expect(selectedData.datatypes).to.eql([",
											"                    \"json\"]);",
											"    pm.expect(selectedData.methods).to.eql([",
											"                    'GET']);",
											"    pm.expect(selectedData.versions).to.eql([",
											"                   \"1.3\"",
											"                ]);",
											"});",
											"pm.test(\"Check germplasm call\", function () {",
											"    var index = 21;",
											"    var selectedData = jsonData.result.data[index];",
											"    pm.expect(selectedData.call).to.eql(\"germplasm\");",
											"    pm.expect(selectedData.dataTypes).to.eql([",
											"                    \"application/json\"]);",
											"    pm.expect(selectedData.datatypes).to.eql([",
											"                    \"json\"]);",
											"    pm.expect(selectedData.methods).to.eql([",
											"                    'GET']);",
											"    pm.expect(selectedData.versions).to.eql([",
											"                   \"1.3\"",
											"                ]);",
											"});",
											"pm.test(\"Check germplasm/{germplasmDbId}/attributes call\", function () {",
											"    var index = 22;",
											"    var selectedData = jsonData.result.data[index];",
											"    pm.expect(selectedData.call).to.eql(\"germplasm/{germplasmDbId}/attributes\");",
											"    pm.expect(selectedData.dataTypes).to.eql([",
											"                    \"application/json\"]);",
											"    pm.expect(selectedData.datatypes).to.eql([",
											"                    \"json\"]);",
											"    pm.expect(selectedData.methods).to.eql([",
											"                    'GET']);",
											"    pm.expect(selectedData.versions).to.eql([",
											"                   \"1.3\"",
											"                ]);",
											"});",
											"pm.test(\"Check variables call\", function () {",
											"    var index = 23;",
											"    var selectedData = jsonData.result.data[index];",
											"    pm.expect(selectedData.call).to.eql(\"variables\");",
											"    pm.expect(selectedData.dataTypes).to.eql([",
											"                    \"application/json\"]);",
											"    pm.expect(selectedData.datatypes).to.eql([",
											"                    \"json\"]);",
											"    pm.expect(selectedData.methods).to.eql([",
											"                    'GET']);",
											"    pm.expect(selectedData.versions).to.eql([",
											"                   \"1.3\"",
											"                ]);",
											"});",
											"",
											"pm.test(\"Check images call\", function () {",
											"    var index = 24;",
											"    var selectedData = jsonData.result.data[index];",
											"    pm.expect(selectedData.call).to.eql(\"images\");",
											"    pm.expect(selectedData.dataTypes).to.eql([",
											"                    \"application/json\"]);",
											"    pm.expect(selectedData.datatypes).to.eql([",
											"                    \"json\"]);",
											"    pm.expect(selectedData.methods).to.eql([",
											"                    'POST']);",
											"    pm.expect(selectedData.versions).to.eql([",
											"                   \"1.3\"",
											"                ]);",
											"});",
											"",
											"pm.test(\"Check images/{imageDbId} call\", function () {",
											"    var index = 25;",
											"    var selectedData = jsonData.result.data[index];",
											"    pm.expect(selectedData.call).to.eql(\"images/{imageDbId}\");",
											"    pm.expect(selectedData.dataTypes).to.eql([",
											"                    \"application/json\"]);",
											"    pm.expect(selectedData.datatypes).to.eql([",
											"                    \"json\"]);",
											"    pm.expect(selectedData.methods).to.eql([",
											"                    'PUT']);",
											"    pm.expect(selectedData.versions).to.eql([",
											"                   \"1.3\"",
											"                ]);",
											"});",
											"pm.test(\"Check images/{imageDbId}/imagecontent call\", function () {",
											"    var index = 26;",
											"    var selectedData = jsonData.result.data[index];",
											"    pm.expect(selectedData.call).to.eql(\"images/{imageDbId}/imagecontent\");",
											"    pm.expect(selectedData.dataTypes).to.eql([",
											"                    \"application/json\"]);",
											"    pm.expect(selectedData.datatypes).to.eql([",
											"                    \"json\"]);",
											"    pm.expect(selectedData.methods).to.eql([",
											"                    'POST']);",
											"    pm.expect(selectedData.versions).to.eql([",
											"                   \"1.3\"",
											"                ]);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/calls",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"calls"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify calls with csv format",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"pm.test(\"Verify returned metadata\", function () {",
											"    pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											"    pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											"    pm.expect(jsonData.metadata.pagination.totalCount).to.eql(1);",
											"    pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											"    pm.expect(jsonData.metadata.status).to.eql([]);",
											"    pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"pm.test(\"Check if csv exists from datatypes\", function () {",
											"    var i;",
											"    for (i = 0; i < jsonData.result.data.length; i++){",
											"        pm.expect(jsonData.result.data[i].datatypes).contains(\"csv\");",
											"    }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/calls?dataType=csv",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"calls"
									],
									"query": [
										{
											"key": "dataType",
											"value": "csv"
										}
									]
								},
								"description": "GET ​/brapi​/v1​/calls"
							},
							"response": []
						},
						{
							"name": "Verify calls tsv format",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Verify returned metadata\", function () {",
											"    pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											"    pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											"    pm.expect(jsonData.metadata.pagination.totalCount).to.eql(1);",
											"    pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											"    pm.expect(jsonData.metadata.status).to.eql([]);",
											"    pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Check if tsv exists from datatypes\", function () {",
											"    var i;",
											"    for (i = 0; i < jsonData.result.data.length; i++){",
											"        pm.expect(jsonData.result.data[i].datatypes).contains(\"tsv\");",
											"    }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/calls?dataType=tsv",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"calls"
									],
									"query": [
										{
											"key": "dataType",
											"value": "tsv"
										}
									]
								},
								"description": "GET ​/brapi​/v1​/calls"
							},
							"response": []
						},
						{
							"name": "Verify calls with json format",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"pm.test(\"Verify returned metadata\", function () {",
											"    pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											"    pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											"    pm.expect(jsonData.metadata.pagination.totalCount).to.eql(27);",
											"    pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											"    pm.expect(jsonData.metadata.status).to.eql([]);",
											"    pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Check if json exists from datatypes\", function () {",
											"    var i;",
											"    for (i = 0; i < jsonData.result.data.length; i++){",
											"        pm.expect(jsonData.result.data[i].datatypes).contains(\"json\");",
											"    }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/calls?dataType=json",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"calls"
									],
									"query": [
										{
											"key": "dataType",
											"value": "json"
										}
									]
								},
								"description": "GET ​/brapi​/v1​/calls"
							},
							"response": []
						},
						{
							"name": "Verify calls with  text/csv format",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"pm.test(\"Verify returned metadata\", function () {",
											"    pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											"    pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											"    pm.expect(jsonData.metadata.pagination.totalCount).to.eql(1);",
											"    pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											"    pm.expect(jsonData.metadata.status).to.eql([]);",
											"    pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Check if text/csv exists from dataTypes\", function () {",
											"    var i;",
											"    for (i = 0; i < jsonData.result.data.length; i++){",
											"        pm.expect(jsonData.result.data[i].dataTypes).contains(\"text/csv\");",
											"    }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/calls?dataType=text/csv",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"calls"
									],
									"query": [
										{
											"key": "dataType",
											"value": "text/csv"
										}
									]
								},
								"description": "GET ​/brapi​/v1​/calls"
							},
							"response": []
						},
						{
							"name": "Verify calls with text/tsv format",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"pm.test(\"Verify returned metadata\", function () {",
											"    pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											"    pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											"    pm.expect(jsonData.metadata.pagination.totalCount).to.eql(1);",
											"    pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											"    pm.expect(jsonData.metadata.status).to.eql([]);",
											"    pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Check if text/tsv exists from dataTypes\", function () {",
											"    var i;",
											"    for (i = 0; i < jsonData.result.data.length; i++){",
											"        pm.expect(jsonData.result.data[i].dataTypes).contains(\"text/tsv\");",
											"    }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/calls?dataType=text/tsv",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"calls"
									],
									"query": [
										{
											"key": "dataType",
											"value": "text/tsv"
										}
									]
								},
								"description": "GET ​/brapi​/v1​/calls"
							},
							"response": []
						},
						{
							"name": "Verify calls with application/json format",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"pm.test(\"Verify returned metadata\", function () {",
											"    pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											"    pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											"    pm.expect(jsonData.metadata.pagination.totalCount).to.eql(27);",
											"    pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											"    pm.expect(jsonData.metadata.status).to.eql([]);",
											"    pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Check if application/json exists from dataTypes\", function () {",
											"    var i;",
											"    for (i = 0; i < jsonData.result.data.length; i++){",
											"        pm.expect(jsonData.result.data[i].dataTypes).contains(\"application/json\");",
											"    }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/calls?dataType=application/json",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"calls"
									],
									"query": [
										{
											"key": "dataType",
											"value": "application/json"
										}
									]
								},
								"description": "GET ​/brapi​/v1​/calls"
							},
							"response": []
						},
						{
							"name": "Verify calls with application/flapjack",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"",
											"pm.test(\"Check error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.metadata.status[0].message).contains(\"not found calls\");",
											"",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/calls?dataType=application/flapjack",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"calls"
									],
									"query": [
										{
											"key": "dataType",
											"value": "application/flapjack"
										}
									]
								},
								"description": "GET ​/brapi​/v1​/calls"
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "crop-resource-brapi",
			"item": [
				{
					"name": "GET /brapi/v1/crops",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Check testdata crop \", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.result.data[0]).to.eql(\"maize\");\r",
									"});\r",
									"pm.test(\"Check testdata crop \", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.result.data[1]).to.eql(\"testdata\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{masterToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BMSurl}}/brapi/v1/crops",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"brapi",
								"v1",
								"crops"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "germplasm-resource-brapi",
			"item": [
				{
					"name": "GET ​/{crop}​/brapi​/v1​/germplasm",
					"item": [
						{
							"name": "Verify response code and body when entered valid crop only",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"var data = jsonData.result.data[0];",
											"pm.test(\"Verify returned metadata\", function () {",
											"    pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											"    pm.expect(jsonData.metadata.pagination.pageSize).to.eql(10000);",
											"    pm.expect(jsonData.metadata.pagination.totalCount).to.eql(86);",
											"    pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											"    pm.expect(jsonData.metadata.status).to.eql([]);",
											"    pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"",
											"pm.test(\"Check germplasmDbId \", function () {",
											"    pm.expect(data.germplasmDbId).to.eql(\"PKWDG942cd372\");",
											"});",
											"",
											"pm.test(\"Check defaultDisplayName \", function () {",
											"    pm.expect(data.defaultDisplayName).to.eql(\"CML1\");",
											"});",
											"pm.test(\"Check accessionNumber \", function () {",
											"    pm.expect(data.accessionNumber).to.eql(\"ACCNO1\");",
											"});",
											"",
											"pm.test(\"Check germplasmName \", function () {",
											"    pm.expect(data.germplasmName).to.eql(\"CML1\");",
											"});",
											"/**",
											"pm.test(\"Check germplasmPUI \", function () {",
											"    pm.expect(data.germplasmPUI).to.eql(\"PKWDG942cd372\");",
											"});",
											" */",
											"",
											"pm.test(\"Check pedigree\", function () {",
											"    pm.expect(data.pedigree).to.eql(\"CML1\");",
											"});",
											"pm.test(\"Check commonCropName\", function () {",
											"    pm.expect(data.commonCropName).to.eql(\"commoncropnm\");",
											"});",
											"/**",
											"pm.test(\"Check germplasmSeedSource\", function () {",
											"    pm.expect(data.germplasmSeedSource).to.eql(\"AA001\");",
											"});",
											" */",
											"",
											"pm.test(\"Check synonyms\", function () {",
											" var names = [\"ACCNO1\", \"DVNM1\", \"GENUS1\", \"DVNM1\",\"PUIname1\"];",
											"   for (var i = 0; i < data.synonyms.length; i++) {",
											"    pm.expect(data.synonyms[i]).to.eql(names[i]);",
											"    }",
											"",
											"});",
											"",
											"pm.test(\"Check instituteCode\", function () {",
											"    pm.expect(data.instituteCode).to.eql(\"instituteCode001\");",
											"});",
											"pm.test(\"Check instituteName\", function () {",
											"    pm.expect(data.instituteName).to.eql(\"instituteName001\");",
											"});",
											"",
											"pm.test(\"Check countryOfOriginCode\", function () {",
											"    pm.expect(data.countryOfOriginCode).to.eql(\"WARDA\");",
											"});",
											"",
											"pm.test(\"Check typeOfGermplasmStorageCode\", function () {",
											"    pm.expect(data.typeOfGermplasmStorageCode).to.eql([]);",
											"});",
											"pm.test(\"Check genus\", function () {",
											"    pm.expect(data.genus).to.eql(\"GENUS1\");",
											"});",
											"pm.test(\"Check species\", function () {",
											"    pm.expect(data.species).to.eql(\"SPNAM1\");",
											"});",
											"pm.test(\"Check taxonIds\", function () {",
											"    pm.expect(data.taxonIds).to.eql([]);",
											"});",
											"pm.test(\"Check speciesAuthority\", function () {",
											"    pm.expect(data.speciesAuthority).to.eql(\"SPAUTH1\");",
											"});",
											"",
											"pm.test(\"Check subtaxa\", function () {",
											"    pm.expect(data.subtaxa).to.eql(\"SUBTAX1\");",
											"});",
											"pm.test(\"Check subtaxaAuthority\", function () {",
											"    pm.expect(data.subtaxaAuthority).to.eql(\"STAUTH1\");",
											"});",
											"pm.test(\"Check donors\", function () {",
											"    pm.expect(data.donors).to.eql([]);",
											"});",
											"pm.test(\"Check acquisitionDate\", function () {",
											"    pm.expect(data.acquisitionDate).to.eql(\"2018-10-25\");",
											"});",
											"pm.test(\"Check breedingMethodDbId\", function () {",
											"    pm.expect(data.breedingMethodDbId).to.eql(\"70\");",
											"});",
											"pm.test(\"Check germplasmGenus\", function () {",
											"    pm.expect(data.germplasmGenus).to.eql(\"GENUS1\");",
											"});",
											"pm.test(\"Check germplasmSpecies\", function () {",
											"    pm.expect(data.germplasmSpecies).to.eql(\"SPNAM1\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/germplasm?page=0&pageSize=10000",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"germplasm"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "10000"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v1/germplasm"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered valid crop and germplasmDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"pm.test(\"Verify returned metadata\", function () {",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(10000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(1);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Check if all data has correct germplasmDbId\", function () {",
											"  var jsonData = pm.response.json();",
											"  var dataLength = jsonData.result.data.length;",
											"",
											"  for (i = 0; i < dataLength ; i++) {",
											"      var data = jsonData.result.data[i];",
											"      pm.expect(data.germplasmDbId).to.eql(\"PKWDG942cd372\");",
											"  }",
											" ",
											"});    ",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/germplasm?page=0&pageSize=10000&germplasmDbId=PKWDG942cd372",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"germplasm"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "10000"
										},
										{
											"key": "germplasmDbId",
											"value": "PKWDG942cd372"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v1/germplasm"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered valid crop and germplasmName",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"pm.test(\"Verify returned metadata\", function () {",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(10000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(33);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Check if all data has correct germplasmName\", function () {",
											"  var dataLength = jsonData.result.data.length;",
											"",
											"  for (i = 0; i < dataLength ; i++) {",
											"      var data = jsonData.result.data[i];",
											"      pm.expect(data.germplasmName).to.include(\"CML1\");",
											"  }",
											" ",
											"});    ",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/germplasm?page=0&pageSize=10000&germplasmName=CML1",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"germplasm"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "10000"
										},
										{
											"key": "germplasmName",
											"value": "CML1"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v1/germplasm"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered valid crop and commonCropName",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"pm.test(\"Verify returned metadata\", function () {",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(10000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(1);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Check if all data has correct commonCropName\", function () {",
											"  var dataLength = jsonData.result.data.length;",
											"",
											"  for (i = 0; i < dataLength ; i++) {",
											"      var data = jsonData.result.data[i];",
											"      pm.expect(data.commonCropName).to.eql(\"commoncropnm\");",
											"  }",
											" ",
											"});    ",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/germplasm?page=0&pageSize=10000&commonCropName=commoncropnm",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"germplasm"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "10000"
										},
										{
											"key": "commonCropName",
											"value": "commoncropnm"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v1/germplasm"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered valid page and pageSize",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"var data = jsonData.result.data[0];",
											"pm.test(\"Verify returned metadata\", function () {",
											"    pm.expect(jsonData.metadata.pagination.currentPage).to.eql(2);",
											"    pm.expect(jsonData.metadata.pagination.pageSize).to.eql(5);",
											"    pm.expect(jsonData.metadata.pagination.totalCount).to.eql(86);",
											"    pm.expect(jsonData.metadata.pagination.totalPages).to.eql(18);",
											"    pm.expect(jsonData.metadata.status).to.eql([]);",
											"    pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"",
											"pm.test(\"Check germplasmDbId \", function () {",
											"    pm.expect(data.germplasmDbId).to.eql(\"PKWDG225f1813\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/germplasm?page=2&pageSize=5",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"germplasm"
									],
									"query": [
										{
											"key": "page",
											"value": "2"
										},
										{
											"key": "pageSize",
											"value": "5"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v1/germplasm"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered pageSize greater than max",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"",
											"pm.test(\"Verify returned error message\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.errors[0].message).to.eql(\"Page size must between 1 and 10000.\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/germplasm?page=0&pageSize=10001",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"germplasm"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "10001"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v1/germplasm"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid page",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"",
											"pm.test(\"Verify returned error message\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.errors[0].message).to.eql(\"A total of 1 pages are available, so the page number must between 0 and 1 (exclusive).\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/germplasm?page=9999&pageSize=10000",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"germplasm"
									],
									"query": [
										{
											"key": "page",
											"value": "9999"
										},
										{
											"key": "pageSize",
											"value": "10000"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v1/germplasm"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid crop",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function() {",
											"    pm.response.to.have.status(400);",
											"});",
											"var jsonData = pm.response.json();",
											"pm.test(\"Check error message\", function () {",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Invalid crop invalidcrop for URL:/invalidCrop/brapi/v1/germplasm\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/invalidCrop/brapi/v1/germplasm?page=0&pageSize=10000",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"invalidCrop",
										"brapi",
										"v1",
										"germplasm"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "10000"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v1/germplasm"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid germplasmDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"pm.test(\"Check data if empty\", function () {",
											"    pm.expect(jsonData.result.data).to.eql([]);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/germplasm?page=0&pageSize=10000&germplasmDbId=invalid",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"germplasm"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "10000"
										},
										{
											"key": "germplasmDbId",
											"value": "invalid"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v1/germplasm"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid germplasmName",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"pm.test(\"Check data if empty\", function () {",
											"    pm.expect(jsonData.result.data).to.eql([]);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/germplasm?page=0&pageSize=10000&germplasmName=invalid",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"germplasm"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "10000"
										},
										{
											"key": "germplasmName",
											"value": "invalid"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v1/germplasm"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid commonCropName",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"pm.test(\"Check data if empty\", function () {",
											"    pm.expect(jsonData.result.data).to.eql([]);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/germplasm?page=0&pageSize=10000&commonCropName=invalid",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"germplasm"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "10000"
										},
										{
											"key": "commonCropName",
											"value": "invalid"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v1/germplasm"
							},
							"response": []
						}
					]
				},
				{
					"name": "GET ​/{crop}​/brapi​/v2/germplasm",
					"item": [
						{
							"name": "Verify response code and body when entered valid crop only",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"var data = jsonData.result.data[0];",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											"    pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											"    pm.expect(jsonData.metadata.pagination.pageSize).to.eql(10000);",
											"    pm.expect(jsonData.metadata.pagination.totalCount).to.eql(86);",
											"    pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											"    pm.expect(jsonData.metadata.status).to.eql([]);",
											"    pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"",
											"pm.test(\"Check germplasmDbId \", function () {",
											"    pm.expect(data.germplasmDbId).to.eql(pm.environment.get(\"germplasm_uuid\"));",
											"});",
											"",
											"pm.test(\"Check defaultDisplayName \", function () {",
											"    pm.expect(data.defaultDisplayName).to.eql(\"CML1\");",
											"});",
											"pm.test(\"Check accessionNumber \", function () {",
											"    pm.expect(data.accessionNumber).to.eql(\"ACCNO1\");",
											"});",
											"",
											"pm.test(\"Check germplasmName \", function () {",
											"    pm.expect(data.germplasmName).to.eql(\"CML1\");",
											"});",
											"",
											"pm.test(\"Check germplasmPUI \", function () {",
											"    pm.expect(data.germplasmPUI).to.eql(\"PUIname1\");",
											"});",
											"",
											"pm.test(\"Check pedigree\", function () {",
											"    pm.expect(data.pedigree).to.eql(\"CML1\");",
											"});",
											"",
											"",
											"pm.test(\"Check seedSource\", function () {",
											"    pm.expect(data.seedSource).to.eql(\"seedSource\");",
											"});",
											"",
											"pm.test(\"Check synonyms\", function () {",
											" var names = [\"ACCNO1\", \"DVNM1\", \"GENUS1\", \"DVNM1\",\"PUIname1\"];",
											"   for (var i = 0; i < data.synonyms.length; i++) {",
											"    pm.expect(data.synonyms[i].synonym).to.eql(names[i]);",
											"    }",
											"});",
											"",
											"pm.test(\"Check synonym types\", function () {",
											" var types = [\"ACCNO\", \"DRVNM\", \"GENUS\", \"SELHISFIX\",\"PUI\"];",
											"   for (var i = 0; i < data.synonyms.length; i++) {",
											"    pm.expect(data.synonyms[i].type).to.eql(types[i]);",
											"    }",
											"});",
											"",
											"pm.test(\"Check commonCropName\", function () {",
											"    pm.expect(data.commonCropName).to.eql(\"commoncropnm\");",
											"});",
											"",
											"pm.test(\"Check instituteCode\", function () {",
											"    pm.expect(data.instituteCode).to.eql(\"instituteCode001\");",
											"});",
											"pm.test(\"Check instituteName\", function () {",
											"    pm.expect(data.instituteName).to.eql(\"instituteName001\");",
											"});",
											"",
											"pm.test(\"Check countryOfOriginCode\", function () {",
											"    pm.expect(data.countryOfOriginCode).to.eql(\"WARDA\");",
											"});",
											"",
											"pm.test(\"Check storageTypes\", function () {",
											"    pm.expect(data.storageTypes).to.eql([]);",
											"});",
											"pm.test(\"Check genus\", function () {",
											"    pm.expect(data.genus).to.eql(\"GENUS1\");",
											"});",
											"pm.test(\"Check species\", function () {",
											"    pm.expect(data.species).to.eql(\"SPNAM1\");",
											"});",
											"pm.test(\"Check taxonIds\", function () {",
											"    pm.expect(data.taxonIds).to.eql([]);",
											"});",
											"pm.test(\"Check speciesAuthority\", function () {",
											"    pm.expect(data.speciesAuthority).to.eql(\"SPAUTH1\");",
											"});",
											"",
											"pm.test(\"Check subtaxa\", function () {",
											"    pm.expect(data.subtaxa).to.eql(\"SUBTAX1\");",
											"});",
											"pm.test(\"Check subtaxaAuthority\", function () {",
											"    pm.expect(data.subtaxaAuthority).to.eql(\"STAUTH1\");",
											"});",
											"pm.test(\"Check donors\", function () {",
											"    pm.expect(data.donors).to.eql([]);",
											"});",
											"pm.test(\"Check acquisitionDate\", function () {",
											"    pm.expect(data.acquisitionDate).to.eql(\"2018-10-25\");",
											"});",
											"pm.test(\"Check breedingMethodDbId\", function () {",
											"    pm.expect(data.breedingMethodDbId).to.eql(\"70\");",
											"});",
											"pm.test(\"Check if returned additionalInfo NOTE_AA_text is correct\", function () {",
											"    pm.expect(data.additionalInfo.NOTE_AA_text).to.eql(\"note1\");",
											"});",
											"pm.test(\"Check if returned additionalInfo PROGM_AA_text is correct\", function () {",
											"    pm.expect(data.additionalInfo.PROGM_AA_text).to.eql(\"PROGM1\");",
											"});",
											"",
											"pm.test(\"Check if returned additionalInfo CROPNM_AP_text is correct\", function () {",
											"    pm.expect(data.additionalInfo.CROPNM_AP_text).to.eql(\"commoncropnm\");",
											"});",
											"",
											"pm.test(\"Check if returned additionalInfo SORIG_AP_text is correct\", function () {",
											"    pm.expect(data.additionalInfo.SORIG_AP_text ).to.eql(\"sorig001\");",
											"});",
											"",
											"pm.test(\"Check if returned additionalInfo SPAUTH_AP_text is correct\", function () {",
											"    pm.expect(data.additionalInfo.SPAUTH_AP_text).to.eql(\"SPAUTH1\");",
											"});",
											"pm.test(\"Check if returned additionalInfo STAUTH_AP_text is correct\", function () {",
											"    pm.expect(data.additionalInfo.STAUTH_AP_text).to.eql(\"STAUTH1\");",
											"});",
											"",
											"pm.test(\"Check if returned additionalInfo ORIGININST_AP_text is correct\", function () {",
											"    pm.expect(data.additionalInfo.ORIGININST_AP_text).to.eql(\"instituteName001\");",
											"});",
											"",
											"pm.test(\"Check if returned additionalInfo INSTCODE_AP_text is correct\", function () {",
											"    pm.expect(data.additionalInfo.INSTCODE_AP_text).to.eql(\"instituteCode001\");",
											"});",
											"",
											"pm.test(\"Check if returned additionalInfo SPNAM_AP_text is correct\", function () {",
											"    pm.expect(data.additionalInfo.SPNAM_AP_text).to.eql(\"SPNAM1\");",
											"});",
											"pm.test(\"Check if returned additionalInfo PLOTCODE_AP_text is correct\", function () {",
											"    pm.expect(data.additionalInfo.PLOTCODE_AP_text).to.eql(\"seedSource\");",
											"});",
											"pm.test(\"Check if returned additionalInfo ORI_COUN_AP_text is correct\", function () {",
											"    pm.expect(data.additionalInfo.ORI_COUN_AP_text).to.eql(\"ORI_COUN1\");",
											"});",
											"pm.test(\"Check if returned additionalInfo SUBTAX_AP_text is correct\", function () {",
											"    pm.expect(data.additionalInfo.SUBTAX_AP_text).to.eql(\"SUBTAX1\");",
											"});",
											"",
											"pm.test(\"Check externalReferences referenceID\", function () {",
											"    pm.expect(data.externalReferences[0].referenceID).to.eql(\"germplasm_refID\");",
											"});",
											"",
											"",
											"pm.test(\"Check externalReferences referenceSource\", function () {",
											"    pm.expect(data.externalReferences[0].referenceSource).to.eql(\"germplasm_refSource\");",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/germplasm?page=0&pageSize=10000",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"germplasm"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "10000"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v2/germplasm"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered valid crop and germplasmDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"pm.test(\"Verify returned metadata\", function () {",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(10000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(1);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Check if all data has correct germplasmDbId\", function () {",
											"  var jsonData = pm.response.json();",
											"  var dataLength = jsonData.result.data.length;",
											"",
											"  for (i = 0; i < dataLength ; i++) {",
											"      var data = jsonData.result.data[i];",
											"      pm.expect(data.germplasmDbId).to.eql(\"PKWDG942cd372\");",
											"  }",
											" ",
											"});    ",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/germplasm?page=0&pageSize=10000&germplasmDbId=PKWDG942cd372",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"germplasm"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "10000"
										},
										{
											"key": "germplasmDbId",
											"value": "PKWDG942cd372"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v2/germplasm"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered valid crop and germplasmDbId w germplasmOrigin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"var data = jsonData.result.data[0];",
											"pm.test(\"Verify returned metadata\", function () {",
											"    pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											"    pm.expect(jsonData.metadata.pagination.pageSize).to.eql(10000);",
											"    pm.expect(jsonData.metadata.pagination.totalCount).to.eql(1);",
											"    pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											"    pm.expect(jsonData.metadata.status).to.eql([]);",
											"    pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"",
											"pm.test(\"Check germplasmDbId \", function () {",
											"    pm.expect(data.germplasmDbId).to.eql(\"PKWDGdZIjsBS9\");",
											"});",
											"",
											"pm.test(\"Check defaultDisplayName \", function () {",
											"    pm.expect(data.defaultDisplayName).to.eql(\"IB21\");",
											"});",
											"pm.test(\"Check germplasmName \", function () {",
											"    pm.expect(data.germplasmName).to.eql(\"IB21\");",
											"});",
											"pm.test(\"Check pedigree\", function () {",
											"    pm.expect(data.pedigree).to.eql(\"CML1/CML3\");",
											"});",
											"pm.test(\"Check synonyms\", function () {",
											"    pm.expect(data.synonyms).to.eql([]);",
											"    ",
											"});",
											"",
											"//Verify details of germplasm origin",
											"pm.test(\"Check germplasmOrigin coordinateUncertainty\", function () {",
											"    pm.expect(data.germplasmOrigin.coordinateUncertainty).to.eql(\"\");",
											"    ",
											"});",
											"pm.test(\"Check germplasmOrigin geometry coordinates  \", function () {",
											"    pm.expect(data.germplasmOrigin.coordinates.geometry.coordinates).to.eql([-76.506042,42.417373]);",
											"});",
											"pm.test(\"Check germplasmOrigin geometry type  \", function () {",
											"    pm.expect(data.germplasmOrigin.coordinates.geometry.type).to.eql(\"Point\");",
											"});",
											"pm.test(\"Check germplasmOrigin coordinates type  \", function () {",
											"    pm.expect(data.germplasmOrigin.coordinates.type).to.eql(\"Feature\");",
											"});",
											"",
											"",
											"",
											"pm.test(\"Check countryOfOriginCode\", function () {",
											"    pm.expect(data.countryOfOriginCode).to.eql(\"WARDA\");",
											"});",
											"",
											"pm.test(\"Check storageTypes\", function () {",
											"    pm.expect(data.storageTypes).to.eql([]);",
											"});",
											"pm.test(\"Check taxonIds\", function () {",
											"    pm.expect(data.taxonIds).to.eql([]);",
											"});",
											"pm.test(\"Check donors\", function () {",
											"    pm.expect(data.donors).to.eql([]);",
											"});",
											"pm.test(\"Check acquisitionDate\", function () {",
											"    pm.expect(data.acquisitionDate).to.eql(\"2021-04-01\");",
											"});",
											"pm.test(\"Check breedingMethodDbId\", function () {",
											"    pm.expect(data.breedingMethodDbId).to.eql(\"107\");",
											"});",
											"pm.test(\"Check seedSource\", function () {",
											"    pm.expect(data.seedSource).to.eql(\"Study with Crosses and Selections:WARDA:202103:34:/Study with Crosses and Selections:WARDA:202103:30:\");",
											"});",
											"pm.test(\"Check additionalInfo PLOTCODE_AP_text\", function () {",
											"    pm.expect(data.additionalInfo.PLOTCODE_AP_text).to.eql(\"Study with Crosses and Selections:WARDA:202103:34:/Study with Crosses and Selections:WARDA:202103:30:\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/germplasm?page=0&pageSize=10000&germplasmDbId=PKWDGdZIjsBS9",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"germplasm"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "10000"
										},
										{
											"key": "germplasmDbId",
											"value": "PKWDGdZIjsBS9"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v2/germplasm"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered valid crop and germplasmName",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"pm.test(\"Verify returned metadata\", function () {",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(10000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(33);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Check if all data has correct germplasmName\", function () {",
											"  var dataLength = jsonData.result.data.length;",
											"",
											"  for (i = 0; i < dataLength ; i++) {",
											"      var data = jsonData.result.data[i];",
											"      pm.expect(data.germplasmName).to.include(\"CML1\");",
											"  }",
											" ",
											"});    ",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/germplasm?page=0&pageSize=10000&germplasmName=CML1",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"germplasm"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "10000"
										},
										{
											"key": "germplasmName",
											"value": "CML1"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v2/germplasm"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered valid crop and commonCropName",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"pm.test(\"Verify returned metadata\", function () {",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(10000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(1);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Check if all data has correct commonCropName\", function () {",
											"  var dataLength = jsonData.result.data.length;",
											"",
											"  for (i = 0; i < dataLength ; i++) {",
											"      var data = jsonData.result.data[i];",
											"      pm.expect(data.commonCropName).to.eql(\"commoncropnm\");",
											"  }",
											" ",
											"});    ",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/germplasm?page=0&pageSize=10000&commonCropName=commoncropnm",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"germplasm"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "10000"
										},
										{
											"key": "commonCropName",
											"value": "commoncropnm"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v2/germplasm"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered valid crop and accessionNumber",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"pm.test(\"Verify returned metadata\", function () {",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(10000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(1);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Check if all data has correct commonCropName\", function () {",
											"  var dataLength = jsonData.result.data.length;",
											"",
											"  for (i = 0; i < dataLength ; i++) {",
											"      var data = jsonData.result.data[i];",
											"      pm.expect(data.accessionNumber).to.eql(\"ACCNO1\");",
											"  }",
											" ",
											"});    ",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/germplasm?page=0&pageSize=10000&accessionNumber=ACCNO1",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"germplasm"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "10000"
										},
										{
											"key": "accessionNumber",
											"value": "ACCNO1"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v2/germplasm"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered valid crop and genus",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"pm.test(\"Verify returned metadata\", function () {",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(10000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(1);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Check if all data has correct commonCropName\", function () {",
											"  var dataLength = jsonData.result.data.length;",
											"",
											"  for (i = 0; i < dataLength ; i++) {",
											"      var data = jsonData.result.data[i];",
											"      pm.expect(data.genus).to.eql(\"GENUS1\");",
											"  }",
											" ",
											"});    ",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/germplasm?page=0&pageSize=10000&genus=GENUS1",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"germplasm"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "10000"
										},
										{
											"key": "genus",
											"value": "GENUS1"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v2/germplasm"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered valid crop and studyDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"pm.test(\"Verify returned metadata\", function () {",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(10000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(20);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Check all germplasmDbId are equal to the expected germplasmDbIds filtered by the given studyDbId\", function () {",
											"   var jsonData = pm.response.json();",
											"   var i;",
											"   var germplasmDbIds = [\"PKWDG942cd372\",\"PKWDG02fca806\",\"PKWDG94574ef6\",\"PKWDG47fa785e\",\"PKWDGb401a9db\",\"PKWDG4b204948\",\"PKWDG7384cd47\",\"PKWDG4387f106\",\"PKWDG82945bab\",\"PKWDG7dcfbd6f\",\"PKWDG225f1813\",\"PKWDG83aabaf0\",\"PKWDGc4a40c61\",\"PKWDG34bd21ac\",\"PKWDG2a35f026\",\"PKWDGee4a84d9\",\"PKWDG4eb70744\",\"PKWDGc182984c\",\"PKWDG0706471c\",\"PKWDGa03082db\"]",
											"    for (i = 0; i < jsonData.result.data.length; i++) { ",
											"        pm.expect(jsonData.result.data[i].germplasmDbId).to.eql(germplasmDbIds[i]);",
											"    }",
											"});    ",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/germplasm?page=0&pageSize=10000&studyDbId={{studyDbId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"germplasm"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "10000"
										},
										{
											"key": "studyDbId",
											"value": "{{studyDbId}}"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v2/germplasm"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered valid crop and synonym - ACCNO",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"pm.test(\"Verify returned metadata\", function () {",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(10000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(1);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"pm.test(\"Check if all germplasm have the specified synonym\", function () {",
											"    //Variable for holding boolean value if synonym is found",
											"    var found = false;",
											"",
											"    for (var i = 0; i < jsonData.result.data.length; i++) {    ",
											"        for (var j=0; j < jsonData.result.data[i].synonyms.length;j++){",
											"            if(jsonData.result.data[i].synonyms[j].synonym ==\"ACCNO1\"){",
											"                found = true;",
											"                ",
											"            }",
											"        }       ",
											"       pm.expect(found).to.eql(true);  ",
											"        found = false;",
											"    } ",
											"}); ",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/germplasm?page=0&pageSize=10000&synonym=ACCNO1",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"germplasm"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "10000"
										},
										{
											"key": "synonym",
											"value": "ACCNO1"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v2/germplasm"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered valid crop and synonym - DRVNM",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"pm.test(\"Verify returned metadata\", function () {",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(10000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(3);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Check if all germplasm have the specified synonym\", function () {",
											"    //Variable for holding boolean value if synonym is found",
											"    var found = false;",
											"",
											"    for (var i = 0; i < jsonData.result.data.length; i++) {    ",
											"        for (var j=0; j < jsonData.result.data[i].synonyms.length;j++){",
											"            if(jsonData.result.data[i].synonyms[j].synonym ==\"DVNM1\"){",
											"                found = true;",
											"                ",
											"            }",
											"        }       ",
											"       pm.expect(found).to.eql(true);  ",
											"        found = false;",
											"    } ",
											"}); ",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/germplasm?page=0&pageSize=10000&synonym=DVNM1",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"germplasm"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "10000"
										},
										{
											"key": "synonym",
											"value": "DVNM1"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v2/germplasm"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered valid crop and synonym - GENUS",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"pm.test(\"Verify returned metadata\", function () {",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(10000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(1);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Check if all germplasm have the specified synonym\", function () {",
											"    //Variable for holding boolean value if synonym is found",
											"    var found = false;",
											"",
											"    for (var i = 0; i < jsonData.result.data.length; i++) {    ",
											"        for (var j=0; j < jsonData.result.data[i].synonyms.length;j++){",
											"            if(jsonData.result.data[i].synonyms[j].synonym ==\"GENUS1\"){",
											"                found = true;",
											"            }",
											"        }       ",
											"       pm.expect(found).to.eql(true);  ",
											"        found = false;",
											"    } ",
											"}); "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/germplasm?page=0&pageSize=10000&synonym=GENUS1",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"germplasm"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "10000"
										},
										{
											"key": "synonym",
											"value": "GENUS1"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v2/germplasm"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered valid crop and parentDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"pm.test(\"Verify returned metadata\", function () {",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(10000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(6);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Check all germplasmDbId are equal to the expected germplasmDbIds filtered by the given studyDbId\", function () {",
											"   var jsonData = pm.response.json();",
											"   var i;",
											"   var germplasmDbIds = [\"PKWDGccd05c2c\",\"PKWDG12899083\",\"PKWDGad095cb8\",\"PKWDGdZIjsBS9\",\"PKWDGxiifmdXr\",\"PKWDGhvcUm2DK\"]",
											"    for (i = 0; i < jsonData.result.data.length; i++) { ",
											"        pm.expect(jsonData.result.data[i].germplasmDbId).to.eql(germplasmDbIds[i]);",
											"    }",
											"});    ",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/germplasm?page=0&pageSize=10000&parentDbId=PKWDG942cd372",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"germplasm"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "10000"
										},
										{
											"key": "parentDbId",
											"value": "PKWDG942cd372"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v2/germplasm"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered valid crop and progenyDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"pm.test(\"Verify returned metadata\", function () {",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(10000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(2);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Check all germplasmDbId are equal to the expected germplasmDbIds filtered by the given progenyDbId\", function () {",
											"   var germplasmDbIds = [\"PKWDG942cd372\",\"PKWDG4b204948\"]",
											"    for (var i = 0; i < jsonData.result.data.length; i++) { ",
											"        pm.expect(jsonData.result.data[i].germplasmDbId).to.eql(germplasmDbIds[i]);",
											"    }",
											"});    ",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/germplasm?page=0&pageSize=10000&progenyDbId=PKWDGccd05c2c",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"germplasm"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "10000"
										},
										{
											"key": "progenyDbId",
											"value": "PKWDGccd05c2c"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v2/germplasm"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered valid crop and combination of other parameters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"var data = jsonData.result.data[0];",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											"    pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											"    pm.expect(jsonData.metadata.pagination.pageSize).to.eql(10000);",
											"    pm.expect(jsonData.metadata.pagination.totalCount).to.eql(1);",
											"    pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											"    pm.expect(jsonData.metadata.status).to.eql([]);",
											"    pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"",
											"pm.test(\"Check germplasmDbId \", function () {",
											"    pm.expect(data.germplasmDbId).to.eql(pm.environment.get(\"germplasm_uuid\"));",
											"});",
											"",
											"pm.test(\"Check defaultDisplayName \", function () {",
											"    pm.expect(data.defaultDisplayName).to.eql(\"CML1\");",
											"});",
											"pm.test(\"Check accessionNumber \", function () {",
											"    pm.expect(data.accessionNumber).to.eql(\"ACCNO1\");",
											"});",
											"",
											"pm.test(\"Check germplasmName \", function () {",
											"    pm.expect(data.germplasmName).to.eql(\"CML1\");",
											"});",
											"",
											"pm.test(\"Check germplasmPUI \", function () {",
											"    pm.expect(data.germplasmPUI).to.eql(\"PUIname1\");",
											"});",
											"",
											"pm.test(\"Check pedigree\", function () {",
											"    pm.expect(data.pedigree).to.eql(\"CML1\");",
											"});",
											"",
											"",
											"pm.test(\"Check seedSource\", function () {",
											"    pm.expect(data.seedSource).to.eql(\"seedSource\");",
											"});",
											"",
											"pm.test(\"Check synonyms\", function () {",
											" var names = [\"ACCNO1\", \"DVNM1\", \"GENUS1\", \"DVNM1\",\"PUIname1\"];",
											"   for (var i = 0; i < data.synonyms.length; i++) {",
											"    pm.expect(data.synonyms[i].synonym).to.eql(names[i]);",
											"    }",
											"});",
											"",
											"pm.test(\"Check synonym types\", function () {",
											" var types = [\"ACCNO\", \"DRVNM\", \"GENUS\", \"SELHISFIX\",\"PUI\"];",
											"   for (var i = 0; i < data.synonyms.length; i++) {",
											"    pm.expect(data.synonyms[i].type).to.eql(types[i]);",
											"    }",
											"});",
											"",
											"pm.test(\"Check commonCropName\", function () {",
											"    pm.expect(data.commonCropName).to.eql(\"commoncropnm\");",
											"});",
											"",
											"pm.test(\"Check instituteCode\", function () {",
											"    pm.expect(data.instituteCode).to.eql(\"instituteCode001\");",
											"});",
											"pm.test(\"Check instituteName\", function () {",
											"    pm.expect(data.instituteName).to.eql(\"instituteName001\");",
											"});",
											"",
											"pm.test(\"Check countryOfOriginCode\", function () {",
											"    pm.expect(data.countryOfOriginCode).to.eql(\"WARDA\");",
											"});",
											"",
											"pm.test(\"Check storageTypes\", function () {",
											"    pm.expect(data.storageTypes).to.eql([]);",
											"});",
											"pm.test(\"Check genus\", function () {",
											"    pm.expect(data.genus).to.eql(\"GENUS1\");",
											"});",
											"pm.test(\"Check species\", function () {",
											"    pm.expect(data.species).to.eql(\"SPNAM1\");",
											"});",
											"pm.test(\"Check taxonIds\", function () {",
											"    pm.expect(data.taxonIds).to.eql([]);",
											"});",
											"pm.test(\"Check speciesAuthority\", function () {",
											"    pm.expect(data.speciesAuthority).to.eql(\"SPAUTH1\");",
											"});",
											"",
											"pm.test(\"Check subtaxa\", function () {",
											"    pm.expect(data.subtaxa).to.eql(\"SUBTAX1\");",
											"});",
											"pm.test(\"Check subtaxaAuthority\", function () {",
											"    pm.expect(data.subtaxaAuthority).to.eql(\"STAUTH1\");",
											"});",
											"pm.test(\"Check donors\", function () {",
											"    pm.expect(data.donors).to.eql([]);",
											"});",
											"pm.test(\"Check acquisitionDate\", function () {",
											"    pm.expect(data.acquisitionDate).to.eql(\"2018-10-25\");",
											"});",
											"pm.test(\"Check breedingMethodDbId\", function () {",
											"    pm.expect(data.breedingMethodDbId).to.eql(\"70\");",
											"});",
											"pm.test(\"Check if returned additionalInfo NOTE_AA_text is correct\", function () {",
											"    pm.expect(data.additionalInfo.NOTE_AA_text).to.eql(\"note1\");",
											"});",
											"pm.test(\"Check if returned additionalInfo PROGM_AA_text is correct\", function () {",
											"    pm.expect(data.additionalInfo.PROGM_AA_text).to.eql(\"PROGM1\");",
											"});",
											"",
											"pm.test(\"Check if returned additionalInfo CROPNM_AP_text is correct\", function () {",
											"    pm.expect(data.additionalInfo.CROPNM_AP_text).to.eql(\"commoncropnm\");",
											"});",
											"",
											"pm.test(\"Check if returned additionalInfo SORIG_AP_text is correct\", function () {",
											"    pm.expect(data.additionalInfo.SORIG_AP_text ).to.eql(\"sorig001\");",
											"});",
											"",
											"pm.test(\"Check if returned additionalInfo SPAUTH_AP_text is correct\", function () {",
											"    pm.expect(data.additionalInfo.SPAUTH_AP_text).to.eql(\"SPAUTH1\");",
											"});",
											"pm.test(\"Check if returned additionalInfo STAUTH_AP_text is correct\", function () {",
											"    pm.expect(data.additionalInfo.STAUTH_AP_text).to.eql(\"STAUTH1\");",
											"});",
											"",
											"pm.test(\"Check if returned additionalInfo ORIGININST_AP_text is correct\", function () {",
											"    pm.expect(data.additionalInfo.ORIGININST_AP_text).to.eql(\"instituteName001\");",
											"});",
											"",
											"pm.test(\"Check if returned additionalInfo INSTCODE_AP_text is correct\", function () {",
											"    pm.expect(data.additionalInfo.INSTCODE_AP_text).to.eql(\"instituteCode001\");",
											"});",
											"",
											"pm.test(\"Check if returned additionalInfo SPNAM_AP_text is correct\", function () {",
											"    pm.expect(data.additionalInfo.SPNAM_AP_text).to.eql(\"SPNAM1\");",
											"});",
											"pm.test(\"Check if returned additionalInfo PLOTCODE_AP_text is correct\", function () {",
											"    pm.expect(data.additionalInfo.PLOTCODE_AP_text).to.eql(\"seedSource\");",
											"});",
											"pm.test(\"Check if returned additionalInfo ORI_COUN_AP_text is correct\", function () {",
											"    pm.expect(data.additionalInfo.ORI_COUN_AP_text).to.eql(\"ORI_COUN1\");",
											"});",
											"pm.test(\"Check if returned additionalInfo SUBTAX_AP_text is correct\", function () {",
											"    pm.expect(data.additionalInfo.SUBTAX_AP_text).to.eql(\"SUBTAX1\");",
											"});",
											"",
											"pm.test(\"Check externalReferences referenceID\", function () {",
											"    pm.expect(data.externalReferences[0].referenceID).to.eql(\"germplasm_refID\");",
											"});",
											"",
											"",
											"pm.test(\"Check externalReferences referenceSource\", function () {",
											"    pm.expect(data.externalReferences[0].referenceSource).to.eql(\"germplasm_refSource\");",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/germplasm?page=0&pageSize=10000&germplasmDbId=PKWDG942cd372&commonCropName=commoncropnm&germplasmName=CML1",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"germplasm"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "10000"
										},
										{
											"key": "germplasmDbId",
											"value": "PKWDG942cd372"
										},
										{
											"key": "commonCropName",
											"value": "commoncropnm"
										},
										{
											"key": "germplasmName",
											"value": "CML1"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v2/germplasm"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered valid page and pageSize",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"var data = jsonData.result.data[0];",
											"pm.test(\"Verify returned metadata\", function () {",
											"    pm.expect(jsonData.metadata.pagination.currentPage).to.eql(2);",
											"    pm.expect(jsonData.metadata.pagination.pageSize).to.eql(5);",
											"    pm.expect(jsonData.metadata.pagination.totalCount).to.eql(86);",
											"    pm.expect(jsonData.metadata.pagination.totalPages).to.eql(18);",
											"    pm.expect(jsonData.metadata.status).to.eql([]);",
											"    pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"",
											"pm.test(\"Check germplasmDbId \", function () {",
											"    pm.expect(data.germplasmDbId).to.eql(\"PKWDG225f1813\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/germplasm?page=2&pageSize=5",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"germplasm"
									],
									"query": [
										{
											"key": "page",
											"value": "2"
										},
										{
											"key": "pageSize",
											"value": "5"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v2/germplasm"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered pageSize greater than max",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"",
											"pm.test(\"Verify returned error message\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.errors[0].message).to.eql(\"Page size must between 1 and 10000.\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/germplasm?page=0&pageSize=10001",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"germplasm"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "10001"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v2/germplasm"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid page",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"",
											"pm.test(\"Verify returned error message\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.errors[0].message).to.eql(\"A total of 1 pages are available, so the page number must between 0 and 1 (exclusive).\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/germplasm?page=9999&pageSize=10000",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"germplasm"
									],
									"query": [
										{
											"key": "page",
											"value": "9999"
										},
										{
											"key": "pageSize",
											"value": "10000"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v2/germplasm"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid crop",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function() {",
											"    pm.response.to.have.status(400);",
											"});",
											"var jsonData = pm.response.json();",
											"pm.test(\"Check error message\", function () {",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Invalid crop invalidcrop for URL:/invalidCrop/brapi/v2/germplasm\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/invalidCrop/brapi/v2/germplasm?page=0&pageSize=10000",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"invalidCrop",
										"brapi",
										"v2",
										"germplasm"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "10000"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v2/germplasm"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid germplasmDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"pm.test(\"Check data if empty\", function () {",
											"    pm.expect(jsonData.result.data).to.eql([]);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/germplasm?page=0&pageSize=10000&germplasmDbId=invalid",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"germplasm"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "10000"
										},
										{
											"key": "germplasmDbId",
											"value": "invalid"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v2/germplasm"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid germplasmName",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"pm.test(\"Check data if empty\", function () {",
											"    pm.expect(jsonData.result.data).to.eql([]);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/germplasm?page=0&pageSize=10000&germplasmName=invalid",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"germplasm"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "10000"
										},
										{
											"key": "germplasmName",
											"value": "invalid"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v2/germplasm"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid commonCropName",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"pm.test(\"Check data if empty\", function () {",
											"    pm.expect(jsonData.result.data).to.eql([]);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/germplasm?page=0&pageSize=10000&commonCropName=invalid",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"germplasm"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "10000"
										},
										{
											"key": "commonCropName",
											"value": "invalid"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v2/germplasm"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid accessionNumber",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"pm.test(\"Check data if empty\", function () {",
											"    pm.expect(jsonData.result.data).to.eql([]);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/germplasm?page=0&pageSize=10000&accessionNumber=invalid",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"germplasm"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "10000"
										},
										{
											"key": "accessionNumber",
											"value": "invalid"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v2/germplasm"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid genus",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"pm.test(\"Check data if empty\", function () {",
											"    pm.expect(jsonData.result.data).to.eql([]);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/germplasm?page=0&pageSize=10000&genus=invalid",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"germplasm"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "10000"
										},
										{
											"key": "genus",
											"value": "invalid"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v2/germplasm"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid studyDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"pm.test(\"Check data if empty\", function () {",
											"    pm.expect(jsonData.result.data).to.eql([]);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/germplasm?page=0&pageSize=10000&studyDbId=invalid",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"germplasm"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "10000"
										},
										{
											"key": "studyDbId",
											"value": "invalid"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v2/germplasm"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid synonym",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"pm.test(\"Check data if empty\", function () {",
											"    pm.expect(jsonData.result.data).to.eql([]);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/germplasm?page=0&pageSize=10000&synonym=invalid",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"germplasm"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "10000"
										},
										{
											"key": "synonym",
											"value": "invalid"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v2/germplasm"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid parentDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"pm.test(\"Check data if empty\", function () {",
											"    pm.expect(jsonData.result.data).to.eql([]);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/germplasm?page=0&pageSize=10000&parentDbId=999999",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"germplasm"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "10000"
										},
										{
											"key": "parentDbId",
											"value": "999999"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v2/germplasm"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid progenyDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"pm.test(\"Check data if empty\", function () {",
											"    pm.expect(jsonData.result.data).to.eql([]);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/germplasm?page=0&pageSize=10000&progenyDbId=invalid",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"germplasm"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "10000"
										},
										{
											"key": "progenyDbId",
											"value": "invalid"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v2/germplasm"
							},
							"response": []
						}
					]
				},
				{
					"name": "GET ​/{crop}​/brapi​/v1​/germplasm​/{germplasmDbId}​/pedigree",
					"item": [
						{
							"name": "Verify response code and body when entered GID that was created via crossing,includeSiblings true",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Verify returned metadata\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(0);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Check germplasmDbId \", function () {",
											"    pm.expect(jsonData.result.germplasmDbId).to.eql(\"PKWDGccd05c2c\");",
											"});",
											"pm.test(\"Check defaultDisplayName \", function () {",
											"    pm.expect(jsonData.result.defaultDisplayName).to.eql(\"IB1\");",
											"});",
											"pm.test(\"Check pedigree\", function () {",
											"    pm.expect(jsonData.result.pedigree).to.eql(\"CML1/CML6\");",
											"});",
											"pm.test(\"Check crossingPlan\", function () {",
											"    pm.expect(jsonData.result.crossingPlan).to.eql(\"C2W|Single cross|GEN\");",
											"});",
											"pm.test(\"Check crossingYear\", function () {",
											"    pm.expect(jsonData.result.crossingYear).to.eql(2018);",
											"});",
											"pm.test(\"Check familyCode\", function () {",
											"    pm.expect(jsonData.result.familyCode).to.equal(null);",
											"});",
											"pm.test(\"Check parent1DbId\", function () {",
											"    pm.expect(jsonData.result.parent1DbId).to.eql(\"PKWDG942cd372\");",
											"});",
											"pm.test(\"Check parent1Name\", function () {",
											"    pm.expect(jsonData.result.parent1Name).to.eql(\"CML1\");",
											"});",
											"pm.test(\"Check parent1Type\", function () {",
											"    pm.expect(jsonData.result.parent1Type).to.eql(\"FEMALE\");",
											"});",
											"pm.test(\"Check parent2DbId\", function () {",
											"    pm.expect(jsonData.result.parent2DbId).to.eql(\"PKWDG4b204948\");",
											"});",
											"pm.test(\"Check parent2Name\", function () {",
											"    pm.expect(jsonData.result.parent2Name).to.eql(\"CML6\");",
											"});",
											"pm.test(\"Check parent2Type\", function () {",
											"    pm.expect(jsonData.result.parent2Type).to.eql(\"MALE\");",
											"});",
											"pm.test(\"Check siblings germplasmDbId \", function () {",
											"   var siblingGUIDs = [\"PKWDG94574ef6\",\"PKWDG0bd87275\"];",
											"    for (var i = 0; i < jsonData.result.length; i++) { ",
											"    pm.expect(jsonData.result.siblings[i].germplasmDbId).to.eql(siblingGUIDs[i]);",
											"    }",
											"});",
											"",
											"pm.test(\"Check siblings defaultDisplayName \", function () {",
											"   var siblingNames = [\"CML3\",\"CML1\"];",
											"for (var i = 0; i < jsonData.result.length; i++) { ",
											"    pm.expect(jsonData.result.siblings[i].defaultDisplayName).to.eql(siblingNames[i]);",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/germplasm/{{cross_uuid}}/pedigree?includeSiblings=true",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"germplasm",
										"{{cross_uuid}}",
										"pedigree"
									],
									"query": [
										{
											"key": "includeSiblings",
											"value": "true"
										}
									]
								},
								"description": "GET /{crop}​/brapi​/v1​/germplasm​/{germplasmDbId}​/pedigree"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered GID that was created via crossing,includeSiblings false",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Verify returned metadata\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(0);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Check germplasmDbId \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.germplasmDbId).to.eql(\"PKWDGccd05c2c\");",
											"});",
											"pm.test(\"Check defaultDisplayName \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.defaultDisplayName).to.eql(\"IB1\");",
											"    pm.expect(jsonData.result.pedigree).to.eql(\"CML1/CML6\");",
											"    pm.expect(jsonData.result.crossingPlan).to.eql(\"C2W|Single cross|GEN\");",
											"    pm.expect(jsonData.result.crossingYear).to.eql(2018);",
											"    pm.expect(jsonData.result.familyCode).to.equal(null);",
											"    pm.expect(jsonData.result.parent1DbId).to.eql(\"PKWDG942cd372\");",
											"    pm.expect(jsonData.result.parent1Name).to.eql(\"CML1\");",
											"    pm.expect(jsonData.result.parent1Type).to.eql(\"FEMALE\");",
											"    pm.expect(jsonData.result.parent2DbId).to.eql(\"PKWDG4b204948\");",
											"    pm.expect(jsonData.result.parent2Name).to.eql(\"CML6\");",
											"    pm.expect(jsonData.result.parent2Type).to.eql(\"MALE\");",
											"    pm.expect(jsonData.result.siblings).to.eql(null);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/germplasm/{{cross_uuid}}/pedigree?includeSiblings=false",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"germplasm",
										"{{cross_uuid}}",
										"pedigree"
									],
									"query": [
										{
											"key": "includeSiblings",
											"value": "false"
										}
									]
								},
								"description": "GET /{crop}​/brapi​/v1​/germplasm​/{germplasmDbId}​/pedigree"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered GID that was created via advancing",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"    var jsonData = pm.response.json();",
											"pm.test(\"Verify returned metadata\", function () {",
											"    pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											"    pm.expect(jsonData.metadata.pagination.pageSize).to.eql(0);",
											"    pm.expect(jsonData.metadata.pagination.totalCount).to.eql(0);",
											"    pm.expect(jsonData.metadata.pagination.totalPages).to.eql(0);",
											"    pm.expect(jsonData.metadata.status).to.eql([]);",
											"    pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"pm.test(\"Check germplasmDbId \", function () {",
											"    pm.expect(jsonData.result.germplasmDbId).to.eql(\"PKWDG0bd87275\");",
											"});",
											"pm.test(\"Check defaultDisplayName \", function () {",
											"    pm.expect(jsonData.result.defaultDisplayName).to.eql(\"CML1\");",
											"});",
											"",
											"pm.test(\"Check pedigree \", function () {",
											"    pm.expect(jsonData.result.pedigree).to.eql(\"CML1\");",
											"});",
											"pm.test(\"Check pedigree \", function () {",
											"    pm.expect(jsonData.result.pedigree).to.eql(\"CML1\");",
											"});",
											"pm.test(\"Check crossingPlan \", function () {",
											"    pm.expect(jsonData.result.crossingPlan).to.eql(\"AGB1|Accession into genebank|MAN\");",
											"});",
											"pm.test(\"Check crossingYear \", function () {",
											"    pm.expect(jsonData.result.crossingYear).to.eql(2020);",
											"});",
											"",
											"pm.test(\"Check familyCode \", function () {",
											"    pm.expect(jsonData.result.familyCode).to.equal(null);",
											"});",
											"",
											"pm.test(\"Check familyCode \", function () {",
											"    pm.expect(jsonData.result.parent1DbId).to.eql(\"PKWDG942cd372\");",
											"});",
											"pm.test(\"Check parent1Name \", function () {",
											"    pm.expect(jsonData.result.parent1Name).to.eql(\"CML1\");",
											"});",
											"pm.test(\"Check parent1Type \", function () {",
											"    pm.expect(jsonData.result.parent1Type).to.eql(\"POPULATION\");",
											"});",
											"pm.test(\"Check parent2DbId \", function () {",
											"    pm.expect(jsonData.result.parent2DbId).to.eql(\"PKWDG942cd372\");",
											"});",
											"pm.test(\"Check parent2Name \", function () {",
											"    pm.expect(jsonData.result.parent2Name).to.eql(\"CML1\");",
											"});",
											"pm.test(\"Check parent2Type \", function () {",
											"    pm.expect(jsonData.result.parent2Type).to.eql(\"SELF\");",
											"});",
											"",
											"pm.test(\"Check siblings germplasmDbId \", function () {",
											"   var siblingGUIDs = [\"PKWDG94574ef6\",\"PKWDGjYLYJXtu\"];",
											"    for (var i = 0; i < jsonData.result.length; i++) { ",
											"    pm.expect(jsonData.result.siblings[i].germplasmDbId).to.eql(siblingGUIDs[i]);",
											"    }",
											"});",
											"",
											"pm.test(\"Check siblings defaultDisplayName \", function () {",
											"   var siblingNames = [\"CML3\",\"CML1\"];",
											"for (var i = 0; i < jsonData.result.length; i++) { ",
											"    pm.expect(jsonData.result.siblings[i].defaultDisplayName).to.eql(siblingNames[i]);",
											"    }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/germplasm/{{advanced_uuid}}/pedigree?includeSiblings=true",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"germplasm",
										"{{advanced_uuid}}",
										"pedigree"
									],
									"query": [
										{
											"key": "includeSiblings",
											"value": "true"
										}
									]
								},
								"description": "GET /{crop}​/brapi​/v1​/germplasm​/{germplasmDbId}​/pedigree"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered GID that was via import (no parent)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Verify returned metadata\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(0);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Check germplasmDbId \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.germplasmDbId).to.eql(\"PKWDG942cd372\");",
											"});",
											"pm.test(\"Check defaultDisplayName \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.defaultDisplayName).to.eql(\"CML1\");",
											"    pm.expect(jsonData.result.pedigree).to.eql(\"CML1\");",
											"    pm.expect(jsonData.result.crossingPlan).to.eql(\"AGB1|Accession into genebank|MAN\");",
											"    pm.expect(jsonData.result.crossingYear).to.eql(2018);",
											"    pm.expect(jsonData.result.familyCode).to.equal(null);",
											"    pm.expect(jsonData.result.parent1DbId).to.eql(null);",
											"    pm.expect(jsonData.result.parent1Name).to.eql(null);",
											"    pm.expect(jsonData.result.parent1Type).to.eql(null);",
											"    pm.expect(jsonData.result.parent2DbId).to.eql(null);",
											"    pm.expect(jsonData.result.parent2Name).to.eql(null);",
											"    pm.expect(jsonData.result.parent2Type).to.eql(null);",
											"    pm.expect(jsonData.result.siblings).to.eql(null);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/germplasm/{{germplasm_uuid}}/pedigree?includeSiblings=false",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"germplasm",
										"{{germplasm_uuid}}",
										"pedigree"
									],
									"query": [
										{
											"key": "includeSiblings",
											"value": "false"
										}
									]
								},
								"description": "GET /{crop}​/brapi​/v1​/germplasm​/{germplasmDbId}​/pedigree"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered non-existing germplasmDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"pm.test(\"Response message is no germplasm found \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Invalid germplasm identifier\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/germplasm/{{nonExistingGID}}/pedigree",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"germplasm",
										"{{nonExistingGID}}",
										"pedigree"
									]
								},
								"description": "GET /{crop}​/brapi​/v1​/germplasm​/{germplasmDbId}​/pedigree"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid cropname",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Response message is no germplasm found \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Invalid crop invalidcrop for URL:/invalidcrop/brapi/v1/germplasm/PKWDG942cd372/pedigree\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/invalidcrop/brapi/v1/germplasm/{{germplasm_uuid}}/pedigree",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"invalidcrop",
										"brapi",
										"v1",
										"germplasm",
										"{{germplasm_uuid}}",
										"pedigree"
									]
								},
								"description": "GET /{crop}​/brapi​/v1​/germplasm​/{germplasmDbId}​/pedigree"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered valid studyDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"  var jsonData = pm.response.json();",
											"pm.test(\"Verify returned metadata\", function () {",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(20);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"var data = jsonData.result.data[0];",
											"pm.test(\"Check germplasmDbId \", function () {",
											"    pm.expect(data.germplasmDbId).to.eql(\"PKWDG942cd372\");",
											"});",
											"pm.test(\"Check defaultDisplayName \", function () {",
											"    pm.expect(data.defaultDisplayName).to.eql(\"CML1\");",
											"});",
											"pm.test(\"Check germplasmName \", function () {",
											"    pm.expect(data.germplasmName).to.eql(\"CML1\");",
											"});",
											"/**",
											"pm.test(\"Check germplasmPUI \", function () {",
											"    pm.expect(data.germplasmPUI).to.eql(\"PKWDG942cd372\");",
											"});",
											" */",
											"pm.test(\"Check pedigree \", function () {",
											"    pm.expect(data.pedigree).to.eql(\"CML1\");",
											"});",
											"pm.test(\"Check synonyms\", function () {",
											" var names = [\"ACCNO1\", \"DVNM1\", \"GENUS1\", \"DVNM1\",\"PUIname1\"];",
											"   for (var i = 0; i < data.synonyms.length; i++) {",
											"    pm.expect(data.synonyms[i]).to.eql(names[i]);",
											"    }",
											"});    ",
											"",
											"pm.test(\"Check commonCropName \", function () {",
											"    pm.expect(data.commonCropName).to.eql(\"commoncropnm\");",
											"});",
											"pm.test(\"Check instituteCode \", function () {",
											"    pm.expect(data.instituteCode).to.eql(\"instituteCode001\");",
											"});",
											"pm.test(\"Check instituteName \", function () {",
											"    pm.expect(data.instituteName).to.eql(\"instituteName001\");",
											"});",
											"pm.test(\"Check countryOfOriginCode \", function () {",
											"    pm.expect(data.countryOfOriginCode).to.eql(\"WARDA\");",
											"});",
											"pm.test(\"Check typeOfGermplasmStorageCode \", function () {",
											"    pm.expect(data.typeOfGermplasmStorageCode).to.eql([]);",
											"});",
											"pm.test(\"Check genus \", function () {",
											"    pm.expect(data.genus).to.eql(\"GENUS1\");",
											"});",
											"pm.test(\"Check species \", function () {",
											"    pm.expect(data.species).to.eql(\"SPNAM1\");",
											"});",
											"pm.test(\"Check taxonIds \", function () {",
											"    pm.expect(data.taxonIds).to.eql([]);",
											"});",
											"pm.test(\"Check speciesAuthority \", function () {",
											"    pm.expect(data.speciesAuthority).to.eql(\"SPAUTH1\");",
											"});",
											"pm.test(\"Check subtaxa \", function () {",
											"    pm.expect(data.subtaxa).to.eql(\"SUBTAX1\");",
											"});",
											"pm.test(\"Check subtaxaAuthority \", function () {",
											"    pm.expect(data.subtaxaAuthority).to.eql(\"STAUTH1\");",
											"});",
											"pm.test(\"Check donors \", function () {",
											"    pm.expect(data.donors).to.eql([]);",
											"});",
											"pm.test(\"Check acquisitionDate \", function () {",
											"    pm.expect(data.acquisitionDate).to.eql(\"2018-10-25\");",
											"});",
											"pm.test(\"Check breedingMethodDbId \", function () {",
											"    pm.expect(data.breedingMethodDbId).to.eql(\"70\");",
											"});",
											"pm.test(\"Check germplasmGenus \", function () {",
											"    pm.expect(data.germplasmGenus).to.eql(\"GENUS1\");",
											"});",
											"",
											"pm.test(\"Check germplasmSpecies \", function () {",
											"    pm.expect(data.germplasmSpecies).to.eql(\"SPNAM1\");",
											"});",
											"pm.test(\"Check entryNumber \", function () {",
											"    pm.expect(data.entryNumber).to.eql(\"1\");",
											"});",
											"",
											"pm.test(\"Verify returned studyDbId\", function () {",
											"    pm.expect(jsonData.result.studyDbId).to.eql(pm.environment.get(\"studyDbId\"));",
											"});",
											"pm.test(\"Verify returned trialName\", function () {",
											"    pm.expect(jsonData.result.trialName).to.eql(\"Randomized Trial 20180003\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/studies/{{studyDbId}}/germplasm",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"studies",
										"{{studyDbId}}",
										"germplasm"
									]
								},
								"description": "GET /{crop}/brapi/v1/studies/{studyDbId}"
							},
							"response": []
						}
					]
				},
				{
					"name": "GET ​/{crop}​/brapi​/v1​/germplasm​/{germplasmDbId}​/progeny",
					"item": [
						{
							"name": "Verify response code and body when entered valid germplasmDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(0);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"pm.test(\"Check germplasmDbId \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.germplasmDbId).to.eql(\"PKWDG942cd372\");",
											"});",
											"pm.test(\"Check defaultDisplayName \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.defaultDisplayName).to.eql(\"CML1\");",
											"});",
											"pm.test(\"Check progeny details \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.progeny[0].germplasmDbId).to.eql(\"PKWDGccd05c2c\");",
											"    pm.expect(jsonData.result.progeny[0].defaultDisplayName).to.eql(\"IB1\");",
											"   pm.expect(jsonData.result.progeny[0].parentType).to.eql(\"FEMALE\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/germplasm/{{germplasm_uuid}}/progeny",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"germplasm",
										"{{germplasm_uuid}}",
										"progeny"
									]
								},
								"description": "GET ​/{crop}​/brapi​/v1​/germplasm​/{germplasmDbId}​/progeny"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered non-existing germplasmDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Response message is no germplasm found \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Invalid germplasm identifier\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/germplasm/{{nonExistingGID}}/progeny",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"germplasm",
										"{{nonExistingGID}}",
										"progeny"
									]
								},
								"description": "GET ​/{crop}​/brapi​/v1​/germplasm​/{germplasmDbId}​/progeny"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid cropname",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Response message is no germplasm found \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Invalid crop invalidcrop for URL:/invalidcrop/brapi/v1/germplasm/PKWDG942cd372/progeny\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/invalidcrop/brapi/v1/germplasm/{{germplasm_uuid}}/progeny",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"invalidcrop",
										"brapi",
										"v1",
										"germplasm",
										"{{germplasm_uuid}}",
										"progeny"
									]
								},
								"description": "GET ​/{crop}​/brapi​/v1​/germplasm​/{germplasmDbId}​/progeny"
							},
							"response": []
						}
					]
				},
				{
					"name": "POST /{crop}/brapi/v1/search/germplasm",
					"item": [
						{
							"name": "Verify response code and body when searched by accessionNumbers",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"    var jsonData = pm.response.json();",
											"    pm.environment.unset(\"searchResultDbId_accessionNumbers\");",
											"    pm.environment.set(\"searchResultDbId_accessionNumbers\", jsonData.result.searchResultDbId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"accessionNumbers\": [\r\n    \"ACCNO1\"\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/search/germplasm",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"search",
										"germplasm"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when searched by commonCropNames",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"    var jsonData = pm.response.json();",
											"    pm.environment.unset(\"ssearchResultDbId_commonCropNames\");",
											"    pm.environment.set(\"searchResultDbId_commonCropNames\", jsonData.result.searchResultDbId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"commonCropNames\": [\r\n    \"commoncropnm\"\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/search/germplasm",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"search",
										"germplasm"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when searched by germplasmDbIds",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"    var jsonData = pm.response.json();",
											"    pm.environment.unset(\"searchResultDbId_germplasmDbIds\");",
											"    pm.environment.set(\"searchResultDbId_germplasmDbIds\", jsonData.result.searchResultDbId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"germplasmDbIds\": [\r\n    \"{{germplasm_uuid}}\"\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/search/germplasm",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"search",
										"germplasm"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when searched by germplasmGenus",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"    var jsonData = pm.response.json();",
											"    pm.environment.unset(\"searchResultDbId_germplasmGenus\");",
											"    pm.environment.set(\"searchResultDbId_germplasmGenus\", jsonData.result.searchResultDbId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"germplasmGenus\": [\r\n    \"GENUS1\"\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/search/germplasm",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"search",
										"germplasm"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when searched by germplasmNames",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"    var jsonData = pm.response.json();",
											"    pm.environment.unset(\"searchResultDbId_germplasmNames\");",
											"    pm.environment.set(\"searchResultDbId_germplasmNames\", jsonData.result.searchResultDbId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"germplasmName\": [\r\n    \"CML1\"\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/search/germplasm",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"search",
										"germplasm"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when searched by germplasmPUI",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"    var jsonData = pm.response.json();",
											"    pm.environment.unset(\"searchResultDbId_germplasmPUI\");",
											"    pm.environment.set(\"searchResultDbId_germplasmPUI\", jsonData.result.searchResultDbId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"germplasmPUIs\": [\r\n      \"PUIname1\"\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/search/germplasm",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"search",
										"germplasm"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when searched by germplasmSpecies",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"    var jsonData = pm.response.json();",
											"    pm.environment.unset(\"searchResultDbId_germplasmSpecies\");",
											"    pm.environment.set(\"searchResultDbId_germplasmSpecies\", jsonData.result.searchResultDbId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"germplasmSpecies\": [\r\n    \"SPNAM1\"\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/search/germplasm",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"search",
										"germplasm"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						}
					]
				},
				{
					"name": "POST /{crop}/brapi/v2/search/germplasm",
					"item": [
						{
							"name": "Verify response code and body when searched by accessionNumbers",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"    var jsonData = pm.response.json();",
											"    pm.environment.unset(\"searchResultDbId_v2_accessionNumbers\");",
											"    pm.environment.set(\"searchResultDbId_v2_accessionNumbers\", jsonData.result.searchResultsDbId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"accessionNumbers\": [\r\n    \"ACCNO1\"\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/search/germplasm",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"search",
										"germplasm"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when searched by commonCropNames",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"    var jsonData = pm.response.json();",
											"    pm.environment.unset(\"ssearchResultDbId_v2_commonCropNames\");",
											"    pm.environment.set(\"searchResultDbId_v2_commonCropNames\", jsonData.result.searchResultsDbId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"commonCropNames\": [\r\n    \"commoncropnm\"\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/search/germplasm",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"search",
										"germplasm"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when searched by germplasmDbIds",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"    var jsonData = pm.response.json();",
											"    pm.environment.unset(\"searchResultDbId_v2_germplasmDbIds\");",
											"    pm.environment.set(\"searchResultDbId_v2_germplasmDbIds\", jsonData.result.searchResultsDbId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"germplasmDbIds\": [\r\n    \"{{germplasm_uuid}}\"\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/search/germplasm",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"search",
										"germplasm"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when searched by externalReferenceID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"    var jsonData = pm.response.json();",
											"    pm.environment.unset(\"searchResultDbId_v2_externalReferenceID\");",
											"    pm.environment.set(\"searchResultDbId_v2_externalReferenceID\", jsonData.result.searchResultsDbId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"externalReferenceIDs\": [\r\n    \"germplasm_refID\"\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/search/germplasm",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"search",
										"germplasm"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when searched by externalReferenceSources",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"    var jsonData = pm.response.json();",
											"    pm.environment.unset(\"searchResultDbId_v2_externalReferenceSource\");",
											"    pm.environment.set(\"searchResultDbId_v2_externalReferenceSource\", jsonData.result.searchResultsDbId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"externalReferenceSources\": [\r\n    \"germplasm_refSource\"\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/search/germplasm",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"search",
										"germplasm"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when searched by genus",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"    var jsonData = pm.response.json();",
											"    pm.environment.unset(\"searchResultDbId_v2_genus\");",
											"    pm.environment.set(\"searchResultDbId_v2_genus\", jsonData.result.searchResultsDbId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"genus\": [\r\n    \"GENUS1\"\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/search/germplasm",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"search",
										"germplasm"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when searched by germplasmName",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"    var jsonData = pm.response.json();",
											"    pm.environment.unset(\"searchResultDbId_v2_germplasmNames\");",
											"    pm.environment.set(\"searchResultDbId_v2_germplasmNames\", jsonData.result.searchResultsDbId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"germplasmNames\": [\r\n    \"CML1\"\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/search/germplasm",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"search",
										"germplasm"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when searched by germplasmPUI",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"    var jsonData = pm.response.json();",
											"    pm.environment.unset(\"searchResultDbId_v2_germplasmPUI\");",
											"    pm.environment.set(\"searchResultDbId_v2_germplasmPUI\", jsonData.result.searchResultsDbId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"germplasmPUIs\": [\r\n    \"PUIname1\"\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/search/germplasm",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"search",
										"germplasm"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when searched by parentDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"    var jsonData = pm.response.json();",
											"    pm.environment.unset(\"searchResultDbId_v2_parentDbId\");",
											"    pm.environment.set(\"searchResultDbId_v2_parentDbId\", jsonData.result.searchResultsDbId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"parentDbIds\": [\r\n    \"{{germplasm_uuid}}\"\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/search/germplasm",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"search",
										"germplasm"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when searched by progenyDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"    var jsonData = pm.response.json();",
											"    pm.environment.unset(\"searchResultDbId_v2_progenyDbId\");",
											"    pm.environment.set(\"searchResultDbId_v2_progenyDbId\", jsonData.result.searchResultsDbId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"progenyDbIds\": [\r\n    \"{{cross_uuid}}\"\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/search/germplasm",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"search",
										"germplasm"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when searched by species",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"    var jsonData = pm.response.json();",
											"    pm.environment.unset(\"searchResultDbId_v2_species\");",
											"    pm.environment.set(\"searchResultDbId_v2_species\", jsonData.result.searchResultsDbId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"species\": [\r\n    \"SPNAM1\"\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/search/germplasm",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"search",
										"germplasm"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when searched by studyDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"    var jsonData = pm.response.json();",
											"    pm.environment.unset(\"searchResultDbId_v2_studyDbId\");",
											"    pm.environment.set(\"searchResultDbId_v2_studyDbId\", jsonData.result.searchResultsDbId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"studyDbIds\": [\r\n    \"{{studyDbId}}\"\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/search/germplasm",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"search",
										"germplasm"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when searched by synonym PUI name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"    var jsonData = pm.response.json();",
											"    pm.environment.unset(\"searchResultDbId_v2_synonyms\");",
											"    pm.environment.set(\"searchResultDbId_v2_synonyms\", jsonData.result.searchResultsDbId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"synonyms\": [\r\n    \"CML1\"\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/search/germplasm",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"search",
										"germplasm"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when searched by germplasmDbId with germplasmOrigin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"    var jsonData = pm.response.json();",
											"    pm.environment.unset(\"searchResultDbId_v2_germplasmDbId_w_origin\");",
											"    pm.environment.set(\"searchResultDbId_v2_germplasmDbId_w_origin\", jsonData.result.searchResultsDbId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"germplasmDbIds\": [\r\n    \"PKWDGdZIjsBS9\"\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/search/germplasm",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"search",
										"germplasm"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						}
					]
				},
				{
					"name": "GET /{crop}/brapi/v1/search/germplasm/{searchResultsDbid}",
					"item": [
						{
							"name": "Verify results when entered searchResultsDbid that filters by accessionNumbers",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"var jsonData = pm.response.json();\r",
											"var data = jsonData.result.data[0];\r",
											"pm.test(\"Verify returned metadata\", function () {\r",
											"    pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);\r",
											"    pm.expect(jsonData.metadata.pagination.pageSize).to.eql(100);\r",
											"    pm.expect(jsonData.metadata.pagination.totalCount).to.eql(1);\r",
											"    pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);\r",
											"    pm.expect(jsonData.metadata.status).to.eql([]);\r",
											"    pm.expect(jsonData.metadata.datafiles).to.eql([]);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Check germplasmDbId \", function () {\r",
											"    pm.expect(data.germplasmDbId).to.eql(\"PKWDG942cd372\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check defaultDisplayName \", function () {\r",
											"    pm.expect(data.defaultDisplayName).to.eql(\"CML1\");\r",
											"});\r",
											"pm.test(\"Check accessionNumber \", function () {\r",
											"    pm.expect(data.accessionNumber).to.eql(\"ACCNO1\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check germplasmName \", function () {\r",
											"    pm.expect(data.germplasmName).to.eql(\"CML1\");\r",
											"});\r",
											"pm.test(\"Check germplasmPUI \", function () {\r",
											"    pm.expect(data.germplasmPUI).to.eql(\"PUIname1\");\r",
											"});\r",
											"pm.test(\"Check pedigree\", function () {\r",
											"    pm.expect(data.pedigree).to.eql(\"CML1\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check germplasmSeedSource\", function () {\r",
											"    pm.expect(data.germplasmSeedSource).to.eql(\"seedSource\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check synonyms\", function () {\r",
											" var names = [\"ACCNO1\", \"DVNM1\", \"GENUS1\", \"DVNM1\",\"PUIname1\"];\r",
											"   for (var i = 0; i < data.synonyms.length; i++) {\r",
											"    pm.expect(data.synonyms[i]).to.eql(names[i]);\r",
											"    }\r",
											"});\r",
											"\r",
											"pm.test(\"Check commonCropName\", function () {\r",
											"    pm.expect(data.commonCropName).to.eql(\"commoncropnm\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check instituteCode\", function () {\r",
											"    pm.expect(data.instituteCode).to.eql(\"instituteCode001\");\r",
											"});\r",
											"pm.test(\"Check instituteName\", function () {\r",
											"    pm.expect(data.instituteName).to.eql(\"instituteName001\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check countryOfOriginCode\", function () {\r",
											"    pm.expect(data.countryOfOriginCode).to.eql(\"WARDA\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check typeOfGermplasmStorageCode\", function () {\r",
											"    pm.expect(data.typeOfGermplasmStorageCode).to.eql([]);\r",
											"});\r",
											"pm.test(\"Check genus\", function () {\r",
											"    pm.expect(data.genus).to.eql(\"GENUS1\");\r",
											"});\r",
											"pm.test(\"Check species\", function () {\r",
											"    pm.expect(data.species).to.eql(\"SPNAM1\");\r",
											"});\r",
											"pm.test(\"Check taxonIds\", function () {\r",
											"    pm.expect(data.taxonIds).to.eql([]);\r",
											"});\r",
											"pm.test(\"Check speciesAuthority\", function () {\r",
											"    pm.expect(data.speciesAuthority).to.eql(\"SPAUTH1\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check subtaxa\", function () {\r",
											"    pm.expect(data.subtaxa).to.eql(\"SUBTAX1\");\r",
											"});\r",
											"pm.test(\"Check subtaxaAuthority\", function () {\r",
											"    pm.expect(data.subtaxaAuthority).to.eql(\"STAUTH1\");\r",
											"});\r",
											"pm.test(\"Check donors\", function () {\r",
											"    pm.expect(data.donors).to.eql([]);\r",
											"});\r",
											"pm.test(\"Check acquisitionDate\", function () {\r",
											"    pm.expect(data.acquisitionDate).to.eql(\"2018-10-25\");\r",
											"});\r",
											"pm.test(\"Check breedingMethodDbId\", function () {\r",
											"    pm.expect(data.breedingMethodDbId).to.eql(\"70\");\r",
											"});\r",
											"pm.test(\"Check germplasmGenus\", function () {\r",
											"    pm.expect(data.germplasmGenus).to.eql(\"GENUS1\");\r",
											"});\r",
											"pm.test(\"Check germplasmSpecies\", function () {\r",
											"    pm.expect(data.germplasmSpecies).to.eql(\"SPNAM1\");\r",
											"});\r",
											"pm.test(\"Check seedSource\", function () {\r",
											"    pm.expect(data.seedSource).to.eql(\"seedSource\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/search/germplasm/{{searchResultDbId_accessionNumbers}}?page=0&pageSize=100",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"search",
										"germplasm",
										"{{searchResultDbId_accessionNumbers}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "100"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/search/germplasm/{searchResultsDbid}"
							},
							"response": []
						},
						{
							"name": "Verify results when entered searchResultsDbid that filters by commonCropNames",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"var jsonData = pm.response.json();\r",
											"var data = jsonData.result.data[0];\r",
											"pm.test(\"Verify returned metadata\", function () {\r",
											"    pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);\r",
											"    pm.expect(jsonData.metadata.pagination.pageSize).to.eql(100);\r",
											"    pm.expect(jsonData.metadata.pagination.totalCount).to.eql(1);\r",
											"    pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);\r",
											"    pm.expect(jsonData.metadata.status).to.eql([]);\r",
											"    pm.expect(jsonData.metadata.datafiles).to.eql([]);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Check germplasmDbId \", function () {\r",
											"    pm.expect(data.germplasmDbId).to.eql(\"PKWDG942cd372\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check defaultDisplayName \", function () {\r",
											"    pm.expect(data.defaultDisplayName).to.eql(\"CML1\");\r",
											"});\r",
											"pm.test(\"Check accessionNumber \", function () {\r",
											"    pm.expect(data.accessionNumber).to.eql(\"ACCNO1\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check germplasmName \", function () {\r",
											"    pm.expect(data.germplasmName).to.eql(\"CML1\");\r",
											"});\r",
											"pm.test(\"Check germplasmPUI \", function () {\r",
											"    pm.expect(data.germplasmPUI).to.eql(\"PUIname1\");\r",
											"});\r",
											"pm.test(\"Check pedigree\", function () {\r",
											"    pm.expect(data.pedigree).to.eql(\"CML1\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check germplasmSeedSource\", function () {\r",
											"    pm.expect(data.germplasmSeedSource).to.eql(\"seedSource\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check synonyms\", function () {\r",
											" var names = [\"ACCNO1\", \"DVNM1\", \"GENUS1\", \"DVNM1\",\"PUIname1\"];\r",
											"   for (var i = 0; i < data.synonyms.length; i++) {\r",
											"    pm.expect(data.synonyms[i]).to.eql(names[i]);\r",
											"    }\r",
											"});\r",
											"\r",
											"pm.test(\"Check commonCropName\", function () {\r",
											"    pm.expect(data.commonCropName).to.eql(\"commoncropnm\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check instituteCode\", function () {\r",
											"    pm.expect(data.instituteCode).to.eql(\"instituteCode001\");\r",
											"});\r",
											"pm.test(\"Check instituteName\", function () {\r",
											"    pm.expect(data.instituteName).to.eql(\"instituteName001\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check countryOfOriginCode\", function () {\r",
											"    pm.expect(data.countryOfOriginCode).to.eql(\"WARDA\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check typeOfGermplasmStorageCode\", function () {\r",
											"    pm.expect(data.typeOfGermplasmStorageCode).to.eql([]);\r",
											"});\r",
											"pm.test(\"Check genus\", function () {\r",
											"    pm.expect(data.genus).to.eql(\"GENUS1\");\r",
											"});\r",
											"pm.test(\"Check species\", function () {\r",
											"    pm.expect(data.species).to.eql(\"SPNAM1\");\r",
											"});\r",
											"pm.test(\"Check taxonIds\", function () {\r",
											"    pm.expect(data.taxonIds).to.eql([]);\r",
											"});\r",
											"pm.test(\"Check speciesAuthority\", function () {\r",
											"    pm.expect(data.speciesAuthority).to.eql(\"SPAUTH1\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check subtaxa\", function () {\r",
											"    pm.expect(data.subtaxa).to.eql(\"SUBTAX1\");\r",
											"});\r",
											"pm.test(\"Check subtaxaAuthority\", function () {\r",
											"    pm.expect(data.subtaxaAuthority).to.eql(\"STAUTH1\");\r",
											"});\r",
											"pm.test(\"Check donors\", function () {\r",
											"    pm.expect(data.donors).to.eql([]);\r",
											"});\r",
											"pm.test(\"Check acquisitionDate\", function () {\r",
											"    pm.expect(data.acquisitionDate).to.eql(\"2018-10-25\");\r",
											"});\r",
											"pm.test(\"Check breedingMethodDbId\", function () {\r",
											"    pm.expect(data.breedingMethodDbId).to.eql(\"70\");\r",
											"});\r",
											"pm.test(\"Check germplasmGenus\", function () {\r",
											"    pm.expect(data.germplasmGenus).to.eql(\"GENUS1\");\r",
											"});\r",
											"pm.test(\"Check germplasmSpecies\", function () {\r",
											"    pm.expect(data.germplasmSpecies).to.eql(\"SPNAM1\");\r",
											"});\r",
											"pm.test(\"Check seedSource\", function () {\r",
											"    pm.expect(data.seedSource).to.eql(\"seedSource\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/search/germplasm/{{searchResultDbId_commonCropNames}}?page=0&pageSize=100",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"search",
										"germplasm",
										"{{searchResultDbId_commonCropNames}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "100"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/search/germplasm/{searchResultsDbid}"
							},
							"response": []
						},
						{
							"name": "Verify results when entered searchResultsDbid that filters by germplasmDbIds",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"var jsonData = pm.response.json();\r",
											"var data = jsonData.result.data[0];\r",
											"pm.test(\"Verify returned metadata\", function () {\r",
											"    pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);\r",
											"    pm.expect(jsonData.metadata.pagination.pageSize).to.eql(100);\r",
											"    pm.expect(jsonData.metadata.pagination.totalCount).to.eql(1);\r",
											"    pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);\r",
											"    pm.expect(jsonData.metadata.status).to.eql([]);\r",
											"    pm.expect(jsonData.metadata.datafiles).to.eql([]);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Check germplasmDbId \", function () {\r",
											"    pm.expect(data.germplasmDbId).to.eql(\"PKWDG942cd372\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check defaultDisplayName \", function () {\r",
											"    pm.expect(data.defaultDisplayName).to.eql(\"CML1\");\r",
											"});\r",
											"pm.test(\"Check accessionNumber \", function () {\r",
											"    pm.expect(data.accessionNumber).to.eql(\"ACCNO1\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check germplasmName \", function () {\r",
											"    pm.expect(data.germplasmName).to.eql(\"CML1\");\r",
											"});\r",
											"pm.test(\"Check germplasmPUI \", function () {\r",
											"    pm.expect(data.germplasmPUI).to.eql(\"PUIname1\");\r",
											"});\r",
											"pm.test(\"Check pedigree\", function () {\r",
											"    pm.expect(data.pedigree).to.eql(\"CML1\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check germplasmSeedSource\", function () {\r",
											"    pm.expect(data.germplasmSeedSource).to.eql(\"seedSource\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check synonyms\", function () {\r",
											" var names = [\"ACCNO1\", \"DVNM1\", \"GENUS1\", \"DVNM1\",\"PUIname1\"];\r",
											"   for (var i = 0; i < data.synonyms.length; i++) {\r",
											"    pm.expect(data.synonyms[i]).to.eql(names[i]);\r",
											"    }\r",
											"});\r",
											"\r",
											"pm.test(\"Check commonCropName\", function () {\r",
											"    pm.expect(data.commonCropName).to.eql(\"commoncropnm\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check instituteCode\", function () {\r",
											"    pm.expect(data.instituteCode).to.eql(\"instituteCode001\");\r",
											"});\r",
											"pm.test(\"Check instituteName\", function () {\r",
											"    pm.expect(data.instituteName).to.eql(\"instituteName001\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check countryOfOriginCode\", function () {\r",
											"    pm.expect(data.countryOfOriginCode).to.eql(\"WARDA\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check typeOfGermplasmStorageCode\", function () {\r",
											"    pm.expect(data.typeOfGermplasmStorageCode).to.eql([]);\r",
											"});\r",
											"pm.test(\"Check genus\", function () {\r",
											"    pm.expect(data.genus).to.eql(\"GENUS1\");\r",
											"});\r",
											"pm.test(\"Check species\", function () {\r",
											"    pm.expect(data.species).to.eql(\"SPNAM1\");\r",
											"});\r",
											"pm.test(\"Check taxonIds\", function () {\r",
											"    pm.expect(data.taxonIds).to.eql([]);\r",
											"});\r",
											"pm.test(\"Check speciesAuthority\", function () {\r",
											"    pm.expect(data.speciesAuthority).to.eql(\"SPAUTH1\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check subtaxa\", function () {\r",
											"    pm.expect(data.subtaxa).to.eql(\"SUBTAX1\");\r",
											"});\r",
											"pm.test(\"Check subtaxaAuthority\", function () {\r",
											"    pm.expect(data.subtaxaAuthority).to.eql(\"STAUTH1\");\r",
											"});\r",
											"pm.test(\"Check donors\", function () {\r",
											"    pm.expect(data.donors).to.eql([]);\r",
											"});\r",
											"pm.test(\"Check acquisitionDate\", function () {\r",
											"    pm.expect(data.acquisitionDate).to.eql(\"2018-10-25\");\r",
											"});\r",
											"pm.test(\"Check breedingMethodDbId\", function () {\r",
											"    pm.expect(data.breedingMethodDbId).to.eql(\"70\");\r",
											"});\r",
											"pm.test(\"Check germplasmGenus\", function () {\r",
											"    pm.expect(data.germplasmGenus).to.eql(\"GENUS1\");\r",
											"});\r",
											"pm.test(\"Check germplasmSpecies\", function () {\r",
											"    pm.expect(data.germplasmSpecies).to.eql(\"SPNAM1\");\r",
											"});\r",
											"pm.test(\"Check seedSource\", function () {\r",
											"    pm.expect(data.seedSource).to.eql(\"seedSource\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/search/germplasm/{{searchResultDbId_germplasmDbIds}}?page=0&pageSize=100",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"search",
										"germplasm",
										"{{searchResultDbId_germplasmDbIds}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "100"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/search/germplasm/{searchResultsDbid}"
							},
							"response": []
						},
						{
							"name": "Verify results when entered searchResultsDbid that filters by germplasmGenus",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"var jsonData = pm.response.json();\r",
											"var data = jsonData.result.data[0];\r",
											"pm.test(\"Verify returned metadata\", function () {\r",
											"    pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);\r",
											"    pm.expect(jsonData.metadata.pagination.pageSize).to.eql(100);\r",
											"    pm.expect(jsonData.metadata.pagination.totalCount).to.eql(1);\r",
											"    pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);\r",
											"    pm.expect(jsonData.metadata.status).to.eql([]);\r",
											"    pm.expect(jsonData.metadata.datafiles).to.eql([]);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Check germplasmDbId \", function () {\r",
											"    pm.expect(data.germplasmDbId).to.eql(\"PKWDG942cd372\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check defaultDisplayName \", function () {\r",
											"    pm.expect(data.defaultDisplayName).to.eql(\"CML1\");\r",
											"});\r",
											"pm.test(\"Check accessionNumber \", function () {\r",
											"    pm.expect(data.accessionNumber).to.eql(\"ACCNO1\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check germplasmName \", function () {\r",
											"    pm.expect(data.germplasmName).to.eql(\"CML1\");\r",
											"});\r",
											"pm.test(\"Check germplasmPUI \", function () {\r",
											"    pm.expect(data.germplasmPUI).to.eql(\"PUIname1\");\r",
											"});\r",
											"pm.test(\"Check pedigree\", function () {\r",
											"    pm.expect(data.pedigree).to.eql(\"CML1\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check germplasmSeedSource\", function () {\r",
											"    pm.expect(data.germplasmSeedSource).to.eql(\"seedSource\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check synonyms\", function () {\r",
											" var names = [\"ACCNO1\", \"DVNM1\", \"GENUS1\", \"DVNM1\",\"PUIname1\"];\r",
											"   for (var i = 0; i < data.synonyms.length; i++) {\r",
											"    pm.expect(data.synonyms[i]).to.eql(names[i]);\r",
											"    }\r",
											"});\r",
											"\r",
											"pm.test(\"Check commonCropName\", function () {\r",
											"    pm.expect(data.commonCropName).to.eql(\"commoncropnm\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check instituteCode\", function () {\r",
											"    pm.expect(data.instituteCode).to.eql(\"instituteCode001\");\r",
											"});\r",
											"pm.test(\"Check instituteName\", function () {\r",
											"    pm.expect(data.instituteName).to.eql(\"instituteName001\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check countryOfOriginCode\", function () {\r",
											"    pm.expect(data.countryOfOriginCode).to.eql(\"WARDA\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check typeOfGermplasmStorageCode\", function () {\r",
											"    pm.expect(data.typeOfGermplasmStorageCode).to.eql([]);\r",
											"});\r",
											"pm.test(\"Check genus\", function () {\r",
											"    pm.expect(data.genus).to.eql(\"GENUS1\");\r",
											"});\r",
											"pm.test(\"Check species\", function () {\r",
											"    pm.expect(data.species).to.eql(\"SPNAM1\");\r",
											"});\r",
											"pm.test(\"Check taxonIds\", function () {\r",
											"    pm.expect(data.taxonIds).to.eql([]);\r",
											"});\r",
											"pm.test(\"Check speciesAuthority\", function () {\r",
											"    pm.expect(data.speciesAuthority).to.eql(\"SPAUTH1\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check subtaxa\", function () {\r",
											"    pm.expect(data.subtaxa).to.eql(\"SUBTAX1\");\r",
											"});\r",
											"pm.test(\"Check subtaxaAuthority\", function () {\r",
											"    pm.expect(data.subtaxaAuthority).to.eql(\"STAUTH1\");\r",
											"});\r",
											"pm.test(\"Check donors\", function () {\r",
											"    pm.expect(data.donors).to.eql([]);\r",
											"});\r",
											"pm.test(\"Check acquisitionDate\", function () {\r",
											"    pm.expect(data.acquisitionDate).to.eql(\"2018-10-25\");\r",
											"});\r",
											"pm.test(\"Check breedingMethodDbId\", function () {\r",
											"    pm.expect(data.breedingMethodDbId).to.eql(\"70\");\r",
											"});\r",
											"pm.test(\"Check germplasmGenus\", function () {\r",
											"    pm.expect(data.germplasmGenus).to.eql(\"GENUS1\");\r",
											"});\r",
											"pm.test(\"Check germplasmSpecies\", function () {\r",
											"    pm.expect(data.germplasmSpecies).to.eql(\"SPNAM1\");\r",
											"});\r",
											"pm.test(\"Check seedSource\", function () {\r",
											"    pm.expect(data.seedSource).to.eql(\"seedSource\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/search/germplasm/{{searchResultDbId_germplasmGenus}}?page=0&pageSize=100",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"search",
										"germplasm",
										"{{searchResultDbId_germplasmGenus}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "100"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/search/germplasm/{searchResultsDbid}"
							},
							"response": []
						},
						{
							"name": "Verify results when entered searchResultsDbid that filters by germplasmNames",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"var jsonData = pm.response.json();\r",
											"var data = jsonData.result.data[0];\r",
											"pm.test(\"Verify returned metadata\", function () {\r",
											"    pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);\r",
											"    pm.expect(jsonData.metadata.pagination.pageSize).to.eql(100);\r",
											"    pm.expect(jsonData.metadata.pagination.totalCount).to.eql(86);\r",
											"    pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);\r",
											"    pm.expect(jsonData.metadata.status).to.eql([]);\r",
											"    pm.expect(jsonData.metadata.datafiles).to.eql([]);\r",
											"});\r",
											"pm.test(\"Check germplasmDbId \", function () {\r",
											"    pm.expect(data.germplasmDbId).to.eql(\"PKWDG942cd372\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check defaultDisplayName \", function () {\r",
											"    pm.expect(data.defaultDisplayName).to.eql(\"CML1\");\r",
											"});\r",
											"pm.test(\"Check accessionNumber \", function () {\r",
											"    pm.expect(data.accessionNumber).to.eql(\"ACCNO1\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check germplasmName \", function () {\r",
											"    pm.expect(data.germplasmName).to.eql(\"CML1\");\r",
											"});\r",
											"pm.test(\"Check germplasmPUI \", function () {\r",
											"    pm.expect(data.germplasmPUI).to.eql(\"PUIname1\");\r",
											"});\r",
											"pm.test(\"Check pedigree\", function () {\r",
											"    pm.expect(data.pedigree).to.eql(\"CML1\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check germplasmSeedSource\", function () {\r",
											"    pm.expect(data.germplasmSeedSource).to.eql(\"seedSource\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check synonyms\", function () {\r",
											" var names = [\"ACCNO1\", \"DVNM1\", \"GENUS1\", \"DVNM1\",\"PUIname1\"];\r",
											"   for (var i = 0; i < data.synonyms.length; i++) {\r",
											"    pm.expect(data.synonyms[i]).to.eql(names[i]);\r",
											"    }\r",
											"});\r",
											"\r",
											"pm.test(\"Check commonCropName\", function () {\r",
											"    pm.expect(data.commonCropName).to.eql(\"commoncropnm\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check instituteCode\", function () {\r",
											"    pm.expect(data.instituteCode).to.eql(\"instituteCode001\");\r",
											"});\r",
											"pm.test(\"Check instituteName\", function () {\r",
											"    pm.expect(data.instituteName).to.eql(\"instituteName001\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check countryOfOriginCode\", function () {\r",
											"    pm.expect(data.countryOfOriginCode).to.eql(\"WARDA\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check typeOfGermplasmStorageCode\", function () {\r",
											"    pm.expect(data.typeOfGermplasmStorageCode).to.eql([]);\r",
											"});\r",
											"pm.test(\"Check genus\", function () {\r",
											"    pm.expect(data.genus).to.eql(\"GENUS1\");\r",
											"});\r",
											"pm.test(\"Check species\", function () {\r",
											"    pm.expect(data.species).to.eql(\"SPNAM1\");\r",
											"});\r",
											"pm.test(\"Check taxonIds\", function () {\r",
											"    pm.expect(data.taxonIds).to.eql([]);\r",
											"});\r",
											"pm.test(\"Check speciesAuthority\", function () {\r",
											"    pm.expect(data.speciesAuthority).to.eql(\"SPAUTH1\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check subtaxa\", function () {\r",
											"    pm.expect(data.subtaxa).to.eql(\"SUBTAX1\");\r",
											"});\r",
											"pm.test(\"Check subtaxaAuthority\", function () {\r",
											"    pm.expect(data.subtaxaAuthority).to.eql(\"STAUTH1\");\r",
											"});\r",
											"pm.test(\"Check donors\", function () {\r",
											"    pm.expect(data.donors).to.eql([]);\r",
											"});\r",
											"pm.test(\"Check acquisitionDate\", function () {\r",
											"    pm.expect(data.acquisitionDate).to.eql(\"2018-10-25\");\r",
											"});\r",
											"pm.test(\"Check breedingMethodDbId\", function () {\r",
											"    pm.expect(data.breedingMethodDbId).to.eql(\"70\");\r",
											"});\r",
											"pm.test(\"Check germplasmGenus\", function () {\r",
											"    pm.expect(data.germplasmGenus).to.eql(\"GENUS1\");\r",
											"});\r",
											"pm.test(\"Check germplasmSpecies\", function () {\r",
											"    pm.expect(data.germplasmSpecies).to.eql(\"SPNAM1\");\r",
											"});\r",
											"pm.test(\"Check seedSource\", function () {\r",
											"    pm.expect(data.seedSource).to.eql(\"seedSource\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/search/germplasm/{{searchResultDbId_germplasmNames}}?page=0&pageSize=100",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"search",
										"germplasm",
										"{{searchResultDbId_germplasmNames}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "100"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/search/germplasm/{searchResultsDbid}"
							},
							"response": []
						},
						{
							"name": "Verify results when entered searchResultsDbid that filters by germplasmPUI",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"var jsonData = pm.response.json();\r",
											"var data = jsonData.result.data[0];\r",
											"pm.test(\"Verify returned metadata\", function () {\r",
											"    pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);\r",
											"    pm.expect(jsonData.metadata.pagination.pageSize).to.eql(100);\r",
											"    pm.expect(jsonData.metadata.pagination.totalCount).to.eql(1);\r",
											"    pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);\r",
											"    pm.expect(jsonData.metadata.status).to.eql([]);\r",
											"    pm.expect(jsonData.metadata.datafiles).to.eql([]);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Check germplasmDbId \", function () {\r",
											"    pm.expect(data.germplasmDbId).to.eql(\"PKWDG942cd372\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check defaultDisplayName \", function () {\r",
											"    pm.expect(data.defaultDisplayName).to.eql(\"CML1\");\r",
											"});\r",
											"pm.test(\"Check accessionNumber \", function () {\r",
											"    pm.expect(data.accessionNumber).to.eql(\"ACCNO1\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check germplasmName \", function () {\r",
											"    pm.expect(data.germplasmName).to.eql(\"CML1\");\r",
											"});\r",
											"pm.test(\"Check germplasmPUI \", function () {\r",
											"    pm.expect(data.germplasmPUI).to.eql(\"PUIname1\");\r",
											"});\r",
											"pm.test(\"Check pedigree\", function () {\r",
											"    pm.expect(data.pedigree).to.eql(\"CML1\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check germplasmSeedSource\", function () {\r",
											"    pm.expect(data.germplasmSeedSource).to.eql(\"seedSource\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check synonyms\", function () {\r",
											" var names = [\"ACCNO1\", \"DVNM1\", \"GENUS1\", \"DVNM1\",\"PUIname1\"];\r",
											"   for (var i = 0; i < data.synonyms.length; i++) {\r",
											"    pm.expect(data.synonyms[i]).to.eql(names[i]);\r",
											"    }\r",
											"});\r",
											"\r",
											"pm.test(\"Check commonCropName\", function () {\r",
											"    pm.expect(data.commonCropName).to.eql(\"commoncropnm\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check instituteCode\", function () {\r",
											"    pm.expect(data.instituteCode).to.eql(\"instituteCode001\");\r",
											"});\r",
											"pm.test(\"Check instituteName\", function () {\r",
											"    pm.expect(data.instituteName).to.eql(\"instituteName001\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check countryOfOriginCode\", function () {\r",
											"    pm.expect(data.countryOfOriginCode).to.eql(\"WARDA\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check typeOfGermplasmStorageCode\", function () {\r",
											"    pm.expect(data.typeOfGermplasmStorageCode).to.eql([]);\r",
											"});\r",
											"pm.test(\"Check genus\", function () {\r",
											"    pm.expect(data.genus).to.eql(\"GENUS1\");\r",
											"});\r",
											"pm.test(\"Check species\", function () {\r",
											"    pm.expect(data.species).to.eql(\"SPNAM1\");\r",
											"});\r",
											"pm.test(\"Check taxonIds\", function () {\r",
											"    pm.expect(data.taxonIds).to.eql([]);\r",
											"});\r",
											"pm.test(\"Check speciesAuthority\", function () {\r",
											"    pm.expect(data.speciesAuthority).to.eql(\"SPAUTH1\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check subtaxa\", function () {\r",
											"    pm.expect(data.subtaxa).to.eql(\"SUBTAX1\");\r",
											"});\r",
											"pm.test(\"Check subtaxaAuthority\", function () {\r",
											"    pm.expect(data.subtaxaAuthority).to.eql(\"STAUTH1\");\r",
											"});\r",
											"pm.test(\"Check donors\", function () {\r",
											"    pm.expect(data.donors).to.eql([]);\r",
											"});\r",
											"pm.test(\"Check acquisitionDate\", function () {\r",
											"    pm.expect(data.acquisitionDate).to.eql(\"2018-10-25\");\r",
											"});\r",
											"pm.test(\"Check breedingMethodDbId\", function () {\r",
											"    pm.expect(data.breedingMethodDbId).to.eql(\"70\");\r",
											"});\r",
											"pm.test(\"Check germplasmGenus\", function () {\r",
											"    pm.expect(data.germplasmGenus).to.eql(\"GENUS1\");\r",
											"});\r",
											"pm.test(\"Check germplasmSpecies\", function () {\r",
											"    pm.expect(data.germplasmSpecies).to.eql(\"SPNAM1\");\r",
											"});\r",
											"pm.test(\"Check seedSource\", function () {\r",
											"    pm.expect(data.seedSource).to.eql(\"seedSource\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/search/germplasm/{{searchResultDbId_germplasmPUI}}?page=0&pageSize=100",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"search",
										"germplasm",
										"{{searchResultDbId_germplasmPUI}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "100"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/search/germplasm/{searchResultsDbid}"
							},
							"response": []
						},
						{
							"name": "Verify results when entered searchResultsDbid that filters by germplasmSpecies",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"var jsonData = pm.response.json();\r",
											"var data = jsonData.result.data[0];\r",
											"pm.test(\"Verify returned metadata\", function () {\r",
											"    pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);\r",
											"    pm.expect(jsonData.metadata.pagination.pageSize).to.eql(100);\r",
											"    pm.expect(jsonData.metadata.pagination.totalCount).to.eql(1);\r",
											"    pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);\r",
											"    pm.expect(jsonData.metadata.status).to.eql([]);\r",
											"    pm.expect(jsonData.metadata.datafiles).to.eql([]);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Check germplasmDbId \", function () {\r",
											"    pm.expect(data.germplasmDbId).to.eql(\"PKWDG942cd372\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check defaultDisplayName \", function () {\r",
											"    pm.expect(data.defaultDisplayName).to.eql(\"CML1\");\r",
											"});\r",
											"pm.test(\"Check accessionNumber \", function () {\r",
											"    pm.expect(data.accessionNumber).to.eql(\"ACCNO1\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check germplasmName \", function () {\r",
											"    pm.expect(data.germplasmName).to.eql(\"CML1\");\r",
											"});\r",
											"pm.test(\"Check germplasmPUI \", function () {\r",
											"    pm.expect(data.germplasmPUI).to.eql(\"PUIname1\");\r",
											"});\r",
											"pm.test(\"Check pedigree\", function () {\r",
											"    pm.expect(data.pedigree).to.eql(\"CML1\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check germplasmSeedSource\", function () {\r",
											"    pm.expect(data.germplasmSeedSource).to.eql(\"seedSource\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check synonyms\", function () {\r",
											" var names = [\"ACCNO1\", \"DVNM1\", \"GENUS1\", \"DVNM1\",\"PUIname1\"];\r",
											"   for (var i = 0; i < data.synonyms.length; i++) {\r",
											"    pm.expect(data.synonyms[i]).to.eql(names[i]);\r",
											"    }\r",
											"});\r",
											"\r",
											"pm.test(\"Check commonCropName\", function () {\r",
											"    pm.expect(data.commonCropName).to.eql(\"commoncropnm\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check instituteCode\", function () {\r",
											"    pm.expect(data.instituteCode).to.eql(\"instituteCode001\");\r",
											"});\r",
											"pm.test(\"Check instituteName\", function () {\r",
											"    pm.expect(data.instituteName).to.eql(\"instituteName001\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check countryOfOriginCode\", function () {\r",
											"    pm.expect(data.countryOfOriginCode).to.eql(\"WARDA\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check typeOfGermplasmStorageCode\", function () {\r",
											"    pm.expect(data.typeOfGermplasmStorageCode).to.eql([]);\r",
											"});\r",
											"pm.test(\"Check genus\", function () {\r",
											"    pm.expect(data.genus).to.eql(\"GENUS1\");\r",
											"});\r",
											"pm.test(\"Check species\", function () {\r",
											"    pm.expect(data.species).to.eql(\"SPNAM1\");\r",
											"});\r",
											"pm.test(\"Check taxonIds\", function () {\r",
											"    pm.expect(data.taxonIds).to.eql([]);\r",
											"});\r",
											"pm.test(\"Check speciesAuthority\", function () {\r",
											"    pm.expect(data.speciesAuthority).to.eql(\"SPAUTH1\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check subtaxa\", function () {\r",
											"    pm.expect(data.subtaxa).to.eql(\"SUBTAX1\");\r",
											"});\r",
											"pm.test(\"Check subtaxaAuthority\", function () {\r",
											"    pm.expect(data.subtaxaAuthority).to.eql(\"STAUTH1\");\r",
											"});\r",
											"pm.test(\"Check donors\", function () {\r",
											"    pm.expect(data.donors).to.eql([]);\r",
											"});\r",
											"pm.test(\"Check acquisitionDate\", function () {\r",
											"    pm.expect(data.acquisitionDate).to.eql(\"2018-10-25\");\r",
											"});\r",
											"pm.test(\"Check breedingMethodDbId\", function () {\r",
											"    pm.expect(data.breedingMethodDbId).to.eql(\"70\");\r",
											"});\r",
											"pm.test(\"Check germplasmGenus\", function () {\r",
											"    pm.expect(data.germplasmGenus).to.eql(\"GENUS1\");\r",
											"});\r",
											"pm.test(\"Check germplasmSpecies\", function () {\r",
											"    pm.expect(data.germplasmSpecies).to.eql(\"SPNAM1\");\r",
											"});\r",
											"pm.test(\"Check seedSource\", function () {\r",
											"    pm.expect(data.seedSource).to.eql(\"seedSource\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/search/germplasm/{{searchResultDbId_germplasmSpecies}}?page=0&pageSize=100",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"search",
										"germplasm",
										"{{searchResultDbId_germplasmSpecies}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "100"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/search/germplasm/{searchResultsDbid}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered non-existing searchResultsDbid",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"pm.test(\"Check error message\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.metadata.status[0].message).to.eql(\"no search request found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/search/germplasm/99999?page=0&pageSize=100",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"search",
										"germplasm",
										"99999"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "100"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/search/germplasm/{searchResultsDbid}"
							},
							"response": []
						}
					]
				},
				{
					"name": "GET /{crop}/brapi/v2/search/germplasm/{searchResultsDbid}",
					"item": [
						{
							"name": "Verify results when entered searchResultsDbid that filters by accessionNumbers",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"var jsonData = pm.response.json();\r",
											"var data = jsonData.result.data[0];\r",
											"\r",
											"pm.test(\"Verify returned metadata\", function () {\r",
											"    pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);\r",
											"    pm.expect(jsonData.metadata.pagination.pageSize).to.eql(100);\r",
											"    pm.expect(jsonData.metadata.pagination.totalCount).to.eql(1);\r",
											"    pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);\r",
											"    pm.expect(jsonData.metadata.status).to.eql([]);\r",
											"    pm.expect(jsonData.metadata.datafiles).to.eql([]);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Check germplasmDbId \", function () {\r",
											"    pm.expect(data.germplasmDbId).to.eql(pm.environment.get(\"germplasm_uuid\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Check defaultDisplayName \", function () {\r",
											"    pm.expect(data.defaultDisplayName).to.eql(\"CML1\");\r",
											"});\r",
											"pm.test(\"Check accessionNumber \", function () {\r",
											"    pm.expect(data.accessionNumber).to.eql(\"ACCNO1\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check germplasmName \", function () {\r",
											"    pm.expect(data.germplasmName).to.eql(\"CML1\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check germplasmPUI \", function () {\r",
											"    pm.expect(data.germplasmPUI).to.eql(\"PUIname1\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check pedigree\", function () {\r",
											"    pm.expect(data.pedigree).to.eql(\"CML1\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Check seedSource\", function () {\r",
											"    pm.expect(data.seedSource).to.eql(\"seedSource\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check synonyms\", function () {\r",
											" var names = [\"ACCNO1\", \"DVNM1\", \"GENUS1\", \"DVNM1\",\"PUIname1\"];\r",
											"   for (var i = 0; i < data.synonyms.length; i++) {\r",
											"    pm.expect(data.synonyms[i].synonym).to.eql(names[i]);\r",
											"    }\r",
											"});\r",
											"\r",
											"pm.test(\"Check synonym types\", function () {\r",
											" var types = [\"ACCNO\", \"DRVNM\", \"GENUS\", \"SELHISFIX\",\"PUI\"];\r",
											"   for (var i = 0; i < data.synonyms.length; i++) {\r",
											"    pm.expect(data.synonyms[i].type).to.eql(types[i]);\r",
											"    }\r",
											"});\r",
											"\r",
											"pm.test(\"Check commonCropName\", function () {\r",
											"    pm.expect(data.commonCropName).to.eql(\"commoncropnm\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check instituteCode\", function () {\r",
											"    pm.expect(data.instituteCode).to.eql(\"instituteCode001\");\r",
											"});\r",
											"pm.test(\"Check instituteName\", function () {\r",
											"    pm.expect(data.instituteName).to.eql(\"instituteName001\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check countryOfOriginCode\", function () {\r",
											"    pm.expect(data.countryOfOriginCode).to.eql(\"WARDA\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check storageTypes\", function () {\r",
											"    pm.expect(data.storageTypes).to.eql([]);\r",
											"});\r",
											"pm.test(\"Check genus\", function () {\r",
											"    pm.expect(data.genus).to.eql(\"GENUS1\");\r",
											"});\r",
											"pm.test(\"Check species\", function () {\r",
											"    pm.expect(data.species).to.eql(\"SPNAM1\");\r",
											"});\r",
											"pm.test(\"Check taxonIds\", function () {\r",
											"    pm.expect(data.taxonIds).to.eql([]);\r",
											"});\r",
											"pm.test(\"Check speciesAuthority\", function () {\r",
											"    pm.expect(data.speciesAuthority).to.eql(\"SPAUTH1\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check subtaxa\", function () {\r",
											"    pm.expect(data.subtaxa).to.eql(\"SUBTAX1\");\r",
											"});\r",
											"pm.test(\"Check subtaxaAuthority\", function () {\r",
											"    pm.expect(data.subtaxaAuthority).to.eql(\"STAUTH1\");\r",
											"});\r",
											"pm.test(\"Check donors\", function () {\r",
											"    pm.expect(data.donors).to.eql([]);\r",
											"});\r",
											"pm.test(\"Check acquisitionDate\", function () {\r",
											"    pm.expect(data.acquisitionDate).to.eql(\"2018-10-25\");\r",
											"});\r",
											"pm.test(\"Check breedingMethodDbId\", function () {\r",
											"    pm.expect(data.breedingMethodDbId).to.eql(\"70\");\r",
											"});\r",
											"pm.test(\"Check if returned additionalInfo NOTE_AA_text is correct\", function () {\r",
											"    pm.expect(data.additionalInfo.NOTE_AA_text).to.eql(\"note1\");\r",
											"});\r",
											"pm.test(\"Check if returned additionalInfo PROGM_AA_text is correct\", function () {\r",
											"    pm.expect(data.additionalInfo.PROGM_AA_text).to.eql(\"PROGM1\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check if returned additionalInfo CROPNM_AP_text is correct\", function () {\r",
											"    pm.expect(data.additionalInfo.CROPNM_AP_text).to.eql(\"commoncropnm\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check if returned additionalInfo SORIG_AP_text is correct\", function () {\r",
											"    pm.expect(data.additionalInfo.SORIG_AP_text ).to.eql(\"sorig001\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check if returned additionalInfo SPAUTH_AP_text is correct\", function () {\r",
											"    pm.expect(data.additionalInfo.SPAUTH_AP_text).to.eql(\"SPAUTH1\");\r",
											"});\r",
											"pm.test(\"Check if returned additionalInfo STAUTH_AP_text is correct\", function () {\r",
											"    pm.expect(data.additionalInfo.STAUTH_AP_text).to.eql(\"STAUTH1\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check if returned additionalInfo ORIGININST_AP_text is correct\", function () {\r",
											"    pm.expect(data.additionalInfo.ORIGININST_AP_text).to.eql(\"instituteName001\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check if returned additionalInfo INSTCODE_AP_text is correct\", function () {\r",
											"    pm.expect(data.additionalInfo.INSTCODE_AP_text).to.eql(\"instituteCode001\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check if returned additionalInfo SPNAM_AP_text is correct\", function () {\r",
											"    pm.expect(data.additionalInfo.SPNAM_AP_text).to.eql(\"SPNAM1\");\r",
											"});\r",
											"pm.test(\"Check if returned additionalInfo PLOTCODE_AP_text is correct\", function () {\r",
											"    pm.expect(data.additionalInfo.PLOTCODE_AP_text).to.eql(\"seedSource\");\r",
											"});\r",
											"pm.test(\"Check if returned additionalInfo ORI_COUN_AP_text is correct\", function () {\r",
											"    pm.expect(data.additionalInfo.ORI_COUN_AP_text).to.eql(\"ORI_COUN1\");\r",
											"});\r",
											"pm.test(\"Check if returned additionalInfo SUBTAX_AP_text is correct\", function () {\r",
											"    pm.expect(data.additionalInfo.SUBTAX_AP_text).to.eql(\"SUBTAX1\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check externalReferences referenceID\", function () {\r",
											"    pm.expect(data.externalReferences[0].referenceID).to.eql(\"germplasm_refID\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Check externalReferences referenceSource\", function () {\r",
											"    pm.expect(data.externalReferences[0].referenceSource).to.eql(\"germplasm_refSource\");\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/search/germplasm/{{searchResultDbId_v2_accessionNumbers}}?page=0&pageSize=100",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"search",
										"germplasm",
										"{{searchResultDbId_v2_accessionNumbers}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "100"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/search/germplasm/{searchResultsDbid}"
							},
							"response": []
						},
						{
							"name": "Verify results when entered searchResultsDbid that filters by commonCropNames",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"var jsonData = pm.response.json();\r",
											"var data = jsonData.result.data[0];\r",
											"\r",
											"pm.test(\"Verify returned metadata\", function () {\r",
											"    pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);\r",
											"    pm.expect(jsonData.metadata.pagination.pageSize).to.eql(100);\r",
											"    pm.expect(jsonData.metadata.pagination.totalCount).to.eql(1);\r",
											"    pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);\r",
											"    pm.expect(jsonData.metadata.status).to.eql([]);\r",
											"    pm.expect(jsonData.metadata.datafiles).to.eql([]);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Check germplasmDbId \", function () {\r",
											"    pm.expect(data.germplasmDbId).to.eql(pm.environment.get(\"germplasm_uuid\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Check defaultDisplayName \", function () {\r",
											"    pm.expect(data.defaultDisplayName).to.eql(\"CML1\");\r",
											"});\r",
											"pm.test(\"Check accessionNumber \", function () {\r",
											"    pm.expect(data.accessionNumber).to.eql(\"ACCNO1\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check germplasmName \", function () {\r",
											"    pm.expect(data.germplasmName).to.eql(\"CML1\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check germplasmPUI \", function () {\r",
											"    pm.expect(data.germplasmPUI).to.eql(\"PUIname1\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check pedigree\", function () {\r",
											"    pm.expect(data.pedigree).to.eql(\"CML1\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Check seedSource\", function () {\r",
											"    pm.expect(data.seedSource).to.eql(\"seedSource\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check synonyms\", function () {\r",
											" var names = [\"ACCNO1\", \"DVNM1\", \"GENUS1\", \"DVNM1\",\"PUIname1\"];\r",
											"   for (var i = 0; i < data.synonyms.length; i++) {\r",
											"    pm.expect(data.synonyms[i].synonym).to.eql(names[i]);\r",
											"    }\r",
											"});\r",
											"\r",
											"pm.test(\"Check synonym types\", function () {\r",
											" var types = [\"ACCNO\", \"DRVNM\", \"GENUS\", \"SELHISFIX\",\"PUI\"];\r",
											"   for (var i = 0; i < data.synonyms.length; i++) {\r",
											"    pm.expect(data.synonyms[i].type).to.eql(types[i]);\r",
											"    }\r",
											"});\r",
											"\r",
											"pm.test(\"Check commonCropName\", function () {\r",
											"    pm.expect(data.commonCropName).to.eql(\"commoncropnm\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check instituteCode\", function () {\r",
											"    pm.expect(data.instituteCode).to.eql(\"instituteCode001\");\r",
											"});\r",
											"pm.test(\"Check instituteName\", function () {\r",
											"    pm.expect(data.instituteName).to.eql(\"instituteName001\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check countryOfOriginCode\", function () {\r",
											"    pm.expect(data.countryOfOriginCode).to.eql(\"WARDA\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check storageTypes\", function () {\r",
											"    pm.expect(data.storageTypes).to.eql([]);\r",
											"});\r",
											"pm.test(\"Check genus\", function () {\r",
											"    pm.expect(data.genus).to.eql(\"GENUS1\");\r",
											"});\r",
											"pm.test(\"Check species\", function () {\r",
											"    pm.expect(data.species).to.eql(\"SPNAM1\");\r",
											"});\r",
											"pm.test(\"Check taxonIds\", function () {\r",
											"    pm.expect(data.taxonIds).to.eql([]);\r",
											"});\r",
											"pm.test(\"Check speciesAuthority\", function () {\r",
											"    pm.expect(data.speciesAuthority).to.eql(\"SPAUTH1\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check subtaxa\", function () {\r",
											"    pm.expect(data.subtaxa).to.eql(\"SUBTAX1\");\r",
											"});\r",
											"pm.test(\"Check subtaxaAuthority\", function () {\r",
											"    pm.expect(data.subtaxaAuthority).to.eql(\"STAUTH1\");\r",
											"});\r",
											"pm.test(\"Check donors\", function () {\r",
											"    pm.expect(data.donors).to.eql([]);\r",
											"});\r",
											"pm.test(\"Check acquisitionDate\", function () {\r",
											"    pm.expect(data.acquisitionDate).to.eql(\"2018-10-25\");\r",
											"});\r",
											"pm.test(\"Check breedingMethodDbId\", function () {\r",
											"    pm.expect(data.breedingMethodDbId).to.eql(\"70\");\r",
											"});\r",
											"pm.test(\"Check if returned additionalInfo NOTE_AA_text is correct\", function () {\r",
											"    pm.expect(data.additionalInfo.NOTE_AA_text).to.eql(\"note1\");\r",
											"});\r",
											"pm.test(\"Check if returned additionalInfo PROGM_AA_text is correct\", function () {\r",
											"    pm.expect(data.additionalInfo.PROGM_AA_text).to.eql(\"PROGM1\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check if returned additionalInfo CROPNM_AP_text is correct\", function () {\r",
											"    pm.expect(data.additionalInfo.CROPNM_AP_text).to.eql(\"commoncropnm\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check if returned additionalInfo SORIG_AP_text is correct\", function () {\r",
											"    pm.expect(data.additionalInfo.SORIG_AP_text ).to.eql(\"sorig001\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check if returned additionalInfo SPAUTH_AP_text is correct\", function () {\r",
											"    pm.expect(data.additionalInfo.SPAUTH_AP_text).to.eql(\"SPAUTH1\");\r",
											"});\r",
											"pm.test(\"Check if returned additionalInfo STAUTH_AP_text is correct\", function () {\r",
											"    pm.expect(data.additionalInfo.STAUTH_AP_text).to.eql(\"STAUTH1\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check if returned additionalInfo ORIGININST_AP_text is correct\", function () {\r",
											"    pm.expect(data.additionalInfo.ORIGININST_AP_text).to.eql(\"instituteName001\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check if returned additionalInfo INSTCODE_AP_text is correct\", function () {\r",
											"    pm.expect(data.additionalInfo.INSTCODE_AP_text).to.eql(\"instituteCode001\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check if returned additionalInfo SPNAM_AP_text is correct\", function () {\r",
											"    pm.expect(data.additionalInfo.SPNAM_AP_text).to.eql(\"SPNAM1\");\r",
											"});\r",
											"pm.test(\"Check if returned additionalInfo PLOTCODE_AP_text is correct\", function () {\r",
											"    pm.expect(data.additionalInfo.PLOTCODE_AP_text).to.eql(\"seedSource\");\r",
											"});\r",
											"pm.test(\"Check if returned additionalInfo ORI_COUN_AP_text is correct\", function () {\r",
											"    pm.expect(data.additionalInfo.ORI_COUN_AP_text).to.eql(\"ORI_COUN1\");\r",
											"});\r",
											"pm.test(\"Check if returned additionalInfo SUBTAX_AP_text is correct\", function () {\r",
											"    pm.expect(data.additionalInfo.SUBTAX_AP_text).to.eql(\"SUBTAX1\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check externalReferences referenceID\", function () {\r",
											"    pm.expect(data.externalReferences[0].referenceID).to.eql(\"germplasm_refID\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Check externalReferences referenceSource\", function () {\r",
											"    pm.expect(data.externalReferences[0].referenceSource).to.eql(\"germplasm_refSource\");\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/search/germplasm/{{searchResultDbId_v2_commonCropNames}}?page=0&pageSize=100",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"search",
										"germplasm",
										"{{searchResultDbId_v2_commonCropNames}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "100"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/search/germplasm/{searchResultsDbid}"
							},
							"response": []
						},
						{
							"name": "Verify results when entered searchResultsDbid that filters by germplasmDbIds",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"var jsonData = pm.response.json();\r",
											"var data = jsonData.result.data[0];\r",
											"\r",
											"pm.test(\"Verify returned metadata\", function () {\r",
											"    pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);\r",
											"    pm.expect(jsonData.metadata.pagination.pageSize).to.eql(100);\r",
											"    pm.expect(jsonData.metadata.pagination.totalCount).to.eql(1);\r",
											"    pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);\r",
											"    pm.expect(jsonData.metadata.status).to.eql([]);\r",
											"    pm.expect(jsonData.metadata.datafiles).to.eql([]);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Check germplasmDbId \", function () {\r",
											"    pm.expect(data.germplasmDbId).to.eql(pm.environment.get(\"germplasm_uuid\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Check defaultDisplayName \", function () {\r",
											"    pm.expect(data.defaultDisplayName).to.eql(\"CML1\");\r",
											"});\r",
											"pm.test(\"Check accessionNumber \", function () {\r",
											"    pm.expect(data.accessionNumber).to.eql(\"ACCNO1\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check germplasmName \", function () {\r",
											"    pm.expect(data.germplasmName).to.eql(\"CML1\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check germplasmPUI \", function () {\r",
											"    pm.expect(data.germplasmPUI).to.eql(\"PUIname1\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check pedigree\", function () {\r",
											"    pm.expect(data.pedigree).to.eql(\"CML1\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Check seedSource\", function () {\r",
											"    pm.expect(data.seedSource).to.eql(\"seedSource\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check synonyms\", function () {\r",
											" var names = [\"ACCNO1\", \"DVNM1\", \"GENUS1\", \"DVNM1\",\"PUIname1\"];\r",
											"   for (var i = 0; i < data.synonyms.length; i++) {\r",
											"    pm.expect(data.synonyms[i].synonym).to.eql(names[i]);\r",
											"    }\r",
											"});\r",
											"\r",
											"pm.test(\"Check synonym types\", function () {\r",
											" var types = [\"ACCNO\", \"DRVNM\", \"GENUS\", \"SELHISFIX\",\"PUI\"];\r",
											"   for (var i = 0; i < data.synonyms.length; i++) {\r",
											"    pm.expect(data.synonyms[i].type).to.eql(types[i]);\r",
											"    }\r",
											"});\r",
											"\r",
											"pm.test(\"Check commonCropName\", function () {\r",
											"    pm.expect(data.commonCropName).to.eql(\"commoncropnm\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check instituteCode\", function () {\r",
											"    pm.expect(data.instituteCode).to.eql(\"instituteCode001\");\r",
											"});\r",
											"pm.test(\"Check instituteName\", function () {\r",
											"    pm.expect(data.instituteName).to.eql(\"instituteName001\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check countryOfOriginCode\", function () {\r",
											"    pm.expect(data.countryOfOriginCode).to.eql(\"WARDA\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check storageTypes\", function () {\r",
											"    pm.expect(data.storageTypes).to.eql([]);\r",
											"});\r",
											"pm.test(\"Check genus\", function () {\r",
											"    pm.expect(data.genus).to.eql(\"GENUS1\");\r",
											"});\r",
											"pm.test(\"Check species\", function () {\r",
											"    pm.expect(data.species).to.eql(\"SPNAM1\");\r",
											"});\r",
											"pm.test(\"Check taxonIds\", function () {\r",
											"    pm.expect(data.taxonIds).to.eql([]);\r",
											"});\r",
											"pm.test(\"Check speciesAuthority\", function () {\r",
											"    pm.expect(data.speciesAuthority).to.eql(\"SPAUTH1\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check subtaxa\", function () {\r",
											"    pm.expect(data.subtaxa).to.eql(\"SUBTAX1\");\r",
											"});\r",
											"pm.test(\"Check subtaxaAuthority\", function () {\r",
											"    pm.expect(data.subtaxaAuthority).to.eql(\"STAUTH1\");\r",
											"});\r",
											"pm.test(\"Check donors\", function () {\r",
											"    pm.expect(data.donors).to.eql([]);\r",
											"});\r",
											"pm.test(\"Check acquisitionDate\", function () {\r",
											"    pm.expect(data.acquisitionDate).to.eql(\"2018-10-25\");\r",
											"});\r",
											"pm.test(\"Check breedingMethodDbId\", function () {\r",
											"    pm.expect(data.breedingMethodDbId).to.eql(\"70\");\r",
											"});\r",
											"pm.test(\"Check if returned additionalInfo NOTE_AA_text is correct\", function () {\r",
											"    pm.expect(data.additionalInfo.NOTE_AA_text).to.eql(\"note1\");\r",
											"});\r",
											"pm.test(\"Check if returned additionalInfo PROGM_AA_text is correct\", function () {\r",
											"    pm.expect(data.additionalInfo.PROGM_AA_text).to.eql(\"PROGM1\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check if returned additionalInfo CROPNM_AP_text is correct\", function () {\r",
											"    pm.expect(data.additionalInfo.CROPNM_AP_text).to.eql(\"commoncropnm\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check if returned additionalInfo SORIG_AP_text is correct\", function () {\r",
											"    pm.expect(data.additionalInfo.SORIG_AP_text ).to.eql(\"sorig001\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check if returned additionalInfo SPAUTH_AP_text is correct\", function () {\r",
											"    pm.expect(data.additionalInfo.SPAUTH_AP_text).to.eql(\"SPAUTH1\");\r",
											"});\r",
											"pm.test(\"Check if returned additionalInfo STAUTH_AP_text is correct\", function () {\r",
											"    pm.expect(data.additionalInfo.STAUTH_AP_text).to.eql(\"STAUTH1\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check if returned additionalInfo ORIGININST_AP_text is correct\", function () {\r",
											"    pm.expect(data.additionalInfo.ORIGININST_AP_text).to.eql(\"instituteName001\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check if returned additionalInfo INSTCODE_AP_text is correct\", function () {\r",
											"    pm.expect(data.additionalInfo.INSTCODE_AP_text).to.eql(\"instituteCode001\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check if returned additionalInfo SPNAM_AP_text is correct\", function () {\r",
											"    pm.expect(data.additionalInfo.SPNAM_AP_text).to.eql(\"SPNAM1\");\r",
											"});\r",
											"pm.test(\"Check if returned additionalInfo PLOTCODE_AP_text is correct\", function () {\r",
											"    pm.expect(data.additionalInfo.PLOTCODE_AP_text).to.eql(\"seedSource\");\r",
											"});\r",
											"pm.test(\"Check if returned additionalInfo ORI_COUN_AP_text is correct\", function () {\r",
											"    pm.expect(data.additionalInfo.ORI_COUN_AP_text).to.eql(\"ORI_COUN1\");\r",
											"});\r",
											"pm.test(\"Check if returned additionalInfo SUBTAX_AP_text is correct\", function () {\r",
											"    pm.expect(data.additionalInfo.SUBTAX_AP_text).to.eql(\"SUBTAX1\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check externalReferences referenceID\", function () {\r",
											"    pm.expect(data.externalReferences[0].referenceID).to.eql(\"germplasm_refID\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Check externalReferences referenceSource\", function () {\r",
											"    pm.expect(data.externalReferences[0].referenceSource).to.eql(\"germplasm_refSource\");\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/search/germplasm/{{searchResultDbId_v2_germplasmDbIds}}?page=0&pageSize=100",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"search",
										"germplasm",
										"{{searchResultDbId_v2_germplasmDbIds}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "100"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/search/germplasm/{searchResultsDbid}"
							},
							"response": []
						},
						{
							"name": "Verify results when entered searchResultsDbid that filters by externalReferenceID",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"var jsonData = pm.response.json();\r",
											"var data = jsonData.result.data[0];\r",
											"\r",
											"pm.test(\"Verify returned metadata\", function () {\r",
											"    pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);\r",
											"    pm.expect(jsonData.metadata.pagination.pageSize).to.eql(100);\r",
											"    pm.expect(jsonData.metadata.pagination.totalCount).to.eql(1);\r",
											"    pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);\r",
											"    pm.expect(jsonData.metadata.status).to.eql([]);\r",
											"    pm.expect(jsonData.metadata.datafiles).to.eql([]);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Check germplasmDbId \", function () {\r",
											"    pm.expect(data.germplasmDbId).to.eql(pm.environment.get(\"germplasm_uuid\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Check defaultDisplayName \", function () {\r",
											"    pm.expect(data.defaultDisplayName).to.eql(\"CML1\");\r",
											"});\r",
											"pm.test(\"Check accessionNumber \", function () {\r",
											"    pm.expect(data.accessionNumber).to.eql(\"ACCNO1\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check germplasmName \", function () {\r",
											"    pm.expect(data.germplasmName).to.eql(\"CML1\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check germplasmPUI \", function () {\r",
											"    pm.expect(data.germplasmPUI).to.eql(\"PUIname1\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check pedigree\", function () {\r",
											"    pm.expect(data.pedigree).to.eql(\"CML1\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Check seedSource\", function () {\r",
											"    pm.expect(data.seedSource).to.eql(\"seedSource\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check synonyms\", function () {\r",
											" var names = [\"ACCNO1\", \"DVNM1\", \"GENUS1\", \"DVNM1\",\"PUIname1\"];\r",
											"   for (var i = 0; i < data.synonyms.length; i++) {\r",
											"    pm.expect(data.synonyms[i].synonym).to.eql(names[i]);\r",
											"    }\r",
											"});\r",
											"\r",
											"pm.test(\"Check synonym types\", function () {\r",
											" var types = [\"ACCNO\", \"DRVNM\", \"GENUS\", \"SELHISFIX\",\"PUI\"];\r",
											"   for (var i = 0; i < data.synonyms.length; i++) {\r",
											"    pm.expect(data.synonyms[i].type).to.eql(types[i]);\r",
											"    }\r",
											"});\r",
											"\r",
											"pm.test(\"Check commonCropName\", function () {\r",
											"    pm.expect(data.commonCropName).to.eql(\"commoncropnm\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check instituteCode\", function () {\r",
											"    pm.expect(data.instituteCode).to.eql(\"instituteCode001\");\r",
											"});\r",
											"pm.test(\"Check instituteName\", function () {\r",
											"    pm.expect(data.instituteName).to.eql(\"instituteName001\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check countryOfOriginCode\", function () {\r",
											"    pm.expect(data.countryOfOriginCode).to.eql(\"WARDA\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check storageTypes\", function () {\r",
											"    pm.expect(data.storageTypes).to.eql([]);\r",
											"});\r",
											"pm.test(\"Check genus\", function () {\r",
											"    pm.expect(data.genus).to.eql(\"GENUS1\");\r",
											"});\r",
											"pm.test(\"Check species\", function () {\r",
											"    pm.expect(data.species).to.eql(\"SPNAM1\");\r",
											"});\r",
											"pm.test(\"Check taxonIds\", function () {\r",
											"    pm.expect(data.taxonIds).to.eql([]);\r",
											"});\r",
											"pm.test(\"Check speciesAuthority\", function () {\r",
											"    pm.expect(data.speciesAuthority).to.eql(\"SPAUTH1\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check subtaxa\", function () {\r",
											"    pm.expect(data.subtaxa).to.eql(\"SUBTAX1\");\r",
											"});\r",
											"pm.test(\"Check subtaxaAuthority\", function () {\r",
											"    pm.expect(data.subtaxaAuthority).to.eql(\"STAUTH1\");\r",
											"});\r",
											"pm.test(\"Check donors\", function () {\r",
											"    pm.expect(data.donors).to.eql([]);\r",
											"});\r",
											"pm.test(\"Check acquisitionDate\", function () {\r",
											"    pm.expect(data.acquisitionDate).to.eql(\"2018-10-25\");\r",
											"});\r",
											"pm.test(\"Check breedingMethodDbId\", function () {\r",
											"    pm.expect(data.breedingMethodDbId).to.eql(\"70\");\r",
											"});\r",
											"pm.test(\"Check if returned additionalInfo NOTE_AA_text is correct\", function () {\r",
											"    pm.expect(data.additionalInfo.NOTE_AA_text).to.eql(\"note1\");\r",
											"});\r",
											"pm.test(\"Check if returned additionalInfo PROGM_AA_text is correct\", function () {\r",
											"    pm.expect(data.additionalInfo.PROGM_AA_text).to.eql(\"PROGM1\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check if returned additionalInfo CROPNM_AP_text is correct\", function () {\r",
											"    pm.expect(data.additionalInfo.CROPNM_AP_text).to.eql(\"commoncropnm\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check if returned additionalInfo SORIG_AP_text is correct\", function () {\r",
											"    pm.expect(data.additionalInfo.SORIG_AP_text ).to.eql(\"sorig001\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check if returned additionalInfo SPAUTH_AP_text is correct\", function () {\r",
											"    pm.expect(data.additionalInfo.SPAUTH_AP_text).to.eql(\"SPAUTH1\");\r",
											"});\r",
											"pm.test(\"Check if returned additionalInfo STAUTH_AP_text is correct\", function () {\r",
											"    pm.expect(data.additionalInfo.STAUTH_AP_text).to.eql(\"STAUTH1\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check if returned additionalInfo ORIGININST_AP_text is correct\", function () {\r",
											"    pm.expect(data.additionalInfo.ORIGININST_AP_text).to.eql(\"instituteName001\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check if returned additionalInfo INSTCODE_AP_text is correct\", function () {\r",
											"    pm.expect(data.additionalInfo.INSTCODE_AP_text).to.eql(\"instituteCode001\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check if returned additionalInfo SPNAM_AP_text is correct\", function () {\r",
											"    pm.expect(data.additionalInfo.SPNAM_AP_text).to.eql(\"SPNAM1\");\r",
											"});\r",
											"pm.test(\"Check if returned additionalInfo PLOTCODE_AP_text is correct\", function () {\r",
											"    pm.expect(data.additionalInfo.PLOTCODE_AP_text).to.eql(\"seedSource\");\r",
											"});\r",
											"pm.test(\"Check if returned additionalInfo ORI_COUN_AP_text is correct\", function () {\r",
											"    pm.expect(data.additionalInfo.ORI_COUN_AP_text).to.eql(\"ORI_COUN1\");\r",
											"});\r",
											"pm.test(\"Check if returned additionalInfo SUBTAX_AP_text is correct\", function () {\r",
											"    pm.expect(data.additionalInfo.SUBTAX_AP_text).to.eql(\"SUBTAX1\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check externalReferences referenceID\", function () {\r",
											"    pm.expect(data.externalReferences[0].referenceID).to.eql(\"germplasm_refID\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Check externalReferences referenceSource\", function () {\r",
											"    pm.expect(data.externalReferences[0].referenceSource).to.eql(\"germplasm_refSource\");\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/search/germplasm/{{searchResultDbId_v2_externalReferenceID}}?page=0&pageSize=100",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"search",
										"germplasm",
										"{{searchResultDbId_v2_externalReferenceID}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "100"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/search/germplasm/{searchResultsDbid}"
							},
							"response": []
						},
						{
							"name": "Verify results when entered searchResultsDbid that filters by externalReferenceSource",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"var jsonData = pm.response.json();\r",
											"var data = jsonData.result.data[0];\r",
											"\r",
											"pm.test(\"Verify returned metadata\", function () {\r",
											"    pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);\r",
											"    pm.expect(jsonData.metadata.pagination.pageSize).to.eql(100);\r",
											"    pm.expect(jsonData.metadata.pagination.totalCount).to.eql(1);\r",
											"    pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);\r",
											"    pm.expect(jsonData.metadata.status).to.eql([]);\r",
											"    pm.expect(jsonData.metadata.datafiles).to.eql([]);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Check germplasmDbId \", function () {\r",
											"    pm.expect(data.germplasmDbId).to.eql(pm.environment.get(\"germplasm_uuid\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Check defaultDisplayName \", function () {\r",
											"    pm.expect(data.defaultDisplayName).to.eql(\"CML1\");\r",
											"});\r",
											"pm.test(\"Check accessionNumber \", function () {\r",
											"    pm.expect(data.accessionNumber).to.eql(\"ACCNO1\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check germplasmName \", function () {\r",
											"    pm.expect(data.germplasmName).to.eql(\"CML1\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check germplasmPUI \", function () {\r",
											"    pm.expect(data.germplasmPUI).to.eql(\"PUIname1\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check pedigree\", function () {\r",
											"    pm.expect(data.pedigree).to.eql(\"CML1\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Check seedSource\", function () {\r",
											"    pm.expect(data.seedSource).to.eql(\"seedSource\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check synonyms\", function () {\r",
											" var names = [\"ACCNO1\", \"DVNM1\", \"GENUS1\", \"DVNM1\",\"PUIname1\"];\r",
											"   for (var i = 0; i < data.synonyms.length; i++) {\r",
											"    pm.expect(data.synonyms[i].synonym).to.eql(names[i]);\r",
											"    }\r",
											"});\r",
											"\r",
											"pm.test(\"Check synonym types\", function () {\r",
											" var types = [\"ACCNO\", \"DRVNM\", \"GENUS\", \"SELHISFIX\",\"PUI\"];\r",
											"   for (var i = 0; i < data.synonyms.length; i++) {\r",
											"    pm.expect(data.synonyms[i].type).to.eql(types[i]);\r",
											"    }\r",
											"});\r",
											"\r",
											"pm.test(\"Check commonCropName\", function () {\r",
											"    pm.expect(data.commonCropName).to.eql(\"commoncropnm\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check instituteCode\", function () {\r",
											"    pm.expect(data.instituteCode).to.eql(\"instituteCode001\");\r",
											"});\r",
											"pm.test(\"Check instituteName\", function () {\r",
											"    pm.expect(data.instituteName).to.eql(\"instituteName001\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check countryOfOriginCode\", function () {\r",
											"    pm.expect(data.countryOfOriginCode).to.eql(\"WARDA\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check storageTypes\", function () {\r",
											"    pm.expect(data.storageTypes).to.eql([]);\r",
											"});\r",
											"pm.test(\"Check genus\", function () {\r",
											"    pm.expect(data.genus).to.eql(\"GENUS1\");\r",
											"});\r",
											"pm.test(\"Check species\", function () {\r",
											"    pm.expect(data.species).to.eql(\"SPNAM1\");\r",
											"});\r",
											"pm.test(\"Check taxonIds\", function () {\r",
											"    pm.expect(data.taxonIds).to.eql([]);\r",
											"});\r",
											"pm.test(\"Check speciesAuthority\", function () {\r",
											"    pm.expect(data.speciesAuthority).to.eql(\"SPAUTH1\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check subtaxa\", function () {\r",
											"    pm.expect(data.subtaxa).to.eql(\"SUBTAX1\");\r",
											"});\r",
											"pm.test(\"Check subtaxaAuthority\", function () {\r",
											"    pm.expect(data.subtaxaAuthority).to.eql(\"STAUTH1\");\r",
											"});\r",
											"pm.test(\"Check donors\", function () {\r",
											"    pm.expect(data.donors).to.eql([]);\r",
											"});\r",
											"pm.test(\"Check acquisitionDate\", function () {\r",
											"    pm.expect(data.acquisitionDate).to.eql(\"2018-10-25\");\r",
											"});\r",
											"pm.test(\"Check breedingMethodDbId\", function () {\r",
											"    pm.expect(data.breedingMethodDbId).to.eql(\"70\");\r",
											"});\r",
											"pm.test(\"Check if returned additionalInfo NOTE_AA_text is correct\", function () {\r",
											"    pm.expect(data.additionalInfo.NOTE_AA_text).to.eql(\"note1\");\r",
											"});\r",
											"pm.test(\"Check if returned additionalInfo PROGM_AA_text is correct\", function () {\r",
											"    pm.expect(data.additionalInfo.PROGM_AA_text).to.eql(\"PROGM1\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check if returned additionalInfo CROPNM_AP_text is correct\", function () {\r",
											"    pm.expect(data.additionalInfo.CROPNM_AP_text).to.eql(\"commoncropnm\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check if returned additionalInfo SORIG_AP_text is correct\", function () {\r",
											"    pm.expect(data.additionalInfo.SORIG_AP_text ).to.eql(\"sorig001\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check if returned additionalInfo SPAUTH_AP_text is correct\", function () {\r",
											"    pm.expect(data.additionalInfo.SPAUTH_AP_text).to.eql(\"SPAUTH1\");\r",
											"});\r",
											"pm.test(\"Check if returned additionalInfo STAUTH_AP_text is correct\", function () {\r",
											"    pm.expect(data.additionalInfo.STAUTH_AP_text).to.eql(\"STAUTH1\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check if returned additionalInfo ORIGININST_AP_text is correct\", function () {\r",
											"    pm.expect(data.additionalInfo.ORIGININST_AP_text).to.eql(\"instituteName001\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check if returned additionalInfo INSTCODE_AP_text is correct\", function () {\r",
											"    pm.expect(data.additionalInfo.INSTCODE_AP_text).to.eql(\"instituteCode001\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check if returned additionalInfo SPNAM_AP_text is correct\", function () {\r",
											"    pm.expect(data.additionalInfo.SPNAM_AP_text).to.eql(\"SPNAM1\");\r",
											"});\r",
											"pm.test(\"Check if returned additionalInfo PLOTCODE_AP_text is correct\", function () {\r",
											"    pm.expect(data.additionalInfo.PLOTCODE_AP_text).to.eql(\"seedSource\");\r",
											"});\r",
											"pm.test(\"Check if returned additionalInfo ORI_COUN_AP_text is correct\", function () {\r",
											"    pm.expect(data.additionalInfo.ORI_COUN_AP_text).to.eql(\"ORI_COUN1\");\r",
											"});\r",
											"pm.test(\"Check if returned additionalInfo SUBTAX_AP_text is correct\", function () {\r",
											"    pm.expect(data.additionalInfo.SUBTAX_AP_text).to.eql(\"SUBTAX1\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check externalReferences referenceID\", function () {\r",
											"    pm.expect(data.externalReferences[0].referenceID).to.eql(\"germplasm_refID\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Check externalReferences referenceSource\", function () {\r",
											"    pm.expect(data.externalReferences[0].referenceSource).to.eql(\"germplasm_refSource\");\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/search/germplasm/{{searchResultDbId_v2_externalReferenceSource}}?page=0&pageSize=100",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"search",
										"germplasm",
										"{{searchResultDbId_v2_externalReferenceSource}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "100"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/search/germplasm/{searchResultsDbid}"
							},
							"response": []
						},
						{
							"name": "Verify results when entered searchResultsDbid that filters by genus",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"var jsonData = pm.response.json();\r",
											"pm.test(\"Verify returned metadata\", function () {\r",
											"    pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);\r",
											"    pm.expect(jsonData.metadata.pagination.pageSize).to.eql(100);\r",
											"    pm.expect(jsonData.metadata.pagination.totalCount).to.eql(1);\r",
											"    pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);\r",
											"    pm.expect(jsonData.metadata.status).to.eql([]);\r",
											"    pm.expect(jsonData.metadata.datafiles).to.eql([]);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Check if all genus are correct\", function () {\r",
											"  var jsonData = pm.response.json();\r",
											"   var i;\r",
											"    for (i = 0; i < jsonData.result.data.length; i++) { \r",
											"    pm.expect(jsonData.result.data[i].genus).to.eql(\"GENUS1\");\r",
											"    }\r",
											"});    \r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/search/germplasm/{{searchResultDbId_v2_genus}}?page=0&pageSize=100",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"search",
										"germplasm",
										"{{searchResultDbId_v2_genus}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "100"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/search/germplasm/{searchResultsDbid}"
							},
							"response": []
						},
						{
							"name": "Verify results when entered searchResultsDbid that filters by germplasmNames",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"var jsonData = pm.response.json();\r",
											"pm.test(\"Verify returned metadata\", function () {\r",
											"    pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);\r",
											"    pm.expect(jsonData.metadata.pagination.pageSize).to.eql(100);\r",
											"    pm.expect(jsonData.metadata.pagination.totalCount).to.eql(3);\r",
											"    pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);\r",
											"    pm.expect(jsonData.metadata.status).to.eql([]);\r",
											"    pm.expect(jsonData.metadata.datafiles).to.eql([]);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Check if all germplasmNames are correct\", function () {\r",
											"  var jsonData = pm.response.json();\r",
											"   var i;\r",
											"    for (i = 0; i < jsonData.result.data.length; i++) { \r",
											"    pm.expect(jsonData.result.data[i].germplasmName).to.eql(\"CML1\");\r",
											"    }\r",
											"});    \r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/search/germplasm/{{searchResultDbId_v2_germplasmNames}}?page=0&pageSize=100",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"search",
										"germplasm",
										"{{searchResultDbId_v2_germplasmNames}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "100"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/search/germplasm/{searchResultsDbid}"
							},
							"response": []
						},
						{
							"name": "Verify results when entered searchResultsDbid that filters by germplasmPUI",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"var jsonData = pm.response.json();\r",
											"pm.test(\"Verify returned metadata\", function () {\r",
											"    pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);\r",
											"    pm.expect(jsonData.metadata.pagination.pageSize).to.eql(100);\r",
											"    pm.expect(jsonData.metadata.pagination.totalCount).to.eql(1);\r",
											"    pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);\r",
											"    pm.expect(jsonData.metadata.status).to.eql([]);\r",
											"    pm.expect(jsonData.metadata.datafiles).to.eql([]);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Check if all PUI name are correct\", function () {\r",
											"  var jsonData = pm.response.json();\r",
											"   var i;\r",
											"    for (i = 0; i < jsonData.result.data.length; i++) { \r",
											"    pm.expect(jsonData.result.data[i].germplasmPUI).to.eql(\"PUIname1\");\r",
											"    }\r",
											"});    \r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/search/germplasm/{{searchResultDbId_v2_germplasmPUI}}?page=0&pageSize=100",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"search",
										"germplasm",
										"{{searchResultDbId_v2_germplasmPUI}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "100"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/search/germplasm/{searchResultsDbid}"
							},
							"response": []
						},
						{
							"name": "Verify results when entered searchResultsDbid that filters by parentDbId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"var jsonData = pm.response.json();\r",
											"pm.test(\"Verify returned metadata\", function () {\r",
											"    pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);\r",
											"    pm.expect(jsonData.metadata.pagination.pageSize).to.eql(100);\r",
											"    pm.expect(jsonData.metadata.pagination.totalCount).to.eql(6);\r",
											"    pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);\r",
											"    pm.expect(jsonData.metadata.status).to.eql([]);\r",
											"    pm.expect(jsonData.metadata.datafiles).to.eql([]);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Check if all germplasmDbIds (progenies of the given parentDbId) are correct\", function () {\r",
											"  var jsonData = pm.response.json();\r",
											"   var germplasmDbIds = [\"PKWDGccd05c2c\",\"PKWDG12899083\",\"PKWDGad095cb8\",\"PKWDGdZIjsBS9\",\"PKWDGxiifmdXr\",\"PKWDGhvcUm2DK\"]\r",
											"    for (var i = 0; i < jsonData.result.data.length; i++) { \r",
											"    pm.expect(jsonData.result.data[i].germplasmDbId).to.eql(germplasmDbIds[i]);\r",
											"    }\r",
											"});    \r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/search/germplasm/{{searchResultDbId_v2_parentDbId}}?page=0&pageSize=100",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"search",
										"germplasm",
										"{{searchResultDbId_v2_parentDbId}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "100"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/search/germplasm/{searchResultsDbid}"
							},
							"response": []
						},
						{
							"name": "Verify results when entered searchResultsDbid that filters by progenyDbId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"var jsonData = pm.response.json();\r",
											"pm.test(\"Verify returned metadata\", function () {\r",
											"    pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);\r",
											"    pm.expect(jsonData.metadata.pagination.pageSize).to.eql(100);\r",
											"    pm.expect(jsonData.metadata.pagination.totalCount).to.eql(2);\r",
											"    pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);\r",
											"    pm.expect(jsonData.metadata.status).to.eql([]);\r",
											"    pm.expect(jsonData.metadata.datafiles).to.eql([]);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Check if all germplasmDbIds (parents of the given progenyDbId) are correct\", function () {\r",
											"  var jsonData = pm.response.json();\r",
											"   var germplasmDbIds = [\"PKWDG942cd372\",\"PKWDG4b204948\"]\r",
											"    for (var i = 0; i < jsonData.result.data.length; i++) { \r",
											"    pm.expect(jsonData.result.data[i].germplasmDbId).to.eql(germplasmDbIds[i]);\r",
											"    }\r",
											"});    \r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/search/germplasm/{{searchResultDbId_v2_progenyDbId}}?page=0&pageSize=100",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"search",
										"germplasm",
										"{{searchResultDbId_v2_progenyDbId}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "100"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/search/germplasm/{searchResultsDbid}"
							},
							"response": []
						},
						{
							"name": "Verify results when entered searchResultsDbid that filters by species",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"var jsonData = pm.response.json();\r",
											"pm.test(\"Verify returned metadata\", function () {\r",
											"    pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);\r",
											"    pm.expect(jsonData.metadata.pagination.pageSize).to.eql(100);\r",
											"    pm.expect(jsonData.metadata.pagination.totalCount).to.eql(1);\r",
											"    pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);\r",
											"    pm.expect(jsonData.metadata.status).to.eql([]);\r",
											"    pm.expect(jsonData.metadata.datafiles).to.eql([]);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Check if all species are correct\", function () {\r",
											"  var jsonData = pm.response.json();\r",
											"   var i;\r",
											"    for (i = 0; i < jsonData.result.data.length; i++) { \r",
											"    pm.expect(jsonData.result.data[i].species).to.eql(\"SPNAM1\");\r",
											"    }\r",
											"});    \r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/search/germplasm/{{searchResultDbId_v2_species}}?page=0&pageSize=100",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"search",
										"germplasm",
										"{{searchResultDbId_v2_species}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "100"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/search/germplasm/{searchResultsDbid}"
							},
							"response": []
						},
						{
							"name": "Verify results when entered searchResultsDbid that filters by studyDbId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"var jsonData = pm.response.json();\r",
											"pm.test(\"Verify returned metadata\", function () {\r",
											"    pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);\r",
											"    pm.expect(jsonData.metadata.pagination.pageSize).to.eql(100);\r",
											"    pm.expect(jsonData.metadata.pagination.totalCount).to.eql(20);\r",
											"    pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);\r",
											"    pm.expect(jsonData.metadata.status).to.eql([]);\r",
											"    pm.expect(jsonData.metadata.datafiles).to.eql([]);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Check if all germplasmDbIds (parents) are correct\", function () {\r",
											"  var jsonData = pm.response.json();\r",
											"   var germplasmDbIds = [\r",
											"       \"PKWDG942cd372\",\r",
											"       \"PKWDG02fca806\",\r",
											"       \"PKWDG94574ef6\",\r",
											"       \"PKWDG47fa785e\",\r",
											"       \"PKWDGb401a9db\",\r",
											"       \"PKWDG4b204948\",\r",
											"       \"PKWDG7384cd47\",\r",
											"       \"PKWDG4387f106\",\r",
											"       \"PKWDG82945bab\",\r",
											"       \"PKWDG7dcfbd6f\",\r",
											"       \"PKWDG225f1813\",\r",
											"       \"PKWDG83aabaf0\",\r",
											"       \"PKWDGc4a40c61\",\r",
											"       \"PKWDG34bd21ac\",\r",
											"       \"PKWDG2a35f026\",\r",
											"       \"PKWDGee4a84d9\",\r",
											"       \"PKWDG4eb70744\",\r",
											"       \"PKWDGc182984c\",\r",
											"       \"PKWDG0706471c\",\r",
											"       \"PKWDGa03082db\"\r",
											"       \r",
											"       ]\r",
											"    for (var i = 0; i < jsonData.result.data.length; i++) { \r",
											"    pm.expect(jsonData.result.data[i].germplasmDbId).to.eql(germplasmDbIds[i]);\r",
											"    }\r",
											"});    \r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/search/germplasm/{{searchResultDbId_v2_studyDbId}}?page=0&pageSize=100",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"search",
										"germplasm",
										"{{searchResultDbId_v2_studyDbId}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "100"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/search/germplasm/{searchResultsDbid}"
							},
							"response": []
						},
						{
							"name": "Verify results when entered searchResultsDbid that filters by synonyms",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"var jsonData = pm.response.json();\r",
											"pm.test(\"Verify returned metadata\", function () {\r",
											"    pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);\r",
											"    pm.expect(jsonData.metadata.pagination.pageSize).to.eql(100);\r",
											"    pm.expect(jsonData.metadata.pagination.totalCount).to.eql(1);\r",
											"    pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);\r",
											"    pm.expect(jsonData.metadata.status).to.eql([]);\r",
											"    pm.expect(jsonData.metadata.datafiles).to.eql([]);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Check if all germplasm have the specified synonym\", function () {\r",
											"    //Variable for holding boolean value if synonym is found\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < jsonData.result.data.length; i++) {    \r",
											"        for (var j=0; j < jsonData.result.data[i].synonyms.length;j++){\r",
											"            if(jsonData.result.data[i].synonyms[j].synonym ==\"PUIname1\"){\r",
											"                found = true;\r",
											"                \r",
											"            }\r",
											"        }       \r",
											"       pm.expect(found).to.eql(true);  \r",
											"        found = false;\r",
											"    } \r",
											"}); \r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/search/germplasm/{{searchResultDbId_v2_synonyms}}?page=0&pageSize=100",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"search",
										"germplasm",
										"{{searchResultDbId_v2_synonyms}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "100"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/search/germplasm/{searchResultsDbid}"
							},
							"response": []
						},
						{
							"name": "Verify results when entered searchResultsDbid that filters by germplasmDbId w germplasmOrigin",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"var jsonData = pm.response.json();\r",
											"var data = jsonData.result.data[0];\r",
											"pm.test(\"Verify returned metadata\", function () {\r",
											"    pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);\r",
											"    pm.expect(jsonData.metadata.pagination.pageSize).to.eql(100);\r",
											"    pm.expect(jsonData.metadata.pagination.totalCount).to.eql(1);\r",
											"    pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);\r",
											"    pm.expect(jsonData.metadata.status).to.eql([]);\r",
											"    pm.expect(jsonData.metadata.datafiles).to.eql([]);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Check germplasmDbId \", function () {\r",
											"    pm.expect(data.germplasmDbId).to.eql(\"PKWDGdZIjsBS9\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check defaultDisplayName \", function () {\r",
											"    pm.expect(data.defaultDisplayName).to.eql(\"IB21\");\r",
											"});\r",
											"pm.test(\"Check germplasmName \", function () {\r",
											"    pm.expect(data.germplasmName).to.eql(\"IB21\");\r",
											"});\r",
											"pm.test(\"Check pedigree\", function () {\r",
											"    pm.expect(data.pedigree).to.eql(\"CML1/CML3\");\r",
											"});\r",
											"pm.test(\"Check synonyms\", function () {\r",
											"    pm.expect(data.synonyms).to.eql([]);\r",
											"    \r",
											"});\r",
											"\r",
											"//Verify details of germplasm origin\r",
											"pm.test(\"Check germplasmOrigin coordinateUncertainty\", function () {\r",
											"    pm.expect(data.germplasmOrigin.coordinateUncertainty).to.eql(\"\");\r",
											"    \r",
											"});\r",
											"pm.test(\"Check germplasmOrigin geometry coordinates  \", function () {\r",
											"    pm.expect(data.germplasmOrigin.coordinates.geometry.coordinates).to.eql([-76.506042,42.417373]);\r",
											"});\r",
											"pm.test(\"Check germplasmOrigin geometry type  \", function () {\r",
											"    pm.expect(data.germplasmOrigin.coordinates.geometry.type).to.eql(\"Point\");\r",
											"});\r",
											"pm.test(\"Check germplasmOrigin coordinates type  \", function () {\r",
											"    pm.expect(data.germplasmOrigin.coordinates.type).to.eql(\"Feature\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Check countryOfOriginCode\", function () {\r",
											"    pm.expect(data.countryOfOriginCode).to.eql(\"WARDA\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check storageTypes\", function () {\r",
											"    pm.expect(data.storageTypes).to.eql([]);\r",
											"});\r",
											"pm.test(\"Check taxonIds\", function () {\r",
											"    pm.expect(data.taxonIds).to.eql([]);\r",
											"});\r",
											"pm.test(\"Check donors\", function () {\r",
											"    pm.expect(data.donors).to.eql([]);\r",
											"});\r",
											"pm.test(\"Check acquisitionDate\", function () {\r",
											"    pm.expect(data.acquisitionDate).to.eql(\"2021-04-01\");\r",
											"});\r",
											"pm.test(\"Check breedingMethodDbId\", function () {\r",
											"    pm.expect(data.breedingMethodDbId).to.eql(\"107\");\r",
											"});\r",
											"pm.test(\"Check seedSource\", function () {\r",
											"    pm.expect(data.seedSource).to.eql(\"Study with Crosses and Selections:WARDA:202103:34:/Study with Crosses and Selections:WARDA:202103:30:\");\r",
											"});\r",
											"pm.test(\"Check additionalInfo PLOTCODE_AP_text\", function () {\r",
											"    pm.expect(data.additionalInfo.PLOTCODE_AP_text).to.eql(\"Study with Crosses and Selections:WARDA:202103:34:/Study with Crosses and Selections:WARDA:202103:30:\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/search/germplasm/{{searchResultDbId_v2_germplasmDbId_w_origin}}?page=0&pageSize=100",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"search",
										"germplasm",
										"{{searchResultDbId_v2_germplasmDbId_w_origin}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "100"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/search/germplasm/{searchResultsDbid}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered non-existing searchResultsDbid",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"pm.test(\"Check error message\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.metadata.status[0].message).to.eql(\"no search request found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/search/germplasm/99999?page=0&pageSize=100",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"search",
										"germplasm",
										"99999"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "100"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/search/germplasm/{searchResultsDbid}"
							},
							"response": []
						}
					]
				},
				{
					"name": "GET ​/{crop}​/brapi​/v1​/search​/germplasm​/{germplasmDbId}​/attributes",
					"item": [
						{
							"name": "Verify response code and body when entered valid germplasmDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"var index = 0;",
											"pm.test(\"Verify returned metadata\", function () {",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(12);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Check attributeCode\", function () {",
											"    pm.expect(jsonData.result.data[index].attributeCode).to.eql(\"SPNAM_AP_text\");",
											"});",
											"pm.test(\"Check attributeDbId\", function () {",
											"    pm.expect(jsonData.result.data[index].attributeDbId).to.eql(100653);",
											"});",
											"pm.test(\"Check attributeName\", function () {",
											"    pm.expect(jsonData.result.data[index].attributeName).to.eql(\"Additional details about germplasm\");",
											"});",
											"pm.test(\"Check determinedDate\", function () {",
											"    pm.expect(jsonData.result.data[index].determinedDate).to.eql(20181025);",
											"});",
											"pm.test(\"Check value\", function () {",
											"    pm.expect(jsonData.result.data[index].value).to.eql(\"SPNAM1\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/germplasm/{{germplasm_uuid}}/attributes",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"germplasm",
										"{{germplasm_uuid}}",
										"attributes"
									]
								},
								"description": "GET /{crop}​/brapi​/v1​/search​/germplasm​/{germplasmDbId}​/attributes"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered valid germplasmDbId and attributeDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"var index = 0;",
											"pm.test(\"Verify returned metadata\", function () {",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(1);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"pm.test(\"Check attributeCode\", function () {",
											"    pm.expect(jsonData.result.data[index].attributeCode).to.eql(\"ORI_COUN_AP_text\");",
											"});",
											"pm.test(\"Check attributeDbId\", function () {",
											"    pm.expect(jsonData.result.data[index].attributeDbId).to.eql(100692);",
											"});",
											"pm.test(\"Check attributeName\", function () {",
											"    pm.expect(jsonData.result.data[index].attributeName).to.eql(\"Country of Origin\");",
											"});",
											"pm.test(\"Check determinedDate\", function () {",
											"    pm.expect(jsonData.result.data[index].determinedDate).to.eql(20181025);",
											"});",
											"pm.test(\"Check value\", function () {",
											"    pm.expect(jsonData.result.data[index].value).to.eql(\"ORI_COUN1\");",
											"});",
											"",
											"pm.test(\"Check returned germplasmDbId \", function () {",
											"    pm.expect(jsonData.result.germplasmDbId).to.eql(\"PKWDG942cd372\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/germplasm/{{germplasm_uuid}}/attributes?attributeDbIds=100692",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"germplasm",
										"{{germplasm_uuid}}",
										"attributes"
									],
									"query": [
										{
											"key": "attributeDbIds",
											"value": "100692"
										}
									]
								},
								"description": "GET /{crop}​/brapi​/v1​/search​/germplasm​/{germplasmDbId}​/attributes"
							},
							"response": []
						},
						{
							"name": "Enter valid germplasmDbId and attributeDbId that is not associated to the germplasm",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"var index = 0;",
											"pm.test(\"Verify returned metadata\", function () {",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(0);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Check returned data\", function () {",
											"    pm.expect(jsonData.result.data).to.eql([]);",
											"});",
											"pm.test(\"Check if there is no returned attributeCode\", function () {",
											"    pm.expect(jsonData.result).to.not.have.property(\"attributeCode\");",
											"});",
											"pm.test(\"Check if there is no returned attributeDbId\", function () {",
											"    pm.expect(jsonData.result).to.not.have.property(\"attributeDbId\");",
											"});",
											"pm.test(\"Check if there is no returned attributeName\", function () {",
											"    pm.expect(jsonData.result).to.not.have.property(\"attributeName\");",
											"});",
											"pm.test(\"Check if there is no returned determinedDate\", function () {",
											"    pm.expect(jsonData.result).to.not.have.property(\"determinedDate\");",
											"});",
											"pm.test(\"Check if there is no returned value\", function () {",
											"    pm.expect(jsonData.result).to.not.have.property(\"value\");",
											"});",
											"pm.test(\"Check returned germplasmDbId \", function () {",
											"    pm.expect(jsonData.result.germplasmDbId).to.eql(\"PKWDG942cd372\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/germplasm/{{germplasm_uuid}}/attributes?attributeDbIds=100732",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"germplasm",
										"{{germplasm_uuid}}",
										"attributes"
									],
									"query": [
										{
											"key": "attributeDbIds",
											"value": "100732"
										}
									]
								},
								"description": "GET /{crop}​/brapi​/v1​/search​/germplasm​/{germplasmDbId}​/attributes"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered non-existing germplasmDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"pm.test(\"Verify returned error\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.errors[0].message).to.eql(\"Invalid germplasm identifier\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/germplasm/{{nonExistingGID}}/attributes",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"germplasm",
										"{{nonExistingGID}}",
										"attributes"
									]
								},
								"description": "GET /{crop}​/brapi​/v1​/search​/germplasm​/{germplasmDbId}​/attributes"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid cropname",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Verify returned error\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.errors[0].message).to.eql(\"Invalid crop invalidcrop for URL:/invalidcrop/brapi/v1/germplasm/PKWDG942cd372/attributes\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/invalidcrop/brapi/v1/germplasm/{{germplasm_uuid}}/attributes",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"invalidcrop",
										"brapi",
										"v1",
										"germplasm",
										"{{germplasm_uuid}}",
										"attributes"
									]
								},
								"description": "GET /{crop}​/brapi​/v1​/search​/germplasm​/{germplasmDbId}​/attributes"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered valid pagination details",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"var index = 0;",
											"pm.test(\"Verify returned metadata\", function () {",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(10000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(12);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Check attributeCode\", function () {",
											"    pm.expect(jsonData.result.data[index].attributeCode).to.eql(\"SPNAM_AP_text\");",
											"});",
											"pm.test(\"Check attributeDbId\", function () {",
											"    pm.expect(jsonData.result.data[index].attributeDbId).to.eql(100653);",
											"});",
											"pm.test(\"Check attributeName\", function () {",
											"    pm.expect(jsonData.result.data[index].attributeName).to.eql(\"Additional details about germplasm\");",
											"});",
											"pm.test(\"Check determinedDate\", function () {",
											"    pm.expect(jsonData.result.data[index].determinedDate).to.eql(20181025);",
											"});",
											"pm.test(\"Check value\", function () {",
											"    pm.expect(jsonData.result.data[index].value).to.eql(\"SPNAM1\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/germplasm/{{germplasm_uuid}}/attributes?page=0&pageSize=10000",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"germplasm",
										"{{germplasm_uuid}}",
										"attributes"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "10000"
										}
									]
								},
								"description": "GET /{crop}​/brapi​/v1​/search​/germplasm​/{germplasmDbId}​/attributes"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered pageSize greater than max",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"",
											"pm.test(\"Verify returned error message\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.errors[0].message).to.eql(\"Page size must between 1 and 10000.\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/germplasm/{{germplasm_uuid}}/attributes?page=0&pageSize=10001",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"germplasm",
										"{{germplasm_uuid}}",
										"attributes"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "10001"
										}
									]
								},
								"description": "GET /{crop}​/brapi​/v1​/search​/germplasm​/{germplasmDbId}​/attributes"
							},
							"response": []
						}
					]
				},
				{
					"name": "GET ​/{crop}​/brapi​/v1​/studies​/{studyDbId}​/germplasm",
					"item": [
						{
							"name": "Verify response code and body when entered valid studyDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"var data = jsonData.result.data[0];",
											"pm.test(\"Verify returned metadata\", function () {",
											"",
											"    pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											"    pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											"    pm.expect(jsonData.metadata.pagination.totalCount).to.eql(20);",
											"    pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											"    pm.expect(jsonData.metadata.status).to.eql([]);",
											"    pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"//Verify returned data",
											"pm.test(\"Check germplasmDbId\", function () {",
											"    pm.expect(data.germplasmDbId).to.eql(\"PKWDG942cd372\");",
											"});",
											"pm.test(\"Check defaultDisplayName\", function () {",
											"    pm.expect(data.defaultDisplayName).to.eql(\"CML1\");",
											"});",
											"pm.test(\"Check accessionNumber\", function () {",
											"    pm.expect(data.accessionNumber).to.eql(\"ACCNO1\");",
											"});",
											"pm.test(\"Check germplasmName\", function () {",
											"    pm.expect(data.germplasmName).to.eql(\"CML1\");",
											"});",
											"pm.test(\"Check germplasmPUI\", function () {",
											"    pm.expect(data.germplasmPUI).to.eql(\"PUIname1\");",
											"});",
											"pm.test(\"Check pedigree\", function () {",
											"    pm.expect(data.pedigree).to.eql(\"CML1\");",
											"});",
											"pm.test(\"Check germplasmSeedSource\", function () {",
											"    pm.expect(data.germplasmSeedSource).to.eql(\"seedSource\");",
											"});",
											"",
											"pm.test(\"Check synonyms\", function () {",
											" var names = [\"ACCNO1\", \"DVNM1\", \"GENUS1\", \"DVNM1\",\"PUIname1\"];",
											"   for (var i = 0; i < data.synonyms.length; i++) {",
											"    pm.expect(data.synonyms[i]).to.eql(names[i]);",
											"    }",
											"",
											"});",
											"pm.test(\"Check commonCropName\", function () {",
											"    pm.expect(data.commonCropName).to.eql(\"commoncropnm\");",
											"});",
											"pm.test(\"Check instituteCode\", function () {",
											"    pm.expect(data.instituteCode).to.eql(\"instituteCode001\");",
											"});",
											"pm.test(\"Check instituteName\", function () {",
											"    pm.expect(data.instituteName).to.eql(\"instituteName001\");",
											"});",
											"pm.test(\"Check countryOfOriginCode\", function () {",
											"    pm.expect(data.countryOfOriginCode).to.eql(\"WARDA\");",
											"});",
											"pm.test(\"Check typeOfGermplasmStorageCode\", function () {",
											"    pm.expect(data.typeOfGermplasmStorageCode).to.eql([]);",
											"});",
											"pm.test(\"Check genus\", function () {",
											"    pm.expect(data.genus).to.eql(\"GENUS1\");",
											"});",
											"pm.test(\"Check species\", function () {",
											"    pm.expect(data.species).to.eql(\"SPNAM1\");",
											"});",
											"pm.test(\"Check taxonIds\", function () {",
											"    pm.expect(data.taxonIds).to.eql([]);",
											"});",
											"pm.test(\"Check speciesAuthority\", function () {",
											"    pm.expect(data.speciesAuthority).to.eql(\"SPAUTH1\");",
											"});",
											"pm.test(\"Check subtaxa\", function () {",
											"    pm.expect(data.subtaxa).to.eql(\"SUBTAX1\");",
											"});",
											"pm.test(\"Check subtaxaAuthority\", function () {",
											"    pm.expect(data.subtaxaAuthority).to.eql(\"STAUTH1\");",
											"});",
											"pm.test(\"Check donors\", function () {",
											"    pm.expect(data.donors).to.eql([]);",
											"});",
											"pm.test(\"Check acquisitionDate\", function () {",
											"    pm.expect(data.acquisitionDate).to.eql(\"2018-10-25\");",
											"});",
											"pm.test(\"Check breedingMethodDbId\", function () {",
											"    pm.expect(data.breedingMethodDbId).to.eql(\"70\");",
											"});",
											"pm.test(\"Check germplasmGenus\", function () {",
											"    pm.expect(data.germplasmGenus).to.eql(\"GENUS1\");",
											"});",
											"pm.test(\"Check germplasmSpecies\", function () {",
											"    pm.expect(data.germplasmSpecies).to.eql(\"SPNAM1\");",
											"});",
											"pm.test(\"Check seedSource\", function () {",
											"    pm.expect(data.seedSource).to.eql(\"seedSource\");",
											"});",
											"pm.test(\"Check entryNumber\", function () {",
											"    pm.expect(data.entryNumber).to.eql(\"1\");",
											"});",
											"",
											"",
											"pm.test(\"Verify returned studyDbId\", function () {",
											"    pm.expect(jsonData.result.studyDbId).to.eql(pm.environment.get(\"studyDbId\"));",
											"});",
											"pm.test(\"Verify returned trialName\", function () {",
											"    pm.expect(jsonData.result.trialName).to.eql(\"Randomized Trial 20180003\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/studies/{{studyDbId}}/germplasm",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"studies",
										"{{studyDbId}}",
										"germplasm"
									]
								},
								"description": "GET /{crop}/brapi/v1/studies/{studyDbId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered non-existing studyDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Verify returned error\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"StudyDbId does not exist\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/studies/{{non_existing_study_id}}/germplasm",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"studies",
										"{{non_existing_study_id}}",
										"germplasm"
									]
								},
								"description": "GET /{crop}/brapi/v1/studies/{studyDbId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid crop",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Verify returned error\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Invalid crop invalid for URL:/invalid/brapi/v1/studies/2/germplasm\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/invalid/brapi/v1/studies/{{studyDbId}}/germplasm",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"invalid",
										"brapi",
										"v1",
										"studies",
										"{{studyDbId}}",
										"germplasm"
									]
								},
								"description": "GET /{crop}/brapi/v1/studies/{studyDbId}"
							},
							"response": []
						}
					]
				},
				{
					"name": "GET ​/{crop}​/brapi​/v1​/germplasm-search",
					"item": [
						{
							"name": "GET /{crop}/brapi/v1/germplasm-search using germplasmName",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Check GID \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0].germplasmDbId).to.eql(\"PKWDG942cd372\");",
											"});",
											"",
											"pm.test(\"Check defaultDisplayName \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0].defaultDisplayName).to.eql(\"CML1\");",
											"});",
											"pm.test(\"Check accessionNumber \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0].accessionNumber).to.eql(\"ACCNO1\");",
											"});",
											"",
											"pm.test(\"Check germplasmName \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0].germplasmName).to.eql(\"CML1\");",
											"});",
											"",
											"pm.test(\"Check pedigree\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0].pedigree).to.eql(\"CML1\");",
											"});",
											"  /**",
											"pm.test(\"Check germplasmSeedSource\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0].germplasmSeedSource).to.eql(\"AA001\");",
											"});",
											"  ",
											"   */",
											"pm.test(\"Check commonCropName\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0].commonCropName).to.eql(\"commoncropnm\");",
											"});",
											"",
											"pm.test(\"Check instituteCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0].instituteCode).to.eql(\"instituteCode001\");",
											"});",
											"pm.test(\"Check instituteName\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0].instituteName).to.eql(\"instituteName001\");",
											"});",
											"",
											"pm.test(\"Check countryOfOriginCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0].countryOfOriginCode).to.eql(\"WARDA\");",
											"});",
											"",
											"pm.test(\"Check genus\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0].genus).to.eql(\"GENUS1\");",
											"});",
											"",
											"pm.test(\"Check species\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0].species).to.eql(\"SPNAM1\");",
											"});",
											"",
											"pm.test(\"Check speciesAuthority\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0].speciesAuthority).to.eql(\"SPAUTH1\");",
											"});",
											"",
											"pm.test(\"Check subtaxa\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0].subtaxa).to.eql(\"SUBTAX1\");",
											"});",
											"",
											"pm.test(\"Check acquisitionDate\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0].acquisitionDate).to.eql(\"2018-10-25\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/germplasm-search?germplasmName=CML1",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"germplasm-search"
									],
									"query": [
										{
											"key": "germplasmName",
											"value": "CML1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET /{crop}/brapi/v1/germplasm-search using germplasmDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Check GID \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0].germplasmDbId).to.eql(\"PKWDG942cd372\");",
											"});",
											"",
											"pm.test(\"Check defaultDisplayName \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0].defaultDisplayName).to.eql(\"CML1\");",
											"});",
											"pm.test(\"Check accessionNumber \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0].accessionNumber).to.eql(\"ACCNO1\");",
											"});",
											"",
											"pm.test(\"Check germplasmName \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0].germplasmName).to.eql(\"CML1\");",
											"});",
											"",
											"pm.test(\"Check pedigree\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0].pedigree).to.eql(\"CML1\");",
											"});",
											"  /**",
											"pm.test(\"Check germplasmSeedSource\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0].germplasmSeedSource).to.eql(\"AA001\");",
											"});",
											"  ",
											"   */",
											"pm.test(\"Check commonCropName\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0].commonCropName).to.eql(\"commoncropnm\");",
											"});",
											"",
											"pm.test(\"Check instituteCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0].instituteCode).to.eql(\"instituteCode001\");",
											"});",
											"pm.test(\"Check instituteName\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0].instituteName).to.eql(\"instituteName001\");",
											"});",
											"",
											"pm.test(\"Check countryOfOriginCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0].countryOfOriginCode).to.eql(\"WARDA\");",
											"});",
											"",
											"pm.test(\"Check genus\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0].genus).to.eql(\"GENUS1\");",
											"});",
											"",
											"pm.test(\"Check species\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0].species).to.eql(\"SPNAM1\");",
											"});",
											"",
											"pm.test(\"Check speciesAuthority\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0].speciesAuthority).to.eql(\"SPAUTH1\");",
											"});",
											"",
											"pm.test(\"Check subtaxa\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0].subtaxa).to.eql(\"SUBTAX1\");",
											"});",
											"",
											"pm.test(\"Check acquisitionDate\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0].acquisitionDate).to.eql(\"2018-10-25\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/germplasm-search?germplasmDbId={{germplasm_uuid}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"germplasm-search"
									],
									"query": [
										{
											"key": "germplasmDbId",
											"value": "{{germplasm_uuid}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "GET ​/{crop}​/brapi​/v1​/germplasm​/{germplasmDbId}",
					"item": [
						{
							"name": "Verify response code and body when entered valid germplasmDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"pm.test(\"Check germplasmDbId \", function () {",
											"    pm.expect(jsonData.result.germplasmDbId).to.eql(\"PKWDG942cd372\");",
											"});",
											"",
											"pm.test(\"Check defaultDisplayName \", function () {",
											"    pm.expect(jsonData.result.defaultDisplayName).to.eql(\"CML1\");",
											"});",
											"pm.test(\"Check accessionNumber \", function () {",
											"    pm.expect(jsonData.result.accessionNumber).to.eql(\"ACCNO1\");",
											"});",
											"",
											"pm.test(\"Check germplasmName \", function () {",
											"    pm.expect(jsonData.result.germplasmName).to.eql(\"CML1\");",
											"});",
											"",
											"pm.test(\"Check pedigree\", function () {",
											"    pm.expect(jsonData.result.pedigree).to.eql(\"CML1\");",
											"});",
											"pm.test(\"Check germplasmSeedSource\", function () {",
											"    pm.expect(jsonData.result.germplasmSeedSource).to.eql(\"seedSource\");",
											"});",
											"  ",
											"pm.test(\"Check synonyms\", function () {",
											" var names = [\"ACCNO1\", \"DVNM1\", \"GENUS1\", \"DVNM1\",\"PUIname1\"];",
											"   for (var i = 0; i < jsonData.result.synonyms.length; i++) {",
											"    pm.expect(jsonData.result.synonyms[i]).to.eql(names[i]);",
											"    }",
											"",
											"});    ",
											"pm.test(\"Check commonCropName\", function () {",
											"    pm.expect(jsonData.result.commonCropName).to.eql(\"commoncropnm\");",
											"});",
											"",
											"pm.test(\"Check instituteCode\", function () {",
											"    pm.expect(jsonData.result.instituteCode).to.eql(\"instituteCode001\");",
											"});",
											"pm.test(\"Check instituteName\", function () {",
											"    pm.expect(jsonData.result.instituteName).to.eql(\"instituteName001\");",
											"});",
											"",
											"",
											"pm.test(\"Check countryOfOriginCode\", function () {",
											"    pm.expect(jsonData.result.countryOfOriginCode).to.eql(\"WARDA\");",
											"});",
											"pm.test(\"Check typeOfGermplasmStorageCode\", function () {",
											"    pm.expect(jsonData.result.typeOfGermplasmStorageCode).to.eql([]);",
											"});",
											"",
											"pm.test(\"Check genus\", function () {",
											"    pm.expect(jsonData.result.genus).to.eql(\"GENUS1\");",
											"});",
											"",
											"pm.test(\"Check species\", function () {",
											"    pm.expect(jsonData.result.species).to.eql(\"SPNAM1\");",
											"});",
											"",
											"pm.test(\"Check taxonIds\", function () {",
											"    pm.expect(jsonData.result.taxonIds).to.eql([]);",
											"});",
											"pm.test(\"Check speciesAuthority\", function () {",
											"    pm.expect(jsonData.result.speciesAuthority).to.eql(\"SPAUTH1\");",
											"});",
											"",
											"pm.test(\"Check subtaxa\", function () {",
											"    pm.expect(jsonData.result.subtaxa).to.eql(\"SUBTAX1\");",
											"});",
											"",
											"pm.test(\"Check subtaxaAuthority\", function () {",
											"    pm.expect(jsonData.result.subtaxaAuthority).to.eql(\"STAUTH1\");",
											"});",
											"pm.test(\"Check donors\", function () {",
											"    pm.expect(jsonData.result.donors).to.eql([]);",
											"});",
											"pm.test(\"Check acquisitionDate\", function () {",
											"    pm.expect(jsonData.result.acquisitionDate).to.eql(\"2018-10-25\");",
											"});",
											"pm.test(\"Check breedingMethodDbId\", function () {",
											"    pm.expect(jsonData.result.breedingMethodDbId).to.eql(\"70\");",
											"});",
											"",
											"pm.test(\"Check germplasmGenus\", function () {",
											"    pm.expect(jsonData.result.germplasmGenus).to.eql(\"GENUS1\");",
											"});",
											"pm.test(\"Check germplasmSpecies\", function () {",
											"    pm.expect(jsonData.result.germplasmSpecies).to.eql(\"SPNAM1\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/germplasm/{{germplasm_uuid}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"germplasm",
										"{{germplasm_uuid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered non-existing germplasmDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"pm.test(\"Response message is no germplasm found \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Invalid germplasm identifier\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/germplasm/{{nonExistingGID}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"germplasm",
										"{{nonExistingGID}}"
									]
								},
								"description": "GET ​/{crop}​/brapi​/v1​/germplasm​/{germplasmDbId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid cropname",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Response message is no germplasm found \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Invalid crop invalidcrop for URL:/invalidcrop/brapi/v1/germplasm/PKWDG942cd372\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/invalidcrop/brapi/v1/germplasm/{{germplasm_uuid}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"invalidcrop",
										"brapi",
										"v1",
										"germplasm",
										"{{germplasm_uuid}}"
									]
								},
								"description": "GET ​/{crop}​/brapi​/v1​/germplasm​/{germplasmDbId}"
							},
							"response": []
						}
					]
				},
				{
					"name": "PUT ​/{crop}​/brapi​/v2​/germplasm​/{germplasmDbId}",
					"item": [
						{
							"name": "Verify response code and body when entered valid inputs for all fields",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"pm.test(\"Check germplasmDbId \", function () {",
											"    pm.expect(jsonData.result.germplasmDbId).to.eql(\"PKWDG942cd372\");",
											"});",
											"",
											"pm.test(\"Check defaultDisplayName \", function () {",
											"    pm.expect(jsonData.result.defaultDisplayName).to.eql(\"updatedCML1\");",
											"});",
											"pm.test(\"Check accessionNumber \", function () {",
											"    pm.expect(jsonData.result.accessionNumber).to.eql(\"updatedACCNO\");",
											"});",
											"",
											"pm.test(\"Check germplasmName \", function () {",
											"    pm.expect(jsonData.result.germplasmName).to.eql(\"updatedCML1\");",
											"});",
											"  ",
											"  ",
											"pm.test(\"Check synonym LNAME \", function () {",
											"    pm.expect(jsonData.result.synonyms[0].synonym).to.eql(\"updatedDisplayName\");",
											"});",
											"pm.test(\"Check synonym ACCNO \", function () {",
											"    pm.expect(jsonData.result.synonyms[1].synonym).to.eql(\"updatedACCNO\");",
											"});",
											"",
											"pm.test(\"Check synonym DRVNM \", function () {",
											"    pm.expect(jsonData.result.synonyms[2].synonym).to.eql(\"DVNM1\");",
											"});",
											"pm.test(\"Check synonym GENUS \", function () {",
											"    pm.expect(jsonData.result.synonyms[3].synonym).to.eql(\"updatedGenus\");",
											"});",
											"pm.test(\"Check synonym SELHISFIX \", function () {",
											"    pm.expect(jsonData.result.synonyms[4].synonym).to.eql(\"DVNM1\");",
											"});",
											"",
											"pm.test(\"Check synonym PED \", function () {",
											"    pm.expect(jsonData.result.synonyms[5].synonym).to.eql(\"updatedPed\");",
											"});    ",
											"pm.test(\"Check commonCropName\", function () {",
											"    pm.expect(jsonData.result.commonCropName).to.eql(\"updatedCommonCrop\");",
											"});",
											"pm.test(\"Check instituteCode\", function () {",
											"    pm.expect(jsonData.result.instituteCode).to.eql(\"updatedInstCode\");",
											"});",
											"pm.test(\"Check instituteName\", function () {",
											"    pm.expect(jsonData.result.instituteName).to.eql(\"updatedInstName\");",
											"});",
											"pm.test(\"Check countryOfOriginCode\", function () {",
											"    pm.expect(jsonData.result.countryOfOriginCode).to.eql(\"DBL\");",
											"});",
											"pm.test(\"Check storageTypes\", function () {",
											"    pm.expect(jsonData.result.storageTypes).to.eql([]);",
											"});",
											"",
											"pm.test(\"Check genus\", function () {",
											"    pm.expect(jsonData.result.genus).to.eql(\"updatedGenus\");",
											"});",
											"",
											"pm.test(\"Check species\", function () {",
											"    pm.expect(jsonData.result.species).to.eql(\"updatedSpecies\");",
											"});",
											"",
											"pm.test(\"Check taxonIds\", function () {",
											"    pm.expect(jsonData.result.taxonIds).to.eql([]);",
											"});",
											"pm.test(\"Check speciesAuthority\", function () {",
											"    pm.expect(jsonData.result.speciesAuthority).to.eql(\"updatedSPAUTH\");",
											"});",
											"",
											"pm.test(\"Check subtaxa\", function () {",
											"    pm.expect(jsonData.result.subtaxa).to.eql(\"updatedSubTaxa\");",
											"});",
											"",
											"pm.test(\"Check subtaxaAuthority\", function () {",
											"    pm.expect(jsonData.result.subtaxaAuthority).to.eql(\"updatedStauth\");",
											"});",
											"pm.test(\"Check donors\", function () {",
											"    pm.expect(jsonData.result.donors).to.eql([]);",
											"});",
											"pm.test(\"Check acquisitionDate\", function () {",
											"    pm.expect(jsonData.result.acquisitionDate).to.eql(\"2020-03-16\");",
											"});",
											"pm.test(\"Check breedingMethodDbId\", function () {",
											"    pm.expect(jsonData.result.breedingMethodDbId).to.eql(\"72\");",
											"});",
											"pm.test(\"Check seedSource\", function () {",
											"    pm.expect(jsonData.result.seedSource).to.eql(\"updatedSeedSource\");",
											"});",
											"pm.test(\"Check additionalInfo CROPNM_AP_text\", function () {",
											"    pm.expect(jsonData.result.additionalInfo.CROPNM_AP_text).to.eql(\"updatedCommonCrop\");",
											"});",
											"",
											"pm.test(\"Check additionalInfo SUBTAX_AP_text\", function () {",
											"    pm.expect(jsonData.result.additionalInfo.SUBTAX_AP_text).to.eql(\"updatedSubTaxa\");",
											"});",
											"",
											"pm.test(\"Check additionalInfo NOTE\", function () {",
											"    pm.expect(jsonData.result.additionalInfo.NOTE_AA_text).to.eql(\"updatedNotes\");",
											"});",
											"pm.test(\"Check additionalInfo STAUTH_AP_text\", function () {",
											"    pm.expect(jsonData.result.additionalInfo.STAUTH_AP_text).to.eql(\"updatedStauth\");",
											"});",
											"pm.test(\"Check additionalInfo ORI_COUN_AP_text\", function () {",
											"    pm.expect(jsonData.result.additionalInfo.ORI_COUN_AP_text).to.eql(\"ORI_COUN1\");",
											"});",
											"pm.test(\"Check additionalInfo SPNAM_AP_text\", function () {",
											"    pm.expect(jsonData.result.additionalInfo.SPNAM_AP_text).to.eql(\"updatedSpecies\");",
											"});",
											"pm.test(\"Check additionalInfo PLOTCODE_AP_text\", function () {",
											"    pm.expect(jsonData.result.additionalInfo.PLOTCODE_AP_text).to.eql(\"updatedSeedSource\");",
											"});",
											"pm.test(\"Check additionalInfo SPAUTH_AP_text\", function () {",
											"    pm.expect(jsonData.result.additionalInfo.SPAUTH_AP_text).to.eql(\"updatedSPAUTH\");",
											"});",
											"pm.test(\"Check additionalInfo PROGM_AA_text\", function () {",
											"    pm.expect(jsonData.result.additionalInfo.PROGM_AA_text).to.eql(\"PROGM1\");",
											"});",
											"pm.test(\"Check additionalInfo INSTCODE_AP_text\", function () {",
											"    pm.expect(jsonData.result.additionalInfo.INSTCODE_AP_text).to.eql(\"updatedInstCode\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"accessionNumber\": \"updatedACCNO\",\r\n  \"acquisitionDate\": \"2020-03-16\",\r\n  \"additionalInfo\": {\r\n    \"NOTE_AA_text\": \"updatedNotes\"\r\n  },\r\n  \"breedingMethodDbId\": \"72\",\r\n  \"collection\": \"string\",\r\n  \"commonCropName\": \"updatedCommonCrop\",\r\n  \"countryOfOriginCode\": \"DBL\",\r\n  \"defaultDisplayName\": \"updatedDisplayName\",\r\n  \"genus\": \"updatedGenus\",\r\n  \"germplasmName\": \"updatedGermplasmName\",\r\n  \"germplasmOrigin\": \"updatedOrigin\",\r\n  \"germplasmPUI\": \"updatedPUIname1\",\r\n  \"instituteCode\": \"updatedInstCode\",\r\n  \"instituteName\": \"updatedInstName\",\r\n  \"pedigree\": \"updatedPed\",\r\n  \"seedSource\": \"updatedSeedSource\",\r\n  \"species\": \"updatedSpecies\",\r\n  \"speciesAuthority\": \"updatedSPAUTH\",\r\n  \"subtaxa\": \"updatedSubTaxa\",\r\n  \"subtaxaAuthority\": \"updatedStauth\",\r\n  \"synonyms\": [\r\n    {\r\n      \"synonym\": \"updatedCML1\",\r\n      \"type\": \"CODE1\"\r\n    }\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/germplasm/{{germplasm_uuid}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"germplasm",
										"{{germplasm_uuid}}"
									]
								},
								"description": "PUT ​/{crop}​/brapi​/v2​/germplasm​/{germplasmDbId}"
							},
							"response": []
						},
						{
							"name": "Revert previous details of germplasm that was updated",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"pm.test(\"Check germplasmDbId \", function () {",
											"    pm.expect(jsonData.result.germplasmDbId).to.eql(\"PKWDG942cd372\");",
											"});",
											"",
											"pm.test(\"Check defaultDisplayName \", function () {",
											"    pm.expect(jsonData.result.defaultDisplayName).to.eql(\"CML1\");",
											"});",
											"pm.test(\"Check accessionNumber \", function () {",
											"    pm.expect(jsonData.result.accessionNumber).to.eql(\"ACCNO1\");",
											"});",
											"",
											"pm.test(\"Check germplasmName \", function () {",
											"    pm.expect(jsonData.result.germplasmName).to.eql(\"CML1\");",
											"});",
											"  ",
											"  ",
											"pm.test(\"Check synonym ACCNO \", function () {",
											"    pm.expect(jsonData.result.synonyms[0].synonym).to.eql(\"ACCNO1\");",
											"});",
											"",
											"pm.test(\"Check synonym DRVNM \", function () {",
											"    pm.expect(jsonData.result.synonyms[1].synonym).to.eql(\"DVNM1\");",
											"});",
											"pm.test(\"Check synonym GENUS \", function () {",
											"    pm.expect(jsonData.result.synonyms[2].synonym).to.eql(\"GENUS1\");",
											"});",
											"pm.test(\"Check synonym SELHISFIX \", function () {",
											"    pm.expect(jsonData.result.synonyms[3].synonym).to.eql(\"DVNM1\");",
											"});",
											"/*",
											"pm.test(\"Check synonym PED \", function () {",
											"    pm.expect(jsonData.result.synonyms.PED).to.eql(\"updatedPed\");",
											"});    ",
											"*/",
											"pm.test(\"Check commonCropName\", function () {",
											"    pm.expect(jsonData.result.commonCropName).to.eql(\"commoncropnm\");",
											"});",
											"pm.test(\"Check instituteCode\", function () {",
											"    pm.expect(jsonData.result.instituteCode).to.eql(\"instituteCode001\");",
											"});",
											"pm.test(\"Check instituteName\", function () {",
											"    pm.expect(jsonData.result.instituteName).to.eql(\"instituteName001\");",
											"});",
											"pm.test(\"Check countryOfOriginCode\", function () {",
											"    pm.expect(jsonData.result.countryOfOriginCode).to.eql(\"WARDA\");",
											"});",
											"pm.test(\"Check storageTypes\", function () {",
											"    pm.expect(jsonData.result.storageTypes).to.eql([]);",
											"});",
											"",
											"pm.test(\"Check genus\", function () {",
											"    pm.expect(jsonData.result.genus).to.eql(\"GENUS1\");",
											"});",
											"",
											"pm.test(\"Check species\", function () {",
											"    pm.expect(jsonData.result.species).to.eql(\"SPNAM1\");",
											"});",
											"",
											"pm.test(\"Check taxonIds\", function () {",
											"    pm.expect(jsonData.result.taxonIds).to.eql([]);",
											"});",
											"pm.test(\"Check speciesAuthority\", function () {",
											"    pm.expect(jsonData.result.speciesAuthority).to.eql(\"SPAUTH1\");",
											"});",
											"",
											"pm.test(\"Check subtaxa\", function () {",
											"    pm.expect(jsonData.result.subtaxa).to.eql(\"SUBTAX1\");",
											"});",
											"",
											"pm.test(\"Check subtaxaAuthority\", function () {",
											"    pm.expect(jsonData.result.subtaxaAuthority).to.eql(\"STAUTH1\");",
											"});",
											"pm.test(\"Check donors\", function () {",
											"    pm.expect(jsonData.result.donors).to.eql([]);",
											"});",
											"pm.test(\"Check acquisitionDate\", function () {",
											"    pm.expect(jsonData.result.acquisitionDate).to.eql(\"2018-10-25\");",
											"});",
											"pm.test(\"Check breedingMethodDbId\", function () {",
											"    pm.expect(jsonData.result.breedingMethodDbId).to.eql(\"70\");",
											"});",
											"pm.test(\"Check seedSource\", function () {",
											"    pm.expect(jsonData.result.seedSource).to.eql(\"seedSource\");",
											"});",
											"pm.test(\"Check additionalInfo CROPNM_AP_text\", function () {",
											"    pm.expect(jsonData.result.additionalInfo.CROPNM_AP_text).to.eql(\"commoncropnm\");",
											"});",
											"",
											"pm.test(\"Check additionalInfo SUBTAX_AP_text\", function () {",
											"    pm.expect(jsonData.result.additionalInfo.SUBTAX_AP_text).to.eql(\"SUBTAX1\");",
											"});",
											"pm.test(\"Check additionalInfo NOTE_AA_text\", function () {",
											"    pm.expect(jsonData.result.additionalInfo.NOTE_AA_text).to.eql(\"note1\");",
											"});",
											"pm.test(\"Check additionalInfo STAUTH_AP_text\", function () {",
											"    pm.expect(jsonData.result.additionalInfo.STAUTH_AP_text).to.eql(\"STAUTH1\");",
											"});",
											"pm.test(\"Check additionalInfo ORI_COUN_AP_text\", function () {",
											"    pm.expect(jsonData.result.additionalInfo.ORI_COUN_AP_text).to.eql(\"ORI_COUN1\");",
											"});",
											"pm.test(\"Check additionalInfo SPNAM_AP_text\", function () {",
											"    pm.expect(jsonData.result.additionalInfo.SPNAM_AP_text).to.eql(\"SPNAM1\");",
											"});",
											"pm.test(\"Check additionalInfo PLOTCODE_AP_text\", function () {",
											"    pm.expect(jsonData.result.additionalInfo.PLOTCODE_AP_text).to.eql(\"seedSource\");",
											"});",
											"pm.test(\"Check additionalInfo SPAUTH_AP_text\", function () {",
											"    pm.expect(jsonData.result.additionalInfo.SPAUTH_AP_text).to.eql(\"SPAUTH1\");",
											"});",
											"pm.test(\"Check additionalInfo PROGM_AA_text\", function () {",
											"    pm.expect(jsonData.result.additionalInfo.PROGM_AA_text).to.eql(\"PROGM1\");",
											"});",
											"pm.test(\"Check additionalInfo INSTCODE_AP_text\", function () {",
											"    pm.expect(jsonData.result.additionalInfo.INSTCODE_AP_text).to.eql(\"instituteCode001\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"accessionNumber\": \"ACCNO1\",\r\n  \"acquisitionDate\": \"2018-10-25\",\r\n  \"additionalInfo\": {\r\n    \"NOTE_AA_text\": \"note1\"\r\n  },\r\n  \"breedingMethodDbId\": \"70\",\r\n  \"collection\": \"string\",\r\n  \"commonCropName\": \"commoncropnm\",\r\n  \"countryOfOriginCode\": \"WARDA\",\r\n  \"defaultDisplayName\": \"CML1\",\r\n  \"genus\": \"GENUS1\",\r\n  \"germplasmName\": \"CML1\",\r\n  \"germplasmOrigin\": \"sorig001\",\r\n  \"germplasmPUI\": \"PUIname1\",\r\n  \"instituteCode\": \"instituteCode001\",\r\n  \"instituteName\": \"instituteName001\",\r\n  \"pedigree\": \"CML1\",\r\n  \"seedSource\": \"seedSource\",\r\n  \"species\": \"SPNAM1\",\r\n  \"speciesAuthority\": \"SPAUTH1\",\r\n  \"subtaxa\": \"SUBTAX1\",\r\n  \"subtaxaAuthority\": \"STAUTH1\",\r\n  \"synonyms\": [\r\n    {\r\n      \"synonym\": \"CML1\",\r\n      \"type\": \"CODE1\"\r\n    }\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/germplasm/{{germplasm_uuid}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"germplasm",
										"{{germplasm_uuid}}"
									]
								},
								"description": "PUT ​/{crop}​/brapi​/v2​/germplasm​/{germplasmDbId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered valid inputs some fields only",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"pm.test(\"Check germplasmDbId \", function () {",
											"    pm.expect(jsonData.result.germplasmDbId).to.eql(\"PKWDG942cd372\");",
											"});",
											"",
											"pm.test(\"Check defaultDisplayName \", function () {",
											"    pm.expect(jsonData.result.defaultDisplayName).to.eql(\"CML1\");",
											"});",
											"pm.test(\"Check accessionNumber \", function () {",
											"    pm.expect(jsonData.result.accessionNumber).to.eql(\"updatedACCNO\");",
											"});",
											"",
											"pm.test(\"Check germplasmName \", function () {",
											"    pm.expect(jsonData.result.germplasmName).to.eql(\"CML1\");",
											"});",
											"  ",
											"  ",
											"pm.test(\"Check synonym ACCNO \", function () {",
											"    pm.expect(jsonData.result.synonyms[0].synonym).to.eql(\"updatedACCNO\");",
											"});",
											"",
											"pm.test(\"Check synonym DRVNM \", function () {",
											"    pm.expect(jsonData.result.synonyms[1].synonym).to.eql(\"DVNM1\");",
											"});",
											"/**pm.test(\"Check synonym LNAME \", function () {",
											"    pm.expect(jsonData.result.synonyms.LNAME).to.eql(\"updatedDisplayName\");",
											"});",
											" */",
											"pm.test(\"Check synonym GENUS \", function () {",
											"    pm.expect(jsonData.result.synonyms[2].synonym).to.eql(\"GENUS1\");",
											"});",
											"pm.test(\"Check synonym SELHISFIX \", function () {",
											"    pm.expect(jsonData.result.synonyms[3].synonym).to.eql(\"DVNM1\");",
											"});",
											"/*",
											"pm.test(\"Check synonym PED \", function () {",
											"    pm.expect(jsonData.result.synonyms.PED).to.eql(\"updatedPed\");",
											"});    ",
											"*/",
											"pm.test(\"Check commonCropName\", function () {",
											"    pm.expect(jsonData.result.commonCropName).to.eql(\"commoncropnm\");",
											"});",
											"pm.test(\"Check instituteCode\", function () {",
											"    pm.expect(jsonData.result.instituteCode).to.eql(\"instituteCode001\");",
											"});",
											"pm.test(\"Check instituteName\", function () {",
											"    pm.expect(jsonData.result.instituteName).to.eql(\"instituteName001\");",
											"});",
											"pm.test(\"Check countryOfOriginCode\", function () {",
											"    pm.expect(jsonData.result.countryOfOriginCode).to.eql(\"WARDA\");",
											"});",
											"pm.test(\"Check storageTypes\", function () {",
											"    pm.expect(jsonData.result.storageTypes).to.eql([]);",
											"});",
											"",
											"pm.test(\"Check genus\", function () {",
											"    pm.expect(jsonData.result.genus).to.eql(\"GENUS1\");",
											"});",
											"",
											"pm.test(\"Check species\", function () {",
											"    pm.expect(jsonData.result.species).to.eql(\"SPNAM1\");",
											"});",
											"",
											"pm.test(\"Check taxonIds\", function () {",
											"    pm.expect(jsonData.result.taxonIds).to.eql([]);",
											"});",
											"pm.test(\"Check speciesAuthority\", function () {",
											"    pm.expect(jsonData.result.speciesAuthority).to.eql(\"SPAUTH1\");",
											"});",
											"",
											"pm.test(\"Check subtaxa\", function () {",
											"    pm.expect(jsonData.result.subtaxa).to.eql(\"SUBTAX1\");",
											"});",
											"",
											"pm.test(\"Check subtaxaAuthority\", function () {",
											"    pm.expect(jsonData.result.subtaxaAuthority).to.eql(\"STAUTH1\");",
											"});",
											"pm.test(\"Check donors\", function () {",
											"    pm.expect(jsonData.result.donors).to.eql([]);",
											"});",
											"pm.test(\"Check acquisitionDate\", function () {",
											"    pm.expect(jsonData.result.acquisitionDate).to.eql(\"2018-10-25\");",
											"});",
											"pm.test(\"Check breedingMethodDbId\", function () {",
											"    pm.expect(jsonData.result.breedingMethodDbId).to.eql(\"70\");",
											"});",
											"pm.test(\"Check seedSource\", function () {",
											"    pm.expect(jsonData.result.seedSource).to.eql(\"seedSource\");",
											"});",
											"",
											"pm.test(\"Check additionalInfo CROPNM_AP_text\", function () {",
											"    pm.expect(jsonData.result.additionalInfo.CROPNM_AP_text).to.eql(\"commoncropnm\");",
											"});",
											"",
											"pm.test(\"Check additionalInfo SUBTAX_AP_text\", function () {",
											"    pm.expect(jsonData.result.additionalInfo.SUBTAX_AP_text).to.eql(\"SUBTAX1\");",
											"});",
											"pm.test(\"Check additionalInfo NOTE_AA_text\", function () {",
											"    pm.expect(jsonData.result.additionalInfo.NOTE_AA_text).to.eql(\"note1\");",
											"});",
											"pm.test(\"Check additionalInfo STAUTH_AP_text\", function () {",
											"    pm.expect(jsonData.result.additionalInfo.STAUTH_AP_text).to.eql(\"STAUTH1\");",
											"});",
											"pm.test(\"Check additionalInfo ORI_COUN_AP_text\", function () {",
											"    pm.expect(jsonData.result.additionalInfo.ORI_COUN_AP_text).to.eql(\"ORI_COUN1\");",
											"});",
											"pm.test(\"Check additionalInfo SPNAM_AP_text\", function () {",
											"    pm.expect(jsonData.result.additionalInfo.SPNAM_AP_text).to.eql(\"SPNAM1\");",
											"});",
											"pm.test(\"Check additionalInfo PLOTCODE_AP_text\", function () {",
											"    pm.expect(jsonData.result.additionalInfo.PLOTCODE_AP_text).to.eql(\"seedSource\");",
											"});",
											"pm.test(\"Check additionalInfo SPAUTH_AP_text\", function () {",
											"    pm.expect(jsonData.result.additionalInfo.SPAUTH_AP_text).to.eql(\"SPAUTH1\");",
											"});",
											"pm.test(\"Check additionalInfo PROGM_AA_text\", function () {",
											"    pm.expect(jsonData.result.additionalInfo.PROGM_AA_text).to.eql(\"PROGM1\");",
											"});",
											"pm.test(\"Check additionalInfo INSTCODE_AP_text\", function () {",
											"    pm.expect(jsonData.result.additionalInfo.INSTCODE_AP_text).to.eql(\"instituteCode001\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"accessionNumber\": \"updatedACCNO\"\r\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/germplasm/{{germplasm_uuid}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"germplasm",
										"{{germplasm_uuid}}"
									]
								},
								"description": "PUT ​/{crop}​/brapi​/v2​/germplasm​/{germplasmDbId}"
							},
							"response": []
						},
						{
							"name": "Revert previous details of germplasm that was updated Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"pm.test(\"Check germplasmDbId \", function () {",
											"    pm.expect(jsonData.result.germplasmDbId).to.eql(\"PKWDG942cd372\");",
											"});",
											"",
											"pm.test(\"Check defaultDisplayName \", function () {",
											"    pm.expect(jsonData.result.defaultDisplayName).to.eql(\"CML1\");",
											"});",
											"pm.test(\"Check accessionNumber \", function () {",
											"    pm.expect(jsonData.result.accessionNumber).to.eql(\"ACCNO1\");",
											"});",
											"",
											"pm.test(\"Check germplasmName \", function () {",
											"    pm.expect(jsonData.result.germplasmName).to.eql(\"CML1\");",
											"});",
											"  ",
											"  ",
											"pm.test(\"Check synonym ACCNO \", function () {",
											"    pm.expect(jsonData.result.synonyms[0].synonym).to.eql(\"ACCNO1\");",
											"});",
											"",
											"pm.test(\"Check synonym DRVNM \", function () {",
											"    pm.expect(jsonData.result.synonyms[1].synonym).to.eql(\"DVNM1\");",
											"});",
											"pm.test(\"Check synonym GENUS \", function () {",
											"    pm.expect(jsonData.result.synonyms[2].synonym).to.eql(\"GENUS1\");",
											"});",
											"pm.test(\"Check synonym SELHISFIX \", function () {",
											"    pm.expect(jsonData.result.synonyms[3].synonym).to.eql(\"DVNM1\");",
											"});",
											"/*",
											"pm.test(\"Check synonym PED \", function () {",
											"    pm.expect(jsonData.result.synonyms.PED).to.eql(\"updatedPed\");",
											"});    ",
											"*/",
											"pm.test(\"Check commonCropName\", function () {",
											"    pm.expect(jsonData.result.commonCropName).to.eql(\"commoncropnm\");",
											"});",
											"pm.test(\"Check instituteCode\", function () {",
											"    pm.expect(jsonData.result.instituteCode).to.eql(\"instituteCode001\");",
											"});",
											"pm.test(\"Check instituteName\", function () {",
											"    pm.expect(jsonData.result.instituteName).to.eql(\"instituteName001\");",
											"});",
											"pm.test(\"Check countryOfOriginCode\", function () {",
											"    pm.expect(jsonData.result.countryOfOriginCode).to.eql(\"WARDA\");",
											"});",
											"pm.test(\"Check storageTypes\", function () {",
											"    pm.expect(jsonData.result.storageTypes).to.eql([]);",
											"});",
											"",
											"pm.test(\"Check genus\", function () {",
											"    pm.expect(jsonData.result.genus).to.eql(\"GENUS1\");",
											"});",
											"",
											"pm.test(\"Check species\", function () {",
											"    pm.expect(jsonData.result.species).to.eql(\"SPNAM1\");",
											"});",
											"",
											"pm.test(\"Check taxonIds\", function () {",
											"    pm.expect(jsonData.result.taxonIds).to.eql([]);",
											"});",
											"pm.test(\"Check speciesAuthority\", function () {",
											"    pm.expect(jsonData.result.speciesAuthority).to.eql(\"SPAUTH1\");",
											"});",
											"",
											"pm.test(\"Check subtaxa\", function () {",
											"    pm.expect(jsonData.result.subtaxa).to.eql(\"SUBTAX1\");",
											"});",
											"",
											"pm.test(\"Check subtaxaAuthority\", function () {",
											"    pm.expect(jsonData.result.subtaxaAuthority).to.eql(\"STAUTH1\");",
											"});",
											"pm.test(\"Check donors\", function () {",
											"    pm.expect(jsonData.result.donors).to.eql([]);",
											"});",
											"pm.test(\"Check acquisitionDate\", function () {",
											"    pm.expect(jsonData.result.acquisitionDate).to.eql(\"2018-10-25\");",
											"});",
											"pm.test(\"Check breedingMethodDbId\", function () {",
											"    pm.expect(jsonData.result.breedingMethodDbId).to.eql(\"70\");",
											"});",
											"pm.test(\"Check seedSource\", function () {",
											"    pm.expect(jsonData.result.seedSource).to.eql(\"seedSource\");",
											"});",
											"pm.test(\"Check additionalInfo CROPNM_AP_text\", function () {",
											"    pm.expect(jsonData.result.additionalInfo.CROPNM_AP_text).to.eql(\"commoncropnm\");",
											"});",
											"",
											"pm.test(\"Check additionalInfo SUBTAX_AP_text\", function () {",
											"    pm.expect(jsonData.result.additionalInfo.SUBTAX_AP_text).to.eql(\"SUBTAX1\");",
											"});",
											"pm.test(\"Check additionalInfo NOTE_AA_text\", function () {",
											"    pm.expect(jsonData.result.additionalInfo.NOTE_AA_text).to.eql(\"note1\");",
											"});",
											"pm.test(\"Check additionalInfo STAUTH_AP_text\", function () {",
											"    pm.expect(jsonData.result.additionalInfo.STAUTH_AP_text).to.eql(\"STAUTH1\");",
											"});",
											"pm.test(\"Check additionalInfo ORI_COUN_AP_text\", function () {",
											"    pm.expect(jsonData.result.additionalInfo.ORI_COUN_AP_text).to.eql(\"ORI_COUN1\");",
											"});",
											"pm.test(\"Check additionalInfo SPNAM_AP_text\", function () {",
											"    pm.expect(jsonData.result.additionalInfo.SPNAM_AP_text).to.eql(\"SPNAM1\");",
											"});",
											"pm.test(\"Check additionalInfo PLOTCODE_AP_text\", function () {",
											"    pm.expect(jsonData.result.additionalInfo.PLOTCODE_AP_text).to.eql(\"seedSource\");",
											"});",
											"pm.test(\"Check additionalInfo SPAUTH_AP_text\", function () {",
											"    pm.expect(jsonData.result.additionalInfo.SPAUTH_AP_text).to.eql(\"SPAUTH1\");",
											"});",
											"pm.test(\"Check additionalInfo PROGM_AA_text\", function () {",
											"    pm.expect(jsonData.result.additionalInfo.PROGM_AA_text).to.eql(\"PROGM1\");",
											"});",
											"pm.test(\"Check additionalInfo INSTCODE_AP_text\", function () {",
											"    pm.expect(jsonData.result.additionalInfo.INSTCODE_AP_text).to.eql(\"instituteCode001\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"accessionNumber\": \"ACCNO1\",\r\n  \"acquisitionDate\": \"2018-10-25\",\r\n  \"additionalInfo\": {\r\n    \"NOTE_AA_text\": \"note1\"\r\n  },\r\n  \"breedingMethodDbId\": \"70\",\r\n  \"collection\": \"string\",\r\n  \"commonCropName\": \"commoncropnm\",\r\n  \"countryOfOriginCode\": \"WARDA\",\r\n  \"defaultDisplayName\": \"CML1\",\r\n  \"genus\": \"GENUS1\",\r\n  \"germplasmName\": \"CML1\",\r\n  \"germplasmOrigin\": \"sorig001\",\r\n  \"germplasmPUI\": \"PKWDG942cd372\",\r\n  \"instituteCode\": \"instituteCode001\",\r\n  \"instituteName\": \"instituteName001\",\r\n  \"pedigree\": \"CML1\",\r\n  \"seedSource\": \"seedSource\",\r\n  \"species\": \"SPNAM1\",\r\n  \"speciesAuthority\": \"SPAUTH1\",\r\n  \"subtaxa\": \"SUBTAX1\",\r\n  \"subtaxaAuthority\": \"STAUTH1\",\r\n  \"synonyms\": [\r\n    {\r\n      \"synonym\": \"CML1\",\r\n      \"type\": \"CODE1\"\r\n    }\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/germplasm/{{germplasm_uuid}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"germplasm",
										"{{germplasm_uuid}}"
									]
								},
								"description": "PUT ​/{crop}​/brapi​/v2​/germplasm​/{germplasmDbId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid crop",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Response message is no germplasm found \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Invalid crop invalid for URL:/invalid/brapi/v2/germplasm/PKWDG942cd372\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"accessionNumber\": \"ACCNO1\",\r\n  \"acquisitionDate\": \"2018-10-25\",\r\n  \"additionalInfo\": {\r\n    \"NOTE\": \"note1\"\r\n  },\r\n  \"breedingMethodDbId\": \"70\",\r\n  \"collection\": \"string\",\r\n  \"commonCropName\": \"commoncropnm\",\r\n  \"countryOfOriginCode\": \"WARDA\",\r\n  \"defaultDisplayName\": \"CML1\",\r\n  \"genus\": \"GENUS1\",\r\n  \"germplasmName\": \"CML1\",\r\n  \"germplasmOrigin\": \"sorig001\",\r\n  \"germplasmPUI\": \"PKWDG942cd372\",\r\n  \"instituteCode\": \"instituteCode001\",\r\n  \"instituteName\": \"instituteName001\",\r\n  \"pedigree\": \"CML1\",\r\n  \"seedSource\": \"seedSource\",\r\n  \"species\": \"SPNAM1\",\r\n  \"speciesAuthority\": \"SPAUTH1\",\r\n  \"subtaxa\": \"SUBTAX1\",\r\n  \"subtaxaAuthority\": \"STAUTH1\",\r\n  \"synonyms\": [\r\n    {\r\n      \"synonym\": \"CML1\",\r\n      \"type\": \"CODE1\"\r\n    }\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/invalid/brapi/v2/germplasm/{{germplasm_uuid}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"invalid",
										"brapi",
										"v2",
										"germplasm",
										"{{germplasm_uuid}}"
									]
								},
								"description": "PUT ​/{crop}​/brapi​/v2​/germplasm​/{germplasmDbId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered non-existing GUID input on germplasmDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"pm.test(\"Response message is no germplasm found \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Invalid germplasm identifier\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"accessionNumber\": \"updatedACCNO\",\r\n  \"acquisitionDate\": \"2020-03-16\",\r\n  \"additionalInfo\": {\r\n    \"NOTE\": \"updatedNotes\"\r\n  },\r\n  \"breedingMethodDbId\": \"72\",\r\n  \"collection\": \"string\",\r\n  \"commonCropName\": \"updatedCommonCrop\",\r\n  \"countryOfOriginCode\": \"DBL\",\r\n  \"defaultDisplayName\": \"updatedDisplayName\",\r\n  \"genus\": \"updatedGenus\",\r\n  \"germplasmName\": \"updatedGermplasmName\",\r\n  \"germplasmOrigin\": \"updatedOrigin\",\r\n  \"germplasmPUI\": \"updatedPKWDG942cd372\",\r\n  \"instituteCode\": \"updatedInstCode\",\r\n  \"instituteName\": \"updatedInstName\",\r\n  \"pedigree\": \"updatedPed\",\r\n  \"seedSource\": \"updatedSeedSource\",\r\n  \"species\": \"updatedSpecies\",\r\n  \"speciesAuthority\": \"updatedSPAUTH\",\r\n  \"subtaxa\": \"updatedSubTaxa\",\r\n  \"subtaxaAuthority\": \"updatedStauth\",\r\n  \"synonyms\": [\r\n    {\r\n      \"synonym\": \"updatedCML1\",\r\n      \"type\": \"CODE1\"\r\n    }\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/germplasm/nonExisting",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"germplasm",
										"nonExisting"
									]
								},
								"description": "PUT ​/{crop}​/brapi​/v2​/germplasm​/{germplasmDbId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered characters that exceed 255 on ACCNO",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Response message is no germplasm found \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Name in accessionNumber must not exceed length of 255.\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"accessionNumber\": \"LoremsipsumsdolorssitsametssconsectetuersadipiscingselitssAeneanscommodosligulasegetsdolorssAeneansmassassCumssociissnatoquespenatibussetsmagnissdissparturientsmontesssnascetursridiculussmusssDonecsquamsfelisssultriciessnecsspellentesqueseusspretiumsquisss\"\r\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/germplasm/{{germplasm_uuid}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"germplasm",
										"{{germplasm_uuid}}"
									]
								},
								"description": "PUT ​/{crop}​/brapi​/v2​/germplasm​/{germplasmDbId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered characters that exceed 255 on an attribute in additionalInfo",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Response message is no germplasm found \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Attribute in additionalInfo must not exceed length of 255.\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n      \"additionalInfo\": {\r\n    \"NOTES\": \"LoremsipsumsdolorssitsametssconsectetuersadipiscingselitssAeneanscommodosligulasegetsdolorssAeneansmassassCumssociissnatoquespenatibussetsmagnissdissparturientsmontesssnascetursridiculussmusssDonecsquamsfelisssultriciessnecsspellentesqueseusspretiumsquisss\"\r\n  }\r\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/germplasm/{{germplasm_uuid}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"germplasm",
										"{{germplasm_uuid}}"
									]
								},
								"description": "PUT ​/{crop}​/brapi​/v2​/germplasm​/{germplasmDbId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered characters that exceed 255 on commonCropName",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Response message is no germplasm found \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Attribute in commonCropName must not exceed length of 255.\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n      \"commonCropName\": \"LoremsipsumsdolorssitsametssconsectetuersadipiscingselitssAeneanscommodosligulasegetsdolorssAeneansmassassCumssociissnatoquespenatibussetsmagnissdissparturientsmontesssnascetursridiculussmusssDonecsquamsfelisssultriciessnecsspellentesqueseusspretiumsquisss\"\r\n\r\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/germplasm/{{germplasm_uuid}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"germplasm",
										"{{germplasm_uuid}}"
									]
								},
								"description": "PUT ​/{crop}​/brapi​/v2​/germplasm​/{germplasmDbId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered characters that exceed 255 on defaultDisplayName",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Response message is no germplasm found \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Name in defaultDisplayName must not exceed length of 255.\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n      \"defaultDisplayName\": \"LoremsipsumsdolorssitsametssconsectetuersadipiscingselitssAeneanscommodosligulasegetsdolorssAeneansmassassCumssociissnatoquespenatibussetsmagnissdissparturientsmontesssnascetursridiculussmusssDonecsquamsfelisssultriciessnecsspellentesqueseusspretiumsquisss\"\r\n\r\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/germplasm/{{germplasm_uuid}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"germplasm",
										"{{germplasm_uuid}}"
									]
								},
								"description": "PUT ​/{crop}​/brapi​/v2​/germplasm​/{germplasmDbId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered characters that exceed 255 on genus",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Response message is no germplasm found \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Name in genus must not exceed length of 255.\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n      \"genus\": \"LoremsipsumsdolorssitsametssconsectetuersadipiscingselitssAeneanscommodosligulasegetsdolorssAeneansmassassCumssociissnatoquespenatibussetsmagnissdissparturientsmontesssnascetursridiculussmusssDonecsquamsfelisssultriciessnecsspellentesqueseusspretiumsquisss\"\r\n\r\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/germplasm/{{germplasm_uuid}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"germplasm",
										"{{germplasm_uuid}}"
									]
								},
								"description": "PUT ​/{crop}​/brapi​/v2​/germplasm​/{germplasmDbId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered characters that exceed 255 on germplasmOrigin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Response message is no germplasm found \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Attribute in germplasmOrigin must not exceed length of 255.\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n      \"germplasmOrigin\": \"LoremsipsumsdolorssitsametssconsectetuersadipiscingselitssAeneanscommodosligulasegetsdolorssAeneansmassassCumssociissnatoquespenatibussetsmagnissdissparturientsmontesssnascetursridiculussmusssDonecsquamsfelisssultriciessnecsspellentesqueseusspretiumsquisss\"\r\n\r\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/germplasm/{{germplasm_uuid}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"germplasm",
										"{{germplasm_uuid}}"
									]
								},
								"description": "PUT ​/{crop}​/brapi​/v2​/germplasm​/{germplasmDbId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered characters that exceed 255 characters on instituteCode",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Response message is no germplasm found \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Attribute in instituteCode must not exceed length of 255.\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n      \"instituteCode\": \"LoremsipsumsdolorssitsametssconsectetuersadipiscingselitssAeneanscommodosligulasegetsdolorssAeneansmassassCumssociissnatoquespenatibussetsmagnissdissparturientsmontesssnascetursridiculussmusssDonecsquamsfelisssultriciessnecsspellentesqueseusspretiumsquisss\"\r\n\r\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/germplasm/{{germplasm_uuid}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"germplasm",
										"{{germplasm_uuid}}"
									]
								},
								"description": "PUT ​/{crop}​/brapi​/v2​/germplasm​/{germplasmDbId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered characters that exceed 255 on instituteName",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Response message is no germplasm found \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Attribute in instituteName must not exceed length of 255.\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n      \"instituteName\": \"LoremsipsumsdolorssitsametssconsectetuersadipiscingselitssAeneanscommodosligulasegetsdolorssAeneansmassassCumssociissnatoquespenatibussetsmagnissdissparturientsmontesssnascetursridiculussmusssDonecsquamsfelisssultriciessnecsspellentesqueseusspretiumsquisss\"\r\n\r\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/germplasm/{{germplasm_uuid}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"germplasm",
										"{{germplasm_uuid}}"
									]
								},
								"description": "PUT ​/{crop}​/brapi​/v2​/germplasm​/{germplasmDbId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered characters that exceed 255 on pedigree",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Response message is no germplasm found \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Name in pedigree must not exceed length of 255.\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n      \"pedigree\": \"LoremsipsumsdolorssitsametssconsectetuersadipiscingselitssAeneanscommodosligulasegetsdolorssAeneansmassassCumssociissnatoquespenatibussetsmagnissdissparturientsmontesssnascetursridiculussmusssDonecsquamsfelisssultriciessnecsspellentesqueseusspretiumsquisss\"\r\n\r\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/germplasm/{{germplasm_uuid}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"germplasm",
										"{{germplasm_uuid}}"
									]
								},
								"description": "PUT ​/{crop}​/brapi​/v2​/germplasm​/{germplasmDbId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered characters that exceed 255 on in seedSource",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Response message is no germplasm found \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Attribute in seedSource must not exceed length of 255.\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n      \"seedSource\": \"LoremsipsumsdolorssitsametssconsectetuersadipiscingselitssAeneanscommodosligulasegetsdolorssAeneansmassassCumssociissnatoquespenatibussetsmagnissdissparturientsmontesssnascetursridiculussmusssDonecsquamsfelisssultriciessnecsspellentesqueseusspretiumsquisss\"\r\n\r\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/germplasm/{{germplasm_uuid}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"germplasm",
										"{{germplasm_uuid}}"
									]
								},
								"description": "PUT ​/{crop}​/brapi​/v2​/germplasm​/{germplasmDbId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered characters that exceed 255 on species",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Response message is no germplasm found \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Attribute in species must not exceed length of 255.\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n      \"species\": \"LoremsipsumsdolorssitsametssconsectetuersadipiscingselitssAeneanscommodosligulasegetsdolorssAeneansmassassCumssociissnatoquespenatibussetsmagnissdissparturientsmontesssnascetursridiculussmusssDonecsquamsfelisssultriciessnecsspellentesqueseusspretiumsquisss\"\r\n\r\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/germplasm/{{germplasm_uuid}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"germplasm",
										"{{germplasm_uuid}}"
									]
								},
								"description": "PUT ​/{crop}​/brapi​/v2​/germplasm​/{germplasmDbId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered characters that exceed 255 on speciesAuthority",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Response message is no germplasm found \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Attribute in speciesAuthority must not exceed length of 255.\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n      \"speciesAuthority\": \"LoremsipsumsdolorssitsametssconsectetuersadipiscingselitssAeneanscommodosligulasegetsdolorssAeneansmassassCumssociissnatoquespenatibussetsmagnissdissparturientsmontesssnascetursridiculussmusssDonecsquamsfelisssultriciessnecsspellentesqueseusspretiumsquisss\"\r\n\r\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/germplasm/{{germplasm_uuid}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"germplasm",
										"{{germplasm_uuid}}"
									]
								},
								"description": "PUT ​/{crop}​/brapi​/v2​/germplasm​/{germplasmDbId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered characters that exceed 255 on subtaxa",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Response message is no germplasm found \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Attribute in subtaxa must not exceed length of 255.\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n      \"subtaxa\": \"LoremsipsumsdolorssitsametssconsectetuersadipiscingselitssAeneanscommodosligulasegetsdolorssAeneansmassassCumssociissnatoquespenatibussetsmagnissdissparturientsmontesssnascetursridiculussmusssDonecsquamsfelisssultriciessnecsspellentesqueseusspretiumsquisss\"\r\n\r\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/germplasm/{{germplasm_uuid}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"germplasm",
										"{{germplasm_uuid}}"
									]
								},
								"description": "PUT ​/{crop}​/brapi​/v2​/germplasm​/{germplasmDbId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered characters that exceed 255 on subtaxaAuthority",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Response message is no germplasm found \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Attribute in subtaxaAuthority must not exceed length of 255.\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n      \"subtaxaAuthority\": \"LoremsipsumsdolorssitsametssconsectetuersadipiscingselitssAeneanscommodosligulasegetsdolorssAeneansmassassCumssociissnatoquespenatibussetsmagnissdissparturientsmontesssnascetursridiculussmusssDonecsquamsfelisssultriciessnecsspellentesqueseusspretiumsquisss\"\r\n\r\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/germplasm/{{germplasm_uuid}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"germplasm",
										"{{germplasm_uuid}}"
									]
								},
								"description": "PUT ​/{crop}​/brapi​/v2​/germplasm​/{germplasmDbId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered characters that exceed 255 on a name in synonyms",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Response message is no germplasm found \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Name in synonyms must not exceed length of 255.\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n      \"synonyms\": [ \r\n\r\n        {\r\n            \"synonym\": \"LoremsipsumsdolorssitsametssconsectetuersadipiscingselitssAeneanscommodosligulasegetsdolorssAeneansmassassCumssociissnatoquespenatibussetsmagnissdissparturientsmontesssnascetursridiculussmusssDonecsquamsfelisssultriciessnecsspellentesqueseusspretiumsquisss\",\r\n            \"type\": \"CODE1\"\r\n\r\n        }          \r\n      ]\r\n\r\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/germplasm/{{germplasm_uuid}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"germplasm",
										"{{germplasm_uuid}}"
									]
								},
								"description": "PUT ​/{crop}​/brapi​/v2​/germplasm​/{germplasmDbId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid acquisitionDate",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Response message is no germplasm found \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Acquisition date must follow yyyy-MM-dd format.\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"acquisitionDate\": \"20200316\"\r\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/germplasm/{{germplasm_uuid}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"germplasm",
										"{{germplasm_uuid}}"
									]
								},
								"description": "PUT ​/{crop}​/brapi​/v2​/germplasm​/{germplasmDbId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid nameType on synonyms",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n      \"synonyms\": [ \r\n\r\n        {\r\n            \"synonym\": \"updatedCMLx\",\r\n            \"type\": \"invalid\"\r\n\r\n        }          \r\n      ]\r\n\r\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/germplasm/{{germplasm_uuid}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"germplasm",
										"{{germplasm_uuid}}"
									]
								},
								"description": "PUT ​/{crop}​/brapi​/v2​/germplasm​/{germplasmDbId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid attribute name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n      \"additionalInfo\": {\r\n         \"invalid\": \"updatedNotes\"\r\n      }\r\n\r\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/germplasm/{{germplasm_uuid}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"germplasm",
										"{{germplasm_uuid}}"
									]
								},
								"description": "PUT ​/{crop}​/brapi​/v2​/germplasm​/{germplasmDbId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered non-existing breedingMethodDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Response message is no germplasm found \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Breeding method Id does not exist.\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n     \"breedingMethodDbId\": \"99999\"\r\n\r\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/germplasm/{{germplasm_uuid}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"germplasm",
										"{{germplasm_uuid}}"
									]
								},
								"description": "PUT ​/{crop}​/brapi​/v2​/germplasm​/{germplasmDbId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered non-existing countryOfOriginCode",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Response message is no germplasm found \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Country of Origin does not exist.\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"countryOfOriginCode\": \"XXX\"\r\n\r\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/germplasm/{{germplasm_uuid}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"germplasm",
										"{{germplasm_uuid}}"
									]
								},
								"description": "PUT ​/{crop}​/brapi​/v2​/germplasm​/{germplasmDbId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered null on defaultDisplayName",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \r\n  \"defaultDisplayName\": \"\"\r\n\r\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/germplasm/{{germplasm_uuid}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"germplasm",
										"{{germplasm_uuid}}"
									]
								},
								"description": "PUT ​/{crop}​/brapi​/v2​/germplasm​/{germplasmDbId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered breedingMethodId type is not the same with existing (DER/MAN)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Response message is no germplasm found \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Cannot change method for germplasm PKWDG942cd372. The breeding method should be the same type as Accession into genebank (MAN).\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n     \"breedingMethodDbId\": \"211\"\r\n\r\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/germplasm/{{germplasm_uuid}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"germplasm",
										"{{germplasm_uuid}}"
									]
								},
								"description": "PUT ​/{crop}​/brapi​/v2​/germplasm​/{germplasmDbId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered breedingMethodId type is not the same with existing (GEN)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Response message is no germplasm found \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Cannot change method for germplasm PKWDGccd05c2c. The breeding method should be the same type as Single cross (GEN).\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n     \"breedingMethodDbId\": \"70\"\r\n\r\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/germplasm/PKWDGccd05c2c",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"germplasm",
										"PKWDGccd05c2c"
									]
								},
								"description": "PUT ​/{crop}​/brapi​/v2​/germplasm​/{germplasmDbId}"
							},
							"response": []
						},
						{
							"name": "Verify validation if entered mprgn of generative breedingMethodId is not the same with existing",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Response message is no germplasm found \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Cannot update germplasm PKWDGccd05c2c. New breeding method has to have the same method.mprgn as the old one.\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n     \"breedingMethodDbId\": \"1\"\r\n\r\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/germplasm/PKWDGccd05c2c",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"germplasm",
										"PKWDGccd05c2c"
									]
								},
								"description": "PUT ​/{crop}​/brapi​/v2​/germplasm​/{germplasmDbId}"
							},
							"response": []
						}
					]
				},
				{
					"name": "POST ​/{crop}​/brapi​/v2​/germplasm",
					"item": [
						{
							"name": "Verify response code and body entered complete set of inputs",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"//Check status",
											"pm.test(\"Check messageType\", function () {",
											"    pm.expect(jsonData.metadata.status[0].messageType).to.eql(\"INFO\");",
											"});",
											"pm.test(\"Check message\", function () {",
											"    pm.expect(jsonData.metadata.status[0].message).to.eql(\"1 out of 1 germplasm created successfully.\");",
											"});",
											"",
											"//Check datafiles",
											"pm.test(\"Check datafiles\", function () {",
											"    pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"",
											"//Check results",
											"var index = 0",
											"",
											"pm.test(\"Check if germplasmDbId returned is not null\", function () {",
											"    //Note: germplasmDbId is system generated so the value varies every execution",
											"    pm.expect(jsonData.result.data[index].germplasmDbId).to.not.be.null;",
											"});",
											"",
											"pm.test(\"Check if defaultDisplayName returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].defaultDisplayName).to.eql(\"MyGermplasm0\");",
											"});",
											"pm.test(\"Check if accessionNumber returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].accessionNumber).to.eql(\"ACCNO0\");",
											"});",
											"pm.test(\"Check if germplasmName returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].germplasmName).to.eql(\"MyGermplasm0\");",
											"});",
											"pm.test(\"Check if pedigree returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].pedigree).to.eql(\"Unknown/Unknown\");",
											"});",
											"pm.test(\"Check if synonyms returned are correct\", function () {",
											"   var names = [\"DRVNM0\", \"PUIname\",\"ACCNO0\", \"AB0/CD0\", \"GENUS0\"];",
											"   for (var i = 0; i < jsonData.result.data[index].synonyms.length; i++) {",
											"    pm.expect(jsonData.result.data[index].synonyms[i].synonym).to.eql(names[i]);",
											"    }",
											"});",
											"pm.test(\"Check if synonyms types returned are correct\", function () {",
											"   var types = [\"DRVNM\", \"PUI\",\"ACCNO\", \"PED\", \"GENUS\"];",
											"   for (var i = 0; i < jsonData.result.data[index].synonyms.length; i++) {",
											"    pm.expect(jsonData.result.data[index].synonyms[i].type).to.eql(types[i]);",
											"    }",
											"});",
											"",
											"pm.test(\"Check if commonCropName returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].commonCropName).to.eql(\"testCommonCrop\");",
											"});",
											"pm.test(\"Check if instituteCode returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].instituteCode).to.eql(\"INSTCODE0\");",
											"});",
											"pm.test(\"Check if instituteName returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].instituteName).to.eql(\"INSTNAME0\");",
											"});",
											"",
											"pm.test(\"Check if countryOfOriginCode returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].countryOfOriginCode).to.eql(\"UGA\");",
											"});",
											"pm.test(\"Check if storageTypes returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].storageTypes).to.eql([]);",
											"});",
											"pm.test(\"Check if genus returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].genus).to.eql(\"GENUS0\");",
											"});",
											"pm.test(\"Check if species returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].species).to.eql(\"SPECIES0\");",
											"});",
											"pm.test(\"Check if taxonIds returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].taxonIds).to.eql([]);",
											"});",
											"pm.test(\"Check if speciesAuthority returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].speciesAuthority).to.eql(\"SPAUTH0\");",
											"});",
											"pm.test(\"Check if subtaxa returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].subtaxa).to.eql(\"SUBTAXA0\");",
											"});",
											"pm.test(\"Check if subtaxaAuthority returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].subtaxaAuthority).to.eql(\"STAUTH0\");",
											"});",
											"pm.test(\"Check if returned donors is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].donors).to.eql([]);",
											"});",
											"pm.test(\"Check if returned acquisitionDate is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].acquisitionDate).to.eql(\"2021-03-01\");",
											"});",
											"pm.test(\"Check if returned breedingMethodDbId is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].breedingMethodDbId).to.eql(\"1\");",
											"});",
											"pm.test(\"Check if returned seedSource is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].seedSource).to.eql(\"Randomized Trial:TEST:0:0\");",
											"});",
											"",
											"pm.test(\"Check if returned additionalInfo CROPNM_AP_text is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].additionalInfo.CROPNM_AP_text).to.eql(\"testCommonCrop\");",
											"});",
											"",
											"pm.test(\"Check if returned additionalInfo SUBTAX_AP_text is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].additionalInfo.SUBTAX_AP_text).to.eql(\"SUBTAXA0\");",
											"});",
											"pm.test(\"Check if returned additionalInfo NOTE_AA_text is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].additionalInfo.NOTE_AA_text).to.eql(\"NOTE0\");",
											"});",
											"pm.test(\"Check if returned additionalInfo ORIGININST_AP_text is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].additionalInfo.ORIGININST_AP_text).to.eql(\"INSTNAME0\");",
											"});",
											"pm.test(\"Check if returned additionalInfo STAUTH_AP_text is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].additionalInfo.STAUTH_AP_text).to.eql(\"STAUTH0\");",
											"});",
											"pm.test(\"Check if returned additionalInfo SPNAM_AP_text is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].additionalInfo.SPNAM_AP_text).to.eql(\"SPECIES0\");",
											"});",
											"pm.test(\"Check if returned additionalInfo PLOTCODE_AP_text is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].additionalInfo.PLOTCODE_AP_text).to.eql(\"Randomized Trial:TEST:0:0\");",
											"});",
											"pm.test(\"Check if returned additionalInfo SPAUTH_AP_text is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].additionalInfo.SPAUTH_AP_text).to.eql(\"SPAUTH0\");",
											"});",
											"pm.test(\"Check if returned additionalInfo INSTCODE_AP_text is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].additionalInfo.INSTCODE_AP_text).to.eql(\"INSTCODE0\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n    {\r\n        \"accessionNumber\": \"ACCNO0\",\r\n        \"acquisitionDate\": \"2021-03-01\",\r\n        \"germplasmPUI\": \"PUIname\",\r\n        \"additionalInfo\": {\r\n            \"NOTE_AA_text\": \"NOTE0\"\r\n        },\r\n        \"breedingMethodDbId\": 1,\r\n        \"commonCropName\": \"testCommonCrop\",\r\n        \"countryOfOriginCode\": \"UGA\",\r\n        \"defaultDisplayName\": \"MyGermplasm0\",\r\n        \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"germplasmRefID\",\r\n                \"referenceSource\": \"germplasmRefSource\"\r\n            }\r\n        ],\r\n        \"genus\": \"GENUS0\",\r\n        \"germplasmName\": \"MyGermplasm0\",\r\n        \"germplasmOrigin\": \"SORIG0\",\r\n        \"instituteCode\": \"INSTCODE0\",\r\n        \"instituteName\": \"INSTNAME0\",\r\n        \"pedigree\": \"AB0/CD0\",\r\n        \"seedSource\": \"Randomized Trial:TEST:0:0\",\r\n        \"species\": \"SPECIES0\",\r\n        \"speciesAuthority\": \"SPAUTH0\",\r\n        \"subtaxa\": \"SUBTAXA0\",\r\n        \"subtaxaAuthority\": \"STAUTH0\",\r\n        \"synonyms\": [\r\n            {\r\n                \"synonym\": \"DRVNM0\",\r\n                \"type\": \"DRVNM\"\r\n            },\r\n            {\r\n                \"synonym\": \"PUIname\",\r\n                \"type\": \"PUI\"\r\n            }\r\n        ]\r\n    }\r\n]"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/germplasm",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"germplasm"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						},
						{
							"name": "Verify response code and body entered multiple germplasm entries",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"//Check status",
											"pm.test(\"Check messageType\", function () {",
											"    pm.expect(jsonData.metadata.status[0].messageType).to.eql(\"INFO\");",
											"});",
											"pm.test(\"Check message\", function () {",
											"    pm.expect(jsonData.metadata.status[0].message).to.eql(\"2 out of 2 germplasm created successfully.\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n  {\r\n    \"accessionNumber\": \"ACCNO1\",\r\n    \"acquisitionDate\": \"2021-03-01\",\r\n    \"additionalInfo\": {\r\n      \"NOTE_AA_text\": \"NOTE0\"\r\n    },\r\n    \"breedingMethodDbId\": 1,\r\n    \"commonCropName\": \"testCommonCrop\",\r\n    \"countryOfOriginCode\": \"UGA\",\r\n    \"defaultDisplayName\": \"MyGermplasm1\",\r\n    \"genus\": \"GENUS1\",\r\n    \"germplasmName\": \"MyGermplasm1\",\r\n    \"germplasmOrigin\": \"SORIG1\",\r\n    \"instituteCode\": \"INSTCODE1\",\r\n    \"instituteName\": \"INSTNAME1\",\r\n    \"pedigree\": \"AB1/CD1\",\r\n    \"seedSource\": \"Randomized Trial:TEST:0:1\",\r\n    \"species\": \"SPECIES1\",\r\n    \"speciesAuthority\": \"SPAUTH1\",\r\n    \"subtaxa\": \"SUBTAXA1\",\r\n    \"subtaxaAuthority\": \"STAUTH1\",\r\n    \"synonyms\": [\r\n      {\r\n        \"synonym\": \"DRVNM1\",\r\n        \"type\": \"DRVNM\"\r\n      }\r\n    ]\r\n  },\r\n{\r\n    \"accessionNumber\": \"ACCNO2\",\r\n    \"acquisitionDate\": \"2021-03-01\",\r\n    \"additionalInfo\": {\r\n      \"NOTE_AA_text\": \"NOTE0\"\r\n    },\r\n    \"breedingMethodDbId\": 1,\r\n    \"commonCropName\": \"testCommonCrop\",\r\n    \"countryOfOriginCode\": \"UGA\",\r\n    \"defaultDisplayName\": \"MyGermplasm2\",\r\n    \"genus\": \"GENUS2\",\r\n    \"germplasmName\": \"MyGermplasm2\",\r\n    \"germplasmOrigin\": \"SORIG2\",\r\n    \"instituteCode\": \"INSTCODE2\",\r\n    \"instituteName\": \"INSTNAME2\",\r\n    \"pedigree\": \"AB2/CD2\",\r\n    \"seedSource\": \"Randomized Trial:TEST:0:2\",\r\n    \"species\": \"SPECIES2\",\r\n    \"speciesAuthority\": \"SPAUTH2\",\r\n    \"subtaxa\": \"SUBTAXA2\",\r\n    \"subtaxaAuthority\": \"STAUTH2\",\r\n    \"synonyms\": [\r\n      {\r\n        \"synonym\": \"DRVNM2\",\r\n        \"type\": \"DRVNM\"\r\n      }\r\n    ]\r\n  }\r\n]"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/germplasm",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"germplasm"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						},
						{
							"name": "Verify when entered valid details for 1 germplasm and invalid detail for another germplasm",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"//Check status",
											"pm.test(\"Check messageType\", function () {",
											"    pm.expect(jsonData.metadata.status[0].messageType).to.eql(\"INFO\");",
											"});",
											"pm.test(\"Check message\", function () {",
											"    pm.expect(jsonData.metadata.status[0].message).to.eql(\"1 out of 2 germplasm created successfully.\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n  {\r\n    \"accessionNumber\": \"ACCNO1\",\r\n    \"acquisitionDate\": \"2021-03-01\",\r\n    \"additionalInfo\": {\r\n      \"NOTE\": \"NOTE0\"\r\n    },\r\n    \"breedingMethodDbId\": 1,\r\n    \"commonCropName\": \"testCommonCrop\",\r\n    \"countryOfOriginCode\": \"UGA\",\r\n    \"defaultDisplayName\": \"\",\r\n    \"genus\": \"GENUS1\",\r\n    \"germplasmName\": \"MyGermplasm1\",\r\n    \"germplasmOrigin\": \"SORIG1\",\r\n    \"instituteCode\": \"INSTCODE1\",\r\n    \"instituteName\": \"INSTNAME1\",\r\n    \"pedigree\": \"AB1/CD1\",\r\n    \"seedSource\": \"Randomized Trial:TEST:0:1\",\r\n    \"species\": \"SPECIES1\",\r\n    \"speciesAuthority\": \"SPAUTH1\",\r\n    \"subtaxa\": \"SUBTAXA1\",\r\n    \"subtaxaAuthority\": \"STAUTH1\",\r\n    \"synonyms\": [\r\n      {\r\n        \"synonym\": \"DRVNM1\",\r\n        \"type\": \"DRVNM\"\r\n      }\r\n    ]\r\n  },\r\n{\r\n    \"accessionNumber\": \"ACCNO2\",\r\n    \"acquisitionDate\": \"2021-03-01\",\r\n    \"additionalInfo\": {\r\n      \"NOTE_AA_text\": \"NOTE0\"\r\n    },\r\n    \"breedingMethodDbId\": 1,\r\n    \"commonCropName\": \"testCommonCrop\",\r\n    \"countryOfOriginCode\": \"UGA\",\r\n    \"defaultDisplayName\": \"MyGermplasm2\",\r\n    \"genus\": \"GENUS2\",\r\n    \"germplasmName\": \"MyGermplasm2\",\r\n    \"germplasmOrigin\": \"SORIG2\",\r\n    \"instituteCode\": \"INSTCODE2\",\r\n    \"instituteName\": \"INSTNAME2\",\r\n    \"pedigree\": \"AB2/CD2\",\r\n    \"seedSource\": \"Randomized Trial:TEST:0:2\",\r\n    \"species\": \"SPECIES2\",\r\n    \"speciesAuthority\": \"SPAUTH2\",\r\n    \"subtaxa\": \"SUBTAXA2\",\r\n    \"subtaxaAuthority\": \"STAUTH2\",\r\n    \"synonyms\": [\r\n      {\r\n        \"synonym\": \"DRVNM2\",\r\n        \"type\": \"DRVNM\"\r\n      }\r\n    ]\r\n  }\r\n]"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/germplasm",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"germplasm"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered required details only",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"//Check status",
											"pm.test(\"Check messageType\", function () {",
											"    pm.expect(jsonData.metadata.status[0].messageType).to.eql(\"INFO\");",
											"});",
											"pm.test(\"Check message\", function () {",
											"    pm.expect(jsonData.metadata.status[0].message).to.eql(\"1 out of 1 germplasm created successfully.\");",
											"});",
											"",
											"//Check datafiles",
											"pm.test(\"Check datafiles\", function () {",
											"    pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"",
											"//Check results",
											"var index = 0",
											"pm.test(\"Check if germplasmDbId returned is not null\", function () {",
											"    //Note: germplasmDbId is system generated so the value varies every execution",
											"    pm.expect(jsonData.result.data[index].germplasmDbId).to.not.be.null;",
											"});",
											"",
											"pm.test(\"Check if defaultDisplayName returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].defaultDisplayName).to.eql(\"GermplasmRequiredValuesOnly\");",
											"});",
											"pm.test(\"Check if germplasmName returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].germplasmName).to.eql(\"GermplasmRequiredValuesOnly\");",
											"});",
											"pm.test(\"Check if pedigree returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].pedigree).to.eql(\"Unknown/Unknown\");",
											"});",
											"pm.test(\"Check if synonyms is empty\", function () {",
											"    pm.expect(jsonData.result.data[index].synonyms).to.eql([]);",
											"}); ",
											"pm.test(\"Check if countryOfOriginCode returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].countryOfOriginCode).to.eql(\"UGA\");",
											"});",
											"pm.test(\"Check if storageTypes returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].storageTypes).to.eql([]);",
											"});",
											"pm.test(\"Check if taxonIds returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].taxonIds).to.eql([]);",
											"});",
											"pm.test(\"Check if returned donors is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].donors).to.eql([]);",
											"});",
											"pm.test(\"Check if returned acquisitionDate is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].acquisitionDate).to.eql(\"2021-03-01\");",
											"});",
											"pm.test(\"Check if returned breedingMethodDbId is correct\", function () {",
											"    //Note: Default breeding methodDbId is 31 or Unknown Derivative Method",
											"    pm.expect(jsonData.result.data[index].breedingMethodDbId).to.eql(\"31\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n  {\r\n    \"acquisitionDate\": \"2021-03-01\",\r\n    \"countryOfOriginCode\": \"UGA\",\r\n    \"defaultDisplayName\": \"GermplasmRequiredValuesOnly\"\r\n  }\r\n]"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/germplasm",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"germplasm"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when defaultDisplayName is not specified",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"//Check status",
											"pm.test(\"Check messageType\", function () {",
											"    pm.expect(jsonData.metadata.status[0].messageType).to.eql(\"INFO\");",
											"});",
											"pm.test(\"Check message\", function () {",
											"    pm.expect(jsonData.metadata.status[0].message).to.eql(\"0 out of 1 germplasm created successfully.\");",
											"});",
											"",
											"pm.test(\"Check messageType\", function () {",
											"    pm.expect(jsonData.metadata.status[1].messageType).to.eql(\"ERROR\");",
											"});",
											"pm.test(\"Check message\", function () {",
											"    pm.expect(jsonData.metadata.status[1].message).to.eql(\"ERROR1 Germplasm at position 1 is invalid because there is one or more null type in synonyms.\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n  {\r\n    \"acquisitionDate\": \"2021-03-01\",\r\n    \"countryOfOriginCode\": \"UGA\",\r\n    \"defaultDisplayName\": \"\"\r\n  }\r\n]"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/germplasm",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"germplasm"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when aquisitionDate is not specified",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"//Check status",
											"pm.test(\"Check messageType\", function () {",
											"    pm.expect(jsonData.metadata.status[0].messageType).to.eql(\"INFO\");",
											"});",
											"pm.test(\"Check message\", function () {",
											"    pm.expect(jsonData.metadata.status[0].message).to.eql(\"0 out of 1 germplasm created successfully.\");",
											"});",
											"",
											"pm.test(\"Check messageType\", function () {",
											"    pm.expect(jsonData.metadata.status[1].messageType).to.eql(\"ERROR\");",
											"});",
											"pm.test(\"Check message\", function () {",
											"    pm.expect(jsonData.metadata.status[1].message).to.eql(\"ERROR1 Germplasm at position 1 is invalid because acquisition date can not be null or empty.\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n  {\r\n    \"acquisitionDate\": \"\",\r\n    \"countryOfOriginCode\": \"UGA\",\r\n    \"defaultDisplayName\": \"acquisitionDateNotSpecified\"\r\n  }\r\n]"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/germplasm",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"germplasm"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when countryOfOriginCode is not specified",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"//Check status",
											"pm.test(\"Check messageType\", function () {",
											"    pm.expect(jsonData.metadata.status[0].messageType).to.eql(\"INFO\");",
											"});",
											"pm.test(\"Check message\", function () {",
											"    pm.expect(jsonData.metadata.status[0].message).to.eql(\"0 out of 1 germplasm created successfully.\");",
											"});",
											"",
											"pm.test(\"Check messageType\", function () {",
											"    pm.expect(jsonData.metadata.status[1].messageType).to.eql(\"ERROR\");",
											"});",
											"pm.test(\"Check message\", function () {",
											"    pm.expect(jsonData.metadata.status[1].message).to.eql(\"ERROR1 Germplasm at position 1 is invalid because Country of Origin must be specified.\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n  {\r\n    \"acquisitionDate\": \"2021-03-01\",\r\n    \"countryOfOriginCode\": \"\",\r\n    \"defaultDisplayName\": \"countryOfOriginCodeNotSpecified\"\r\n  }\r\n]"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/germplasm",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"germplasm"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid codes",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"//Check status",
											"pm.test(\"Check messageType\", function () {",
											"    pm.expect(jsonData.metadata.status[0].messageType).to.eql(\"INFO\");",
											"});",
											"pm.test(\"Check message\", function () {",
											"    pm.expect(jsonData.metadata.status[0].message).to.eql(\"1 out of 1 germplasm created successfully.\");",
											"});",
											"",
											"//Check datafiles",
											"pm.test(\"Check datafiles\", function () {",
											"    pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"",
											"//Check results",
											"var index = 0",
											"",
											"pm.test(\"Check if defaultDisplayName returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].defaultDisplayName).to.eql(\"GermplasmWithInvalidCodes\");",
											"});",
											"",
											"pm.test(\"Check if accessionNumber property is not present\", function() {",
											"  pm.expect(jsonData.result.data[index]).to.not.have.property('accessionNumber');",
											"});",
											"",
											"pm.test(\"Check if breedingMethodDbId returns default method id\", function() {",
											"  pm.expect(jsonData.result.data[index].breedingMethodDbId).to.eql(\"31\");",
											"});",
											"pm.test(\"Check if additionalInfo property is not present\", function() {",
											"  pm.expect(jsonData.result.data[index]).to.not.have.property('additionalInfo');",
											"});",
											"",
											"pm.test(\"Check if DRVNM is present in synonyms\", function() {",
											"  pm.expect(jsonData.result.data[index].synonyms[0].type).to.eql('DRVNM');",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n  {\r\n    \"accessionNumberx\": \"ACCNO0\",\r\n    \"acquisitionDate\": \"2021-03-01\",\r\n    \"additionalInfo\": {\r\n      \"NOTEx\": \"NOTE0\"\r\n    },\r\n    \"breedingMethodDbIdx\": 1,\r\n    \"commonCropNamex\": \"testCommonCrop\",\r\n    \"countryOfOriginCode\": \"UGA\",\r\n    \"defaultDisplayName\": \"GermplasmWithInvalidCodes\",\r\n    \"genusx\": \"GENUS0\",\r\n    \"germplasmNamex\": \"MyGermplasm0\",\r\n    \"germplasmOrigin\": \"SORIG0\",\r\n    \"instituteCodex\": \"INSTCODE0\",\r\n    \"instituteNamex\": \"INSTNAME0\",\r\n    \"pedigreex\": \"AB0/CD0\",\r\n    \"seedSourcex\": \"Randomized Trial:TEST:0:0\",\r\n    \"speciesx\": \"SPECIES0\",\r\n    \"speciesAuthorityx\": \"SPAUTH0\",\r\n    \"subtaxax\": \"SUBTAXA0\",\r\n    \"subtaxaAuthorityx\": \"STAUTH0\",\r\n    \"synonyms\": [\r\n      {\r\n        \"synonym\": \"DRVNM0\",\r\n        \"type\": \"DRVNM\"\r\n      }\r\n    ]\r\n  }\r\n]"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/germplasm",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"germplasm"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						},
						{
							"name": "Verify response code and body entered accession number greater than max length",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"//Check status",
											"pm.test(\"Check messageType\", function () {",
											"    pm.expect(jsonData.metadata.status[0].messageType).to.eql(\"INFO\");",
											"});",
											"pm.test(\"Check message\", function () {",
											"    pm.expect(jsonData.metadata.status[0].message).to.eql(\"0 out of 1 germplasm created successfully.\");",
											"});",
											"pm.test(\"Check messageType\", function () {",
											"    pm.expect(jsonData.metadata.status[1].messageType).to.eql(\"ERROR\");",
											"});",
											"pm.test(\"Check message\", function () {",
											"    pm.expect(jsonData.metadata.status[1].message).to.eql(\"ERROR1 Germplasm at position 1 is invalid because name in accessionNumber must not exceed length of 255.\");",
											"});",
											"//Check datafiles",
											"pm.test(\"Check datafiles\", function () {",
											"    pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n  {\r\n    \"accessionNumber\": \"ACCNO00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001\",\r\n    \"acquisitionDate\": \"2021-03-01\",\r\n    \"additionalInfo\": {\r\n      \"NOTE\": \"NOTE0\"\r\n    },\r\n    \"breedingMethodDbId\": 1,\r\n    \"commonCropName\": \"testCommonCrop\",\r\n    \"countryOfOriginCode\": \"UGA\",\r\n    \"defaultDisplayName\": \"MyGermplasm0\",\r\n    \"genus\": \"GENUS0\",\r\n    \"germplasmName\": \"MyGermplasm0\",\r\n    \"germplasmOrigin\": \"SORIG0\",\r\n    \"instituteCode\": \"INSTCODE0\",\r\n    \"instituteName\": \"INSTNAME0\",\r\n    \"pedigree\": \"AB0/CD0\",\r\n    \"seedSource\": \"Randomized Trial:TEST:0:0\",\r\n    \"species\": \"SPECIES0\",\r\n    \"speciesAuthority\": \"SPAUTH0\",\r\n    \"subtaxa\": \"SUBTAXA0\",\r\n    \"subtaxaAuthority\": \"STAUTH0\",\r\n    \"synonyms\": [\r\n      {\r\n        \"synonym\": \"DRVNM0\",\r\n        \"type\": \"DRVNM\"\r\n      }\r\n    ]\r\n  }\r\n]"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/germplasm",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"germplasm"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						},
						{
							"name": "Verify response code and body entered attribute in additionalInfo greater than max length",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"//Check status",
											"pm.test(\"Check messageType\", function () {",
											"    pm.expect(jsonData.metadata.status[0].messageType).to.eql(\"INFO\");",
											"});",
											"pm.test(\"Check message\", function () {",
											"    pm.expect(jsonData.metadata.status[0].message).to.eql(\"0 out of 1 germplasm created successfully.\");",
											"});",
											"pm.test(\"Check messageType\", function () {",
											"    pm.expect(jsonData.metadata.status[1].messageType).to.eql(\"ERROR\");",
											"});",
											"pm.test(\"Check message\", function () {",
											"    pm.expect(jsonData.metadata.status[1].message).to.eql(\"ERROR1 Germplasm at position 1 is invalid because attribute in additionalInfo must not exceed length of 255.\");",
											"});",
											"//Check datafiles",
											"pm.test(\"Check datafiles\", function () {",
											"    pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n  {\r\n    \"accessionNumber\": \"ACCNO0\",\r\n    \"acquisitionDate\": \"2021-03-01\",\r\n    \"additionalInfo\": {\r\n      \"NOTE\": \"NOTE000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001\"\r\n    },\r\n    \"breedingMethodDbId\": 1,\r\n    \"commonCropName\": \"testCommonCrop\",\r\n    \"countryOfOriginCode\": \"UGA\",\r\n    \"defaultDisplayName\": \"MyGermplasm0\",\r\n    \"genus\": \"GENUS0\",\r\n    \"germplasmName\": \"MyGermplasm0\",\r\n    \"germplasmOrigin\": \"SORIG0\",\r\n    \"instituteCode\": \"INSTCODE0\",\r\n    \"instituteName\": \"INSTNAME0\",\r\n    \"pedigree\": \"AB0/CD0\",\r\n    \"seedSource\": \"Randomized Trial:TEST:0:0\",\r\n    \"species\": \"SPECIES0\",\r\n    \"speciesAuthority\": \"SPAUTH0\",\r\n    \"subtaxa\": \"SUBTAXA0\",\r\n    \"subtaxaAuthority\": \"STAUTH0\",\r\n    \"synonyms\": [\r\n      {\r\n        \"synonym\": \"DRVNM0\",\r\n        \"type\": \"DRVNM\"\r\n      }\r\n    ]\r\n  }\r\n]"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/germplasm",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"germplasm"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						},
						{
							"name": "Verify response code and body entered commonCropName greater than max length",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"//Check status",
											"pm.test(\"Check messageType\", function () {",
											"    pm.expect(jsonData.metadata.status[0].messageType).to.eql(\"INFO\");",
											"});",
											"pm.test(\"Check message\", function () {",
											"    pm.expect(jsonData.metadata.status[0].message).to.eql(\"0 out of 1 germplasm created successfully.\");",
											"});",
											"pm.test(\"Check messageType\", function () {",
											"    pm.expect(jsonData.metadata.status[1].messageType).to.eql(\"ERROR\");",
											"});",
											"pm.test(\"Check message\", function () {",
											"    pm.expect(jsonData.metadata.status[1].message).to.eql(\"ERROR1 Germplasm at position 1 is invalid because attribute in commonCropName must not exceed length of 255.\");",
											"});",
											"//Check datafiles",
											"pm.test(\"Check datafiles\", function () {",
											"    pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n  {\r\n    \"accessionNumber\": \"ACCNO1\",\r\n    \"acquisitionDate\": \"2021-03-01\",\r\n    \"additionalInfo\": {\r\n      \"NOTE\": \"NOTE1\"\r\n    },\r\n    \"breedingMethodDbId\": 1,\r\n    \"commonCropName\": \"testCommonCrooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooop\",\r\n    \"countryOfOriginCode\": \"UGA\",\r\n    \"defaultDisplayName\": \"GermplasmWithLongCommonCrop\",\r\n    \"genus\": \"GENUS1\",\r\n    \"germplasmName\": \"MyGermplasm1\",\r\n    \"germplasmOrigin\": \"SORIG1\",\r\n    \"instituteCode\": \"INSTCODE1\",\r\n    \"instituteName\": \"INSTNAME1\",\r\n    \"pedigree\": \"AB1/CD1\",\r\n    \"seedSource\": \"Randomized Trial:TEST:0:0\",\r\n    \"species\": \"SPECIES1\",\r\n    \"speciesAuthority\": \"SPAUTH1\",\r\n    \"subtaxa\": \"SUBTAXA1\",\r\n    \"subtaxaAuthority\": \"STAUTH1\",\r\n    \"synonyms\": [\r\n      {\r\n        \"synonym\": \"DRVNM1\",\r\n        \"type\": \"DRVNM\"\r\n      }\r\n    ]\r\n  }\r\n]"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/germplasm",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"germplasm"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						},
						{
							"name": "Verify response code and body entered defaultDisplayName greater than max length",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"//Check status",
											"pm.test(\"Check messageType\", function () {",
											"    pm.expect(jsonData.metadata.status[0].messageType).to.eql(\"INFO\");",
											"});",
											"pm.test(\"Check message\", function () {",
											"    pm.expect(jsonData.metadata.status[0].message).to.eql(\"0 out of 1 germplasm created successfully.\");",
											"});",
											"pm.test(\"Check messageType\", function () {",
											"    pm.expect(jsonData.metadata.status[1].messageType).to.eql(\"ERROR\");",
											"});",
											"pm.test(\"Check message\", function () {",
											"    pm.expect(jsonData.metadata.status[1].message).to.eql(\"ERROR1 Germplasm at position 1 is invalid because name in defaultDisplayName must not exceed length of 255.\");",
											"});",
											"//Check datafiles",
											"pm.test(\"Check datafiles\", function () {",
											"    pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n  {\r\n    \"accessionNumber\": \"ACCNO1\",\r\n    \"acquisitionDate\": \"2021-03-01\",\r\n    \"additionalInfo\": {\r\n      \"NOTE\": \"NOTE1\"\r\n    },\r\n    \"breedingMethodDbId\": 1,\r\n    \"commonCropName\": \"testCommonCrop\",\r\n    \"countryOfOriginCode\": \"UGA\",\r\n    \"defaultDisplayName\": \"GermplasmLongNaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaame\",\r\n    \"genus\": \"GENUS1\",\r\n    \"germplasmName\": \"MyGermplasm1\",\r\n    \"germplasmOrigin\": \"SORIG1\",\r\n    \"instituteCode\": \"INSTCODE1\",\r\n    \"instituteName\": \"INSTNAME1\",\r\n    \"pedigree\": \"AB1/CD1\",\r\n    \"seedSource\": \"Randomized Trial:TEST:0:0\",\r\n    \"species\": \"SPECIES1\",\r\n    \"speciesAuthority\": \"SPAUTH1\",\r\n    \"subtaxa\": \"SUBTAXA1\",\r\n    \"subtaxaAuthority\": \"STAUTH1\",\r\n    \"synonyms\": [\r\n      {\r\n        \"synonym\": \"DRVNM1\",\r\n        \"type\": \"DRVNM\"\r\n      }\r\n    ]\r\n  }\r\n]"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/germplasm",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"germplasm"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						},
						{
							"name": "Verify response code and body entered genus greater than max length",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"//Check status",
											"pm.test(\"Check messageType\", function () {",
											"    pm.expect(jsonData.metadata.status[0].messageType).to.eql(\"INFO\");",
											"});",
											"pm.test(\"Check message\", function () {",
											"    pm.expect(jsonData.metadata.status[0].message).to.eql(\"0 out of 1 germplasm created successfully.\");",
											"});",
											"pm.test(\"Check messageType\", function () {",
											"    pm.expect(jsonData.metadata.status[1].messageType).to.eql(\"ERROR\");",
											"});",
											"pm.test(\"Check message\", function () {",
											"    pm.expect(jsonData.metadata.status[1].message).to.eql(\"ERROR1 Germplasm at position 1 is invalid because name in genus must not exceed length of 255.\");",
											"});",
											"//Check datafiles",
											"pm.test(\"Check datafiles\", function () {",
											"    pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n  {\r\n    \"accessionNumber\": \"ACCNO0\",\r\n    \"acquisitionDate\": \"2021-03-01\",\r\n    \"additionalInfo\": {\r\n      \"NOTE\": \"NOTE0\"\r\n    },\r\n    \"breedingMethodDbId\": 1,\r\n    \"commonCropName\": \"testCommonCrop\",\r\n    \"countryOfOriginCode\": \"UGA\",\r\n    \"defaultDisplayName\": \"MyGermplasm0\",\r\n    \"genus\": \"GENUS00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n    \"germplasmName\": \"MyGermplasm0\",\r\n    \"germplasmOrigin\": \"SORIG0\",\r\n    \"instituteCode\": \"INSTCODE0\",\r\n    \"instituteName\": \"INSTNAME0\",\r\n    \"pedigree\": \"AB0/CD0\",\r\n    \"seedSource\": \"Randomized Trial:TEST:0:0\",\r\n    \"species\": \"SPECIES0\",\r\n    \"speciesAuthority\": \"SPAUTH0\",\r\n    \"subtaxa\": \"SUBTAXA0\",\r\n    \"subtaxaAuthority\": \"STAUTH0\",\r\n    \"synonyms\": [\r\n      {\r\n        \"synonym\": \"DRVNM0\",\r\n        \"type\": \"DRVNM\"\r\n      }\r\n    ]\r\n  }\r\n]"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/germplasm",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"germplasm"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						},
						{
							"name": "Verify response code and body entered germplasmOrigin greater than max length",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"//Check status",
											"pm.test(\"Check messageType\", function () {",
											"    pm.expect(jsonData.metadata.status[0].messageType).to.eql(\"INFO\");",
											"});",
											"pm.test(\"Check message\", function () {",
											"    pm.expect(jsonData.metadata.status[0].message).to.eql(\"0 out of 1 germplasm created successfully.\");",
											"});",
											"pm.test(\"Check messageType\", function () {",
											"    pm.expect(jsonData.metadata.status[1].messageType).to.eql(\"ERROR\");",
											"});",
											"pm.test(\"Check message\", function () {",
											"    pm.expect(jsonData.metadata.status[1].message).to.eql(\"ERROR1 Germplasm at position 1 is invalid because attribute in germplasmOrigin must not exceed length of 255.\");",
											"});",
											"//Check datafiles",
											"pm.test(\"Check datafiles\", function () {",
											"    pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n  {\r\n    \"accessionNumber\": \"ACCNO0\",\r\n    \"acquisitionDate\": \"2021-03-01\",\r\n    \"additionalInfo\": {\r\n      \"NOTE\": \"NOTE0\"\r\n    },\r\n    \"breedingMethodDbId\": 1,\r\n    \"commonCropName\": \"testCommonCrop\",\r\n    \"countryOfOriginCode\": \"UGA\",\r\n    \"defaultDisplayName\": \"MyGermplasm0\",\r\n    \"genus\": \"GENUS0\",\r\n    \"germplasmName\": \"MyGermplasm0\",\r\n    \"germplasmOrigin\": \"SORIG00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n    \"instituteCode\": \"INSTCODE0\",\r\n    \"instituteName\": \"INSTNAME0\",\r\n    \"pedigree\": \"AB0/CD0\",\r\n    \"seedSource\": \"Randomized Trial:TEST:0:0\",\r\n    \"species\": \"SPECIES0\",\r\n    \"speciesAuthority\": \"SPAUTH0\",\r\n    \"subtaxa\": \"SUBTAXA0\",\r\n    \"subtaxaAuthority\": \"STAUTH0\",\r\n    \"synonyms\": [\r\n      {\r\n        \"synonym\": \"DRVNM0\",\r\n        \"type\": \"DRVNM\"\r\n      }\r\n    ]\r\n  }\r\n]"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/germplasm",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"germplasm"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						},
						{
							"name": "Verify response code and body entered instituteCode greater than max length",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"//Check status",
											"pm.test(\"Check messageType\", function () {",
											"    pm.expect(jsonData.metadata.status[0].messageType).to.eql(\"INFO\");",
											"});",
											"pm.test(\"Check message\", function () {",
											"    pm.expect(jsonData.metadata.status[0].message).to.eql(\"0 out of 1 germplasm created successfully.\");",
											"});",
											"pm.test(\"Check messageType\", function () {",
											"    pm.expect(jsonData.metadata.status[1].messageType).to.eql(\"ERROR\");",
											"});",
											"pm.test(\"Check message\", function () {",
											"    pm.expect(jsonData.metadata.status[1].message).to.eql(\"ERROR1 Germplasm at position 1 is invalid because attribute in instituteCode must not exceed length of 255.\");",
											"});",
											"//Check datafiles",
											"pm.test(\"Check datafiles\", function () {",
											"    pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n  {\r\n    \"accessionNumber\": \"ACCNO0\",\r\n    \"acquisitionDate\": \"2021-03-01\",\r\n    \"additionalInfo\": {\r\n      \"NOTE\": \"NOTE0\"\r\n    },\r\n    \"breedingMethodDbId\": 1,\r\n    \"commonCropName\": \"testCommonCrop\",\r\n    \"countryOfOriginCode\": \"UGA\",\r\n    \"defaultDisplayName\": \"MyGermplasm0\",\r\n    \"genus\": \"GENUS0\",\r\n    \"germplasmName\": \"MyGermplasm0\",\r\n    \"germplasmOrigin\": \"SORIG0\",\r\n    \"instituteCode\": \"INSTCODE00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n    \"instituteName\": \"INSTNAME0\",\r\n    \"pedigree\": \"AB0/CD0\",\r\n    \"seedSource\": \"Randomized Trial:TEST:0:0\",\r\n    \"species\": \"SPECIES0\",\r\n    \"speciesAuthority\": \"SPAUTH0\",\r\n    \"subtaxa\": \"SUBTAXA0\",\r\n    \"subtaxaAuthority\": \"STAUTH0\",\r\n    \"synonyms\": [\r\n      {\r\n        \"synonym\": \"DRVNM0\",\r\n        \"type\": \"DRVNM\"\r\n      }\r\n    ]\r\n  }\r\n]"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/germplasm",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"germplasm"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						},
						{
							"name": "Verify response code and body entered instituteName greater than max length",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"//Check status",
											"pm.test(\"Check messageType\", function () {",
											"    pm.expect(jsonData.metadata.status[0].messageType).to.eql(\"INFO\");",
											"});",
											"pm.test(\"Check message\", function () {",
											"    pm.expect(jsonData.metadata.status[0].message).to.eql(\"0 out of 1 germplasm created successfully.\");",
											"});",
											"pm.test(\"Check messageType\", function () {",
											"    pm.expect(jsonData.metadata.status[1].messageType).to.eql(\"ERROR\");",
											"});",
											"pm.test(\"Check message\", function () {",
											"    pm.expect(jsonData.metadata.status[1].message).to.eql(\"ERROR1 Germplasm at position 1 is invalid because attribute in instituteName must not exceed length of 255.\");",
											"});",
											"//Check datafiles",
											"pm.test(\"Check datafiles\", function () {",
											"    pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n  {\r\n    \"accessionNumber\": \"ACCNO0\",\r\n    \"acquisitionDate\": \"2021-03-01\",\r\n    \"additionalInfo\": {\r\n      \"NOTE\": \"NOTE0\"\r\n    },\r\n    \"breedingMethodDbId\": 1,\r\n    \"commonCropName\": \"testCommonCrop\",\r\n    \"countryOfOriginCode\": \"UGA\",\r\n    \"defaultDisplayName\": \"MyGermplasm0\",\r\n    \"genus\": \"GENUS0\",\r\n    \"germplasmName\": \"MyGermplasm0\",\r\n    \"germplasmOrigin\": \"SORIG0\",\r\n    \"instituteCode\": \"INSTCODE0\",\r\n    \"instituteName\": \"INSTNAME00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n    \"pedigree\": \"AB0/CD0\",\r\n    \"seedSource\": \"Randomized Trial:TEST:0:0\",\r\n    \"species\": \"SPECIES0\",\r\n    \"speciesAuthority\": \"SPAUTH0\",\r\n    \"subtaxa\": \"SUBTAXA0\",\r\n    \"subtaxaAuthority\": \"STAUTH0\",\r\n    \"synonyms\": [\r\n      {\r\n        \"synonym\": \"DRVNM0\",\r\n        \"type\": \"DRVNM\"\r\n      }\r\n    ]\r\n  }\r\n]"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/germplasm",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"germplasm"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						},
						{
							"name": "Verify response code and body entered pedigree greater than max length",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"//Check status",
											"pm.test(\"Check messageType\", function () {",
											"    pm.expect(jsonData.metadata.status[0].messageType).to.eql(\"INFO\");",
											"});",
											"pm.test(\"Check message\", function () {",
											"    pm.expect(jsonData.metadata.status[0].message).to.eql(\"0 out of 1 germplasm created successfully.\");",
											"});",
											"pm.test(\"Check messageType\", function () {",
											"    pm.expect(jsonData.metadata.status[1].messageType).to.eql(\"ERROR\");",
											"});",
											"pm.test(\"Check message\", function () {",
											"    pm.expect(jsonData.metadata.status[1].message).to.eql(\"ERROR1 Germplasm at position 1 is invalid because name in pedigree must not exceed length of 255.\");",
											"});",
											"//Check datafiles",
											"pm.test(\"Check datafiles\", function () {",
											"    pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n  {\r\n    \"accessionNumber\": \"ACCNO0\",\r\n    \"acquisitionDate\": \"2021-03-01\",\r\n    \"additionalInfo\": {\r\n      \"NOTE\": \"NOTE0\"\r\n    },\r\n    \"breedingMethodDbId\": 1,\r\n    \"commonCropName\": \"testCommonCrop\",\r\n    \"countryOfOriginCode\": \"UGA\",\r\n    \"defaultDisplayName\": \"MyGermplasm0\",\r\n    \"genus\": \"GENUS0\",\r\n    \"germplasmName\": \"MyGermplasm0\",\r\n    \"germplasmOrigin\": \"SORIG0\",\r\n    \"instituteCode\": \"INSTCODE0\",\r\n    \"instituteName\": \"INSTNAME0\",\r\n    \"pedigree\": \"AB0/CD0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n    \"seedSource\": \"Randomized Trial:TEST:0:0\",\r\n    \"species\": \"SPECIES0\",\r\n    \"speciesAuthority\": \"SPAUTH0\",\r\n    \"subtaxa\": \"SUBTAXA0\",\r\n    \"subtaxaAuthority\": \"STAUTH0\",\r\n    \"synonyms\": [\r\n      {\r\n        \"synonym\": \"DRVNM0\",\r\n        \"type\": \"DRVNM\"\r\n      }\r\n    ]\r\n  }\r\n]"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/germplasm",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"germplasm"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						},
						{
							"name": "Verify response code and body entered seedSource  greater than max length",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"//Check status",
											"pm.test(\"Check messageType\", function () {",
											"    pm.expect(jsonData.metadata.status[0].messageType).to.eql(\"INFO\");",
											"});",
											"pm.test(\"Check message\", function () {",
											"    pm.expect(jsonData.metadata.status[0].message).to.eql(\"0 out of 1 germplasm created successfully.\");",
											"});",
											"pm.test(\"Check messageType\", function () {",
											"    pm.expect(jsonData.metadata.status[1].messageType).to.eql(\"ERROR\");",
											"});",
											"pm.test(\"Check message\", function () {",
											"    pm.expect(jsonData.metadata.status[1].message).to.eql(\"ERROR1 Germplasm at position 1 is invalid because attribute in seedSource must not exceed length of 255.\");",
											"});",
											"//Check datafiles",
											"pm.test(\"Check datafiles\", function () {",
											"    pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n  {\r\n    \"accessionNumber\": \"ACCNO0\",\r\n    \"acquisitionDate\": \"2021-03-01\",\r\n    \"additionalInfo\": {\r\n      \"NOTE\": \"NOTE0\"\r\n    },\r\n    \"breedingMethodDbId\": 1,\r\n    \"commonCropName\": \"testCommonCrop\",\r\n    \"countryOfOriginCode\": \"UGA\",\r\n    \"defaultDisplayName\": \"MyGermplasm0\",\r\n    \"genus\": \"GENUS0\",\r\n    \"germplasmName\": \"MyGermplasm0\",\r\n    \"germplasmOrigin\": \"SORIG0\",\r\n    \"instituteCode\": \"INSTCODE0\",\r\n    \"instituteName\": \"INSTNAME0\",\r\n    \"pedigree\": \"AB0/CD0\",\r\n    \"seedSource\": \"Randomized Trial:TEST:0:0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n    \"species\": \"SPECIES0\",\r\n    \"speciesAuthority\": \"SPAUTH0\",\r\n    \"subtaxa\": \"SUBTAXA0\",\r\n    \"subtaxaAuthority\": \"STAUTH0\",\r\n    \"synonyms\": [\r\n      {\r\n        \"synonym\": \"DRVNM0\",\r\n        \"type\": \"DRVNM\"\r\n      }\r\n    ]\r\n  }\r\n]"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/germplasm",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"germplasm"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						},
						{
							"name": "Verify response code and body entered species greater than max length",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"//Check status",
											"pm.test(\"Check messageType\", function () {",
											"    pm.expect(jsonData.metadata.status[0].messageType).to.eql(\"INFO\");",
											"});",
											"pm.test(\"Check message\", function () {",
											"    pm.expect(jsonData.metadata.status[0].message).to.eql(\"0 out of 1 germplasm created successfully.\");",
											"});",
											"pm.test(\"Check messageType\", function () {",
											"    pm.expect(jsonData.metadata.status[1].messageType).to.eql(\"ERROR\");",
											"});",
											"pm.test(\"Check message\", function () {",
											"    pm.expect(jsonData.metadata.status[1].message).to.eql(\"ERROR1 Germplasm at position 1 is invalid because attribute in species must not exceed length of 255.\");",
											"});",
											"//Check datafiles",
											"pm.test(\"Check datafiles\", function () {",
											"    pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n  {\r\n    \"accessionNumber\": \"ACCNO0\",\r\n    \"acquisitionDate\": \"2021-03-01\",\r\n    \"additionalInfo\": {\r\n      \"NOTE\": \"NOTE0\"\r\n    },\r\n    \"breedingMethodDbId\": 1,\r\n    \"commonCropName\": \"testCommonCrop\",\r\n    \"countryOfOriginCode\": \"UGA\",\r\n    \"defaultDisplayName\": \"MyGermplasm0\",\r\n    \"genus\": \"GENUS0\",\r\n    \"germplasmName\": \"MyGermplasm0\",\r\n    \"germplasmOrigin\": \"SORIG0\",\r\n    \"instituteCode\": \"INSTCODE0\",\r\n    \"instituteName\": \"INSTNAME0\",\r\n    \"pedigree\": \"AB0/CD0\",\r\n    \"seedSource\": \"Randomized Trial:TEST:0:0\",\r\n    \"species\": \"SPECIES000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n    \"speciesAuthority\": \"SPAUTH0\",\r\n    \"subtaxa\": \"SUBTAXA0\",\r\n    \"subtaxaAuthority\": \"STAUTH0\",\r\n    \"synonyms\": [\r\n      {\r\n        \"synonym\": \"DRVNM0\",\r\n        \"type\": \"DRVNM\"\r\n      }\r\n    ]\r\n  }\r\n]"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/germplasm",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"germplasm"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						},
						{
							"name": "Verify response code and body entered speciesAuthority greater than max length",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"//Check status",
											"pm.test(\"Check messageType\", function () {",
											"    pm.expect(jsonData.metadata.status[0].messageType).to.eql(\"INFO\");",
											"});",
											"pm.test(\"Check message\", function () {",
											"    pm.expect(jsonData.metadata.status[0].message).to.eql(\"0 out of 1 germplasm created successfully.\");",
											"});",
											"pm.test(\"Check messageType\", function () {",
											"    pm.expect(jsonData.metadata.status[1].messageType).to.eql(\"ERROR\");",
											"});",
											"pm.test(\"Check message\", function () {",
											"    pm.expect(jsonData.metadata.status[1].message).to.eql(\"ERROR1 Germplasm at position 1 is invalid because attribute in speciesAuthority must not exceed length of 255.\");",
											"});",
											"//Check datafiles",
											"pm.test(\"Check datafiles\", function () {",
											"    pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n  {\r\n    \"accessionNumber\": \"ACCNO0\",\r\n    \"acquisitionDate\": \"2021-03-01\",\r\n    \"additionalInfo\": {\r\n      \"NOTE\": \"NOTE0\"\r\n    },\r\n    \"breedingMethodDbId\": 1,\r\n    \"commonCropName\": \"testCommonCrop\",\r\n    \"countryOfOriginCode\": \"UGA\",\r\n    \"defaultDisplayName\": \"MyGermplasm0\",\r\n    \"genus\": \"GENUS0\",\r\n    \"germplasmName\": \"MyGermplasm0\",\r\n    \"germplasmOrigin\": \"SORIG0\",\r\n    \"instituteCode\": \"INSTCODE0\",\r\n    \"instituteName\": \"INSTNAME0\",\r\n    \"pedigree\": \"AB0/CD0\",\r\n    \"seedSource\": \"Randomized Trial:TEST:0:0\",\r\n    \"species\": \"SPECIES0\",\r\n    \"speciesAuthority\": \"SPAUTH0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n    \"subtaxa\": \"SUBTAXA0\",\r\n    \"subtaxaAuthority\": \"STAUTH0\",\r\n    \"synonyms\": [\r\n      {\r\n        \"synonym\": \"DRVNM0\",\r\n        \"type\": \"DRVNM\"\r\n      }\r\n    ]\r\n  }\r\n]"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/germplasm",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"germplasm"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						},
						{
							"name": "Verify response code and body entered subtaxa greater than max length",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"//Check status",
											"pm.test(\"Check messageType\", function () {",
											"    pm.expect(jsonData.metadata.status[0].messageType).to.eql(\"INFO\");",
											"});",
											"pm.test(\"Check message\", function () {",
											"    pm.expect(jsonData.metadata.status[0].message).to.eql(\"0 out of 1 germplasm created successfully.\");",
											"});",
											"pm.test(\"Check messageType\", function () {",
											"    pm.expect(jsonData.metadata.status[1].messageType).to.eql(\"ERROR\");",
											"});",
											"pm.test(\"Check message\", function () {",
											"    pm.expect(jsonData.metadata.status[1].message).to.eql(\"ERROR1 Germplasm at position 1 is invalid because attribute in subtaxa must not exceed length of 255.\");",
											"});",
											"//Check datafiles",
											"pm.test(\"Check datafiles\", function () {",
											"    pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n  {\r\n    \"accessionNumber\": \"ACCNO0\",\r\n    \"acquisitionDate\": \"2021-03-01\",\r\n    \"additionalInfo\": {\r\n      \"NOTE\": \"NOTE0\"\r\n    },\r\n    \"breedingMethodDbId\": 1,\r\n    \"commonCropName\": \"testCommonCrop\",\r\n    \"countryOfOriginCode\": \"UGA\",\r\n    \"defaultDisplayName\": \"MyGermplasm0\",\r\n    \"genus\": \"GENUS0\",\r\n    \"germplasmName\": \"MyGermplasm0\",\r\n    \"germplasmOrigin\": \"SORIG0\",\r\n    \"instituteCode\": \"INSTCODE0\",\r\n    \"instituteName\": \"INSTNAME0\",\r\n    \"pedigree\": \"AB0/CD0\",\r\n    \"seedSource\": \"Randomized Trial:TEST:0:0\",\r\n    \"species\": \"SPECIES0\",\r\n    \"speciesAuthority\": \"SPAUTH0\",\r\n    \"subtaxa\": \"SUBTAXA000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n    \"subtaxaAuthority\": \"STAUTH0\",\r\n    \"synonyms\": [\r\n      {\r\n        \"synonym\": \"DRVNM0\",\r\n        \"type\": \"DRVNM\"\r\n      }\r\n    ]\r\n  }\r\n]"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/germplasm",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"germplasm"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						},
						{
							"name": "Verify response code and body entered subtaxaAuthority greater than max length",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"//Check status",
											"pm.test(\"Check messageType\", function () {",
											"    pm.expect(jsonData.metadata.status[0].messageType).to.eql(\"INFO\");",
											"});",
											"pm.test(\"Check message\", function () {",
											"    pm.expect(jsonData.metadata.status[0].message).to.eql(\"0 out of 1 germplasm created successfully.\");",
											"});",
											"pm.test(\"Check messageType\", function () {",
											"    pm.expect(jsonData.metadata.status[1].messageType).to.eql(\"ERROR\");",
											"});",
											"pm.test(\"Check message\", function () {",
											"    pm.expect(jsonData.metadata.status[1].message).to.eql(\"ERROR1 Germplasm at position 1 is invalid because attribute in subtaxaAuthority must not exceed length of 255.\");",
											"});",
											"//Check datafiles",
											"pm.test(\"Check datafiles\", function () {",
											"    pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n  {\r\n    \"accessionNumber\": \"ACCNO0\",\r\n    \"acquisitionDate\": \"2021-03-01\",\r\n    \"additionalInfo\": {\r\n      \"NOTE\": \"NOTE0\"\r\n    },\r\n    \"breedingMethodDbId\": 1,\r\n    \"commonCropName\": \"testCommonCrop\",\r\n    \"countryOfOriginCode\": \"UGA\",\r\n    \"defaultDisplayName\": \"MyGermplasm0\",\r\n    \"genus\": \"GENUS0\",\r\n    \"germplasmName\": \"MyGermplasm0\",\r\n    \"germplasmOrigin\": \"SORIG0\",\r\n    \"instituteCode\": \"INSTCODE0\",\r\n    \"instituteName\": \"INSTNAME0\",\r\n    \"pedigree\": \"AB0/CD0\",\r\n    \"seedSource\": \"Randomized Trial:TEST:0:0\",\r\n    \"species\": \"SPECIES0\",\r\n    \"speciesAuthority\": \"SPAUTH0\",\r\n    \"subtaxa\": \"SUBTAXA0\",\r\n    \"subtaxaAuthority\": \"STAUTH0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n    \"synonyms\": [\r\n      {\r\n        \"synonym\": \"DRVNM0\",\r\n        \"type\": \"DRVNM\"\r\n      }\r\n    ]\r\n  }\r\n]"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/germplasm",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"germplasm"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						},
						{
							"name": "Verify response code and body entered synonyms greater than max length",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"//Check status",
											"pm.test(\"Check messageType\", function () {",
											"    pm.expect(jsonData.metadata.status[0].messageType).to.eql(\"INFO\");",
											"});",
											"pm.test(\"Check message\", function () {",
											"    pm.expect(jsonData.metadata.status[0].message).to.eql(\"0 out of 1 germplasm created successfully.\");",
											"});",
											"pm.test(\"Check messageType\", function () {",
											"    pm.expect(jsonData.metadata.status[1].messageType).to.eql(\"ERROR\");",
											"});",
											"pm.test(\"Check message\", function () {",
											"    pm.expect(jsonData.metadata.status[1].message).to.eql(\"ERROR1 Germplasm at position 1 is invalid because name in synonyms must not exceed length of 255.\");",
											"});",
											"//Check datafiles",
											"pm.test(\"Check datafiles\", function () {",
											"    pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n  {\r\n    \"accessionNumber\": \"ACCNO0\",\r\n    \"acquisitionDate\": \"2021-03-01\",\r\n    \"additionalInfo\": {\r\n      \"NOTE_AA_text\": \"NOTE0\"\r\n    },\r\n    \"breedingMethodDbId\": 1,\r\n    \"commonCropName\": \"testCommonCrop\",\r\n    \"countryOfOriginCode\": \"UGA\",\r\n    \"defaultDisplayName\": \"MyGermplasm0\",\r\n    \"genus\": \"GENUS0\",\r\n    \"germplasmName\": \"MyGermplasm0\",\r\n    \"germplasmOrigin\": \"SORIG0\",\r\n    \"instituteCode\": \"INSTCODE0\",\r\n    \"instituteName\": \"INSTNAME0\",\r\n    \"pedigree\": \"AB0/CD0\",\r\n    \"seedSource\": \"Randomized Trial:TEST:0:0\",\r\n    \"species\": \"SPECIES0\",\r\n    \"speciesAuthority\": \"SPAUTH0\",\r\n    \"subtaxa\": \"SUBTAXA0\",\r\n    \"subtaxaAuthority\": \"STAUTH0\",\r\n    \"synonyms\": [\r\n      {\r\n        \"synonym\": \"DRVNM00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n        \"type\": \"DRVNM\"\r\n      }\r\n    ]\r\n  }\r\n]"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/germplasm",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"germplasm"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						},
						{
							"name": "Verify response code and body entered invalid acquisitionDate format",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"//Check status",
											"pm.test(\"Check messageType\", function () {",
											"    pm.expect(jsonData.metadata.status[0].messageType).to.eql(\"INFO\");",
											"});",
											"pm.test(\"Check message\", function () {",
											"    pm.expect(jsonData.metadata.status[0].message).to.eql(\"0 out of 1 germplasm created successfully.\");",
											"});",
											"pm.test(\"Check messageType\", function () {",
											"    pm.expect(jsonData.metadata.status[1].messageType).to.eql(\"ERROR\");",
											"});",
											"pm.test(\"Check message\", function () {",
											"    pm.expect(jsonData.metadata.status[1].message).to.eql(\"ERROR1 Germplasm at position 1 is invalid because acquisition date must follow yyyy-MM-dd format.\");",
											"});",
											"//Check datafiles",
											"pm.test(\"Check datafiles\", function () {",
											"    pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n  {\r\n    \"accessionNumber\": \"ACCNO0\",\r\n    \"acquisitionDate\": \"20210301\",\r\n    \"additionalInfo\": {\r\n      \"NOTE\": \"NOTE0\"\r\n    },\r\n    \"breedingMethodDbId\": 1,\r\n    \"commonCropName\": \"testCommonCrop\",\r\n    \"countryOfOriginCode\": \"UGA\",\r\n    \"defaultDisplayName\": \"MyGermplasm0\",\r\n    \"genus\": \"GENUS0\",\r\n    \"germplasmName\": \"MyGermplasm0\",\r\n    \"germplasmOrigin\": \"SORIG0\",\r\n    \"instituteCode\": \"INSTCODE0\",\r\n    \"instituteName\": \"INSTNAME0\",\r\n    \"pedigree\": \"AB0/CD0\",\r\n    \"seedSource\": \"Randomized Trial:TEST:0:0\",\r\n    \"species\": \"SPECIES0\",\r\n    \"speciesAuthority\": \"SPAUTH0\",\r\n    \"subtaxa\": \"SUBTAXA0\",\r\n    \"subtaxaAuthority\": \"STAUTH0\",\r\n    \"synonyms\": [\r\n      {\r\n        \"synonym\": \"DRVNM0\",\r\n        \"type\": \"DRVNM\"\r\n      }\r\n    ]\r\n  }\r\n]"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/germplasm",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"germplasm"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						},
						{
							"name": "Verify response code and body entered non-existing breedingMethodDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"//Check status",
											"pm.test(\"Check messageType\", function () {",
											"    pm.expect(jsonData.metadata.status[0].messageType).to.eql(\"INFO\");",
											"});",
											"pm.test(\"Check message\", function () {",
											"    pm.expect(jsonData.metadata.status[0].message).to.eql(\"0 out of 1 germplasm created successfully.\");",
											"});",
											"pm.test(\"Check messageType\", function () {",
											"    pm.expect(jsonData.metadata.status[1].messageType).to.eql(\"ERROR\");",
											"});",
											"pm.test(\"Check message\", function () {",
											"    pm.expect(jsonData.metadata.status[1].message).to.eql(\"ERROR1 Germplasm at position 1 is invalid because specified Breeding method Id does not exist.\");",
											"});",
											"//Check datafiles",
											"pm.test(\"Check datafiles\", function () {",
											"    pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n  {\r\n    \"accessionNumber\": \"ACCNO0\",\r\n    \"acquisitionDate\": \"2021-03-01\",\r\n    \"additionalInfo\": {\r\n      \"NOTE\": \"NOTE0\"\r\n    },\r\n    \"breedingMethodDbId\": 999999,\r\n    \"commonCropName\": \"testCommonCrop\",\r\n    \"countryOfOriginCode\": \"UGA\",\r\n    \"defaultDisplayName\": \"MyGermplasm0\",\r\n    \"genus\": \"GENUS0\",\r\n    \"germplasmName\": \"MyGermplasm0\",\r\n    \"germplasmOrigin\": \"SORIG0\",\r\n    \"instituteCode\": \"INSTCODE0\",\r\n    \"instituteName\": \"INSTNAME0\",\r\n    \"pedigree\": \"AB0/CD0\",\r\n    \"seedSource\": \"Randomized Trial:TEST:0:0\",\r\n    \"species\": \"SPECIES0\",\r\n    \"speciesAuthority\": \"SPAUTH0\",\r\n    \"subtaxa\": \"SUBTAXA0\",\r\n    \"subtaxaAuthority\": \"STAUTH0\",\r\n    \"synonyms\": [\r\n      {\r\n        \"synonym\": \"DRVNM0\",\r\n        \"type\": \"DRVNM\"\r\n      }\r\n    ]\r\n  }\r\n]"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/germplasm",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"germplasm"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						},
						{
							"name": "Verify response code and body entered non-existing countryOfOriginCode",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"//Check status",
											"pm.test(\"Check messageType\", function () {",
											"    pm.expect(jsonData.metadata.status[0].messageType).to.eql(\"INFO\");",
											"});",
											"pm.test(\"Check message\", function () {",
											"    pm.expect(jsonData.metadata.status[0].message).to.eql(\"0 out of 1 germplasm created successfully.\");",
											"});",
											"pm.test(\"Check messageType\", function () {",
											"    pm.expect(jsonData.metadata.status[1].messageType).to.eql(\"ERROR\");",
											"});",
											"pm.test(\"Check message\", function () {",
											"    pm.expect(jsonData.metadata.status[1].message).to.eql(\"ERROR1 Germplasm at position 1 is invalid because specified Country of Origin does not exist.\");",
											"});",
											"//Check datafiles",
											"pm.test(\"Check datafiles\", function () {",
											"    pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n  {\r\n    \"accessionNumber\": \"ACCNO0\",\r\n    \"acquisitionDate\": \"2021-03-01\",\r\n    \"additionalInfo\": {\r\n      \"NOTE\": \"NOTE0\"\r\n    },\r\n    \"breedingMethodDbId\": 1,\r\n    \"commonCropName\": \"testCommonCrop\",\r\n    \"countryOfOriginCode\": \"UGAx\",\r\n    \"defaultDisplayName\": \"MyGermplasm0\",\r\n    \"genus\": \"GENUS0\",\r\n    \"germplasmName\": \"MyGermplasm0\",\r\n    \"germplasmOrigin\": \"SORIG0\",\r\n    \"instituteCode\": \"INSTCODE0\",\r\n    \"instituteName\": \"INSTNAME0\",\r\n    \"pedigree\": \"AB0/CD0\",\r\n    \"seedSource\": \"Randomized Trial:TEST:0:0\",\r\n    \"species\": \"SPECIES0\",\r\n    \"speciesAuthority\": \"SPAUTH0\",\r\n    \"subtaxa\": \"SUBTAXA0\",\r\n    \"subtaxaAuthority\": \"STAUTH0\",\r\n    \"synonyms\": [\r\n      {\r\n        \"synonym\": \"DRVNM0\",\r\n        \"type\": \"DRVNM\"\r\n      }\r\n    ]\r\n  }\r\n]"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/germplasm",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"germplasm"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "location-resource-brapi",
			"item": [
				{
					"name": "GET ​/{crop}​/brapi​/v1​/locations",
					"item": [
						{
							"name": "Verify response code and body when entered valid crop",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"pm.test(\"Check metadata details\", function () {",
											"    pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											"    pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											"    pm.expect(jsonData.metadata.pagination.totalCount).to.eql(5073);",
											"    pm.expect(jsonData.metadata.pagination.totalPages).to.eql(6);",
											"    pm.expect(jsonData.metadata.status).to.eql([]);",
											"    pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"pm.test(\"Check a country location\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[39].name).to.eql(\"Afghanistan\") &&",
											"    pm.expect(jsonData.result.data[39].locationType).to.eql(\"COUNTRY\");",
											"});",
											"",
											"var data = jsonData.result.data[999];",
											"pm.test(\"Check locationDbId\", function () {",
											"    pm.expect(data.locationDbId).to.eql(\"2993\");",
											"});",
											"",
											"pm.test(\"Check locationType\", function () {",
											"    pm.expect(data.locationType).to.eql(\"FIRST SUB-NATIONAL DIVISION\");",
											"});",
											"",
											"pm.test(\"Check name\", function () {",
											"    pm.expect(data.name).to.eql(\"Clifton\");",
											"});",
											"pm.test(\"Check abbreviation\", function () {",
											"    pm.expect(data.abbreviation).to.eql(\"NZ12\");",
											"});",
											"",
											"pm.test(\"Check countryCode\", function () {",
											"    pm.expect(data.countryCode).to.eql(\"NZL\");",
											"});",
											"pm.test(\"Check countryName\", function () {",
											"    pm.expect(data.countryName).to.eql(\"New Zealand\");",
											"});",
											"// pm.test(\"Check latitude\", function () {",
											"//     pm.expect(data.latitude).to.eql(-4);",
											"//  });",
											"// pm.test(\"Check longitude\", function () {",
											"//     pm.expect(data.longitude).to.eql(24);",
											"//  });",
											"",
											"pm.test(\"Check additionalInfo province\", function () {",
											"    pm.expect(data.additionalInfo.province).to.eql(\"Clifton\");",
											"});",
											"pm.test(\"Check location name\", function () {",
											"    pm.expect(data.locationName).to.eql(\"Clifton\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/locations",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"locations"
									]
								},
								"description": "GET ​/{crop}​/brapi​/v1​/locations"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered locationType",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"pm.test(\"Check metadata details\", function () {",
											"    pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											"    pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											"    pm.expect(jsonData.metadata.pagination.totalCount).to.eql(5);",
											"    pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											"    pm.expect(jsonData.metadata.status).to.eql([]);",
											"    pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"pm.test(\"Check if all locationTypes are correct\", function () {",
											"  var dataLength = jsonData.result.data.length;",
											"",
											"  for (i = 0; i < dataLength ; i++) {",
											"      var data = jsonData.result.data[i];",
											"    pm.expect(data.locationType).to.eql(\"BREEDING LOCATION\")",
											"  }",
											" ",
											"});    ",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/locations?locationType=breeding location",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"locations"
									],
									"query": [
										{
											"key": "locationType",
											"value": "breeding location"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v1​/locations"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered valid pagination details",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"pm.test(\"Verify returned metadata\", function () {",
											"    pm.expect(jsonData.metadata.pagination.currentPage).to.eql(2);",
											"    pm.expect(jsonData.metadata.pagination.pageSize).to.eql(5);",
											"    pm.expect(jsonData.metadata.pagination.totalCount).to.eql(5073);",
											"    pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1015);",
											"    pm.expect(jsonData.metadata.status).to.eql([]);",
											"    pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"pm.test(\"Check locationDbId of first record\", function () {",
											"    pm.expect(jsonData.result.data[0].locationDbId).to.eql(\"1732\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/locations?page=2&pageSize=5",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"locations"
									],
									"query": [
										{
											"key": "page",
											"value": "2"
										},
										{
											"key": "pageSize",
											"value": "5"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v1​/locations"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered pageSize greater than max",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"",
											"pm.test(\"Verify returned error message\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.errors[0].message).to.eql(\"Page size must between 1 and 10000.\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/locations?page=0&pageSize=10001",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"locations"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "10001"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v1​/locations"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered page number that does not exist for the given pageSize",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"",
											"pm.test(\"Verify returned error message\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.errors[0].message).to.eql(\"A total of 1 pages are available, so the page number must between 0 and 1 (exclusive).\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/locations?page=10000&pageSize=10000",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"locations"
									],
									"query": [
										{
											"key": "page",
											"value": "10000"
										},
										{
											"key": "pageSize",
											"value": "10000"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v1​/locations"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid crop",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"var jsonData = pm.response.json();",
											"pm.test(\"Check error message\", function () {",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Invalid crop invalid for URL:/invalid/brapi/v1/locations\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/invalid/brapi/v1/locations",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"invalid",
										"brapi",
										"v1",
										"locations"
									]
								},
								"description": "GET ​/{crop}​/brapi​/v1​/locations"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered non-existing locationType",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Check error message\", function () {",
											"    pm.expect(jsonData.metadata.status[0].message).to.eql(\"not found locations\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/locations?locationType=nonExisting",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"locations"
									],
									"query": [
										{
											"key": "locationType",
											"value": "nonExisting"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v1​/locations"
							},
							"response": []
						}
					]
				},
				{
					"name": "GET ​/{crop}​/brapi​/v2​/locations",
					"item": [
						{
							"name": "Verify response code and body when entered valid crop",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"pm.test(\"Check metadata details\", function () {",
											"    pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											"    pm.expect(jsonData.metadata.pagination.pageSize).to.eql(10000);",
											"    pm.expect(jsonData.metadata.pagination.totalCount).to.eql(5073);",
											"    pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											"    pm.expect(jsonData.metadata.status).to.eql([]);",
											"    pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"var data = jsonData.result.data[2095];",
											"pm.test(\"Check locationDbId\", function () {",
											"    pm.expect(data.locationDbId).to.eql(\"1717\");",
											"});",
											"",
											"pm.test(\"Check locationType\", function () {",
											"    pm.expect(data.locationType).to.eql(\"FIRST SUB-NATIONAL DIVISION\");",
											"});",
											"pm.test(\"Check abbreviation\", function () {",
											"    pm.expect(data.abbreviation).to.eql(\"CG04\");",
											"});",
											"",
											"pm.test(\"Check countryCode\", function () {",
											"    pm.expect(data.countryCode).to.eql(\"ZAR\");",
											"});",
											"pm.test(\"Check countryName\", function () {",
											"    pm.expect(data.countryName).to.eql(\"Zaire\");",
											"});",
											"pm.test(\"Check coordinates\", function () {",
											"    pm.expect(data.coordinates.geometry.coordinates[0]).to.eql(24);",
											"    pm.expect(data.coordinates.geometry.coordinates[1]).to.eql(-4);",
											"});",
											"",
											"pm.test(\"Check geometry type\", function () {",
											"    pm.expect(data.coordinates.geometry.type).to.eql(\"Point\");",
											"});",
											"pm.test(\"Check coordinates type\", function () {",
											"    pm.expect(data.coordinates.type).to.eql(\"Feature\");",
											"});",
											"",
											"pm.test(\"Check additionalInfo province\", function () {",
											"    pm.expect(data.additionalInfo.province).to.eql(\"Kasaioriental\");",
											"});",
											"pm.test(\"Check locationName\", function () {",
											"    pm.expect(data.locationName).to.eql(\"Kasaioriental\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/locations?page=0&pageSize=10000",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"locations"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "10000"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v1​/locations"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered locationType",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Check if all locationTypes are correct\", function () {",
											"  var dataLength = jsonData.result.data.length;",
											"",
											"  for (i = 0; i < dataLength ; i++) {",
											"      var data = jsonData.result.data[i];",
											"    pm.expect(data.locationType).to.eql(\"BREEDING LOCATION\")",
											"  }",
											" ",
											"});    ",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/locations?locationType=breeding location",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"locations"
									],
									"query": [
										{
											"key": "locationType",
											"value": "breeding location"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v2​/locations"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered locationDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Check if all locationDbIds are correct\", function () {",
											"  var dataLength = jsonData.result.data.length;",
											"",
											"  for (i = 0; i < dataLength ; i++) {",
											"      var data = jsonData.result.data[i];",
											"    pm.expect(data.locationDbId).to.eql(\"0\")",
											"  }",
											" ",
											"});    ",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/locations?locationDbId=0",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"locations"
									],
									"query": [
										{
											"key": "locationDbId",
											"value": "0"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v2​/locations"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered valid pagination details",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"pm.test(\"Verify returned metadata\", function () {",
											"    pm.expect(jsonData.metadata.pagination.currentPage).to.eql(2);",
											"    pm.expect(jsonData.metadata.pagination.pageSize).to.eql(5);",
											"    pm.expect(jsonData.metadata.pagination.totalCount).to.eql(5073);",
											"    pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1015);",
											"    pm.expect(jsonData.metadata.status).to.eql([]);",
											"    pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"pm.test(\"Check locationDbId of first record\", function () {",
											"    pm.expect(jsonData.result.data[0].locationDbId).to.eql(\"1732\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/locations?page=2&pageSize=5",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"locations"
									],
									"query": [
										{
											"key": "page",
											"value": "2"
										},
										{
											"key": "pageSize",
											"value": "5"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v2​/locations"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered pageSize greater than max",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"",
											"pm.test(\"Verify returned error message\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.errors[0].message).to.eql(\"Page size must between 1 and 10000.\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/locations?page=0&pageSize=10001",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"locations"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "10001"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v1​/locations"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered page number that does not exist for the given pageSize",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"",
											"pm.test(\"Verify returned error message\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.errors[0].message).to.eql(\"A total of 1 pages are available, so the page number must between 0 and 1 (exclusive).\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/locations?page=10000&pageSize=10000",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"locations"
									],
									"query": [
										{
											"key": "page",
											"value": "10000"
										},
										{
											"key": "pageSize",
											"value": "10000"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v1​/locations"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid crop",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"var jsonData = pm.response.json();",
											"pm.test(\"Check error message\", function () {",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Invalid crop invalid for URL:/invalid/brapi/v2/locations\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/invalid/brapi/v2/locations?page=0&pageSize=10000",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"invalid",
										"brapi",
										"v2",
										"locations"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "10000"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v1​/locations"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when non-existing locationType",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Check error message\", function () {",
											"    pm.expect(jsonData.metadata.status[0].message).to.eql(\"not found locations\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/locations?locationType=non-existing",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"locations"
									],
									"query": [
										{
											"key": "locationType",
											"value": "non-existing"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v2​/locations"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when non-existing locationDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Check error message\", function () {",
											"    pm.expect(jsonData.metadata.status[0].message).to.eql(\"not found locations\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/locations?locationDbId=10001",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"locations"
									],
									"query": [
										{
											"key": "locationDbId",
											"value": "10001"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v2​/locations"
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "program-resource-brapi",
			"item": [
				{
					"name": "GET ​/{crop}​/brapi​/v1​/programs",
					"item": [
						{
							"name": "Verify response code and body when entered programName",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(1);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"pm.test(\"Check programDbId\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0].programDbId).to.eql(\"c9e335d2-3057-4958-a43e-e38cf61d09ca\");",
											"});",
											"pm.test(\"Check programName\",function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0].name).to.eql(\"API Program\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/programs?programName=API Program",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"programs"
									],
									"query": [
										{
											"key": "programName",
											"value": "API Program"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v1​/programs"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered non-existing programName",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify result\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data).to.eql([]);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/programs?programName=non-existing program name",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"programs"
									],
									"query": [
										{
											"key": "programName",
											"value": "non-existing program name"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v1​/programs"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered crop name only",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(2);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"pm.test(\"Check programDbId\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0].programDbId).to.eql(\"c9e335d2-3057-4958-a43e-e38cf61d09ca\");",
											"});",
											"pm.test(\"Check programName\",function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0].name).to.eql(\"API Program\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/programs",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"programs"
									]
								},
								"description": "GET ​/{crop}​/brapi​/v1​/programs"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered pagination details",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(10000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(2);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"pm.test(\"Check programDbId\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0].programDbId).to.eql(\"c9e335d2-3057-4958-a43e-e38cf61d09ca\");",
											"});",
											"pm.test(\"Check programName\",function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0].name).to.eql(\"API Program\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/programs?page=0&pageSize=10000",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"programs"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "10000"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v1​/programs"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered pageSize greater than maximum",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"",
											"pm.test(\"Verify returned error message\",function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Page size must between 1 and 10000.\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/programs?page=0&pageSize=10001",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"programs"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "10001"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v1​/programs"
							},
							"response": []
						}
					]
				},
				{
					"name": "GET ​/{crop}​/brapi​/v2/programs",
					"item": [
						{
							"name": "Verify response code and body when entered valid crop name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"pm.test(\"Verify returned metadata\", function () {",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(2);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Check if all data has correct commonCropName\", function () {",
											"  var dataLength = jsonData.result.data.length;",
											"",
											"  for (i = 0; i < dataLength ; i++) {",
											"      var data = jsonData.result.data[i];",
											"      pm.expect(jsonData.result.data[0].commonCropName).to.eql(pm.environment.get(\"crop\"));",
											"  }",
											"});    ",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/programs",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"programs"
									]
								},
								"description": "GET ​/brapi​/v2/programs"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered programDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"pm.test(\"Verify returned metadata\", function () {",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(1);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Check if all data has correct programDbId\", function () {",
											"  var dataLength = jsonData.result.data.length;",
											"",
											"  for (i = 0; i < dataLength ; i++) {",
											"      var data = jsonData.result.data[i];",
											"      pm.expect(jsonData.result.data[0].programDbId).to.eql(pm.environment.get(\"api_program_id\"));",
											"  }",
											"});    ",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/programs?programDbId={{api_program_id}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"programs"
									],
									"query": [
										{
											"key": "programDbId",
											"value": "{{api_program_id}}"
										}
									]
								},
								"description": "GET ​/brapi​/v2/programs"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered programName",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"pm.test(\"Verify returned metadata\", function () {",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(1);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Check if all data has correct programName\", function () {",
											"  var dataLength = jsonData.result.data.length;",
											"",
											"  for (i = 0; i < dataLength ; i++) {",
											"      var data = jsonData.result.data[i];",
											"      pm.expect(jsonData.result.data[0].programName).to.eql(\"API Program\");",
											"  }",
											"});    ",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/programs?programName=API Program",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"programs"
									],
									"query": [
										{
											"key": "programName",
											"value": "API Program"
										}
									]
								},
								"description": "GET ​​/v2/programs"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered combination of valid parameters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"pm.test(\"Verify returned metadata\", function () {",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(1);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"var jsonData = pm.response.json();",
											"pm.test(\"Check programDbId\", function () {",
											"    pm.expect(jsonData.result.data[0].programDbId).to.eql(\"c9e335d2-3057-4958-a43e-e38cf61d09ca\");",
											"});",
											"pm.test(\"Check programName\", function () {",
											"    pm.expect(jsonData.result.data[0].programName).to.eql(\"API Program\");",
											"});",
											"pm.test(\"Check leadPersonDbId\", function () {",
											"    pm.expect(jsonData.result.data[0].leadPersonDbId).to.eql(\"1\");",
											"});",
											"pm.test(\"Check leadPersonName\", function () {",
											"    pm.expect(jsonData.result.data[0].leadPersonName).to.eql(\"admin\");",
											"});",
											"pm.test(\"Check commonCropName\", function () {",
											"    pm.expect(jsonData.result.data[0].commonCropName).to.eql(\"testdata\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/programs?programName=API Program&programDbId={{api_program_id}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"programs"
									],
									"query": [
										{
											"key": "programName",
											"value": "API Program"
										},
										{
											"key": "programDbId",
											"value": "{{api_program_id}}"
										}
									]
								},
								"description": "GET ​​/v2/programs"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered valid page no",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"pm.test(\"Verify returned metadata\", function () {",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(10000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(2);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Check if all data has correct programName\", function () {",
											"  var dataLength = jsonData.result.data.length;",
											"",
											"  for (i = 0; i < dataLength ; i++) {",
											"      var data = jsonData.result.data[i];",
											"      pm.expect(jsonData.result.data[0].programName).to.eql(\"API Program\");",
											"  }",
											"});    ",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/programs?page=0&pageSize=10000",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"programs"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "10000"
										}
									]
								},
								"description": "GET ​​/brapi/v2/programs"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered pageSize greater than max",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"",
											"pm.test(\"Verify returned error message\",function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Page size must between 1 and 10000.\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/programs?page=0&pageSize=10001",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"programs"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "10001"
										}
									]
								},
								"description": "GET ​​/brapi/v2/programs"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered page number that does not exist for the given pageSize",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"",
											"pm.test(\"Verify returned error message\",function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"A total of 1 pages are available, so the page number must between 0 and 1 (exclusive).\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/programs?page=10000&pageSize=10000",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"programs"
									],
									"query": [
										{
											"key": "page",
											"value": "10000"
										},
										{
											"key": "pageSize",
											"value": "10000"
										}
									]
								},
								"description": "GET ​​/brapi/v2/programs"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered non-existing crop",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Verify returned error message\",function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Invalid crop invalid for URL:/invalid/brapi/v2/programs\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/invalid/brapi/v2/programs",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"invalid",
										"brapi",
										"v2",
										"programs"
									]
								},
								"description": "GET ​/brapi​/v2/programs"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered non-existing programDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify result\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data).to.eql([]);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/programs?programDbId=invalid",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"programs"
									],
									"query": [
										{
											"key": "programDbId",
											"value": "invalid"
										}
									]
								},
								"description": "GET ​/brapi​/v2/programs"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered non-existing programName",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify result\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data).to.eql([]);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/programs?programName=invalid",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"programs"
									],
									"query": [
										{
											"key": "programName",
											"value": "invalid"
										}
									]
								},
								"description": "GET ​/brapi​/v2/programs"
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "sample-resource-brapi",
			"item": [
				{
					"name": "GET ​/{crop}​/brapi​/v1​/samples​/{sampleDbId}",
					"item": [
						{
							"name": "Verify response code and body when entered valid sampleId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"pm.test(\"Verify returned germplasmDbId\", function () {",
											"    pm.expect(jsonData.result.germplasmDbId).to.eql(\"PKWDG942cd372\");",
											"});",
											"pm.test(\"Verify returned observationUnitDbId\", function () {",
											"    pm.expect(jsonData.result.observationUnitDbId).to.eql(\"PKWDPtLOzD8Sz\");",
											"});",
											"pm.test(\"Verify returned plateDbId\", function () {",
											"    pm.expect(jsonData.result.plateDbId).to.eql(\"plate1\");",
											"});",
											"pm.test(\"Verify returned sampleTimestamp\", function () {",
											"    pm.expect(jsonData.result.sampleTimestamp).to.eql(\"2018-10-26T00:00:00.000+08:00\");",
											"});",
											"",
											"pm.test(\"Verify returned studyDbId\", function () {",
											"    pm.expect(jsonData.result.studyDbId).to.eql(\"1\");",
											"});",
											"",
											"pm.test(\"Verify returned takenBy\", function () {",
											"    pm.expect(jsonData.result.takenBy).to.eql(\"Admin Admin\");",
											"});",
											"pm.test(\"Verify returned sampleDbId\", function () {",
											"    pm.expect(jsonData.result.sampleDbId).to.eql(pm.environment.get(\"study_sampleId\"));",
											"});",
											"pm.test(\"Verify returned plateIndex\", function () {",
											"    pm.expect(jsonData.result.plateIndex).to.eql(1);",
											"});",
											"pm.test(\"Verify returned plotDbId\", function () {",
											"    pm.expect(jsonData.result.plotDbId).to.eql(\"1\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/samples/{{study_sampleId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"samples",
										"{{study_sampleId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid crop",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Check error message\", function () {",
											"  var jsonData = pm.response.json();",
											"  pm.expect(jsonData.errors[0].message).to.eql(\"Invalid crop invalid for URL:/invalid/brapi/v1/samples/PKWDS2ooiNApo\");",
											"});    ",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/invalid/brapi/v1/samples/{{study_sampleId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"invalid",
										"brapi",
										"v1",
										"samples",
										"{{study_sampleId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid sampleId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"pm.test(\"Verify returned error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.metadata.status[0].message).to.eql(\"not found sample\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/samples/{{string_not_found}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"samples",
										"{{string_not_found}}"
									]
								},
								"description": "GET /{crop}/brapi/v1/samples/{sampleId}"
							},
							"response": []
						}
					]
				},
				{
					"name": "GET ​/{crop}​/brapi​/v2​/samples",
					"item": [
						{
							"name": "Verify response code and body when entered valid crop name only",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"var jsonData = pm.response.json();\r",
											"var index = 0;\r",
											"pm.test(\"Verify returned metadata\", function () { \r",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);\r",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(10000);\r",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(238);\r",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);\r",
											" pm.expect(jsonData.metadata.status).to.eql([]);\r",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);\r",
											"});\r",
											"\r",
											"//Verify details of first record\r",
											"\r",
											"pm.test(\"Check externalReferences referenceID\", function () {\r",
											"    pm.expect(jsonData.result.data[index].externalReferences[0].referenceID).to.eql(\"sampleRefID\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check externalReferences referenceSource\", function () {\r",
											"    pm.expect(jsonData.result.data[index].externalReferences[0].referenceSource).to.eql(\"sampleRefSource\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check germplasmDbId\", function () {\r",
											"    pm.expect(jsonData.result.data[index].germplasmDbId).to.eql(\"PKWDG942cd372\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check observationUnitDbId\", function () {\r",
											"    pm.expect(jsonData.result.data[index].observationUnitDbId).to.eql(\"PKWDPtLOzD8Sz\");\r",
											"});\r",
											"pm.test(\"Check plateDbId\", function () {\r",
											"    pm.expect(jsonData.result.data[index].plateDbId).to.eql(\"plate1\");\r",
											"});\r",
											"pm.test(\"Check programDbId\", function () {\r",
											"    pm.expect(jsonData.result.data[index].programDbId).to.eql(pm.environment.get(\"api_program_id\"));\r",
											"});\r",
											"pm.test(\"Check sampleName\", function () {\r",
											"    pm.expect(jsonData.result.data[index].sampleName).to.eql(\"ACCNO1:1\");\r",
											"});\r",
											"pm.test(\"Check sampleTimestamp\", function () {\r",
											"    pm.expect(jsonData.result.data[index].sampleTimestamp).to.eql(\"2018-10-26T00:00:00.000+08:00\");\r",
											"});\r",
											"pm.test(\"Check studyDbId\", function () {\r",
											"    pm.expect(jsonData.result.data[index].studyDbId).to.eql(\"1\");\r",
											"});\r",
											"pm.test(\"Check takenBy\", function () {\r",
											"    pm.expect(jsonData.result.data[index].takenBy).to.eql(\"Admin Admin\");\r",
											"});\r",
											"pm.test(\"Check trialDbId\", function () {\r",
											"    pm.expect(jsonData.result.data[index].trialDbId).to.eql(\"3009\");\r",
											"});\r",
											"pm.test(\"Check well\", function () {\r",
											"    pm.expect(jsonData.result.data[index].well).to.eql(\"well1\");\r",
											"});\r",
											"pm.test(\"Check sampleDbId\", function () {\r",
											"    pm.expect(jsonData.result.data[index].sampleDbId).to.eql(\"PKWDS2ooiNApo\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/samples?page=0&pageSize=10000",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"samples"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "10000"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered valid input to all parameters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"var jsonData = pm.response.json();\r",
											"var index = 0;\r",
											"pm.test(\"Verify returned metadata\", function () { \r",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);\r",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(10000);\r",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(1);\r",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);\r",
											" pm.expect(jsonData.metadata.status).to.eql([]);\r",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);\r",
											"});\r",
											"\r",
											"//Verify details of first record\r",
											"\r",
											"pm.test(\"Check externalReferences referenceID\", function () {\r",
											"    pm.expect(jsonData.result.data[index].externalReferences[0].referenceID).to.eql(\"sampleRefID\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check externalReferences referenceSource\", function () {\r",
											"    pm.expect(jsonData.result.data[index].externalReferences[0].referenceSource).to.eql(\"sampleRefSource\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check germplasmDbId\", function () {\r",
											"    pm.expect(jsonData.result.data[index].germplasmDbId).to.eql(\"PKWDG942cd372\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check observationUnitDbId\", function () {\r",
											"    pm.expect(jsonData.result.data[index].observationUnitDbId).to.eql(\"PKWDPtLOzD8Sz\");\r",
											"});\r",
											"pm.test(\"Check plateDbId\", function () {\r",
											"    pm.expect(jsonData.result.data[index].plateDbId).to.eql(\"plate1\");\r",
											"});\r",
											"pm.test(\"Check programDbId\", function () {\r",
											"    pm.expect(jsonData.result.data[index].programDbId).to.eql(pm.environment.get(\"api_program_id\"));\r",
											"});\r",
											"pm.test(\"Check sampleName\", function () {\r",
											"    pm.expect(jsonData.result.data[index].sampleName).to.eql(\"ACCNO1:1\");\r",
											"});\r",
											"pm.test(\"Check sampleTimestamp\", function () {\r",
											"    pm.expect(jsonData.result.data[index].sampleTimestamp).to.eql(\"2018-10-26T00:00:00.000+08:00\");\r",
											"});\r",
											"pm.test(\"Check studyDbId\", function () {\r",
											"    pm.expect(jsonData.result.data[index].studyDbId).to.eql(\"1\");\r",
											"});\r",
											"pm.test(\"Check takenBy\", function () {\r",
											"    pm.expect(jsonData.result.data[index].takenBy).to.eql(\"Admin Admin\");\r",
											"});\r",
											"pm.test(\"Check trialDbId\", function () {\r",
											"    pm.expect(jsonData.result.data[index].trialDbId).to.eql(\"3009\");\r",
											"});\r",
											"pm.test(\"Check well\", function () {\r",
											"    pm.expect(jsonData.result.data[index].well).to.eql(\"well1\");\r",
											"});\r",
											"pm.test(\"Check sampleDbId\", function () {\r",
											"    pm.expect(jsonData.result.data[index].sampleDbId).to.eql(\"PKWDS2ooiNApo\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/samples?sampleDbId=PKWDS2ooiNApo&observationUnitDbId=PKWDPtLOzD8Sz&plateDbId=plate1&germplasmDbId=PKWDG942cd372&studyDbId=1&externalReferenceID=sampleRefID&externalReferenceSource=sampleRefSource&page=0&pageSize=10000",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"samples"
									],
									"query": [
										{
											"key": "sampleDbId",
											"value": "PKWDS2ooiNApo"
										},
										{
											"key": "observationUnitDbId",
											"value": "PKWDPtLOzD8Sz"
										},
										{
											"key": "plateDbId",
											"value": "plate1"
										},
										{
											"key": "germplasmDbId",
											"value": "PKWDG942cd372"
										},
										{
											"key": "studyDbId",
											"value": "1"
										},
										{
											"key": "externalReferenceID",
											"value": "sampleRefID"
										},
										{
											"key": "externalReferenceSource",
											"value": "sampleRefSource"
										},
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "10000"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered valid pagination details",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"var jsonData = pm.response.json();\r",
											"var index = 0;\r",
											"pm.test(\"Verify returned metadata\", function () { \r",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(1);\r",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(50);\r",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(238);\r",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(5);\r",
											" pm.expect(jsonData.metadata.status).to.eql([]);\r",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);\r",
											"});\r",
											"\r",
											"//Verify details of first record of page = 1\r",
											"\r",
											"\r",
											"pm.test(\"Check germplasmDbId\", function () {\r",
											"    pm.expect(jsonData.result.data[index].germplasmDbId).to.eql(\"PKWDG47fa785e\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check observationUnitDbId\", function () {\r",
											"    pm.expect(jsonData.result.data[index].observationUnitDbId).to.eql(\"95f1eb04-5a4b-4faa-801b-f06bb55efb3a\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check programDbId\", function () {\r",
											"    pm.expect(jsonData.result.data[index].programDbId).to.eql(pm.environment.get(\"api_program_id\"));\r",
											"});\r",
											"pm.test(\"Check sampleName\", function () {\r",
											"    pm.expect(jsonData.result.data[index].sampleName).to.eql(\"CML4:5\");\r",
											"});\r",
											"pm.test(\"Check sampleTimestamp\", function () {\r",
											"    pm.expect(jsonData.result.data[index].sampleTimestamp).to.eql(\"2019-07-25T00:00:00.000+08:00\");\r",
											"});\r",
											"pm.test(\"Check studyDbId\", function () {\r",
											"    pm.expect(jsonData.result.data[index].studyDbId).to.eql(\"13\");\r",
											"});\r",
											"pm.test(\"Check takenBy\", function () {\r",
											"    pm.expect(jsonData.result.data[index].takenBy).to.eql(\"Admin Admin\");\r",
											"});\r",
											"pm.test(\"Check trialDbId\", function () {\r",
											"    pm.expect(jsonData.result.data[index].trialDbId).to.eql(\"3058\");\r",
											"});\r",
											"pm.test(\"Check sampleDbId\", function () {\r",
											"    pm.expect(jsonData.result.data[index].sampleDbId).to.eql(\"PKWDSpxAfM5dX\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/samples?page=1&pageSize=50",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"samples"
									],
									"query": [
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "pageSize",
											"value": "50"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered valid sampleDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"var jsonData = pm.response.json();\r",
											"var index = 0;\r",
											"pm.test(\"Verify returned metadata\", function () { \r",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);\r",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);\r",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(1);\r",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);\r",
											" pm.expect(jsonData.metadata.status).to.eql([]);\r",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);\r",
											"});\r",
											"\r",
											"//Verify details of first record\r",
											"pm.test(\"Check sampleDbId\", function () {\r",
											"    for(var i = 0; i < jsonData.result.data[index].length; i++)\r",
											"    pm.expect(jsonData.result.data[index].sampleDbId).to.eql(\"PKWDS2ooiNApo\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/samples?sampleDbId=PKWDS2ooiNApo",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"samples"
									],
									"query": [
										{
											"key": "sampleDbId",
											"value": "PKWDS2ooiNApo"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered valid observationUnitDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"var jsonData = pm.response.json();\r",
											"var index = 0;\r",
											"pm.test(\"Verify returned metadata\", function () { \r",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);\r",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);\r",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(2);\r",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);\r",
											" pm.expect(jsonData.metadata.status).to.eql([]);\r",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);\r",
											"});\r",
											"\r",
											"//Verify details of first record\r",
											"pm.test(\"Check sampleDbId\", function () {\r",
											"    for(var i = 0; i < jsonData.result.data[index].length; i++)\r",
											"    pm.expect(jsonData.result.data[index].observationUnitDbId).to.eql(\"PKWDPtLOzD8Sz\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/samples?observationUnitDbId=PKWDPtLOzD8Sz",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"samples"
									],
									"query": [
										{
											"key": "observationUnitDbId",
											"value": "PKWDPtLOzD8Sz"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered valid plateDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"var jsonData = pm.response.json();\r",
											"var index = 0;\r",
											"pm.test(\"Verify returned metadata\", function () { \r",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);\r",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);\r",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(1);\r",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);\r",
											" pm.expect(jsonData.metadata.status).to.eql([]);\r",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);\r",
											"});\r",
											"\r",
											"//Verify details of first record\r",
											"pm.test(\"Check sampleDbId\", function () {\r",
											"    for(var i = 0; i < jsonData.result.data[index].length; i++)\r",
											"    pm.expect(jsonData.result.data[index].plateDbId).to.eql(\"plate1\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/samples?plateDbId=plate1",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"samples"
									],
									"query": [
										{
											"key": "plateDbId",
											"value": "plate1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered valid germplasmDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"var jsonData = pm.response.json();\r",
											"var index = 0;\r",
											"pm.test(\"Verify returned metadata\", function () { \r",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);\r",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);\r",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(10);\r",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);\r",
											" pm.expect(jsonData.metadata.status).to.eql([]);\r",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);\r",
											"});\r",
											"\r",
											"//Verify details of first record\r",
											"pm.test(\"Check sampleDbId\", function () {\r",
											"    for(var i = 0; i < jsonData.result.data[index].length; i++)\r",
											"    pm.expect(jsonData.result.data[index].germplasmDbId).to.eql(\"PKWDG942cd372\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/samples?germplasmDbId=PKWDG942cd372",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"samples"
									],
									"query": [
										{
											"key": "germplasmDbId",
											"value": "PKWDG942cd372"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered valid studyDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"var jsonData = pm.response.json();\r",
											"var index = 0;\r",
											"pm.test(\"Verify returned metadata\", function () { \r",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);\r",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);\r",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(43);\r",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);\r",
											" pm.expect(jsonData.metadata.status).to.eql([]);\r",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);\r",
											"});\r",
											"\r",
											"//Verify details of first record\r",
											"pm.test(\"Check sampleDbId\", function () {\r",
											"    for(var i = 0; i < jsonData.result.data[index].length; i++)\r",
											"    pm.expect(jsonData.result.data[index].studyDbId).to.eql(\"1\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/samples?studyDbId=1",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"samples"
									],
									"query": [
										{
											"key": "studyDbId",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered valid externalReferenceID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"var jsonData = pm.response.json();\r",
											"var index = 0;\r",
											"pm.test(\"Verify returned metadata\", function () { \r",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);\r",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);\r",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(1);\r",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);\r",
											" pm.expect(jsonData.metadata.status).to.eql([]);\r",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);\r",
											"});\r",
											"\r",
											"//Verify details of first record\r",
											"pm.test(\"Check sampleDbId\", function () {\r",
											"    for(var i = 0; i < jsonData.result.data[index].length; i++)\r",
											"    pm.test(\"Check externalReferences referenceID\", function () {\r",
											"    pm.expect(jsonData.result.data[index].externalReferences[0].referenceID).to.eql(\"sampleRefID\");\r",
											"});\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/samples?externalReferenceID=sampleRefID",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"samples"
									],
									"query": [
										{
											"key": "externalReferenceID",
											"value": "sampleRefID"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered valid externalReferenceSource",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"var jsonData = pm.response.json();\r",
											"var index = 0;\r",
											"pm.test(\"Verify returned metadata\", function () { \r",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);\r",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);\r",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(1);\r",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);\r",
											" pm.expect(jsonData.metadata.status).to.eql([]);\r",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);\r",
											"});\r",
											"\r",
											"//Verify details of first record\r",
											"pm.test(\"Check sampleDbId\", function () {\r",
											"    for(var i = 0; i < jsonData.result.data[index].length; i++)\r",
											"    pm.test(\"Check externalReferences referenceID\", function () {\r",
											"    pm.expect(jsonData.result.data[index].externalReferences[0].referenceSource).to.eql(\"sampleRefSource\");\r",
											"});\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/samples?externalReferenceSource=sampleRefSource",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"samples"
									],
									"query": [
										{
											"key": "externalReferenceSource",
											"value": "sampleRefSource"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid crop name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Check error message\", function () {\r",
											"  var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData.errors[0].message).to.eql(\"Invalid crop invalid for URL:/invalid/brapi/v2/samples\");\r",
											"});    \r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/invalid/brapi/v2/samples",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"invalid",
										"brapi",
										"v2",
										"samples"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid observationUnitDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check if data is empty\", function () {\r",
											"  var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData.result.data).to.eql([]);\r",
											"});    \r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/samples?observationUnitDbId=invalid",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"samples"
									],
									"query": [
										{
											"key": "observationUnitDbId",
											"value": "invalid"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid sampleDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check if data is empty\", function () {\r",
											"  var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData.result.data).to.eql([]);\r",
											"});    \r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/samples?sampleDbId=invalid",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"samples"
									],
									"query": [
										{
											"key": "sampleDbId",
											"value": "invalid"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid plateDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check if data is empty\", function () {\r",
											"  var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData.result.data).to.eql([]);\r",
											"});    \r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/samples?plateDbId=invalid",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"samples"
									],
									"query": [
										{
											"key": "plateDbId",
											"value": "invalid"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid germplasmDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check if data is empty\", function () {\r",
											"  var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData.result.data).to.eql([]);\r",
											"});    \r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/samples?germplasmDbId=invalid",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"samples"
									],
									"query": [
										{
											"key": "germplasmDbId",
											"value": "invalid"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid studyDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check if data is empty\", function () {\r",
											"  var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData.result.data).to.eql([]);\r",
											"});    \r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/samples?studyDbId=invalid",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"samples"
									],
									"query": [
										{
											"key": "studyDbId",
											"value": "invalid"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid externalReferenceID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check if data is empty\", function () {\r",
											"  var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData.result.data).to.eql([]);\r",
											"});    \r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/samples?externalReferenceID=invalid",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"samples"
									],
									"query": [
										{
											"key": "externalReferenceID",
											"value": "invalid"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid externalReferenceSource",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check if data is empty\", function () {\r",
											"  var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData.result.data).to.eql([]);\r",
											"});    \r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/samples?externalReferenceSource=invalid",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"samples"
									],
									"query": [
										{
											"key": "externalReferenceSource",
											"value": "invalid"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid page no",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 500\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Check error message\", function () {\r",
											"  var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData.errors[0].message).to.eql(\"A total of 1 pages are available, so the page number must between 0 and 1 (exclusive).\");\r",
											"});    \r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/samples?page=10000&pageSize=10000",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"samples"
									],
									"query": [
										{
											"key": "page",
											"value": "10000"
										},
										{
											"key": "pageSize",
											"value": "10000"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered pageSize greater than max limit",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"",
											"pm.test(\"Check error message\", function () {",
											"  var jsonData = pm.response.json();",
											"  pm.expect(jsonData.errors[0].message).to.eql(\"Page size must between 1 and 10000.\");",
											"});    ",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/samples?page=0&pageSize=10001",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"samples"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "10001"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "POST ​/{crop}​/brapi​/v2​/search​/samples",
					"item": [
						{
							"name": "Filter search by externalReferenceIDs",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"    var jsonData = pm.response.json();",
											"    pm.environment.unset(\"sample_search_externalRefID\");",
											"    pm.environment.set(\"sample_search_externalRefID\", jsonData.result.searchResultsDbId);",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"externalReferenceIDs\": [\n        \"sampleRefID\"\n    ]\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/search/samples",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"search",
										"samples"
									]
								},
								"description": "POST ​/{crop}​/brapi​/v2​/search​/observationunits"
							},
							"response": []
						},
						{
							"name": "Filter search by externalReferenceSources",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"    var jsonData = pm.response.json();",
											"    pm.environment.unset(\"sample_search_externalRefSource\");",
											"    pm.environment.set(\"sample_search_externalRefSource\", jsonData.result.searchResultsDbId);",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"externalReferenceSources\": [\n        \"sampleRefSource\"\n    ]\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/search/samples",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"search",
										"samples"
									]
								},
								"description": "POST ​/{crop}​/brapi​/v2​/search​/observationunits"
							},
							"response": []
						},
						{
							"name": "Filter search by germplasmDbIds",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"    var jsonData = pm.response.json();",
											"    pm.environment.unset(\"sample_search_germplasmDbId\");",
											"    pm.environment.set(\"sample_search_germplasmDbId\", jsonData.result.searchResultsDbId);",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"germplasmDbIds\": [\n        \"PKWDG942cd372\"\n    ]\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/search/samples",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"search",
										"samples"
									]
								},
								"description": "POST ​/{crop}​/brapi​/v2​/search​/observationunits"
							},
							"response": []
						},
						{
							"name": "Filter search by germplasmNames",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"  ",
											"    var jsonData = pm.response.json();",
											"    pm.environment.unset(\"sample_search_germplasmNames\");",
											"    pm.environment.set(\"sample_search_germplasmNames\", jsonData.result.searchResultsDbId);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"germplasmNames\": [\n        \"CML1\"\n    ]\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/search/samples",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"search",
										"samples"
									]
								},
								"description": "POST ​/{crop}​/brapi​/v2​/search​/observationunits"
							},
							"response": []
						},
						{
							"name": "Filter search by observationUnitDbIds",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"    var jsonData = pm.response.json();",
											"    pm.environment.unset(\"sample_search_observationUnitDbIds\");",
											"    pm.environment.set(\"sample_search_observationUnitDbIds\", jsonData.result.searchResultsDbId);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"observationUnitDbIds\": [\n        \"PKWDPtLOzD8Sz\"\n    ]\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/search/samples",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"search",
										"samples"
									]
								},
								"description": "POST ​/{crop}​/brapi​/v2​/search​/observationunits"
							},
							"response": []
						},
						{
							"name": "Filter search by plateDbIds",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"    var jsonData = pm.response.json();",
											"    pm.environment.unset(\"sample_search_plateDbIdsDbIds\");",
											"    pm.environment.set(\"sample_search_plateDbIdsDbIds\", jsonData.result.searchResultsDbId);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"plateDbIds\": [\n        \"plate1\"\n    ]\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/search/samples",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"search",
										"samples"
									]
								},
								"description": "POST ​/{crop}​/brapi​/v2​/search​/observationunits"
							},
							"response": []
						},
						{
							"name": "Filter search by sampleDbIds",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"    var jsonData = pm.response.json();",
											"    pm.environment.unset(\"sample_search_sampleDbIds\");",
											"    pm.environment.set(\"sample_search_sampleDbIds\", jsonData.result.searchResultsDbId);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"sampleDbIds\": [\n        \"PKWDS2ooiNApo\"\n    ]\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/search/samples",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"search",
										"samples"
									]
								},
								"description": "POST ​/{crop}​/brapi​/v2​/search​/observationunits"
							},
							"response": []
						},
						{
							"name": "Filter search by studyDbIds",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"    var jsonData = pm.response.json();",
											"    pm.environment.unset(\"sample_search_studyDbIds\");",
											"    pm.environment.set(\"sample_search_studyDbIds\", jsonData.result.searchResultsDbId);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"studyDbIds\": [\n        \"1\"\n    ]\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/search/samples",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"search",
										"samples"
									]
								},
								"description": "POST ​/{crop}​/brapi​/v2​/search​/observationunits"
							},
							"response": []
						},
						{
							"name": "Filter search by studyNames",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"    var jsonData = pm.response.json();",
											"    pm.environment.unset(\"sample_search_studyNames\");",
											"    pm.environment.set(\"sample_search_studyNames\", jsonData.result.searchResultsDbId);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"studyNames\": [\n        \"Study with Imported Cross Nursery 2018002 Environment Number 1\"\n    ]\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/search/samples",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"search",
										"samples"
									]
								},
								"description": "POST ​/{crop}​/brapi​/v2​/search​/observationunits"
							},
							"response": []
						},
						{
							"name": "Filter search by combination of all parameters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"    var jsonData = pm.response.json();",
											"    pm.environment.unset(\"sample_search_combined\");",
											"    pm.environment.set(\"sample_search_combined\", jsonData.result.searchResultsDbId);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"externalReferenceIDs\": [\n        \"sampleRefID\"\n    ],\n    \"externalReferenceSources\": [\n        \"sampleRefSource\"\n    ],\n    \"germplasmDbIds\": [\n        \"PKWDG942cd372\"\n    ],\n    \"germplasmNames\": [\n        \"CML1\"\n    ],\n    \"observationUnitDbIds\": [\n        \"PKWDPtLOzD8Sz\"\n    ],\n    \"plateDbIds\": [\n        \"plate1\"\n    ],\n    \"sampleDbIds\": [\n        \"PKWDS2ooiNApo\"\n    ],\n    \"studyDbIds\": [\n        \"1\"\n    ],\n    \"studyNames\": [\n        \"Study with Imported Cross Nursery 2018002 Environment Number 1\"\n    ]\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/search/samples",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"search",
										"samples"
									]
								},
								"description": "POST ​/{crop}​/brapi​/v2​/search​/observationunits"
							},
							"response": []
						},
						{
							"name": "Filter search by invalid externalReferenceIDs",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"externalReferenceIDs\": [\n        \"invalid\"\n    ]\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/search/samples",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"search",
										"samples"
									]
								},
								"description": "POST ​/{crop}​/brapi​/v2​/search​/observationunits"
							},
							"response": []
						},
						{
							"name": "Filter search by invalid externalReferenceSources",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"externalReferenceSources\": [\n        \"invalid\"\n    ]\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/search/samples",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"search",
										"samples"
									]
								},
								"description": "POST ​/{crop}​/brapi​/v2​/search​/observationunits"
							},
							"response": []
						},
						{
							"name": "Filter search by invalid germplasmDbIds",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"germplasmDbIds\": [\n        \"invalid\"\n    ]\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/search/samples",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"search",
										"samples"
									]
								},
								"description": "POST ​/{crop}​/brapi​/v2​/search​/observationunits"
							},
							"response": []
						},
						{
							"name": "Filter search by invalid germplasmNames",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"  ",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"germplasmNames\": [\n        \"invalid\"\n    ]\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/search/samples",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"search",
										"samples"
									]
								},
								"description": "POST ​/{crop}​/brapi​/v2​/search​/observationunits"
							},
							"response": []
						},
						{
							"name": "Filter search by invalid observationUnitDbIds",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"observationUnitDbIds\": [\n        \"invalid\"\n    ]\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/search/samples",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"search",
										"samples"
									]
								},
								"description": "POST ​/{crop}​/brapi​/v2​/search​/observationunits"
							},
							"response": []
						},
						{
							"name": "Filter search by invalid plateDbIds",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"plateDbIds\": [\n        \"invalid\"\n    ]\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/search/samples",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"search",
										"samples"
									]
								},
								"description": "POST ​/{crop}​/brapi​/v2​/search​/observationunits"
							},
							"response": []
						},
						{
							"name": "Filter search by invalid sampleDbIds",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"sampleDbIds\": [\n        \"invalid\"\n    ]\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/search/samples",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"search",
										"samples"
									]
								},
								"description": "POST ​/{crop}​/brapi​/v2​/search​/observationunits"
							},
							"response": []
						},
						{
							"name": "Filter search by invalid studyDbIds",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"studyDbIds\": [\n        \"invalid\"\n    ]\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/search/samples",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"search",
										"samples"
									]
								},
								"description": "POST ​/{crop}​/brapi​/v2​/search​/observationunits"
							},
							"response": []
						},
						{
							"name": "Filter search by invalid studyNames",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"studyNames\": [\n        \"Study with Imported Cross Nursery 2018002 Environment Number 1xxx\"\n    ]\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/search/samples",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"search",
										"samples"
									]
								},
								"description": "POST ​/{crop}​/brapi​/v2​/search​/observationunits"
							},
							"response": []
						}
					]
				},
				{
					"name": "GET ​/{crop}​/brapi​/v2​/search​/samples​/{searchResultsDbId}",
					"item": [
						{
							"name": "Verify results when entered searchResultsDbId that filters by externalReferenceIDs",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"var jsonData = pm.response.json();\r",
											"var index = 0;\r",
											"pm.test(\"Verify returned metadata\", function () { \r",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);\r",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);\r",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(1);\r",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);\r",
											" pm.expect(jsonData.metadata.status).to.eql([]);\r",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);\r",
											"});\r",
											"\r",
											"pm.test(\"Check if externalRefID is correct\", function () {\r",
											" for (var i = 0; i < jsonData.result.data.length; i++) { \r",
											"    pm.expect(jsonData.result.data[i].externalReferences[0].referenceID).to.eql(\"sampleRefID\");\r",
											" }\r",
											"\r",
											"});\r",
											"   "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/search/samples/{{sample_search_externalRefID}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"search",
										"samples",
										"{{sample_search_externalRefID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify results when entered searchResultsDbId that filters by externalReferenceSources",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"var jsonData = pm.response.json();\r",
											"var index = 0;\r",
											"pm.test(\"Verify returned metadata\", function () { \r",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);\r",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);\r",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(1);\r",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);\r",
											" pm.expect(jsonData.metadata.status).to.eql([]);\r",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);\r",
											"});\r",
											"\r",
											"pm.test(\"Check if externalReSource is correct\", function () {\r",
											" for (var i = 0; i < jsonData.result.data.length; i++) { \r",
											"    pm.expect(jsonData.result.data[i].externalReferences[0].referenceSource).to.eql(\"sampleRefSource\");\r",
											" }\r",
											"\r",
											"});\r",
											"   "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/search/samples/{{sample_search_externalRefSource}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"search",
										"samples",
										"{{sample_search_externalRefSource}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify results when entered searchResultsDbId that filters by germplasmDbIds",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"var jsonData = pm.response.json();\r",
											"var index = 0;\r",
											"pm.test(\"Verify returned metadata\", function () { \r",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);\r",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);\r",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(10);\r",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);\r",
											" pm.expect(jsonData.metadata.status).to.eql([]);\r",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);\r",
											"});\r",
											"\r",
											"pm.test(\"Check if germplasmDbIds is correct\", function () {\r",
											" for (var i = 0; i < jsonData.result.data.length; i++) { \r",
											"    pm.expect(jsonData.result.data[i].germplasmDbId).to.eql(\"PKWDG942cd372\");\r",
											" }\r",
											"\r",
											"});\r",
											"   "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/search/samples/{{sample_search_germplasmDbId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"search",
										"samples",
										"{{sample_search_germplasmDbId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify results when entered searchResultsDbId that filters by germplasmNames",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"var jsonData = pm.response.json();\r",
											"var index = 0;\r",
											"pm.test(\"Verify returned metadata\", function () { \r",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);\r",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);\r",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(10);\r",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);\r",
											" pm.expect(jsonData.metadata.status).to.eql([]);\r",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);\r",
											"});\r",
											"\r",
											"pm.test(\"Check if germplasmNames are correct\", function () {\r",
											" for (var i = 0; i < jsonData.result.data.length; i++) { \r",
											"//Note: Germplasm name is not available on the response body so the asserted value is germplasmDbId\r",
											"    pm.expect(jsonData.result.data[i].germplasmDbId).to.eql(\"PKWDG942cd372\");\r",
											" }\r",
											"\r",
											"});\r",
											"   "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/search/samples/{{sample_search_germplasmNames}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"search",
										"samples",
										"{{sample_search_germplasmNames}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify results when entered searchResultsDbId that filters by observationUnitDbIds",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"var jsonData = pm.response.json();\r",
											"var index = 0;\r",
											"pm.test(\"Verify returned metadata\", function () { \r",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);\r",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);\r",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(2);\r",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);\r",
											" pm.expect(jsonData.metadata.status).to.eql([]);\r",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);\r",
											"});\r",
											"\r",
											"pm.test(\"Check if observationUnitDbIds are correct\", function () {\r",
											" for (var i = 0; i < jsonData.result.data.length; i++) { \r",
											"    pm.expect(jsonData.result.data[i].observationUnitDbId).to.eql(\"PKWDPtLOzD8Sz\");\r",
											" }\r",
											"\r",
											"});\r",
											"   "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/search/samples/{{sample_search_observationUnitDbIds}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"search",
										"samples",
										"{{sample_search_observationUnitDbIds}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify results when entered searchResultsDbId that filters by plateDbIds",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"var jsonData = pm.response.json();\r",
											"var index = 0;\r",
											"pm.test(\"Verify returned metadata\", function () { \r",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);\r",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);\r",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(1);\r",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);\r",
											" pm.expect(jsonData.metadata.status).to.eql([]);\r",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);\r",
											"});\r",
											"\r",
											"pm.test(\"Check if plateDbIds are correct\", function () {\r",
											" for (var i = 0; i < jsonData.result.data.length; i++) { \r",
											"    pm.expect(jsonData.result.data[i].plateDbId).to.eql(\"plate1\");\r",
											" }\r",
											"\r",
											"});\r",
											"   "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/search/samples/{{sample_search_plateDbIdsDbIds}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"search",
										"samples",
										"{{sample_search_plateDbIdsDbIds}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify results when entered searchResultsDbId that filters by sampleDbIds",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"var jsonData = pm.response.json();\r",
											"var index = 0;\r",
											"pm.test(\"Verify returned metadata\", function () { \r",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);\r",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);\r",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(1);\r",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);\r",
											" pm.expect(jsonData.metadata.status).to.eql([]);\r",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);\r",
											"});\r",
											"\r",
											"pm.test(\"Check if sampleDbId are correct\", function () {\r",
											" for (var i = 0; i < jsonData.result.data.length; i++) { \r",
											"    pm.expect(jsonData.result.data[i].sampleDbId).to.eql(\"PKWDS2ooiNApo\");\r",
											" }\r",
											"\r",
											"});\r",
											"   "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/search/samples/{{sample_search_sampleDbIds}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"search",
										"samples",
										"{{sample_search_sampleDbIds}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify results when entered searchResultsDbId that filters by studyDbIds",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"var jsonData = pm.response.json();\r",
											"var index = 0;\r",
											"pm.test(\"Verify returned metadata\", function () { \r",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);\r",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);\r",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(43);\r",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);\r",
											" pm.expect(jsonData.metadata.status).to.eql([]);\r",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);\r",
											"});\r",
											"\r",
											"pm.test(\"Check if studyDbIds are correct\", function () {\r",
											" for (var i = 0; i < jsonData.result.data.length; i++) { \r",
											"    pm.expect(jsonData.result.data[i].studyDbId).to.eql(\"1\");\r",
											" }\r",
											"\r",
											"});\r",
											"   "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/search/samples/{{sample_search_studyDbIds}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"search",
										"samples",
										"{{sample_search_studyDbIds}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify results when entered searchResultsDbId that filters by studyNames",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"var jsonData = pm.response.json();\r",
											"var index = 0;\r",
											"pm.test(\"Verify returned metadata\", function () { \r",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);\r",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);\r",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(43);\r",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);\r",
											" pm.expect(jsonData.metadata.status).to.eql([]);\r",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);\r",
											"});\r",
											"\r",
											"pm.test(\"Check if studyNames are correct\", function () {\r",
											" for (var i = 0; i < jsonData.result.data.length; i++) { \r",
											"//Note: There is no displayed studyName in the response body so the asserted value is studyDbId\r",
											"    pm.expect(jsonData.result.data[i].studyDbId).to.eql(\"1\");\r",
											" }\r",
											"\r",
											"});\r",
											"   "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/search/samples/{{sample_search_studyNames}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"search",
										"samples",
										"{{sample_search_studyNames}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify results when entered searchResultsDbId that filters by combined parameters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"var jsonData = pm.response.json();\r",
											"var index = 0;\r",
											"pm.test(\"Verify returned metadata\", function () { \r",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);\r",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);\r",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(1);\r",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);\r",
											" pm.expect(jsonData.metadata.status).to.eql([]);\r",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);\r",
											"});\r",
											"\r",
											"pm.test(\"Check externalReferences referenceID\", function () {\r",
											"    pm.expect(jsonData.result.data[index].externalReferences[0].referenceID).to.eql(\"sampleRefID\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check externalReferences referenceSource\", function () {\r",
											"    pm.expect(jsonData.result.data[index].externalReferences[0].referenceSource).to.eql(\"sampleRefSource\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check germplasmDbId\", function () {\r",
											"    pm.expect(jsonData.result.data[index].germplasmDbId).to.eql(\"PKWDG942cd372\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check observationUnitDbId\", function () {\r",
											"    pm.expect(jsonData.result.data[index].observationUnitDbId).to.eql(\"PKWDPtLOzD8Sz\");\r",
											"});\r",
											"pm.test(\"Check plateDbId\", function () {\r",
											"    pm.expect(jsonData.result.data[index].plateDbId).to.eql(\"plate1\");\r",
											"});\r",
											"pm.test(\"Check programDbId\", function () {\r",
											"    pm.expect(jsonData.result.data[index].programDbId).to.eql(pm.environment.get(\"api_program_id\"));\r",
											"});\r",
											"pm.test(\"Check sampleName\", function () {\r",
											"    pm.expect(jsonData.result.data[index].sampleName).to.eql(\"ACCNO1:1\");\r",
											"});\r",
											"pm.test(\"Check sampleTimestamp\", function () {\r",
											"    pm.expect(jsonData.result.data[index].sampleTimestamp).to.eql(\"2018-10-26T00:00:00.000+08:00\");\r",
											"});\r",
											"pm.test(\"Check studyDbId\", function () {\r",
											"    pm.expect(jsonData.result.data[index].studyDbId).to.eql(\"1\");\r",
											"});\r",
											"pm.test(\"Check takenBy\", function () {\r",
											"    pm.expect(jsonData.result.data[index].takenBy).to.eql(\"Admin Admin\");\r",
											"});\r",
											"pm.test(\"Check trialDbId\", function () {\r",
											"    pm.expect(jsonData.result.data[index].trialDbId).to.eql(\"3009\");\r",
											"});\r",
											"pm.test(\"Check well\", function () {\r",
											"    pm.expect(jsonData.result.data[index].well).to.eql(\"well1\");\r",
											"});\r",
											"pm.test(\"Check sampleDbId\", function () {\r",
											"    pm.expect(jsonData.result.data[index].sampleDbId).to.eql(\"PKWDS2ooiNApo\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/search/samples/{{sample_search_combined}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"search",
										"samples",
										"{{sample_search_combined}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "study-resource-brapi",
			"item": [
				{
					"name": "GET ​/{crop}​/brapi​/v1​/studies",
					"item": [
						{
							"name": "Verify response code and body when entered crop only",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(15);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Verify returned data\", function () {",
											" var jsonData = pm.response.json();",
											" pm.expect(jsonData.result.data[0].active).to.eql(\"false\");",
											" pm.expect(jsonData.result.data[0].startDate).to.eql(\"2018-10-25\");",
											" pm.expect(jsonData.result.data[0].studyDbId).to.eql(pm.environment.get(\"nursery1StudyDbId\"));",
											" pm.expect(jsonData.result.data[0].studyName).to.eql(\"Study with Imported Cross Nursery 2018002 Environment Number 1\");",
											" pm.expect(jsonData.result.data[0].studyTypeDbId).to.eql(\"1\");",
											" pm.expect(jsonData.result.data[0].studyTypeName).to.eql(\"Nursery\");",
											" pm.expect(jsonData.result.data[0].seasons[0].season).to.eql(\"Dry season\");",
											" pm.expect(jsonData.result.data[0].seasons[0].seasonDbId).to.eql(\"10290\");",
											" pm.expect(jsonData.result.data[0].locationDbId).to.eql(\"9001\");",
											" pm.expect(jsonData.result.data[0].locationName).to.eql(\"Africa Rice Centre\");",
											" pm.expect(jsonData.result.data[0].programDbId).to.eql(\"c9e335d2-3057-4958-a43e-e38cf61d09ca\");",
											" pm.expect(jsonData.result.data[0].programName).to.eql(\"API Program\");",
											" pm.expect(jsonData.result.data[0].trialName).to.eql(\"Study with Imported Cross Nursery 2018002\");",
											" pm.expect(jsonData.result.data[0].trialDbId).to.eql(\"3009\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/studies",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"studies"
									]
								},
								"description": "GET /{crop}/brapi/v1/studies/{studyDbId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when filtered by studyTypeDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(7);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Verify returned data\", function () {",
											" var jsonData = pm.response.json();",
											" pm.expect(jsonData.result.data[0].active).to.eql(\"false\");",
											" pm.expect(jsonData.result.data[0].startDate).to.eql(\"2018-10-25\");",
											" pm.expect(jsonData.result.data[0].studyDbId).to.eql(pm.environment.get(\"nursery1StudyDbId\"));",
											" pm.expect(jsonData.result.data[0].studyName).to.eql(\"Study with Imported Cross Nursery 2018002 Environment Number 1\");",
											" pm.expect(jsonData.result.data[0].studyTypeDbId).to.eql(\"1\");",
											" pm.expect(jsonData.result.data[0].studyTypeName).to.eql(\"Nursery\");",
											" pm.expect(jsonData.result.data[0].seasons[0].season).to.eql(\"Dry season\");",
											" pm.expect(jsonData.result.data[0].seasons[0].seasonDbId).to.eql(\"10290\");",
											" pm.expect(jsonData.result.data[0].locationDbId).to.eql(\"9001\");",
											" pm.expect(jsonData.result.data[0].locationName).to.eql(\"Africa Rice Centre\");",
											" pm.expect(jsonData.result.data[0].programDbId).to.eql(\"c9e335d2-3057-4958-a43e-e38cf61d09ca\");",
											" pm.expect(jsonData.result.data[0].programName).to.eql(\"API Program\");",
											" pm.expect(jsonData.result.data[0].trialName).to.eql(\"Study with Imported Cross Nursery 2018002\");",
											" pm.expect(jsonData.result.data[0].trialDbId).to.eql(\"3009\");",
											"});",
											"",
											"",
											"pm.test(\"Check all studyDbIds are equal to input parameter\", function () {",
											"  var jsonData = pm.response.json();",
											"   var i;",
											"    for (i = 0; i < jsonData.result.data.length; i++) { ",
											"        pm.expect(jsonData.result.data[i].studyTypeDbId).to.eql(\"1\");",
											"    }",
											"});    ",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/studies?studyTypeDbId=1",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"studies"
									],
									"query": [
										{
											"key": "studyTypeDbId",
											"value": "1"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/studies/{studyDbId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when filtered by programDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(15);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Verify returned data\", function () {",
											" var jsonData = pm.response.json();",
											" pm.expect(jsonData.result.data[0].active).to.eql(\"false\");",
											" pm.expect(jsonData.result.data[0].startDate).to.eql(\"2018-10-25\");",
											" pm.expect(jsonData.result.data[0].studyDbId).to.eql(pm.environment.get(\"nursery1StudyDbId\"));",
											" pm.expect(jsonData.result.data[0].studyName).to.eql(\"Study with Imported Cross Nursery 2018002 Environment Number 1\");",
											" pm.expect(jsonData.result.data[0].studyTypeDbId).to.eql(\"1\");",
											" pm.expect(jsonData.result.data[0].studyTypeName).to.eql(\"Nursery\");",
											" pm.expect(jsonData.result.data[0].seasons[0].season).to.eql(\"Dry season\");",
											" pm.expect(jsonData.result.data[0].seasons[0].seasonDbId).to.eql(\"10290\");",
											" pm.expect(jsonData.result.data[0].locationDbId).to.eql(\"9001\");",
											" pm.expect(jsonData.result.data[0].locationName).to.eql(\"Africa Rice Centre\");",
											" pm.expect(jsonData.result.data[0].programDbId).to.eql(\"c9e335d2-3057-4958-a43e-e38cf61d09ca\");",
											" pm.expect(jsonData.result.data[0].programName).to.eql(\"API Program\");",
											" pm.expect(jsonData.result.data[0].trialName).to.eql(\"Study with Imported Cross Nursery 2018002\");",
											" pm.expect(jsonData.result.data[0].trialDbId).to.eql(\"3009\");",
											"});",
											"",
											"",
											"pm.test(\"Check all programDbId are equal to input parameter\", function () {",
											"  var jsonData = pm.response.json();",
											"   var i;",
											"    for (i = 0; i < jsonData.result.data.length; i++) { ",
											"    pm.expect(jsonData.result.data[i].programDbId).to.eql(pm.environment.get(\"api_program_id\"));",
											"    }",
											"});    ",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/studies?programDbId={{api_program_id}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"studies"
									],
									"query": [
										{
											"key": "programDbId",
											"value": "{{api_program_id}}"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/studies/{studyDbId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when filtered by locationDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(2);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Verify returned data\", function () {",
											" var jsonData = pm.response.json();",
											" pm.expect(jsonData.result.data[0].active).to.eql(\"false\");",
											" pm.expect(jsonData.result.data[0].startDate).to.eql(\"2018-10-25\");",
											" pm.expect(jsonData.result.data[0].studyDbId).to.eql(pm.environment.get(\"nursery1StudyDbId\"));",
											" pm.expect(jsonData.result.data[0].studyName).to.eql(\"Study with Imported Cross Nursery 2018002 Environment Number 1\");",
											" pm.expect(jsonData.result.data[0].studyTypeDbId).to.eql(\"1\");",
											" pm.expect(jsonData.result.data[0].studyTypeName).to.eql(\"Nursery\");",
											" pm.expect(jsonData.result.data[0].seasons[0].season).to.eql(\"Dry season\");",
											" pm.expect(jsonData.result.data[0].seasons[0].seasonDbId).to.eql(\"10290\");",
											" pm.expect(jsonData.result.data[0].locationDbId).to.eql(\"9001\");",
											" pm.expect(jsonData.result.data[0].locationName).to.eql(\"Africa Rice Centre\");",
											" pm.expect(jsonData.result.data[0].programDbId).to.eql(\"c9e335d2-3057-4958-a43e-e38cf61d09ca\");",
											" pm.expect(jsonData.result.data[0].programName).to.eql(\"API Program\");",
											" pm.expect(jsonData.result.data[0].trialName).to.eql(\"Study with Imported Cross Nursery 2018002\");",
											" pm.expect(jsonData.result.data[0].trialDbId).to.eql(\"3009\");",
											"});",
											"",
											"",
											"pm.test(\"Check all locationDbId are equal to input parameter\", function () {",
											"  var jsonData = pm.response.json();",
											"   var i;",
											"    for (i = 0; i < jsonData.result.data.length; i++) { ",
											"    pm.expect(jsonData.result.data[i].locationDbId).to.eql(\"9001\");",
											"    }",
											"});    ",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/studies?locationDbId=9001",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"studies"
									],
									"query": [
										{
											"key": "locationDbId",
											"value": "9001"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/studies/{studyDbId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when filtered by seasonDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(2);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Verify returned data\", function () {",
											" var jsonData = pm.response.json();",
											" pm.expect(jsonData.result.data[0].active).to.eql(\"false\");",
											" pm.expect(jsonData.result.data[0].startDate).to.eql(\"2018-10-25\");",
											" pm.expect(jsonData.result.data[0].studyDbId).to.eql(pm.environment.get(\"nursery1StudyDbId\"));",
											" pm.expect(jsonData.result.data[0].studyName).to.eql(\"Study with Imported Cross Nursery 2018002 Environment Number 1\");",
											" pm.expect(jsonData.result.data[0].studyTypeDbId).to.eql(\"1\");",
											" pm.expect(jsonData.result.data[0].studyTypeName).to.eql(\"Nursery\");",
											" pm.expect(jsonData.result.data[0].seasons[0].season).to.eql(\"Dry season\");",
											" pm.expect(jsonData.result.data[0].seasons[0].seasonDbId).to.eql(\"10290\");",
											" pm.expect(jsonData.result.data[0].locationDbId).to.eql(\"9001\");",
											" pm.expect(jsonData.result.data[0].locationName).to.eql(\"Africa Rice Centre\");",
											" pm.expect(jsonData.result.data[0].programDbId).to.eql(\"c9e335d2-3057-4958-a43e-e38cf61d09ca\");",
											" pm.expect(jsonData.result.data[0].programName).to.eql(\"API Program\");",
											" pm.expect(jsonData.result.data[0].trialName).to.eql(\"Study with Imported Cross Nursery 2018002\");",
											" pm.expect(jsonData.result.data[0].trialDbId).to.eql(\"3009\");",
											"});",
											"",
											"",
											"pm.test(\"Check all seasonDbId are equal to input parameter\", function () {",
											"  var jsonData = pm.response.json();",
											"   var i;",
											"    for (i = 0; i < jsonData.result.data.length; i++) { ",
											"    pm.expect(jsonData.result.data[i].seasons[0].seasonDbId).to.eql(\"10290\");",
											"    }",
											"});    ",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/studies?seasonDbId=10290",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"studies"
									],
									"query": [
										{
											"key": "seasonDbId",
											"value": "10290"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/studies/{studyDbId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when filtered by trialDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(2);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Verify returned data\", function () {",
											" var jsonData = pm.response.json();",
											" pm.expect(jsonData.result.data[0].active).to.eql(\"false\");",
											" pm.expect(jsonData.result.data[0].startDate).to.eql(\"2018-09-12\");",
											" pm.expect(jsonData.result.data[0].studyDbId).to.eql(pm.environment.get(\"studyDbId\"));",
											" pm.expect(jsonData.result.data[0].studyName).to.eql(\"Randomized Trial 20180003 Environment Number 1\");",
											" pm.expect(jsonData.result.data[0].studyTypeDbId).to.eql(\"6\");",
											" pm.expect(jsonData.result.data[0].studyTypeName).to.eql(\"Trial\");",
											" pm.expect(jsonData.result.data[0].seasons[0].season).to.eql(\"Dry season\");",
											" pm.expect(jsonData.result.data[0].seasons[0].seasonDbId).to.eql(\"10290\");",
											" pm.expect(jsonData.result.data[0].locationDbId).to.eql(\"9002\");",
											" pm.expect(jsonData.result.data[0].locationName).to.eql(\"Int Institute of Tropical Agriculture\");",
											" pm.expect(jsonData.result.data[0].programDbId).to.eql(\"c9e335d2-3057-4958-a43e-e38cf61d09ca\");",
											" pm.expect(jsonData.result.data[0].programName).to.eql(\"API Program\");",
											" pm.expect(jsonData.result.data[0].trialName).to.eql(\"Randomized Trial 20180003\");",
											" pm.expect(jsonData.result.data[0].trialDbId).to.eql(\"3013\");",
											"});",
											"",
											"",
											"pm.test(\"Check all trialDbId are equal to input parameter\", function () {",
											"  var jsonData = pm.response.json();",
											"   var i;",
											"    for (i = 0; i < jsonData.result.data.length; i++) { ",
											"    pm.expect(jsonData.result.data[i].trialDbId).to.eql(\"3013\");",
											"    }",
											"});    ",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/studies?trialDbId=3013",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"studies"
									],
									"query": [
										{
											"key": "trialDbId",
											"value": "3013"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/studies/{studyDbId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when filtered by studyDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(1);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Verify returned data\", function () {",
											" var jsonData = pm.response.json();",
											" pm.expect(jsonData.result.data[0].active).to.eql(\"false\");",
											" pm.expect(jsonData.result.data[0].startDate).to.eql(\"2018-10-25\");",
											" pm.expect(jsonData.result.data[0].studyDbId).to.eql(pm.environment.get(\"nursery1StudyDbId\"));",
											" pm.expect(jsonData.result.data[0].studyName).to.eql(\"Study with Imported Cross Nursery 2018002 Environment Number 1\");",
											" pm.expect(jsonData.result.data[0].studyTypeDbId).to.eql(\"1\");",
											" pm.expect(jsonData.result.data[0].studyTypeName).to.eql(\"Nursery\");",
											" pm.expect(jsonData.result.data[0].seasons[0].season).to.eql(\"Dry season\");",
											" pm.expect(jsonData.result.data[0].seasons[0].seasonDbId).to.eql(\"10290\");",
											" pm.expect(jsonData.result.data[0].locationDbId).to.eql(\"9001\");",
											" pm.expect(jsonData.result.data[0].locationName).to.eql(\"Africa Rice Centre\");",
											" pm.expect(jsonData.result.data[0].programDbId).to.eql(\"c9e335d2-3057-4958-a43e-e38cf61d09ca\");",
											" pm.expect(jsonData.result.data[0].programName).to.eql(\"API Program\");",
											" pm.expect(jsonData.result.data[0].trialName).to.eql(\"Study with Imported Cross Nursery 2018002\");",
											" pm.expect(jsonData.result.data[0].trialDbId).to.eql(\"3009\");",
											"});",
											"",
											"",
											"pm.test(\"Check all studyDbId are equal to input parameter\", function () {",
											"  var jsonData = pm.response.json();",
											"   var i;",
											"    for (i = 0; i < jsonData.result.data.length; i++) { ",
											"    pm.expect(jsonData.result.data[i].studyDbId).to.eql(pm.environment.get(\"nursery1StudyDbId\"));",
											"    }",
											"});    ",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/studies?studyDbId={{nursery1StudyDbId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"studies"
									],
									"query": [
										{
											"key": "studyDbId",
											"value": "{{nursery1StudyDbId}}"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/studies/{studyDbId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when filtered by active set to true",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(10);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Check all active are equal to input parameter\", function () {",
											"  var jsonData = pm.response.json();",
											"   var i;",
											"    for (i = 0; i < jsonData.result.data.length; i++) { ",
											"    pm.expect(jsonData.result.data[i].active).to.eql(\"true\");",
											"    }",
											"});    ",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/studies?active=true",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"studies"
									],
									"query": [
										{
											"key": "active",
											"value": "true"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/studies/{studyDbId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when filtered by active set to false",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"pm.test(\"Verify returned metadata\", function () {",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(5);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Check all active are equal to input parameter\", function () {",
											"  var jsonData = pm.response.json();",
											"   var i;",
											"    for (i = 0; i < jsonData.result.data.length; i++) { ",
											"    pm.expect(jsonData.result.data[i].active).to.eql(\"false\");",
											"    }",
											"});    ",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/studies?active=false",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"studies"
									],
									"query": [
										{
											"key": "active",
											"value": "false"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/studies/{studyDbId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when sortedBy trialDbId in asc order",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check if next trialDbId is greater or equal to previous trialDbId\", function () {",
											"  ",
											"    var jsonData = pm.response.json();",
											"    var data = jsonData.result.data;",
											"    var i;",
											"    var proceed = true",
											"    for (i = 0; i+1 < data.length ; i++) {",
											"        ",
											"           if((parseInt(data[i+1].trialDbId)) >= (parseInt(data[i].trialDbId))){",
											"               proceed = true;",
											"             ",
											"           }else{",
											"              proceed = false;",
											"     }",
											"   }",
											"       pm.expect(proceed).to.eql(true);   ",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/studies?sortBy=trialDbId&sortOrder=ASC",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"studies"
									],
									"query": [
										{
											"key": "sortBy",
											"value": "trialDbId"
										},
										{
											"key": "sortOrder",
											"value": "ASC"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/studies/{studyDbId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when sortedBy trialDbId in desc order",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check if next trialDbId is less than or equal to previous trialDbId\", function () {",
											"  ",
											"    var jsonData = pm.response.json();",
											"    var data = jsonData.result.data;",
											"    var i;",
											"    var proceed = true",
											"    for (i = 0; i+1 < data.length ; i++) {",
											"        ",
											"           if((parseInt(data[i+1].trialDbId)) <= (parseInt(data[i].trialDbId))){",
											"               proceed = true;",
											"              console.log(data[i+1].trialDbId + \"is less than/equal \" +data[i].trialDbId);",
											"           }else{",
											"              proceed = false;",
											"     }",
											"   }",
											"       pm.expect(proceed).to.eql(true);   ",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/studies?sortBy=trialDbId&sortOrder=DESC",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"studies"
									],
									"query": [
										{
											"key": "sortBy",
											"value": "trialDbId"
										},
										{
											"key": "sortOrder",
											"value": "DESC"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/studies/{studyDbId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid sortOrder value",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"",
											"pm.test(\"Verify returned error message\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.errors[0].message).to.eql(\"sortOrder should be either ASC or DESC\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/studies?sortBy=trialDbId&sortOrder=invalid",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"studies"
									],
									"query": [
										{
											"key": "sortBy",
											"value": "trialDbId"
										},
										{
											"key": "sortOrder",
											"value": "invalid"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/studies/{studyDbId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered pagination details",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(10000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(15);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Verify returned data\", function () {",
											" var jsonData = pm.response.json();",
											" pm.expect(jsonData.result.data[0].active).to.eql(\"false\");",
											" pm.expect(jsonData.result.data[0].startDate).to.eql(\"2018-10-25\");",
											" pm.expect(jsonData.result.data[0].studyDbId).to.eql(pm.environment.get(\"nursery1StudyDbId\"));",
											" pm.expect(jsonData.result.data[0].studyName).to.eql(\"Study with Imported Cross Nursery 2018002 Environment Number 1\");",
											" pm.expect(jsonData.result.data[0].studyTypeDbId).to.eql(\"1\");",
											" pm.expect(jsonData.result.data[0].studyTypeName).to.eql(\"Nursery\");",
											" pm.expect(jsonData.result.data[0].seasons[0].season).to.eql(\"Dry season\");",
											" pm.expect(jsonData.result.data[0].seasons[0].seasonDbId).to.eql(\"10290\");",
											" pm.expect(jsonData.result.data[0].locationDbId).to.eql(\"9001\");",
											" pm.expect(jsonData.result.data[0].locationName).to.eql(\"Africa Rice Centre\");",
											" pm.expect(jsonData.result.data[0].programDbId).to.eql(\"c9e335d2-3057-4958-a43e-e38cf61d09ca\");",
											" pm.expect(jsonData.result.data[0].programName).to.eql(\"API Program\");",
											" pm.expect(jsonData.result.data[0].trialName).to.eql(\"Study with Imported Cross Nursery 2018002\");",
											" pm.expect(jsonData.result.data[0].trialDbId).to.eql(\"3009\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/studies?page=0&pageSize=10000",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"studies"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "10000"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/studies/{studyDbId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid page",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"    pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"",
											"pm.test(\"Verify returned error message\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.errors[0].message).to.eql(\"A total of 1 pages are available, so the page number must between 0 and 1 (exclusive).\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/studies?page=1&pageSize=10000",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"studies"
									],
									"query": [
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "pageSize",
											"value": "10000"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/studies/{studyDbId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered pageSize greater than max",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"",
											"pm.test(\"Verify returned error message\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.errors[0].message).to.eql(\"Page size must between 1 and 10000.\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/studies?page=0&pageSize=10001",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"studies"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "10001"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/studies/{studyDbId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when filtered by combination of values",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(1);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Verify returned data\", function () {",
											" var jsonData = pm.response.json();",
											" pm.expect(jsonData.result.data[0].active).to.eql(\"false\");",
											" pm.expect(jsonData.result.data[0].startDate).to.eql(\"2018-09-12\");",
											" pm.expect(jsonData.result.data[0].studyDbId).to.eql(pm.environment.get(\"studyDbId\"));",
											" pm.expect(jsonData.result.data[0].studyName).to.eql(\"Randomized Trial 20180003 Environment Number 1\");",
											" pm.expect(jsonData.result.data[0].studyTypeDbId).to.eql(\"6\");",
											" pm.expect(jsonData.result.data[0].studyTypeName).to.eql(\"Trial\");",
											" pm.expect(jsonData.result.data[0].seasons[0].season).to.eql(\"Dry season\");",
											" pm.expect(jsonData.result.data[0].seasons[0].seasonDbId).to.eql(\"10290\");",
											" pm.expect(jsonData.result.data[0].locationDbId).to.eql(\"9002\");",
											" pm.expect(jsonData.result.data[0].locationName).to.eql(\"Int Institute of Tropical Agriculture\");",
											" pm.expect(jsonData.result.data[0].programDbId).to.eql(\"c9e335d2-3057-4958-a43e-e38cf61d09ca\");",
											" pm.expect(jsonData.result.data[0].programName).to.eql(\"API Program\");",
											" pm.expect(jsonData.result.data[0].trialName).to.eql(\"Randomized Trial 20180003\");",
											" pm.expect(jsonData.result.data[0].trialDbId).to.eql(\"3013\");",
											"});",
											"",
											"",
											"pm.test(\"Check all trialDbId are equal to input parameter\", function () {",
											"  var jsonData = pm.response.json();",
											"   var i;",
											"    for (i = 0; i < jsonData.result.data.length; i++) { ",
											"    pm.expect(jsonData.result.data[i].trialDbId).to.eql(\"3013\");",
											"    }",
											"});    ",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/studies?studyTypeDbId=6&programDbId={{api_program_id}}&locationDbId=9002&seasonDbId=10290&trialDbId=3013&studyDbId={{studyDbId}}&active=false",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"studies"
									],
									"query": [
										{
											"key": "studyTypeDbId",
											"value": "6"
										},
										{
											"key": "programDbId",
											"value": "{{api_program_id}}"
										},
										{
											"key": "locationDbId",
											"value": "9002"
										},
										{
											"key": "seasonDbId",
											"value": "10290"
										},
										{
											"key": "trialDbId",
											"value": "3013"
										},
										{
											"key": "studyDbId",
											"value": "{{studyDbId}}"
										},
										{
											"key": "active",
											"value": "false"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/studies/{studyDbId}"
							},
							"response": []
						}
					]
				},
				{
					"name": "GET ​/{crop}​/brapi​/v2​/studies",
					"item": [
						{
							"name": "Verify response code and body when entered crop only",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(15);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Verify returned data\", function () {",
											" var jsonData = pm.response.json();",
											" pm.expect(jsonData.result.data[0].active).to.eql(false);",
											" pm.expect(jsonData.result.data[0].startDate).to.eql(\"2018-10-25T00:00:00.000Z\");",
											" pm.expect(jsonData.result.data[0].studyDbId).to.eql(pm.environment.get(\"nursery1StudyDbId\"));",
											" pm.expect(jsonData.result.data[0].studyName).to.eql(\"Study with Imported Cross Nursery 2018002 Environment Number 1\");",
											" pm.expect(jsonData.result.data[0].studyTypeDbId).to.eql(\"1\");",
											" pm.expect(jsonData.result.data[0].studyTypeName).to.eql(\"Nursery\");",
											" pm.expect(jsonData.result.data[0].seasons[0]).to.eql(\"Dry season\");",
											" pm.expect(jsonData.result.data[0].locationDbId).to.eql(\"9001\");",
											" pm.expect(jsonData.result.data[0].locationName).to.eql(\"Africa Rice Centre\");",
											" pm.expect(jsonData.result.data[0].programDbId).to.eql(\"c9e335d2-3057-4958-a43e-e38cf61d09ca\");",
											" pm.expect(jsonData.result.data[0].programName).to.eql(\"API Program\");",
											" pm.expect(jsonData.result.data[0].trialName).to.eql(\"Study with Imported Cross Nursery 2018002\");",
											" pm.expect(jsonData.result.data[0].trialDbId).to.eql(\"3009\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/studies",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"studies"
									]
								},
								"description": "GET /{crop}/brapi/v1/studies/{studyDbId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when filtered by studyTypeDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(7);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Verify returned data\", function () {",
											" var jsonData = pm.response.json();",
											" pm.expect(jsonData.result.data[0].active).to.eql(false);",
											" pm.expect(jsonData.result.data[0].startDate).to.eql(\"2018-10-25T00:00:00.000Z\");",
											" pm.expect(jsonData.result.data[0].studyDbId).to.eql(pm.environment.get(\"nursery1StudyDbId\"));",
											" pm.expect(jsonData.result.data[0].studyName).to.eql(\"Study with Imported Cross Nursery 2018002 Environment Number 1\");",
											" pm.expect(jsonData.result.data[0].studyTypeDbId).to.eql(\"1\");",
											" pm.expect(jsonData.result.data[0].studyTypeName).to.eql(\"Nursery\");",
											" pm.expect(jsonData.result.data[0].seasons[0]).to.eql(\"Dry season\");",
											" pm.expect(jsonData.result.data[0].locationDbId).to.eql(\"9001\");",
											" pm.expect(jsonData.result.data[0].locationName).to.eql(\"Africa Rice Centre\");",
											" pm.expect(jsonData.result.data[0].programDbId).to.eql(\"c9e335d2-3057-4958-a43e-e38cf61d09ca\");",
											" pm.expect(jsonData.result.data[0].programName).to.eql(\"API Program\");",
											" pm.expect(jsonData.result.data[0].trialName).to.eql(\"Study with Imported Cross Nursery 2018002\");",
											" pm.expect(jsonData.result.data[0].trialDbId).to.eql(\"3009\");",
											"});",
											"",
											"",
											"pm.test(\"Check all studyDbIds are equal to input parameter\", function () {",
											"  var jsonData = pm.response.json();",
											"   var i;",
											"    for (i = 0; i < jsonData.result.data.length; i++) { ",
											"        pm.expect(jsonData.result.data[i].studyTypeDbId).to.eql(\"1\");",
											"    }",
											"});    ",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/studies?studyTypeDbId=1",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"studies"
									],
									"query": [
										{
											"key": "studyTypeDbId",
											"value": "1"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/studies/{studyDbId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when filtered by commonCropName",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(15);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"//Verify details of first returned data",
											"",
											"pm.test(\"Verify returned data\", function () {",
											" var jsonData = pm.response.json();",
											" pm.expect(jsonData.result.data[0].active).to.eql(false);",
											" pm.expect(jsonData.result.data[0].startDate).to.eql(\"2018-10-25T00:00:00.000Z\");",
											" pm.expect(jsonData.result.data[0].studyDbId).to.eql(pm.environment.get(\"nursery1StudyDbId\"));",
											" pm.expect(jsonData.result.data[0].studyName).to.eql(\"Study with Imported Cross Nursery 2018002 Environment Number 1\");",
											" pm.expect(jsonData.result.data[0].studyTypeDbId).to.eql(\"1\");",
											" pm.expect(jsonData.result.data[0].studyTypeName).to.eql(\"Nursery\");",
											" pm.expect(jsonData.result.data[0].seasons[0]).to.eql(\"Dry season\");",
											" pm.expect(jsonData.result.data[0].locationDbId).to.eql(\"9001\");",
											" pm.expect(jsonData.result.data[0].locationName).to.eql(\"Africa Rice Centre\");",
											" pm.expect(jsonData.result.data[0].programDbId).to.eql(\"c9e335d2-3057-4958-a43e-e38cf61d09ca\");",
											" pm.expect(jsonData.result.data[0].programName).to.eql(\"API Program\");",
											" pm.expect(jsonData.result.data[0].trialName).to.eql(\"Study with Imported Cross Nursery 2018002\");",
											" pm.expect(jsonData.result.data[0].trialDbId).to.eql(\"3009\");",
											"});",
											"",
											"pm.test(\"Check all commonCropName are equal to input parameter\", function () {",
											"  var jsonData = pm.response.json();",
											"   var i;",
											"    for (i = 0; i < jsonData.result.data.length; i++) { ",
											"        pm.expect(jsonData.result.data[i].commonCropName).to.eql(\"testdata\");",
											"    }",
											"});    ",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/studies?commonCropName=testdata",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"studies"
									],
									"query": [
										{
											"key": "commonCropName",
											"value": "testdata"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/studies/{studyDbId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when filtered by programDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(15);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Verify returned data\", function () {",
											" var jsonData = pm.response.json();",
											" pm.expect(jsonData.result.data[0].active).to.eql(false);",
											" pm.expect(jsonData.result.data[0].startDate).to.eql(\"2018-10-25T00:00:00.000Z\");",
											" pm.expect(jsonData.result.data[0].studyDbId).to.eql(pm.environment.get(\"nursery1StudyDbId\"));",
											" pm.expect(jsonData.result.data[0].studyName).to.eql(\"Study with Imported Cross Nursery 2018002 Environment Number 1\");",
											" pm.expect(jsonData.result.data[0].studyTypeDbId).to.eql(\"1\");",
											" pm.expect(jsonData.result.data[0].studyTypeName).to.eql(\"Nursery\");",
											" pm.expect(jsonData.result.data[0].seasons[0]).to.eql(\"Dry season\");",
											" pm.expect(jsonData.result.data[0].locationDbId).to.eql(\"9001\");",
											" pm.expect(jsonData.result.data[0].locationName).to.eql(\"Africa Rice Centre\");",
											" pm.expect(jsonData.result.data[0].programDbId).to.eql(\"c9e335d2-3057-4958-a43e-e38cf61d09ca\");",
											" pm.expect(jsonData.result.data[0].programName).to.eql(\"API Program\");",
											" pm.expect(jsonData.result.data[0].trialName).to.eql(\"Study with Imported Cross Nursery 2018002\");",
											" pm.expect(jsonData.result.data[0].trialDbId).to.eql(\"3009\");",
											"});",
											"",
											"",
											"pm.test(\"Check all programDbId are equal to input parameter\", function () {",
											"  var jsonData = pm.response.json();",
											"   var i;",
											"    for (i = 0; i < jsonData.result.data.length; i++) { ",
											"    pm.expect(jsonData.result.data[i].programDbId).to.eql(pm.environment.get(\"api_program_id\"));",
											"    }",
											"});    ",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/studies?programDbId={{api_program_id}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"studies"
									],
									"query": [
										{
											"key": "programDbId",
											"value": "{{api_program_id}}"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/studies/{studyDbId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when filtered by locationDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(2);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Verify returned data\", function () {",
											" var jsonData = pm.response.json();",
											" pm.expect(jsonData.result.data[0].active).to.eql(false);",
											" pm.expect(jsonData.result.data[0].startDate).to.eql(\"2018-10-25T00:00:00.000Z\");",
											" pm.expect(jsonData.result.data[0].studyDbId).to.eql(pm.environment.get(\"nursery1StudyDbId\"));",
											" pm.expect(jsonData.result.data[0].studyName).to.eql(\"Study with Imported Cross Nursery 2018002 Environment Number 1\");",
											" pm.expect(jsonData.result.data[0].studyTypeDbId).to.eql(\"1\");",
											" pm.expect(jsonData.result.data[0].studyTypeName).to.eql(\"Nursery\");",
											" pm.expect(jsonData.result.data[0].seasons[0]).to.eql(\"Dry season\");",
											" pm.expect(jsonData.result.data[0].locationDbId).to.eql(\"9001\");",
											" pm.expect(jsonData.result.data[0].locationName).to.eql(\"Africa Rice Centre\");",
											" pm.expect(jsonData.result.data[0].programDbId).to.eql(\"c9e335d2-3057-4958-a43e-e38cf61d09ca\");",
											" pm.expect(jsonData.result.data[0].programName).to.eql(\"API Program\");",
											" pm.expect(jsonData.result.data[0].trialName).to.eql(\"Study with Imported Cross Nursery 2018002\");",
											" pm.expect(jsonData.result.data[0].trialDbId).to.eql(\"3009\");",
											"});",
											"",
											"",
											"pm.test(\"Check all locationDbId are equal to input parameter\", function () {",
											"  var jsonData = pm.response.json();",
											"   var i;",
											"    for (i = 0; i < jsonData.result.data.length; i++) { ",
											"    pm.expect(jsonData.result.data[i].locationDbId).to.eql(\"9001\");",
											"    }",
											"});    ",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/studies?locationDbId=9001",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"studies"
									],
									"query": [
										{
											"key": "locationDbId",
											"value": "9001"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/studies/{studyDbId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when filtered by seasonDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(2);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Check all seasons are equal to input parameter\", function () {",
											"  var jsonData = pm.response.json();",
											"   var i;",
											"    for (i = 0; i < jsonData.result.data.length; i++) { ",
											"    pm.expect(jsonData.result.data[i].seasons[0]).to.eql(\"Dry season\");",
											"    }",
											"});    ",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/studies?seasonDbId=10290",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"studies"
									],
									"query": [
										{
											"key": "seasonDbId",
											"value": "10290"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/studies/{studyDbId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when filtered by trialDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(2);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Verify returned data\", function () {",
											" var jsonData = pm.response.json();",
											" pm.expect(jsonData.result.data[0].active).to.eql(false);",
											" pm.expect(jsonData.result.data[0].startDate).to.eql(\"2018-09-12T00:00:00.000Z\");",
											" pm.expect(jsonData.result.data[0].studyDbId).to.eql(pm.environment.get(\"studyDbId\"));",
											" pm.expect(jsonData.result.data[0].studyName).to.eql(\"Randomized Trial 20180003 Environment Number 1\");",
											" pm.expect(jsonData.result.data[0].studyTypeDbId).to.eql(\"6\");",
											" pm.expect(jsonData.result.data[0].studyTypeName).to.eql(\"Trial\");",
											" pm.expect(jsonData.result.data[0].seasons[0]).to.eql(\"Dry season\");",
											" pm.expect(jsonData.result.data[0].locationDbId).to.eql(\"9002\");",
											" pm.expect(jsonData.result.data[0].locationName).to.eql(\"Int Institute of Tropical Agriculture\");",
											" pm.expect(jsonData.result.data[0].programDbId).to.eql(\"c9e335d2-3057-4958-a43e-e38cf61d09ca\");",
											" pm.expect(jsonData.result.data[0].programName).to.eql(\"API Program\");",
											" pm.expect(jsonData.result.data[0].trialName).to.eql(\"Randomized Trial 20180003\");",
											" pm.expect(jsonData.result.data[0].trialDbId).to.eql(\"3013\");",
											"});",
											"",
											"",
											"pm.test(\"Check all trialDbId are equal to input parameter\", function () {",
											"  var jsonData = pm.response.json();",
											"   var i;",
											"    for (i = 0; i < jsonData.result.data.length; i++) { ",
											"    pm.expect(jsonData.result.data[i].trialDbId).to.eql(\"3013\");",
											"    }",
											"});    ",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/studies?trialDbId=3013",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"studies"
									],
									"query": [
										{
											"key": "trialDbId",
											"value": "3013"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/studies/{studyDbId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when filtered by trialName",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(2);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Verify returned data\", function () {",
											" var jsonData = pm.response.json();",
											" pm.expect(jsonData.result.data[0].active).to.eql(false);",
											" pm.expect(jsonData.result.data[0].startDate).to.eql(\"2018-09-12T00:00:00.000Z\");",
											" pm.expect(jsonData.result.data[0].studyDbId).to.eql(pm.environment.get(\"studyDbId\"));",
											" pm.expect(jsonData.result.data[0].studyName).to.eql(\"Randomized Trial 20180003 Environment Number 1\");",
											" pm.expect(jsonData.result.data[0].studyTypeDbId).to.eql(\"6\");",
											" pm.expect(jsonData.result.data[0].studyTypeName).to.eql(\"Trial\");",
											" pm.expect(jsonData.result.data[0].seasons[0]).to.eql(\"Dry season\");",
											" pm.expect(jsonData.result.data[0].locationDbId).to.eql(\"9002\");",
											" pm.expect(jsonData.result.data[0].locationName).to.eql(\"Int Institute of Tropical Agriculture\");",
											" pm.expect(jsonData.result.data[0].programDbId).to.eql(\"c9e335d2-3057-4958-a43e-e38cf61d09ca\");",
											" pm.expect(jsonData.result.data[0].programName).to.eql(\"API Program\");",
											" pm.expect(jsonData.result.data[0].trialName).to.eql(\"Randomized Trial 20180003\");",
											" pm.expect(jsonData.result.data[0].trialDbId).to.eql(\"3013\");",
											"});",
											"",
											"",
											"pm.test(\"Check all trialDbId are equal to input parameter\", function () {",
											"  var jsonData = pm.response.json();",
											"   var i;",
											"    for (i = 0; i < jsonData.result.data.length; i++) { ",
											"    pm.expect(jsonData.result.data[i].trialName).to.eql(\"Randomized Trial 20180003\");",
											"    }",
											"});    ",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/studies?trialName=Randomized Trial 20180003",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"studies"
									],
									"query": [
										{
											"key": "trialName",
											"value": "Randomized Trial 20180003"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/studies/{studyDbId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when filtered by studyPUI",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(1);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Verify returned data\", function () {",
											" var jsonData = pm.response.json();",
											" pm.expect(jsonData.result.data[0].active).to.eql(false);",
											" pm.expect(jsonData.result.data[0].startDate).to.eql(\"2018-09-12T00:00:00.000Z\");",
											" pm.expect(jsonData.result.data[0].studyDbId).to.eql(pm.environment.get(\"studyDbId\"));",
											" pm.expect(jsonData.result.data[0].studyName).to.eql(\"Randomized Trial 20180003 Environment Number 1\");",
											" pm.expect(jsonData.result.data[0].studyTypeDbId).to.eql(\"6\");",
											" pm.expect(jsonData.result.data[0].studyTypeName).to.eql(\"Trial\");",
											" pm.expect(jsonData.result.data[0].seasons[0]).to.eql(\"Dry season\");",
											" pm.expect(jsonData.result.data[0].locationDbId).to.eql(\"9002\");",
											" pm.expect(jsonData.result.data[0].locationName).to.eql(\"Int Institute of Tropical Agriculture\");",
											" pm.expect(jsonData.result.data[0].programDbId).to.eql(\"c9e335d2-3057-4958-a43e-e38cf61d09ca\");",
											" pm.expect(jsonData.result.data[0].programName).to.eql(\"API Program\");",
											" pm.expect(jsonData.result.data[0].trialName).to.eql(\"Randomized Trial 20180003\");",
											" pm.expect(jsonData.result.data[0].trialDbId).to.eql(\"3013\");",
											"});",
											"",
											"",
											"pm.test(\"Check all trialDbId are equal to input parameter\", function () {",
											"  var jsonData = pm.response.json();",
											"   var i;",
											"    for (i = 0; i < jsonData.result.data.length; i++) { ",
											"    pm.expect(jsonData.result.data[i].studyPUI).to.eql(\"PKWDPc6KcGtUA\");",
											"    }",
											"});    ",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/studies?studyPUI=PKWDPc6KcGtUA",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"studies"
									],
									"query": [
										{
											"key": "studyPUI",
											"value": "PKWDPc6KcGtUA"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/studies/{studyDbId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when filtered by germplasmDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(15);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Verify returned data\", function () {",
											" var jsonData = pm.response.json();",
											"   var i;",
											"   var trialDbIds = [\"3009\",\"3013\",\"3013\",\"3019\",\"3028\", \"3046\", \"3053\", \"3058\", \"3063\", \"3068\", \"3073\", \"3078\",\"3009\",\"3083\",\"3086\"]",
											" //Check trialDbIds of expected studies with specified germplasmDbId",
											"    for (i = 0; i < jsonData.result.data.length; i++) { ",
											"        pm.expect(jsonData.result.data[i].trialDbId).to.eql(trialDbIds[i]);",
											"    }",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/studies?germplasmDbid=PKWDG47fa785e",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"studies"
									],
									"query": [
										{
											"key": "germplasmDbid",
											"value": "PKWDG47fa785e"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/studies/{studyDbId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when filtered by observationVariableDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(15);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Verify returned data\", function () {",
											" var jsonData = pm.response.json();",
											"   var i;",
											"   var trialDbIds = [\"3009\",\"3013\",\"3013\",\"3019\",\"3028\", \"3046\", \"3053\", \"3058\", \"3063\", \"3068\", \"3073\", \"3078\",\"3009\",\"3083\",\"3086\"]",
											" //Check trialDbIds of expected studies with specified observationVariableDbId",
											"    for (i = 0; i < jsonData.result.data.length; i++) { ",
											"        pm.expect(jsonData.result.data[i].trialDbId).to.eql(trialDbIds[i]);",
											"    }",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/studies?observationVariablDbId=18010",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"studies"
									],
									"query": [
										{
											"key": "observationVariablDbId",
											"value": "18010"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/studies/{studyDbId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when filtered by studyDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(1);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Verify returned data\", function () {",
											" var jsonData = pm.response.json();",
											" pm.expect(jsonData.result.data[0].active).to.eql(false);",
											" pm.expect(jsonData.result.data[0].startDate).to.eql(\"2018-10-25T00:00:00.000Z\");",
											" pm.expect(jsonData.result.data[0].studyDbId).to.eql(pm.environment.get(\"nursery1StudyDbId\"));",
											" pm.expect(jsonData.result.data[0].studyName).to.eql(\"Study with Imported Cross Nursery 2018002 Environment Number 1\");",
											" pm.expect(jsonData.result.data[0].studyTypeDbId).to.eql(\"1\");",
											" pm.expect(jsonData.result.data[0].studyTypeName).to.eql(\"Nursery\");",
											" pm.expect(jsonData.result.data[0].seasons[0]).to.eql(\"Dry season\");",
											" pm.expect(jsonData.result.data[0].locationDbId).to.eql(\"9001\");",
											" pm.expect(jsonData.result.data[0].locationName).to.eql(\"Africa Rice Centre\");",
											" pm.expect(jsonData.result.data[0].programDbId).to.eql(\"c9e335d2-3057-4958-a43e-e38cf61d09ca\");",
											" pm.expect(jsonData.result.data[0].programName).to.eql(\"API Program\");",
											" pm.expect(jsonData.result.data[0].trialName).to.eql(\"Study with Imported Cross Nursery 2018002\");",
											" pm.expect(jsonData.result.data[0].trialDbId).to.eql(\"3009\");",
											"});",
											"",
											"",
											"pm.test(\"Check all studyDbId are equal to input parameter\", function () {",
											"  var jsonData = pm.response.json();",
											"   var i;",
											"    for (i = 0; i < jsonData.result.data.length; i++) { ",
											"    pm.expect(jsonData.result.data[i].studyDbId).to.eql(pm.environment.get(\"nursery1StudyDbId\"));",
											"    }",
											"});    ",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/studies?studyDbId={{nursery1StudyDbId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"studies"
									],
									"query": [
										{
											"key": "studyDbId",
											"value": "{{nursery1StudyDbId}}"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/studies/{studyDbId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when filtered by active set to true",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(10);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Check all active status are equal to input parameter\", function () {",
											"  var jsonData = pm.response.json();",
											"   var i;",
											"    for (i = 0; i < jsonData.result.data.length; i++) { ",
											"    pm.expect(jsonData.result.data[i].active).to.eql(true);",
											"    }",
											"});    ",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/studies?active=true",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"studies"
									],
									"query": [
										{
											"key": "active",
											"value": "true"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/studies/{studyDbId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when filtered by active set to false",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(5);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Check all active status are equal to input parameter\", function () {",
											"  var jsonData = pm.response.json();",
											"   var i;",
											"    for (i = 0; i < jsonData.result.data.length; i++) { ",
											"    pm.expect(jsonData.result.data[i].active).to.eql(false);",
											"    }",
											"});    "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/studies?active=false",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"studies"
									],
									"query": [
										{
											"key": "active",
											"value": "false"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/studies/{studyDbId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when sortedBy trialDbId in asc order",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(15);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"pm.test(\"Check if next trialDbId is greater or equal to previous trialDbId\", function () {",
											"  ",
											"    var jsonData = pm.response.json();",
											"    var data = jsonData.result.data;",
											"    var i;",
											"    var proceed = true",
											"    for (i = 0; i+1 < data.length ; i++) {",
											"        ",
											"           if((parseInt(data[i+1].trialDbId)) >= (parseInt(data[i].trialDbId))){",
											"               proceed = true;",
											"             ",
											"           }else{",
											"              proceed = false;",
											"     }",
											"   }",
											"       pm.expect(proceed).to.eql(true);   ",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/studies?sortBy=trialDbId&sortOrder=ASC",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"studies"
									],
									"query": [
										{
											"key": "sortBy",
											"value": "trialDbId"
										},
										{
											"key": "sortOrder",
											"value": "ASC"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/studies/{studyDbId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when sortedBy trialDbId in desc order",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check if next trialDbId is less than or equal to previous trialDbId\", function () {",
											"  ",
											"    var jsonData = pm.response.json();",
											"    var data = jsonData.result.data;",
											"    var i;",
											"    var proceed = true",
											"    for (i = 0; i+1 < data.length ; i++) {",
											"        ",
											"           if((parseInt(data[i+1].trialDbId)) <= (parseInt(data[i].trialDbId))){",
											"               proceed = true;",
											"              console.log(data[i+1].trialDbId + \"is less than/equal \" +data[i].trialDbId);",
											"           }else{",
											"              proceed = false;",
											"     }",
											"   }",
											"       pm.expect(proceed).to.eql(true);   ",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/studies?sortBy=trialDbId&sortOrder=DESC",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"studies"
									],
									"query": [
										{
											"key": "sortBy",
											"value": "trialDbId"
										},
										{
											"key": "sortOrder",
											"value": "DESC"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/studies/{studyDbId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when sortedBy studyTypeDbId asc order",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(15);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"pm.test(\"Check if next studyTypeDbId is greater or equal to previous studyTypeDbId\", function () {",
											"  ",
											"    var jsonData = pm.response.json();",
											"    var data = jsonData.result.data;",
											"    var i;",
											"    var proceed = true",
											"    for (i = 0; i+1 < data.length ; i++) {",
											"        ",
											"           if((parseInt(data[i+1].studyTypeDbId)) >= (parseInt(data[i].studyTypeDbId))){",
											"               proceed = true;",
											"             ",
											"           }else{",
											"              proceed = false;",
											"     }",
											"   }",
											"       pm.expect(proceed).to.eql(true);   ",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/studies?sortBy=studyTypeDbId&sortOrder=ASC",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"studies"
									],
									"query": [
										{
											"key": "sortBy",
											"value": "studyTypeDbId"
										},
										{
											"key": "sortOrder",
											"value": "ASC"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/studies/{studyDbId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when sortedBy studyTypeDbId desc order",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(15);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Check if next studyTypeDbId is less than or equal to previous studyTypeDbId\", function () {",
											"  ",
											"    var jsonData = pm.response.json();",
											"    var data = jsonData.result.data;",
											"    var i;",
											"    var proceed = true",
											"    for (i = 0; i+1 < data.length ; i++) {",
											"        ",
											"           if((parseInt(data[i+1].studyTypeDbId)) <= (parseInt(data[i].studyTypeDbId))){",
											"               proceed = true;",
											"           }else{",
											"              proceed = false;",
											"     }",
											"   }",
											"       pm.expect(proceed).to.eql(true);   ",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/studies?sortBy=studyTypeDbId&sortOrder=DESC",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"studies"
									],
									"query": [
										{
											"key": "sortBy",
											"value": "studyTypeDbId"
										},
										{
											"key": "sortOrder",
											"value": "DESC"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/studies/{studyDbId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when sortedBy locationDbId in asc order",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Check if next locationDbId is greater or equal to previous locationDbId\", function () {",
											"  ",
											"    var jsonData = pm.response.json();",
											"    var data = jsonData.result.data;",
											"    var i;",
											"    var proceed = true",
											"    for (i = 0; i+1 < data.length ; i++) {",
											"        ",
											"           if((parseInt(data[i+1].locationDbId)) >= (parseInt(data[i].locationDbId))){",
											"               proceed = true;",
											"             ",
											"           }else{",
											"              proceed = false;",
											"     }",
											"   }",
											"       pm.expect(proceed).to.eql(true);   ",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/studies?sortBy=locationDbId&sortOrder=ASC",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"studies"
									],
									"query": [
										{
											"key": "sortBy",
											"value": "locationDbId"
										},
										{
											"key": "sortOrder",
											"value": "ASC"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/studies/{studyDbId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when sortedBy locationDbId in desc order",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Check if next locationDbId is less than or equal to previous locationDbId\", function () {",
											"  ",
											"    var jsonData = pm.response.json();",
											"    var data = jsonData.result.data;",
											"    var i;",
											"    var proceed = true",
											"    for (i = 0; i+1 < data.length ; i++) {",
											"        ",
											"           if((parseInt(data[i+1].locationDbId)) <= (parseInt(data[i].locationDbId))){",
											"               proceed = true;",
											"              console.log(data[i+1].locationDbId + \"is less than/equal \" +data[i].locationDbId);",
											"           }else{",
											"              proceed = false;",
											"     }",
											"   }",
											"       pm.expect(proceed).to.eql(true);   ",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/studies?sortBy=locationDbId&sortOrder=DESC",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"studies"
									],
									"query": [
										{
											"key": "sortBy",
											"value": "locationDbId"
										},
										{
											"key": "sortOrder",
											"value": "DESC"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/studies/{studyDbId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when sortedBy seasonDbId in asc order",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check all locationDbId are equal to input parameter\", function () {",
											"  var jsonData = pm.response.json();",
											"   var trialDbIds = [\"3019\",\"3028\",\"3046\",\"3053\",\"3058\",\"3063\",\"3068\",\"3073\",\"3078\",\"3083\",\"3086\",\"3009\",\"3013\",\"3009\",\"3013\"]",
											"    for (var i = 0; i < jsonData.result.data.length; i++) { ",
											"        pm.expect(jsonData.result.data[i].trialDbId).to.eql(trialDbIds[i]);",
											"    }",
											"}); ",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/studies?sortBy=seasonDbId&sortOrder=ASC",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"studies"
									],
									"query": [
										{
											"key": "sortBy",
											"value": "seasonDbId"
										},
										{
											"key": "sortOrder",
											"value": "ASC"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/studies/{studyDbId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when sortedBy seasonDbId in desc order",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check all locationDbId are equal to input parameter\", function () {",
											"  var jsonData = pm.response.json();",
											"   var trialDbIds = [\"3009\",\"3013\",\"3009\",\"3013\",\"3019\",\"3028\",\"3046\",\"3053\",\"3058\",\"3063\",\"3068\",\"3073\",\"3078\",\"3083\",\"3086\"]",
											"    for (var i = 0; i < jsonData.result.data.length; i++) { ",
											"        pm.expect(jsonData.result.data[i].trialDbId).to.eql(trialDbIds[i]);",
											"    }",
											"}); ",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/studies?sortBy=seasonDbId&sortOrder=DESC",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"studies"
									],
									"query": [
										{
											"key": "sortBy",
											"value": "seasonDbId"
										},
										{
											"key": "sortOrder",
											"value": "DESC"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/studies/{studyDbId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when sortedBy programName in asc order",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check all locationDbId are equal to input parameter\", function () {",
											"  var jsonData = pm.response.json();",
											"   var trialDbIds = [\"3009\",\"3009\",\"3013\",\"3013\",\"3019\",\"3028\",\"3046\",\"3053\",\"3058\",\"3063\",\"3068\",\"3073\",\"3078\",\"3083\",\"3086\"]",
											"    for (var i = 0; i < jsonData.result.data.length; i++) { ",
											"        pm.expect(jsonData.result.data[i].trialDbId).to.eql(trialDbIds[i]);",
											"    }",
											"}); ",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/studies?sortBy=programName&sortOrder=ASC",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"studies"
									],
									"query": [
										{
											"key": "sortBy",
											"value": "programName"
										},
										{
											"key": "sortOrder",
											"value": "ASC"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/studies/{studyDbId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when sortedBy programName in desc order",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check all trialDbId are equal to input parameter\", function () {",
											"  var jsonData = pm.response.json();",
											"   var trialDbIds = [\"3009\",\"3009\",\"3013\",\"3013\",\"3019\",\"3028\",\"3046\",\"3053\",\"3058\",\"3063\",\"3068\",\"3073\",\"3078\",\"3083\",\"3086\"]",
											"    for (var i = 0; i < jsonData.result.data.length; i++) { ",
											"        pm.expect(jsonData.result.data[i].trialDbId).to.eql(trialDbIds[i]);",
											"    }",
											"}); ",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/studies?sortBy=programName&sortOrder=DESC",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"studies"
									],
									"query": [
										{
											"key": "sortBy",
											"value": "programName"
										},
										{
											"key": "sortOrder",
											"value": "DESC"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/studies/{studyDbId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when sortedBy programDbId in asc order",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"var _ = require('lodash');",
											"var itemsArray = jsonData.result.data;",
											"",
											"pm.test('Check if programDbId is in sorted order', () => {",
											"    var expectedSortedOrder = _.orderBy(itemsArray, ['data.programDbId'],['asc']);",
											"   pm.expect(itemsArray).to.eql(expectedSortedOrder);    ",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/studies?sortBy=programDbId&sortOrder=ASC",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"studies"
									],
									"query": [
										{
											"key": "sortBy",
											"value": "programDbId"
										},
										{
											"key": "sortOrder",
											"value": "ASC"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/studies/{studyDbId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when sortedBy programDbId in desc order",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"var _ = require('lodash');",
											"var itemsArray = jsonData.result.data;",
											"",
											"pm.test('Check if programDbId is in sorted order', () => {",
											"    var expectedSortedOrder = _.orderBy(itemsArray, ['data.programDbId'],['desc']);",
											"   pm.expect(itemsArray).to.eql(expectedSortedOrder);    ",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/studies?sortBy=programDbId&sortOrder=DESC",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"studies"
									],
									"query": [
										{
											"key": "sortBy",
											"value": "programDbId"
										},
										{
											"key": "sortOrder",
											"value": "DESC"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/studies/{studyDbId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when sortedBy trialName in asc order",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"var _ = require('lodash');",
											"var itemsArray = jsonData.result.data;",
											"",
											"pm.test('Check if programDbId is in sorted order', () => {",
											"    var expectedSortedOrder = _.orderBy(itemsArray, ['data.trialName'],['asc']);",
											"   pm.expect(itemsArray).to.eql(expectedSortedOrder);    ",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/studies?sortBy=trialName&sortOrder=ASC",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"studies"
									],
									"query": [
										{
											"key": "sortBy",
											"value": "trialName"
										},
										{
											"key": "sortOrder",
											"value": "ASC"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/studies/{studyDbId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when sortedBy trialName in desc order",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"var _ = require('lodash');",
											"var itemsArray = jsonData.result.data;",
											"",
											"pm.test('Check if programDbId is in sorted order', () => {",
											"    var expectedSortedOrder = _.orderBy(itemsArray, ['data.trialName'],['desc']);",
											"   pm.expect(itemsArray).to.eql(expectedSortedOrder);    ",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/studies?sortBy=trialName&sortOrder=DESC",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"studies"
									],
									"query": [
										{
											"key": "sortBy",
											"value": "trialName"
										},
										{
											"key": "sortOrder",
											"value": "DESC"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/studies/{studyDbId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid sortOrder value",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Verify returned error message\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.metadata.status[0].message).to.eql(\"sortOrder bad filter, expect asc/desc\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/studies?sortBy=trialDbId&sortOrder=invalid",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"studies"
									],
									"query": [
										{
											"key": "sortBy",
											"value": "trialDbId"
										},
										{
											"key": "sortOrder",
											"value": "invalid"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/studies/{studyDbId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid sortBy value",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Verify returned error message\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.metadata.status[0].message).to.eql(\"sortBy bad filter, expect studyDbId/trialDbId/programDbId/locationDbId/studyTypeDbId/trialName/programName/seasonDbId\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/studies?sortBy=invalid&sortOrder=ASC",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"studies"
									],
									"query": [
										{
											"key": "sortBy",
											"value": "invalid"
										},
										{
											"key": "sortOrder",
											"value": "ASC"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/studies/{studyDbId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered pagination details",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(10000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(15);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Verify returned data\", function () {",
											" var jsonData = pm.response.json();",
											" pm.expect(jsonData.result.data[0].active).to.eql(false);",
											" pm.expect(jsonData.result.data[0].startDate).to.eql(\"2018-10-25T00:00:00.000Z\");",
											" pm.expect(jsonData.result.data[0].studyDbId).to.eql(pm.environment.get(\"nursery1StudyDbId\"));",
											" pm.expect(jsonData.result.data[0].studyName).to.eql(\"Study with Imported Cross Nursery 2018002 Environment Number 1\");",
											" pm.expect(jsonData.result.data[0].studyTypeDbId).to.eql(\"1\");",
											" pm.expect(jsonData.result.data[0].studyTypeName).to.eql(\"Nursery\");",
											" pm.expect(jsonData.result.data[0].seasons[0]).to.eql(\"Dry season\");",
											" pm.expect(jsonData.result.data[0].locationDbId).to.eql(\"9001\");",
											" pm.expect(jsonData.result.data[0].locationName).to.eql(\"Africa Rice Centre\");",
											" pm.expect(jsonData.result.data[0].programDbId).to.eql(\"c9e335d2-3057-4958-a43e-e38cf61d09ca\");",
											" pm.expect(jsonData.result.data[0].programName).to.eql(\"API Program\");",
											" pm.expect(jsonData.result.data[0].trialName).to.eql(\"Study with Imported Cross Nursery 2018002\");",
											" pm.expect(jsonData.result.data[0].trialDbId).to.eql(\"3009\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/studies?page=0&pageSize=10000",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"studies"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "10000"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/studies/{studyDbId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid page",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"    pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"",
											"pm.test(\"Verify returned error message\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.errors[0].message).to.eql(\"A total of 1 pages are available, so the page number must between 0 and 1 (exclusive).\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/studies?page=1&pageSize=10000",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"studies"
									],
									"query": [
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "pageSize",
											"value": "10000"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/studies/{studyDbId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered pageSize greater than max",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"",
											"pm.test(\"Verify returned error message\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.errors[0].message).to.eql(\"Page size must between 1 and 10000.\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/studies?page=0&pageSize=10001",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"studies"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "10001"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/studies/{studyDbId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when filtered by combination of values",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(1);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Verify returned data\", function () {",
											" var jsonData = pm.response.json();",
											" pm.expect(jsonData.result.data[0].active).to.eql(false);",
											" pm.expect(jsonData.result.data[0].startDate).to.eql(\"2018-09-12T00:00:00.000Z\");",
											" pm.expect(jsonData.result.data[0].studyDbId).to.eql(pm.environment.get(\"studyDbId\"));",
											" pm.expect(jsonData.result.data[0].studyName).to.eql(\"Randomized Trial 20180003 Environment Number 1\");",
											" pm.expect(jsonData.result.data[0].studyTypeDbId).to.eql(\"6\");",
											" pm.expect(jsonData.result.data[0].studyTypeName).to.eql(\"Trial\");",
											" pm.expect(jsonData.result.data[0].seasons[0]).to.eql(\"Dry season\");",
											" pm.expect(jsonData.result.data[0].locationDbId).to.eql(\"9002\");",
											" pm.expect(jsonData.result.data[0].locationName).to.eql(\"Int Institute of Tropical Agriculture\");",
											" pm.expect(jsonData.result.data[0].programDbId).to.eql(\"c9e335d2-3057-4958-a43e-e38cf61d09ca\");",
											" pm.expect(jsonData.result.data[0].programName).to.eql(\"API Program\");",
											" pm.expect(jsonData.result.data[0].trialName).to.eql(\"Randomized Trial 20180003\");",
											" pm.expect(jsonData.result.data[0].trialDbId).to.eql(\"3013\");",
											"});",
											"",
											"",
											"pm.test(\"Check all trialDbId are equal to input parameter\", function () {",
											"  var jsonData = pm.response.json();",
											"   var i;",
											"    for (i = 0; i < jsonData.result.data.length; i++) { ",
											"    pm.expect(jsonData.result.data[i].trialDbId).to.eql(\"3013\");",
											"    }",
											"});    ",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/studies?studyTypeDbId=6&programDbId={{api_program_id}}&locationDbId=9002&seasonDbId=10290&trialDbId=3013&studyDbId={{studyDbId}}&active=false",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"studies"
									],
									"query": [
										{
											"key": "studyTypeDbId",
											"value": "6"
										},
										{
											"key": "programDbId",
											"value": "{{api_program_id}}"
										},
										{
											"key": "locationDbId",
											"value": "9002"
										},
										{
											"key": "seasonDbId",
											"value": "10290"
										},
										{
											"key": "trialDbId",
											"value": "3013"
										},
										{
											"key": "studyDbId",
											"value": "{{studyDbId}}"
										},
										{
											"key": "active",
											"value": "false"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/studies/{studyDbId}"
							},
							"response": []
						}
					]
				},
				{
					"name": "GET ​/{crop}​/brapi​/v1​/studies​/{studyDbId}",
					"item": [
						{
							"name": "Verify response code and body when entered valid studyDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(1);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(1);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Verify returned studyDbId\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.result.studyDbId).to.eql(pm.environment.get(\"studyDbId\"));",
											"});",
											"pm.test(\"Verify returned studyName\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.result.studyName).to.eql(\"Randomized Trial 20180003 Environment Number 1\");",
											"});",
											"",
											"pm.test(\"Verify returned studyType\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.result.studyType).to.eql(\"6\");",
											"});",
											"pm.test(\"Verify returned trialDbId\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.result.trialDbId).to.eql(pm.environment.get(\"trialStudyId\"));",
											"});",
											"",
											"pm.test(\"Verify returned startDate\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.result.startDate).to.eql(\"2018-09-12\");",
											"});",
											"pm.test(\"Verify returned active\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.result.active).to.eql(\"true\");",
											"});",
											"",
											"pm.test(\"Verify returned location details\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.result.location.locationDbId).to.eql(\"9002\");",
											" pm.expect(jsonData.result.location.locationType).to.eql(\"INTERNATIONAL AGRICULTURAL RESEARCH CENTER\");     ",
											" pm.expect(jsonData.result.location.name).to.eql(\"Int Institute of Tropical Agriculture\");",
											" pm.expect(jsonData.result.location.abbreviation).to.eql(\"IITA\"); ",
											" pm.expect(jsonData.result.location.countryCode).to.eql(\"NGA\"); ",
											" pm.expect(jsonData.result.location.countryName).to.eql(\"Nigeria\"); ",
											" pm.expect(jsonData.result.location.latitude).to.eql(7.28); ",
											" pm.expect(jsonData.result.location.longitude).to.eql(3.52);     ",
											" pm.expect(jsonData.result.location.altitude).to.eql(200);     ",
											" pm.expect(jsonData.result.location.additionalInfo.province).to.eql(\"Unknown\");  ",
											"            ",
											"});",
											"",
											"pm.test(\"Verify returned contacts\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.result.contacts[0].contactDbId).to.eql(\"120\");",
											" pm.expect(jsonData.result.contacts[0].name).to.eql(\"API Test User\");",
											" pm.expect(jsonData.result.contacts[0].email).to.eql(\"api@mailinator.com\");",
											" pm.expect(jsonData.result.contacts[0].type).to.eql(\"\");",
											" pm.expect(jsonData.result.contacts[0].orcid).to.eql(\"\");",
											"    ",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/studies/{{studyDbId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"studies",
										"{{studyDbId}}"
									]
								},
								"description": "GET /{crop}/brapi/v1/studies/{studyDbId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered non-existing studyDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Verify returned body\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.errors[0].message).to.eql(\"StudyDbId does not exist\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/studies/{{non_existing_study_id}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"studies",
										"{{non_existing_study_id}}"
									]
								},
								"description": "GET /{crop}/brapi/v1/studies/{studyDbId}"
							},
							"response": []
						}
					]
				},
				{
					"name": "GET ​/{crop}​/brapi​/v1​/studies​/{studyDbId}​/table",
					"item": [
						{
							"name": "Setup PapaParse",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.environment.unset(\"PapaLibrary\");\r",
											"pm.environment.set(\"PapaLibrary\", responseBody);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://raw.githubusercontent.com/mholt/PapaParse/master/papaparse.min.js",
									"protocol": "https",
									"host": [
										"raw",
										"githubusercontent",
										"com"
									],
									"path": [
										"mholt",
										"PapaParse",
										"master",
										"papaparse.min.js"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered valid inputs with no format",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"pm.test(\"Check trialDbId is correct\", function () {",
											"    pm.expect(jsonData.result.studyDbId).to.eql(JSON.parse(pm.environment.get(\"studyDbId\")));",
											"});",
											"",
											"pm.test(\"Check if header rows are correct\", function () {",
											"    var headerRows = [",
											"            \"year\",",
											"            \"studyDbId\",",
											"            \"studyName\",",
											"            \"locationDbId\",",
											"            \"locationName\",",
											"            \"germplasmDbId\",",
											"            \"germplasmName\",",
											"            \"observationUnitDbId\",",
											"            \"plotNumber\",",
											"            \"replicate\",",
											"            \"blockNumber\",",
											"            \"observationTimestamp\",",
											"            \"entryType\",",
											"            \"X\",",
											"            \"Y\",",
											"            \"obsUnitId\"",
											"    ];",
											"   for (var i = 0; i < jsonData.result.headerRow.length; i++) {",
											"    pm.expect(jsonData.result.headerRow[i]).to.eql(headerRows[i]);",
											"    }",
											"});",
											"pm.test(\"Check if observationVariableDbIds are correct\", function () {",
											"   var observationVariableDbIds = [18000,18010,18110];",
											"   for (var i = 0; i < jsonData.result.observationVariableDbIds.length; i++) {",
											"    pm.expect(jsonData.result.observationVariableDbIds[i]).to.eql(observationVariableDbIds[i]);",
											"    }",
											"});",
											"pm.test(\"Check if observationVariableNames are correct\", function () {",
											"   var observationVariableNames = [",
											"       \"Grain_yield\",",
											"       \"Biomas_yield\",",
											"       \"Grain_size\"",
											"       ];",
											"   for (var i = 0; i < jsonData.result.observationVariableNames.length; i++) {",
											"    pm.expect(jsonData.result.observationVariableNames[i]).to.eql(observationVariableNames[i]);",
											"    }",
											"});",
											"",
											"//Verify details of first observation row",
											"var index = 0;",
											"pm.test(\"Check year\", function () {",
											"    pm.expect(jsonData.result.data[index][0]).to.eql(\"2018\");",
											"});",
											"pm.test(\"Check studyDbId\", function () {",
											"    pm.expect(jsonData.result.data[index][1]).to.eql(\"2\");",
											"});",
											"pm.test(\"Check studyName\", function () {",
											"    pm.expect(jsonData.result.data[index][2]).to.eql(\"Randomized Trial 20180003 Environment Number 1\");",
											"});",
											"pm.test(\"Check locationDbId\", function () {",
											"    pm.expect(jsonData.result.data[index][3]).to.eql(\"9002\");",
											"});",
											"pm.test(\"Check locationName\", function () {",
											"    pm.expect(jsonData.result.data[index][4]).to.eql(\"WARDA-X\");",
											"});",
											"pm.test(\"Check germplasmDbId\", function () {",
											"    pm.expect(jsonData.result.data[index][5]).to.eql(\"PKWDG47fa785e\");",
											"});",
											"pm.test(\"Check germplasmName\", function () {",
											"    pm.expect(jsonData.result.data[index][6]).to.eql(\"GP4\");",
											"});",
											"pm.test(\"Check observationUnitDbId\", function () {",
											"    pm.expect(jsonData.result.data[index][7]).to.eql(\"1003\");",
											"});",
											"pm.test(\"Check plotNumber\", function () {",
											"    pm.expect(jsonData.result.data[index][8]).to.eql(\"1\");",
											"});",
											"pm.test(\"Check replicate\", function () {",
											"    pm.expect(jsonData.result.data[index][9]).to.eql(\"1\");",
											"});",
											"pm.test(\"Check blockNumber\", function () {",
											"    pm.expect(jsonData.result.data[index][10]).to.eql(null);",
											"});",
											"pm.test(\"Check observationTimestamp\", function () {",
											"    pm.expect(jsonData.result.data[index][11]).to.eql(\"UnknownTimestamp\");",
											"});",
											"pm.test(\"Check entryType\", function () {",
											"    pm.expect(jsonData.result.data[index][12]).to.eql(\"Check entry\");",
											"});",
											"pm.test(\"Check X\", function () {",
											"    pm.expect(jsonData.result.data[index][13]).to.eql(\"null\");",
											"});",
											"pm.test(\"Check Y\", function () {",
											"    pm.expect(jsonData.result.data[index][14]).to.eql(\"null\");",
											"});",
											"pm.test(\"Check obsUnitId\", function () {",
											"    pm.expect(jsonData.result.data[index][15]).to.eql(\"PKWDPivJxYgde\");",
											"});",
											"pm.test(\"Check observationVariableDbId1\", function () {",
											"    pm.expect(jsonData.result.data[index][16]).to.eql(\"4\");",
											"});",
											"pm.test(\"Check observationVariableDbIds2\", function () {",
											"    pm.expect(jsonData.result.data[index][17]).to.eql(\"18\");",
											"});",
											"pm.test(\"Check observationVariableDbIds3\", function () {",
											"    pm.expect(jsonData.result.data[index][18]).to.eql(\"95\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/studies/{{studyDbId}}/table",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"studies",
										"{{studyDbId}}",
										"table"
									]
								},
								"description": "GET /{crop}/brapi/v1/studies/{studyDbId}/table"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered valid inputs with csv format",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Execute downloaded PapaLibrary",
											"eval(pm.environment.get(\"PapaLibrary\"));",
											"var Papa = this.Papa;",
											"//Configure Papa to include headers",
											"const parserConfig = {",
											"    header : true",
											"};",
											"//Parse the response body",
											"var parsedBody = Papa.parse(responseBody, parserConfig);",
											"var data = parsedBody.data",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//Check first row details from parsed CSV",
											"var index = 0",
											"pm.test(\"Check year\", function () {",
											"    pm.expect(data[index].year).to.eql(\"2018\");",
											"});",
											"pm.test(\"Check studyDbId\", function () {",
											"    pm.expect(data[index].studyDbId).to.eql(\"2\");",
											"});",
											"pm.test(\"Check studyName\", function () {",
											"    pm.expect(data[index].studyName).to.eql(\"Randomized Trial 20180003 Environment Number 1\");",
											"});",
											"pm.test(\"Check locationDbId\", function () {",
											"    pm.expect(data[index].locationDbId).to.eql(\"9002\");",
											"});",
											"pm.test(\"Check locationName\", function () {",
											"    pm.expect(data[index].locationName).to.eql(\"WARDA-X\");",
											"});",
											"pm.test(\"Check germplasmDbId\", function () {",
											"    pm.expect(data[index].germplasmDbId).to.eql(\"PKWDG47fa785e\");",
											"});",
											"pm.test(\"Check germplasmName\", function () {",
											"    pm.expect(data[index].germplasmName).to.eql(\"GP4\");",
											"});",
											"pm.test(\"Check observationUnitDbId\", function () {",
											"    pm.expect(data[index].observationUnitDbId).to.eql(\"1003\");",
											"});",
											"pm.test(\"Check plotNumber\", function () {",
											"    pm.expect(data[index].plotNumber).to.eql(\"1\");",
											"});",
											"pm.test(\"Check replicate\", function () {",
											"    pm.expect(data[index].replicate).to.eql(\"1\");",
											"});",
											"pm.test(\"Check blockNumber\", function () {",
											"    pm.expect(data[index].blockNumber).to.eql(\"\");",
											"});",
											"pm.test(\"Check observationTimestamp\", function () {",
											"    pm.expect(data[index].observationTimestamp).to.eql(\"UnknownTimestamp\");",
											"});",
											"pm.test(\"Check entryType\", function () {",
											"    pm.expect(data[index].entryType).to.eql(\"Check entry\");",
											"});",
											"pm.test(\"Check entryType\", function () {",
											"    pm.expect(data[index].entryType).to.eql(\"Check entry\");",
											"});",
											"pm.test(\"Check X\", function () {",
											"    pm.expect(data[index].entryType).to.eql(\"Check entry\");",
											"});",
											"pm.test(\"Check Y\", function () {",
											"    pm.expect(data[index].entryType).to.eql(\"Check entry\");",
											"});",
											"pm.test(\"Check obsUnitId\", function () {",
											"    pm.expect(data[index].obsUnitId).to.eql(\"PKWDPivJxYgde\");",
											"});",
											"pm.test(\"Check Grain_yield|18000\", function () {",
											"    pm.expect(data[index]['Grain_yield|18000']).to.eql(\"4\");",
											"});",
											"pm.test(\"Check Biomas_yield|18010\", function () {",
											"    pm.expect(data[index]['Biomas_yield|18010']).to.eql(\"18\");",
											"});",
											"pm.test(\"Check Grain_size|18110\", function () {",
											"    pm.expect(data[index]['Grain_size|18110']).to.eql(\"95\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/studies/{{studyDbId}}/table?format=csv",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"studies",
										"{{studyDbId}}",
										"table"
									],
									"query": [
										{
											"key": "format",
											"value": "csv"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/studies/{studyDbId}/table"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered valid inputs with tsv format",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Execute downloaded PapaLibrary",
											"eval(pm.environment.get(\"PapaLibrary\"));",
											"var Papa = this.Papa;",
											"//Configure Papa to include headers",
											"const parserConfig = {",
											"    header : true",
											"};",
											"//Parse the response body",
											"var parsedBody = Papa.parse(responseBody, parserConfig);",
											"var data = parsedBody.data",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//Check first row details from parsed CSV",
											"var index = 0",
											"pm.test(\"Check year\", function () {",
											"    pm.expect(data[index].year).to.eql(\"2018\");",
											"});",
											"pm.test(\"Check studyDbId\", function () {",
											"    pm.expect(data[index].studyDbId).to.eql(\"2\");",
											"});",
											"pm.test(\"Check studyName\", function () {",
											"    pm.expect(data[index].studyName).to.eql(\"Randomized Trial 20180003 Environment Number 1\");",
											"});",
											"pm.test(\"Check locationDbId\", function () {",
											"    pm.expect(data[index].locationDbId).to.eql(\"9002\");",
											"});",
											"pm.test(\"Check locationName\", function () {",
											"    pm.expect(data[index].locationName).to.eql(\"WARDA-X\");",
											"});",
											"pm.test(\"Check germplasmDbId\", function () {",
											"    pm.expect(data[index].germplasmDbId).to.eql(\"PKWDG47fa785e\");",
											"});",
											"pm.test(\"Check germplasmName\", function () {",
											"    pm.expect(data[index].germplasmName).to.eql(\"GP4\");",
											"});",
											"pm.test(\"Check observationUnitDbId\", function () {",
											"    pm.expect(data[index].observationUnitDbId).to.eql(\"1003\");",
											"});",
											"pm.test(\"Check plotNumber\", function () {",
											"    pm.expect(data[index].plotNumber).to.eql(\"1\");",
											"});",
											"pm.test(\"Check replicate\", function () {",
											"    pm.expect(data[index].replicate).to.eql(\"1\");",
											"});",
											"pm.test(\"Check blockNumber\", function () {",
											"    pm.expect(data[index].blockNumber).to.eql(\"\");",
											"});",
											"pm.test(\"Check observationTimestamp\", function () {",
											"    pm.expect(data[index].observationTimestamp).to.eql(\"UnknownTimestamp\");",
											"});",
											"pm.test(\"Check entryType\", function () {",
											"    pm.expect(data[index].entryType).to.eql(\"Check entry\");",
											"});",
											"pm.test(\"Check entryType\", function () {",
											"    pm.expect(data[index].entryType).to.eql(\"Check entry\");",
											"});",
											"pm.test(\"Check X\", function () {",
											"    pm.expect(data[index].entryType).to.eql(\"Check entry\");",
											"});",
											"pm.test(\"Check Y\", function () {",
											"    pm.expect(data[index].entryType).to.eql(\"Check entry\");",
											"});",
											"pm.test(\"Check obsUnitId\", function () {",
											"    pm.expect(data[index].obsUnitId).to.eql(\"PKWDPivJxYgde\");",
											"});",
											"pm.test(\"Check Grain_yield|18000\", function () {",
											"    pm.expect(data[index]['Grain_yield|18000']).to.eql(\"4\");",
											"});",
											"pm.test(\"Check Biomas_yield|18010\", function () {",
											"    pm.expect(data[index]['Biomas_yield|18010']).to.eql(\"18\");",
											"});",
											"pm.test(\"Check Grain_size|18110\", function () {",
											"    pm.expect(data[index]['Grain_size|18110']).to.eql(\"95\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/studies/{{studyDbId}}/table?format=tsv",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"studies",
										"{{studyDbId}}",
										"table"
									],
									"query": [
										{
											"key": "format",
											"value": "tsv"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/studies/{studyDbId}/table"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered non-existing studyDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"",
											"pm.test(\"Error message is correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"studyDbId 9999 does not exist\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/studies/{{non_existing_study_id}}/table",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"studies",
										"{{non_existing_study_id}}",
										"table"
									]
								},
								"description": "GET /{crop}/brapi/v1/studies/{studyDbId}/table"
							},
							"response": []
						}
					]
				},
				{
					"name": "GET ​/{crop}​/brapi​/v2​/studies​/{studyDbId}",
					"item": [
						{
							"name": "Verify response code and body when entered valid studyDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"pm.test(\"Verify returned metadata\", function () { ",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(1);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(1);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"",
											"pm.test(\"Verify returned studyDbId\", function () {",
											" pm.expect(jsonData.result.studyDbId).to.eql(pm.environment.get(\"studyDbId\"));",
											"});",
											"pm.test(\"Verify returned studyName\", function () {",
											" pm.expect(jsonData.result.studyName).to.eql(\"Randomized Trial 20180003 Environment Number 1\");",
											"});",
											"pm.test(\"Verify returned studyDescription\", function () {",
											" pm.expect(jsonData.result.studyDescription).to.eql(\"Trial created using RCBD design\");",
											"});",
											"pm.test(\"Verify returned studyType\", function () {",
											" pm.expect(jsonData.result.studyType).to.eql(\"6\");",
											"});",
											"pm.test(\"Verify returned lastUpdate\", function () {",
											"    ",
											" pm.expect(jsonData.result.lastUpdate.version).to.eql(\"1.0\");",
											" pm.expect(jsonData.result.lastUpdate.timestamp).to.eql(\"2021-08-13T00:00:00.000Z\");",
											"});",
											"pm.test(\"Verify returned commonCropName\", function () {",
											" pm.expect(jsonData.result.commonCropName).to.eql(\"testdata\");",
											"});",
											"pm.test(\"Verify returned trialDbId\", function () {",
											" pm.expect(jsonData.result.trialDbId).to.eql(pm.environment.get(\"trialStudyId\"));",
											"});",
											"",
											"pm.test(\"Verify returned startDate\", function () {",
											" pm.expect(jsonData.result.startDate).to.eql(\"2018-09-12T00:00:00.000Z\");",
											"});",
											"pm.test(\"Verify returned active\", function () {",
											" pm.expect(jsonData.result.active).to.eql(true);",
											"});",
											"",
											"pm.test(\"Verify returned location details\", function () {",
											" pm.expect(jsonData.result.locationDbId).to.eql(\"9002\");",
											" pm.expect(jsonData.result.locationName).to.eql(\"Int Institute of Tropical Agriculture\");",
											"           ",
											"});",
											"",
											"pm.test(\"Verify returned environmentParameter (SITE_SOIL_PH)\", function () {",
											" pm.expect(jsonData.result.environmentParameters[0].parameterName).to.eql(\"SITE_SOIL_PH\");",
											" pm.expect(jsonData.result.environmentParameters[0].description).to.eql(\"Soil acidity - ph meter (pH)\");",
											" pm.expect(jsonData.result.environmentParameters[0].unit).to.eql(\"pH\");",
											" pm.expect(jsonData.result.environmentParameters[0].value).to.eql(\"1.4\");",
											"    ",
											"});",
											"",
											"pm.test(\"Verify returned environmentParameter (Selection Trait)\", function () {",
											" pm.expect(jsonData.result.environmentParameters[1].parameterName).to.eql(\"Selection_Trait\");",
											" pm.expect(jsonData.result.environmentParameters[1].description).to.eql(\"Values indicate trait(s) under selection in a particular advancement process\");",
											" pm.expect(jsonData.result.environmentParameters[1].unit).to.eql(\"STCodes\");",
											" pm.expect(jsonData.result.environmentParameters[1].value).to.eql(\"DT\");",
											"    ",
											"});",
											"",
											"pm.test(\"Verify returned environmentParameter (NREP)\", function () {",
											" pm.expect(jsonData.result.environmentParameters[2].parameterName).to.eql(\"NREP\");",
											" pm.expect(jsonData.result.environmentParameters[2].description).to.eql(\"Number of replications in an experiment\");",
											" pm.expect(jsonData.result.environmentParameters[2].unit).to.eql(\"Number\");",
											" pm.expect(jsonData.result.environmentParameters[2].value).to.eql(\"2\");",
											"    ",
											"});",
											"",
											"pm.test(\"Verify returned environmentParameter (LOCATION_ABBR)\", function () {",
											" pm.expect(jsonData.result.environmentParameters[3].parameterName).to.eql(\"LOCATION_ABBR\");",
											" pm.expect(jsonData.result.environmentParameters[3].description).to.eql(\"Location code - assigned (LOC_ABBR)\");",
											" pm.expect(jsonData.result.environmentParameters[3].unit).to.eql(\"LOC_ABBR\");",
											" pm.expect(jsonData.result.environmentParameters[3].value).to.eql(\"WARDA-X\");",
											"    ",
											"});",
											"",
											"pm.test(\"Verify returned environmentParameter (Crop_Season_Start_Month)\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.result.environmentParameters[4].parameterName).to.eql(\"Crop_Season_Start_Month\");",
											" pm.expect(jsonData.result.environmentParameters[4].description).to.eql(\"Crop season start month (YYYYMM)\");",
											" pm.expect(jsonData.result.environmentParameters[4].unit).to.eql(\"Year-month (yyyymm)\");",
											" pm.expect(jsonData.result.environmentParameters[4].value).to.eql(\"201805\");",
											"    ",
											"});",
											"",
											"pm.test(\"Verify returned environmentParameter (CROP_SEASON)\", function () {",
											" pm.expect(jsonData.result.environmentParameters[5].parameterName).to.eql(\"CROP_SEASON\");",
											" pm.expect(jsonData.result.environmentParameters[5].description).to.eql(\"Season - Assigned (Text)\");",
											" pm.expect(jsonData.result.environmentParameters[5].unit).to.eql(\"Text\");",
											" pm.expect(jsonData.result.environmentParameters[5].value).to.eql(\"Summer\");",
											"    ",
											"});",
											"",
											"pm.test(\"Verify returned environmentParameter (Crop_season_Code)\", function () {",
											" pm.expect(jsonData.result.environmentParameters[6].parameterName).to.eql(\"Crop_season_Code\");",
											" pm.expect(jsonData.result.environmentParameters[6].description).to.eql(\"Season - Assigned (Code)\");",
											" pm.expect(jsonData.result.environmentParameters[6].unit).to.eql(\"Code of Crop_season_Code\");",
											" pm.expect(jsonData.result.environmentParameters[6].value).to.eql(\"0\");",
											"    ",
											"});",
											"",
											"pm.test(\"Verify returned experimentalDesign\", function () {",
											" pm.expect(jsonData.result.experimentalDesign.description).to.eql(\"Randomized complete block design\");",
											"    ",
											"});",
											"",
											"// pm.test(\"Verify returned contacts\", function () {",
											"//  pm.expect(jsonData.result.contacts[0].contactDbId).to.eql(\"120\");",
											"//  pm.expect(jsonData.result.contacts[0].name).to.eql(\"API Test User\");",
											"//  pm.expect(jsonData.result.contacts[0].email).to.eql(\"api@mailinator.com\");",
											"//  pm.expect(jsonData.result.contacts[0].type).to.eql(\"\");",
											"//  pm.expect(jsonData.result.contacts[0].orcid).to.eql(\"\");",
											"    ",
											"// });",
											"",
											"pm.test(\"Verify returned additionalInfo\", function () {",
											" pm.expect(pm.response.text()).to.include(\"Principal investigator - assigned (DBCV)\");",
											" pm.expect(pm.response.text()).to.include(\"API Test User\");",
											"    ",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/studies/{{studyDbId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"studies",
										"{{studyDbId}}"
									]
								},
								"description": "GET /{crop}/brapi/v2/studies/{studyDbId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered non-existing studyDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Verify returned body\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.errors[0].message).to.eql(\"StudyDbId does not exist\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/studies/{{non_existing_study_id}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"studies",
										"{{non_existing_study_id}}"
									]
								},
								"description": "GET /{crop}/brapi/v2/studies/{studyDbId}"
							},
							"response": []
						}
					]
				},
				{
					"name": "GET ​/{crop}​/brapi​/v1​/studies​/{studyDbId}​/observationunits",
					"item": [
						{
							"name": "Verify response code and body when entered valid studyDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"//var data = jsonData.result.data[0];",
											"pm.test(\"Verify returned metadata\", function () {",
											"",
											"    pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											"    pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											"    pm.expect(jsonData.metadata.pagination.totalCount).to.eql(140);",
											"    pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											"    pm.expect(jsonData.metadata.status).to.eql([]);",
											"    pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"var index = 0;",
											"//Verify returned data of the first obs unit",
											"pm.test(\"Verify returned observationUnitDbId \", function () {",
											"     pm.expect(jsonData.result.data[index].observationUnitDbId).to.eql(\"PKWDPtLOzD8Sz\");     ",
											"});",
											"pm.test(\"Verify returned observationUnitName\", function () {",
											"     pm.expect(jsonData.result.data[index].observationUnitName).to.eql(\"PLOT1\");",
											"     ",
											"});",
											"pm.test(\"Verify returned observationLevel\", function () {",
											"     pm.expect(jsonData.result.data[index].observationLevel).to.eql(\"PLOT\");",
											"});",
											"pm.test(\"Verify returned observationLevels\", function () {",
											"     pm.expect(jsonData.result.data[index].observationLevels).to.eql(\"1\");",
											"});",
											"pm.test(\"Verify returned plotNumber\", function () {",
											"     pm.expect(jsonData.result.data[index].plotNumber).to.eql(\"1\");     ",
											"});",
											"pm.test(\"Verify returned plantNumber\", function () {",
											"     pm.expect(jsonData.result.data[index].plantNumber).to.eql(null);",
											"});",
											"pm.test(\"Verify returned blockNumber\", function () {",
											"     pm.expect(jsonData.result.data[index].blockNumber).to.eql(null);     ",
											"});",
											"pm.test(\"Verify returned replicate\", function () {",
											"     pm.expect(jsonData.result.data[index].replicate).to.eql(null);   ",
											"});",
											"pm.test(\"Verify returned germplasmDbId\", function () {",
											"     pm.expect(jsonData.result.data[index].germplasmDbId).to.eql(\"PKWDG942cd372\");",
											"});",
											"pm.test(\"Verify returned germplasmName\", function () {",
											"     pm.expect(jsonData.result.data[index].germplasmName).to.eql(\"GP1\");",
											"});",
											"pm.test(\"Verify returned studyDbId\", function () {",
											"     pm.expect(jsonData.result.data[index].studyDbId).to.eql(\"1\");     ",
											"});",
											"pm.test(\"Verify returned studyName\", function () {",
											"     pm.expect(jsonData.result.data[index].studyName).to.eql(\"Study with Imported Cross Nursery 2018002_1\");     ",
											"});",
											"pm.test(\"Verify returned studyLocationDbId\", function () {",
											"     pm.expect(jsonData.result.data[index].studyLocationDbId).to.eql(\"9001\");     ",
											"});",
											"pm.test(\"Verify returned studyLocation\", function () {",
											"     pm.expect(jsonData.result.data[index].studyLocation).to.eql(\"Africa Rice Centre\");     ",
											"});",
											"pm.test(\"Verify returned programName\", function () {",
											"     pm.expect(jsonData.result.data[index].programName).to.eql(\"API Program\");",
											"});",
											"pm.test(\"Verify returned x\", function () {",
											"     pm.expect(jsonData.result.data[index].x).to.eql(null);",
											"});",
											"pm.test(\"Verify returned y\", function () {",
											"     pm.expect(jsonData.result.data[index].y).to.eql(null);",
											"});",
											"pm.test(\"Verify returned entryType\", function () {",
											"     pm.expect(jsonData.result.data[index].entryType).to.eql(\"Test entry\");",
											"});",
											"pm.test(\"Verify returned entryNumber\", function () {",
											"     pm.expect(jsonData.result.data[index].entryNumber).to.eql(\"1\");",
											"});",
											"pm.test(\"Check observations observationDbId\", function () {",
											"    var observationDbIds = [\"65048\",\"65049\",\"65050\",\"65051\"];",
											"    for (var i = 0; i < jsonData.result.data[index].observations.length; i++ ){",
											"        pm.expect(jsonData.result.data[index].observations[i].observationDbId).to.eql(observationDbIds[i]);",
											"    }",
											"});",
											"pm.test(\"Check observations observationVariableDbId\", function () {",
											"    var observationVariableDbIds = [\"18100\",\"8263\",\"18000\",\"18010\"];",
											"    for (var i = 0; i < jsonData.result.data[index].observations.length; i++ ){",
											"        pm.expect(jsonData.result.data[index].observations[i].observationVariableDbId).to.eql(observationVariableDbIds[i]);",
											"    }",
											"});",
											"pm.test(\"Check observations observationVariableName\", function () {",
											"    var observationVariableNames = [",
											"        \"WeedPressure_number\",",
											"        \"NPSEL\",",
											"        \"Grain_yield\",",
											"        \"Biomas_yield\"",
											"        ];",
											"    for (var i = 0; i < jsonData.result.data[index].observations.length; i++ ){",
											"        pm.expect(jsonData.result.data[index].observations[i].observationVariableName).to.eql(observationVariableNames[i]);",
											"    }",
											"});",
											"pm.test(\"Check observations observationTimeStamp\", function () {",
											"    var observationTimeStamps = [",
											"        \"2020-09-30T00:00:00.000+08:00\",",
											"        \"2020-09-30T00:00:00.000+08:00\",",
											"        \"2020-09-30T00:00:00.000+08:00\",",
											"        \"2020-09-30T00:00:00.000+08:00\"",
											"        ];",
											"    for (var i = 0; i < jsonData.result.data[index].observations.length; i++ ){",
											"        pm.expect(jsonData.result.data[index].observations[i].observationTimeStamp).to.eql(observationTimeStamps[i]);",
											"    }",
											"});",
											"pm.test(\"Check observations seasons value\", function () {",
											"    for (var i = 0; i < jsonData.result.data[index].observations.length; i++ ){",
											"        pm.expect(jsonData.result.data[index].observations[i].season.season).to.eql(\"Dry season\");",
											"    }",
											"});",
											"pm.test(\"Check observations seasons seasonDbId value\", function () {",
											"    for (var i = 0; i < jsonData.result.data[index].observations.length; i++ ){",
											"        pm.expect(jsonData.result.data[index].observations[i].season.seasonDbId).to.eql(\"10290\");",
											"    }",
											"});",
											"pm.test(\"Check collector value\", function () {",
											"    for (var i = 0; i < jsonData.result.data[index].observations.length; i++ ){",
											"        pm.expect(jsonData.result.data[index].observations[i].collector).to.eql(null);",
											"    }",
											"});",
											"pm.test(\"Check observations value\", function () {",
											"    var values = [\"21\",\"2\",\"23\",\"40\"];",
											"    for (var i = 0; i < jsonData.result.data[index].observations.length; i++ ){",
											"        pm.expect(jsonData.result.data[index].observations[i].value).to.eql(values[i]);",
											"    }",
											"});",
											"pm.test(\"Verify returned instanceNumber\", function () {",
											"     pm.expect(jsonData.result.data[index].instanceNumber).to.eql(\"1\");",
											"});",
											"pm.test(\"Verify returned positionCoordinateX\", function () {",
											"     pm.expect(jsonData.result.data[index].positionCoordinateX).to.eql(null);",
											"});",
											"pm.test(\"Verify returned positionCoordinateY\", function () {",
											"     pm.expect(jsonData.result.data[index].positionCoordinateY).to.eql(null);",
											"});",
											"pm.test(\"Verify returned observationUnitXRef\", function () {",
											"     pm.expect(jsonData.result.data[index].observationUnitXRef).to.eql(null);",
											"});",
											"pm.test(\"Verify returned programDbId\", function () {",
											"     pm.expect(jsonData.result.data[index].programDbId).to.eql(pm.environment.get(\"api_program_id\"));",
											"});",
											"pm.test(\"Verify returned treatments\", function () {",
											"     pm.expect(jsonData.result.data[index].treatments).to.eql([]);",
											"});",
											"pm.test(\"Verify returned trialDbId\", function () {",
											"     pm.expect(jsonData.result.data[index].trialDbId).to.eql(\"3009\");",
											"});",
											"pm.test(\"Verify returned trialName\", function () {",
											"     pm.expect(jsonData.result.data[index].trialName).to.eql(\"Study with Imported Cross Nursery 2018002\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/studies/{{nursery1StudyDbId}}/observationunits",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"studies",
										"{{nursery1StudyDbId}}",
										"observationunits"
									]
								},
								"description": "GET ​/{crop}​/brapi​/v1​/studies​/{studyDbId}​/observationunits"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered non-existing studyDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Verify returned body\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.errors[0].message).to.eql(\"StudyDbId does not exist\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/studies/{{non_existing_study_id}}/observationunits",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"studies",
										"{{non_existing_study_id}}",
										"observationunits"
									]
								},
								"description": "GET ​/{crop}​/brapi​/v1​/studies​/{studyDbId}​/observationunits"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered plot observationLevel",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"//var data = jsonData.result.data[0];",
											"pm.test(\"Verify returned metadata\", function () {",
											"",
											"    pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											"    pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											"    pm.expect(jsonData.metadata.pagination.totalCount).to.eql(20);",
											"     pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											"    pm.expect(jsonData.metadata.status).to.eql([]);",
											"    pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"var index = 0;",
											"//Verify returned data of the first obs unit",
											"pm.test(\"Verify returned observationUnitDbId \", function () {",
											"     pm.expect(jsonData.result.data[index].observationUnitDbId).to.eql(\"PKWDPtLOzD8Sz\");     ",
											"});",
											"pm.test(\"Verify returned observationUnitName\", function () {",
											"     pm.expect(jsonData.result.data[index].observationUnitName).to.eql(\"PLOT1\");",
											"     ",
											"});",
											"pm.test(\"Verify returned observationLevel\", function () {",
											"     pm.expect(jsonData.result.data[index].observationLevel).to.eql(\"PLOT\");",
											"});",
											"pm.test(\"Verify returned observationLevels\", function () {",
											"     pm.expect(jsonData.result.data[index].observationLevels).to.eql(\"1\");",
											"});",
											"pm.test(\"Verify returned plotNumber\", function () {",
											"     pm.expect(jsonData.result.data[index].plotNumber).to.eql(\"1\");     ",
											"});",
											"pm.test(\"Verify returned plantNumber\", function () {",
											"     pm.expect(jsonData.result.data[index].plantNumber).to.eql(null);",
											"});",
											"pm.test(\"Verify returned blockNumber\", function () {",
											"     pm.expect(jsonData.result.data[index].blockNumber).to.eql(null);     ",
											"});",
											"pm.test(\"Verify returned replicate\", function () {",
											"     pm.expect(jsonData.result.data[index].replicate).to.eql(null);   ",
											"});",
											"pm.test(\"Verify returned germplasmDbId\", function () {",
											"     pm.expect(jsonData.result.data[index].germplasmDbId).to.eql(\"PKWDG942cd372\");",
											"});",
											"pm.test(\"Verify returned germplasmName\", function () {",
											"     pm.expect(jsonData.result.data[index].germplasmName).to.eql(\"GP1\");",
											"});",
											"pm.test(\"Verify returned studyDbId\", function () {",
											"     pm.expect(jsonData.result.data[index].studyDbId).to.eql(\"1\");     ",
											"});",
											"pm.test(\"Verify returned studyName\", function () {",
											"     pm.expect(jsonData.result.data[index].studyName).to.eql(\"Study with Imported Cross Nursery 2018002_1\");     ",
											"});",
											"pm.test(\"Verify returned studyLocationDbId\", function () {",
											"     pm.expect(jsonData.result.data[index].studyLocationDbId).to.eql(\"9001\");     ",
											"});",
											"pm.test(\"Verify returned studyLocation\", function () {",
											"     pm.expect(jsonData.result.data[index].studyLocation).to.eql(\"Africa Rice Centre\");     ",
											"});",
											"pm.test(\"Verify returned programName\", function () {",
											"     pm.expect(jsonData.result.data[index].programName).to.eql(\"API Program\");",
											"});",
											"pm.test(\"Verify returned x\", function () {",
											"     pm.expect(jsonData.result.data[index].x).to.eql(null);",
											"});",
											"pm.test(\"Verify returned y\", function () {",
											"     pm.expect(jsonData.result.data[index].y).to.eql(null);",
											"});",
											"pm.test(\"Verify returned entryType\", function () {",
											"     pm.expect(jsonData.result.data[index].entryType).to.eql(\"Test entry\");",
											"});",
											"pm.test(\"Verify returned entryNumber\", function () {",
											"     pm.expect(jsonData.result.data[index].entryNumber).to.eql(\"1\");",
											"});",
											"pm.test(\"Check observations observationDbId\", function () {",
											"    var observationDbIds = [\"65048\",\"65049\",\"65050\",\"65051\"];",
											"    for (var i = 0; i < jsonData.result.data[index].observations.length; i++ ){",
											"        pm.expect(jsonData.result.data[index].observations[i].observationDbId).to.eql(observationDbIds[i]);",
											"    }",
											"});",
											"pm.test(\"Check observations observationVariableDbId\", function () {",
											"    var observationVariableDbIds = [\"18100\",\"8263\",\"18000\",\"18010\"];",
											"    for (var i = 0; i < jsonData.result.data[index].observations.length; i++ ){",
											"        pm.expect(jsonData.result.data[index].observations[i].observationVariableDbId).to.eql(observationVariableDbIds[i]);",
											"    }",
											"});",
											"pm.test(\"Check observations observationVariableName\", function () {",
											"    var observationVariableNames = [",
											"        \"WeedPressure_number\",",
											"        \"NPSEL\",",
											"        \"Grain_yield\",",
											"        \"Biomas_yield\"",
											"        ];",
											"    for (var i = 0; i < jsonData.result.data[index].observations.length; i++ ){",
											"        pm.expect(jsonData.result.data[index].observations[i].observationVariableName).to.eql(observationVariableNames[i]);",
											"    }",
											"});",
											"pm.test(\"Check observations observationTimeStamp\", function () {",
											"    var observationTimeStamps = [",
											"        \"2020-09-30T00:00:00.000+08:00\",",
											"        \"2020-09-30T00:00:00.000+08:00\",",
											"        \"2020-09-30T00:00:00.000+08:00\",",
											"        \"2020-09-30T00:00:00.000+08:00\"",
											"        ];",
											"    for (var i = 0; i < jsonData.result.data[index].observations.length; i++ ){",
											"        pm.expect(jsonData.result.data[index].observations[i].observationTimeStamp).to.eql(observationTimeStamps[i]);",
											"    }",
											"});",
											"pm.test(\"Check observations seasons value\", function () {",
											"    for (var i = 0; i < jsonData.result.data[index].observations.length; i++ ){",
											"        pm.expect(jsonData.result.data[index].observations[i].season.season).to.eql(\"Dry season\");",
											"    }",
											"});",
											"pm.test(\"Check observations seasons seasonDbId value\", function () {",
											"    for (var i = 0; i < jsonData.result.data[index].observations.length; i++ ){",
											"        pm.expect(jsonData.result.data[index].observations[i].season.seasonDbId).to.eql(\"10290\");",
											"    }",
											"});",
											"pm.test(\"Check collector value\", function () {",
											"    for (var i = 0; i < jsonData.result.data[index].observations.length; i++ ){",
											"        pm.expect(jsonData.result.data[index].observations[i].collector).to.eql(null);",
											"    }",
											"});",
											"pm.test(\"Check observations value\", function () {",
											"    var values = [\"21\",\"2\",\"23\",\"40\"];",
											"    for (var i = 0; i < jsonData.result.data[index].observations.length; i++ ){",
											"        pm.expect(jsonData.result.data[index].observations[i].value).to.eql(values[i]);",
											"    }",
											"});",
											"pm.test(\"Verify returned instanceNumber\", function () {",
											"     pm.expect(jsonData.result.data[index].instanceNumber).to.eql(\"1\");",
											"});",
											"pm.test(\"Verify returned positionCoordinateX\", function () {",
											"     pm.expect(jsonData.result.data[index].positionCoordinateX).to.eql(null);",
											"});",
											"pm.test(\"Verify returned positionCoordinateY\", function () {",
											"     pm.expect(jsonData.result.data[index].positionCoordinateY).to.eql(null);",
											"});",
											"pm.test(\"Verify returned observationUnitXRef\", function () {",
											"     pm.expect(jsonData.result.data[index].observationUnitXRef).to.eql(null);",
											"});",
											"pm.test(\"Verify returned programDbId\", function () {",
											"     pm.expect(jsonData.result.data[index].programDbId).to.eql(pm.environment.get(\"api_program_id\"));",
											"});",
											"pm.test(\"Verify returned treatments\", function () {",
											"     pm.expect(jsonData.result.data[index].treatments).to.eql([]);",
											"});",
											"pm.test(\"Verify returned trialDbId\", function () {",
											"     pm.expect(jsonData.result.data[index].trialDbId).to.eql(\"3009\");",
											"});",
											"pm.test(\"Verify returned trialName\", function () {",
											"     pm.expect(jsonData.result.data[index].trialName).to.eql(\"Study with Imported Cross Nursery 2018002\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/studies/{{nursery1StudyDbId}}/observationunits?observationLevel=PLOT",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"studies",
										"{{nursery1StudyDbId}}",
										"observationunits"
									],
									"query": [
										{
											"key": "observationLevel",
											"value": "PLOT"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v1​/studies​/{studyDbId}​/observationunits"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered plant observationLevel",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"pm.test(\"Verify returned metadata\", function () {  ",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(40);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"var index = 0;",
											"//Verify returned data of the first obs unit",
											"pm.test(\"Verify returned observationUnitDbId \", function () {",
											"     pm.expect(jsonData.result.data[index].observationUnitDbId).to.eql(\"2a664296-3d7e-459d-ad77-87a7d5dae8c5\");     ",
											"});",
											"pm.test(\"Verify returned observationUnitName\", function () {",
											"     pm.expect(jsonData.result.data[index].observationUnitName).to.eql(null);",
											"     ",
											"});",
											"pm.test(\"Verify returned observationLevel\", function () {",
											"     pm.expect(jsonData.result.data[index].observationLevel).to.eql(\"PLANT\");",
											"});",
											"pm.test(\"Verify returned observationLevels\", function () {",
											"     pm.expect(jsonData.result.data[index].observationLevels).to.eql(\"1\");",
											"});",
											"pm.test(\"Verify returned plotNumber\", function () {",
											"     pm.expect(jsonData.result.data[index].plotNumber).to.eql(null);     ",
											"});",
											"pm.test(\"Verify returned plantNumber\", function () {",
											"     pm.expect(jsonData.result.data[index].plantNumber).to.eql(null);",
											"});",
											"pm.test(\"Verify returned blockNumber\", function () {",
											"     pm.expect(jsonData.result.data[index].blockNumber).to.eql(null);     ",
											"});",
											"pm.test(\"Verify returned replicate\", function () {",
											"     pm.expect(jsonData.result.data[index].replicate).to.eql(null);   ",
											"});",
											"pm.test(\"Verify returned germplasmDbId\", function () {",
											"     pm.expect(jsonData.result.data[index].germplasmDbId).to.eql(\"PKWDG942cd372\");",
											"});",
											"pm.test(\"Verify returned germplasmName\", function () {",
											"     pm.expect(jsonData.result.data[index].germplasmName).to.eql(\"GP1\");",
											"});",
											"pm.test(\"Verify returned studyDbId\", function () {",
											"     pm.expect(jsonData.result.data[index].studyDbId).to.eql(\"1\");     ",
											"});",
											"pm.test(\"Verify returned studyName\", function () {",
											"     pm.expect(jsonData.result.data[index].studyName).to.eql(\"Study with Imported Cross Nursery 2018002_1\");     ",
											"});",
											"pm.test(\"Verify returned studyLocationDbId\", function () {",
											"     pm.expect(jsonData.result.data[index].studyLocationDbId).to.eql(\"9001\");     ",
											"});",
											"pm.test(\"Verify returned studyLocation\", function () {",
											"     pm.expect(jsonData.result.data[index].studyLocation).to.eql(\"Africa Rice Centre\");     ",
											"});",
											"pm.test(\"Verify returned programName\", function () {",
											"     pm.expect(jsonData.result.data[index].programName).to.eql(\"API Program\");",
											"});",
											"pm.test(\"Verify returned x\", function () {",
											"     pm.expect(jsonData.result.data[index].x).to.eql(null);",
											"});",
											"pm.test(\"Verify returned y\", function () {",
											"     pm.expect(jsonData.result.data[index].y).to.eql(null);",
											"});",
											"pm.test(\"Verify returned entryType\", function () {",
											"     pm.expect(jsonData.result.data[index].entryType).to.eql(\"Test entry\");",
											"});",
											"pm.test(\"Verify returned entryNumber\", function () {",
											"     pm.expect(jsonData.result.data[index].entryNumber).to.eql(\"1\");",
											"});",
											"pm.test(\"Verify returned observations\", function () {",
											"     pm.expect(jsonData.result.data[index].observations).to.eql([]);",
											"});",
											"pm.test(\"Verify returned instanceNumber\", function () {",
											"     pm.expect(jsonData.result.data[index].instanceNumber).to.eql(\"1\");",
											"});",
											"pm.test(\"Verify returned positionCoordinateX\", function () {",
											"     pm.expect(jsonData.result.data[index].positionCoordinateX).to.eql(null);",
											"});",
											"pm.test(\"Verify returned positionCoordinateY\", function () {",
											"     pm.expect(jsonData.result.data[index].positionCoordinateY).to.eql(null);",
											"});",
											"pm.test(\"Verify returned observationUnitXRef\", function () {",
											"     pm.expect(jsonData.result.data[index].observationUnitXRef).to.eql(null);",
											"});",
											"pm.test(\"Verify returned programDbId\", function () {",
											"     pm.expect(jsonData.result.data[index].programDbId).to.eql(pm.environment.get(\"api_program_id\"));",
											"});",
											"pm.test(\"Verify returned treatments\", function () {",
											"     pm.expect(jsonData.result.data[index].treatments).to.eql([]);",
											"});",
											"pm.test(\"Verify returned trialDbId\", function () {",
											"     pm.expect(jsonData.result.data[index].trialDbId).to.eql(\"3009\");",
											"});",
											"pm.test(\"Verify returned trialName\", function () {",
											"     pm.expect(jsonData.result.data[index].trialName).to.eql(\"Study with Imported Cross Nursery 2018002\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/studies/{{nursery1StudyDbId}}/observationunits?observationLevel=PLANT",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"studies",
										"{{nursery1StudyDbId}}",
										"observationunits"
									],
									"query": [
										{
											"key": "observationLevel",
											"value": "PLANT"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v1​/studies​/{studyDbId}​/observationunits"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered quadrat observationLevel",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"pm.test(\"Verify returned metadata\", function () { ",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(80);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"var index = 0;",
											"//Verify returned data of the first obs unit",
											"pm.test(\"Verify returned observationUnitDbId \", function () {",
											"     pm.expect(jsonData.result.data[index].observationUnitDbId).to.eql(\"0b261507-54ce-4713-b3f2-709736761734\");     ",
											"});",
											"pm.test(\"Verify returned observationUnitName\", function () {",
											"     pm.expect(jsonData.result.data[index].observationUnitName).to.eql(null);",
											"     ",
											"});",
											"pm.test(\"Verify returned observationLevel\", function () {",
											"     pm.expect(jsonData.result.data[index].observationLevel).to.eql(\"SUB-PLOT\");",
											"});",
											"pm.test(\"Verify returned observationLevels\", function () {",
											"     pm.expect(jsonData.result.data[index].observationLevels).to.eql(\"1\");",
											"});",
											"pm.test(\"Verify returned plotNumber\", function () {",
											"     pm.expect(jsonData.result.data[index].plotNumber).to.eql(null);     ",
											"});",
											"pm.test(\"Verify returned plantNumber\", function () {",
											"     pm.expect(jsonData.result.data[index].plantNumber).to.eql(null);",
											"});",
											"pm.test(\"Verify returned blockNumber\", function () {",
											"     pm.expect(jsonData.result.data[index].blockNumber).to.eql(null);     ",
											"});",
											"pm.test(\"Verify returned replicate\", function () {",
											"     pm.expect(jsonData.result.data[index].replicate).to.eql(null);   ",
											"});",
											"pm.test(\"Verify returned germplasmDbId\", function () {",
											"     pm.expect(jsonData.result.data[index].germplasmDbId).to.eql(\"PKWDG942cd372\");",
											"});",
											"pm.test(\"Verify returned germplasmName\", function () {",
											"     pm.expect(jsonData.result.data[index].germplasmName).to.eql(\"GP1\");",
											"});",
											"pm.test(\"Verify returned studyDbId\", function () {",
											"     pm.expect(jsonData.result.data[index].studyDbId).to.eql(\"1\");     ",
											"});",
											"pm.test(\"Verify returned studyName\", function () {",
											"     pm.expect(jsonData.result.data[index].studyName).to.eql(\"Study with Imported Cross Nursery 2018002_1\");     ",
											"});",
											"pm.test(\"Verify returned studyLocationDbId\", function () {",
											"     pm.expect(jsonData.result.data[index].studyLocationDbId).to.eql(\"9001\");     ",
											"});",
											"pm.test(\"Verify returned studyLocation\", function () {",
											"     pm.expect(jsonData.result.data[index].studyLocation).to.eql(\"Africa Rice Centre\");     ",
											"});",
											"pm.test(\"Verify returned programName\", function () {",
											"     pm.expect(jsonData.result.data[index].programName).to.eql(\"API Program\");",
											"});",
											"pm.test(\"Verify returned x\", function () {",
											"     pm.expect(jsonData.result.data[index].x).to.eql(null);",
											"});",
											"pm.test(\"Verify returned y\", function () {",
											"     pm.expect(jsonData.result.data[index].y).to.eql(null);",
											"});",
											"pm.test(\"Verify returned entryType\", function () {",
											"     pm.expect(jsonData.result.data[index].entryType).to.eql(\"Test entry\");",
											"});",
											"pm.test(\"Verify returned entryNumber\", function () {",
											"     pm.expect(jsonData.result.data[index].entryNumber).to.eql(\"1\");",
											"});",
											"pm.test(\"Check observations observationDbId\", function () {",
											"    var observationDbIds = [\"3500\"];",
											"    for (var i = 0; i < jsonData.result.data[index].observations.length; i++ ){",
											"        pm.expect(jsonData.result.data[index].observations[i].observationDbId).to.eql(observationDbIds[i]);",
											"    }",
											"});",
											"pm.test(\"Check observations observationVariableDbId\", function () {",
											"    var observationVariableDbIds = [\"18010\"];",
											"    for (var i = 0; i < jsonData.result.data[index].observations.length; i++ ){",
											"        pm.expect(jsonData.result.data[index].observations[i].observationVariableDbId).to.eql(observationVariableDbIds[i]);",
											"    }",
											"});",
											"pm.test(\"Check observations observationVariableName\", function () {",
											"    var observationVariableNames = [\"Biomas_yield\"];",
											"    for (var i = 0; i < jsonData.result.data[index].observations.length; i++ ){",
											"        pm.expect(jsonData.result.data[index].observations[i].observationVariableName).to.eql(observationVariableNames[i]);",
											"    }",
											"});",
											"pm.test(\"Check observations observationTimeStamp\", function () {",
											"    var observationTimeStamps = [\"2019-03-29T00:00:00.000+08:00\"        ];",
											"    for (var i = 0; i < jsonData.result.data[index].observations.length; i++ ){",
											"        pm.expect(jsonData.result.data[index].observations[i].observationTimeStamp).to.eql(observationTimeStamps[i]);",
											"    }",
											"});",
											"pm.test(\"Check observations seasons value\", function () {",
											"    for (var i = 0; i < jsonData.result.data[index].observations.length; i++ ){",
											"        pm.expect(jsonData.result.data[index].observations[i].season.season).to.eql(\"Dry season\");",
											"    }",
											"});",
											"pm.test(\"Check observations seasons seasonDbId value\", function () {",
											"    for (var i = 0; i < jsonData.result.data[index].observations.length; i++ ){",
											"        pm.expect(jsonData.result.data[index].observations[i].season.seasonDbId).to.eql(\"10290\");",
											"    }",
											"});",
											"pm.test(\"Check collector value\", function () {",
											"    for (var i = 0; i < jsonData.result.data[index].observations.length; i++ ){",
											"        pm.expect(jsonData.result.data[index].observations[i].collector).to.eql(null);",
											"    }",
											"});",
											"pm.test(\"Check observations value\", function () {",
											"    var values = [\"15\"];",
											"    for (var i = 0; i < jsonData.result.data[index].observations.length; i++ ){",
											"        pm.expect(jsonData.result.data[index].observations[i].value).to.eql(values[i]);",
											"    }",
											"});",
											"pm.test(\"Verify returned instanceNumber\", function () {",
											"     pm.expect(jsonData.result.data[index].instanceNumber).to.eql(\"1\");",
											"});",
											"pm.test(\"Verify returned positionCoordinateX\", function () {",
											"     pm.expect(jsonData.result.data[index].positionCoordinateX).to.eql(null);",
											"});",
											"pm.test(\"Verify returned positionCoordinateY\", function () {",
											"     pm.expect(jsonData.result.data[index].positionCoordinateY).to.eql(null);",
											"});",
											"pm.test(\"Verify returned observationUnitXRef\", function () {",
											"     pm.expect(jsonData.result.data[index].observationUnitXRef).to.eql(null);",
											"});",
											"pm.test(\"Verify returned programDbId\", function () {",
											"     pm.expect(jsonData.result.data[index].programDbId).to.eql(pm.environment.get(\"api_program_id\"));",
											"});",
											"pm.test(\"Verify returned treatments\", function () {",
											"     pm.expect(jsonData.result.data[index].treatments).to.eql([]);",
											"});",
											"pm.test(\"Verify returned trialDbId\", function () {",
											"     pm.expect(jsonData.result.data[index].trialDbId).to.eql(\"3009\");",
											"});",
											"pm.test(\"Verify returned trialName\", function () {",
											"     pm.expect(jsonData.result.data[index].trialName).to.eql(\"Study with Imported Cross Nursery 2018002\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/studies/{{nursery1StudyDbId}}/observationunits?observationLevel=QUADRAT",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"studies",
										"{{nursery1StudyDbId}}",
										"observationunits"
									],
									"query": [
										{
											"key": "observationLevel",
											"value": "QUADRAT"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v1​/studies​/{studyDbId}​/observationunits"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid observationLevel",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(0);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"",
											"pm.test(\"Verify returned result\", function () {",
											"    var jsonData = pm.response.json();",
											"     pm.expect(jsonData.result.data).to.eql([]);",
											"     ",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/studies/{{nursery1StudyDbId}}/observationunits?observationLevel=INVALID",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"studies",
										"{{nursery1StudyDbId}}",
										"observationunits"
									],
									"query": [
										{
											"key": "observationLevel",
											"value": "INVALID"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v1​/studies​/{studyDbId}​/observationunits"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered pagination details",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"pm.test(\"Verify returned metadata\", function () {",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(1);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(10);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(140);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(14);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"var index = 0;",
											"//Verify returned data of the first obs unit",
											"pm.test(\"Verify returned observationUnitDbId \", function () {",
											"     pm.expect(jsonData.result.data[index].observationUnitDbId).to.eql(\"PKWDP0fPOkMaC\");     ",
											"});",
											"pm.test(\"Verify returned observationUnitName\", function () {",
											"     pm.expect(jsonData.result.data[index].observationUnitName).to.eql(\"PLOT11\");",
											"     ",
											"});",
											"pm.test(\"Verify returned observationLevel\", function () {",
											"     pm.expect(jsonData.result.data[index].observationLevel).to.eql(\"PLOT\");",
											"});",
											"pm.test(\"Verify returned observationLevels\", function () {",
											"     pm.expect(jsonData.result.data[index].observationLevels).to.eql(\"1\");",
											"});",
											"pm.test(\"Verify returned plotNumber\", function () {",
											"     pm.expect(jsonData.result.data[index].plotNumber).to.eql(\"11\");     ",
											"});",
											"pm.test(\"Verify returned plantNumber\", function () {",
											"     pm.expect(jsonData.result.data[index].plantNumber).to.eql(null);",
											"});",
											"pm.test(\"Verify returned blockNumber\", function () {",
											"     pm.expect(jsonData.result.data[index].blockNumber).to.eql(null);     ",
											"});",
											"pm.test(\"Verify returned replicate\", function () {",
											"     pm.expect(jsonData.result.data[index].replicate).to.eql(null);   ",
											"});",
											"pm.test(\"Verify returned germplasmDbId\", function () {",
											"     pm.expect(jsonData.result.data[index].germplasmDbId).to.eql(\"PKWDG225f1813\");",
											"});",
											"pm.test(\"Verify returned germplasmName\", function () {",
											"     pm.expect(jsonData.result.data[index].germplasmName).to.eql(\"GP11\");",
											"});",
											"pm.test(\"Verify returned studyDbId\", function () {",
											"     pm.expect(jsonData.result.data[index].studyDbId).to.eql(\"1\");     ",
											"});",
											"pm.test(\"Verify returned studyName\", function () {",
											"     pm.expect(jsonData.result.data[index].studyName).to.eql(\"Study with Imported Cross Nursery 2018002_1\");     ",
											"});",
											"pm.test(\"Verify returned studyLocationDbId\", function () {",
											"     pm.expect(jsonData.result.data[index].studyLocationDbId).to.eql(\"9001\");     ",
											"});",
											"pm.test(\"Verify returned studyLocation\", function () {",
											"     pm.expect(jsonData.result.data[index].studyLocation).to.eql(\"Africa Rice Centre\");     ",
											"});",
											"pm.test(\"Verify returned programName\", function () {",
											"     pm.expect(jsonData.result.data[index].programName).to.eql(\"API Program\");",
											"});",
											"pm.test(\"Verify returned x\", function () {",
											"     pm.expect(jsonData.result.data[index].x).to.eql(null);",
											"});",
											"pm.test(\"Verify returned y\", function () {",
											"     pm.expect(jsonData.result.data[index].y).to.eql(null);",
											"});",
											"pm.test(\"Verify returned entryType\", function () {",
											"     pm.expect(jsonData.result.data[index].entryType).to.eql(\"Test entry\");",
											"});",
											"pm.test(\"Verify returned entryNumber\", function () {",
											"     pm.expect(jsonData.result.data[index].entryNumber).to.eql(\"11\");",
											"});",
											"pm.test(\"Check observations observationDbId\", function () {",
											"    var observationDbIds = [\"510\",\"65099\",\"65100\",\"65101\"];",
											"    for (var i = 0; i < jsonData.result.data[index].observations.length; i++ ){",
											"        pm.expect(jsonData.result.data[index].observations[i].observationDbId).to.eql(observationDbIds[i]);",
											"    }",
											"});",
											"pm.test(\"Check observations observationVariableDbId\", function () {",
											"    var observationVariableDbIds = [\"8263\",\"18100\",\"18000\",\"18010\"];",
											"    for (var i = 0; i < jsonData.result.data[index].observations.length; i++ ){",
											"        pm.expect(jsonData.result.data[index].observations[i].observationVariableDbId).to.eql(observationVariableDbIds[i]);",
											"    }",
											"});",
											"pm.test(\"Check observations observationVariableName\", function () {",
											"    var observationVariableNames = [",
											"        \"NPSEL\",",
											"        \"WeedPressure_number\",",
											"        \"Grain_yield\",",
											"        \"Biomas_yield\"",
											"        ];",
											"    for (var i = 0; i < jsonData.result.data[index].observations.length; i++ ){",
											"        pm.expect(jsonData.result.data[index].observations[i].observationVariableName).to.eql(observationVariableNames[i]);",
											"    }",
											"});",
											"pm.test(\"Check observations observationTimeStamp\", function () {",
											"    var observationTimeStamps = [",
											"        \"2018-10-26T00:00:00.000+08:00\",",
											"        \"2020-09-30T00:00:00.000+08:00\",",
											"        \"2020-09-30T00:00:00.000+08:00\",",
											"        \"2020-09-30T00:00:00.000+08:00\"",
											"        ];",
											"    for (var i = 0; i < jsonData.result.data[index].observations.length; i++ ){",
											"        pm.expect(jsonData.result.data[index].observations[i].observationTimeStamp).to.eql(observationTimeStamps[i]);",
											"    }",
											"});",
											"pm.test(\"Check observations seasons value\", function () {",
											"    for (var i = 0; i < jsonData.result.data[index].observations.length; i++ ){",
											"        pm.expect(jsonData.result.data[index].observations[i].season.season).to.eql(\"Dry season\");",
											"    }",
											"});",
											"pm.test(\"Check observations seasons seasonDbId value\", function () {",
											"    for (var i = 0; i < jsonData.result.data[index].observations.length; i++ ){",
											"        pm.expect(jsonData.result.data[index].observations[i].season.seasonDbId).to.eql(\"10290\");",
											"    }",
											"});",
											"pm.test(\"Check collector value\", function () {",
											"    for (var i = 0; i < jsonData.result.data[index].observations.length; i++ ){",
											"        pm.expect(jsonData.result.data[index].observations[i].collector).to.eql(null);",
											"    }",
											"});",
											"pm.test(\"Check observations value\", function () {",
											"    var values = [\"2\",\"39\",\"20\",\"31\"];",
											"    for (var i = 0; i < jsonData.result.data[index].observations.length; i++ ){",
											"        pm.expect(jsonData.result.data[index].observations[i].value).to.eql(values[i]);",
											"    }",
											"});",
											"pm.test(\"Verify returned instanceNumber\", function () {",
											"     pm.expect(jsonData.result.data[index].instanceNumber).to.eql(\"1\");",
											"});",
											"pm.test(\"Verify returned positionCoordinateX\", function () {",
											"     pm.expect(jsonData.result.data[index].positionCoordinateX).to.eql(null);",
											"});",
											"pm.test(\"Verify returned positionCoordinateY\", function () {",
											"     pm.expect(jsonData.result.data[index].positionCoordinateY).to.eql(null);",
											"});",
											"pm.test(\"Verify returned observationUnitXRef\", function () {",
											"     pm.expect(jsonData.result.data[index].observationUnitXRef).to.eql(null);",
											"});",
											"pm.test(\"Verify returned programDbId\", function () {",
											"     pm.expect(jsonData.result.data[index].programDbId).to.eql(pm.environment.get(\"api_program_id\"));",
											"});",
											"pm.test(\"Verify returned treatments\", function () {",
											"     pm.expect(jsonData.result.data[index].treatments).to.eql([]);",
											"});",
											"pm.test(\"Verify returned trialDbId\", function () {",
											"     pm.expect(jsonData.result.data[index].trialDbId).to.eql(\"3009\");",
											"});",
											"pm.test(\"Verify returned trialName\", function () {",
											"     pm.expect(jsonData.result.data[index].trialName).to.eql(\"Study with Imported Cross Nursery 2018002\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/studies/{{nursery1StudyDbId}}/observationunits?page=1&pageSize=10",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"studies",
										"{{nursery1StudyDbId}}",
										"observationunits"
									],
									"query": [
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "pageSize",
											"value": "10"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v1​/studies​/{studyDbId}​/observationunits"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered pageSize greater than max",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"",
											"pm.test(\"Verify returned error message\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.errors[0].message).to.eql(\"Page size must between 1 and 10000.\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/studies/{{nursery1StudyDbId}}/observationunits?page=0&pageSize=10001",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"studies",
										"{{nursery1StudyDbId}}",
										"observationunits"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "10001"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v1​/studies​/{studyDbId}​/observationunits"
							},
							"response": []
						}
					]
				},
				{
					"name": "PUT ​/{crop}​/brapi​/v1​/studies​/{studyDbId}​/observations",
					"item": [
						{
							"name": "Verify response code and body when entered valid inputs for numeric trait",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"pm.test(\"Verify returned metadata\", function () {",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(0);",
											" pm.expect(jsonData.metadata.status[0][\"ignored-fields\"]).to.eql(\"collector, observationDbId, observationTimeStamp\");",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Verify returned collector\", function () {",
											" pm.expect(jsonData.result.observations[0].collector).to.eql(\"admin\");",
											"});",
											"pm.test(\"Verify returned observationDbId\", function () {",
											" pm.expect(jsonData.result.observations[0].observationDbId).to.eql(JSON.parse(pm.environment.get(\"study6_observationDbId_weed\")));",
											"});",
											"",
											"pm.test(\"Verify returned observationUnitDbId\", function () {",
											" pm.expect(jsonData.result.observations[0].observationUnitDbId).to.eql(pm.environment.get(\"study6_obs_unit_id\"));",
											"});",
											"",
											"pm.test(\"Verify returned observationVariableDbId\", function () {",
											" pm.expect(jsonData.result.observations[0].observationVariableDbId).to.eql(JSON.parse(pm.environment.get(\"study_weedPressure_cvterm_id\")));",
											"});",
											"",
											"pm.test(\"Verify returned value\", function () {",
											" pm.expect(jsonData.result.observations[0].value).to.eql(\"1000\");",
											"});",
											"",
											"pm.test(\"Verify returned observationTimeStamp\", function () {",
											" pm.expect(jsonData.result.observations[0].observationTimeStamp).to.eql(\"2020-04-27T07:39:11.000Z\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"observations\": [\r\n    {\r\n      \"collector\": \"admin\",\r\n      \"observationDbId\": {{study6_observationDbId_weed}},\r\n      \"observationTimeStamp\": \"2020-04-27T07:39:11.000Z\",\r\n      \"observationUnitDbId\": \"{{study6_obs_unit_id}}\",\r\n      \"observationVariableDbId\": {{study_weedPressure_cvterm_id}},\r\n      \"value\": \"1000\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/studies/{{study6_studyDbId}}/observations",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"studies",
										"{{study6_studyDbId}}",
										"observations"
									]
								},
								"description": "PUT /{crop}​/brapi​/v1​/studies​/{studyDbId}​/observations"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered valid inputs for categorical trait",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"pm.test(\"Verify returned metadata\", function () {",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(0);",
											" pm.expect(jsonData.metadata.status[0][\"ignored-fields\"]).to.eql(\"collector, observationDbId, observationTimeStamp\");",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Verify returned collector\", function () {",
											" pm.expect(jsonData.result.observations[0].collector).to.eql(\"admin\");",
											"});",
											"pm.test(\"Verify returned observationDbId\", function () {",
											" pm.expect(jsonData.result.observations[0].observationDbId).to.eql(JSON.parse(pm.environment.get(\"study6_observationDbId_dispressure\")));",
											"});",
											"",
											"pm.test(\"Verify returned observationUnitDbId\", function () {",
											" pm.expect(jsonData.result.observations[0].observationUnitDbId).to.eql(pm.environment.get(\"study6_obs_unit_id\"));",
											"});",
											"",
											"pm.test(\"Verify returned observationVariableDbId\", function () {",
											" pm.expect(jsonData.result.observations[0].observationVariableDbId).to.eql(JSON.parse(pm.environment.get(\"DisPressure_0_9_cvtermId\")));",
											"});",
											"",
											"pm.test(\"Verify returned value\", function () {",
											" pm.expect(jsonData.result.observations[0].value).to.eql(\"1\");",
											"});",
											"",
											"pm.test(\"Verify returned observationTimeStamp\", function () {",
											" pm.expect(jsonData.result.observations[0].observationTimeStamp).to.eql(\"2020-04-27T07:39:11.000Z\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"observations\": [\r\n    {\r\n      \"collector\": \"admin\",\r\n      \"observationDbId\": {{study6_observationDbId_dispressure}},\r\n      \"observationTimeStamp\": \"2020-04-27T07:39:11.000Z\",\r\n      \"observationUnitDbId\": \"{{study6_obs_unit_id}}\",\r\n      \"observationVariableDbId\": {{DisPressure_0_9_cvtermId}},\r\n      \"categoricalValueId\": 19030,\r\n      \"value\": \"1\"\r\n    }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/studies/{{study6_studyDbId}}/observations",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"studies",
										"{{study6_studyDbId}}",
										"observations"
									]
								},
								"description": "PUT /{crop}​/brapi​/v1​/studies​/{studyDbId}​/observations"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered valid inputs for date trait",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"pm.test(\"Verify returned metadata\", function () {",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(0);",
											" pm.expect(jsonData.metadata.status[0][\"ignored-fields\"]).to.eql(\"collector, observationDbId, observationTimeStamp\");",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Verify returned collector\", function () {",
											" pm.expect(jsonData.result.observations[0].collector).to.eql(\"admin\");",
											"});",
											"pm.test(\"Verify returned observationDbId\", function () {",
											" pm.expect(jsonData.result.observations[0].observationDbId).to.eql(JSON.parse(pm.environment.get(\"study6_observationDbId_germitest\")));",
											"});",
											"",
											"pm.test(\"Verify returned observationUnitDbId\", function () {",
											" pm.expect(jsonData.result.observations[0].observationUnitDbId).to.eql(pm.environment.get(\"study6_obs_unit_id\"));",
											"});",
											"",
											"pm.test(\"Verify returned observationVariableDbId\", function () {",
											" pm.expect(jsonData.result.observations[0].observationVariableDbId).to.eql(JSON.parse(pm.environment.get(\"germitest_date_cvtermId\")));",
											"});",
											"",
											"pm.test(\"Verify returned value\", function () {",
											" pm.expect(jsonData.result.observations[0].value).to.eql(\"2020-04-20\");",
											"});",
											"",
											"pm.test(\"Verify returned observationTimeStamp\", function () {",
											" pm.expect(jsonData.result.observations[0].observationTimeStamp).to.eql(\"2020-04-27T07:39:11.000Z\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"observations\": [\r\n    {\r\n      \"collector\": \"admin\",\r\n      \"observationDbId\": {{study6_observationDbId_germitest}},\r\n      \"observationTimeStamp\": \"2020-04-27T07:39:11.000Z\",\r\n      \"observationUnitDbId\": \"{{study6_obs_unit_id}}\",\r\n      \"observationVariableDbId\": {{germitest_date_cvtermId}},\r\n      \"value\": \"2020-04-20\"\r\n    }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/studies/{{study6_studyDbId}}/observations",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"studies",
										"{{study6_studyDbId}}",
										"observations"
									]
								},
								"description": "PUT /{crop}​/brapi​/v1​/studies​/{studyDbId}​/observations"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered valid inputs for character trait",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"pm.test(\"Verify returned metadata\", function () {",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(0);",
											" pm.expect(jsonData.metadata.status[0][\"ignored-fields\"]).to.eql(\"collector, observationDbId, observationTimeStamp\");",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Verify returned collector\", function () {",
											" pm.expect(jsonData.result.observations[0].collector).to.eql(\"admin\");",
											"});",
											"pm.test(\"Verify returned observationDbId\", function () {",
											" pm.expect(jsonData.result.observations[0].observationDbId).to.eql(JSON.parse(pm.environment.get(\"study6_observationDbId_note\")));",
											"});",
											"",
											"pm.test(\"Verify returned observationUnitDbId\", function () {",
											" pm.expect(jsonData.result.observations[0].observationUnitDbId).to.eql(pm.environment.get(\"study6_obs_unit_id\"));",
											"});",
											"",
											"pm.test(\"Verify returned observationVariableDbId\", function () {",
											" pm.expect(jsonData.result.observations[0].observationVariableDbId).to.eql(JSON.parse(pm.environment.get(\"notes_cvtermId\")));",
											"});",
											"",
											"pm.test(\"Verify returned value\", function () {",
											" pm.expect(jsonData.result.observations[0].value).to.eql(\"This is a test note\");",
											"});",
											"",
											"pm.test(\"Verify returned observationTimeStamp\", function () {",
											" pm.expect(jsonData.result.observations[0].observationTimeStamp).to.eql(\"2020-04-27T07:39:11.000Z\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"observations\": [\r\n    {\r\n      \"collector\": \"admin\",\r\n      \"observationDbId\": {{study6_observationDbId_note}},\r\n      \"observationTimeStamp\": \"2020-04-27T07:39:11.000Z\",\r\n      \"observationUnitDbId\": \"{{study6_obs_unit_id}}\",\r\n      \"observationVariableDbId\": {{notes_cvtermId}},\r\n      \"value\": \"This is a test note\"\r\n    }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/studies/{{study6_studyDbId}}/observations",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"studies",
										"{{study6_studyDbId}}",
										"observations"
									]
								},
								"description": "PUT /{crop}​/brapi​/v1​/studies​/{studyDbId}​/observations"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered valid inputs without optional values",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"pm.test(\"Verify returned metadata\", function () {",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(0);",
											" pm.expect(jsonData.metadata.status[0][\"ignored-fields\"]).to.eql(\"collector, observationDbId, observationTimeStamp\");",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Verify returned collector\", function () {",
											" pm.expect(jsonData.result.observations[0].collector).to.eql(null);",
											"});",
											"pm.test(\"Verify returned observationDbId\", function () {",
											" pm.expect(jsonData.result.observations[0].observationDbId).to.eql(JSON.parse(pm.environment.get(\"study6_observationDbId_weed\")));",
											"});",
											"",
											"pm.test(\"Verify returned observationUnitDbId\", function () {",
											" pm.expect(jsonData.result.observations[0].observationUnitDbId).to.eql(pm.environment.get(\"study6_obs_unit_id\"));",
											"});",
											"",
											"pm.test(\"Verify returned observationVariableDbId\", function () {",
											" pm.expect(jsonData.result.observations[0].observationVariableDbId).to.eql(JSON.parse(pm.environment.get(\"study_weedPressure_cvterm_id\")));",
											"});",
											"",
											"pm.test(\"Verify returned value\", function () {",
											" pm.expect(jsonData.result.observations[0].value).to.eql(\"1001\");",
											"});",
											"",
											"pm.test(\"Verify returned observationTimeStamp\", function () {",
											" pm.expect(jsonData.result.observations[0].observationTimeStamp).to.eql(null);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"observations\": [\r\n    {\r\n      \"observationUnitDbId\": \"{{study6_obs_unit_id}}\",\r\n      \"observationVariableDbId\": {{study_weedPressure_cvterm_id}},\r\n      \"value\": \"1001\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/studies/{{study6_studyDbId}}/observations",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"studies",
										"{{study6_studyDbId}}",
										"observations"
									]
								},
								"description": "PUT /{crop}​/brapi​/v1​/studies​/{studyDbId}​/observations"
							},
							"response": []
						}
					]
				},
				{
					"name": "GET ​/{crop}​/brapi​/v1​/studies​/{studyDbId}​/observationvariables",
					"item": [
						{
							"name": "Verify response code and body when entered valid studyDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"pm.test(\"Verify returned metadata\", function () {",
											"",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(3);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"",
											"//Verify returned observationVariableName (Grain_yield) basic details",
											"var index = 0;",
											"pm.test(\"Verify returned contextOfUse\", function () {",
											"    pm.expect(jsonData.result.data[index].contextOfUse).to.eql([\"PLOT\"]);",
											"});",
											"pm.test(\"Verify returned crop\", function () {",
											"    pm.expect(jsonData.result.data[index].crop).to.eql(pm.environment.get(\"crop\"));",
											"});",
											"pm.test(\"Verify returned date\", function () {",
											"    pm.expect(jsonData.result.data[index].date).to.eql(null);",
											"});",
											"pm.test(\"Verify returned crop\", function () {",
											"    pm.expect(jsonData.result.data[index].defaultValue).to.eql(\"\");",
											"});",
											"pm.test(\"Verify returned documentationURL\", function () {",
											"    pm.expect(jsonData.result.data[index].documentationURL).to.eql(null);",
											"});",
											"pm.test(\"Verify returned growthStage\", function () {",
											"    pm.expect(jsonData.result.data[index].growthStage).to.eql(null);",
											"});",
											"pm.test(\"Verify returned institution\", function () {",
											"    pm.expect(jsonData.result.data[index].institution).to.eql(null);",
											"});",
											"pm.test(\"Verify returned language\", function () {",
											"    pm.expect(jsonData.result.data[index].language).to.eql(null);",
											"});",
											"pm.test(\"Verify returned name\", function () {",
											"    pm.expect(jsonData.result.data[index].name).to.eql(\"Grain_yield\");",
											"});",
											"pm.test(\"Verify returned observationVariableDbId\", function () {",
											"    pm.expect(jsonData.result.data[index].observationVariableDbId).to.eql(pm.environment.get(\"study_grainYield_cvterm_id\"));",
											"});",
											"pm.test(\"Verify returned observationVariableName\", function () {",
											"    pm.expect(jsonData.result.data[index].observationVariableName).to.eql(\"Grain_yield\");",
											"});",
											"pm.test(\"Verify returned ontologyReference documentationLinks\", function () {",
											"    pm.expect(jsonData.result.data[index].ontologyReference.documentationLinks).to.eql([]);",
											"});",
											"pm.test(\"Verify returned ontologyReference ontologyDbId\", function () {",
											"    pm.expect(jsonData.result.data[index].ontologyReference.ontologyDbId).to.eql(\"18000\");",
											"});",
											"pm.test(\"Verify returned ontologyReference ontologyName\", function () {",
											"    pm.expect(jsonData.result.data[index].ontologyReference.ontologyName).to.eql(\"Grain_yield\");",
											"});",
											"pm.test(\"Verify returned ontologyReference version\", function () {",
											"    pm.expect(jsonData.result.data[index].ontologyReference.version).to.eql(null);",
											"});",
											"",
											"//Trait",
											"pm.test(\"Verify returned trait alternativeAbbreviations\", function () {        ",
											"    pm.expect(jsonData.result.data[index].trait.alternativeAbbreviations).to.eql([]);",
											"});",
											"pm.test(\"Verify returned trait attribute\", function () {        ",
											"    pm.expect(jsonData.result.data[index].trait.attribute).to.eql(null);",
											"});",
											"pm.test(\"Verify returned trait entity\", function () {        ",
											"    pm.expect(jsonData.result.data[index].trait.entity).to.eql(null);",
											"});",
											"pm.test(\"Verify returned trait mainAbbreviation\", function () {        ",
											"    pm.expect(jsonData.result.data[index].trait.mainAbbreviation).to.eql(null);",
											"});",
											"",
											"pm.test(\"Verify returned trait description\", function () {        ",
											"    pm.expect(jsonData.result.data[index].trait.description).to.eql(\"Yield\");",
											"});",
											"pm.test(\"Verify returned trait name\", function () {        ",
											"    pm.expect(jsonData.result.data[index].trait.name).to.eql(\"Yield\");",
											"});",
											"pm.test(\"Verify returned trait status\", function () {        ",
											"    pm.expect(jsonData.result.data[index].trait.status).to.eql(\"Active\");",
											"});",
											"pm.test(\"Verify returned trait synonyms\", function () {        ",
											"    pm.expect(jsonData.result.data[index].trait.synonyms).to.eql([]);",
											"});",
											"pm.test(\"Verify returned trait traitDbId\", function () {        ",
											"    pm.expect(jsonData.result.data[index].trait.traitDbId).to.eql(\"15009\");",
											"});",
											"pm.test(\"Verify returned trait traitName\", function () {        ",
											"    pm.expect(jsonData.result.data[index].trait.traitName).to.eql(\"Yield\");",
											"});",
											"pm.test(\"Verify returned trait xref\", function () {        ",
											"    pm.expect(jsonData.result.data[index].trait.xref).to.eql(\"null\");",
											"});",
											"pm.test(\"Verify returned trait ontologyReference documentationLinks\", function () {        ",
											"    pm.expect(jsonData.result.data[index].trait.ontologyReference.documentationLinks).to.eql([]);",
											"});",
											"pm.test(\"Verify returned ontologyReference ontologyDbId\", function () {        ",
											"    pm.expect(jsonData.result.data[index].trait.ontologyReference.ontologyDbId).to.eql(\"null\");",
											"});",
											"",
											"pm.test(\"Verify returned ontologyReference ontologyName\", function () {        ",
											"    pm.expect(jsonData.result.data[index].trait.ontologyReference.ontologyName).to.eql(\"Yield\");",
											"});",
											"pm.test(\"Verify returned ontologyReference version\", function () {        ",
											"    pm.expect(jsonData.result.data[index].trait.ontologyReference.version).to.eql(null);",
											"});",
											"pm.test(\"Verify returned trait class\", function () {        ",
											"    pm.expect(jsonData.result.data[index].trait.class).to.eql(\"Agronomic\");",
											"});",
											"//Method",
											"pm.test(\"Verify returned method description\", function () {        ",
											"    pm.expect(jsonData.result.data[index].method.description).to.eql(\"Dry and weigh\");",
											"});",
											"pm.test(\"Verify returned method formula\", function () {        ",
											"    pm.expect(jsonData.result.data[index].method.formula).to.eql(\"{{18110}}+10\");",
											"});",
											"pm.test(\"Verify returned method methodDbId\", function () {        ",
											"    pm.expect(jsonData.result.data[index].method.methodDbId).to.eql(\"16000\");",
											"});",
											"pm.test(\"Verify returned method methodName\", function () {        ",
											"    pm.expect(jsonData.result.data[index].method.methodName).to.eql(\"Dry and weigh\");",
											"});",
											"pm.test(\"Verify returned method name\", function () {        ",
											"    pm.expect(jsonData.result.data[index].method.name).to.eql(\"Dry and weigh\");",
											"});",
											"",
											"pm.test(\"Verify returned method ontologyReferenceObject documentationLinks\", function () {        ",
											"    pm.expect(jsonData.result.data[index].method.ontologyReferenceObject.documentationLinks).to.eql([]);",
											"});",
											"pm.test(\"Verify returned method ontologyReferenceObject ontologyDbId\", function () {        ",
											"    pm.expect(jsonData.result.data[index].method.ontologyReferenceObject.ontologyDbId).to.eql(\"16000\");",
											"});",
											"pm.test(\"Verify returned method ontologyReferenceObject ontologyName\", function () {        ",
											"    pm.expect(jsonData.result.data[index].method.ontologyReferenceObject.ontologyName).to.eql(\"Dry and weigh\");",
											"});",
											"pm.test(\"Verify returned method ontologyReferenceObject version\", function () {   ",
											"    pm.expect(jsonData.result.data[index].method.ontologyReferenceObject.version).to.eql(null);",
											"});",
											"pm.test(\"Verify returned method reference\", function () {        ",
											"    pm.expect(jsonData.result.data[index].method.reference).to.eql(null);",
											"});",
											"pm.test(\"Verify returned method ontologyReference documentationLinks \", function () {        ",
											"    pm.expect(jsonData.result.data[index].method.ontologyReference.documentationLinks).to.eql([]);",
											"});",
											"pm.test(\"Verify returned method ontologyReference ontologyDbId \", function () {        ",
											"    pm.expect(jsonData.result.data[index].method.ontologyReference.ontologyDbId).to.eql(\"16000\");",
											"});",
											"pm.test(\"Verify returned method ontologyReference ontologyName \", function () {        ",
											"    pm.expect(jsonData.result.data[index].method.ontologyReference.ontologyName).to.eql(\"Dry and weigh\");",
											"});",
											"pm.test(\"Verify returned method ontologyReference version \", function () {        ",
											"    pm.expect(jsonData.result.data[index].method.ontologyReference.version).to.eql(null);",
											"});",
											"pm.test(\"Verify returned method class\", function () {        ",
											"    pm.expect(jsonData.result.data[index].method.class).to.eql(null);",
											"});",
											"",
											"//Scale",
											"pm.test(\"Verify returned scale dataType\", function () {",
											"    pm.expect(jsonData.result.data[index].scale.dataType).to.eql(\"Numerical\");",
											"});",
											"pm.test(\"Verify returned scale decimalPlaces\", function () {",
											"    pm.expect(jsonData.result.data[index].scale.decimalPlaces).to.eql(4);",
											"});",
											"pm.test(\"Verify returned scale name\", function () {",
											"    pm.expect(jsonData.result.data[index].scale.name).to.eql(\"Kg/ha\");",
											"});",
											"pm.test(\"Verify returned scale ontologyReference documentationLinks\", function () {",
											"    pm.expect(jsonData.result.data[index].scale.ontologyReference.documentationLinks).to.eql([]);",
											"});",
											"pm.test(\"Verify returned scale ontologyReference ontologyDbId\", function () {",
											"    pm.expect(jsonData.result.data[index].scale.ontologyReference.ontologyDbId).to.eql(\"6090\");",
											"});",
											"pm.test(\"Verify returned scale ontologyReference ontologyName\", function () {",
											"    pm.expect(jsonData.result.data[index].scale.ontologyReference.ontologyName).to.eql(\"Kg/ha\");",
											"});",
											"pm.test(\"Verify returned scale ontologyReference version\", function () {",
											"    pm.expect(jsonData.result.data[index].scale.ontologyReference.version).to.eql(null);",
											"});",
											"pm.test(\"Verify returned scale scaleDbId\", function () {",
											"    pm.expect(jsonData.result.data[index].scale.scaleDbId).to.eql(\"6090\");",
											"});",
											"pm.test(\"Verify returned scale scaleName\", function () {",
											"    pm.expect(jsonData.result.data[index].scale.scaleName).to.eql(\"Kg/ha\");",
											"});",
											"",
											"pm.test(\"Verify returned scale validValues categories\", function () {",
											"    pm.expect(jsonData.result.data[index].scale.validValues.categories).to.eql(null);",
											"});",
											"pm.test(\"Verify returned scale validValues max\", function () {",
											"    pm.expect(jsonData.result.data[index].scale.validValues.max).to.eql(null);",
											"});",
											"pm.test(\"Verify returned scale validValues min\", function () {",
											"    pm.expect(jsonData.result.data[index].scale.validValues.min).to.eql(null);",
											"});",
											"pm.test(\"Verify returned scale xref\", function () {",
											"    pm.expect(jsonData.result.data[index].scale.xref).to.eql(null);",
											"});",
											"",
											"",
											"pm.test(\"Verify returned scientist\", function () {",
											"    pm.expect(jsonData.result.data[index].scientist).to.eql(null);",
											"});",
											"pm.test(\"Verify returned status\", function () {",
											"    pm.expect(jsonData.result.data[index].status).to.eql(null);",
											"});",
											"pm.test(\"Verify returned submissionTimestamp\", function () {",
											"    pm.expect(jsonData.result.data[index].submissionTimestamp).to.eql(null);",
											"});",
											"pm.test(\"Verify returned synonyms\", function () {",
											"    pm.expect(jsonData.result.data[index].synonyms).to.eql([]);",
											"});",
											"pm.test(\"Verify returned xref\", function () {",
											"    pm.expect(jsonData.result.data[index].xref).to.eql(null);",
											"});",
											"//Verify returned observationVariableName (Biomas_yield) basic details",
											"var index = 1;",
											"pm.test(\"Verify returned contextOfUse\", function () {",
											"    pm.expect(jsonData.result.data[index].contextOfUse).to.eql([\"PLOT\"]);",
											"});",
											"pm.test(\"Verify returned crop\", function () {",
											"    pm.expect(jsonData.result.data[index].crop).to.eql(pm.environment.get(\"crop\"));",
											"});",
											"pm.test(\"Verify returned date\", function () {",
											"    pm.expect(jsonData.result.data[index].date).to.eql(null);",
											"});",
											"pm.test(\"Verify returned defaultValue\", function () {",
											"    pm.expect(jsonData.result.data[index].date).to.eql(null);",
											"});",
											"pm.test(\"Verify returned documentationURL\", function () {",
											"    pm.expect(jsonData.result.data[index].documentationURL).to.eql(null);",
											"});",
											"pm.test(\"Verify returned growthStage\", function () {",
											"    pm.expect(jsonData.result.data[index].growthStage).to.eql(null);",
											"});",
											"pm.test(\"Verify returned institution\", function () {",
											"    pm.expect(jsonData.result.data[index].institution).to.eql(null);",
											"});",
											"pm.test(\"Verify returned language\", function () {",
											"    pm.expect(jsonData.result.data[index].language).to.eql(null);",
											"});",
											"pm.test(\"Verify returned name\", function () {",
											"    pm.expect(jsonData.result.data[index].name).to.eql(\"Biomas_yield\");",
											"});",
											"pm.test(\"Verify returned observationVariableDbId\", function () {",
											"    pm.expect(jsonData.result.data[index].observationVariableDbId).to.eql(pm.environment.get(\"study_biomass_cvterm_id\"));",
											"});",
											"pm.test(\"Verify returned observationVariableName\", function () {",
											"    pm.expect(jsonData.result.data[index].observationVariableName).to.eql(\"Biomas_yield\");",
											"});",
											"pm.test(\"Verify returned ontologyReference documentationLinks\", function () {",
											"    pm.expect(jsonData.result.data[index].ontologyReference.documentationLinks).to.eql([]);",
											"});",
											"pm.test(\"Verify returned ontologyReference ontologyDbId\", function () {",
											"    pm.expect(jsonData.result.data[index].ontologyReference.ontologyDbId).to.eql(\"18010\");",
											"});",
											"pm.test(\"Verify returned ontologyReference ontologyName\", function () {",
											"    pm.expect(jsonData.result.data[index].ontologyReference.ontologyName).to.eql(\"Biomas_yield\");",
											"});",
											"pm.test(\"Verify returned ontologyReference version\", function () {",
											"    pm.expect(jsonData.result.data[index].ontologyReference.version).to.eql(null);",
											"});",
											"//Trait",
											"pm.test(\"Verify returned trait alternativeAbbreviations\", function () {        ",
											"    pm.expect(jsonData.result.data[index].trait.alternativeAbbreviations).to.eql([]);",
											"});",
											"pm.test(\"Verify returned trait attribute\", function () {        ",
											"    pm.expect(jsonData.result.data[index].trait.attribute).to.eql(null);",
											"});",
											"pm.test(\"Verify returned trait entity\", function () {        ",
											"    pm.expect(jsonData.result.data[index].trait.entity).to.eql(null);",
											"});",
											"pm.test(\"Verify returned trait mainAbbreviation\", function () {        ",
											"    pm.expect(jsonData.result.data[index].trait.mainAbbreviation).to.eql(null);",
											"});",
											"pm.test(\"Verify returned trait description\", function () {        ",
											"    pm.expect(jsonData.result.data[index].trait.description).to.eql(\"Biomass\");",
											"});",
											"pm.test(\"Verify returned trait name\", function () {        ",
											"    pm.expect(jsonData.result.data[index].trait.name).to.eql(\"Biomass\");",
											"});",
											"pm.test(\"Verify returned trait status\", function () {        ",
											"    pm.expect(jsonData.result.data[index].trait.status).to.eql(\"Active\");",
											"});",
											"",
											"",
											"",
											"",
											"",
											"pm.test(\"Verify returned trait synonyms\", function () {        ",
											"    pm.expect(jsonData.result.data[index].trait.synonyms).to.eql([]);",
											"});",
											"pm.test(\"Verify returned trait traitDbId\", function () {        ",
											"    pm.expect(jsonData.result.data[index].trait.traitDbId).to.eql(\"15010\");",
											"});",
											"pm.test(\"Verify returned trait traitName\", function () {        ",
											"    pm.expect(jsonData.result.data[index].trait.traitName).to.eql(\"Biomass\");",
											"});",
											"pm.test(\"Verify returned trait xref\", function () {        ",
											"    pm.expect(jsonData.result.data[index].trait.xref).to.eql(\"null\");",
											"});",
											"pm.test(\"Verify returned trait ontologyReference documentationLinks\", function () {        ",
											"    pm.expect(jsonData.result.data[index].trait.ontologyReference.documentationLinks).to.eql([]);",
											"});",
											"pm.test(\"Verify returned ontologyReference ontologyDbId\", function () {        ",
											"    pm.expect(jsonData.result.data[index].trait.ontologyReference.ontologyDbId).to.eql(\"null\");",
											"});",
											"",
											"pm.test(\"Verify returned ontologyReference ontologyName\", function () {        ",
											"    pm.expect(jsonData.result.data[index].trait.ontologyReference.ontologyName).to.eql(\"Biomass\");",
											"});",
											"pm.test(\"Verify returned ontologyReference version\", function () {        ",
											"    pm.expect(jsonData.result.data[index].trait.ontologyReference.version).to.eql(null);",
											"});",
											"pm.test(\"Verify returned trait class\", function () {        ",
											"    pm.expect(jsonData.result.data[index].trait.class).to.eql(\"Agronomic\");",
											"});",
											"//Method",
											"pm.test(\"Verify returned method description\", function () {        ",
											"    pm.expect(jsonData.result.data[index].method.description).to.eql(\"Dry and weigh\");",
											"});",
											"pm.test(\"Verify returned method formula\", function () {        ",
											"    pm.expect(jsonData.result.data[index].method.formula).to.eql(\"{{100020}}+5\");",
											"});",
											"pm.test(\"Verify returned method methodDbId\", function () {        ",
											"    pm.expect(jsonData.result.data[index].method.methodDbId).to.eql(\"16000\");",
											"});",
											"pm.test(\"Verify returned method methodName\", function () {        ",
											"    pm.expect(jsonData.result.data[index].method.methodName).to.eql(\"Dry and weigh\");",
											"});",
											"pm.test(\"Verify returned method name\", function () {        ",
											"    pm.expect(jsonData.result.data[index].method.name).to.eql(\"Dry and weigh\");",
											"});",
											"pm.test(\"Verify returned method ontologyReferenceObject documentationLinks\", function () {        ",
											"    pm.expect(jsonData.result.data[index].method.ontologyReferenceObject.documentationLinks).to.eql([]);",
											"})",
											"pm.test(\"Verify returned method ontologyReferenceObject ontologyDbId\", function () {        ",
											"    pm.expect(jsonData.result.data[index].method.ontologyReferenceObject.ontologyDbId).to.eql(\"16000\");",
											"})",
											"pm.test(\"Verify returned method ontologyReferenceObject ontologyName\", function () {        ",
											"    pm.expect(jsonData.result.data[index].method.ontologyReferenceObject.ontologyName).to.eql(\"Dry and weigh\");",
											"})",
											"pm.test(\"Verify returned method ontologyReferenceObject version\", function () {        ",
											"    pm.expect(jsonData.result.data[index].method.ontologyReferenceObject.version).to.eql(null);",
											"})",
											"",
											"pm.test(\"Verify returned method reference\", function () {        ",
											"    pm.expect(jsonData.result.data[index].method.reference).to.eql(null);",
											"});",
											"pm.test(\"Verify returned method ontologyReference documentationLinks\", function () {        ",
											"    pm.expect(jsonData.result.data[index].method.ontologyReference.documentationLinks).to.eql([]);",
											"});",
											"pm.test(\"Verify returned method ontologyReference ontologyDbId\", function () {        ",
											"    pm.expect(jsonData.result.data[index].method.ontologyReference.ontologyDbId).to.eql(\"16000\");",
											"});",
											"pm.test(\"Verify returned method ontologyReference ontologyName\", function () {        ",
											"    pm.expect(jsonData.result.data[index].method.ontologyReference.ontologyName).to.eql(\"Dry and weigh\");",
											"});",
											"pm.test(\"Verify returned method ontologyReference version\", function () {        ",
											"    pm.expect(jsonData.result.data[index].method.ontologyReference.version).to.eql(null);",
											"});",
											"pm.test(\"Verify returned method class\", function () {        ",
											"    pm.expect(jsonData.result.data[index].method.class).to.eql(null);",
											"});",
											"",
											"//Scale",
											"pm.test(\"Verify returned scale dataType\", function () {",
											"    pm.expect(jsonData.result.data[index].scale.dataType).to.eql(\"Numerical\");",
											"});",
											"pm.test(\"Verify returned scale decimalPlaces\", function () {",
											"    pm.expect(jsonData.result.data[index].scale.decimalPlaces).to.eql(4);",
											"});",
											"pm.test(\"Verify returned scale name\", function () {",
											"    pm.expect(jsonData.result.data[index].scale.name).to.eql(\"t/ha\");",
											"});",
											"pm.test(\"Verify returned scale name\", function () {",
											"    pm.expect(jsonData.result.data[index].scale.name).to.eql(\"t/ha\");",
											"});",
											"pm.test(\"Verify returned scale ontologyReference documentationLinks\", function () {",
											"    pm.expect(jsonData.result.data[index].scale.ontologyReference.documentationLinks).to.eql([]);",
											"});",
											"pm.test(\"Verify returned scale ontologyReference ontologyDbId\", function () {",
											"    pm.expect(jsonData.result.data[index].scale.ontologyReference.ontologyDbId).to.eql(\"17010\");",
											"});",
											"pm.test(\"Verify returned scale ontologyReference ontologyName\", function () {",
											"    pm.expect(jsonData.result.data[index].scale.ontologyReference.ontologyName).to.eql(\"t/ha\");",
											"});",
											"pm.test(\"Verify returned scale ontologyReference version\", function () {",
											"    pm.expect(jsonData.result.data[index].scale.ontologyReference.version).to.eql(null);",
											"});",
											"pm.test(\"Verify returned scale scaleDbId\", function () {",
											"    pm.expect(jsonData.result.data[index].scale.scaleDbId).to.eql(\"17010\");",
											"});",
											"pm.test(\"Verify returned scale scaleName\", function () {",
											"    pm.expect(jsonData.result.data[index].scale.scaleName).to.eql(\"t/ha\");",
											"});",
											"",
											"pm.test(\"Verify returned scale validValues categories\", function () {",
											"    pm.expect(jsonData.result.data[index].scale.validValues.categories).to.eql(null);",
											"});",
											"pm.test(\"Verify returned scale validValues max\", function () {",
											"    pm.expect(jsonData.result.data[index].scale.validValues.max).to.eql(null);",
											"});",
											"pm.test(\"Verify returned scale validValues min\", function () {",
											"    pm.expect(jsonData.result.data[index].scale.validValues.min).to.eql(null);",
											"});",
											"pm.test(\"Verify returned scale xref\", function () {",
											"    pm.expect(jsonData.result.data[index].scale.xref).to.eql(null);",
											"});",
											"",
											"pm.test(\"Verify returned scientist\", function () {",
											"    pm.expect(jsonData.result.data[index].scientist).to.eql(null);",
											"});",
											"pm.test(\"Verify returned status\", function () {",
											"    pm.expect(jsonData.result.data[index].status).to.eql(null);",
											"});",
											"pm.test(\"Verify returned submissionTimestamp\", function () {",
											"    pm.expect(jsonData.result.data[index].submissionTimestamp).to.eql(null);",
											"});",
											"pm.test(\"Verify returned synonyms\", function () {",
											"    pm.expect(jsonData.result.data[index].synonyms).to.eql([]);",
											"});",
											"pm.test(\"Verify returned xref\", function () {",
											"    pm.expect(jsonData.result.data[index].xref).to.eql(null);",
											"});",
											"//Verify returned observationVariableName (Grain_size) basic details",
											"var index = 2;",
											"pm.test(\"Verify returned contextOfUse\", function () {",
											"    pm.expect(jsonData.result.data[index].contextOfUse).to.eql([\"PLOT\"]);",
											"});",
											"pm.test(\"Verify returned crop\", function () {",
											"    pm.expect(jsonData.result.data[index].crop).to.eql(pm.environment.get(\"crop\"));",
											"});",
											"pm.test(\"Verify returned date\", function () {",
											"    pm.expect(jsonData.result.data[index].date).to.eql(null);",
											"});",
											"pm.test(\"Verify returned defaultValue\", function () {",
											"    pm.expect(jsonData.result.data[index].defaultValue).to.eql(\"\");",
											"});",
											"pm.test(\"Verify returned documentationURL\", function () {",
											"    pm.expect(jsonData.result.data[index].documentationURL).to.eql(null);",
											"});",
											"pm.test(\"Verify returned growthStage\", function () {",
											"    pm.expect(jsonData.result.data[index].growthStage).to.eql(null);",
											"});",
											"pm.test(\"Verify returned institution\", function () {",
											"    pm.expect(jsonData.result.data[index].institution).to.eql(null);",
											"});",
											"pm.test(\"Verify returned language\", function () {",
											"    pm.expect(jsonData.result.data[index].language).to.eql(null);",
											"});",
											"pm.test(\"Verify returned name\", function () {",
											"    pm.expect(jsonData.result.data[index].name).to.eql(\"Grain_size\");",
											"});",
											"pm.test(\"Verify returned observationVariableDbId\", function () {",
											"    pm.expect(jsonData.result.data[index].observationVariableDbId).to.eql(pm.environment.get(\"grain_size_cvterm_id\"));",
											"});",
											"pm.test(\"Verify returned observationVariableName\", function () {",
											"    pm.expect(jsonData.result.data[index].observationVariableName).to.eql(\"Grain_size\");",
											"});",
											"pm.test(\"Verify returned ontologyReference documentationLinks\", function () {",
											"    pm.expect(jsonData.result.data[index].ontologyReference.documentationLinks).to.eql([]);",
											"});",
											"pm.test(\"Verify returned ontologyReference ontologyDbId\", function () {",
											"    pm.expect(jsonData.result.data[index].ontologyReference.ontologyDbId).to.eql(\"18110\");",
											"});",
											"pm.test(\"Verify returned ontologyReference ontologyName\", function () {",
											"    pm.expect(jsonData.result.data[index].ontologyReference.ontologyName).to.eql(\"Grain_size\");",
											"});",
											"pm.test(\"Verify returned ontologyReference version\", function () {",
											"    pm.expect(jsonData.result.data[index].ontologyReference.version).to.eql(null);",
											"});",
											"//Trait",
											"pm.test(\"Verify returned trait alternativeAbbreviations\", function () {        ",
											"    pm.expect(jsonData.result.data[index].trait.alternativeAbbreviations).to.eql([]);",
											"});",
											"pm.test(\"Verify returned trait attribute\", function () {        ",
											"    pm.expect(jsonData.result.data[index].trait.attribute).to.eql(null);",
											"});",
											"pm.test(\"Verify returned trait entity\", function () {        ",
											"    pm.expect(jsonData.result.data[index].trait.entity).to.eql(null);",
											"});",
											"pm.test(\"Verify returned trait mainAbbreviation\", function () {        ",
											"    pm.expect(jsonData.result.data[index].trait.mainAbbreviation).to.eql(null);",
											"});",
											"pm.test(\"Verify returned trait description\", function () {        ",
											"    pm.expect(jsonData.result.data[index].trait.description).to.eql(\"Grain size\");",
											"});",
											"pm.test(\"Verify returned trait name\", function () {        ",
											"    pm.expect(jsonData.result.data[index].trait.name).to.eql(\"Grain size\");",
											"});",
											"pm.test(\"Verify returned trait status\", function () {        ",
											"    pm.expect(jsonData.result.data[index].trait.status).to.eql(\"Active\");",
											"});",
											"pm.test(\"Verify returned trait synonyms\", function () {        ",
											"    pm.expect(jsonData.result.data[index].trait.synonyms).to.eql([]);",
											"});",
											"pm.test(\"Verify returned trait traitDbId\", function () {        ",
											"    pm.expect(jsonData.result.data[index].trait.traitDbId).to.eql(\"15110\");",
											"});",
											"pm.test(\"Verify returned trait traitName\", function () {        ",
											"    pm.expect(jsonData.result.data[index].trait.traitName).to.eql(\"Grain size\");",
											"});",
											"pm.test(\"Verify returned trait xref\", function () {        ",
											"    pm.expect(jsonData.result.data[index].trait.xref).to.eql(\"null\");",
											"});",
											"pm.test(\"Verify returned trait ontologyReference documentationLinks\", function () {        ",
											"    pm.expect(jsonData.result.data[index].trait.ontologyReference.documentationLinks).to.eql([]);",
											"});",
											"pm.test(\"Verify returned ontologyReference ontologyDbId\", function () {        ",
											"    pm.expect(jsonData.result.data[index].trait.ontologyReference.ontologyDbId).to.eql(\"null\");",
											"});",
											"",
											"pm.test(\"Verify returned ontologyReference ontologyName\", function () {        ",
											"    pm.expect(jsonData.result.data[index].trait.ontologyReference.ontologyName).to.eql(\"Grain size\");",
											"});",
											"pm.test(\"Verify returned ontologyReference version\", function () {        ",
											"    pm.expect(jsonData.result.data[index].trait.ontologyReference.version).to.eql(null);",
											"});",
											"pm.test(\"Verify returned trait class\", function () {        ",
											"    pm.expect(jsonData.result.data[index].trait.class).to.eql(\"Agronomic\");",
											"});",
											"",
											"//Method",
											"pm.test(\"Verify returned method description\", function () {        ",
											"    pm.expect(jsonData.result.data[index].method.description).to.eql(\"Weigh 1000 dry grains\");",
											"});",
											"pm.test(\"Verify returned method formula\", function () {        ",
											"    pm.expect(jsonData.result.data[index].method.formula).to.eql(\"null\");",
											"});",
											"pm.test(\"Verify returned method methodDbId\", function () {        ",
											"    pm.expect(jsonData.result.data[index].method.methodDbId).to.eql(\"16070\");",
											"});",
											"pm.test(\"Verify returned method methodName\", function () {        ",
											"    pm.expect(jsonData.result.data[index].method.methodName).to.eql(\"Weigh 1000 dry grains\");",
											"});",
											"pm.test(\"Verify returned method name\", function () {        ",
											"    pm.expect(jsonData.result.data[index].method.name).to.eql(\"Weigh 1000 dry grains\");",
											"});",
											"pm.test(\"Verify returned method ontologyReferenceObject\", function () {        ",
											"    pm.expect(jsonData.result.data[index].method.ontologyReferenceObject.documentationLinks).to.eql([]);",
											"});",
											"pm.test(\"Verify returned method ontologyDbId\", function () {        ",
											"    pm.expect(jsonData.result.data[index].method.ontologyReferenceObject.ontologyDbId).to.eql(\"16070\");",
											"});",
											"pm.test(\"Verify returned method ontologyName\", function () {        ",
											"    pm.expect(jsonData.result.data[index].method.ontologyReferenceObject.ontologyName).to.eql(\"Weigh 1000 dry grains\");",
											"});",
											"pm.test(\"Verify returned method version\", function () {        ",
											"    pm.expect(jsonData.result.data[index].method.ontologyReferenceObject.version).to.eql(null);",
											"});",
											"pm.test(\"Verify returned method reference\", function () {        ",
											"    pm.expect(jsonData.result.data[index].method.reference).to.eql(null);",
											"});",
											"pm.test(\"Verify returned method ontologyReference documentationLinks\", function () {        ",
											"    pm.expect(jsonData.result.data[index].method.ontologyReference.documentationLinks).to.eql([]);",
											"});",
											"pm.test(\"Verify returned method ontologyReference ontologyDbId\", function () {        ",
											"    pm.expect(jsonData.result.data[index].method.ontologyReference.ontologyDbId).to.eql(\"16070\");",
											"});",
											"pm.test(\"Verify returned method ontologyReference ontologyName\", function () {        ",
											"    pm.expect(jsonData.result.data[index].method.ontologyReference.ontologyName).to.eql(\"Weigh 1000 dry grains\");",
											"});",
											"pm.test(\"Verify returned method ontologyReference version\", function () {        ",
											"",
											"\tpm.expect(jsonData.result.data[index].method.ontologyReference.version).to.eql(null);",
											"});",
											"pm.test(\"Verify returned method class\", function () {        ",
											"    pm.expect(jsonData.result.data[index].method.class).to.eql(null);",
											"});",
											"",
											"//Scale",
											"pm.test(\"Verify returned scale dataType\", function () {",
											"    pm.expect(jsonData.result.data[index].scale.dataType).to.eql(\"Numerical\");",
											"});",
											"pm.test(\"Verify returned scale decimalPlaces\", function () {",
											"    pm.expect(jsonData.result.data[index].scale.decimalPlaces).to.eql(4);",
											"});",
											"pm.test(\"Verify returned scale name\", function () {",
											"    pm.expect(jsonData.result.data[index].scale.name).to.eql(\"g\");",
											"});",
											"pm.test(\"Verify returned scale ontologyReference documentationLinks\", function () {",
											"    pm.expect(jsonData.result.data[index].scale.ontologyReference.documentationLinks).to.eql([]);",
											"});",
											"pm.test(\"Verify returned scale ontologyReference ontologyDbId\", function () {",
											"    pm.expect(jsonData.result.data[index].scale.ontologyReference.ontologyDbId).to.eql(\"6087\");",
											"});",
											"pm.test(\"Verify returned scale ontologyReference ontologyName\", function () {",
											"    pm.expect(jsonData.result.data[index].scale.ontologyReference.ontologyName).to.eql(\"g\");",
											"});",
											"pm.test(\"Verify returned scale ontologyReference version\", function () {",
											"    pm.expect(jsonData.result.data[index].scale.ontologyReference.version).to.eql(null);",
											"});",
											"pm.test(\"Verify returned scale scaleDbId\", function () {",
											"    pm.expect(jsonData.result.data[index].scale.scaleDbId).to.eql(\"6087\");",
											"});",
											"pm.test(\"Verify returned scale scaleName\", function () {",
											"    pm.expect(jsonData.result.data[index].scale.scaleName).to.eql(\"g\");",
											"});",
											"",
											"pm.test(\"Verify returned scale validValues categories\", function () {",
											"    pm.expect(jsonData.result.data[index].scale.validValues.categories).to.eql(null);",
											"});",
											"pm.test(\"Verify returned scale validValues max\", function () {",
											"    pm.expect(jsonData.result.data[index].scale.validValues.max).to.eql(null);",
											"});",
											"pm.test(\"Verify returned scale validValues min\", function () {",
											"    pm.expect(jsonData.result.data[index].scale.validValues.min).to.eql(null);",
											"});",
											"pm.test(\"Verify returned scale xref\", function () {",
											"    pm.expect(jsonData.result.data[index].scale.xref).to.eql(null);",
											"});",
											"pm.test(\"Verify returned scientist\", function () {",
											"    pm.expect(jsonData.result.data[index].scientist).to.eql(null);",
											"});",
											"pm.test(\"Verify returned status\", function () {",
											"    pm.expect(jsonData.result.data[index].status).to.eql(null);",
											"});",
											"pm.test(\"Verify returned submissionTimestamp\", function () {",
											"    pm.expect(jsonData.result.data[index].submissionTimestamp).to.eql(null);",
											"});",
											"pm.test(\"Verify returned synonyms\", function () {",
											"    pm.expect(jsonData.result.data[index].synonyms).to.eql([]);",
											"});",
											"pm.test(\"Verify returned xref\", function () {",
											"    pm.expect(jsonData.result.data[index].xref).to.eql(null);",
											"});",
											"",
											"pm.test(\"Verify returned studyDbId\", function () {",
											" pm.expect(jsonData.result.studyDbId).to.eql(pm.environment.get(\"studyDbId\"));",
											"});",
											"pm.test(\"Verify returned trialName\", function () {",
											" pm.expect(jsonData.result.trialName).to.eql(\"Randomized Trial 20180003\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/studies/{{studyDbId}}/observationvariables",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"studies",
										"{{studyDbId}}",
										"observationvariables"
									]
								},
								"description": "GET /{crop}​/brapi​/v1​/studies​/{studyDbId}​/observationvariables"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered pagination details",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"pm.test(\"Verify returned metadata\", function () {",
											"",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(1);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(3);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(3);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"",
											"",
											"//Verify returned observationVariableName (Biomas_yield) basic details",
											"var index = 0;",
											"pm.test(\"Verify returned contextOfUse\", function () {",
											"    pm.expect(jsonData.result.data[index].contextOfUse).to.eql([\"PLOT\"]);",
											"});",
											"pm.test(\"Verify returned crop\", function () {",
											"    pm.expect(jsonData.result.data[index].crop).to.eql(pm.environment.get(\"crop\"));",
											"});",
											"pm.test(\"Verify returned date\", function () {",
											"    pm.expect(jsonData.result.data[index].date).to.eql(null);",
											"});",
											"pm.test(\"Verify returned defaultValue\", function () {",
											"    pm.expect(jsonData.result.data[index].date).to.eql(null);",
											"});",
											"pm.test(\"Verify returned documentationURL\", function () {",
											"    pm.expect(jsonData.result.data[index].documentationURL).to.eql(null);",
											"});",
											"pm.test(\"Verify returned growthStage\", function () {",
											"    pm.expect(jsonData.result.data[index].growthStage).to.eql(null);",
											"});",
											"pm.test(\"Verify returned institution\", function () {",
											"    pm.expect(jsonData.result.data[index].institution).to.eql(null);",
											"});",
											"pm.test(\"Verify returned language\", function () {",
											"    pm.expect(jsonData.result.data[index].language).to.eql(null);",
											"});",
											"pm.test(\"Verify returned name\", function () {",
											"    pm.expect(jsonData.result.data[index].name).to.eql(\"Biomas_yield\");",
											"});",
											"pm.test(\"Verify returned observationVariableDbId\", function () {",
											"    pm.expect(jsonData.result.data[index].observationVariableDbId).to.eql(pm.environment.get(\"study_biomass_cvterm_id\"));",
											"});",
											"pm.test(\"Verify returned observationVariableName\", function () {",
											"    pm.expect(jsonData.result.data[index].observationVariableName).to.eql(\"Biomas_yield\");",
											"});",
											"pm.test(\"Verify returned ontologyReference documentationLinks\", function () {",
											"    pm.expect(jsonData.result.data[index].ontologyReference.documentationLinks).to.eql([]);",
											"});",
											"pm.test(\"Verify returned ontologyReference ontologyDbId\", function () {",
											"    pm.expect(jsonData.result.data[index].ontologyReference.ontologyDbId).to.eql(\"18010\");",
											"});",
											"pm.test(\"Verify returned ontologyReference ontologyName\", function () {",
											"    pm.expect(jsonData.result.data[index].ontologyReference.ontologyName).to.eql(\"Biomas_yield\");",
											"});",
											"pm.test(\"Verify returned ontologyReference version\", function () {",
											"    pm.expect(jsonData.result.data[index].ontologyReference.version).to.eql(null);",
											"});",
											"",
											"//Trait",
											"pm.test(\"Verify returned trait alternativeAbbreviations\", function () {        ",
											"    pm.expect(jsonData.result.data[index].trait.alternativeAbbreviations).to.eql([]);",
											"});",
											"pm.test(\"Verify returned trait attribute\", function () {        ",
											"    pm.expect(jsonData.result.data[index].trait.attribute).to.eql(null);",
											"});",
											"pm.test(\"Verify returned trait entity\", function () {        ",
											"    pm.expect(jsonData.result.data[index].trait.entity).to.eql(null);",
											"});",
											"pm.test(\"Verify returned trait mainAbbreviation\", function () {        ",
											"    pm.expect(jsonData.result.data[index].trait.mainAbbreviation).to.eql(null);",
											"});",
											"pm.test(\"Verify returned trait description\", function () {        ",
											"    pm.expect(jsonData.result.data[index].trait.description).to.eql(\"Biomass\");",
											"});",
											"pm.test(\"Verify returned trait name\", function () {        ",
											"    pm.expect(jsonData.result.data[index].trait.name).to.eql(\"Biomass\");",
											"});",
											"pm.test(\"Verify returned trait status\", function () {        ",
											"    pm.expect(jsonData.result.data[index].trait.status).to.eql(\"Active\");",
											"});",
											"",
											"",
											"",
											"",
											"",
											"pm.test(\"Verify returned trait synonyms\", function () {        ",
											"    pm.expect(jsonData.result.data[index].trait.synonyms).to.eql([]);",
											"});",
											"pm.test(\"Verify returned trait traitDbId\", function () {        ",
											"    pm.expect(jsonData.result.data[index].trait.traitDbId).to.eql(\"15010\");",
											"});",
											"pm.test(\"Verify returned trait traitName\", function () {        ",
											"    pm.expect(jsonData.result.data[index].trait.traitName).to.eql(\"Biomass\");",
											"});",
											"pm.test(\"Verify returned trait xref\", function () {        ",
											"    pm.expect(jsonData.result.data[index].trait.xref).to.eql(\"null\");",
											"});",
											"pm.test(\"Verify returned trait ontologyReference documentationLinks\", function () {        ",
											"    pm.expect(jsonData.result.data[index].trait.ontologyReference.documentationLinks).to.eql([]);",
											"});",
											"pm.test(\"Verify returned ontologyReference ontologyDbId documentationLinks\", function () {        ",
											"    pm.expect(jsonData.result.data[index].trait.ontologyReference.documentationLinks).to.eql([]);",
											"});",
											"pm.test(\"Verify returned ontologyReference ontologyDbId ontologyDbId\", function () {        ",
											"    pm.expect(jsonData.result.data[index].trait.ontologyReference.ontologyDbId).to.eql(\"null\");",
											"});",
											"pm.test(\"Verify returned ontologyReference ontologyDbId ontologyName\", function () {        ",
											"    pm.expect(jsonData.result.data[index].trait.ontologyReference.ontologyName).to.eql(\"Biomass\");",
											"});",
											"pm.test(\"Verify returned ontologyReference ontologyDbId version\", function () {        ",
											"    pm.expect(jsonData.result.data[index].trait.ontologyReference.version).to.eql(null);",
											"});",
											"",
											"pm.test(\"Verify returned ontologyReference ontologyName\", function () {        ",
											"    pm.expect(jsonData.result.data[index].trait.ontologyReference.ontologyName).to.eql(\"Biomass\");",
											"});",
											"pm.test(\"Verify returned ontologyReference version\", function () {        ",
											"    pm.expect(jsonData.result.data[index].trait.ontologyReference.version).to.eql(null);",
											"});",
											"pm.test(\"Verify returned trait class\", function () {        ",
											"    pm.expect(jsonData.result.data[index].trait.class).to.eql(\"Agronomic\");",
											"});",
											"//Method",
											"pm.test(\"Verify returned method description\", function () {        ",
											"    pm.expect(jsonData.result.data[index].method.description).to.eql(\"Dry and weigh\");",
											"});",
											"pm.test(\"Verify returned method formula\", function () {        ",
											"    pm.expect(jsonData.result.data[index].method.formula).to.eql(\"{{100020}}+5\");",
											"});",
											"pm.test(\"Verify returned method methodDbId\", function () {        ",
											"    pm.expect(jsonData.result.data[index].method.methodDbId).to.eql(\"16000\");",
											"});",
											"pm.test(\"Verify returned method methodName\", function () {        ",
											"    pm.expect(jsonData.result.data[index].method.methodName).to.eql(\"Dry and weigh\");",
											"});",
											"pm.test(\"Verify returned method name\", function () {        ",
											"    pm.expect(jsonData.result.data[index].method.name).to.eql(\"Dry and weigh\");",
											"});",
											"pm.test(\"Verify returned method ontologyReferenceObject documentationLinks\", function () {        ",
											"    pm.expect(jsonData.result.data[index].method.ontologyReferenceObject.documentationLinks).to.eql([]);",
											"})",
											"pm.test(\"Verify returned method ontologyReferenceObject ontologyDbId\", function () {        ",
											"    pm.expect(jsonData.result.data[index].method.ontologyReferenceObject.ontologyDbId).to.eql(\"16000\");",
											"})",
											"pm.test(\"Verify returned method ontologyReferenceObject ontologyName\", function () {        ",
											"    pm.expect(jsonData.result.data[index].method.ontologyReferenceObject.ontologyName).to.eql(\"Dry and weigh\");",
											"})",
											"pm.test(\"Verify returned method ontologyReferenceObject version\", function () {        ",
											"    pm.expect(jsonData.result.data[index].method.ontologyReferenceObject.version).to.eql(null);",
											"})",
											"",
											"pm.test(\"Verify returned method reference\", function () {        ",
											"    pm.expect(jsonData.result.data[index].method.reference).to.eql(null);",
											"});",
											"pm.test(\"Verify returned method ontologyReference documentationLinks\", function () {        ",
											"    pm.expect(jsonData.result.data[index].method.ontologyReference.documentationLinks).to.eql([]);",
											"});",
											"pm.test(\"Verify returned method ontologyReference ontologyDbId\", function () {        ",
											"    pm.expect(jsonData.result.data[index].method.ontologyReference.ontologyDbId).to.eql(\"16000\");",
											"});",
											"pm.test(\"Verify returned method ontologyReference ontologyName\", function () {        ",
											"    pm.expect(jsonData.result.data[index].method.ontologyReference.ontologyName).to.eql(\"Dry and weigh\");",
											"});",
											"pm.test(\"Verify returned method ontologyReference version\", function () {        ",
											"    pm.expect(jsonData.result.data[index].method.ontologyReference.version).to.eql(null);",
											"});",
											"pm.test(\"Verify returned method class\", function () {        ",
											"    pm.expect(jsonData.result.data[index].method.class).to.eql(null);",
											"});",
											"",
											"//Scale",
											"pm.test(\"Verify returned scale dataType\", function () {",
											"    pm.expect(jsonData.result.data[index].scale.dataType).to.eql(\"Numerical\");",
											"});",
											"pm.test(\"Verify returned scale decimalPlaces\", function () {",
											"    pm.expect(jsonData.result.data[index].scale.decimalPlaces).to.eql(4);",
											"});",
											"pm.test(\"Verify returned scale name\", function () {",
											"    pm.expect(jsonData.result.data[index].scale.name).to.eql(\"t/ha\");",
											"});",
											"pm.test(\"Verify returned scale name\", function () {",
											"    pm.expect(jsonData.result.data[index].scale.name).to.eql(\"t/ha\");",
											"});",
											"pm.test(\"Verify returned scale ontologyReference documentationLinks\", function () {",
											"    pm.expect(jsonData.result.data[index].scale.ontologyReference.documentationLinks).to.eql([]);",
											"});",
											"pm.test(\"Verify returned scale ontologyReference ontologyDbId\", function () {",
											"    pm.expect(jsonData.result.data[index].scale.ontologyReference.ontologyDbId).to.eql(\"17010\");",
											"});",
											"pm.test(\"Verify returned scale ontologyReference ontologyName\", function () {",
											"    pm.expect(jsonData.result.data[index].scale.ontologyReference.ontologyName).to.eql(\"t/ha\");",
											"});",
											"pm.test(\"Verify returned scale ontologyReference version\", function () {",
											"    pm.expect(jsonData.result.data[index].scale.ontologyReference.version).to.eql(null);",
											"});",
											"pm.test(\"Verify returned scale scaleDbId\", function () {",
											"    pm.expect(jsonData.result.data[index].scale.scaleDbId).to.eql(\"17010\");",
											"});",
											"pm.test(\"Verify returned scale scaleName\", function () {",
											"    pm.expect(jsonData.result.data[index].scale.scaleName).to.eql(\"t/ha\");",
											"});",
											"",
											"pm.test(\"Verify returned scale validValues categories\", function () {",
											"    pm.expect(jsonData.result.data[index].scale.validValues.categories).to.eql(null);",
											"});",
											"pm.test(\"Verify returned scale validValues max\", function () {",
											"    pm.expect(jsonData.result.data[index].scale.validValues.max).to.eql(null);",
											"});",
											"pm.test(\"Verify returned scale validValues min\", function () {",
											"    pm.expect(jsonData.result.data[index].scale.validValues.min).to.eql(null);",
											"});",
											"pm.test(\"Verify returned scale xref\", function () {",
											"    pm.expect(jsonData.result.data[index].scale.xref).to.eql(null);",
											"});",
											"",
											"pm.test(\"Verify returned scientist\", function () {",
											"    pm.expect(jsonData.result.data[index].scientist).to.eql(null);",
											"});",
											"pm.test(\"Verify returned status\", function () {",
											"    pm.expect(jsonData.result.data[index].status).to.eql(null);",
											"});",
											"pm.test(\"Verify returned submissionTimestamp\", function () {",
											"    pm.expect(jsonData.result.data[index].submissionTimestamp).to.eql(null);",
											"});",
											"pm.test(\"Verify returned synonyms\", function () {",
											"    pm.expect(jsonData.result.data[index].synonyms).to.eql([]);",
											"});",
											"pm.test(\"Verify returned xref\", function () {",
											"    pm.expect(jsonData.result.data[index].xref).to.eql(null);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/studies/{{studyDbId}}/observationvariables?page=1&pageSize=1",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"studies",
										"{{studyDbId}}",
										"observationvariables"
									],
									"query": [
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "pageSize",
											"value": "1"
										}
									]
								},
								"description": "GET /{crop}​/brapi​/v1​/studies​/{studyDbId}​/observationvariables"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered pageSize greater than max",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"",
											"pm.test(\"Verify returned error message\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.errors[0].message).to.eql(\"Page size must between 1 and 10000.\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/studies/{{studyDbId}}/observationvariables?page=0&pageSize=10001",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"studies",
										"{{studyDbId}}",
										"observationvariables"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "10001"
										}
									]
								},
								"description": "GET /{crop}​/brapi​/v1​/studies​/{studyDbId}​/observationvariables"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered non-existing studyDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Verify returned error message\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"The requested object studyDbId is not found.\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/studies/{{non_existing_study_id}}/observationvariables",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"studies",
										"{{non_existing_study_id}}",
										"observationvariables"
									]
								},
								"description": "GET /{crop}​/brapi​/v1​/studies​/{studyDbId}​/observationvariables"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid crop",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Verify returned error message\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.errors[0].message).to.eql(\"Invalid crop invalid for URL:/invalid/brapi/v1/studies/2/observationvariables\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/invalid/brapi/v1/studies/{{studyDbId}}/observationvariables",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"invalid",
										"brapi",
										"v1",
										"studies",
										"{{studyDbId}}",
										"observationvariables"
									]
								},
								"description": "GET /{crop}​/brapi​/v1​/studies​/{studyDbId}​/observationvariables"
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "observation-resource-brapi",
			"item": [
				{
					"name": "GET /{crop}/brapi/v1/observationLevels",
					"item": [
						{
							"name": "Verify response code and body when entered valid crop name",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify returned observation levels\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0]).to.eql(\"MEANS\");",
											"    pm.expect(jsonData.result.data[1]).to.eql(\"PLOT\");",
											"    pm.expect(jsonData.result.data[2]).to.eql(\"PLANT\");",
											"    pm.expect(jsonData.result.data[3]).to.eql(\"QUADRAT\");",
											"    pm.expect(jsonData.result.data[4]).to.eql(\"TIMESERIES\");",
											"    pm.expect(jsonData.result.data[5]).to.eql(\"CUSTOM\");",
											"   ",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/observationLevels",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"observationLevels"
									]
								},
								"description": "GET /{crop}/brapi/v1/observationLevels"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered page number and page size aside from required parameters",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify returned pagination\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											"    pm.expect(jsonData.metadata.pagination.pageSize).to.eql(3);",
											"   ",
											"});",
											"pm.test(\"Verify returned observation levels\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0]).to.eql(\"MEANS\");",
											"    pm.expect(jsonData.result.data[1]).to.eql(\"PLOT\");",
											"    pm.expect(jsonData.result.data[2]).to.eql(\"PLANT\");",
											"   ",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/observationLevels?page=0&pageSize=3",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"observationLevels"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "3"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/observationLevels"
							},
							"response": []
						},
						{
							"name": "Verify if user can invoke the call using 10000 as page size",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify returned pagination\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											"    pm.expect(jsonData.metadata.pagination.pageSize).to.eql(10000);",
											"   ",
											"});",
											"pm.test(\"Verify returned observation levels\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0]).to.eql(\"MEANS\");",
											"    pm.expect(jsonData.result.data[1]).to.eql(\"PLOT\");",
											"    pm.expect(jsonData.result.data[2]).to.eql(\"PLANT\");",
											"    pm.expect(jsonData.result.data[3]).to.eql(\"QUADRAT\");",
											"    pm.expect(jsonData.result.data[4]).to.eql(\"TIMESERIES\");",
											"    pm.expect(jsonData.result.data[5]).to.eql(\"CUSTOM\");",
											"   ",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/observationLevels?page=0&pageSize=10000",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"observationLevels"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "10000"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/observationLevels"
							},
							"response": []
						},
						{
							"name": "Verify if user can invoke the call using page size that is greater than 10000",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"",
											"pm.test(\"Verify returned error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Page size must between 1 and 10000.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/observationLevels?page=0&pageSize=10001",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"observationLevels"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "10001"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/observationLevels"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered string input to  page number",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"pm.test(\"Verify error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"For input string: \\\"asd\\\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/observationLevels?page={{string_input}}&pageSize=3",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"observationLevels"
									],
									"query": [
										{
											"key": "page",
											"value": "{{string_input}}"
										},
										{
											"key": "pageSize",
											"value": "3"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/observationLevels"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered string input to  pageSize",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"pm.test(\"Verify error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"For input string: \\\"asd\\\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/observationLevels?page=0&pageSize={{string_input}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"observationLevels"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "{{string_input}}"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/observationLevels"
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "variable-resource-brapi",
			"item": [
				{
					"name": "POST ​/{crop}​/brapi​/v2​/search​/variables",
					"item": [
						{
							"name": "Filter search by combined parameters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"    var jsonData = pm.response.json();",
											"    pm.environment.unset(\"variable_search_combined\");",
											"    pm.environment.set(\"variable_search_combined\", jsonData.result.searchResultsDbId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"dataTypes\": [\n    \"Numerical\"\n  ],\n  \"externalReferenceIDs\": [\n    \"doi:10.155454/12341234\"\n  ],\n  \"externalReferenceSources\": [\n    \"DOI\"\n  ],\n  \"methodDbIds\": [\n    \"16000\"\n  ],\n  \"observationVariableDbIds\": [\n    \"18000\"\n  ],\n  \"observationVariableNames\": [\n    \"Grain_yield\"\n  ],\n  \"ontologyDbIds\": [\n    \"18000\"\n  ],\n  \"page\": 0,\n  \"pageSize\": 10000,\n  \"scaleDbIds\": [\n    \"6090\"\n  ],\n  \"studyDbId\": [\n    \"2\"\n  ],\n  \"traitClasses\": [\n    \"Agronomic\"\n  ],\n  \"traitDbIds\": [\n    \"15009\"\n  ]\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/search/variables",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"search",
										"variables"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						},
						{
							"name": "Filter search by numerical dataTypes",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"    var jsonData = pm.response.json();",
											"    pm.environment.unset(\"variable_search_dataType_numeric\");",
											"    pm.environment.set(\"variable_search_dataType_numeric\", jsonData.result.searchResultsDbId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"dataTypes\": [\n    \"Numerical\"\n  ]\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/search/variables",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"search",
										"variables"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						},
						{
							"name": "Filter search by text dataTypes",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"    var jsonData = pm.response.json();",
											"    pm.environment.unset(\"variable_search_dataType_text\");",
											"    pm.environment.set(\"variable_search_dataType_text\", jsonData.result.searchResultsDbId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"dataTypes\": [\n    \"Text\"\n  ]\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/search/variables",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"search",
										"variables"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						},
						{
							"name": "Filter search by date dataTypes",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"    var jsonData = pm.response.json();",
											"    pm.environment.unset(\"variable_search_dataType_date\");",
											"    pm.environment.set(\"variable_search_dataType_date\", jsonData.result.searchResultsDbId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"dataTypes\": [\n    \"Date\"\n  ]\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/search/variables",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"search",
										"variables"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						},
						{
							"name": "Filter search by nominal dataTypes Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"    var jsonData = pm.response.json();",
											"    pm.environment.unset(\"variable_search_dataType_nominal\");",
											"    pm.environment.set(\"variable_search_dataType_nominal\", jsonData.result.searchResultsDbId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"dataTypes\": [\n    \"Nominal\"\n  ]\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/search/variables",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"search",
										"variables"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						},
						{
							"name": "Filter search by externalReferenceID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"    var jsonData = pm.response.json();",
											"    pm.environment.unset(\"variable_search_externalReferenceID\");",
											"    pm.environment.set(\"variable_search_externalReferenceID\", jsonData.result.searchResultsDbId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"externalReferenceIDs\": [\n    \"doi:10.155454/12341234\"\n  ]\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/search/variables",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"search",
										"variables"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						},
						{
							"name": "Filter search by externalReferenceSource",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"    var jsonData = pm.response.json();",
											"    pm.environment.unset(\"variable_search_externalReferenceSource\");",
											"    pm.environment.set(\"variable_search_externalReferenceSource\", jsonData.result.searchResultsDbId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"externalReferenceSources\": [\n    \"DOI\"\n  ]\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/search/variables",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"search",
										"variables"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						},
						{
							"name": "Filter search by methodDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"    var jsonData = pm.response.json();",
											"    pm.environment.unset(\"variable_search_methodDbId\");",
											"    pm.environment.set(\"variable_search_methodDbId\", jsonData.result.searchResultsDbId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"methodDbIds\": [\n    \"16000\"\n  ]\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/search/variables",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"search",
										"variables"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						},
						{
							"name": "Filter search by observationVariableDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"    var jsonData = pm.response.json();",
											"    pm.environment.unset(\"variable_search_observationVariableDbId\");",
											"    pm.environment.set(\"variable_search_observationVariableDbId\", jsonData.result.searchResultsDbId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"observationVariableDbIds\": [\n    \"18000\"\n  ]\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/search/variables",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"search",
										"variables"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						},
						{
							"name": "Filter search by observationVariableName",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"    var jsonData = pm.response.json();",
											"    pm.environment.unset(\"variable_search_observationVariableName\");",
											"    pm.environment.set(\"variable_search_observationVariableName\", jsonData.result.searchResultsDbId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"observationVariableNames\": [\n    \"Grain_yield\"\n  ]\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/search/variables",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"search",
										"variables"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						},
						{
							"name": "Filter search by ontologyDbId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"    var jsonData = pm.response.json();",
											"    pm.environment.unset(\"variable_search_ontologyDbId\");",
											"    pm.environment.set(\"variable_search_ontologyDbId\", jsonData.result.searchResultsDbId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"ontologyDbIds\": [\n    \"18000\"\n  ]\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/search/variables",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"search",
										"variables"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						},
						{
							"name": "Filter search by scaleDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"    var jsonData = pm.response.json();",
											"    pm.environment.unset(\"variable_search_scaleDbId\");",
											"    pm.environment.set(\"variable_search_scaleDbId\", jsonData.result.searchResultsDbId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"scaleDbIds\": [\n    \"6090\"\n  ]\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/search/variables",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"search",
										"variables"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						},
						{
							"name": "Filter search by studyDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"    var jsonData = pm.response.json();",
											"    pm.environment.unset(\"variable_search_studyDbId\");",
											"    pm.environment.set(\"variable_search_studyDbId\", jsonData.result.searchResultsDbId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"studyDbId\": [\n    \"{{studyDbId}}\"\n  ]\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/search/variables",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"search",
										"variables"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						},
						{
							"name": "Filter search by traitDbIds",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"    var jsonData = pm.response.json();",
											"    pm.environment.unset(\"variable_search_traitDbId\");",
											"    pm.environment.set(\"variable_search_traitDbId\", jsonData.result.searchResultsDbId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"traitDbIds\": [\n    \"15110\"\n  ]\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/search/variables",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"search",
										"variables"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						},
						{
							"name": "Filter search by traitClass",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"    var jsonData = pm.response.json();",
											"    pm.environment.unset(\"variable_search_traitClass\");",
											"    pm.environment.set(\"variable_search_traitClass\", jsonData.result.searchResultsDbId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"traitClasses\": [\n    \"Agronomic\"\n  ]\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/search/variables",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"search",
										"variables"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						}
					]
				},
				{
					"name": "GET ​/{crop}​/brapi​/v2​/search​/variables​/{searchResultsDbId}",
					"item": [
						{
							"name": "Verify results when entered searchResultsDbid that filters by combined parameters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(1);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"var index = 0",
											"pm.test(\"Check additionalInfo\", function () {",
											"    pm.expect(jsonData.result.data[index].additionalInfo).to.eql({});",
											"});",
											"pm.test(\"Check commonCropName\", function () {",
											"    pm.expect(jsonData.result.data[index].commonCropName).to.eql(pm.environment.get(\"crop\"));",
											"});",
											"pm.test(\"Check contextOfUse\", function () {",
											"    pm.expect(jsonData.result.data[index].contextOfUse).to.eql([\"PLOT\"]);",
											"});",
											"pm.test(\"Check defaultValue\", function () {",
											"    pm.expect(jsonData.result.data[index].defaultValue).to.eql(\"\");",
											"});",
											"pm.test(\"Check documentationURL\", function () {",
											"    pm.expect(jsonData.result.data[index].documentationURL).to.eql(null);",
											"});",
											"pm.test(\"Check externalReferences referenceID\", function () {",
											"    pm.expect(jsonData.result.data[index].externalReferences[0].referenceID).to.eql(\"doi:10.155454/12341234\");",
											"});",
											"pm.test(\"Check externalReferences referenceSource\", function () {",
											"    pm.expect(jsonData.result.data[index].externalReferences[0].referenceSource).to.eql(\"DOI\");",
											"});",
											"pm.test(\"Check growthStage\", function () {",
											"    pm.expect(jsonData.result.data[index].growthStage).to.eql(null);",
											"});",
											"pm.test(\"Check institution\", function () {",
											"    pm.expect(jsonData.result.data[index].institution).to.eql(null);",
											"});",
											"pm.test(\"Check language\", function () {",
											"    pm.expect(jsonData.result.data[index].language).to.eql(null);",
											"});",
											"pm.test(\"Check observationVariableDbId\", function () {",
											"    pm.expect(jsonData.result.data[index].observationVariableDbId).to.eql(\"18000\");",
											"});",
											"pm.test(\"Check observationVariableName\", function () {",
											"    pm.expect(jsonData.result.data[index].observationVariableName).to.eql(\"Grain_yield\");",
											"});",
											"",
											"pm.test(\"Check ontologyReference documentationLinks\", function () {",
											"    pm.expect(jsonData.result.data[index].ontologyReference.documentationLinks).to.eql([]);",
											"});",
											"pm.test(\"Check ontologyReference ontologyName\", function () {",
											"    pm.expect(jsonData.result.data[index].ontologyReference.ontologyName).to.eql(\"Grain_yield\");",
											"});",
											"pm.test(\"Check ontologyReference ontologyDbId\", function () {",
											"    pm.expect(jsonData.result.data[index].ontologyReference.ontologyDbId).to.eql(\"18000\");",
											"});",
											"//Traits",
											"pm.test(\"Check trait additionalInfo\", function () {",
											"    pm.expect(jsonData.result.data[index].trait.additionalInfo).to.eql({});",
											"});",
											"",
											"pm.test(\"Check trait alternativeAbbreviations\", function () {",
											"    pm.expect(jsonData.result.data[index].trait.alternativeAbbreviations).to.eql([]);",
											"});",
											"pm.test(\"Check trait attribute\", function () {",
											"    pm.expect(jsonData.result.data[index].trait.attribute).to.eql(null);",
											"});",
											"pm.test(\"Check trait entity\", function () {",
											"    pm.expect(jsonData.result.data[index].trait.entity).to.eql(null);",
											"});",
											"pm.test(\"Check trait externalReferences\", function () {",
											"    pm.expect(jsonData.result.data[index].trait.externalReferences).to.eql(null);",
											"});",
											"pm.test(\"Check trait mainAbbreviation\", function () {",
											"    pm.expect(jsonData.result.data[index].trait.mainAbbreviation).to.eql(null);",
											"});",
											"pm.test(\"Check trait traitClass\", function () {",
											"    pm.expect(jsonData.result.data[index].trait.traitClass).to.eql(\"Agronomic\");",
											"});",
											"pm.test(\"Check trait traitDescription\", function () {",
											"    pm.expect(jsonData.result.data[index].trait.traitDescription).to.eql(\"Yield\");",
											"});",
											"pm.test(\"Check trait name\", function () {",
											"    pm.expect(jsonData.result.data[index].trait.name).to.eql(\"Yield\");",
											"});",
											"pm.test(\"Check trait status\", function () {",
											"    pm.expect(jsonData.result.data[index].trait.status).to.eql(\"Active\");",
											"});",
											"pm.test(\"Check trait synonyms\", function () {",
											"    pm.expect(jsonData.result.data[index].trait.synonyms).to.eql([]);",
											"});",
											"pm.test(\"Check trait traitDbId\", function () {",
											"    pm.expect(jsonData.result.data[index].trait.traitDbId).to.eql(\"15009\");",
											"});",
											"pm.test(\"Check trait traitName\", function () {",
											"    pm.expect(jsonData.result.data[index].trait.traitName).to.eql(\"Yield\");",
											"});",
											"pm.test(\"Check trait ontologyReference documentationLinks\", function () {",
											"    pm.expect(jsonData.result.data[index].trait.ontologyReference.documentationLinks).to.eql([]);",
											"});",
											"pm.test(\"Check trait ontologyReference ontologyDbId\", function () {",
											"    pm.expect(jsonData.result.data[index].trait.ontologyReference.ontologyDbId).to.eql(\"null\");",
											"});",
											"pm.test(\"Check trait ontologyReference ontologyName\", function () {",
											"    pm.expect(jsonData.result.data[index].trait.ontologyReference.ontologyName).to.eql(\"Yield\");",
											"});",
											"pm.test(\"Check trait ontologyReference version\", function () {",
											"    pm.expect(jsonData.result.data[index].trait.ontologyReference.version).to.eql(null);",
											"});",
											"",
											"//Method",
											"pm.test(\"Check method additionalInfo\", function () {",
											"    pm.expect(jsonData.result.data[index].method.additionalInfo).to.eql({});",
											"});",
											"pm.test(\"Check method bibliographicalReference\", function () {",
											"    pm.expect(jsonData.result.data[index].method.bibliographicalReference).to.eql(null);",
											"});",
											"pm.test(\"Check method externalReferences\", function () {",
											"    pm.expect(jsonData.result.data[index].method.externalReferences).to.eql(null);",
											"});",
											"pm.test(\"Check method methodClass\", function () {",
											"    pm.expect(jsonData.result.data[index].method.methodClass).to.eql(null);",
											"});",
											"pm.test(\"Check method description\", function () {",
											"    pm.expect(jsonData.result.data[index].method.description).to.eql(\"Dry and weigh\");",
											"});",
											"pm.test(\"Check method formula\", function () {",
											"    pm.expect(jsonData.result.data[index].method.formula).to.eql(\"{{18110}}+10\");",
											"});",
											"pm.test(\"Check method methodDbId\", function () {",
											"    pm.expect(jsonData.result.data[index].method.methodDbId).to.eql(\"16000\");",
											"});",
											"pm.test(\"Check method methodName\", function () {",
											"    pm.expect(jsonData.result.data[index].method.methodName).to.eql(\"Dry and weigh\");",
											"});",
											"pm.test(\"Check method ontologyReferenceObject documentationLinks\", function () {",
											"    pm.expect(jsonData.result.data[index].method.ontologyReferenceObject.documentationLinks).to.eql([]);",
											"});",
											"",
											"pm.test(\"Check method ontologyReferenceObject version \", function () {",
											"    pm.expect(jsonData.result.data[index].method.ontologyReferenceObject.version).to.eql(null);",
											"});",
											"",
											"//Scale",
											"pm.test(\"Check scale additionalInfo \", function () {",
											"    pm.expect(jsonData.result.data[index].scale.additionalInfo).to.eql({});",
											"});",
											"pm.test(\"Check scale additionalInfo \", function () {",
											"    pm.expect(jsonData.result.data[index].scale.dataType).to.eql(\"Numerical\");",
											"});",
											"pm.test(\"Check scale dataType \", function () {",
											"    pm.expect(jsonData.result.data[index].scale.dataType).to.eql(\"Numerical\");",
											"});",
											"pm.test(\"Check scale decimalPlaces \", function () {",
											"    pm.expect(jsonData.result.data[index].scale.decimalPlaces).to.eql(4);",
											"});",
											"pm.test(\"Check scale externalReferences \", function () {",
											"    pm.expect(jsonData.result.data[index].scale.externalReferences).to.eql(null);",
											"});",
											"pm.test(\"Check scale ontologyReference documentationLinks\", function () {",
											"    pm.expect(jsonData.result.data[index].scale.ontologyReference.documentationLinks).to.eql([]);",
											"});",
											"",
											"",
											"pm.test(\"Check scale version\", function () {",
											"    pm.expect(jsonData.result.data[index].scale.ontologyReference.version).to.eql(null);",
											"});",
											"pm.test(\"Check scale scaleDbId\", function () {",
											"    pm.expect(jsonData.result.data[index].scale.scaleDbId).to.eql(\"6090\");",
											"});",
											"pm.test(\"Check scale scaleName\", function () {",
											"    pm.expect(jsonData.result.data[index].scale.scaleName).to.eql(\"Kg/ha\");",
											"});",
											"pm.test(\"Check scale validValues categories\", function () {",
											"    pm.expect(jsonData.result.data[index].scale.validValues.categories).to.eql(null);",
											"});",
											"pm.test(\"Check scale validValues max\", function () {",
											"    pm.expect(jsonData.result.data[index].scale.validValues.max).to.eql(null);",
											"});",
											"pm.test(\"Check scale validValues min\", function () {",
											"    pm.expect(jsonData.result.data[index].scale.validValues.min).to.eql(null);",
											"});",
											"",
											"",
											"pm.test(\"Check scientist\", function () {",
											"    pm.expect(jsonData.result.data[index].scientist).to.eql(null);",
											"});",
											"",
											"pm.test(\"Check status\", function () {",
											"    pm.expect(jsonData.result.data[index].status).to.eql(null);",
											"});",
											"pm.test(\"Check submissionTimestamp\", function () {",
											"    pm.expect(jsonData.result.data[index].submissionTimestamp).to.eql(null);",
											"});",
											"pm.test(\"Check synonyms\", function () {",
											"    pm.expect(jsonData.result.data[index].synonyms).to.eql([]);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/search/variables/{{variable_search_combined}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"search",
										"variables",
										"{{variable_search_combined}}"
									]
								},
								"description": "GET ​/{crop}​/brapi​/v1​/variables"
							},
							"response": []
						},
						{
							"name": "Verify results when entered searchResultsDbid that filters by numerical dataType",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(16);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Check if dataType of all variables are numerical\", function () {",
											" for (var i = 0; i < jsonData.result.data.length; i++) { ",
											"    pm.expect(jsonData.result.data[i].scale.dataType).to.eql(\"Numerical\");",
											" }",
											"",
											"});",
											"   "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/search/variables/{{variable_search_dataType_numeric}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"search",
										"variables",
										"{{variable_search_dataType_numeric}}"
									]
								},
								"description": "GET ​/{crop}​/brapi​/v1​/variables"
							},
							"response": []
						},
						{
							"name": "Verify results when entered searchResultsDbid that filters by text dataType",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(4);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Check if dataType of all variables are Text\", function () {",
											" for (var i = 0; i < jsonData.result.data.length; i++) { ",
											"    pm.expect(jsonData.result.data[i].scale.dataType).to.eql(\"Text\");",
											" }",
											"",
											"});",
											"   "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/search/variables/{{variable_search_dataType_text}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"search",
										"variables",
										"{{variable_search_dataType_text}}"
									]
								},
								"description": "GET ​/{crop}​/brapi​/v1​/variables"
							},
							"response": []
						},
						{
							"name": "Verify results when entered searchResultsDbid that filters by date dataType",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(1);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Check if dataType of all variables are Date\", function () {",
											" for (var i = 0; i < jsonData.result.data.length; i++) { ",
											"    pm.expect(jsonData.result.data[i].scale.dataType).to.eql(\"Date\");",
											" }",
											"",
											"});",
											"   "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/search/variables/{{variable_search_dataType_date}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"search",
										"variables",
										"{{variable_search_dataType_date}}"
									]
								},
								"description": "GET ​/{crop}​/brapi​/v1​/variables"
							},
							"response": []
						},
						{
							"name": "Verify results when entered searchResultsDbid that filters by nominal dataType",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(4);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Check if dataType of all variables are Nominal\", function () {",
											" for (var i = 0; i < jsonData.result.data.length; i++) { ",
											"    pm.expect(jsonData.result.data[i].scale.dataType).to.eql(\"Nominal\");",
											" }",
											"",
											"});",
											"   "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/search/variables/{{variable_search_dataType_nominal}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"search",
										"variables",
										"{{variable_search_dataType_nominal}}"
									]
								},
								"description": "GET ​/{crop}​/brapi​/v1​/variables"
							},
							"response": []
						},
						{
							"name": "Verify results when entered searchResultsDbid that filters by externalReferenceID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(1);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Check if externalReferences.referenceIDis correct\", function () {",
											" for (var i = 0; i < jsonData.result.data.length; i++) { ",
											"    pm.expect(jsonData.result.data[i].externalReferences[0].referenceID).to.eql(\"doi:10.155454/12341234\");",
											"",
											" }",
											"",
											"});",
											"   "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/search/variables/{{variable_search_externalReferenceID}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"search",
										"variables",
										"{{variable_search_externalReferenceID}}"
									]
								},
								"description": "GET ​/{crop}​/brapi​/v1​/variables"
							},
							"response": []
						},
						{
							"name": "Verify results when entered searchResultsDbid that filters by externalReferenceSource",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(1);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Check if scale of all variables are numerical\", function () {",
											" for (var i = 0; i < jsonData.result.data.length; i++) { ",
											"    pm.expect(jsonData.result.data[i].externalReferences[0].referenceSource).to.eql(\"DOI\");",
											"",
											" }",
											"",
											"});",
											"   "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/search/variables/{{variable_search_externalReferenceSource}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"search",
										"variables",
										"{{variable_search_externalReferenceSource}}"
									]
								},
								"description": "GET ​/{crop}​/brapi​/v1​/variables"
							},
							"response": []
						},
						{
							"name": "Verify results when entered searchResultsDbid that filters by methodDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(2);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Check if scale of all variables are numerical\", function () {",
											" for (var i = 0; i < jsonData.result.data.length; i++) { ",
											"    pm.expect(jsonData.result.data[i].method.methodDbId).to.eql(\"16000\");",
											"",
											" }",
											"",
											"});",
											"   "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/search/variables/{{variable_search_methodDbId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"search",
										"variables",
										"{{variable_search_methodDbId}}"
									]
								},
								"description": "GET ​/{crop}​/brapi​/v1​/variables"
							},
							"response": []
						},
						{
							"name": "Verify results when entered searchResultsDbid that filters by observationVariableDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(1);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Check if scale of all variables are numerical\", function () {",
											" for (var i = 0; i < jsonData.result.data.length; i++) { ",
											"    pm.expect(jsonData.result.data[i].observationVariableDbId).to.eql(\"18000\");",
											"",
											" }",
											"",
											"});",
											"   "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/search/variables/{{variable_search_observationVariableDbId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"search",
										"variables",
										"{{variable_search_observationVariableDbId}}"
									]
								},
								"description": "GET ​/{crop}​/brapi​/v1​/variables"
							},
							"response": []
						},
						{
							"name": "Verify results when entered searchResultsDbid that filters by observationVariableName",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(1);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Check if scale of all variables are numerical\", function () {",
											" for (var i = 0; i < jsonData.result.data.length; i++) { ",
											"    pm.expect(jsonData.result.data[i].observationVariableName).to.eql(\"Grain_yield\");",
											"",
											" }",
											"",
											"});",
											"   "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/search/variables/{{variable_search_observationVariableName}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"search",
										"variables",
										"{{variable_search_observationVariableName}}"
									]
								},
								"description": "GET ​/{crop}​/brapi​/v1​/variables"
							},
							"response": []
						},
						{
							"name": "Verify results when entered searchResultsDbid that filters by ontologyDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(1);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Check if all ontologyDbIds are correct\", function () {",
											" for (var i = 0; i < jsonData.result.data.length; i++) { ",
											"    pm.expect(jsonData.result.data[i].ontologyReference.ontologyDbId).to.eql(\"18000\");",
											"",
											" }",
											"",
											"});",
											"   "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/search/variables/{{variable_search_ontologyDbId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"search",
										"variables",
										"{{variable_search_ontologyDbId}}"
									]
								},
								"description": "GET ​/{crop}​/brapi​/v1​/variables"
							},
							"response": []
						},
						{
							"name": "Verify results when entered searchResultsDbid that filters by scaleDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(1);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Check if scale of all variables are numerical\", function () {",
											" for (var i = 0; i < jsonData.result.data.length; i++) { ",
											"    pm.expect(jsonData.result.data[i].scale.scaleDbId).to.eql(\"6090\");",
											"",
											" }",
											"",
											"});",
											"   "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/search/variables/{{variable_search_scaleDbId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"search",
										"variables",
										"{{variable_search_scaleDbId}}"
									]
								},
								"description": "GET ​/{crop}​/brapi​/v1​/variables"
							},
							"response": []
						},
						{
							"name": "Verify results when entered searchResultsDbid that filters by studyDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(3);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Check if all variables for the given studyDbId are returned\", function () {",
											" for (var i = 0; i < jsonData.result.data.length; i++) { ",
											"    pm.expect(jsonData.result.data[i].observationVariableName).to.be.oneOf([\"Biomas_yield\",\"Grain_yield\",\"Grain_size\"]);",
											"",
											" }",
											"",
											"});",
											"   "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/search/variables/{{variable_search_studyDbId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"search",
										"variables",
										"{{variable_search_studyDbId}}"
									]
								},
								"description": "GET ​/{crop}​/brapi​/v1​/variables"
							},
							"response": []
						},
						{
							"name": "Verify results when entered searchResultsDbid that filters by traitDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(1);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Check if scale of all variables are numerical\", function () {",
											" for (var i = 0; i < jsonData.result.data.length; i++) { ",
											"    pm.expect(jsonData.result.data[i].trait.traitDbId).to.be.eql(\"15110\");",
											"",
											" }",
											"",
											"});",
											"   "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/search/variables/{{variable_search_traitDbId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"search",
										"variables",
										"{{variable_search_traitDbId}}"
									]
								},
								"description": "GET ​/{crop}​/brapi​/v1​/variables"
							},
							"response": []
						},
						{
							"name": "Verify results when entered searchResultsDbid that filters by traitClass",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(12);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Check if scale of all variables are numerical\", function () {",
											" for (var i = 0; i < jsonData.result.data.length; i++) { ",
											"    pm.expect(jsonData.result.data[i].trait.traitClass).to.be.eql(\"Agronomic\");",
											"",
											" }",
											"",
											"});",
											"   "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/search/variables/{{variable_search_traitClass}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"search",
										"variables",
										"{{variable_search_traitClass}}"
									]
								},
								"description": "GET ​/{crop}​/brapi​/v1​/variables"
							},
							"response": []
						}
					]
				},
				{
					"name": "GET ​/{crop}​/brapi​/v1​/variables",
					"item": [
						{
							"name": "Verify response code and body when entered valid crop",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Verify returned metadata\", function () {",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(25);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"//Verify returned variable (NOTES)",
											"var index = 0;",
											"pm.test(\"Check returned contextOfUse\", function () {",
											"    pm.expect(jsonData.result.data[index].contextOfUse).to.eql([\"PLOT\"]);",
											"});  ",
											"pm.test(\"Check returned crop\", function () {",
											"    pm.expect(jsonData.result.data[index].crop).to.eql(pm.environment.get(\"crop\"));",
											"});   ",
											"pm.test(\"Check returned date\", function () {",
											"    pm.expect(jsonData.result.data[index].date).to.eql(null);",
											"});     ",
											"pm.test(\"Check returned defaultValue\", function () {",
											"    pm.expect(jsonData.result.data[index].defaultValue).to.eql(\"\");",
											"}); ",
											"pm.test(\"Check returned documentationURL\", function () {",
											"    pm.expect(jsonData.result.data[index].documentationURL).to.eql(null);",
											"});   ",
											"pm.test(\"Check returned growthStage\", function () {",
											"    pm.expect(jsonData.result.data[index].growthStage).to.eql(null);",
											"});  ",
											"pm.test(\"Check returned institution\", function () {",
											"    pm.expect(jsonData.result.data[index].institution).to.eql(null);",
											"});  ",
											"pm.test(\"Check returned language\", function () {",
											"    pm.expect(jsonData.result.data[index].language).to.eql(null);",
											"});  ",
											"pm.test(\"Check returned name\", function () {",
											"    pm.expect(jsonData.result.data[index].name).to.eql(\"NOTES\");",
											"});  ",
											"pm.test(\"Check returned observationVariableDbId\", function () {",
											"    pm.expect(jsonData.result.data[index].observationVariableDbId).to.eql(pm.environment.get(\"study_notes_cvtermId\"));",
											"});  ",
											"pm.test(\"Check returned observationVariableName\", function () {",
											"    pm.expect(jsonData.result.data[index].observationVariableName).to.eql(\"NOTES\");",
											"});  ",
											"",
											"pm.test(\"Check returned ontologyReference documentationLinks\", function () {",
											"    pm.expect(jsonData.result.data[index].ontologyReference.documentationLinks).to.eql([]);",
											"});  ",
											"pm.test(\"Check returned ontologyReference ontologyDbId\", function () {",
											"    pm.expect(jsonData.result.data[index].ontologyReference.ontologyDbId).to.eql(\"8390\");",
											"});  ",
											"pm.test(\"Check returned ontologyReference ontologyName\", function () {",
											"    pm.expect(jsonData.result.data[index].ontologyReference.ontologyName).to.eql(\"NOTES\");",
											"});  ",
											"pm.test(\"Check returned ontologyReference version\", function () {",
											"    pm.expect(jsonData.result.data[index].ontologyReference.version).to.eql(null);",
											"});  ",
											"//Trait",
											"pm.test(\"Check returned trait alternativeAbbreviations\", function () {",
											"        pm.expect(jsonData.result.data[index].trait.alternativeAbbreviations).to.eql([]);",
											"}); ",
											"pm.test(\"Check returned trait attribute\", function () {",
											"        pm.expect(jsonData.result.data[index].trait.attribute).to.eql(null);",
											"}); ",
											"pm.test(\"Check returned trait entity\", function () {",
											"        pm.expect(jsonData.result.data[index].trait.entity).to.eql(null);",
											"}); ",
											"pm.test(\"Check returned trait mainAbbreviation\", function () {",
											"        pm.expect(jsonData.result.data[index].trait.mainAbbreviation).to.eql(null);",
											"}); ",
											"pm.test(\"Check returned trait description\", function () {",
											"        pm.expect(jsonData.result.data[index].trait.description).to.eql(\"Comment\");",
											"});   ",
											"pm.test(\"Check returned trait name\", function () {",
											"        pm.expect(jsonData.result.data[index].trait.name).to.eql(\"Comment\");",
											"}); ",
											"pm.test(\"Check returned trait status\", function () {",
											"        pm.expect(jsonData.result.data[index].trait.status).to.eql(\"Active\");",
											"}); ",
											"pm.test(\"Check returned trait synonyms\", function () {",
											"        pm.expect(jsonData.result.data[index].trait.synonyms).to.eql([]);",
											"}); ",
											"pm.test(\"Check returned trait traitDbId\", function () {",
											"        pm.expect(jsonData.result.data[index].trait.traitDbId).to.eql(\"2065\");",
											"}); ",
											"pm.test(\"Check returned trait traitName\", function () {",
											"        pm.expect(jsonData.result.data[index].trait.traitName).to.eql(\"Comment\");",
											"}); ",
											"pm.test(\"Check returned trait xref\", function () {",
											"        pm.expect(jsonData.result.data[index].trait.xref).to.eql(\"null\");",
											"}); ",
											"pm.test(\"Check returned trait ontologyReference documentationLinks\", function () {",
											"        pm.expect(jsonData.result.data[index].trait.ontologyReference.documentationLinks).to.eql([]);",
											"}); ",
											"pm.test(\"Check returned trait ontologyReference ontologyDbId\", function () {",
											"        pm.expect(jsonData.result.data[index].trait.ontologyReference.ontologyDbId).to.eql(\"null\");",
											"});",
											"pm.test(\"Check returned trait ontologyReference ontologyName\", function () {",
											"        pm.expect(jsonData.result.data[index].trait.ontologyReference.ontologyName).to.eql(\"Comment\");",
											"}); ",
											"pm.test(\"Check returned trait ontologyReference version\", function () {",
											"        pm.expect(jsonData.result.data[index].trait.ontologyReference.version).to.eql(null);",
											"}); ",
											"",
											"pm.test(\"Check returned trait class\", function () {",
											"        pm.expect(jsonData.result.data[index].trait.class).to.eql(\"General\");",
											"});",
											"",
											"//Method",
											"",
											"pm.test(\"Check returned method description\", function () {",
											"    pm.expect(jsonData.result.data[index].method.description).to.eql(\"Value recorded after observation\");",
											"}); ",
											"pm.test(\"Check returned method formula\", function () {",
											"    pm.expect(jsonData.result.data[index].method.formula).to.eql(\"null\");",
											"}); ",
											"pm.test(\"Check returned method methodDbId\", function () {",
											"    pm.expect(jsonData.result.data[index].method.methodDbId).to.eql(\"4110\");",
											"}); ",
											"pm.test(\"Check returned method methodName\", function () {",
											"    pm.expect(jsonData.result.data[index].method.methodName).to.eql(\"Observed\");",
											"}); ",
											"pm.test(\"Check returned method name\", function () {",
											"    pm.expect(jsonData.result.data[index].method.name).to.eql(\"Observed\");",
											"}); ",
											"",
											"pm.test(\"Check returned method ontologyReferenceObject documentationLinks\", function () {",
											"    pm.expect(jsonData.result.data[index].method.ontologyReferenceObject.documentationLinks).to.eql([]);",
											"}); ",
											"pm.test(\"Check returned method ontologyReferenceObject ontologyDbId\", function () {",
											"    pm.expect(jsonData.result.data[index].method.ontologyReferenceObject.ontologyDbId).to.eql(\"4110\");",
											"}); ",
											"pm.test(\"Check returned method ontologyReferenceObject ontologyName\", function () {",
											"    pm.expect(jsonData.result.data[index].method.ontologyReferenceObject.ontologyName).to.eql(\"Observed\");",
											"}); ",
											"pm.test(\"Check returned method ontologyReferenceObject version\", function () {",
											"    pm.expect(jsonData.result.data[index].method.ontologyReferenceObject.version).to.eql(null);",
											"}); ",
											"",
											"pm.test(\"Check returned method reference\", function () {",
											"    pm.expect(jsonData.result.data[index].method.reference).to.eql(null);",
											"}); ",
											"pm.test(\"Check returned method ontologyReference documentationLinks\", function () {",
											"    pm.expect(jsonData.result.data[index].method.ontologyReference.documentationLinks).to.eql([]);",
											"}); ",
											"pm.test(\"Check returned method ontologyReference ontologyDbId\", function () {",
											"    pm.expect(jsonData.result.data[index].method.ontologyReference.ontologyDbId).to.eql(\"4110\");",
											"}); ",
											"pm.test(\"Check returned method ontologyReference ontologyName\", function () {",
											"    pm.expect(jsonData.result.data[index].method.ontologyReference.ontologyName).to.eql(\"Observed\");",
											"}); ",
											"pm.test(\"Check returned method ontologyReference version\", function () {",
											"    pm.expect(jsonData.result.data[index].method.ontologyReference.version).to.eql(null);",
											"}); ",
											"",
											"",
											"pm.test(\"Check returned method class\", function () {",
											"    pm.expect(jsonData.result.data[index].method.class).to.eql(null);",
											"});  ",
											"",
											"//Scale",
											"pm.test(\"Check returned scale dataType\", function () {",
											"    pm.expect(jsonData.result.data[index].scale.dataType).to.eql(\"Text\");",
											"});    ",
											"pm.test(\"Check returned scale decimalPlaces\", function () {",
											"    pm.expect(jsonData.result.data[index].scale.decimalPlaces).to.eql(null);",
											"});     ",
											"pm.test(\"Check returned scale name\", function () {",
											"    pm.expect(jsonData.result.data[index].scale.name).to.eql(\"Text\");",
											"});    ",
											"pm.test(\"Check returned scale ontologyReference documentationLinks type\", function () {",
											"    pm.expect(jsonData.result.data[index].scale.ontologyReference.documentationLinks).to.eql([]);",
											"}); ",
											"pm.test(\"Check returned scale ontologyReference ontologyDbId\", function () {",
											"    pm.expect(jsonData.result.data[index].scale.ontologyReference.ontologyDbId).to.eql(\"6020\");",
											"}); ",
											"pm.test(\"Check returned scale ontologyReference ontologyName\", function () {",
											"    pm.expect(jsonData.result.data[index].scale.ontologyReference.ontologyName).to.eql(\"Text\");",
											"}); ",
											"pm.test(\"Check returned scale ontologyReference version\", function () {",
											"    pm.expect(jsonData.result.data[index].scale.ontologyReference.version).to.eql(null);",
											"}); ",
											"pm.test(\"Check returned scale scaleDbId\", function () {",
											"    pm.expect(jsonData.result.data[index].scale.scaleDbId).to.eql(\"6020\");",
											"});   ",
											"",
											"pm.test(\"Check returned scale scaleName\", function () {",
											"    pm.expect(jsonData.result.data[index].scale.scaleName).to.eql(\"Text\");",
											"});   ",
											"pm.test(\"Check returned scale validValues categories\", function () {",
											"    pm.expect(jsonData.result.data[index].scale.validValues.categories).to.eql(null);",
											"});   ",
											"pm.test(\"Check returned scale validValues max\", function () {",
											"    pm.expect(jsonData.result.data[index].scale.validValues.max).to.eql(null);",
											"});   ",
											"pm.test(\"Check returned scale validValues min\", function () {",
											"    pm.expect(jsonData.result.data[index].scale.validValues.min).to.eql(null);",
											"});   ",
											"pm.test(\"Check returned scale xref\", function () {",
											"    pm.expect(jsonData.result.data[index].scale.xref).to.eql(null);",
											"}); ",
											"",
											"pm.test(\"Check returned scientist\", function () {",
											"    pm.expect(jsonData.result.data[index].scientist).to.eql(null);",
											"});  ",
											"pm.test(\"Check returned status\", function () {",
											"    pm.expect(jsonData.result.data[index].status).to.eql(null);",
											"});  ",
											"pm.test(\"Check returned submissionTimestamp\", function () {",
											"    pm.expect(jsonData.result.data[index].submissionTimestamp).to.eql(null);",
											"});  ",
											"pm.test(\"Check returned synonyms\", function () {",
											"    pm.expect(jsonData.result.data[index].synonyms).to.eql([]);",
											"});    ",
											"pm.test(\"Check returned xref\", function () {",
											"    pm.expect(jsonData.result.data[index].xref).to.eql(null);",
											"});    "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/variables",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"variables"
									]
								},
								"description": "GET ​/{crop}​/brapi​/v1​/variables"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered valid pagination details",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Verify returned metadata\", function () {",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(1);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(5);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(25);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(5);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"//Verify returned variable (NOTES)",
											"var index = 0;",
											"pm.test(\"Check returned contextOfUse\", function () {",
											"    pm.expect(jsonData.result.data[index].contextOfUse).to.eql([\"PLOT\"]);",
											"});  ",
											"pm.test(\"Check returned crop\", function () {",
											"    pm.expect(jsonData.result.data[index].crop).to.eql(pm.environment.get(\"crop\"));",
											"});   ",
											"pm.test(\"Check returned date\", function () {",
											"    pm.expect(jsonData.result.data[index].date).to.eql(\"2016-01-28T23:26:25.004Z\");",
											"});     ",
											"pm.test(\"Check returned defaultValue\", function () {",
											"    pm.expect(jsonData.result.data[index].defaultValue).to.eql(\"\");",
											"});   ",
											"pm.test(\"Check returned growthStage\", function () {",
											"    pm.expect(jsonData.result.data[index].growthStage).to.eql(null);",
											"});  ",
											"pm.test(\"Check returned institution\", function () {",
											"    pm.expect(jsonData.result.data[index].institution).to.eql(null);",
											"});  ",
											"pm.test(\"Check returned language\", function () {",
											"    pm.expect(jsonData.result.data[index].language).to.eql(null);",
											"});  ",
											"pm.test(\"Check returned name\", function () {",
											"    pm.expect(jsonData.result.data[index].name).to.eql(\"Selection_Trait\");",
											"});  ",
											"pm.test(\"Check returned observationVariableDbId\", function () {",
											"    pm.expect(jsonData.result.data[index].observationVariableDbId).to.eql(\"17290\");",
											"});  ",
											"pm.test(\"Check returned observationVariableName\", function () {",
											"    pm.expect(jsonData.result.data[index].observationVariableName).to.eql(\"Selection_Trait\");",
											"});     ",
											"pm.test(\"Check returned ontologyReference documentationLinks\", function () {",
											"    pm.expect(jsonData.result.data[index].ontologyReference.documentationLinks).to.eql([]);",
											"});  ",
											"pm.test(\"Check returned ontologyReference ontologyDbId\", function () {",
											"    pm.expect(jsonData.result.data[index].ontologyReference.ontologyDbId).to.eql(\"17290\");",
											"});  ",
											"pm.test(\"Check returned ontologyReference ontologyName\", function () {",
											"    pm.expect(jsonData.result.data[index].ontologyReference.ontologyName).to.eql(\"Selection_Trait\");",
											"});",
											"pm.test(\"Check returned ontologyReference version\", function () {",
											"    pm.expect(jsonData.result.data[index].ontologyReference.version).to.eql(null);",
											"});",
											"",
											"//Trait",
											"pm.test(\"Check returned trait alternativeAbbreviations\", function () {",
											"        pm.expect(jsonData.result.data[index].trait.alternativeAbbreviations).to.eql([]);",
											"}); ",
											"pm.test(\"Check returned trait attribute\", function () {",
											"        pm.expect(jsonData.result.data[index].trait.attribute).to.eql(null);",
											"}); ",
											"pm.test(\"Check returned trait entity\", function () {",
											"        pm.expect(jsonData.result.data[index].trait.entity).to.eql(null);",
											"}); ",
											"pm.test(\"Check returned trait mainAbbreviation\", function () {",
											"        pm.expect(jsonData.result.data[index].trait.mainAbbreviation).to.eql(null);",
											"}); ",
											"pm.test(\"Check returned trait description\", function () {",
											"        pm.expect(jsonData.result.data[index].trait.description).to.eql(\"Value indicating trait(s) under selection for a particular advancement\");",
											"});   ",
											"pm.test(\"Check returned trait name\", function () {",
											"        pm.expect(jsonData.result.data[index].trait.name).to.eql(\"Selection Criteria\");",
											"}); ",
											"pm.test(\"Check returned trait status\", function () {",
											"        pm.expect(jsonData.result.data[index].trait.status).to.eql(\"Active\");",
											"}); ",
											"pm.test(\"Check returned trait synonyms\", function () {",
											"        pm.expect(jsonData.result.data[index].trait.synonyms).to.eql([]);",
											"}); ",
											"pm.test(\"Check returned trait traitDbId\", function () {",
											"        pm.expect(jsonData.result.data[index].trait.traitDbId).to.eql(\"17283\");",
											"}); ",
											"pm.test(\"Check returned trait traitName\", function () {",
											"        pm.expect(jsonData.result.data[index].trait.traitName).to.eql(\"Selection Criteria\");",
											"}); ",
											"pm.test(\"Check returned trait xref\", function () {",
											"        pm.expect(jsonData.result.data[index].trait.xref).to.eql(\"\");",
											"}); ",
											"pm.test(\"Check returned trait ontologyReference documentationLinks\", function () {",
											"        pm.expect(jsonData.result.data[index].trait.ontologyReference.documentationLinks).to.eql([]);",
											"}); ",
											"pm.test(\"Check returned trait ontologyReference ontologyDbId\", function () {",
											"        pm.expect(jsonData.result.data[index].trait.ontologyReference.ontologyDbId).to.eql(\"\");",
											"});",
											"pm.test(\"Check returned trait ontologyReference ontologyName\", function () {",
											"        pm.expect(jsonData.result.data[index].trait.ontologyReference.ontologyName).to.eql(\"Selection Criteria\");",
											"}); ",
											"pm.test(\"Check returned trait ontologyReference version\", function () {",
											"        pm.expect(jsonData.result.data[index].trait.ontologyReference.version).to.eql(null);",
											"}); ",
											"",
											"pm.test(\"Check returned trait class\", function () {",
											"        pm.expect(jsonData.result.data[index].trait.class).to.eql(\"Breedingprocess\");",
											"});",
											"",
											"//Method",
											"",
											"pm.test(\"Check returned method description\", function () {",
											"    pm.expect(jsonData.result.data[index].method.description).to.eql(\"Factor applied\");",
											"}); ",
											"pm.test(\"Check returned method formula\", function () {",
											"    pm.expect(jsonData.result.data[index].method.formula).to.eql(\"null\");",
											"}); ",
											"pm.test(\"Check returned method methodDbId\", function () {",
											"    pm.expect(jsonData.result.data[index].method.methodDbId).to.eql(\"4020\");",
											"}); ",
											"pm.test(\"Check returned method methodName\", function () {",
											"    pm.expect(jsonData.result.data[index].method.methodName).to.eql(\"Applied\");",
											"}); ",
											"",
											"pm.test(\"Check returned method ontologyReferenceObject documentationLinks\", function () {",
											"    pm.expect(jsonData.result.data[index].method.ontologyReferenceObject.documentationLinks).to.eql([]);",
											"});  ",
											"pm.test(\"Check returned method ontologyReferenceObject ontologyDbId\", function () {",
											"    pm.expect(jsonData.result.data[index].method.ontologyReferenceObject.ontologyDbId).to.eql(\"4020\");",
											"}); ",
											"pm.test(\"Check returned method ontologyReferenceObject ontologyName\", function () {",
											"    pm.expect(jsonData.result.data[index].method.ontologyReferenceObject.ontologyName).to.eql(\"Applied\");",
											"}); ",
											"pm.test(\"Check returned method ontologyReferenceObject version\", function () {",
											"    pm.expect(jsonData.result.data[index].method.ontologyReferenceObject.version).to.eql(null);",
											"}); ",
											"",
											"pm.test(\"Check returned method reference\", function () {",
											"    pm.expect(jsonData.result.data[index].method.reference).to.eql(null);",
											"}); ",
											"pm.test(\"Check returned method ontologyReference documentationLinks\", function () {",
											"    pm.expect(jsonData.result.data[index].method.ontologyReference.documentationLinks).to.eql([]);",
											"}); ",
											" ",
											"pm.test(\"Check returned method ontologyReference ontologyDbId\", function () {",
											"    pm.expect(jsonData.result.data[index].method.ontologyReference.ontologyDbId).to.eql(\"4020\");",
											"}); ",
											"pm.test(\"Check returned method ontologyReference ontologyName\", function () {",
											"    pm.expect(jsonData.result.data[index].method.ontologyReference.ontologyName).to.eql(\"Applied\");",
											"}); ",
											"pm.test(\"Check returned method ontologyReference version\", function () {",
											"    pm.expect(jsonData.result.data[index].method.ontologyReference.version).to.eql(null);",
											"}); ",
											"",
											"",
											"pm.test(\"Check returned method class\", function () {",
											"    pm.expect(jsonData.result.data[index].method.class).to.eql(null);",
											"});  ",
											"",
											"//Scale",
											"pm.test(\"Check returned scale dataType\", function () {",
											"    pm.expect(jsonData.result.data[index].scale.dataType).to.eql(\"Nominal\");",
											"});    ",
											"pm.test(\"Check returned scale decimalPlaces\", function () {",
											"    pm.expect(jsonData.result.data[index].scale.decimalPlaces).to.eql(null);",
											"});     ",
											"pm.test(\"Check returned scale name\", function () {",
											"    pm.expect(jsonData.result.data[index].scale.name).to.eql(\"STCodes\");",
											"});    ",
											"pm.test(\"Check returned scale ontologyReference documentationLinks\", function () {",
											"    pm.expect(jsonData.result.data[index].scale.ontologyReference.documentationLinks).to.eql([]);",
											"});  ",
											"pm.test(\"Check returned scale ontologyReference ontologyDbId\", function () {",
											"    pm.expect(jsonData.result.data[index].scale.ontologyReference.ontologyDbId).to.eql(\"17284\");",
											"}); ",
											"pm.test(\"Check returned scale ontologyReference ontologyName\", function () {",
											"    pm.expect(jsonData.result.data[index].scale.ontologyReference.ontologyName).to.eql(\"STCodes\");",
											"}); ",
											"pm.test(\"Check returned scale ontologyReference version\", function () {",
											"    pm.expect(jsonData.result.data[index].scale.ontologyReference.version).to.eql(null);",
											"}); ",
											"pm.test(\"Check returned scale scaleDbId\", function () {",
											"    pm.expect(jsonData.result.data[index].scale.scaleDbId).to.eql(\"17284\");",
											"});   ",
											"",
											"pm.test(\"Check returned scale scaleName\", function () {",
											"    pm.expect(jsonData.result.data[index].scale.scaleName).to.eql(\"STCodes\");",
											"});   ",
											"pm.test(\"Check returned scale validValues categories\", function () {",
											"   var categories = ['NU', 'HT', 'RR', 'DH', 'DT'];",
											"   for (var i = 0; i < jsonData.result.data[index].scale.validValues.categories.length; i++) {",
											"    pm.expect(jsonData.result.data[index].scale.validValues.categories[i]).to.be.oneOf(categories);",
											"    }",
											"});   ",
											"pm.test(\"Check returned scale validValues max\", function () {",
											"    pm.expect(jsonData.result.data[index].scale.validValues.max).to.eql(null);",
											"});   ",
											"pm.test(\"Check returned scale validValues min\", function () {",
											"    pm.expect(jsonData.result.data[index].scale.validValues.min).to.eql(null);",
											"});   ",
											"pm.test(\"Check returned scale xref\", function () {",
											"    pm.expect(jsonData.result.data[index].scale.xref).to.eql(null);",
											"}); ",
											"",
											"pm.test(\"Check returned scientist\", function () {",
											"    pm.expect(jsonData.result.data[index].scientist).to.eql(null);",
											"});  ",
											"pm.test(\"Check returned status\", function () {",
											"    pm.expect(jsonData.result.data[index].status).to.eql(null);",
											"});  ",
											"pm.test(\"Check returned submissionTimestamp\", function () {",
											"    pm.expect(jsonData.result.data[index].submissionTimestamp).to.eql(null);",
											"});  ",
											"pm.test(\"Check returned synonyms\", function () {",
											"    pm.expect(jsonData.result.data[index].synonyms).to.eql([]);",
											"});    ",
											"pm.test(\"Check returned xref\", function () {",
											"    pm.expect(jsonData.result.data[index].xref).to.eql(null);",
											"});    "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/variables?page=1&pageSize=5",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"variables"
									],
									"query": [
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "pageSize",
											"value": "5"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v1​/variables"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid crop",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Verify returned error message\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.errors[0].message).to.eql(\"Invalid crop invalid for URL:/invalid/brapi/v1/variables\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/invalid/brapi/v1/variables",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"invalid",
										"brapi",
										"v1",
										"variables"
									]
								},
								"description": "GET ​/{crop}​/brapi​/v1​/variables"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid page",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"",
											"pm.test(\"Verify returned error message\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.errors[0].message).to.eql(\"A total of 1 pages are available, so the page number must between 0 and 1 (exclusive).\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/variables?page=10000&pageSize=10000",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"variables"
									],
									"query": [
										{
											"key": "page",
											"value": "10000"
										},
										{
											"key": "pageSize",
											"value": "10000"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v1​/variables"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered pageSize greater than max",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"",
											"pm.test(\"Verify returned error message\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.errors[0].message).to.eql(\"Page size must between 1 and 10000.\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/variables?page=0&pageSize=10001",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"variables"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "10001"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v1​/variables"
							},
							"response": []
						}
					]
				},
				{
					"name": "GET ​/{crop}​/brapi​/v2​/variables",
					"item": [
						{
							"name": "Verify response code and body when entered valid crop",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(25);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"var index = 0",
											"pm.test(\"Check additionalInfo\", function () {",
											"    pm.expect(jsonData.result.data[index].additionalInfo).to.eql({});",
											"});",
											"pm.test(\"Check commonCropName\", function () {",
											"    pm.expect(jsonData.result.data[index].commonCropName).to.eql(pm.environment.get(\"crop\"));",
											"});",
											"pm.test(\"Check contextOfUse\", function () {",
											"    pm.expect(jsonData.result.data[index].contextOfUse).to.eql([\"PLOT\"]);",
											"});",
											"pm.test(\"Check defaultValue\", function () {",
											"    pm.expect(jsonData.result.data[index].defaultValue).to.eql(\"\");",
											"});",
											"pm.test(\"Check documentationURL\", function () {",
											"    pm.expect(jsonData.result.data[index].documentationURL).to.eql(null);",
											"});",
											"pm.test(\"Check externalReferences\", function () {",
											"    pm.expect(jsonData.result.data[index].externalReferences).to.eql(null);",
											"});",
											"pm.test(\"Check growthStage\", function () {",
											"    pm.expect(jsonData.result.data[index].growthStage).to.eql(null);",
											"});",
											"pm.test(\"Check institution\", function () {",
											"    pm.expect(jsonData.result.data[index].institution).to.eql(null);",
											"});",
											"pm.test(\"Check language\", function () {",
											"    pm.expect(jsonData.result.data[index].language).to.eql(null);",
											"});",
											"pm.test(\"Check observationVariableDbId\", function () {",
											"    pm.expect(jsonData.result.data[index].observationVariableDbId).to.eql(\"8390\");",
											"});",
											"pm.test(\"Check observationVariableName\", function () {",
											"    pm.expect(jsonData.result.data[index].observationVariableName).to.eql(\"NOTES\");",
											"});",
											"",
											"pm.test(\"Check ontologyReference documentationLinks\", function () {",
											"    pm.expect(jsonData.result.data[index].ontologyReference.documentationLinks).to.eql([]);",
											"});",
											"pm.test(\"Check ontologyReference ontologyDbId\", function () {",
											"    pm.expect(jsonData.result.data[index].ontologyReference.ontologyDbId).to.eql(\"8390\");",
											"});",
											"pm.test(\"Check ontologyReference ontologyName\", function () {",
											"    pm.expect(jsonData.result.data[index].ontologyReference.ontologyName).to.eql(\"NOTES\");",
											"});",
											"pm.test(\"Check ontologyReference version\", function () {",
											"    pm.expect(jsonData.result.data[index].ontologyReference.version).to.eql(null);",
											"});",
											"",
											"//Traits",
											"pm.test(\"Check trait additionalInfo\", function () {",
											"    pm.expect(jsonData.result.data[index].trait.additionalInfo).to.eql({});",
											"});",
											"",
											"pm.test(\"Check trait alternativeAbbreviations\", function () {",
											"    pm.expect(jsonData.result.data[index].trait.alternativeAbbreviations).to.eql([]);",
											"});",
											"pm.test(\"Check trait attribute\", function () {",
											"    pm.expect(jsonData.result.data[index].trait.attribute).to.eql(null);",
											"});",
											"pm.test(\"Check trait entity\", function () {",
											"    pm.expect(jsonData.result.data[index].trait.entity).to.eql(null);",
											"});",
											"pm.test(\"Check trait externalReferences\", function () {",
											"    pm.expect(jsonData.result.data[index].trait.externalReferences).to.eql(null);",
											"});",
											"pm.test(\"Check trait mainAbbreviation\", function () {",
											"    pm.expect(jsonData.result.data[index].trait.mainAbbreviation).to.eql(null);",
											"});",
											"pm.test(\"Check trait traitClass\", function () {",
											"    pm.expect(jsonData.result.data[index].trait.traitClass).to.eql(\"General\");",
											"});",
											"pm.test(\"Check trait traitDescription\", function () {",
											"    pm.expect(jsonData.result.data[index].trait.traitDescription).to.eql(\"Comment\");",
											"});",
											"pm.test(\"Check trait name\", function () {",
											"    pm.expect(jsonData.result.data[index].trait.name).to.eql(\"Comment\");",
											"});",
											"pm.test(\"Check trait status\", function () {",
											"    pm.expect(jsonData.result.data[index].trait.status).to.eql(\"Active\");",
											"});",
											"pm.test(\"Check trait synonyms\", function () {",
											"    pm.expect(jsonData.result.data[index].trait.synonyms).to.eql([]);",
											"});",
											"pm.test(\"Check trait traitDbId\", function () {",
											"    pm.expect(jsonData.result.data[index].trait.traitDbId).to.eql(\"2065\");",
											"});",
											"pm.test(\"Check trait traitName\", function () {",
											"    pm.expect(jsonData.result.data[index].trait.traitName).to.eql(\"Comment\");",
											"});",
											"pm.test(\"Check trait ontologyReference documentationLinks\", function () {",
											"    pm.expect(jsonData.result.data[index].trait.ontologyReference.documentationLinks).to.eql([]);",
											"});",
											"pm.test(\"Check trait ontologyReference ontologyDbId\", function () {",
											"    pm.expect(jsonData.result.data[index].trait.ontologyReference.ontologyDbId).to.eql(\"null\");",
											"});",
											"pm.test(\"Check trait ontologyReference ontologyName\", function () {",
											"    pm.expect(jsonData.result.data[index].trait.ontologyReference.ontologyName).to.eql(\"Comment\");",
											"});",
											"pm.test(\"Check trait ontologyReference version\", function () {",
											"    pm.expect(jsonData.result.data[index].trait.ontologyReference.version).to.eql(null);",
											"});",
											"",
											"//Method",
											"pm.test(\"Check method additionalInfo\", function () {",
											"    pm.expect(jsonData.result.data[index].method.additionalInfo).to.eql({});",
											"});",
											"pm.test(\"Check method bibliographicalReference\", function () {",
											"    pm.expect(jsonData.result.data[index].method.bibliographicalReference).to.eql(null);",
											"});",
											"pm.test(\"Check method externalReferences\", function () {",
											"    pm.expect(jsonData.result.data[index].method.externalReferences).to.eql(null);",
											"});",
											"pm.test(\"Check method methodClass\", function () {",
											"    pm.expect(jsonData.result.data[index].method.methodClass).to.eql(null);",
											"});",
											"pm.test(\"Check method description\", function () {",
											"    pm.expect(jsonData.result.data[index].method.description).to.eql(\"Value recorded after observation\");",
											"});",
											"pm.test(\"Check method formula\", function () {",
											"    pm.expect(jsonData.result.data[index].method.formula).to.eql(\"null\");",
											"});",
											"pm.test(\"Check method methodDbId\", function () {",
											"    pm.expect(jsonData.result.data[index].method.methodDbId).to.eql(\"4110\");",
											"});",
											"pm.test(\"Check method methodName\", function () {",
											"    pm.expect(jsonData.result.data[index].method.methodName).to.eql(\"Observed\");",
											"});",
											"pm.test(\"Check method ontologyReferenceObject documentationLinks \", function () {",
											"    pm.expect(jsonData.result.data[index].method.ontologyReferenceObject.documentationLinks).to.eql([]);",
											"});",
											"pm.test(\"Check method ontologyReferenceObject ontologyDbId \", function () {",
											"    pm.expect(jsonData.result.data[index].method.ontologyReferenceObject.ontologyDbId).to.eql(\"4110\");",
											"});",
											"pm.test(\"Check method ontologyReferenceObject ontologyName \", function () {",
											"    pm.expect(jsonData.result.data[index].method.ontologyReferenceObject.ontologyName).to.eql(\"Observed\");",
											"});",
											"pm.test(\"Check method ontologyReferenceObject version \", function () {",
											"    pm.expect(jsonData.result.data[index].method.ontologyReferenceObject.version).to.eql(null);",
											"});",
											"",
											"pm.test(\"Check method ontologyReference documentationLinks \", function () {",
											"    pm.expect(jsonData.result.data[index].method.ontologyReference.documentationLinks).to.eql([]);",
											"});",
											"pm.test(\"Check method ontologyReference ontologyDbId \", function () {",
											"    pm.expect(jsonData.result.data[index].method.ontologyReference.ontologyDbId).to.eql(\"4110\");",
											"});",
											"pm.test(\"Check method ontologyReference ontologyName \", function () {",
											"    pm.expect(jsonData.result.data[index].method.ontologyReference.ontologyName).to.eql(\"Observed\");",
											"});",
											"pm.test(\"Check method ontologyReference version \", function () {",
											"    pm.expect(jsonData.result.data[index].method.ontologyReference.version).to.eql(null);",
											"});",
											"//Scale",
											"pm.test(\"Check scale additionalInfo \", function () {",
											"    pm.expect(jsonData.result.data[index].scale.additionalInfo).to.eql({});",
											"});",
											"pm.test(\"Check scale dataType \", function () {",
											"    pm.expect(jsonData.result.data[index].scale.dataType).to.eql(\"Text\");",
											"});",
											"pm.test(\"Check scale decimalPlaces \", function () {",
											"    pm.expect(jsonData.result.data[index].scale.decimalPlaces).to.eql(null);",
											"});",
											"pm.test(\"Check scale externalReferences \", function () {",
											"    pm.expect(jsonData.result.data[index].scale.externalReferences).to.eql(null);",
											"});",
											"pm.test(\"Check scale ontologyReference documentationLinks\", function () {",
											"    pm.expect(jsonData.result.data[index].scale.ontologyReference.documentationLinks).to.eql([]);",
											"});",
											"pm.test(\"Check scale ontologyDbId\", function () {",
											"    pm.expect(jsonData.result.data[index].scale.ontologyReference.ontologyDbId).to.eql(\"6020\");",
											"});",
											"pm.test(\"Check scale ontologyName\", function () {",
											"    pm.expect(jsonData.result.data[index].scale.ontologyReference.ontologyName).to.eql(\"Text\");",
											"});",
											"pm.test(\"Check scale version\", function () {",
											"    pm.expect(jsonData.result.data[index].scale.ontologyReference.version).to.eql(null);",
											"});",
											"pm.test(\"Check scale scaleDbId\", function () {",
											"    pm.expect(jsonData.result.data[index].scale.scaleDbId).to.eql(\"6020\");",
											"});",
											"pm.test(\"Check scale scaleName\", function () {",
											"    pm.expect(jsonData.result.data[index].scale.scaleName).to.eql(\"Text\");",
											"});",
											"pm.test(\"Check scale validValues categories\", function () {",
											"    pm.expect(jsonData.result.data[index].scale.validValues.categories).to.eql(null);",
											"});",
											"pm.test(\"Check scale validValues max\", function () {",
											"    pm.expect(jsonData.result.data[index].scale.validValues.max).to.eql(null);",
											"});",
											"pm.test(\"Check scale validValues min\", function () {",
											"    pm.expect(jsonData.result.data[index].scale.validValues.min).to.eql(null);",
											"});",
											"",
											"",
											"pm.test(\"Check scientist\", function () {",
											"    pm.expect(jsonData.result.data[index].scientist).to.eql(null);",
											"});",
											"",
											"pm.test(\"Check status\", function () {",
											"    pm.expect(jsonData.result.data[index].status).to.eql(null);",
											"});",
											"pm.test(\"Check submissionTimestamp\", function () {",
											"    pm.expect(jsonData.result.data[index].submissionTimestamp).to.eql(null);",
											"});",
											"pm.test(\"Check synonyms\", function () {",
											"    pm.expect(jsonData.result.data[index].synonyms).to.eql([]);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/variables",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"variables"
									]
								},
								"description": "GET ​/{crop}​/brapi​/v1​/variables"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered valid inputs for all parameters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(10000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(1);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"var index = 0",
											"pm.test(\"Check additionalInfo\", function () {",
											"    pm.expect(jsonData.result.data[index].additionalInfo).to.eql({});",
											"});",
											"pm.test(\"Check commonCropName\", function () {",
											"    pm.expect(jsonData.result.data[index].commonCropName).to.eql(pm.environment.get(\"crop\"));",
											"});",
											"pm.test(\"Check contextOfUse\", function () {",
											"    pm.expect(jsonData.result.data[index].contextOfUse).to.eql([\"PLOT\"]);",
											"});",
											"pm.test(\"Check defaultValue\", function () {",
											"    pm.expect(jsonData.result.data[index].defaultValue).to.eql(\"\");",
											"});",
											"pm.test(\"Check documentationURL\", function () {",
											"    pm.expect(jsonData.result.data[index].documentationURL).to.eql(null);",
											"});",
											"pm.test(\"Check externalReferences referenceID\", function () {",
											"    pm.expect(jsonData.result.data[index].externalReferences[0].referenceID).to.eql(\"doi:10.155454/12341234\");",
											"});",
											"pm.test(\"Check externalReferences referenceSource\", function () {",
											"    pm.expect(jsonData.result.data[index].externalReferences[0].referenceSource).to.eql(\"DOI\");",
											"});",
											"pm.test(\"Check growthStage\", function () {",
											"    pm.expect(jsonData.result.data[index].growthStage).to.eql(null);",
											"});",
											"pm.test(\"Check institution\", function () {",
											"    pm.expect(jsonData.result.data[index].institution).to.eql(null);",
											"});",
											"pm.test(\"Check language\", function () {",
											"    pm.expect(jsonData.result.data[index].language).to.eql(null);",
											"});",
											"pm.test(\"Check observationVariableDbId\", function () {",
											"    pm.expect(jsonData.result.data[index].observationVariableDbId).to.eql(\"18000\");",
											"});",
											"pm.test(\"Check observationVariableName\", function () {",
											"    pm.expect(jsonData.result.data[index].observationVariableName).to.eql(\"Grain_yield\");",
											"});",
											"pm.test(\"Check ontologyReference documentationLinks\", function () {",
											"    pm.expect(jsonData.result.data[index].ontologyReference.documentationLinks).to.eql([]);",
											"});",
											"pm.test(\"Check ontologyReference ontologyDbId\", function () {",
											"    pm.expect(jsonData.result.data[index].ontologyReference.ontologyDbId).to.eql(\"18000\");",
											"});",
											"pm.test(\"Check ontologyReference ontologyName\", function () {",
											"    pm.expect(jsonData.result.data[index].ontologyReference.ontologyName).to.eql(\"Grain_yield\");",
											"});",
											"pm.test(\"Check ontologyReference version\", function () {",
											"    pm.expect(jsonData.result.data[index].ontologyReference.version).to.eql(null);",
											"});",
											"",
											"//Traits",
											"pm.test(\"Check trait additionalInfo\", function () {",
											"    pm.expect(jsonData.result.data[index].trait.additionalInfo).to.eql({});",
											"});",
											"",
											"pm.test(\"Check trait alternativeAbbreviations\", function () {",
											"    pm.expect(jsonData.result.data[index].trait.alternativeAbbreviations).to.eql([]);",
											"});",
											"pm.test(\"Check trait attribute\", function () {",
											"    pm.expect(jsonData.result.data[index].trait.attribute).to.eql(null);",
											"});",
											"pm.test(\"Check trait entity\", function () {",
											"    pm.expect(jsonData.result.data[index].trait.entity).to.eql(null);",
											"});",
											"pm.test(\"Check trait externalReferences\", function () {",
											"    pm.expect(jsonData.result.data[index].trait.externalReferences).to.eql(null);",
											"});",
											"pm.test(\"Check trait mainAbbreviation\", function () {",
											"    pm.expect(jsonData.result.data[index].trait.mainAbbreviation).to.eql(null);",
											"});",
											"pm.test(\"Check trait traitClass\", function () {",
											"    pm.expect(jsonData.result.data[index].trait.traitClass).to.eql(\"Agronomic\");",
											"});",
											"pm.test(\"Check trait traitDescription\", function () {",
											"    pm.expect(jsonData.result.data[index].trait.traitDescription).to.eql(\"Yield\");",
											"});",
											"pm.test(\"Check trait name\", function () {",
											"    pm.expect(jsonData.result.data[index].trait.name).to.eql(\"Yield\");",
											"});",
											"pm.test(\"Check trait status\", function () {",
											"    pm.expect(jsonData.result.data[index].trait.status).to.eql(\"Active\");",
											"});",
											"pm.test(\"Check trait synonyms\", function () {",
											"    pm.expect(jsonData.result.data[index].trait.synonyms).to.eql([]);",
											"});",
											"pm.test(\"Check trait traitDbId\", function () {",
											"    pm.expect(jsonData.result.data[index].trait.traitDbId).to.eql(\"15009\");",
											"});",
											"pm.test(\"Check trait traitName\", function () {",
											"    pm.expect(jsonData.result.data[index].trait.traitName).to.eql(\"Yield\");",
											"});",
											"pm.test(\"Check trait ontologyReference documentationLinks type\", function () {",
											"    pm.expect(jsonData.result.data[index].trait.ontologyReference.documentationLinks).to.eql([]);",
											"});",
											"pm.test(\"Check trait ontologyReference ontologyDbId\", function () {",
											"    pm.expect(jsonData.result.data[index].trait.ontologyReference.ontologyDbId).to.eql(\"null\");",
											"});",
											"pm.test(\"Check trait ontologyReference ontologyName\", function () {",
											"    pm.expect(jsonData.result.data[index].trait.ontologyReference.ontologyName).to.eql(\"Yield\");",
											"});",
											"pm.test(\"Check trait ontologyReference version\", function () {",
											"    pm.expect(jsonData.result.data[index].trait.ontologyReference.version).to.eql(null);",
											"});",
											"",
											"//Method",
											"pm.test(\"Check method additionalInfo\", function () {",
											"    pm.expect(jsonData.result.data[index].method.additionalInfo).to.eql({});",
											"});",
											"pm.test(\"Check method bibliographicalReference\", function () {",
											"    pm.expect(jsonData.result.data[index].method.bibliographicalReference).to.eql(null);",
											"});",
											"pm.test(\"Check method externalReferences\", function () {",
											"    pm.expect(jsonData.result.data[index].method.externalReferences).to.eql(null);",
											"});",
											"pm.test(\"Check method methodClass\", function () {",
											"    pm.expect(jsonData.result.data[index].method.methodClass).to.eql(null);",
											"});",
											"pm.test(\"Check method description\", function () {",
											"    pm.expect(jsonData.result.data[index].method.description).to.eql(\"Dry and weigh\");",
											"});",
											"pm.test(\"Check method formula\", function () {",
											"    pm.expect(jsonData.result.data[index].method.formula).to.eql(\"{{18110}}+10\");",
											"});",
											"pm.test(\"Check method methodDbId\", function () {",
											"    pm.expect(jsonData.result.data[index].method.methodDbId).to.eql(\"16000\");",
											"});",
											"pm.test(\"Check method methodName\", function () {",
											"    pm.expect(jsonData.result.data[index].method.methodName).to.eql(\"Dry and weigh\");",
											"});",
											"pm.test(\"Check method ontologyReferenceObject documentationLinks\", function () {",
											"    pm.expect(jsonData.result.data[index].method.ontologyReferenceObject.documentationLinks).to.eql([]);",
											"});",
											"pm.test(\"Check method ontologyReferenceObject ontologyDbId \", function () {",
											"    pm.expect(jsonData.result.data[index].method.ontologyReferenceObject.ontologyDbId).to.eql(\"16000\");",
											"});",
											"pm.test(\"Check method ontologyReferenceObject ontologyName \", function () {",
											"    pm.expect(jsonData.result.data[index].method.ontologyReferenceObject.ontologyName).to.eql(\"Dry and weigh\");",
											"});",
											"pm.test(\"Check method ontologyReferenceObject version \", function () {",
											"    pm.expect(jsonData.result.data[index].method.ontologyReferenceObject.version).to.eql(null);",
											"});",
											"",
											"//Scale",
											"pm.test(\"Check scale additionalInfo \", function () {",
											"    pm.expect(jsonData.result.data[index].scale.additionalInfo).to.eql({});",
											"});",
											"pm.test(\"Check scale additionalInfo \", function () {",
											"    pm.expect(jsonData.result.data[index].scale.dataType).to.eql(\"Numerical\");",
											"});",
											"pm.test(\"Check scale dataType \", function () {",
											"    pm.expect(jsonData.result.data[index].scale.dataType).to.eql(\"Numerical\");",
											"});",
											"pm.test(\"Check scale decimalPlaces \", function () {",
											"    pm.expect(jsonData.result.data[index].scale.decimalPlaces).to.eql(4);",
											"});",
											"pm.test(\"Check scale externalReferences \", function () {",
											"    pm.expect(jsonData.result.data[index].scale.externalReferences).to.eql(null);",
											"});",
											"pm.test(\"Check scale ontologyReference documentationLinks\", function () {",
											"    pm.expect(jsonData.result.data[index].scale.ontologyReference.documentationLinks).to.eql([]);",
											"});",
											"pm.test(\"Check scale ontologyReference ontologyDbId\", function () {",
											"    pm.expect(jsonData.result.data[index].scale.ontologyReference.ontologyDbId).to.eql(\"6090\");",
											"});",
											"pm.test(\"Check scale ontologyReference ontologyName\", function () {",
											"    pm.expect(jsonData.result.data[index].scale.ontologyReference.ontologyName).to.eql(\"Kg/ha\");",
											"});",
											"pm.test(\"Check scale ontologyReference version\", function () {",
											"    pm.expect(jsonData.result.data[index].scale.ontologyReference.version).to.eql(null);",
											"});",
											"pm.test(\"Check scale scaleDbId\", function () {",
											"    pm.expect(jsonData.result.data[index].scale.scaleDbId).to.eql(\"6090\");",
											"});",
											"pm.test(\"Check scale scaleName\", function () {",
											"    pm.expect(jsonData.result.data[index].scale.scaleName).to.eql(\"Kg/ha\");",
											"});",
											"pm.test(\"Check scale validValues categories\", function () {",
											"    pm.expect(jsonData.result.data[index].scale.validValues.categories).to.eql(null);",
											"});",
											"pm.test(\"Check scale validValues max\", function () {",
											"    pm.expect(jsonData.result.data[index].scale.validValues.max).to.eql(null);",
											"});",
											"pm.test(\"Check scale validValues min\", function () {",
											"    pm.expect(jsonData.result.data[index].scale.validValues.min).to.eql(null);",
											"});",
											"",
											"",
											"pm.test(\"Check scientist\", function () {",
											"    pm.expect(jsonData.result.data[index].scientist).to.eql(null);",
											"});",
											"",
											"pm.test(\"Check status\", function () {",
											"    pm.expect(jsonData.result.data[index].status).to.eql(null);",
											"});",
											"pm.test(\"Check submissionTimestamp\", function () {",
											"    pm.expect(jsonData.result.data[index].submissionTimestamp).to.eql(null);",
											"});",
											"pm.test(\"Check synonyms\", function () {",
											"    pm.expect(jsonData.result.data[index].synonyms).to.eql([]);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/variables?observationVariableDbId=18000&traitClass=Agronomic&studyDbId=2&externalReferenceID=doi:10.155454/12341234&externalReferenceSource=DOI&page=0&pageSize=10000",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"variables"
									],
									"query": [
										{
											"key": "observationVariableDbId",
											"value": "18000"
										},
										{
											"key": "traitClass",
											"value": "Agronomic"
										},
										{
											"key": "studyDbId",
											"value": "2"
										},
										{
											"key": "externalReferenceID",
											"value": "doi:10.155454/12341234"
										},
										{
											"key": "externalReferenceSource",
											"value": "DOI"
										},
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "10000"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v1​/variables"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when filtered by observationVariableDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(1);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Check if all observationVariableDbId is correct\", function () {",
											" for (var i = 0; i < jsonData.result.data.length; i++) { ",
											"    pm.expect(jsonData.result.data[i].observationVariableDbId).to.eql(\"18000\");",
											"",
											" }",
											"",
											"});",
											"   "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/variables?observationVariableDbId=18000",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"variables"
									],
									"query": [
										{
											"key": "observationVariableDbId",
											"value": "18000"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v1​/variables"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when filtered by traitClass",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(12);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Check if traitClass is correct\", function () {",
											" for (var i = 0; i < jsonData.result.data.length; i++) { ",
											"    pm.expect(jsonData.result.data[i].trait.traitClass).to.be.eql(\"Agronomic\");",
											"",
											" }",
											"",
											"});",
											"   "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/variables?traitClass=Agronomic",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"variables"
									],
									"query": [
										{
											"key": "traitClass",
											"value": "Agronomic"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v1​/variables"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when filtered by studyDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(3);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Check if all variables for the given studyDbId are returned\", function () {",
											" for (var i = 0; i < jsonData.result.data.length; i++) { ",
											"    pm.expect(jsonData.result.data[i].observationVariableName).to.be.oneOf([\"Biomas_yield\",\"Grain_yield\",\"Grain_size\"]);",
											"",
											" }",
											"",
											"});",
											"   "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/variables?studyDbId=2",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"variables"
									],
									"query": [
										{
											"key": "studyDbId",
											"value": "2"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v1​/variables"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when filtered by externalReferenceID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(1);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Check if externalReferences.referenceIDis correct\", function () {",
											" for (var i = 0; i < jsonData.result.data.length; i++) { ",
											"    pm.expect(jsonData.result.data[i].externalReferences[0].referenceID).to.eql(\"doi:10.155454/12341234\");",
											"",
											" }",
											"",
											"});",
											"   "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/variables?externalReferenceID=doi:10.155454/12341234",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"variables"
									],
									"query": [
										{
											"key": "externalReferenceID",
											"value": "doi:10.155454/12341234"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v1​/variables"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when filtered by externalReferenceSource",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(1);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Check if externalReferences.referenceSource is correct\", function () {",
											" for (var i = 0; i < jsonData.result.data.length; i++) { ",
											"    pm.expect(jsonData.result.data[i].externalReferences[0].referenceSource).to.eql(\"DOI\");",
											"",
											" }",
											"",
											"});",
											"   "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/variables?externalReferenceSource=DOI",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"variables"
									],
									"query": [
										{
											"key": "externalReferenceSource",
											"value": "DOI"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v1​/variables"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered valid pagination details",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(1);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(5);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(25);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(5);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"var index = 0",
											"pm.test(\"Check additionalInfo\", function () {",
											"    pm.expect(jsonData.result.data[index].additionalInfo).to.eql({});",
											"});",
											"pm.test(\"Check commonCropName\", function () {",
											"    pm.expect(jsonData.result.data[index].commonCropName).to.eql(pm.environment.get(\"crop\"));",
											"});",
											"pm.test(\"Check contextOfUse\", function () {",
											"    pm.expect(jsonData.result.data[index].contextOfUse).to.eql([\"PLOT\"]);",
											"});",
											"pm.test(\"Check defaultValue\", function () {",
											"    pm.expect(jsonData.result.data[index].defaultValue).to.eql(\"\");",
											"});",
											"pm.test(\"Check documentationURL\", function () {",
											"    pm.expect(jsonData.result.data[index].documentationURL).to.eql(null);",
											"});",
											"pm.test(\"Check externalReferences\", function () {",
											"    pm.expect(jsonData.result.data[index].externalReferences).to.eql(null);",
											"});",
											"pm.test(\"Check growthStage\", function () {",
											"    pm.expect(jsonData.result.data[index].growthStage).to.eql(null);",
											"});",
											"pm.test(\"Check institution\", function () {",
											"    pm.expect(jsonData.result.data[index].institution).to.eql(null);",
											"});",
											"pm.test(\"Check language\", function () {",
											"    pm.expect(jsonData.result.data[index].language).to.eql(null);",
											"});",
											"pm.test(\"Check observationVariableDbId\", function () {",
											"    pm.expect(jsonData.result.data[index].observationVariableDbId).to.eql(\"17290\");",
											"});",
											"",
											"pm.test(\"Check observationVariableName\", function () {",
											"    pm.expect(jsonData.result.data[index].observationVariableName).to.eql(\"Selection_Trait\");",
											"});",
											"pm.test(\"Check ontologyReference documentationLinks\", function () {",
											"    pm.expect(jsonData.result.data[index].ontologyReference.documentationLinks).to.eql([]);",
											"});",
											"pm.test(\"Check ontologyReference ontologyDbId\", function () {",
											"    pm.expect(jsonData.result.data[index].ontologyReference.ontologyDbId).to.eql(\"17290\");",
											"});",
											"pm.test(\"Check ontologyReference ontologyName\", function () {",
											"    pm.expect(jsonData.result.data[index].ontologyReference.ontologyName).to.eql(\"Selection_Trait\");",
											"});",
											"pm.test(\"Check ontologyReference version\", function () {",
											"    pm.expect(jsonData.result.data[index].ontologyReference.version).to.eql(null);",
											"});",
											"//Traits",
											"pm.test(\"Check trait additionalInfo\", function () {",
											"    pm.expect(jsonData.result.data[index].trait.additionalInfo).to.eql({});",
											"});",
											"",
											"pm.test(\"Check trait alternativeAbbreviations\", function () {",
											"    pm.expect(jsonData.result.data[index].trait.alternativeAbbreviations).to.eql([]);",
											"});",
											"pm.test(\"Check trait attribute\", function () {",
											"    pm.expect(jsonData.result.data[index].trait.attribute).to.eql(null);",
											"});",
											"pm.test(\"Check trait entity\", function () {",
											"    pm.expect(jsonData.result.data[index].trait.entity).to.eql(null);",
											"});",
											"pm.test(\"Check trait externalReferences\", function () {",
											"    pm.expect(jsonData.result.data[index].trait.externalReferences).to.eql(null);",
											"});",
											"pm.test(\"Check trait mainAbbreviation\", function () {",
											"    pm.expect(jsonData.result.data[index].trait.mainAbbreviation).to.eql(null);",
											"});",
											"pm.test(\"Check trait traitClass\", function () {",
											"    pm.expect(jsonData.result.data[index].trait.traitClass).to.eql(\"Breedingprocess\");",
											"});",
											"pm.test(\"Check trait traitDescription\", function () {",
											"    pm.expect(jsonData.result.data[index].trait.traitDescription).to.eql(\"Value indicating trait(s) under selection for a particular advancement\");",
											"});",
											"pm.test(\"Check trait name\", function () {",
											"    pm.expect(jsonData.result.data[index].trait.name).to.eql(\"Selection Criteria\");",
											"});",
											"pm.test(\"Check trait status\", function () {",
											"    pm.expect(jsonData.result.data[index].trait.status).to.eql(\"Active\");",
											"});",
											"pm.test(\"Check trait synonyms\", function () {",
											"    pm.expect(jsonData.result.data[index].trait.synonyms).to.eql([]);",
											"});",
											"pm.test(\"Check trait traitDbId\", function () {",
											"    pm.expect(jsonData.result.data[index].trait.traitDbId).to.eql(\"17283\");",
											"});",
											"pm.test(\"Check trait traitName\", function () {",
											"    pm.expect(jsonData.result.data[index].trait.traitName).to.eql(\"Selection Criteria\");",
											"});",
											"pm.test(\"Check trait ontologyReference documentationLinks\", function () {",
											"    pm.expect(jsonData.result.data[index].trait.ontologyReference.documentationLinks).to.eql([]);",
											"});",
											"pm.test(\"Check trait ontologyReference ontologyDbId\", function () {",
											"    pm.expect(jsonData.result.data[index].trait.ontologyReference.ontologyDbId).to.eql(\"\");",
											"});",
											"pm.test(\"Check trait ontologyReference ontologyName\", function () {",
											"    pm.expect(jsonData.result.data[index].trait.ontologyReference.ontologyName).to.eql(\"Selection Criteria\");",
											"});",
											"pm.test(\"Check trait ontologyReference version\", function () {",
											"    pm.expect(jsonData.result.data[index].trait.ontologyReference.version).to.eql(null);",
											"});",
											"",
											"//Method",
											"pm.test(\"Check method additionalInfo\", function () {",
											"    pm.expect(jsonData.result.data[index].method.additionalInfo).to.eql({});",
											"});",
											"pm.test(\"Check method bibliographicalReference\", function () {",
											"    pm.expect(jsonData.result.data[index].method.bibliographicalReference).to.eql(null);",
											"});",
											"pm.test(\"Check method externalReferences\", function () {",
											"    pm.expect(jsonData.result.data[index].method.externalReferences).to.eql(null);",
											"});",
											"pm.test(\"Check method methodClass\", function () {",
											"    pm.expect(jsonData.result.data[index].method.methodClass).to.eql(null);",
											"});",
											"pm.test(\"Check method description\", function () {",
											"    pm.expect(jsonData.result.data[index].method.description).to.eql(\"Factor applied\");",
											"});",
											"pm.test(\"Check method formula\", function () {",
											"    pm.expect(jsonData.result.data[index].method.formula).to.eql(\"null\");",
											"});",
											"pm.test(\"Check method methodDbId\", function () {",
											"    pm.expect(jsonData.result.data[index].method.methodDbId).to.eql(\"4020\");",
											"});",
											"pm.test(\"Check method methodName\", function () {",
											"    pm.expect(jsonData.result.data[index].method.methodName).to.eql(\"Applied\");",
											"});",
											"pm.test(\"Check method ontologyReferenceObject documentationLinks \", function () {",
											"    pm.expect(jsonData.result.data[index].method.ontologyReferenceObject.documentationLinks).to.eql([]);",
											"});",
											"pm.test(\"Check method ontologyReferenceObject ontologyDbId \", function () {",
											"    pm.expect(jsonData.result.data[index].method.ontologyReferenceObject.ontologyDbId).to.eql(\"4020\");",
											"});",
											"pm.test(\"Check method ontologyReferenceObject ontologyName \", function () {",
											"    pm.expect(jsonData.result.data[index].method.ontologyReferenceObject.ontologyName).to.eql(\"Applied\");",
											"});",
											"pm.test(\"Check method ontologyReferenceObject version \", function () {",
											"    pm.expect(jsonData.result.data[index].method.ontologyReferenceObject.version).to.eql(null);",
											"});",
											"",
											"pm.test(\"Check method ontologyReference documentationLinks \", function () {",
											"    pm.expect(jsonData.result.data[index].method.ontologyReference.documentationLinks).to.eql([]);",
											"});",
											"pm.test(\"Check method ontologyReference ontologyDbId \", function () {",
											"    pm.expect(jsonData.result.data[index].method.ontologyReference.ontologyDbId).to.eql(\"4020\");",
											"});",
											"pm.test(\"Check method ontologyReference ontologyName \", function () {",
											"    pm.expect(jsonData.result.data[index].method.ontologyReference.ontologyName).to.eql(\"Applied\");",
											"});",
											"pm.test(\"Check method ontologyReference version \", function () {",
											"    pm.expect(jsonData.result.data[index].method.ontologyReference.version).to.eql(null);",
											"});",
											"//Scale",
											"pm.test(\"Check scale additionalInfo \", function () {",
											"    pm.expect(jsonData.result.data[index].scale.additionalInfo).to.eql({});",
											"});",
											"pm.test(\"Check scale dataType \", function () {",
											"    pm.expect(jsonData.result.data[index].scale.dataType).to.eql(\"Nominal\");",
											"});",
											"pm.test(\"Check scale decimalPlaces \", function () {",
											"    pm.expect(jsonData.result.data[index].scale.decimalPlaces).to.eql(null);",
											"});",
											"pm.test(\"Check scale externalReferences \", function () {",
											"    pm.expect(jsonData.result.data[index].scale.externalReferences).to.eql(null);",
											"});",
											"pm.test(\"Check scale ontologyReference documentationLinks\", function () {",
											"    pm.expect(jsonData.result.data[index].scale.ontologyReference.documentationLinks).to.eql([]);",
											"});",
											"pm.test(\"Check scale ontologyDbId\", function () {",
											"    pm.expect(jsonData.result.data[index].scale.ontologyReference.ontologyDbId).to.eql(\"17284\");",
											"});",
											"pm.test(\"Check scale ontologyName\", function () {",
											"    pm.expect(jsonData.result.data[index].scale.ontologyReference.ontologyName).to.eql(\"STCodes\");",
											"});",
											"pm.test(\"Check scale version\", function () {",
											"    pm.expect(jsonData.result.data[index].scale.ontologyReference.version).to.eql(null);",
											"});",
											"pm.test(\"Check scale scaleDbId\", function () {",
											"    pm.expect(jsonData.result.data[index].scale.scaleDbId).to.eql(\"17284\");",
											"});",
											"pm.test(\"Check scale scaleName\", function () {",
											"    pm.expect(jsonData.result.data[index].scale.scaleName).to.eql(\"STCodes\");",
											"});",
											"pm.test(\"Check scale validValues categories label\", function () {",
											"    var labels = [\"Heat tolerance\", \"Rust resistance\", \"Drought and heat tolerance\", \"Drought tolerance\",\"Nitrogen use efficiency\"];",
											"   for (var i = 0; i < jsonData.result.data[index].scale.validValues.categories.length; i++) {",
											"    pm.expect(jsonData.result.data[index].scale.validValues.categories[i].label).to.be.oneOf(labels);",
											"    }",
											"});",
											"pm.test(\"Check scale validValues categories value\", function () {",
											"    var values = [\"HT\", \"RR\", \"DH\", \"DT\",\"NU\"];",
											"   for (var i = 0; i < jsonData.result.data[index].scale.validValues.categories.length; i++) {",
											"    pm.expect(jsonData.result.data[index].scale.validValues.categories[i].value).to.oneOf(values);",
											"    }",
											"});",
											"pm.test(\"Check scale validValues max\", function () {",
											"    pm.expect(jsonData.result.data[index].scale.validValues.max).to.eql(null);",
											"});",
											"pm.test(\"Check scale validValues min\", function () {",
											"    pm.expect(jsonData.result.data[index].scale.validValues.min).to.eql(null);",
											"});",
											"",
											"",
											"pm.test(\"Check scientist\", function () {",
											"    pm.expect(jsonData.result.data[index].scientist).to.eql(null);",
											"});",
											"",
											"pm.test(\"Check status\", function () {",
											"    pm.expect(jsonData.result.data[index].status).to.eql(null);",
											"});",
											"pm.test(\"Check submissionTimestamp\", function () {",
											"    pm.expect(jsonData.result.data[index].submissionTimestamp).to.eql(null);",
											"});",
											"pm.test(\"Check synonyms\", function () {",
											"    pm.expect(jsonData.result.data[index].synonyms).to.eql([]);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/variables?page=1&pageSize=5",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"variables"
									],
									"query": [
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "pageSize",
											"value": "5"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v1​/variables"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when filtered by invalid observationVariableDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Verify metadata\", function () {",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(0);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Check if result is empty\", function () {",
											" ",
											"    pm.expect(jsonData.result.data).to.eql([]);",
											"",
											"",
											"});",
											"   "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/variables?observationVariableDbId=9999",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"variables"
									],
									"query": [
										{
											"key": "observationVariableDbId",
											"value": "9999"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v1​/variables"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when filtered by invalid traitClass",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Verify metadata\", function () {",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(0);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Check if result is empty\", function () {",
											" ",
											"    pm.expect(jsonData.result.data).to.eql([]);",
											"",
											"",
											"});",
											"   "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/variables?traitClass=invalid",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"variables"
									],
									"query": [
										{
											"key": "traitClass",
											"value": "invalid"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v1​/variables"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when filtered by invalid studyDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Verify metadata\", function () {",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(0);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Check if result is empty\", function () {",
											" ",
											"    pm.expect(jsonData.result.data).to.eql([]);",
											"",
											"",
											"});",
											"   "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/variables?studyDbId=invalid",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"variables"
									],
									"query": [
										{
											"key": "studyDbId",
											"value": "invalid"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v1​/variables"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when filtered by invalid externalReferenceID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Verify metadata\", function () {",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(0);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Check if result is empty\", function () {",
											" ",
											"    pm.expect(jsonData.result.data).to.eql([]);",
											"",
											"",
											"});",
											"   "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/variables?externalReferenceID=invalid",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"variables"
									],
									"query": [
										{
											"key": "externalReferenceID",
											"value": "invalid"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v1​/variables"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when filtered by invalid externalReferenceSource",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Verify metadata\", function () {",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(0);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Check if result is empty\", function () {",
											" ",
											"    pm.expect(jsonData.result.data).to.eql([]);",
											"",
											"",
											"});",
											"   "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/variables?externalReferenceSource=invalid",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"variables"
									],
									"query": [
										{
											"key": "externalReferenceSource",
											"value": "invalid"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v1​/variables"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid page",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Check if result is empty\", function () {",
											" ",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"A total of 1 pages are available, so the page number must between 0 and 1 (exclusive).\");",
											"",
											"",
											"});",
											"   "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/variables?page=1&pageSize=10000",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"variables"
									],
									"query": [
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "pageSize",
											"value": "10000"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v1​/variables"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid pageSize",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Check if result is empty\", function () {",
											" ",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Page size must between 1 and 10000.\");",
											"",
											"",
											"});",
											"   "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/variables?page=0&pageSize=10001",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"variables"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "10001"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v1​/variables"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid crop name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Check if result is empty\", function () {",
											" ",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Invalid crop invalid for URL:/invalid/brapi/v2/variables\");",
											"",
											"",
											"});",
											"   "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/invalid/brapi/v2/variables",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"invalid",
										"brapi",
										"v2",
										"variables"
									]
								},
								"description": "GET ​/{crop}​/brapi​/v1​/variables"
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "phenotype-search-resource",
			"item": [
				{
					"name": "POST ​/{crop}​/brapi​/v1​/phenotypes-search",
					"item": [
						{
							"name": "Post phenotype search by trialDbId and plot dataset level",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(80);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"",
											"var index = 0;",
											"//Verify returned data of the first obs unit",
											"pm.test(\"Verify returned observationUnitDbId \", function () {",
											"     pm.expect(jsonData.result.data[index].observationUnitDbId).to.eql(\"PKWDPivJxYgde\");     ",
											"});",
											"pm.test(\"Verify returned observationUnitName\", function () {",
											"     pm.expect(jsonData.result.data[index].observationUnitName).to.eql(\"PLOT1\");",
											"     ",
											"});",
											"pm.test(\"Verify returned observationLevel\", function () {",
											"     pm.expect(jsonData.result.data[index].observationLevel).to.eql(\"PLOT\");",
											"});",
											"pm.test(\"Verify returned observationLevels\", function () {",
											"     pm.expect(jsonData.result.data[index].observationLevels).to.eql(\"1\");",
											"});",
											"pm.test(\"Verify returned plotNumber\", function () {",
											"     pm.expect(jsonData.result.data[index].plotNumber).to.eql(\"1\");     ",
											"});",
											"pm.test(\"Verify returned plantNumber\", function () {",
											"     pm.expect(jsonData.result.data[index].plantNumber).to.eql(null);",
											"});",
											"pm.test(\"Verify returned blockNumber\", function () {",
											"     pm.expect(jsonData.result.data[index].blockNumber).to.eql(null);     ",
											"});",
											"pm.test(\"Verify returned replicate\", function () {",
											"     pm.expect(jsonData.result.data[index].replicate).to.eql(\"1\");   ",
											"});",
											"pm.test(\"Verify returned germplasmDbId\", function () {",
											"     pm.expect(jsonData.result.data[index].germplasmDbId).to.eql(\"PKWDG47fa785e\");",
											"});",
											"pm.test(\"Verify returned germplasmName\", function () {",
											"     pm.expect(jsonData.result.data[index].germplasmName).to.eql(\"GP4\");",
											"});",
											"pm.test(\"Verify returned studyDbId\", function () {",
											"     pm.expect(jsonData.result.data[index].studyDbId).to.eql(\"2\");     ",
											"});",
											"pm.test(\"Verify returned studyName\", function () {",
											"     pm.expect(jsonData.result.data[index].studyName).to.eql(\"Randomized Trial 20180003_1\");     ",
											"});",
											"pm.test(\"Verify returned studyLocationDbId\", function () {",
											"     pm.expect(jsonData.result.data[index].studyLocationDbId).to.eql(\"9002\");     ",
											"});",
											"pm.test(\"Verify returned studyLocation\", function () {",
											"     pm.expect(jsonData.result.data[index].studyLocation).to.eql(\"Int Institute of Tropical Agriculture\");     ",
											"});",
											"pm.test(\"Verify returned programName\", function () {",
											"     pm.expect(jsonData.result.data[index].programName).to.eql(\"API Program\");",
											"});",
											"pm.test(\"Verify returned x\", function () {",
											"     pm.expect(jsonData.result.data[index].x).to.eql(null);",
											"});",
											"pm.test(\"Verify returned y\", function () {",
											"     pm.expect(jsonData.result.data[index].y).to.eql(null);",
											"});",
											"pm.test(\"Verify returned entryType\", function () {",
											"     pm.expect(jsonData.result.data[index].entryType).to.eql(\"Check entry\");",
											"});",
											"pm.test(\"Verify returned entryNumber\", function () {",
											"     pm.expect(jsonData.result.data[index].entryNumber).to.eql(\"4\");",
											"});",
											"pm.test(\"Check observations observationDbId\", function () {",
											"    var observationDbIds = [\"1004\",\"1005\",\"1006\",\"1007\",\"1008\"];",
											"    for (var i = 0; i < jsonData.result.data[index].observations.length; i++ ){",
											"        pm.expect(jsonData.result.data[index].observations[i].observationDbId).to.eql(observationDbIds[i]);",
											"    }",
											"});",
											"pm.test(\"Check observations observationVariableDbId\", function () {",
											"    var observationVariableDbIds = [\"18010\",\"18110\",\"18000\",\"8252\",\"8263\"];",
											"    for (var i = 0; i < jsonData.result.data[index].observations.length; i++ ){",
											"        pm.expect(jsonData.result.data[index].observations[i].observationVariableDbId).to.eql(observationVariableDbIds[i]);",
											"    }",
											"});",
											"pm.test(\"Check observations observationVariableName\", function () {",
											"    var observationVariableNames = [",
											"        \"Biomas_yield\",",
											"        \"Grain_size\",",
											"        \"Grain_yield\",",
											"        \"BM_CODE_VTE\",",
											"        \"NPSEL\"",
											"        ];",
											"    for (var i = 0; i < jsonData.result.data[index].observations.length; i++ ){",
											"        pm.expect(jsonData.result.data[index].observations[i].observationVariableName).to.eql(observationVariableNames[i]);",
											"    }",
											"});",
											"pm.test(\"Check observations observationTimeStamp\", function () {",
											"    var observationTimeStamps = [",
											"        \"2018-10-29T00:00:00.000+08:00\",",
											"        \"2018-10-29T00:00:00.000+08:00\",",
											"        \"2018-10-29T00:00:00.000+08:00\",",
											"        \"2018-10-29T00:00:00.000+08:00\",",
											"        \"2018-10-29T00:00:00.000+08:00\"",
											"        ];",
											"    for (var i = 0; i < jsonData.result.data[index].observations.length; i++ ){",
											"        pm.expect(jsonData.result.data[index].observations[i].observationTimeStamp).to.eql(observationTimeStamps[i]);",
											"    }",
											"});",
											"pm.test(\"Check if observations season\", function () {",
											"    for (var i = 0; i < jsonData.result.data[index].observations.length; i++ ){",
											"        pm.expect(jsonData.result.data[index].observations[i].season.season).to.eql(\"Dry season\");",
											"    }",
											"});",
											"pm.test(\"Check if observations seasonDbId\", function () {",
											"    for (var i = 0; i < jsonData.result.data[index].observations.length; i++ ){",
											"        pm.expect(jsonData.result.data[index].observations[i].season.seasonDbId).to.eql(\"10290\");",
											"    }",
											"});",
											"pm.test(\"Check if collector is null\", function () {",
											"    for (var i = 0; i < jsonData.result.data[index].observations.length; i++ ){",
											"        pm.expect(jsonData.result.data[index].observations[i].collector).to.be.null;",
											"    }",
											"});",
											"pm.test(\"Check observations value\", function () {",
											"    var values = [\"18\",\"95\",\"4\",\"AGB1\",\"1\"];",
											"    for (var i = 0; i < jsonData.result.data[index].observations.length; i++ ){",
											"        pm.expect(jsonData.result.data[index].observations[i].value).to.eql(values[i]);",
											"    }",
											"});",
											"pm.test(\"Verify returned instanceNumber\", function () {",
											"     pm.expect(jsonData.result.data[index].instanceNumber).to.eql(\"1\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"observationLevel\": \"PLOT\",\n\t\"trialDbIds\": [\n\t\t\"{{trialStudyId}}\"\n\t]\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/phenotypes-search",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"phenotypes-search"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						},
						{
							"name": "Post phenotype search by locationDbIds and plant dataset level",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(40);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"var index = 0;",
											"//Verify returned data of the first obs unit",
											"pm.test(\"Verify returned observationUnitDbId \", function () {",
											"     pm.expect(jsonData.result.data[index].observationUnitDbId).to.eql(\"2a664296-3d7e-459d-ad77-87a7d5dae8c5\");     ",
											"});",
											"pm.test(\"Verify returned observationUnitName\", function () {",
											"     pm.expect(jsonData.result.data[index].observationUnitName).to.eql(null);",
											"     ",
											"});",
											"pm.test(\"Verify returned observationLevel\", function () {",
											"     pm.expect(jsonData.result.data[index].observationLevel).to.eql(\"PLANT\");",
											"});",
											"pm.test(\"Verify returned observationLevels\", function () {",
											"     pm.expect(jsonData.result.data[index].observationLevels).to.eql(\"1\");",
											"});",
											"pm.test(\"Verify returned plotNumber\", function () {",
											"     pm.expect(jsonData.result.data[index].plotNumber).to.eql(null);     ",
											"});",
											"pm.test(\"Verify returned plantNumber\", function () {",
											"     pm.expect(jsonData.result.data[index].plantNumber).to.eql(null);",
											"});",
											"pm.test(\"Verify returned blockNumber\", function () {",
											"     pm.expect(jsonData.result.data[index].blockNumber).to.eql(null);     ",
											"});",
											"pm.test(\"Verify returned replicate\", function () {",
											"     pm.expect(jsonData.result.data[index].replicate).to.eql(null);   ",
											"});",
											"pm.test(\"Verify returned germplasmDbId\", function () {",
											"     pm.expect(jsonData.result.data[index].germplasmDbId).to.eql(\"PKWDG942cd372\");",
											"});",
											"pm.test(\"Verify returned germplasmName\", function () {",
											"     pm.expect(jsonData.result.data[index].germplasmName).to.eql(\"GP1\");",
											"});",
											"pm.test(\"Verify returned studyDbId\", function () {",
											"     pm.expect(jsonData.result.data[index].studyDbId).to.eql(\"1\");     ",
											"});",
											"pm.test(\"Verify returned studyName\", function () {",
											"     pm.expect(jsonData.result.data[index].studyName).to.eql(\"Study with Imported Cross Nursery 2018002_1\");     ",
											"});",
											"pm.test(\"Verify returned studyLocationDbId\", function () {",
											"     pm.expect(jsonData.result.data[index].studyLocationDbId).to.eql(\"9001\");     ",
											"});",
											"pm.test(\"Verify returned studyLocation\", function () {",
											"     pm.expect(jsonData.result.data[index].studyLocation).to.eql(\"Africa Rice Centre\");     ",
											"});",
											"pm.test(\"Verify returned programName\", function () {",
											"     pm.expect(jsonData.result.data[index].programName).to.eql(\"API Program\");",
											"});",
											"pm.test(\"Verify returned x\", function () {",
											"     pm.expect(jsonData.result.data[index].x).to.eql(null);",
											"});",
											"pm.test(\"Verify returned y\", function () {",
											"     pm.expect(jsonData.result.data[index].y).to.eql(null);",
											"});",
											"pm.test(\"Verify returned entryType\", function () {",
											"     pm.expect(jsonData.result.data[index].entryType).to.eql(\"Test entry\");",
											"});",
											"pm.test(\"Verify returned entryNumber\", function () {",
											"     pm.expect(jsonData.result.data[index].entryNumber).to.eql(\"1\");",
											"});",
											"pm.test(\"Check observations\", function () {",
											"        pm.expect(jsonData.result.data[index].observations).to.eql([]);",
											"});",
											"pm.test(\"Verify returned instanceNumber\", function () {",
											"     pm.expect(jsonData.result.data[index].instanceNumber).to.eql(\"1\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"locationDbIds\": [\n\t\t\"9001\",\n\t\t\"9003\"\n\t],\n\t\"observationLevel\": \"PLANT\"\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/phenotypes-search",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"phenotypes-search"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						},
						{
							"name": "Post phenotype search by germplasmDbIds and means observation level",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"var index = 0;",
											"//Verify returned data of the first obs unit",
											"pm.test(\"Verify returned observationUnitDbId \", function () {",
											"     pm.expect(jsonData.result.data[index].observationUnitDbId).to.eql(\"104158af-b4d7-428a-b772-4bbeb59422e9\");     ",
											"});",
											"pm.test(\"Verify returned observationUnitName\", function () {",
											"     pm.expect(jsonData.result.data[index].observationUnitName).to.eql(null);",
											"     ",
											"});",
											"pm.test(\"Verify returned observationLevel\", function () {",
											"     pm.expect(jsonData.result.data[index].observationLevel).to.eql(\"MEANS\");",
											"});",
											"pm.test(\"Verify returned observationLevels\", function () {",
											"     pm.expect(jsonData.result.data[index].observationLevels).to.eql(\"1\");",
											"});",
											"pm.test(\"Verify returned plotNumber\", function () {",
											"     pm.expect(jsonData.result.data[index].plotNumber).to.eql(null);     ",
											"});",
											"pm.test(\"Verify returned plantNumber\", function () {",
											"     pm.expect(jsonData.result.data[index].plantNumber).to.eql(null);",
											"});",
											"pm.test(\"Verify returned blockNumber\", function () {",
											"     pm.expect(jsonData.result.data[index].blockNumber).to.eql(null);     ",
											"});",
											"pm.test(\"Verify returned replicate\", function () {",
											"     pm.expect(jsonData.result.data[index].replicate).to.eql(null);   ",
											"});",
											"pm.test(\"Verify returned germplasmDbId\", function () {",
											"     pm.expect(jsonData.result.data[index].germplasmDbId).to.eql(\"PKWDG47fa785e\");",
											"});",
											"pm.test(\"Verify returned germplasmName\", function () {",
											"     pm.expect(jsonData.result.data[index].germplasmName).to.eql(\"GP4\");",
											"});",
											"pm.test(\"Verify returned studyDbId\", function () {",
											"     pm.expect(jsonData.result.data[index].studyDbId).to.eql(\"2\");     ",
											"});",
											"pm.test(\"Verify returned studyName\", function () {",
											"     pm.expect(jsonData.result.data[index].studyName).to.eql(\"Randomized Trial 20180003_1\");     ",
											"});",
											"pm.test(\"Verify returned studyLocationDbId\", function () {",
											"     pm.expect(jsonData.result.data[index].studyLocationDbId).to.eql(\"9002\");     ",
											"});",
											"pm.test(\"Verify returned studyLocation\", function () {",
											"     pm.expect(jsonData.result.data[index].studyLocation).to.eql(\"Int Institute of Tropical Agriculture\");     ",
											"});",
											"pm.test(\"Verify returned programName\", function () {",
											"     pm.expect(jsonData.result.data[index].programName).to.eql(\"API Program\");",
											"});",
											"pm.test(\"Verify returned x\", function () {",
											"     pm.expect(jsonData.result.data[index].x).to.eql(null);",
											"});",
											"pm.test(\"Verify returned y\", function () {",
											"     pm.expect(jsonData.result.data[index].y).to.eql(null);",
											"});",
											"pm.test(\"Verify returned entryType\", function () {",
											"     pm.expect(jsonData.result.data[index].entryType).to.eql(\"Check entry\");",
											"});",
											"pm.test(\"Verify returned entryNumber\", function () {",
											"     pm.expect(jsonData.result.data[index].entryNumber).to.eql(\"4\");",
											"});",
											"pm.test(\"Check observations observationDbId\", function () {",
											"    var observationDbIds = [\"1500\",\"1501\"];",
											"    for (var i = 0; i < jsonData.result.data[index].observations.length; i++ ){",
											"        pm.expect(jsonData.result.data[index].observations[i].observationDbId).to.eql(observationDbIds[i]);",
											"    }",
											"});",
											"pm.test(\"Check observations observationVariableDbId\", function () {",
											"    var observationVariableDbIds = [\"100002\",\"100003\"];",
											"    for (var i = 0; i < jsonData.result.data[index].observations.length; i++ ){",
											"        pm.expect(jsonData.result.data[index].observations[i].observationVariableDbId).to.eql(observationVariableDbIds[i]);",
											"    }",
											"});",
											"pm.test(\"Check observations observationVariableName\", function () {",
											"    var observationVariableNames = [",
											"        \"Biomas_yield_Means\",",
											"        \"Grain_size_Means\"",
											"        ];",
											"    for (var i = 0; i < jsonData.result.data[index].observations.length; i++ ){",
											"        pm.expect(jsonData.result.data[index].observations[i].observationVariableName).to.eql(observationVariableNames[i]);",
											"    }",
											"});",
											"pm.test(\"Check observations observationTimeStamp\", function () {",
											"    var observationTimeStamps = [",
											"        \"2019-01-21T00:00:00.000+08:00\",",
											"        \"2019-01-21T00:00:00.000+08:00\"",
											"        ];",
											"    for (var i = 0; i < jsonData.result.data[index].observations.length; i++ ){",
											"        pm.expect(jsonData.result.data[index].observations[i].observationTimeStamp).to.eql(observationTimeStamps[i]);",
											"    }",
											"});",
											"pm.test(\"Check if observations season\", function () {",
											"    for (var i = 0; i < jsonData.result.data[index].observations.length; i++ ){",
											"        pm.expect(jsonData.result.data[index].observations[i].season.season).to.eql(\"Dry season\");",
											"    }",
											"});",
											"pm.test(\"Check if observations seasonDbId\", function () {",
											"    for (var i = 0; i < jsonData.result.data[index].observations.length; i++ ){",
											"        pm.expect(jsonData.result.data[index].observations[i].season.seasonDbId).to.eql(\"10290\");",
											"    }",
											"});",
											"pm.test(\"Check if collector is null\", function () {",
											"    for (var i = 0; i < jsonData.result.data[index].observations.length; i++ ){",
											"        pm.expect(jsonData.result.data[index].observations[i].collector).to.be.null;",
											"    }",
											"});",
											"pm.test(\"Check observations value\", function () {",
											"    var values = [\"41.5\",\"69.4999999999999\"];",
											"    for (var i = 0; i < jsonData.result.data[index].observations.length; i++ ){",
											"        pm.expect(jsonData.result.data[index].observations[i].value).to.eql(values[i]);",
											"    }",
											"});",
											"pm.test(\"Verify returned instanceNumber\", function () {",
											"     pm.expect(jsonData.result.data[index].instanceNumber).to.eql(\"1\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"observationLevel\": \"MEANS\",\n\t\"germplasmDbIds\": [\n\t\t\"PKWDG47fa785e\",\n\t\t\"PKWDG225f1813\",\n\t\t\"PKWDGc4a40c61\"\n\t]\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/phenotypes-search",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"phenotypes-search"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						},
						{
							"name": "Post phenotype search by observationVariableId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(860);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Check if all observation has biomas_yield\", function () {",
											"  var jsonData = pm.response.json();",
											"  ",
											"",
											"  var dataLength = jsonData.result.data.length;",
											"",
											"  for (i = 0; i < dataLength ; i++) {",
											"      var data = jsonData.result.data[i];",
											"      var observationsLength = data.observations.length;",
											"   ",
											"        for (j=0; j < observationsLength; j++) {",
											"            var variableId =data.observations[j].observationVariableDbId",
											"          if(variableId==\"18010\"){",
											"              pm.expect(variableId).to.eql(\"18010\");",
											"              ",
											"          }else{",
											"              console.log(\"index:\"+j+ \"Not found! \");",
											"          }",
											"          ",
											"      }",
											"  }",
											" ",
											"});    ",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"observationVariableDbIds\": [\n    \"18010\"\n  ]\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/phenotypes-search",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"phenotypes-search"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						},
						{
							"name": "Post phenotype search by programDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											"  pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											"  pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											"  pm.expect(jsonData.metadata.pagination.totalCount).to.eql(2420);",
											"  pm.expect(jsonData.metadata.pagination.totalPages).to.eql(3);",
											"  pm.expect(jsonData.metadata.status).to.eql([]);",
											"  pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Check if all data has correct programName\", function () {",
											"  var jsonData = pm.response.json();",
											"  var dataLength = jsonData.result.data.length;",
											"",
											"  for (i = 0; i < dataLength; i++) {",
											"    var data = jsonData.result.data[i];",
											"    pm.expect(data.programName).to.eql(\"API Program\");",
											"  }",
											"",
											"});    ",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"programDbIds\": [\n\t\t\"{{api_program_id}}\"\n\t]\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/phenotypes-search",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"phenotypes-search"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						},
						{
							"name": "Post phenotype search by studyDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(60);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Check if all data has correct studyDbId\", function () {",
											"  var jsonData = pm.response.json();",
											"  var dataLength = jsonData.result.data.length;",
											"",
											"  for (i = 0; i < dataLength ; i++) {",
											"      var data = jsonData.result.data[i];",
											"      pm.expect(data.studyDbId).to.eql(pm.environment.get(\"studyDbId\"));",
											"  }",
											" ",
											"});    ",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"studyDbIds\": [\n\t\t\"{{studyDbId}}\"\n\t]\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/phenotypes-search",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"phenotypes-search"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						},
						{
							"name": "Post phenotype search by observationUnitDbIds",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(1);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Check if all data has correct programName\", function () {",
											"  var jsonData = pm.response.json();",
											"  var dataLength = jsonData.result.data.length;",
											"",
											"  for (i = 0; i < dataLength ; i++) {",
											"      var data = jsonData.result.data[i];",
											"      pm.expect(data.observationUnitDbId).to.eql(\"PKWDPivJxYgde\");",
											"  }",
											" ",
											"});    ",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"observationUnitDbIds\": [\n    \"PKWDPivJxYgde\"\n\t]\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/phenotypes-search",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"phenotypes-search"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						},
						{
							"name": "Post phenotype search by observationTimeStamps",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(80);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"",
											"pm.test(\"Check if observation timestamps are within observationTimeStamps\", function () {",
											"  var jsonData = pm.response.json();",
											"  ",
											"  //var returnedTimeStamp = ",
											"",
											"  var dataLength = jsonData.result.data.length;",
											"  var moment = require('moment');",
											"  var timeStampStart = moment(\"2018-01-01 00:00:00\");",
											"  var timeStampEnd = moment(\"2018-12-30 11:59:00\");",
											"  for (i = 0; i < dataLength ; i++) {",
											"      var data = jsonData.result.data[i];",
											"      var observationsLength = data.observations.length;",
											"   ",
											"        for (j=0; j < observationsLength; j++) {",
											"            var moment2 = require('moment');",
											"            var returnedTimeStamp = data.observations[j].observationTimeStamp;",
											"            var isAfter = moment2(returnedTimeStamp).isAfter(timeStampStart);",
											"            var isBefore = moment2(returnedTimeStamp).isBefore(timeStampEnd);",
											"            pm.expect(isAfter).to.eql(true);",
											"            pm.expect(isBefore).to.eql(true);",
											"        ",
											"      }",
											"  }",
											" ",
											"});    ",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"trialDbIds\": [\r\n\t\t\"{{trialStudyId}}\"\r\n\t],\r\n        \"observationTimeStampRangeStart\": \"2018-01-01 12:00:00\",\r\n\t    \"observationTimeStampRangeEnd\": \"2018-12-30 11:59:00\"\r\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/phenotypes-search",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"phenotypes-search"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						},
						{
							"name": "Post phenotype search with entered pagination details",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(1);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(10);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(860);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(86);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Check if all observation has biomas_yield\", function () {",
											"  var jsonData = pm.response.json();",
											"  ",
											"",
											"  var dataLength = jsonData.result.data.length;",
											"",
											"  for (i = 0; i < dataLength ; i++) {",
											"      var data = jsonData.result.data[i];",
											"      var observationsLength = data.observations.length;",
											"   ",
											"        for (j=0; j < observationsLength; j++) {",
											"            var variableId =data.observations[j].observationVariableDbId",
											"          if(variableId==\"18010\"){",
											"              pm.expect(variableId).to.eql(\"18010\");",
											"              console.log(\"index:\"+j+ \"Found! \");",
											"          }",
											"          ",
											"      }",
											"  }",
											" ",
											"});    ",
											"",
											"var index = 0;",
											"//Verify returned data of the first obs unit",
											"pm.test(\"Verify returned observationUnitDbId \", function () {",
											"     pm.expect(jsonData.result.data[index].observationUnitDbId).to.eql(\"PKWDP0fPOkMaC\");     ",
											"});",
											"pm.test(\"Verify returned observationUnitName\", function () {",
											"     pm.expect(jsonData.result.data[index].observationUnitName).to.eql(\"PLOT11\");",
											"     ",
											"});",
											"pm.test(\"Verify returned observationLevel\", function () {",
											"     pm.expect(jsonData.result.data[index].observationLevel).to.eql(\"PLOT\");",
											"});",
											"pm.test(\"Verify returned observationLevels\", function () {",
											"     pm.expect(jsonData.result.data[index].observationLevels).to.eql(\"1\");",
											"});",
											"pm.test(\"Verify returned plotNumber\", function () {",
											"     pm.expect(jsonData.result.data[index].plotNumber).to.eql(\"11\");     ",
											"});",
											"pm.test(\"Verify returned plantNumber\", function () {",
											"     pm.expect(jsonData.result.data[index].plantNumber).to.eql(null);",
											"});",
											"pm.test(\"Verify returned blockNumber\", function () {",
											"     pm.expect(jsonData.result.data[index].blockNumber).to.eql(null);     ",
											"});",
											"pm.test(\"Verify returned replicate\", function () {",
											"     pm.expect(jsonData.result.data[index].replicate).to.eql(null);   ",
											"});",
											"pm.test(\"Verify returned germplasmDbId\", function () {",
											"     pm.expect(jsonData.result.data[index].germplasmDbId).to.eql(\"PKWDG225f1813\");",
											"});",
											"pm.test(\"Verify returned germplasmName\", function () {",
											"     pm.expect(jsonData.result.data[index].germplasmName).to.eql(\"GP11\");",
											"});",
											"pm.test(\"Verify returned studyDbId\", function () {",
											"     pm.expect(jsonData.result.data[index].studyDbId).to.eql(\"1\");     ",
											"});",
											"pm.test(\"Verify returned studyName\", function () {",
											"     pm.expect(jsonData.result.data[index].studyName).to.eql(\"Study with Imported Cross Nursery 2018002_1\");     ",
											"});",
											"pm.test(\"Verify returned studyLocationDbId\", function () {",
											"     pm.expect(jsonData.result.data[index].studyLocationDbId).to.eql(\"9001\");     ",
											"});",
											"pm.test(\"Verify returned studyLocation\", function () {",
											"     pm.expect(jsonData.result.data[index].studyLocation).to.eql(\"Africa Rice Centre\");     ",
											"});",
											"pm.test(\"Verify returned programName\", function () {",
											"     pm.expect(jsonData.result.data[index].programName).to.eql(\"API Program\");",
											"});",
											"pm.test(\"Verify returned x\", function () {",
											"     pm.expect(jsonData.result.data[index].x).to.eql(null);",
											"});",
											"pm.test(\"Verify returned y\", function () {",
											"     pm.expect(jsonData.result.data[index].y).to.eql(null);",
											"});",
											"pm.test(\"Verify returned entryType\", function () {",
											"     pm.expect(jsonData.result.data[index].entryType).to.eql(\"Test entry\");",
											"});",
											"pm.test(\"Verify returned entryNumber\", function () {",
											"     pm.expect(jsonData.result.data[index].entryNumber).to.eql(\"11\");",
											"});",
											"pm.test(\"Check observations observationDbId\", function () {",
											"    var observationDbIds = [\"510\",\"65099\",\"65100\",\"65101\"];",
											"    for (var i = 0; i < jsonData.result.data[index].observations.length; i++ ){",
											"        pm.expect(jsonData.result.data[index].observations[i].observationDbId).to.eql(observationDbIds[i]);",
											"    }",
											"});",
											"pm.test(\"Check observations observationVariableDbId\", function () {",
											"    var observationVariableDbIds = [\"8263\",\"18100\",\"18000\",\"18010\"];",
											"    for (var i = 0; i < jsonData.result.data[index].observations.length; i++ ){",
											"        pm.expect(jsonData.result.data[index].observations[i].observationVariableDbId).to.eql(observationVariableDbIds[i]);",
											"    }",
											"});",
											"pm.test(\"Check observations observationVariableName\", function () {",
											"    var observationVariableNames = [",
											"        \"NPSEL\",",
											"        \"WeedPressure_number\",",
											"        \"Grain_yield\",",
											"        \"Biomas_yield\"",
											"        ];",
											"    for (var i = 0; i < jsonData.result.data[index].observations.length; i++ ){",
											"        pm.expect(jsonData.result.data[index].observations[i].observationVariableName).to.eql(observationVariableNames[i]);",
											"    }",
											"});",
											"pm.test(\"Check observations observationTimeStamp\", function () {",
											"    var observationTimeStamps = [",
											"        \"2018-10-26T00:00:00.000+08:00\",",
											"        \"2020-09-30T00:00:00.000+08:00\",",
											"        \"2020-09-30T00:00:00.000+08:00\",",
											"        \"2020-09-30T00:00:00.000+08:00\"",
											"        ];",
											"    for (var i = 0; i < jsonData.result.data[index].observations.length; i++ ){",
											"        pm.expect(jsonData.result.data[index].observations[i].observationTimeStamp).to.eql(observationTimeStamps[i]);",
											"    }",
											"});",
											"pm.test(\"Check if observations season\", function () {",
											"    for (var i = 0; i < jsonData.result.data[index].observations.length; i++ ){",
											"        pm.expect(jsonData.result.data[index].observations[i].season.season).to.eql(\"Dry season\");",
											"    }",
											"});",
											"pm.test(\"Check if observations seasonDbId\", function () {",
											"    for (var i = 0; i < jsonData.result.data[index].observations.length; i++ ){",
											"        pm.expect(jsonData.result.data[index].observations[i].season.seasonDbId).to.eql(\"10290\");",
											"    }",
											"});",
											"pm.test(\"Check if collector is null\", function () {",
											"    for (var i = 0; i < jsonData.result.data[index].observations.length; i++ ){",
											"        pm.expect(jsonData.result.data[index].observations[i].collector).to.be.null;",
											"    }",
											"});",
											"pm.test(\"Check observations value\", function () {",
											"    var values = [\"2\",\"39\",\"20\",\"31\"];",
											"    for (var i = 0; i < jsonData.result.data[index].observations.length; i++ ){",
											"        pm.expect(jsonData.result.data[index].observations[i].value).to.eql(values[i]);",
											"    }",
											"});",
											"pm.test(\"Verify returned instanceNumber\", function () {",
											"     pm.expect(jsonData.result.data[index].instanceNumber).to.eql(\"1\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"pageSize\": 10,\n\t\"page\": 1,\n    \"observationVariableDbIds\": [\n    \"18010\"\n  ]\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/phenotypes-search",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"phenotypes-search"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						},
						{
							"name": "Post phenotype search with entered pageSize greater than max",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"",
											"pm.test(\"Verify returned error message\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.errors[0].message).to.eql(\"Page size must between 1 and 10000.\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"pageSize\": 10001,\n\t\"page\": 0,\n    \"observationVariableDbIds\": [\n    \"18010\"\n  ]\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/phenotypes-search",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"phenotypes-search"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						},
						{
							"name": "Post phenotype search with entered invalid page",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"",
											"pm.test(\"Verify returned error message\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.errors[0].message).to.eql(\"A total of 1 pages are available, so the page number must between 0 and 1 (exclusive).\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"pageSize\": 10000,\n\t\"page\": 9999,\n    \"observationVariableDbIds\": [\n    \"18010\"\n  ]\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/phenotypes-search",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"phenotypes-search"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "lot-resource-brapi",
			"item": [
				{
					"name": "GET ​/{crop}​/brapi​/v2​/seedlots",
					"item": [
						{
							"name": "Verify response code and body when entered crop name only",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"var data = jsonData.result.data[0];",
											"pm.test(\"Verify returned metadata\", function () {",
											"    pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											"    pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											" //   pm.expect(jsonData.metadata.pagination.totalCount).to.eql(104);",
											"    pm.expect(jsonData.metadata.pagination.totalPages).to.eql(2);",
											"    pm.expect(jsonData.metadata.status).to.eql([]);",
											"    pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"//Verify data of first lot in the results",
											"",
											"pm.test(\"Check amount \", function () {",
											"    pm.expect(data.amount).to.eql(100);",
											"});",
											"",
											"pm.test(\"Check createdDate \", function () {",
											"    pm.expect(data.createdDate).to.eql(\"2018-10-25T00:00:00.000Z\");",
											"});",
											"",
											"pm.test(\"Check germplasmDbId \", function () {",
											"    pm.expect(data.germplasmDbId).to.eql(\"PKWDG34bd21ac\");",
											"});",
											"",
											"pm.test(\"Check locationDbId \", function () {",
											"    pm.expect(data.locationDbId).to.eql(\"6000\");",
											"});",
											"",
											"pm.test(\"Check seedLotDescription \", function () {",
											"    pm.expect(data.seedLotDescription).to.eql(\"From List Import\");",
											"});",
											"",
											"pm.test(\"Check seedLotName \", function () {",
											"    pm.expect(data.seedLotName).to.eql(\"SID2-14\");",
											"});",
											"",
											"pm.test(\"Check storageLocation \", function () {",
											"    pm.expect(data.storageLocation).to.eql(\"Default Seed Store\");",
											"});",
											"",
											"pm.test(\"Check units \", function () {",
											"    pm.expect(data.units).to.eql(\"SEED_AMOUNT_g\");",
											"});",
											"",
											"pm.test(\"Check seedLotDbId \", function () {",
											"    pm.expect(data.seedLotDbId).to.eql(\"39725719-09b9-11ea-8631-0242ac110002\");",
											"});",
											"",
											"//Check additional info",
											"pm.test(\"Check lotInternalId \", function () {",
											"    pm.expect(data.additionalInfo.lotInternalId).to.eql(\"21\");",
											"});",
											"",
											"pm.test(\"Check actualBalance \", function () {",
											"    pm.expect(data.additionalInfo.actualBalance).to.eql(\"100.0\");",
											"});",
											"",
											"pm.test(\"Check totalWithdrawals \", function () {",
											"    pm.expect(data.additionalInfo.totalWithdrawals).to.eql(\"0.0\");",
											"});",
											"",
											"pm.test(\"Check pendingDeposits \", function () {",
											"    pm.expect(data.additionalInfo.pendingDeposits).to.eql(\"65.0\");",
											"});",
											"",
											"pm.test(\"Check germplasmName \", function () {",
											"    pm.expect(data.additionalInfo.germplasmName).to.eql(\"CML14\");",
											"});",
											"",
											"pm.test(\"Check lastDepositDate \", function () {",
											"    pm.expect(data.additionalInfo.lastDepositDate).to.eql(\"2018-10-25\");",
											"});",
											"",
											"pm.test(\"Check totalReserved \", function () {",
											"    pm.expect(data.additionalInfo.totalReserved).to.eql(\"0.0\");",
											"});",
											"",
											"pm.test(\"Check username \", function () {",
											"    pm.expect(data.additionalInfo.username).to.eql(\"admin\");",
											"});",
											"",
											"pm.test(\"Check status \", function () {",
											"    pm.expect(data.additionalInfo.status).to.eql(\"ACTIVE\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/seedlots",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"seedlots"
									]
								},
								"description": "GET /{crop}​/brapi​/v2​/seedlots"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered seedLotDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"var data = jsonData.result.data[0];",
											"pm.test(\"Verify returned metadata\", function () {",
											"    pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											"    pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											"    pm.expect(jsonData.metadata.pagination.totalCount).to.eql(1);",
											"    pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											"    pm.expect(jsonData.metadata.status).to.eql([]);",
											"    pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"//Verify data of first lot in the results",
											"",
											"pm.test(\"Check amount \", function () {",
											"    pm.expect(data.amount).to.eql(100);",
											"});",
											"",
											"pm.test(\"Check createdDate \", function () {",
											"    pm.expect(data.createdDate).to.eql(\"2018-10-25T00:00:00.000Z\");",
											"});",
											"",
											"pm.test(\"Check germplasmDbId \", function () {",
											"    pm.expect(data.germplasmDbId).to.eql(\"PKWDG34bd21ac\");",
											"});",
											"",
											"pm.test(\"Check locationDbId \", function () {",
											"    pm.expect(data.locationDbId).to.eql(\"6000\");",
											"});",
											"",
											"pm.test(\"Check seedLotDescription \", function () {",
											"    pm.expect(data.seedLotDescription).to.eql(\"From List Import\");",
											"});",
											"",
											"pm.test(\"Check seedLotName \", function () {",
											"    pm.expect(data.seedLotName).to.eql(\"SID2-14\");",
											"});",
											"",
											"pm.test(\"Check storageLocation \", function () {",
											"    pm.expect(data.storageLocation).to.eql(\"Default Seed Store\");",
											"});",
											"",
											"pm.test(\"Check units \", function () {",
											"    pm.expect(data.units).to.eql(\"SEED_AMOUNT_g\");",
											"});",
											"",
											"pm.test(\"Check seedLotDbId \", function () {",
											"    pm.expect(data.seedLotDbId).to.eql(\"39725719-09b9-11ea-8631-0242ac110002\");",
											"});",
											"",
											"//Check additional info",
											"pm.test(\"Check lotInternalId \", function () {",
											"    pm.expect(data.additionalInfo.lotInternalId).to.eql(\"21\");",
											"});",
											"",
											"pm.test(\"Check actualBalance \", function () {",
											"    pm.expect(data.additionalInfo.actualBalance).to.eql(\"100.0\");",
											"});",
											"",
											"pm.test(\"Check totalWithdrawals \", function () {",
											"    pm.expect(data.additionalInfo.totalWithdrawals).to.eql(\"0.0\");",
											"});",
											"",
											"pm.test(\"Check pendingDeposits \", function () {",
											"    pm.expect(data.additionalInfo.pendingDeposits).to.eql(\"65.0\");",
											"});",
											"",
											"pm.test(\"Check germplasmName \", function () {",
											"    pm.expect(data.additionalInfo.germplasmName).to.eql(\"CML14\");",
											"});",
											"",
											"pm.test(\"Check lastDepositDate \", function () {",
											"    pm.expect(data.additionalInfo.lastDepositDate).to.eql(\"2018-10-25\");",
											"});",
											"",
											"pm.test(\"Check totalReserved \", function () {",
											"    pm.expect(data.additionalInfo.totalReserved).to.eql(\"0.0\");",
											"});",
											"",
											"pm.test(\"Check username \", function () {",
											"    pm.expect(data.additionalInfo.username).to.eql(\"admin\");",
											"});",
											"",
											"pm.test(\"Check status \", function () {",
											"    pm.expect(data.additionalInfo.status).to.eql(\"ACTIVE\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/seedlots?seedLotDbId=39725719-09b9-11ea-8631-0242ac110002",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"seedlots"
									],
									"query": [
										{
											"key": "seedLotDbId",
											"value": "39725719-09b9-11ea-8631-0242ac110002"
										}
									]
								},
								"description": "GET /{crop}​/brapi​/v2​/seedlots"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered germplasmDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"var data = jsonData.result.data[0];",
											"pm.test(\"Verify returned metadata\", function () {",
											"    pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											"    pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											"    pm.expect(jsonData.metadata.pagination.totalCount).to.eql(4);",
											"    pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											"    pm.expect(jsonData.metadata.status).to.eql([]);",
											"    pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"//Verify data of first lot in the results",
											"",
											"pm.test(\"Check amount \", function () {",
											"    pm.expect(data.amount).to.eql(100);",
											"});",
											"",
											"pm.test(\"Check createdDate \", function () {",
											"    pm.expect(data.createdDate).to.eql(\"2018-10-25T00:00:00.000Z\");",
											"});",
											"",
											"pm.test(\"Check germplasmDbId \", function () {",
											"    pm.expect(data.germplasmDbId).to.eql(\"PKWDG34bd21ac\");",
											"});",
											"",
											"pm.test(\"Check locationDbId \", function () {",
											"    pm.expect(data.locationDbId).to.eql(\"6000\");",
											"});",
											"",
											"pm.test(\"Check seedLotDescription \", function () {",
											"    pm.expect(data.seedLotDescription).to.eql(\"From List Import\");",
											"});",
											"",
											"pm.test(\"Check seedLotName \", function () {",
											"    pm.expect(data.seedLotName).to.eql(\"SID2-14\");",
											"});",
											"",
											"pm.test(\"Check storageLocation \", function () {",
											"    pm.expect(data.storageLocation).to.eql(\"Default Seed Store\");",
											"});",
											"",
											"pm.test(\"Check units \", function () {",
											"    pm.expect(data.units).to.eql(\"SEED_AMOUNT_g\");",
											"});",
											"",
											"pm.test(\"Check seedLotDbId \", function () {",
											"    pm.expect(data.seedLotDbId).to.eql(\"39725719-09b9-11ea-8631-0242ac110002\");",
											"});",
											"",
											"//Check additional info",
											"pm.test(\"Check lotInternalId \", function () {",
											"    pm.expect(data.additionalInfo.lotInternalId).to.eql(\"21\");",
											"});",
											"",
											"pm.test(\"Check actualBalance \", function () {",
											"    pm.expect(data.additionalInfo.actualBalance).to.eql(\"100.0\");",
											"});",
											"",
											"pm.test(\"Check totalWithdrawals \", function () {",
											"    pm.expect(data.additionalInfo.totalWithdrawals).to.eql(\"0.0\");",
											"});",
											"",
											"pm.test(\"Check pendingDeposits \", function () {",
											"    pm.expect(data.additionalInfo.pendingDeposits).to.eql(\"65.0\");",
											"});",
											"",
											"pm.test(\"Check germplasmName \", function () {",
											"    pm.expect(data.additionalInfo.germplasmName).to.eql(\"CML14\");",
											"});",
											"",
											"pm.test(\"Check lastDepositDate \", function () {",
											"    pm.expect(data.additionalInfo.lastDepositDate).to.eql(\"2018-10-25\");",
											"});",
											"",
											"pm.test(\"Check totalReserved \", function () {",
											"    pm.expect(data.additionalInfo.totalReserved).to.eql(\"0.0\");",
											"});",
											"",
											"pm.test(\"Check username \", function () {",
											"    pm.expect(data.additionalInfo.username).to.eql(\"admin\");",
											"});",
											"",
											"pm.test(\"Check status \", function () {",
											"    pm.expect(data.additionalInfo.status).to.eql(\"ACTIVE\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/seedlots?germplasmDbId=PKWDG34bd21ac",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"seedlots"
									],
									"query": [
										{
											"key": "germplasmDbId",
											"value": "PKWDG34bd21ac"
										}
									]
								},
								"description": "GET /{crop}​/brapi​/v2​/seedlots"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered page no and pageSize values",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"var data = jsonData.result.data[0];",
											"pm.test(\"Verify returned metadata\", function () {",
											"    pm.expect(jsonData.metadata.pagination.currentPage).to.eql(2);",
											"    pm.expect(jsonData.metadata.pagination.pageSize).to.eql(10);",
											" //   pm.expect(jsonData.metadata.pagination.totalCount).to.eql(104);",
											" //   pm.expect(jsonData.metadata.pagination.totalPages).to.eql(11);",
											"    pm.expect(jsonData.metadata.status).to.eql([]);",
											"    pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"//Verify data of first lot in the results",
											"",
											"pm.test(\"Check amount \", function () {",
											"    pm.expect(data.amount).to.eql(0.0);",
											"});",
											"",
											"pm.test(\"Check createdDate \", function () {",
											"    pm.expect(data.createdDate).to.eql(\"2020-06-16T00:00:00.000Z\");",
											"});",
											"",
											"pm.test(\"Check germplasmDbId \", function () {",
											"    pm.expect(data.germplasmDbId).to.eql(\"PKWDG942cd372\");",
											"});",
											"",
											"pm.test(\"Check locationDbId \", function () {",
											"    pm.expect(data.locationDbId).to.eql(\"6000\");",
											"});",
											"",
											"pm.test(\"Check seedLotDescription \", function () {",
											"    pm.expect(data.seedLotDescription).to.eql(\"new lot record\");",
											"});",
											"",
											"pm.test(\"Check seedLotName \", function () {",
											"    pm.expect(data.seedLotName).to.eql(\"SID4-1\");",
											"});",
											"",
											"pm.test(\"Check storageLocation \", function () {",
											"    pm.expect(data.storageLocation).to.eql(\"Default Seed Store\");",
											"});",
											"",
											"pm.test(\"Check units \", function () {",
											"    pm.expect(data.units).to.eql(\"SEED_AMOUNT_g\");",
											"});",
											"",
											"pm.test(\"Check seedLotDbId \", function () {",
											"    pm.expect(data.seedLotDbId).to.eql(\"e36dfbcd-8730-49e3-9f0c-5c6f45be0231\");",
											"});",
											"",
											"//Check additional info",
											"pm.test(\"Check lotInternalId \", function () {",
											"    pm.expect(data.additionalInfo.lotInternalId).to.eql(\"42\");",
											"});",
											"",
											"pm.test(\"Check actualBalance \", function () {",
											"    pm.expect(data.additionalInfo.actualBalance).to.eql(\"0.0\");",
											"});",
											"",
											"pm.test(\"Check totalWithdrawals \", function () {",
											"    pm.expect(data.additionalInfo.totalWithdrawals).to.eql(\"0.0\");",
											"});",
											"",
											"pm.test(\"Check pendingDeposits \", function () {",
											"    pm.expect(data.additionalInfo.pendingDeposits).to.eql(\"0.0\");",
											"});",
											"",
											"pm.test(\"Check germplasmName \", function () {",
											"    pm.expect(data.additionalInfo.germplasmName).to.eql(\"CML1\");",
											"});",
											"",
											"//pm.test(\"Check lastDepositDate \", function () {",
											"//    pm.expect(data.additionalInfo.lastDepositDate).to.eql(\"2018-10-25\");",
											"//});",
											"",
											"pm.test(\"Check totalReserved \", function () {",
											"    pm.expect(data.additionalInfo.totalReserved).to.eql(\"0.0\");",
											"});",
											"",
											"pm.test(\"Check username \", function () {",
											"    pm.expect(data.additionalInfo.username).to.eql(\"admin\");",
											"});",
											"",
											"pm.test(\"Check status \", function () {",
											"    pm.expect(data.additionalInfo.status).to.eql(\"ACTIVE\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/seedlots?page=2&pageSize=10",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"seedlots"
									],
									"query": [
										{
											"key": "page",
											"value": "2"
										},
										{
											"key": "pageSize",
											"value": "10"
										}
									]
								},
								"description": "GET /{crop}​/brapi​/v2​/seedlots"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered  page number that does not exist for the given pageSize",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"var jsonData = pm.response.json();",
											"/**pm.test(\"Check error message\", function () {",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"A total of 11 pages are available, so the page number must between 0 and 11 (exclusive).\");",
											"});",
											" */",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/seedlots?page=10000&pageSize=10",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"seedlots"
									],
									"query": [
										{
											"key": "page",
											"value": "10000"
										},
										{
											"key": "pageSize",
											"value": "10"
										}
									]
								},
								"description": "GET /{crop}​/brapi​/v2​/seedlots"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered pageSize value greater than max pageSize in the system",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"var jsonData = pm.response.json();",
											"pm.test(\"Check error message\", function () {",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Page size must between 1 and 10000.\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/seedlots?page=0&pageSize=10001",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"seedlots"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "10001"
										}
									]
								},
								"description": "GET /{crop}​/brapi​/v2​/seedlots"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered seedLotDbId of a closed lot",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"pm.test(\"Verify returned metadata\", function () {",
											"    pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											"    pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											"    pm.expect(jsonData.metadata.pagination.totalCount).to.eql(0);",
											"    pm.expect(jsonData.metadata.pagination.totalPages).to.eql(0);",
											"    pm.expect(jsonData.metadata.status).to.eql([]);",
											"    pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"//Verify data of first lot in the results",
											"",
											"pm.test(\"Check data \", function () {",
											"    pm.expect(jsonData.result.data).to.eql([]);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/seedlots?seedLotDbId=eb55f552-2b21-451b-9e78-3dcf84f0d256",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"seedlots"
									],
									"query": [
										{
											"key": "seedLotDbId",
											"value": "eb55f552-2b21-451b-9e78-3dcf84f0d256"
										}
									]
								},
								"description": "GET /{crop}​/brapi​/v2​/seedlots"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered combination of parameter values",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"var data = jsonData.result.data[0];",
											"pm.test(\"Verify returned metadata\", function () {",
											"    pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											"    pm.expect(jsonData.metadata.pagination.pageSize).to.eql(10000);",
											"    pm.expect(jsonData.metadata.pagination.totalCount).to.eql(1);",
											"    pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											"    pm.expect(jsonData.metadata.status).to.eql([]);",
											"    pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"//Verify data of first lot in the results",
											"",
											"pm.test(\"Check amount \", function () {",
											"    pm.expect(data.amount).to.eql(100);",
											"});",
											"",
											"pm.test(\"Check createdDate \", function () {",
											"    pm.expect(data.createdDate).to.eql(\"2018-10-25T00:00:00.000Z\");",
											"});",
											"",
											"pm.test(\"Check germplasmDbId \", function () {",
											"    pm.expect(data.germplasmDbId).to.eql(\"PKWDG34bd21ac\");",
											"});",
											"",
											"pm.test(\"Check locationDbId \", function () {",
											"    pm.expect(data.locationDbId).to.eql(\"6000\");",
											"});",
											"",
											"pm.test(\"Check seedLotDescription \", function () {",
											"    pm.expect(data.seedLotDescription).to.eql(\"From List Import\");",
											"});",
											"",
											"pm.test(\"Check seedLotName \", function () {",
											"    pm.expect(data.seedLotName).to.eql(\"SID2-14\");",
											"});",
											"",
											"pm.test(\"Check storageLocation \", function () {",
											"    pm.expect(data.storageLocation).to.eql(\"Default Seed Store\");",
											"});",
											"",
											"pm.test(\"Check units \", function () {",
											"    pm.expect(data.units).to.eql(\"SEED_AMOUNT_g\");",
											"});",
											"",
											"pm.test(\"Check seedLotDbId \", function () {",
											"    pm.expect(data.seedLotDbId).to.eql(\"39725719-09b9-11ea-8631-0242ac110002\");",
											"});",
											"",
											"//Check additional info",
											"pm.test(\"Check lotInternalId \", function () {",
											"    pm.expect(data.additionalInfo.lotInternalId).to.eql(\"21\");",
											"});",
											"",
											"pm.test(\"Check actualBalance \", function () {",
											"    pm.expect(data.additionalInfo.actualBalance).to.eql(\"100.0\");",
											"});",
											"",
											"pm.test(\"Check totalWithdrawals \", function () {",
											"    pm.expect(data.additionalInfo.totalWithdrawals).to.eql(\"0.0\");",
											"});",
											"",
											"pm.test(\"Check pendingDeposits \", function () {",
											"    pm.expect(data.additionalInfo.pendingDeposits).to.eql(\"65.0\");",
											"});",
											"",
											"pm.test(\"Check germplasmName \", function () {",
											"    pm.expect(data.additionalInfo.germplasmName).to.eql(\"CML14\");",
											"});",
											"",
											"pm.test(\"Check lastDepositDate \", function () {",
											"    pm.expect(data.additionalInfo.lastDepositDate).to.eql(\"2018-10-25\");",
											"});",
											"",
											"pm.test(\"Check totalReserved \", function () {",
											"    pm.expect(data.additionalInfo.totalReserved).to.eql(\"0.0\");",
											"});",
											"",
											"pm.test(\"Check username \", function () {",
											"    pm.expect(data.additionalInfo.username).to.eql(\"admin\");",
											"});",
											"",
											"pm.test(\"Check status \", function () {",
											"    pm.expect(data.additionalInfo.status).to.eql(\"ACTIVE\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/seedlots?seedLotDbId=39725719-09b9-11ea-8631-0242ac110002&germplasmDbId=PKWDG34bd21ac&page=0&pageSize=10000",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"seedlots"
									],
									"query": [
										{
											"key": "seedLotDbId",
											"value": "39725719-09b9-11ea-8631-0242ac110002"
										},
										{
											"key": "germplasmDbId",
											"value": "PKWDG34bd21ac"
										},
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "10000"
										}
									]
								},
								"description": "GET /{crop}​/brapi​/v2​/seedlots"
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "transaction-resource-brapi",
			"item": [
				{
					"name": "GET ​/{cropName}​/brapi​/v2​/seedlots​/transactions",
					"item": [
						{
							"name": "Verify response when executed with no other parameter values",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"var selectedIndex = 14;",
											"var data = jsonData.result.data[selectedIndex];",
											"pm.test(\"Verify returned metadata\", function () {",
											"    pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											"    pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											"//    pm.expect(jsonData.metadata.pagination.totalCount).to.eql(503);",
											"//    pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											"pm.environment.set(\"variable_key\", \"variable_value\");",
											"    pm.expect(jsonData.metadata.status).to.eql([]);",
											"    pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"//Verify additional info",
											"",
											"pm.test(\"Check createdByUsername \", function () {",
											"    pm.expect(data.additionalInfo.createdByUsername).to.eql(\"admin\");",
											"});",
											"",
											"pm.test(\"Check locationName \", function () {",
											"    pm.expect(data.additionalInfo.locationName).to.eql(\"Default Seed Store\");",
											"});",
											"",
											"pm.test(\"Check transactionStatus \", function () {",
											"    pm.expect(data.additionalInfo.transactionStatus).to.eql(\"Confirmed\");",
											"});",
											"",
											"pm.test(\"Check lotStatus \", function () {",
											"    pm.expect(data.additionalInfo.lotStatus).to.eql(\"Active\");",
											"});",
											"",
											"pm.test(\"Check seedLotID \", function () {",
											"    pm.expect(data.additionalInfo.seedLotID).to.eql(\"39725bcf-09b9-11ea-8631-0242ac110002\");",
											"});",
											"",
											"pm.test(\"Check lotId \", function () {",
											"    pm.expect(data.additionalInfo.lotId).to.eql(\"34\");",
											"});",
											"",
											"pm.test(\"Check germplasmDbId \", function () {",
											"    pm.expect(data.additionalInfo.germplasmDbId).to.eql(\"PKWDG47fa785e\");",
											"});",
											"pm.test(\"Check transactionType \", function () {",
											"    pm.expect(data.additionalInfo.transactionType).to.eql(\"Deposit\");",
											"});",
											"pm.test(\"Check lotNotes \", function () {",
											"    pm.expect(data.additionalInfo.lotNotes).to.eql(\"From List Import\");",
											"});",
											"pm.test(\"Check locationId \", function () {",
											"    pm.expect(data.additionalInfo.locationId).to.eql(\"6000\");",
											"});",
											"pm.test(\"Check stockId \", function () {",
											"    pm.expect(data.additionalInfo.stockId).to.eql(\"SID2-4\");",
											"});",
											"",
											"pm.test(\"Check unitId \", function () {",
											"    pm.expect(data.additionalInfo.unitId).to.eql(\"8264\");",
											"});",
											"pm.test(\"Check designation \", function () {",
											"    pm.expect(data.additionalInfo.designation).to.eql(\"CML4\");",
											"});",
											"pm.test(\"Check locationAbbr \", function () {",
											"    pm.expect(data.additionalInfo.locationAbbr).to.eql(\"DSS\");",
											"});",
											"",
											"//Verify other transaction data",
											"pm.test(\"Check amount \", function () {",
											"    pm.expect(data.amount).to.eql(100);",
											"});",
											"pm.test(\"Check transactionTimestamp \", function () {",
											"    pm.expect(data.transactionTimestamp).to.eql(\"2018-10-25T00:00:00.000Z\");",
											"});",
											"pm.test(\"Check units \", function () {",
											"    pm.expect(data.units).to.eql(\"SEED_AMOUNT_g\");",
											"});",
											"pm.test(\"Check transactionDbId \", function () {",
											"    pm.expect(data.transactionDbId).to.eql(\"54\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/seedlots/transactions",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"seedlots",
										"transactions"
									]
								},
								"description": "GET /{cropName}/brapi/v2/transactions"
							},
							"response": []
						},
						{
							"name": "Verify response when entered transactionDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"var selectedIndex = 0;",
											"var data = jsonData.result.data[selectedIndex];",
											"pm.test(\"Verify returned metadata\", function () {",
											"    pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											"    pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											"    pm.expect(jsonData.metadata.pagination.totalCount).to.eql(1);",
											"    pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											"    pm.expect(jsonData.metadata.status).to.eql([]);",
											"    pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"//Verify additional info",
											"",
											"pm.test(\"Check createdByUsername \", function () {",
											"    pm.expect(data.additionalInfo.createdByUsername).to.eql(\"admin\");",
											"});",
											"",
											"pm.test(\"Check locationName \", function () {",
											"    pm.expect(data.additionalInfo.locationName).to.eql(\"Default Seed Store\");",
											"});",
											"",
											"pm.test(\"Check transactionStatus \", function () {",
											"    pm.expect(data.additionalInfo.transactionStatus).to.eql(\"Pending\");",
											"});",
											"",
											"pm.test(\"Check lotStatus \", function () {",
											"    pm.expect(data.additionalInfo.lotStatus).to.eql(\"Active\");",
											"});",
											"",
											"pm.test(\"Check seedLotID \", function () {",
											"    pm.expect(data.additionalInfo.seedLotID).to.eql(\"39725719-09b9-11ea-8631-0242ac110002\");",
											"});",
											"",
											"pm.test(\"Check lotId \", function () {",
											"    pm.expect(data.additionalInfo.lotId).to.eql(\"21\");",
											"});",
											"",
											"pm.test(\"Check germplasmDbId \", function () {",
											"    pm.expect(data.additionalInfo.germplasmDbId).to.eql(\"PKWDG34bd21ac\");",
											"});",
											"pm.test(\"Check transactionType \", function () {",
											"    pm.expect(data.additionalInfo.transactionType).to.eql(\"Deposit\");",
											"});",
											"pm.test(\"Check lotNotes \", function () {",
											"    pm.expect(data.additionalInfo.lotNotes).to.eql(\"From List Import\");",
											"});",
											"pm.test(\"Check locationId \", function () {",
											"    pm.expect(data.additionalInfo.locationId).to.eql(\"6000\");",
											"});",
											"pm.test(\"Check stockId \", function () {",
											"    pm.expect(data.additionalInfo.stockId).to.eql(\"SID2-14\");",
											"});",
											"",
											"pm.test(\"Check unitId \", function () {",
											"    pm.expect(data.additionalInfo.unitId).to.eql(\"8264\");",
											"});",
											"pm.test(\"Check designation \", function () {",
											"    pm.expect(data.additionalInfo.designation).to.eql(\"CML14\");",
											"});",
											"pm.test(\"Check locationAbbr \", function () {",
											"    pm.expect(data.additionalInfo.locationAbbr).to.eql(\"DSS\");",
											"});",
											"",
											"//Verify other transaction data",
											"pm.test(\"Check amount \", function () {",
											"    pm.expect(data.amount).to.eql(15);",
											"});",
											"pm.test(\"Check transactionTimestamp \", function () {",
											"    pm.expect(data.transactionTimestamp).to.eql(\"2020-04-14T00:00:00.000Z\");",
											"});",
											"pm.test(\"Check units \", function () {",
											"    pm.expect(data.units).to.eql(\"SEED_AMOUNT_g\");",
											"});",
											"pm.test(\"Check transactionDbId \", function () {",
											"    pm.expect(data.transactionDbId).to.eql(\"61\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/seedlots/transactions?transactionDbId=61",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"seedlots",
										"transactions"
									],
									"query": [
										{
											"key": "transactionDbId",
											"value": "61"
										}
									]
								},
								"description": "GET /{cropName}/brapi/v2/transactions"
							},
							"response": []
						},
						{
							"name": "Verify response when entered seedLotDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"var selectedIndex = 0;",
											"var data = jsonData.result.data[selectedIndex];",
											"pm.test(\"Verify returned metadata\", function () {",
											"    pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											"    pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											"    pm.expect(jsonData.metadata.pagination.totalCount).to.eql(3);",
											"    pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											"    pm.expect(jsonData.metadata.status).to.eql([]);",
											"    pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"//Verify additional info",
											"",
											"pm.test(\"Check createdByUsername \", function () {",
											"    pm.expect(data.additionalInfo.createdByUsername).to.eql(\"admin\");",
											"});",
											"",
											"pm.test(\"Check locationName \", function () {",
											"    pm.expect(data.additionalInfo.locationName).to.eql(\"Default Seed Store\");",
											"});",
											"",
											"pm.test(\"Check transactionStatus \", function () {",
											"    pm.expect(data.additionalInfo.transactionStatus).to.eql(\"Confirmed\");",
											"});",
											"",
											"pm.test(\"Check lotStatus \", function () {",
											"    pm.expect(data.additionalInfo.lotStatus).to.eql(\"Active\");",
											"});",
											"",
											"pm.test(\"Check seedLotID \", function () {",
											"    pm.expect(data.additionalInfo.seedLotID).to.eql(\"39725719-09b9-11ea-8631-0242ac110002\");",
											"});",
											"",
											"pm.test(\"Check lotId \", function () {",
											"    pm.expect(data.additionalInfo.lotId).to.eql(\"21\");",
											"});",
											"",
											"pm.test(\"Check germplasmDbId \", function () {",
											"    pm.expect(data.additionalInfo.germplasmDbId).to.eql(\"PKWDG34bd21ac\");",
											"});",
											"pm.test(\"Check transactionType \", function () {",
											"    pm.expect(data.additionalInfo.transactionType).to.eql(\"Deposit\");",
											"});",
											"pm.test(\"Check lotNotes \", function () {",
											"    pm.expect(data.additionalInfo.lotNotes).to.eql(\"From List Import\");",
											"});",
											"pm.test(\"Check locationId \", function () {",
											"    pm.expect(data.additionalInfo.locationId).to.eql(\"6000\");",
											"});",
											"pm.test(\"Check stockId \", function () {",
											"    pm.expect(data.additionalInfo.stockId).to.eql(\"SID2-14\");",
											"});",
											"",
											"pm.test(\"Check unitId \", function () {",
											"    pm.expect(data.additionalInfo.unitId).to.eql(\"8264\");",
											"});",
											"pm.test(\"Check designation \", function () {",
											"    pm.expect(data.additionalInfo.designation).to.eql(\"CML14\");",
											"});",
											"pm.test(\"Check locationAbbr \", function () {",
											"    pm.expect(data.additionalInfo.locationAbbr).to.eql(\"DSS\");",
											"});",
											"",
											"//Verify other transaction data",
											"pm.test(\"Check amount \", function () {",
											"    pm.expect(data.amount).to.eql(100);",
											"});",
											"pm.test(\"Check transactionTimestamp \", function () {",
											"    pm.expect(data.transactionTimestamp).to.eql(\"2018-10-25T00:00:00.000Z\");",
											"});",
											"pm.test(\"Check units \", function () {",
											"    pm.expect(data.units).to.eql(\"SEED_AMOUNT_g\");",
											"});",
											"pm.test(\"Check transactionDbId \", function () {",
											"    pm.expect(data.transactionDbId).to.eql(\"41\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/seedlots/transactions?seedLotDbId=39725719-09b9-11ea-8631-0242ac110002",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"seedlots",
										"transactions"
									],
									"query": [
										{
											"key": "seedLotDbId",
											"value": "39725719-09b9-11ea-8631-0242ac110002"
										}
									]
								},
								"description": "GET /{cropName}/brapi/v2/transactions"
							},
							"response": []
						},
						{
							"name": "Verify response when entered germplasmDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"var selectedIndex = 0;",
											"var data = jsonData.result.data[selectedIndex];",
											"pm.test(\"Verify returned metadata\", function () {",
											"    pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											"    pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											"    pm.expect(jsonData.metadata.pagination.totalCount).to.eql(1);",
											"    pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											"    pm.expect(jsonData.metadata.status).to.eql([]);",
											"    pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"//Verify additional info",
											"",
											"pm.test(\"Check createdByUsername \", function () {",
											"    pm.expect(data.additionalInfo.createdByUsername).to.eql(\"admin\");",
											"});",
											"",
											"pm.test(\"Check locationName \", function () {",
											"    pm.expect(data.additionalInfo.locationName).to.eql(\"Default Seed Store\");",
											"});",
											"",
											"pm.test(\"Check transactionStatus \", function () {",
											"    pm.expect(data.additionalInfo.transactionStatus).to.eql(\"Confirmed\");",
											"});",
											"",
											"pm.test(\"Check lotStatus \", function () {",
											"    pm.expect(data.additionalInfo.lotStatus).to.eql(\"Active\");",
											"});",
											"",
											"pm.test(\"Check seedLotID \", function () {",
											"    pm.expect(data.additionalInfo.seedLotID).to.eql(\"39725a4a-09b9-11ea-8631-0242ac110002\");",
											"});",
											"",
											"pm.test(\"Check lotId \", function () {",
											"    pm.expect(data.additionalInfo.lotId).to.eql(\"30\");",
											"});",
											"",
											"pm.test(\"Check germplasmDbId \", function () {",
											"    pm.expect(data.additionalInfo.germplasmDbId).to.eql(\"PKWDG942cd372\");",
											"});",
											"pm.test(\"Check transactionType \", function () {",
											"    pm.expect(data.additionalInfo.transactionType).to.eql(\"Deposit\");",
											"});",
											"pm.test(\"Check lotNotes \", function () {",
											"    pm.expect(data.additionalInfo.lotNotes).to.eql(\"From List Import\");",
											"});",
											"pm.test(\"Check locationId \", function () {",
											"    pm.expect(data.additionalInfo.locationId).to.eql(\"6000\");",
											"});",
											"pm.test(\"Check stockId \", function () {",
											"    pm.expect(data.additionalInfo.stockId).to.eql(\"SID2-1\");",
											"});",
											"",
											"pm.test(\"Check unitId \", function () {",
											"    pm.expect(data.additionalInfo.unitId).to.eql(\"8264\");",
											"});",
											"pm.test(\"Check designation \", function () {",
											"    pm.expect(data.additionalInfo.designation).to.eql(\"CML1\");",
											"});",
											"pm.test(\"Check locationAbbr \", function () {",
											"    pm.expect(data.additionalInfo.locationAbbr).to.eql(\"DSS\");",
											"});",
											"",
											"//Verify other transaction data",
											"pm.test(\"Check amount \", function () {",
											"    pm.expect(data.amount).to.eql(100);",
											"});",
											"pm.test(\"Check transactionTimestamp \", function () {",
											"    pm.expect(data.transactionTimestamp).to.eql(\"2018-10-25T00:00:00.000Z\");",
											"});",
											"pm.test(\"Check units \", function () {",
											"    pm.expect(data.units).to.eql(\"SEED_AMOUNT_g\");",
											"});",
											"pm.test(\"Check transactionDbId \", function () {",
											"    pm.expect(data.transactionDbId).to.eql(\"50\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/seedlots/transactions?germplasmDbId=PKWDG942cd372",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"seedlots",
										"transactions"
									],
									"query": [
										{
											"key": "germplasmDbId",
											"value": "PKWDG942cd372"
										}
									]
								},
								"description": "GET /{cropName}/brapi/v2/transactions"
							},
							"response": []
						},
						{
							"name": "Verify response when entered pagination details",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"var selectedIndex = 14;",
											"var data = jsonData.result.data[selectedIndex];",
											"pm.test(\"Verify returned metadata\", function () {",
											"    pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											"    pm.expect(jsonData.metadata.pagination.pageSize).to.eql(10000);",
											"//    pm.expect(jsonData.metadata.pagination.totalCount).to.eql(503);",
											"    pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											"    pm.expect(jsonData.metadata.status).to.eql([]);",
											"    pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"//Verify additional info",
											"",
											"pm.test(\"Check createdByUsername \", function () {",
											"    pm.expect(data.additionalInfo.createdByUsername).to.eql(\"admin\");",
											"});",
											"",
											"pm.test(\"Check locationName \", function () {",
											"    pm.expect(data.additionalInfo.locationName).to.eql(\"Default Seed Store\");",
											"});",
											"",
											"pm.test(\"Check transactionStatus \", function () {",
											"    pm.expect(data.additionalInfo.transactionStatus).to.eql(\"Confirmed\");",
											"});",
											"",
											"pm.test(\"Check lotStatus \", function () {",
											"    pm.expect(data.additionalInfo.lotStatus).to.eql(\"Active\");",
											"});",
											"",
											"pm.test(\"Check seedLotID \", function () {",
											"    pm.expect(data.additionalInfo.seedLotID).to.eql(\"39725bcf-09b9-11ea-8631-0242ac110002\");",
											"});",
											"",
											"pm.test(\"Check lotId \", function () {",
											"    pm.expect(data.additionalInfo.lotId).to.eql(\"34\");",
											"});",
											"",
											"pm.test(\"Check germplasmDbId \", function () {",
											"    pm.expect(data.additionalInfo.germplasmDbId).to.eql(\"PKWDG47fa785e\");",
											"});",
											"pm.test(\"Check transactionType \", function () {",
											"    pm.expect(data.additionalInfo.transactionType).to.eql(\"Deposit\");",
											"});",
											"pm.test(\"Check lotNotes \", function () {",
											"    pm.expect(data.additionalInfo.lotNotes).to.eql(\"From List Import\");",
											"});",
											"pm.test(\"Check locationId \", function () {",
											"    pm.expect(data.additionalInfo.locationId).to.eql(\"6000\");",
											"});",
											"pm.test(\"Check stockId \", function () {",
											"    pm.expect(data.additionalInfo.stockId).to.eql(\"SID2-4\");",
											"});",
											"",
											"pm.test(\"Check unitId \", function () {",
											"    pm.expect(data.additionalInfo.unitId).to.eql(\"8264\");",
											"});",
											"pm.test(\"Check designation \", function () {",
											"    pm.expect(data.additionalInfo.designation).to.eql(\"CML4\");",
											"});",
											"pm.test(\"Check locationAbbr \", function () {",
											"    pm.expect(data.additionalInfo.locationAbbr).to.eql(\"DSS\");",
											"});",
											"",
											"//Verify other transaction data",
											"pm.test(\"Check amount \", function () {",
											"    pm.expect(data.amount).to.eql(100);",
											"});",
											"pm.test(\"Check transactionTimestamp \", function () {",
											"    pm.expect(data.transactionTimestamp).to.eql(\"2018-10-25T00:00:00.000Z\");",
											"});",
											"pm.test(\"Check units \", function () {",
											"    pm.expect(data.units).to.eql(\"SEED_AMOUNT_g\");",
											"});",
											"pm.test(\"Check transactionDbId \", function () {",
											"    pm.expect(data.transactionDbId).to.eql(\"54\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/seedlots/transactions?page=0&pageSize=10000",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"seedlots",
										"transactions"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "10000"
										}
									]
								},
								"description": "GET /{cropName}/brapi/v2/transactions"
							},
							"response": []
						},
						{
							"name": "Verify if transactions of closed lot are not returned",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"var selectedIndex = 0;",
											"var data = jsonData.result.data[selectedIndex];",
											"pm.test(\"Verify returned metadata\", function () {",
											"    pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											"    pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											"  //  pm.expect(jsonData.metadata.pagination.totalCount).to.eql(503);",
											"  //  pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											"    pm.expect(jsonData.metadata.status).to.eql([]);",
											"    pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"//Check through the all transactions if transactionDbIds of closed lots are not existing",
											"",
											"pm.test(\"Check if transactionDbIds of closed lot don't exist\", function () {",
											"  var dataLength = jsonData.result.data.length;",
											"var closedTrnIds = [\"81\",\"82\", \"83\"];",
											"",
											"  for (i = 0; i < dataLength; i++) {",
											"    var selectedData = jsonData.result.data[i];",
											"    console.log(\"at index:\"+i);",
											"    for (j=0;j<closedTrnIds.length;j++){",
											"        pm.expect(selectedData.transactionDbId).to.not.eql(closedTrnIds[j]);",
											"    }",
											"  }",
											"});    ",
											"",
											";",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/seedlots/transactions",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"seedlots",
										"transactions"
									]
								},
								"description": "GET /{cropName}/brapi/v2/transactions"
							},
							"response": []
						},
						{
							"name": "Verify response when entered a combination of parameter values-tofix",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"var selectedIndex = 0;",
											"var data = jsonData.result.data[selectedIndex];",
											"pm.test(\"Verify returned metadata\", function () {",
											"    pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											"    pm.expect(jsonData.metadata.pagination.pageSize).to.eql(10000);",
											"    pm.expect(jsonData.metadata.pagination.totalCount).to.eql(1);",
											"    pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											"    pm.expect(jsonData.metadata.status).to.eql([]);",
											"    pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"//Verify additional info",
											"",
											"pm.test(\"Check createdByUsername \", function () {",
											"    pm.expect(data.additionalInfo.createdByUsername).to.eql(\"admin\");",
											"});",
											"",
											"pm.test(\"Check locationName \", function () {",
											"    pm.expect(data.additionalInfo.locationName).to.eql(\"Default Seed Store\");",
											"});",
											"",
											"pm.test(\"Check transactionStatus \", function () {",
											"    pm.expect(data.additionalInfo.transactionStatus).to.eql(\"Pending\");",
											"});",
											"",
											"pm.test(\"Check lotStatus \", function () {",
											"    pm.expect(data.additionalInfo.lotStatus).to.eql(\"Active\");",
											"});",
											"",
											"pm.test(\"Check seedLotID \", function () {",
											"    pm.expect(data.additionalInfo.seedLotID).to.eql(\"39725719-09b9-11ea-8631-0242ac110002\");",
											"});",
											"",
											"pm.test(\"Check lotId \", function () {",
											"    pm.expect(data.additionalInfo.lotId).to.eql(\"21\");",
											"});",
											"",
											"pm.test(\"Check germplasmDbId \", function () {",
											"    pm.expect(data.additionalInfo.germplasmDbId).to.eql(\"PKWDG34bd21ac\");",
											"});",
											"pm.test(\"Check transactionType \", function () {",
											"    pm.expect(data.additionalInfo.transactionType).to.eql(\"Deposit\");",
											"});",
											"pm.test(\"Check lotNotes \", function () {",
											"    pm.expect(data.additionalInfo.lotNotes).to.eql(\"From List Import\");",
											"});",
											"pm.test(\"Check locationId \", function () {",
											"    pm.expect(data.additionalInfo.locationId).to.eql(\"6000\");",
											"});",
											"pm.test(\"Check stockId \", function () {",
											"    pm.expect(data.additionalInfo.stockId).to.eql(\"SID2-14\");",
											"});",
											"",
											"pm.test(\"Check unitId \", function () {",
											"    pm.expect(data.additionalInfo.unitId).to.eql(\"8264\");",
											"});",
											"pm.test(\"Check designation \", function () {",
											"    pm.expect(data.additionalInfo.designation).to.eql(\"CML14\");",
											"});",
											"pm.test(\"Check locationAbbr \", function () {",
											"    pm.expect(data.additionalInfo.locationAbbr).to.eql(\"DSS\");",
											"});",
											"",
											"//Verify other transaction data",
											"pm.test(\"Check amount \", function () {",
											"    pm.expect(data.amount).to.eql(15);",
											"});",
											"pm.test(\"Check transactionTimestamp \", function () {",
											"    pm.expect(data.transactionTimestamp).to.eql(\"2020-04-14T00:00:00.000Z\");",
											"});",
											"pm.test(\"Check units \", function () {",
											"    pm.expect(data.units).to.eql(\"SEED_AMOUNT_g\");",
											"});",
											"pm.test(\"Check transactionDbId \", function () {",
											"    pm.expect(data.transactionDbId).to.eql(\"61\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/seedlots/transactions?transactionDbId=61&seedLotDbId=39725719-09b9-11ea-8631-0242ac110002&germplasmDbId=PKWDG34bd21ac&page=0&pageSize=10000",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"seedlots",
										"transactions"
									],
									"query": [
										{
											"key": "transactionDbId",
											"value": "61"
										},
										{
											"key": "seedLotDbId",
											"value": "39725719-09b9-11ea-8631-0242ac110002"
										},
										{
											"key": "germplasmDbId",
											"value": "PKWDG34bd21ac"
										},
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "10000"
										}
									]
								},
								"description": "GET /{cropName}/brapi/v2/transactions"
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "trial-resource-brapi",
			"item": [
				{
					"name": "GET ​/{crop}​/brapi​/v1​/trials",
					"item": [
						{
							"name": "Verify response code and body when entered crop name only",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"var i = 1;",
											"",
											"//Check details of a trial in the list are correct",
											"pm.test(\"Check trialDbId\", function () {",
											"  pm.expect(jsonData.result.data[i].trialDbId).to.eql(pm.environment.get(\"trialStudyId\"));",
											"});",
											"pm.test(\"Check trialName\", function () {",
											"    pm.expect(jsonData.result.data[i].trialName).to.eql(\"Randomized Trial 20180003\");",
											"});",
											"",
											"pm.test(\"Check programDbId\", function () {",
											"    pm.expect(jsonData.result.data[i].programDbId).to.eql(\"c9e335d2-3057-4958-a43e-e38cf61d09ca\");",
											"});",
											"",
											"pm.test(\"Check programDbId\", function () {",
											"    pm.expect(jsonData.result.data[i].programName).to.eql(\"API Program\");",
											"});",
											"pm.test(\"Check startDate\", function () {",
											"   ",
											"});",
											"pm.test(\"Check startDate\", function () {",
											"    pm.expect(jsonData.result.data[i].startDate).to.eql(\"2018-09-12\");",
											"});",
											"",
											"pm.test(\"Check endDate\", function () { ",
											"    pm.expect(jsonData.result.data[1].endDate).to.eql(\"2019-02-20\");",
											"});",
											"",
											"pm.test(\"Check active\", function () {  ",
											"    pm.expect(jsonData.result.data[i].active).to.eql(false);",
											"});",
											"",
											"//Check details of an associated environment are correct",
											"pm.test(\"Check studyDbId\", function () {  ",
											"    pm.expect(jsonData.result.data[i].studies[0].studyDbId).to.eql(2);",
											"});",
											"",
											"pm.test(\"Check studyName\", function () {  ",
											"       pm.expect(jsonData.result.data[i].studies[0].studyName).to.eql(\"Randomized Trial 20180003 Environment Number 1\");",
											"});",
											"",
											"pm.test(\"Check locationDbId\", function () { ",
											"    pm.expect(jsonData.result.data[i].studies[0].locationDbId).to.eql(\"9002\");",
											"});",
											"pm.test(\"Check locationName\", function () {",
											"    pm.expect(jsonData.result.data[i].studies[0].locationName).to.eql(\"Int Institute of Tropical Agriculture\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/trials",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"trials"
									]
								},
								"description": "GET ​/{crop}​/brapi​/v1​/trials"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered programDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"var i = 1;",
											"",
											"//Check details of a trial in the list are correct",
											"pm.test(\"Check trialDbId\", function () {",
											"  pm.expect(jsonData.result.data[i].trialDbId).to.eql(pm.environment.get(\"trialStudyId\"));",
											"});",
											"pm.test(\"Check trialName\", function () {",
											"    pm.expect(jsonData.result.data[i].trialName).to.eql(\"Randomized Trial 20180003\");",
											"});",
											"",
											"pm.test(\"Check programDbId\", function () {",
											"    pm.expect(jsonData.result.data[i].programDbId).to.eql(\"c9e335d2-3057-4958-a43e-e38cf61d09ca\");",
											"});",
											"",
											"pm.test(\"Check programDbId\", function () {",
											"    pm.expect(jsonData.result.data[i].programName).to.eql(\"API Program\");",
											"});",
											"pm.test(\"Check startDate\", function () {",
											"   ",
											"});",
											"pm.test(\"Check startDate\", function () {",
											"    pm.expect(jsonData.result.data[i].startDate).to.eql(\"2018-09-12\");",
											"});",
											"",
											"pm.test(\"Check endDate\", function () { ",
											"    pm.expect(jsonData.result.data[1].endDate).to.eql(\"2019-02-20\");",
											"});",
											"",
											"pm.test(\"Check active\", function () {  ",
											"    pm.expect(jsonData.result.data[i].active).to.eql(false);",
											"});",
											"",
											"//Check details of an associated environment are correct",
											"pm.test(\"Check studyDbId\", function () {  ",
											"    pm.expect(jsonData.result.data[i].studies[0].studyDbId).to.eql(2);",
											"});",
											"",
											"pm.test(\"Check studyName\", function () {  ",
											"       pm.expect(jsonData.result.data[i].studies[0].studyName).to.eql(\"Randomized Trial 20180003 Environment Number 1\");",
											"});",
											"",
											"pm.test(\"Check locationDbId\", function () { ",
											"    pm.expect(jsonData.result.data[i].studies[0].locationDbId).to.eql(\"9002\");",
											"});",
											"pm.test(\"Check locationName\", function () {",
											"    pm.expect(jsonData.result.data[i].studies[0].locationName).to.eql(\"Int Institute of Tropical Agriculture\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/trials?programDbId={{programDbId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"trials"
									],
									"query": [
										{
											"key": "programDbId",
											"value": "{{programDbId}}"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v1​/trials"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered locationDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/trials?locationDbId=9001",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"trials"
									],
									"query": [
										{
											"key": "locationDbId",
											"value": "9001"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v1​/trials"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered page and pageSize",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"var i = 1;",
											"",
											"//Check details of a trial in the list are correct",
											"pm.test(\"Check trialDbId\", function () {",
											"  pm.expect(jsonData.result.data[i].trialDbId).to.eql(pm.environment.get(\"trialStudyId\"));",
											"});",
											"pm.test(\"Check trialName\", function () {",
											"    pm.expect(jsonData.result.data[i].trialName).to.eql(\"Randomized Trial 20180003\");",
											"});",
											"",
											"pm.test(\"Check programDbId\", function () {",
											"    pm.expect(jsonData.result.data[i].programDbId).to.eql(\"c9e335d2-3057-4958-a43e-e38cf61d09ca\");",
											"});",
											"",
											"pm.test(\"Check programDbId\", function () {",
											"    pm.expect(jsonData.result.data[i].programName).to.eql(\"API Program\");",
											"});",
											"pm.test(\"Check startDate\", function () {",
											"   ",
											"});",
											"pm.test(\"Check startDate\", function () {",
											"    pm.expect(jsonData.result.data[i].startDate).to.eql(\"2018-09-12\");",
											"});",
											"",
											"pm.test(\"Check endDate\", function () { ",
											"    pm.expect(jsonData.result.data[1].endDate).to.eql(\"2019-02-20\");",
											"});",
											"",
											"pm.test(\"Check active\", function () {  ",
											"    pm.expect(jsonData.result.data[i].active).to.eql(false);",
											"});",
											"",
											"//Check details of an associated environment are correct",
											"pm.test(\"Check studyDbId\", function () {  ",
											"    pm.expect(jsonData.result.data[i].studies[0].studyDbId).to.eql(2);",
											"});",
											"",
											"pm.test(\"Check studyName\", function () {  ",
											"       pm.expect(jsonData.result.data[i].studies[0].studyName).to.eql(\"Randomized Trial 20180003 Environment Number 1\");",
											"});",
											"",
											"pm.test(\"Check locationDbId\", function () { ",
											"    pm.expect(jsonData.result.data[i].studies[0].locationDbId).to.eql(\"9002\");",
											"});",
											"pm.test(\"Check locationName\", function () {",
											"    pm.expect(jsonData.result.data[i].studies[0].locationName).to.eql(\"Int Institute of Tropical Agriculture\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/trials?page=0&pageSize=2",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"trials"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "2"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v1​/trials"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered pageSize greater than max",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"",
											"pm.test(\"Check response message when exceeded max page size\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Page size must between 1 and 10000.\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/trials?page=0&pageSize=10001",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"trials"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "10001"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v1​/trials"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered active status",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check all active status are equal to input parameter\", function () {",
											"    var jsonData = pm.response.json();",
											"    for (var i = 0; i < jsonData.result.data.length; i++) { ",
											"    pm.expect(jsonData.result.data[i].active).to.eql(true);",
											"    }",
											"});    ",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/trials?active=true",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"trials"
									],
									"query": [
										{
											"key": "active",
											"value": "true"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v1​/trials"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered inactive status",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check all active status are equal to input parameter\", function () {",
											"    var jsonData = pm.response.json();",
											"    for (var i = 0; i < jsonData.result.data.length; i++) { ",
											"    pm.expect(jsonData.result.data[i].active).to.eql(false);",
											"    }",
											"});    "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/trials?active=false",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"trials"
									],
									"query": [
										{
											"key": "active",
											"value": "false"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v1​/trials"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered valid field name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"var i = 1;",
											"",
											"//Check details of a trial in the list are correct",
											"pm.test(\"Check trialDbId\", function () {",
											"  pm.expect(jsonData.result.data[i].trialDbId).to.eql(pm.environment.get(\"trialStudyId\"));",
											"});",
											"pm.test(\"Check trialName\", function () {",
											"    pm.expect(jsonData.result.data[i].trialName).to.eql(\"Randomized Trial 20180003\");",
											"});",
											"",
											"pm.test(\"Check programDbId\", function () {",
											"    pm.expect(jsonData.result.data[i].programDbId).to.eql(\"c9e335d2-3057-4958-a43e-e38cf61d09ca\");",
											"});",
											"",
											"pm.test(\"Check programDbId\", function () {",
											"    pm.expect(jsonData.result.data[i].programName).to.eql(\"API Program\");",
											"});",
											"pm.test(\"Check startDate\", function () {",
											"   ",
											"});",
											"pm.test(\"Check startDate\", function () {",
											"    pm.expect(jsonData.result.data[i].startDate).to.eql(\"2018-09-12\");",
											"});",
											"",
											"pm.test(\"Check endDate\", function () { ",
											"    pm.expect(jsonData.result.data[1].endDate).to.eql(\"2019-02-20\");",
											"});",
											"",
											"pm.test(\"Check active\", function () {  ",
											"    pm.expect(jsonData.result.data[i].active).to.eql(false);",
											"});",
											"",
											"//Check details of an associated environment are correct",
											"pm.test(\"Check studyDbId\", function () {  ",
											"    pm.expect(jsonData.result.data[i].studies[0].studyDbId).to.eql(2);",
											"});",
											"",
											"pm.test(\"Check studyName\", function () {  ",
											"       pm.expect(jsonData.result.data[i].studies[0].studyName).to.eql(\"Randomized Trial 20180003 Environment Number 1\");",
											"});",
											"",
											"pm.test(\"Check locationDbId\", function () { ",
											"    pm.expect(jsonData.result.data[i].studies[0].locationDbId).to.eql(\"9002\");",
											"});",
											"pm.test(\"Check locationName\", function () {",
											"    pm.expect(jsonData.result.data[i].studies[0].locationName).to.eql(\"Int Institute of Tropical Agriculture\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/trials?sortedBy=trialDbId",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"trials"
									],
									"query": [
										{
											"key": "sortedBy",
											"value": "trialDbId"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v1​/trials"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid field name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Response message is correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.metadata.status[0].message).to.eql(\"sortBy bad filter, expect trialDbId/trialName/programDbId/programName/startDate/endDate/active\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/trials?sortBy=studyId",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"trials"
									],
									"query": [
										{
											"key": "sortBy",
											"value": "studyId"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v1​/trials"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when sorted in ascending order",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check if first trialDbId is less than next trialDbId\", function () {",
											"   ",
											"  ",
											"    var jsonData = pm.response.json();",
											"    var data = jsonData.result.data;",
											"    var i;",
											"    for (i = 0; i+1 < data.length ; i++) { ",
											"      pm.expect(parseInt(data[i+1].trialDbId)).to.be.above(parseInt(data[i].trialDbId));",
											"        ",
											"   }",
											" ",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/trials?sortOrder=asc&sortBy=trialDbId",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"trials"
									],
									"query": [
										{
											"key": "sortOrder",
											"value": "asc"
										},
										{
											"key": "sortBy",
											"value": "trialDbId"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v1​/trials"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when sorted in descending order",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check if first trialDbId is greater than next trialDbId\", function () {",
											"    var jsonData = pm.response.json();",
											"    var data = jsonData.result.data;",
											"    var i;",
											"    for (i = 0; i+1 < data.length ; i++) { ",
											"      pm.expect(parseInt(data[i].trialDbId)).to.be.above(parseInt(data[i+1].trialDbId));",
											"   ",
											"   }",
											" ",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/trials?sortOrder=desc&sortBy=trialDbId",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"trials"
									],
									"query": [
										{
											"key": "sortOrder",
											"value": "desc"
										},
										{
											"key": "sortBy",
											"value": "trialDbId"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v1​/trials"
							},
							"response": []
						},
						{
							"name": "Verify response code and body entered invalid sort order",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Response message is correct\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.metadata.status[0].message).to.eql(\"sortOrder bad filter, expect asc/desc\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/trials?sortOrder=invalidorder",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"trials"
									],
									"query": [
										{
											"key": "sortOrder",
											"value": "invalidorder"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v1​/trials"
							},
							"response": []
						}
					]
				},
				{
					"name": "GET ​/{crop}​/brapi​/v2​/trials",
					"item": [
						{
							"name": "Verify response code and body when entered crop name only",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"var i = 1;",
											"",
											"//Check details of a trial in the list are correct",
											"pm.test(\"Check trialDbId\", function () {",
											"  pm.expect(jsonData.result.data[i].trialDbId).to.eql(pm.environment.get(\"trialStudyId\"));",
											"});",
											"pm.test(\"Check trialName\", function () {",
											"    pm.expect(jsonData.result.data[i].trialName).to.eql(\"Randomized Trial 20180003\");",
											"});",
											"",
											"pm.test(\"Check trialDescription\", function () {",
											"    pm.expect(jsonData.result.data[i].trialDescription).to.eql(\"Trial created using RCBD design\");",
											"});",
											"",
											"pm.test(\"Check trialPUI \", function () {",
											"    pm.expect(jsonData.result.data[i].trialPUI).to.eql(\"PKWDPc08QhLs7\");",
											"});",
											"",
											"pm.test(\"Check commonCropName \", function () {",
											"    pm.expect(jsonData.result.data[i].commonCropName).to.eql(\"testdata\");",
											"});",
											"pm.test(\"Check programDbId\", function () {",
											"    pm.expect(jsonData.result.data[i].programDbId).to.eql(\"c9e335d2-3057-4958-a43e-e38cf61d09ca\");",
											"});",
											"",
											"pm.test(\"Check programName\", function () {",
											"    pm.expect(jsonData.result.data[i].programName).to.eql(\"API Program\");",
											"});",
											"pm.test(\"Check startDate\", function () {",
											"    pm.expect(jsonData.result.data[i].startDate).to.eql(\"2018-09-12\");",
											"});",
											"",
											"pm.test(\"Check endDate\", function () { ",
											"    pm.expect(jsonData.result.data[i].endDate).to.eql(\"2019-02-20\");",
											"});",
											"",
											"pm.test(\"Check active\", function () {  ",
											"    pm.expect(jsonData.result.data[i].active).to.eql(false);",
											"});",
											"",
											"//Check additional info",
											"pm.test(\"Check PI_NAME\", function () {  ",
											"    pm.expect(jsonData.result.data[i].additionalInfo.PI_NAME).to.eql(\"API Test User\");",
											"});",
											"pm.test(\"Check PI_NAME_ID\", function () {  ",
											"    pm.expect(jsonData.result.data[i].additionalInfo.PI_ID).to.eql(\"120\");",
											"});",
											"",
											"//Check contacts",
											"",
											"pm.test(\"Check contactDbId\", function () {  ",
											"    pm.expect(jsonData.result.data[i].contacts[0].contactDbId).to.eql(\"\");",
											"});",
											"",
											"pm.test(\"Check email\", function () {  ",
											"    pm.expect(jsonData.result.data[i].contacts[0].email).to.eql(\"admin1@leafnode.io\");",
											"});",
											"",
											"pm.test(\"Check instituteName\", function () {  ",
											"    pm.expect(jsonData.result.data[i].contacts[0].instituteName).to.eql(\"Breeding Org\");",
											"});",
											"",
											"pm.test(\"Check name\", function () {  ",
											"    pm.expect(jsonData.result.data[i].contacts[0].name).to.eql(\"Admin Admin\");",
											"});",
											"pm.test(\"Check type\", function () {  ",
											"    pm.expect(jsonData.result.data[i].contacts[0].type).to.eql(\"Creator\");",
											"});",
											"pm.test(\"Check orcid\", function () {  ",
											"    pm.expect(jsonData.result.data[i].contacts[0].orcid).to.eql(\"\");",
											"});",
											"",
											"pm.test(\"Check documentationURL\", function () {  ",
											"    pm.expect(jsonData.result.data[i].documentationURL).to.eql(\"\");",
											"});",
											"/*",
											"pm.test(\"Check externalReferences\", function () {  ",
											"    pm.expect(jsonData.result.data[i].externalReferences).to.eql([]);",
											"});",
											"*/",
											"pm.test(\"Check publications\", function () {  ",
											"    pm.expect(jsonData.result.data[i].publications).to.eql([]);",
											"});",
											"",
											"pm.test(\"Check datasetAuthorships\", function () {  ",
											"    pm.expect(jsonData.result.data[i].datasetAuthorships).to.eql([]);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/trials",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"trials"
									]
								},
								"description": "GET ​/{crop}​/brapi​/v2/trials"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when filtered by active status set to true",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Check all active status are equal to input parameter\", function () {",
											"    var jsonData = pm.response.json();",
											"    for (var i = 0; i < jsonData.result.data.length; i++) { ",
											"    pm.expect(jsonData.result.data[i].active).to.eql(true);",
											"    }",
											"});    "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/trials?active=true",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"trials"
									],
									"query": [
										{
											"key": "active",
											"value": "true"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v2/trials"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when filtered by active status set to false",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Check all active status are equal to input parameter\", function () {",
											"    var jsonData = pm.response.json();",
											"    for (var i = 0; i < jsonData.result.data.length; i++) { ",
											"    pm.expect(jsonData.result.data[i].active).to.eql(false);",
											"    }",
											"});    "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/trials?active=false",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"trials"
									],
									"query": [
										{
											"key": "active",
											"value": "false"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v2/trials"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when filtered by commonCropName",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check all commonCropName are equal to input parameter\", function () {",
											"  var jsonData = pm.response.json();",
											"   var i;",
											"    for (i = 0; i < jsonData.result.data.length; i++) { ",
											"    pm.expect(jsonData.result.data[i].commonCropName).to.eql(\"testdata\");",
											"    }",
											"});    ",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/trials?commonCropName={{crop}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"trials"
									],
									"query": [
										{
											"key": "commonCropName",
											"value": "{{crop}}"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v2/trials"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when filtered by programDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check all programDbId are equal to input parameter\", function () {",
											"  var jsonData = pm.response.json();",
											"   var i;",
											"    for (i = 0; i < jsonData.result.data.length; i++) { ",
											"    pm.expect(jsonData.result.data[i].programDbId).to.eql(\"c9e335d2-3057-4958-a43e-e38cf61d09ca\");",
											"    }",
											"});    ",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/trials?programDbId={{api_program_id}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"trials"
									],
									"query": [
										{
											"key": "programDbId",
											"value": "{{api_program_id}}"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v2/trials"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when filtered by locationDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check all trialDbId are equal to the expected trialDbIds filtered by the given locationDbId\", function () {",
											"  var jsonData = pm.response.json();",
											"   var i;",
											"   var trialDbIds = [\"3009\",\"3086\"]",
											"    for (i = 0; i < jsonData.result.data.length; i++) { ",
											"        pm.expect(jsonData.result.data[i].trialDbId).to.eql(trialDbIds[i]);",
											"    }",
											"});    ",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/trials?locationDbId=9001",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"trials"
									],
									"query": [
										{
											"key": "locationDbId",
											"value": "9001"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v2/trials"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when filtered by studyDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check all programDbId are equal to input parameter\", function () {",
											"  var jsonData = pm.response.json();",
											"   var i;",
											"    for (i = 0; i < jsonData.result.data.length; i++) { ",
											"        pm.expect(jsonData.result.data[i].trialDbId).to.eql(\"3009\");",
											"    }",
											"});    ",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/trials?studyDbId=1",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"trials"
									],
									"query": [
										{
											"key": "studyDbId",
											"value": "1"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v2/trials"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when filtered by trialDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check all trialDbId are equal to input parameter\", function () {",
											"  var jsonData = pm.response.json();",
											"   var i;",
											"    for (i = 0; i < jsonData.result.data.length; i++) { ",
											"        pm.expect(jsonData.result.data[i].trialDbId).to.eql(\"3009\");",
											"    }",
											"});    ",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/trials?trialDbId=3009",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"trials"
									],
									"query": [
										{
											"key": "trialDbId",
											"value": "3009"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v2/trials"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when filtered by trialName",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check trialName\", function () {",
											"  var jsonData = pm.response.json();",
											"   var i;",
											"    for (i = 0; i < jsonData.result.data.length; i++) { ",
											"        pm.expect(jsonData.result.data[i].trialName).to.eql(\"Study with Imported Cross Nursery 2018002\");",
											"    }",
											"});    ",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/trials?trialName=Study with Imported Cross Nursery 2018002",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"trials"
									],
									"query": [
										{
											"key": "trialName",
											"value": "Study with Imported Cross Nursery 2018002"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v2/trials"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when filtered by trialPUI",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check trialName\", function () {",
											"  var jsonData = pm.response.json();",
											"   var i;",
											"    for (i = 0; i < jsonData.result.data.length; i++) { ",
											"        pm.expect(jsonData.result.data[i].trialPUI).to.eql(\"PKWDPWPA07x42\");",
											"    }",
											"});    ",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/trials?trialPUI=PKWDPWPA07x42",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"trials"
									],
									"query": [
										{
											"key": "trialPUI",
											"value": "PKWDPWPA07x42"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v2/trials"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when filtered by searchDateRangeEnd",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Check if startDate is before searchDateRangeEnd\", function () {",
											"  var jsonData = pm.response.json();",
											"  var timeStampEndMoment = require('moment');",
											"  var timeStampEnd = timeStampEndMoment(pm.environment.get(\"searchDateRangeEnd\"));",
											"  for (i = 0; i < jsonData.result.data.length ; i++) {",
											"   var returnedTimeStamp = jsonData.result.data[i].startDate",
											"   var returnedTimeStampMoment = require('moment');",
											"   console.log(returnedTimeStamp);",
											"   var isBefore = returnedTimeStampMoment(returnedTimeStamp).isBefore(timeStampEnd);",
											"   pm.expect(isBefore).to.eql(true);",
											"      console.log(isBefore);  ",
											"      }",
											"  ",
											" ",
											"});    ",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/trials?searchDateRangeEnd={{searchDateRangeEnd}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"trials"
									],
									"query": [
										{
											"key": "searchDateRangeEnd",
											"value": "{{searchDateRangeEnd}}"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v2/trials"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when filtered by searchDateRangeStart",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Check if endDate is before searchDateRangeStart\", function () {",
											"  var jsonData = pm.response.json();",
											"  var timeStampStartMoment = require('moment');",
											"  var timeStampStart = timeStampStartMoment(pm.environment.get(\"searchDateRangeStart\"));",
											"  for (i = 0; i < jsonData.result.data.length ; i++) {",
											"   var returnedTimeStamp = jsonData.result.data[i].endDate",
											"   var returnedTimeStampMoment = require('moment');",
											"   console.log(returnedTimeStamp);",
											"   var isAfter = returnedTimeStampMoment(returnedTimeStamp).isAfter(timeStampStart);",
											"   pm.expect(isAfter).to.eql(true);",
											"      console.log(isAfter);  ",
											"      }",
											"  ",
											" ",
											"});    ",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/trials?searchDateRangeStart={{searchDateRangeStart}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"trials"
									],
									"query": [
										{
											"key": "searchDateRangeStart",
											"value": "{{searchDateRangeStart}}"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v2/trials"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered pagination details",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"var i = 0;",
											"",
											"//Check details of a trial in the list are correct",
											"pm.test(\"Check trialDbId\", function () {",
											"  pm.expect(jsonData.result.data[i].trialDbId).to.eql(\"3078\");",
											"});",
											"pm.test(\"Check trialName\", function () {",
											"    pm.expect(jsonData.result.data[i].trialName).to.eql(\"Study for user 6\");",
											"});",
											"",
											"pm.test(\"Check trialDescription\", function () {",
											"    pm.expect(jsonData.result.data[i].trialDescription).to.eql(\"Study for user 6\");",
											"});",
											"",
											"pm.test(\"Check trialPUI \", function () {",
											"    pm.expect(jsonData.result.data[i].trialPUI).to.eql(\"1a184a9c-aeb3-450b-ae4f-74e027b3a061\");",
											"});",
											"",
											"pm.test(\"Check commonCropName \", function () {",
											"    pm.expect(jsonData.result.data[i].commonCropName).to.eql(\"testdata\");",
											"});",
											"pm.test(\"Check programDbId\", function () {",
											"    pm.expect(jsonData.result.data[i].programDbId).to.eql(\"c9e335d2-3057-4958-a43e-e38cf61d09ca\");",
											"});",
											"",
											"pm.test(\"Check programName\", function () {",
											"    pm.expect(jsonData.result.data[i].programName).to.eql(\"API Program\");",
											"});",
											"pm.test(\"Check startDate\", function () {",
											"    pm.expect(jsonData.result.data[i].startDate).to.eql(\"2019-07-18\");",
											"});",
											"/**",
											"pm.test(\"Check endDate\", function () { ",
											"    pm.expect(jsonData.result.data[1].endDate).to.eql(\"2019-02-20\");",
											"});",
											" */",
											"pm.test(\"Check active\", function () {  ",
											"    pm.expect(jsonData.result.data[i].active).to.eql(true);",
											"});",
											"",
											"",
											"//Check contacts",
											"",
											"// pm.test(\"Check contactDbId\", function () {  ",
											"//     pm.expect(jsonData.result.data[i].contacts[0].contactDbId).to.eql(\"1\");",
											"// });",
											"",
											"// pm.test(\"Check email\", function () {  ",
											"//     pm.expect(jsonData.result.data[i].contacts[0].email).to.eql(\"admin1@leafnode.io\");",
											"// });",
											"",
											"// pm.test(\"Check instituteName\", function () {  ",
											"//     pm.expect(jsonData.result.data[i].contacts[0].instituteName).to.eql(\"\");",
											"// });",
											"",
											"// pm.test(\"Check name\", function () {  ",
											"//     pm.expect(jsonData.result.data[i].contacts[0].name).to.eql(\"Admin Admin\");",
											"// });",
											"// pm.test(\"Check type\", function () {  ",
											"//     pm.expect(jsonData.result.data[i].contacts[0].type).to.eql(\"Creator\");",
											"// });",
											"// pm.test(\"Check orcid\", function () {  ",
											"//     pm.expect(jsonData.result.data[i].contacts[0].orcid).to.eql(\"\");",
											"// });",
											"",
											"pm.test(\"Check documentationURL\", function () {  ",
											"    pm.expect(jsonData.result.data[i].documentationURL).to.eql(\"\");",
											"});",
											"/*",
											"pm.test(\"Check externalReferences\", function () {  ",
											"    pm.expect(jsonData.result.data[i].externalReferences).to.eql([]);",
											"});",
											"*/",
											"pm.test(\"Check publications\", function () {  ",
											"    pm.expect(jsonData.result.data[i].publications).to.eql([]);",
											"});",
											"",
											"pm.test(\"Check datasetAuthorships\", function () {  ",
											"    pm.expect(jsonData.result.data[i].datasetAuthorships).to.eql([]);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/trials?page=2&pageSize=5",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"trials"
									],
									"query": [
										{
											"key": "page",
											"value": "2"
										},
										{
											"key": "pageSize",
											"value": "5"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v2/trials"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered page number that does not exist for the given pageSize",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Check error message\", function () {",
											"  pm.expect(jsonData.errors[0].message).to.eql(\"A total of 1 pages are available, so the page number must between 0 and 1 (exclusive).\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/trials?page=10000&pageSize=10000",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"trials"
									],
									"query": [
										{
											"key": "page",
											"value": "10000"
										},
										{
											"key": "pageSize",
											"value": "10000"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v2/trials"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered pageSize value greater than max pageSize in the system",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Check error message\", function () {",
											"  pm.expect(jsonData.errors[0].message).to.eql(\"Page size must between 1 and 10000.\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/trials?page=0&pageSize=10001",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"trials"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "10001"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v2/trials"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when sorted by trialDbId in asc order",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Check if first trialDbId is less than next trialDbId\", function () {",
											"   ",
											"  ",
											"    var jsonData = pm.response.json();",
											"    var data = jsonData.result.data;",
											"    var i;",
											"    for (i = 0; i+1 < data.length ; i++) { ",
											"      pm.expect(parseInt(data[i+1].trialDbId)).to.be.above(parseInt(data[i].trialDbId));",
											"        ",
											"   }",
											" ",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/trials?sortBy=trialDbId&sortOrder=asc",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"trials"
									],
									"query": [
										{
											"key": "sortBy",
											"value": "trialDbId"
										},
										{
											"key": "sortOrder",
											"value": "asc"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v2/trials"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when sorted by trialDbId in desc order",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check if first trialDbId is greater than next trialDbId\", function () {",
											"    var jsonData = pm.response.json();",
											"    var data = jsonData.result.data;",
											"    var i;",
											"    for (i = 0; i+1 < data.length ; i++) { ",
											"      pm.expect(parseInt(data[i].trialDbId)).to.be.above(parseInt(data[i+1].trialDbId));",
											"   ",
											"   }",
											" ",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/trials?sortBy=trialDbId&sortOrder=desc",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"trials"
									],
									"query": [
										{
											"key": "sortBy",
											"value": "trialDbId"
										},
										{
											"key": "sortOrder",
											"value": "desc"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v2/trials"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when sorted by trialName in asc order",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"var _ = require('lodash');",
											"var itemsArray = jsonData.result.data;",
											"",
											"pm.test('Check if trialName is in sorted order', () => {",
											"    var expectedSortedOrder = _.orderBy(itemsArray, ['data.trialName'],['asc']);",
											"   pm.expect(itemsArray).to.eql(expectedSortedOrder);    ",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/trials?sortBy=trialName&sortOrder=asc",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"trials"
									],
									"query": [
										{
											"key": "sortBy",
											"value": "trialName"
										},
										{
											"key": "sortOrder",
											"value": "asc"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v2/trials"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when sorted by trialName in desc order",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"var _ = require('lodash');",
											"var itemsArray = jsonData.result.data;",
											"",
											"pm.test('Check if trialName is in sorted order', () => {",
											"    var expectedSortedOrder = _.orderBy(itemsArray, ['data.trialName'],['desc']);",
											"   pm.expect(itemsArray).to.eql(expectedSortedOrder);    ",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/trials?sortBy=trialName&sortOrder=desc",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"trials"
									],
									"query": [
										{
											"key": "sortBy",
											"value": "trialName"
										},
										{
											"key": "sortOrder",
											"value": "desc"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v2/trials"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when sorted by programDbId in asc order",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"var _ = require('lodash');",
											"var itemsArray = jsonData.result.data;",
											"",
											"pm.test('Check if programDbId is in sorted order', () => {",
											"    var expectedSortedOrder = _.orderBy(itemsArray, ['data.programDbId'],['asc']);",
											"   pm.expect(itemsArray).to.eql(expectedSortedOrder);    ",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/trials?sortBy=programDbId&sortOrder=asc",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"trials"
									],
									"query": [
										{
											"key": "sortBy",
											"value": "programDbId"
										},
										{
											"key": "sortOrder",
											"value": "asc"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v2/trials"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when sorted by programDbId in desc order",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"var _ = require('lodash');",
											"var itemsArray = jsonData.result.data;",
											"",
											"pm.test('Check if programDbId is in sorted order', () => {",
											"    var expectedSortedOrder = _.orderBy(itemsArray, ['data.programDbId'],['desc']);",
											"   pm.expect(itemsArray).to.eql(expectedSortedOrder);    ",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/trials?sortBy=programDbId&sortOrder=desc",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"trials"
									],
									"query": [
										{
											"key": "sortBy",
											"value": "programDbId"
										},
										{
											"key": "sortOrder",
											"value": "desc"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v2/trials"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when sorted by programName in asc order",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"var _ = require('lodash');",
											"var itemsArray = jsonData.result.data;",
											"",
											"pm.test('Check if programName is in sorted order', () => {",
											"    var expectedSortedOrder = _.orderBy(itemsArray, ['data.programName'],['asc']);",
											"   pm.expect(itemsArray).to.eql(expectedSortedOrder);    ",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/trials?sortBy=programName&sortOrder=asc",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"trials"
									],
									"query": [
										{
											"key": "sortBy",
											"value": "programName"
										},
										{
											"key": "sortOrder",
											"value": "asc"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v2/trials"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when sorted by programName in desc order",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"var _ = require('lodash');",
											"var itemsArray = jsonData.result.data;",
											"",
											"pm.test('Check if programName is in sorted order', () => {",
											"    var expectedSortedOrder = _.orderBy(itemsArray, ['data.programName'],['desc']);",
											"   pm.expect(itemsArray).to.eql(expectedSortedOrder);    ",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/trials?sortBy=programName&sortOrder=desc",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"trials"
									],
									"query": [
										{
											"key": "sortBy",
											"value": "programName"
										},
										{
											"key": "sortOrder",
											"value": "desc"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v2/trials"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when sorted by locationDbId in asc order",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Check if next locationDbId is greater or equal to previous locationDbId\", function () {",
											"  ",
											"    var jsonData = pm.response.json();",
											"    var data = jsonData.result.data;",
											"    var i;",
											"    var proceed = true",
											"    for (i = 0; i+1 < data.length ; i++) {",
											"        ",
											"           if((parseInt(data[i+1].locationDbId)) >= (parseInt(data[i].locationDbId))){",
											"               proceed = true;",
											"             ",
											"           }else{",
											"              proceed = false;",
											"     }",
											"   }",
											"       pm.expect(proceed).to.eql(true);   ",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/trials?sortBy=locationDbId&sortOrder=asc",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"trials"
									],
									"query": [
										{
											"key": "sortBy",
											"value": "locationDbId"
										},
										{
											"key": "sortOrder",
											"value": "asc"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v2/trials"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when sorted by locationDbId in desc order",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check if next locationDbId is less than or equal to previous locationDbId\", function () {",
											"  ",
											"    var jsonData = pm.response.json();",
											"    var data = jsonData.result.data;",
											"    var i;",
											"    var proceed = true",
											"    for (i = 0; i+1 < data.length ; i++) {",
											"        ",
											"           if((parseInt(data[i+1].locationDbId)) <= (parseInt(data[i].locationDbId))){",
											"               proceed = true;",
											"              console.log(data[i+1].locationDbId + \" is less than/equal \" +data[i].locationDbId);",
											"           }else{",
											"              proceed = false;",
											"     }",
											"   }",
											"       pm.expect(proceed).to.eql(true);   ",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/trials?sortBy=locationDbId&sortOrder=desc",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"trials"
									],
									"query": [
										{
											"key": "sortBy",
											"value": "locationDbId"
										},
										{
											"key": "sortOrder",
											"value": "desc"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v2/trials"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid commonCropName",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Check error message\", function () {",
											"  var jsonData = pm.response.json();",
											"  pm.expect(jsonData.metadata.status[0].message).to.eql(\"Invalid commonCropName value\");",
											"});    ",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/trials?commonCropName=invalid",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"trials"
									],
									"query": [
										{
											"key": "commonCropName",
											"value": "invalid"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v1​/trials"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid programDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"var i = 1;",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											"    pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											"    pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											"    pm.expect(jsonData.metadata.pagination.totalCount).to.eql(0);",
											"    pm.expect(jsonData.metadata.pagination.totalPages).to.eql(0);",
											"    pm.expect(jsonData.metadata.status).to.eql([]);",
											"    pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Verify returned result\", function () {",
											"    pm.expect(jsonData.result.data).to.eql([]);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/trials?programDbId=invalid",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"trials"
									],
									"query": [
										{
											"key": "programDbId",
											"value": "invalid"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v1​/trials"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid locationDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"var i = 1;",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											"    pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											"    pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											"    pm.expect(jsonData.metadata.pagination.totalCount).to.eql(0);",
											"    pm.expect(jsonData.metadata.pagination.totalPages).to.eql(0);",
											"    pm.expect(jsonData.metadata.status).to.eql([]);",
											"    pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Verify returned result\", function () {",
											"    pm.expect(jsonData.result.data).to.eql([]);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/trials?locationDbId=invalid",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"trials"
									],
									"query": [
										{
											"key": "locationDbId",
											"value": "invalid"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v1​/trials"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid studyDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"var i = 1;",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											"    pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											"    pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											"    pm.expect(jsonData.metadata.pagination.totalCount).to.eql(0);",
											"    pm.expect(jsonData.metadata.pagination.totalPages).to.eql(0);",
											"    pm.expect(jsonData.metadata.status).to.eql([]);",
											"    pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Verify returned result\", function () {",
											"    pm.expect(jsonData.result.data).to.eql([]);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/trials?studyDbId=invalid",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"trials"
									],
									"query": [
										{
											"key": "studyDbId",
											"value": "invalid"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v1​/trials"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid trialDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"var i = 1;",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											"    pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											"    pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											"    pm.expect(jsonData.metadata.pagination.totalCount).to.eql(0);",
											"    pm.expect(jsonData.metadata.pagination.totalPages).to.eql(0);",
											"    pm.expect(jsonData.metadata.status).to.eql([]);",
											"    pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Verify returned result\", function () {",
											"    pm.expect(jsonData.result.data).to.eql([]);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/trials?trialDbId=invalid",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"trials"
									],
									"query": [
										{
											"key": "trialDbId",
											"value": "invalid"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v1​/trials"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid trialName",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"var i = 1;",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											"    pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											"    pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											"    pm.expect(jsonData.metadata.pagination.totalCount).to.eql(0);",
											"    pm.expect(jsonData.metadata.pagination.totalPages).to.eql(0);",
											"    pm.expect(jsonData.metadata.status).to.eql([]);",
											"    pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Verify returned result\", function () {",
											"    pm.expect(jsonData.result.data).to.eql([]);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/trials?trialDbId=invalid",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"trials"
									],
									"query": [
										{
											"key": "trialDbId",
											"value": "invalid"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v1​/trials"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid trialPUI",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"var i = 1;",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											"    pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											"    pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											"    pm.expect(jsonData.metadata.pagination.totalCount).to.eql(0);",
											"    pm.expect(jsonData.metadata.pagination.totalPages).to.eql(0);",
											"    pm.expect(jsonData.metadata.status).to.eql([]);",
											"    pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Verify returned result\", function () {",
											"    pm.expect(jsonData.result.data).to.eql([]);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/trials?trialPUI=invalid",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"trials"
									],
									"query": [
										{
											"key": "trialPUI",
											"value": "invalid"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v1​/trials"
							},
							"response": []
						}
					]
				},
				{
					"name": "GET ​/{crop}​/brapi​/v1​/trials​/{trialDbId}​/table",
					"item": [
						{
							"name": "Verify response code and body when entered valid trialDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"pm.test(\"Check if trialDbId is correct\", function () {",
											"    pm.expect(jsonData.result.trialDbId).to.eql(JSON.parse(pm.environment.get(\"studyId\")));",
											"});",
											"",
											"",
											"pm.test(\"Check if header rows are correct\", function () {",
											"    var headerRows = [",
											"            \"year\",",
											"            \"studyDbId\",",
											"            \"studyName\",",
											"            \"locationDbId\",",
											"            \"locationName\",",
											"            \"germplasmDbId\",",
											"            \"germplasmName\",",
											"            \"observationUnitDbId\",",
											"            \"plotNumber\",",
											"            \"replicate\",",
											"            \"blockNumber\",",
											"            \"observationTimestamp\",",
											"            \"entryType\",",
											"            \"X\",",
											"            \"Y\",",
											"            \"obsUnitId\"",
											"    ];",
											"   for (var i = 0; i < jsonData.result.headerRow.length; i++) {",
											"    pm.expect(jsonData.result.headerRow[i]).to.eql(headerRows[i]);",
											"    }",
											"});",
											"pm.test(\"Check if observationVariableDbIds are correct\", function () {",
											"   var observationVariableDbIds = [18000,18010,18100,100020];",
											"   for (var i = 0; i < jsonData.result.observationVariableDbIds.length; i++) {",
											"    pm.expect(jsonData.result.observationVariableDbIds[i]).to.eql(observationVariableDbIds[i]);",
											"    }",
											"});",
											"",
											"pm.test(\"Check if observationVariableNames are correct\", function () {",
											"   var observationVariableNames = [",
											"       \"Grain_yield\",",
											"       \"Biomas_yield\",",
											"       \"WeedPressure_number\",",
											"       \"InputVariable\"",
											"       ];",
											"   for (var i = 0; i < jsonData.result.observationVariableNames.length; i++) {",
											"    pm.expect(jsonData.result.observationVariableNames[i]).to.eql(observationVariableNames[i]);",
											"    }",
											"});",
											"",
											"//Verify details of first observation row",
											"var index = 0;",
											"pm.test(\"Check year\", function () {",
											"    pm.expect(jsonData.result.data[index][0]).to.eql(\"2018\");",
											"});",
											"pm.test(\"Check studyDbId\", function () {",
											"    pm.expect(jsonData.result.data[index][1]).to.eql(\"1\");",
											"});",
											"pm.test(\"Check studyName\", function () {",
											"    pm.expect(jsonData.result.data[index][2]).to.eql(\"Study with Imported Cross Nursery 2018002 Environment Number 1\");",
											"});",
											"pm.test(\"Check locationDbId\", function () {",
											"    pm.expect(jsonData.result.data[index][3]).to.eql(\"9001\");",
											"});",
											"pm.test(\"Check locationName\", function () {",
											"    pm.expect(jsonData.result.data[index][4]).to.eql(\"Africa Rice Centre\");",
											"",
											"});",
											"pm.test(\"Check germplasmDbId\", function () {",
											"    pm.expect(jsonData.result.data[index][5]).to.eql(\"PKWDG4387f106\");",
											"});",
											"pm.test(\"Check germplasmName\", function () {",
											"    pm.expect(jsonData.result.data[index][6]).to.eql(\"GP8\");",
											"});",
											"pm.test(\"Check observationUnitDbId\", function () {",
											"    pm.expect(jsonData.result.data[index][7]).to.eql(\"509\");",
											"});",
											"pm.test(\"Check plotNumber\", function () {",
											"    pm.expect(jsonData.result.data[index][8]).to.eql(\"8\");",
											"});",
											"pm.test(\"Check replicate\", function () {",
											"    pm.expect(jsonData.result.data[index][9]).to.eql(null);",
											"});",
											"pm.test(\"Check blockNumber\", function () {",
											"    pm.expect(jsonData.result.data[index][10]).to.eql(null);",
											"});",
											"pm.test(\"Check observationTimestamp\", function () {",
											"    pm.expect(jsonData.result.data[index][11]).to.eql(\"UnknownTimestamp\");",
											"});",
											"pm.test(\"Check entryType\", function () {",
											"    pm.expect(jsonData.result.data[index][12]).to.eql(\"Test entry\");",
											"});",
											"pm.test(\"Check X\", function () {",
											"    pm.expect(jsonData.result.data[index][13]).to.eql(\"null\");",
											"});",
											"pm.test(\"Check Y\", function () {",
											"    pm.expect(jsonData.result.data[index][14]).to.eql(\"null\");",
											"});",
											"pm.test(\"Check obsUnitId\", function () {",
											"    pm.expect(jsonData.result.data[index][15]).to.eql(\"PKWDPsCKr80ks\");",
											"});",
											"pm.test(\"Check observationVariableDbId1\", function () {",
											"    pm.expect(jsonData.result.data[index][16]).to.eql(\"28\");",
											"});",
											"pm.test(\"Check observationVariableDbIds2\", function () {",
											"    pm.expect(jsonData.result.data[index][17]).to.eql(\"15\");",
											"});",
											"pm.test(\"Check observationVariableDbIds3\", function () {",
											"    pm.expect(jsonData.result.data[index][18]).to.eql(\"17\");",
											"});",
											"pm.test(\"Check observationVariableDbIds4\", function () {",
											"    pm.expect(jsonData.result.data[index][19]).to.eql(null);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/trials/{{studyId}}/table",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"trials",
										"{{studyId}}",
										"table"
									]
								},
								"description": "GET​/{crop}​/brapi​/v1​/trials​/{trialDbId}​/table"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid trialDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/trials/{{non_existing_study_id}}/table",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"trials",
										"{{non_existing_study_id}}",
										"table"
									]
								},
								"description": "GET​/{crop}​/brapi​/v1​/trials​/{trialDbId}​/table"
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "breeding-method-resource-brapi",
			"item": [
				{
					"name": "GET ​/{crop}​/brapi​/v2​/breedingmethods",
					"item": [
						{
							"name": "Verify response code and body when entered valid crop",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"var data = jsonData.result.data[0];",
											"pm.test(\"Verify returned metadata\", function () {",
											"    pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											"    pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											"    pm.expect(jsonData.metadata.pagination.totalCount).to.eql(132);",
											"    pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											"    pm.expect(jsonData.metadata.status).to.eql([]);",
											"    pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Check abbreviation \", function () {",
											"    pm.expect(data.abbreviation).to.eql(\"AGB1\");",
											"});",
											"",
											"pm.test(\"Check breedingMethodDbId \", function () {",
											"    pm.expect(data.breedingMethodDbId).to.eql(\"70\");",
											"});",
											"",
											"pm.test(\"Check breedingMethodName \", function () {",
											"    pm.expect(data.breedingMethodName).to.eql(\"Accession into genebank\");",
											"});",
											"",
											"pm.test(\"Check description \", function () {",
											"    pm.expect(data.description).to.eql(\"GID represents a sample accessed into a formal genebank collection\");",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/breedingmethods",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"breedingmethods"
									]
								},
								"description": "GET ​/{crop}​/brapi​/v2​/breedingmethods"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid crop",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function() {",
											"    pm.response.to.have.status(400);",
											"});",
											"var jsonData = pm.response.json();",
											"pm.test(\"Check error message\", function () {",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Invalid crop invalid for URL:/invalid/brapi/v2/breedingmethods\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/invalid/brapi/v2/breedingmethods",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"invalid",
										"brapi",
										"v2",
										"breedingmethods"
									]
								},
								"description": "GET ​/{crop}​/brapi​/v2​/breedingmethods"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered valid pagination details",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"var data = jsonData.result.data[0];",
											"pm.test(\"Verify returned metadata\", function () {",
											"    pm.expect(jsonData.metadata.pagination.currentPage).to.eql(2);",
											"    pm.expect(jsonData.metadata.pagination.pageSize).to.eql(5);",
											"    pm.expect(jsonData.metadata.pagination.totalCount).to.eql(132);",
											"    pm.expect(jsonData.metadata.pagination.totalPages).to.eql(27);",
											"    pm.expect(jsonData.metadata.status).to.eql([]);",
											"    pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"//Verify details of first record on results",
											"pm.test(\"Check abbreviation \", function () {",
											"    pm.expect(data.abbreviation).to.eql(\"VCF\");",
											"});",
											"",
											"pm.test(\"Check breedingMethodDbId \", function () {",
											"    pm.expect(data.breedingMethodDbId).to.eql(\"921\");",
											"});",
											"",
											"pm.test(\"Check breedingMethodName \", function () {",
											"    pm.expect(data.breedingMethodName).to.eql(\"Clone formation\");",
											"});",
											"",
											"pm.test(\"Check description \", function () {",
											"    pm.expect(data.description).to.eql(\"Formation of a clone as a cultivar.\");",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/breedingmethods?page=2&pageSize=5",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"breedingmethods"
									],
									"query": [
										{
											"key": "page",
											"value": "2"
										},
										{
											"key": "pageSize",
											"value": "5"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v2​/breedingmethods"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered pageSize greater than max",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"",
											"pm.test(\"Verify returned error message\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.errors[0].message).to.eql(\"Page size must between 1 and 10000.\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/breedingmethods?page=0&pageSize=10001",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"breedingmethods"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "10001"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v2​/breedingmethods"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered page number that does not exist for the given pageSize",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Check error message\", function () {",
											"  pm.expect(jsonData.errors[0].message).to.eql(\"A total of 1 pages are available, so the page number must between 0 and 1 (exclusive).\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/breedingmethods?page=10000&pageSize=10000",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"breedingmethods"
									],
									"query": [
										{
											"key": "page",
											"value": "10000"
										},
										{
											"key": "pageSize",
											"value": "10000"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v2​/breedingmethods"
							},
							"response": []
						}
					]
				},
				{
					"name": "GET ​/{crop}​/brapi​/v2​/breedingmethods​/{breedingMethodDbId}",
					"item": [
						{
							"name": "Verify response code and body when entered valid crop and breedingMethodDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"pm.test(\"Verify returned metadata\", function () {",
											"    pm.expect(jsonData.metadata.pagination.currentPage).to.eql(1);",
											"    pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1);",
											"    pm.expect(jsonData.metadata.pagination.totalCount).to.eql(1);",
											"    pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											"    pm.expect(jsonData.metadata.status).to.eql([]);",
											"    pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Check abbreviation \", function () {",
											"    pm.expect(jsonData.result.abbreviation).to.eql(\"AGB1\");",
											"});",
											"",
											"pm.test(\"Check breedingMethodDbId \", function () {",
											"    pm.expect(jsonData.result.breedingMethodDbId).to.eql(\"70\");",
											"});",
											"",
											"pm.test(\"Check breedingMethodName \", function () {",
											"    pm.expect(jsonData.result.breedingMethodName).to.eql(\"Accession into genebank\");",
											"});",
											"",
											"pm.test(\"Check description \", function () {",
											"    pm.expect(jsonData.result.description).to.eql(\"GID represents a sample accessed into a formal genebank collection\");",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/breedingmethods/70",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"breedingmethods",
										"70"
									]
								},
								"description": "GET ​/{crop}​/brapi​/v2​/breedingmethods"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid crop",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function() {",
											"    pm.response.to.have.status(400);",
											"});",
											"var jsonData = pm.response.json();",
											"pm.test(\"Check error message\", function () {",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Invalid crop invalid for URL:/invalid/brapi/v2/breedingmethods/70\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/invalid/brapi/v2/breedingmethods/70",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"invalid",
										"brapi",
										"v2",
										"breedingmethods",
										"70"
									]
								},
								"description": "GET ​/{crop}​/brapi​/v2​/breedingmethods"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered non-existing breedingMethodDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function() {",
											"    pm.response.to.have.status(400);",
											"});",
											"var jsonData = pm.response.json();",
											"pm.test(\"Check error message\", function () {",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Breeding Method DbId does not exist\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/breedingmethods/99999",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"breedingmethods",
										"99999"
									]
								},
								"description": "GET ​/{crop}​/brapi​/v2​/breedingmethods"
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "serverinfo-resource-brapi",
			"item": [
				{
					"name": "GET ​/{crop}​/brapi​/v2​/serverinfo",
					"item": [
						{
							"name": "Verify response code and body when no dataType selected",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Verify returned metadata\", function () {",
											"    pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											"    pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											"    pm.expect(jsonData.metadata.pagination.totalCount).to.eql(24);",
											"    pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											"    pm.expect(jsonData.metadata.status).to.eql([]);",
											"    pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Check locations call\", function () {",
											"    var index = 0;",
											"    var selectedData = jsonData.result.calls[index];",
											"    pm.expect(selectedData.service).to.eql(\"locations\");",
											"    pm.expect(selectedData.dataTypes).to.eql(['application/json']);",
											"    pm.expect(selectedData.methods).to.eql(['GET'])",
											"    pm.expect(selectedData.versions).to.eql([",
											"                    \"2.0\"",
											"                ]);",
											"});",
											"pm.test(\"Check programs call\", function () {",
											"    var index = 1;",
											"    var selectedData = jsonData.result.calls[index];",
											"    pm.expect(selectedData.service).to.eql(\"programs\");",
											"    pm.expect(selectedData.dataTypes).to.eql(['application/json']);",
											"    pm.expect(selectedData.methods).to.eql(['GET'])",
											"    pm.expect(selectedData.versions).to.eql([",
											"                    \"2.0\"",
											"                ]);",
											"});",
											"",
											"pm.test(\"Check studies call\", function () {",
											"    var index = 2;",
											"    var selectedData = jsonData.result.calls[index];",
											"    pm.expect(selectedData.service).to.eql(\"studies\");",
											"    pm.expect(selectedData.dataTypes).to.eql(['application/json']);",
											"    pm.expect(selectedData.methods).to.eql(['GET','POST'])",
											"    pm.expect(selectedData.versions).to.eql([",
											"                    \"2.0\"",
											"                ]);",
											"});",
											"",
											"pm.test(\"Check studies/{studyDbId} call\", function () {",
											"    var index = 3;",
											"    var selectedData = jsonData.result.calls[index];",
											"    pm.expect(selectedData.service).to.eql(\"studies/{studyDbId}\");",
											"    pm.expect(selectedData.dataTypes).to.eql(['application/json']);",
											"    pm.expect(selectedData.methods).to.eql(['GET'])",
											"    pm.expect(selectedData.versions).to.eql([",
											"                    \"2.0\"",
											"                ]);",
											"});",
											"",
											"pm.test(\"Check trials call\", function () {",
											"    var index = 4;",
											"    var selectedData = jsonData.result.calls[index];",
											"    pm.expect(selectedData.service).to.eql(\"trials\");",
											"    pm.expect(selectedData.dataTypes).to.eql(['application/json']);",
											"    pm.expect(selectedData.methods).to.eql(['GET','POST'])",
											"    pm.expect(selectedData.versions).to.eql([",
											"                    \"2.0\"",
											"                ]);",
											"});",
											"pm.test(\"Check observationunits call\", function () {",
											"    var index = 5;",
											"    var selectedData = jsonData.result.calls[index];",
											"    pm.expect(selectedData.service).to.eql(\"observationunits\");",
											"    pm.expect(selectedData.dataTypes).to.eql(['application/json']);",
											"    pm.expect(selectedData.methods).to.eql(['POST'])",
											"    pm.expect(selectedData.versions).to.eql([",
											"                    \"2.0\"",
											"                ]);",
											"});",
											"",
											"pm.test(\"Check search/observationunits call\", function () {",
											"    var index = 6;",
											"    var selectedData = jsonData.result.calls[index];",
											"    pm.expect(selectedData.service).to.eql(\"search/observationunits\");",
											"    pm.expect(selectedData.dataTypes).to.eql(['application/json']);",
											"    pm.expect(selectedData.methods).to.eql(['POST'])",
											"    pm.expect(selectedData.versions).to.eql([",
											"                    \"2.0\"",
											"                ]);",
											"});",
											"pm.test(\"Check search/observationunits/{searchResultsDbId} call\", function () {",
											"    var index = 7;",
											"    var selectedData = jsonData.result.calls[index];",
											"    pm.expect(selectedData.service).to.eql(\"search/observationunits/{searchResultsDbId}\");",
											"    pm.expect(selectedData.dataTypes).to.eql(['application/json']);",
											"    pm.expect(selectedData.methods).to.eql(['GET'])",
											"    pm.expect(selectedData.versions).to.eql([",
											"                    \"2.0\"",
											"                ]);",
											"});",
											"",
											"pm.test(\"Check seedlots call\", function () {",
											"    var index = 8;",
											"    var selectedData = jsonData.result.calls[index];",
											"    pm.expect(selectedData.service).to.eql(\"seedlots\");",
											"    pm.expect(selectedData.dataTypes).to.eql(['application/json']);",
											"    pm.expect(selectedData.methods).to.eql(['GET'])",
											"    pm.expect(selectedData.versions).to.eql([",
											"                    \"2.0\"",
											"                ]);",
											"});",
											"pm.test(\"Check seedlots/transactions call\", function () {",
											"    var index = 9;",
											"    var selectedData = jsonData.result.calls[index];",
											"    pm.expect(selectedData.service).to.eql(\"seedlots/transactions\");",
											"    pm.expect(selectedData.dataTypes).to.eql(['application/json']);",
											"    pm.expect(selectedData.methods).to.eql(['GET'])",
											"    pm.expect(selectedData.versions).to.eql([",
											"                    \"2.0\"",
											"                ]);",
											"});",
											"pm.test(\"Check breedingmethods call\", function () {",
											"    var index = 10;",
											"    var selectedData = jsonData.result.calls[index];",
											"    pm.expect(selectedData.service).to.eql(\"breedingmethods\");",
											"    pm.expect(selectedData.dataTypes).to.eql(['application/json']);",
											"    pm.expect(selectedData.methods).to.eql(['GET'])",
											"    pm.expect(selectedData.versions).to.eql([",
											"                    \"2.0\"",
											"                ]);",
											"});",
											"",
											"pm.test(\"Check breedingmethods/{breedingMethodDbId} call\", function () {",
											"    var index = 11;",
											"    var selectedData = jsonData.result.calls[index];",
											"    pm.expect(selectedData.service).to.eql(\"breedingmethods/{breedingMethodDbId}\");",
											"    pm.expect(selectedData.dataTypes).to.eql(['application/json']);",
											"    pm.expect(selectedData.methods).to.eql(['GET'])",
											"    pm.expect(selectedData.versions).to.eql([",
											"                    \"2.0\"",
											"                ]);",
											"});",
											"",
											"pm.test(\"Check germplasm call\", function () {",
											"    var index = 12;",
											"    var selectedData = jsonData.result.calls[index];",
											"    pm.expect(selectedData.service).to.eql(\"germplasm\");",
											"    pm.expect(selectedData.dataTypes).to.eql(['application/json']);",
											"    pm.expect(selectedData.methods).to.eql([ 'GET', 'POST', 'PUT' ] )",
											"    pm.expect(selectedData.versions).to.eql([",
											"                    \"2.0\"",
											"                ]);",
											"});",
											"pm.test(\"Check search/germplasm call\", function () {",
											"    var index = 13;",
											"    var selectedData = jsonData.result.calls[index];",
											"    pm.expect(selectedData.service).to.eql(\"search/germplasm\");",
											"    pm.expect(selectedData.dataTypes).to.eql(['application/json']);",
											"    pm.expect(selectedData.methods).to.eql([ 'POST'] )",
											"    pm.expect(selectedData.versions).to.eql([",
											"                    \"2.0\"",
											"                ]);",
											"});",
											"pm.test(\"Check search/germplasm/{searchResultsDbId} call\", function () {",
											"    var index = 14;",
											"    var selectedData = jsonData.result.calls[index];",
											"    pm.expect(selectedData.service).to.eql(\"search/germplasm/{searchResultsDbId}\");",
											"    pm.expect(selectedData.dataTypes).to.eql(['application/json']);",
											"    pm.expect(selectedData.methods).to.eql([ 'GET'] )",
											"    pm.expect(selectedData.versions).to.eql([",
											"                    \"2.0\"",
											"                ]);",
											"});",
											"pm.test(\"Check samples call\", function () {",
											"    var index = 15;",
											"    var selectedData = jsonData.result.calls[index];",
											"    pm.expect(selectedData.service).to.eql(\"samples\");",
											"    pm.expect(selectedData.dataTypes).to.eql(['application/json']);",
											"    pm.expect(selectedData.methods).to.eql([ 'GET'] )",
											"    pm.expect(selectedData.versions).to.eql([",
											"                    \"2.0\"",
											"                ]);",
											"});",
											"pm.test(\"Check samples/{sampleDbId} call\", function () {",
											"    var index = 16;",
											"    var selectedData = jsonData.result.calls[index];",
											"    pm.expect(selectedData.service).to.eql(\"samples/{sampleDbId}\");",
											"    pm.expect(selectedData.dataTypes).to.eql(['application/json']);",
											"    pm.expect(selectedData.methods).to.eql([ 'GET'] )",
											"    pm.expect(selectedData.versions).to.eql([",
											"                    \"2.0\"",
											"                ]);",
											"});",
											"",
											"",
											"pm.test(\"Check search/samples call\", function () {",
											"    var index = 17;",
											"    var selectedData = jsonData.result.calls[index];",
											"    pm.expect(selectedData.service).to.eql(\"search/samples\");",
											"    pm.expect(selectedData.dataTypes).to.eql(['application/json']);",
											"    pm.expect(selectedData.methods).to.eql([ 'POST'] )",
											"    pm.expect(selectedData.versions).to.eql([",
											"                    \"2.0\"",
											"                ]);",
											"});",
											"",
											"pm.test(\"Check search/samples/{searchResultsDbId} call\", function () {",
											"    var index = 18;",
											"    var selectedData = jsonData.result.calls[index];",
											"    pm.expect(selectedData.service).to.eql(\"search/samples/{searchResultsDbId}\");",
											"    pm.expect(selectedData.dataTypes).to.eql(['application/json']);",
											"    pm.expect(selectedData.methods).to.eql([ 'GET'] )",
											"    pm.expect(selectedData.versions).to.eql([",
											"                    \"2.0\"",
											"                ]);",
											"});",
											"pm.test(\"Check variables call\", function () {",
											"    var index = 19;",
											"    var selectedData = jsonData.result.calls[index];",
											"    pm.expect(selectedData.service).to.eql(\"variables\");",
											"    pm.expect(selectedData.dataTypes).to.eql(['application/json']);",
											"    pm.expect(selectedData.methods).to.eql([ 'GET'] )",
											"    pm.expect(selectedData.versions).to.eql([",
											"                    \"2.0\"",
											"                ]);",
											"});",
											"pm.test(\"Check search/variables call\", function () {",
											"    var index = 20;",
											"    var selectedData = jsonData.result.calls[index];",
											"    pm.expect(selectedData.service).to.eql(\"search/variables\");",
											"    pm.expect(selectedData.dataTypes).to.eql(['application/json']);",
											"    pm.expect(selectedData.methods).to.eql([ 'POST'] )",
											"    pm.expect(selectedData.versions).to.eql([",
											"                    \"2.0\"",
											"                ]);",
											"});",
											"pm.test(\"Check search/variables/{searchResultsDbId} call\", function () {",
											"    var index = 21;",
											"    var selectedData = jsonData.result.calls[index];",
											"    pm.expect(selectedData.service).to.eql(\"search/variables/{searchResultsDbId}\");",
											"    pm.expect(selectedData.dataTypes).to.eql(['application/json']);",
											"    pm.expect(selectedData.methods).to.eql([ 'GET'] )",
											"    pm.expect(selectedData.versions).to.eql([",
											"                    \"2.0\"",
											"                ]);",
											"});",
											"pm.test(\"Check observations call\", function () {",
											"    var index = 22;",
											"    var selectedData = jsonData.result.calls[index];",
											"    pm.expect(selectedData.service).to.eql(\"observations\");",
											"    pm.expect(selectedData.dataTypes).to.eql(['application/json']);",
											"    pm.expect(selectedData.methods).to.eql([ 'GET','POST'] )",
											"    pm.expect(selectedData.versions).to.eql([",
											"                    \"2.0\"",
											"                ]);",
											"});",
											"pm.test(\"Check variables call\", function () {",
											"    var index = 23;",
											"    var selectedData = jsonData.result.calls[index];",
											"    pm.expect(selectedData.service).to.eql(\"variables\");",
											"    pm.expect(selectedData.dataTypes).to.eql(['application/json']);",
											"    pm.expect(selectedData.methods).to.eql([ 'PUT'] )",
											"    pm.expect(selectedData.versions).to.eql([",
											"                    \"2.1\"",
											"                ]);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/serverinfo",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"serverinfo"
									]
								},
								"description": "GET ​/{crop}​/brapi​/v2​/breedingmethods"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when filtered by application/json dataType",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Verify returned metadata\", function () {",
											"    pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											"    pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											"    pm.expect(jsonData.metadata.pagination.totalCount).to.eql(24);",
											"    pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											"    pm.expect(jsonData.metadata.status).to.eql([]);",
											"    pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Check if application/json exists from dataTypes\", function () {",
											"    var i;",
											"    for (i = 0; i < jsonData.result.calls.length; i++){",
											"        pm.expect(jsonData.result.calls[i].dataTypes).contains(\"application/json\");",
											"    }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/serverinfo?dataType=application/json",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"serverinfo"
									],
									"query": [
										{
											"key": "dataType",
											"value": "application/json"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v2​/breedingmethods"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when filtered by text/csv dataType",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Verify returned metadata\", function () {",
											"    pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											"    pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											"    pm.expect(jsonData.metadata.pagination.totalCount).to.eql(0);",
											"    pm.expect(jsonData.metadata.pagination.totalPages).to.eql(0);",
											"    pm.expect(jsonData.metadata.status).to.eql([]);",
											"    pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Check if calls is empty\", function () {",
											"    pm.expect(jsonData.result.calls).to.eql([]);",
											"});",
											"/** Uncomment if there will be text/csv calls available",
											"pm.test(\"Check if text/csv exists from dataTypes\", function () {",
											"    var i;",
											"    for (i = 0; i < jsonData.result.calls.length; i++){",
											"        console.log(jsonData.result.calls.length);",
											"        pm.expect(jsonData.result.calls[i].dataTypes).contains(\"text/csv\");",
											"    }",
											"});",
											" */"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/serverinfo?dataType=text/csv",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"serverinfo"
									],
									"query": [
										{
											"key": "dataType",
											"value": "text/csv"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v2​/breedingmethods"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when filtered by text/tsv dataType",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Verify returned metadata\", function () {",
											"    pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											"    pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											"    pm.expect(jsonData.metadata.pagination.totalCount).to.eql(0);",
											"    pm.expect(jsonData.metadata.pagination.totalPages).to.eql(0);",
											"    pm.expect(jsonData.metadata.status).to.eql([]);",
											"    pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Check if calls is empty\", function () {",
											"    pm.expect(jsonData.result.calls).to.eql([]);",
											"});",
											"/** Uncomment if there will be text/tsv calls available",
											"pm.test(\"Check if text/csv exists from dataTypes\", function () {",
											"    var i;",
											"    for (i = 0; i < jsonData.result.calls.length; i++){",
											"        console.log(jsonData.result.calls.length);",
											"        pm.expect(jsonData.result.calls[i].dataTypes).contains(\"text/tsv\");",
											"    }",
											"});",
											" */"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/serverinfo?dataType=text/csv",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"serverinfo"
									],
									"query": [
										{
											"key": "dataType",
											"value": "text/csv"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v2​/breedingmethods"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when filtered by application/flapjack dataType",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Verify returned metadata\", function () {",
											"    pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											"    pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											"    pm.expect(jsonData.metadata.pagination.totalCount).to.eql(0);",
											"    pm.expect(jsonData.metadata.pagination.totalPages).to.eql(0);",
											"    pm.expect(jsonData.metadata.status).to.eql([]);",
											"    pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Check if calls is empty\", function () {",
											"    pm.expect(jsonData.result.calls).to.eql([]);",
											"});",
											"/** Uncomment if there will be application/flapjack calls available",
											"pm.test(\"Check if text/csv exists from dataTypes\", function () {",
											"    var i;",
											"    for (i = 0; i < jsonData.result.calls.length; i++){",
											"        console.log(jsonData.result.calls.length);",
											"        pm.expect(jsonData.result.calls[i].dataTypes).contains(\"application/flapjack\");",
											"    }",
											"});",
											" */"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/serverinfo?dataType=application/flapjack",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"serverinfo"
									],
									"query": [
										{
											"key": "dataType",
											"value": "application/flapjack"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v2​/breedingmethods"
							},
							"response": []
						}
					]
				},
				{
					"name": "GET ​/brapi​/v2​/serverinfo",
					"item": [
						{
							"name": "Verify response code and body when no dataType selected",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Verify returned metadata\", function () {",
											"    pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											"    pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											"    pm.expect(jsonData.metadata.pagination.totalCount).to.eql(24);",
											"    pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											"    pm.expect(jsonData.metadata.status).to.eql([]);",
											"    pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Check locations call\", function () {",
											"    var index = 0;",
											"    var selectedData = jsonData.result.calls[index];",
											"    pm.expect(selectedData.service).to.eql(\"locations\");",
											"    pm.expect(selectedData.dataTypes).to.eql(['application/json']);",
											"    pm.expect(selectedData.methods).to.eql(['GET'])",
											"    pm.expect(selectedData.versions).to.eql([",
											"                    \"2.0\"",
											"                ]);",
											"});",
											"pm.test(\"Check programs call\", function () {",
											"    var index = 1;",
											"    var selectedData = jsonData.result.calls[index];",
											"    pm.expect(selectedData.service).to.eql(\"programs\");",
											"    pm.expect(selectedData.dataTypes).to.eql(['application/json']);",
											"    pm.expect(selectedData.methods).to.eql(['GET'])",
											"    pm.expect(selectedData.versions).to.eql([",
											"                    \"2.0\"",
											"                ]);",
											"});",
											"",
											"pm.test(\"Check studies call\", function () {",
											"    var index = 2;",
											"    var selectedData = jsonData.result.calls[index];",
											"    pm.expect(selectedData.service).to.eql(\"studies\");",
											"    pm.expect(selectedData.dataTypes).to.eql(['application/json']);",
											"    pm.expect(selectedData.methods).to.eql(['GET','POST'])",
											"    pm.expect(selectedData.versions).to.eql([",
											"                    \"2.0\"",
											"                ]);",
											"});",
											"",
											"pm.test(\"Check studies/{studyDbId} call\", function () {",
											"    var index = 3;",
											"    var selectedData = jsonData.result.calls[index];",
											"    pm.expect(selectedData.service).to.eql(\"studies/{studyDbId}\");",
											"    pm.expect(selectedData.dataTypes).to.eql(['application/json']);",
											"    pm.expect(selectedData.methods).to.eql(['GET'])",
											"    pm.expect(selectedData.versions).to.eql([",
											"                    \"2.0\"",
											"                ]);",
											"});",
											"",
											"pm.test(\"Check trials call\", function () {",
											"    var index = 4;",
											"    var selectedData = jsonData.result.calls[index];",
											"    pm.expect(selectedData.service).to.eql(\"trials\");",
											"    pm.expect(selectedData.dataTypes).to.eql(['application/json']);",
											"    pm.expect(selectedData.methods).to.eql(['GET','POST'])",
											"    pm.expect(selectedData.versions).to.eql([",
											"                    \"2.0\"",
											"                ]);",
											"});",
											"pm.test(\"Check observationunits call\", function () {",
											"    var index = 5;",
											"    var selectedData = jsonData.result.calls[index];",
											"    pm.expect(selectedData.service).to.eql(\"observationunits\");",
											"    pm.expect(selectedData.dataTypes).to.eql(['application/json']);",
											"    pm.expect(selectedData.methods).to.eql(['POST'])",
											"    pm.expect(selectedData.versions).to.eql([",
											"                    \"2.0\"",
											"                ]);",
											"});",
											"",
											"pm.test(\"Check search/observationunits call\", function () {",
											"    var index = 6;",
											"    var selectedData = jsonData.result.calls[index];",
											"    pm.expect(selectedData.service).to.eql(\"search/observationunits\");",
											"    pm.expect(selectedData.dataTypes).to.eql(['application/json']);",
											"    pm.expect(selectedData.methods).to.eql(['POST'])",
											"    pm.expect(selectedData.versions).to.eql([",
											"                    \"2.0\"",
											"                ]);",
											"});",
											"pm.test(\"Check search/observationunits/{searchResultsDbId} call\", function () {",
											"    var index = 7;",
											"    var selectedData = jsonData.result.calls[index];",
											"    pm.expect(selectedData.service).to.eql(\"search/observationunits/{searchResultsDbId}\");",
											"    pm.expect(selectedData.dataTypes).to.eql(['application/json']);",
											"    pm.expect(selectedData.methods).to.eql(['GET'])",
											"    pm.expect(selectedData.versions).to.eql([",
											"                    \"2.0\"",
											"                ]);",
											"});",
											"",
											"pm.test(\"Check seedlots call\", function () {",
											"    var index = 8;",
											"    var selectedData = jsonData.result.calls[index];",
											"    pm.expect(selectedData.service).to.eql(\"seedlots\");",
											"    pm.expect(selectedData.dataTypes).to.eql(['application/json']);",
											"    pm.expect(selectedData.methods).to.eql(['GET'])",
											"    pm.expect(selectedData.versions).to.eql([",
											"                    \"2.0\"",
											"                ]);",
											"});",
											"pm.test(\"Check seedlots/transactions call\", function () {",
											"    var index = 9;",
											"    var selectedData = jsonData.result.calls[index];",
											"    pm.expect(selectedData.service).to.eql(\"seedlots/transactions\");",
											"    pm.expect(selectedData.dataTypes).to.eql(['application/json']);",
											"    pm.expect(selectedData.methods).to.eql(['GET'])",
											"    pm.expect(selectedData.versions).to.eql([",
											"                    \"2.0\"",
											"                ]);",
											"});",
											"pm.test(\"Check breedingmethods call\", function () {",
											"    var index = 10;",
											"    var selectedData = jsonData.result.calls[index];",
											"    pm.expect(selectedData.service).to.eql(\"breedingmethods\");",
											"    pm.expect(selectedData.dataTypes).to.eql(['application/json']);",
											"    pm.expect(selectedData.methods).to.eql(['GET'])",
											"    pm.expect(selectedData.versions).to.eql([",
											"                    \"2.0\"",
											"                ]);",
											"});",
											"",
											"pm.test(\"Check breedingmethods/{breedingMethodDbId} call\", function () {",
											"    var index = 11;",
											"    var selectedData = jsonData.result.calls[index];",
											"    pm.expect(selectedData.service).to.eql(\"breedingmethods/{breedingMethodDbId}\");",
											"    pm.expect(selectedData.dataTypes).to.eql(['application/json']);",
											"    pm.expect(selectedData.methods).to.eql(['GET'])",
											"    pm.expect(selectedData.versions).to.eql([",
											"                    \"2.0\"",
											"                ]);",
											"});",
											"",
											"pm.test(\"Check germplasm call\", function () {",
											"    var index = 12;",
											"    var selectedData = jsonData.result.calls[index];",
											"    pm.expect(selectedData.service).to.eql(\"germplasm\");",
											"    pm.expect(selectedData.dataTypes).to.eql(['application/json']);",
											"    pm.expect(selectedData.methods).to.eql([ 'GET', 'POST', 'PUT' ] )",
											"    pm.expect(selectedData.versions).to.eql([",
											"                    \"2.0\"",
											"                ]);",
											"});",
											"pm.test(\"Check search/germplasm call\", function () {",
											"    var index = 13;",
											"    var selectedData = jsonData.result.calls[index];",
											"    pm.expect(selectedData.service).to.eql(\"search/germplasm\");",
											"    pm.expect(selectedData.dataTypes).to.eql(['application/json']);",
											"    pm.expect(selectedData.methods).to.eql([ 'POST'] )",
											"    pm.expect(selectedData.versions).to.eql([",
											"                    \"2.0\"",
											"                ]);",
											"});",
											"pm.test(\"Check search/germplasm/{searchResultsDbId} call\", function () {",
											"    var index = 14;",
											"    var selectedData = jsonData.result.calls[index];",
											"    pm.expect(selectedData.service).to.eql(\"search/germplasm/{searchResultsDbId}\");",
											"    pm.expect(selectedData.dataTypes).to.eql(['application/json']);",
											"    pm.expect(selectedData.methods).to.eql([ 'GET'] )",
											"    pm.expect(selectedData.versions).to.eql([",
											"                    \"2.0\"",
											"                ]);",
											"});",
											"pm.test(\"Check samples call\", function () {",
											"    var index = 15;",
											"    var selectedData = jsonData.result.calls[index];",
											"    pm.expect(selectedData.service).to.eql(\"samples\");",
											"    pm.expect(selectedData.dataTypes).to.eql(['application/json']);",
											"    pm.expect(selectedData.methods).to.eql([ 'GET'] )",
											"    pm.expect(selectedData.versions).to.eql([",
											"                    \"2.0\"",
											"                ]);",
											"});",
											"pm.test(\"Check samples/{sampleDbId} call\", function () {",
											"    var index = 16;",
											"    var selectedData = jsonData.result.calls[index];",
											"    pm.expect(selectedData.service).to.eql(\"samples/{sampleDbId}\");",
											"    pm.expect(selectedData.dataTypes).to.eql(['application/json']);",
											"    pm.expect(selectedData.methods).to.eql([ 'GET'] )",
											"    pm.expect(selectedData.versions).to.eql([",
											"                    \"2.0\"",
											"                ]);",
											"});",
											"",
											"",
											"pm.test(\"Check search/samples call\", function () {",
											"    var index = 17;",
											"    var selectedData = jsonData.result.calls[index];",
											"    pm.expect(selectedData.service).to.eql(\"search/samples\");",
											"    pm.expect(selectedData.dataTypes).to.eql(['application/json']);",
											"    pm.expect(selectedData.methods).to.eql([ 'POST'] )",
											"    pm.expect(selectedData.versions).to.eql([",
											"                    \"2.0\"",
											"                ]);",
											"});",
											"",
											"pm.test(\"Check search/samples/{searchResultsDbId} call\", function () {",
											"    var index = 18;",
											"    var selectedData = jsonData.result.calls[index];",
											"    pm.expect(selectedData.service).to.eql(\"search/samples/{searchResultsDbId}\");",
											"    pm.expect(selectedData.dataTypes).to.eql(['application/json']);",
											"    pm.expect(selectedData.methods).to.eql([ 'GET'] )",
											"    pm.expect(selectedData.versions).to.eql([",
											"                    \"2.0\"",
											"                ]);",
											"});",
											"pm.test(\"Check variables call\", function () {",
											"    var index = 19;",
											"    var selectedData = jsonData.result.calls[index];",
											"    pm.expect(selectedData.service).to.eql(\"variables\");",
											"    pm.expect(selectedData.dataTypes).to.eql(['application/json']);",
											"    pm.expect(selectedData.methods).to.eql([ 'GET'] )",
											"    pm.expect(selectedData.versions).to.eql([",
											"                    \"2.0\"",
											"                ]);",
											"});",
											"pm.test(\"Check search/variables call\", function () {",
											"    var index = 20;",
											"    var selectedData = jsonData.result.calls[index];",
											"    pm.expect(selectedData.service).to.eql(\"search/variables\");",
											"    pm.expect(selectedData.dataTypes).to.eql(['application/json']);",
											"    pm.expect(selectedData.methods).to.eql([ 'POST'] )",
											"    pm.expect(selectedData.versions).to.eql([",
											"                    \"2.0\"",
											"                ]);",
											"});",
											"pm.test(\"Check search/variables/{searchResultsDbId} call\", function () {",
											"    var index = 21;",
											"    var selectedData = jsonData.result.calls[index];",
											"    pm.expect(selectedData.service).to.eql(\"search/variables/{searchResultsDbId}\");",
											"    pm.expect(selectedData.dataTypes).to.eql(['application/json']);",
											"    pm.expect(selectedData.methods).to.eql([ 'GET'] )",
											"    pm.expect(selectedData.versions).to.eql([",
											"                    \"2.0\"",
											"                ]);",
											"});",
											"pm.test(\"Check observations call\", function () {",
											"    var index = 22;",
											"    var selectedData = jsonData.result.calls[index];",
											"    pm.expect(selectedData.service).to.eql(\"observations\");",
											"    pm.expect(selectedData.dataTypes).to.eql(['application/json']);",
											"    pm.expect(selectedData.methods).to.eql([ 'GET','POST'] )",
											"    pm.expect(selectedData.versions).to.eql([",
											"                    \"2.0\"",
											"                ]);",
											"});",
											"pm.test(\"Check variables call\", function () {",
											"    var index = 23;",
											"    var selectedData = jsonData.result.calls[index];",
											"    pm.expect(selectedData.service).to.eql(\"variables\");",
											"    pm.expect(selectedData.dataTypes).to.eql(['application/json']);",
											"    pm.expect(selectedData.methods).to.eql([ 'PUT'] )",
											"    pm.expect(selectedData.versions).to.eql([",
											"                    \"2.1\"",
											"                ]);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/brapi/v2/serverinfo",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"brapi",
										"v2",
										"serverinfo"
									]
								},
								"description": "GET ​/{crop}​/brapi​/v2​/breedingmethods"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when filtered by application/json dataType",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Verify returned metadata\", function () {",
											"    pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											"    pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											"    pm.expect(jsonData.metadata.pagination.totalCount).to.eql(24);",
											"    pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											"    pm.expect(jsonData.metadata.status).to.eql([]);",
											"    pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Check if application/json exists from dataTypes\", function () {",
											"    var i;",
											"    for (i = 0; i < jsonData.result.calls.length; i++){",
											"        pm.expect(jsonData.result.calls[i].dataTypes).contains(\"application/json\");",
											"    }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/brapi/v2/serverinfo?dataType=application/json",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"brapi",
										"v2",
										"serverinfo"
									],
									"query": [
										{
											"key": "dataType",
											"value": "application/json"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v2​/breedingmethods"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when filtered by text/csv dataType",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Verify returned metadata\", function () {",
											"    pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											"    pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											"    pm.expect(jsonData.metadata.pagination.totalCount).to.eql(0);",
											"    pm.expect(jsonData.metadata.pagination.totalPages).to.eql(0);",
											"    pm.expect(jsonData.metadata.status).to.eql([]);",
											"    pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Check if calls is empty\", function () {",
											"    pm.expect(jsonData.result.calls).to.eql([]);",
											"});",
											"/** Uncomment if there will be text/csv calls available",
											"pm.test(\"Check if text/csv exists from dataTypes\", function () {",
											"    var i;",
											"    for (i = 0; i < jsonData.result.calls.length; i++){",
											"        console.log(jsonData.result.calls.length);",
											"        pm.expect(jsonData.result.calls[i].dataTypes).contains(\"text/csv\");",
											"    }",
											"});",
											" */"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/brapi/v2/serverinfo?dataType=text/csv",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"brapi",
										"v2",
										"serverinfo"
									],
									"query": [
										{
											"key": "dataType",
											"value": "text/csv"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v2​/breedingmethods"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when filtered by text/tsv dataType",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Verify returned metadata\", function () {",
											"    pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											"    pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											"    pm.expect(jsonData.metadata.pagination.totalCount).to.eql(0);",
											"    pm.expect(jsonData.metadata.pagination.totalPages).to.eql(0);",
											"    pm.expect(jsonData.metadata.status).to.eql([]);",
											"    pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Check if calls is empty\", function () {",
											"    pm.expect(jsonData.result.calls).to.eql([]);",
											"});",
											"/** Uncomment if there will be text/tsv calls available",
											"pm.test(\"Check if text/csv exists from dataTypes\", function () {",
											"    var i;",
											"    for (i = 0; i < jsonData.result.calls.length; i++){",
											"        console.log(jsonData.result.calls.length);",
											"        pm.expect(jsonData.result.calls[i].dataTypes).contains(\"text/tsv\");",
											"    }",
											"});",
											" */"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/brapi/v2/serverinfo?dataType=text/csv",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"brapi",
										"v2",
										"serverinfo"
									],
									"query": [
										{
											"key": "dataType",
											"value": "text/csv"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v2​/breedingmethods"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when filtered by application/flapjack dataType",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Verify returned metadata\", function () {",
											"    pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											"    pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											"    pm.expect(jsonData.metadata.pagination.totalCount).to.eql(0);",
											"    pm.expect(jsonData.metadata.pagination.totalPages).to.eql(0);",
											"    pm.expect(jsonData.metadata.status).to.eql([]);",
											"    pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Check if calls is empty\", function () {",
											"    pm.expect(jsonData.result.calls).to.eql([]);",
											"});",
											"/** Uncomment if there will be application/flapjack calls available",
											"pm.test(\"Check if text/csv exists from dataTypes\", function () {",
											"    var i;",
											"    for (i = 0; i < jsonData.result.calls.length; i++){",
											"        console.log(jsonData.result.calls.length);",
											"        pm.expect(jsonData.result.calls[i].dataTypes).contains(\"application/flapjack\");",
											"    }",
											"});",
											" */"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/brapi/v2/serverinfo?dataType=application/flapjack",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"brapi",
										"v2",
										"serverinfo"
									],
									"query": [
										{
											"key": "dataType",
											"value": "application/flapjack"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v2​/breedingmethods"
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "brapi-sync-related calls",
			"item": [
				{
					"name": "POST ​/{crop}​/brapi​/v2​/trials",
					"item": [
						{
							"name": "Verify response code and body entered complete set of inputs",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"var index = 0",
											"",
											"//Store generated trialDbId in an env variable to be used in POST /studies",
											"pm.environment.unset(\"createdTrialDbId\");",
											"pm.environment.set(\"createdTrialDbId\", jsonData.result.data[index].trialDbId);",
											"",
											"//Check status",
											"pm.test(\"Check messageType\", function () {",
											"    pm.expect(jsonData.metadata.status[0].messageType).to.eql(\"INFO\");",
											"});",
											"pm.test(\"Check message\", function () {",
											"    pm.expect(jsonData.metadata.status[0].message).to.eql(\"1 out of 1 trials created successfully.\");",
											"});",
											"",
											"pm.test(\"Check if trialDbId is not null\", function () {",
											"    pm.expect(jsonData.result.data[index].trialDbId).to.not.be.null;",
											"});",
											"pm.test(\"Check if trialName returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].trialName).to.eql(\"Study w complete details\");",
											"});",
											"",
											"pm.test(\"Check if trialDescription returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].trialDescription).to.eql(\"Study description\");",
											"});",
											"pm.test(\"Check if trialPUI returned is not null\", function () {",
											"    pm.expect(jsonData.result.data[index].trialPUI).to.not.be.null;",
											"});",
											"pm.test(\"Check if commonCropName returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].commonCropName).to.eql(\"testdata\");",
											"});",
											"pm.test(\"Check if programDbId returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].programDbId).to.eql(\"c9e335d2-3057-4958-a43e-e38cf61d09ca\");",
											"});",
											"pm.test(\"Check if programName returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].programName).to.eql(\"API Program\");",
											"});",
											"pm.test(\"Check if startDate returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].startDate).to.eql(\"2021-05-26\");",
											"});",
											"pm.test(\"Check if endDate returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].endDate).to.eql(\"2022-12-31\");",
											"});",
											"pm.test(\"Check if locationDbId returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].locationDbId).to.eql(\"9016\");",
											"});",
											"pm.test(\"Check if active returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].active).to.eql(true);",
											"});",
											"pm.test(\"Check if additionalInfo STUDY_BM_CODE returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].additionalInfo.STUDY_BM_CODE).to.eql(\"WCO\");",
											"});",
											"pm.test(\"Check if additionalInfo Target_Region returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].additionalInfo.Target_Region).to.eql(\"Region 3\");",
											"});",
											"pm.test(\"Check if additionalInfo STUDY_INSTITUTE returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].additionalInfo.STUDY_INSTITUTE).to.eql(\"INSTITUTE 1\");",
											"});",
											"pm.test(\"Check if additionalInfo COOPERATOR_ID returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].additionalInfo.COOPERATOR_ID).to.eql(\"2\");",
											"});",
											"pm.test(\"Check if additionalInfo Project_Prefix returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].additionalInfo.Project_Prefix).to.eql(\"Project Prefix 3\");",
											"});",
											"pm.test(\"Check if additionalInfo INSTITUTE_ID returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].additionalInfo.INSTITUTE_ID).to.eql(\"12345\");",
											"});",
											"pm.test(\"Check if additionalInfo STUDY_DATE returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].additionalInfo.STUDY_DATE).to.eql(\"20210526\");",
											"});",
											"",
											"pm.test(\"Check if contacts contactDbId returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].contacts[0].contactDbId).to.eql(\"\");",
											"});",
											"pm.test(\"Check if contacts email returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].contacts[0].email).to.eql(\"bob@bob.com\");",
											"});",
											"pm.test(\"Check if contacts instituteName returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].contacts[0].instituteName).to.eql(\"The BrAPI Institute\");",
											"});",
											"pm.test(\"Check if contacts name returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].contacts[0].name).to.eql(\"Bob Robertson\");",
											"});",
											"pm.test(\"Check if contacts type returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].contacts[0].type).to.eql(\"Creator\");",
											"});",
											"pm.test(\"Check if contacts orcid returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].contacts[0].orcid).to.eql(\"\");",
											"});",
											"pm.test(\"Check if documentationURL returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].documentationURL).to.eql(\"\");",
											"});",
											"pm.test(\"Check if externalReferences returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].externalReferences[0]).to.eql(\"ExternalReferenceDTO{entityId: {3089}, referenceID: {reference1}, referenceSource: {Source1}}\");",
											"});",
											"pm.test(\"Check if publications returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].publications).to.eql([]);",
											"});",
											"pm.test(\"Check if datasetAuthorships returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].datasetAuthorships).to.eql([]);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n\t{\r\n\t\t\"active\": true,\r\n\t\t\"additionalInfo\": {\r\n\t\t\t\"STUDY_BM_CODE\": \"WCO\",\r\n\t\t\t\"INSTITUTE_ID\": \"12345\",\r\n\t\t\t\"Target_Region\": \"Region 3\",\r\n\t\t\t\"COOPERATOR_ID\": \"2\",\r\n\t\t\t\"Project_Prefix\": \"Project Prefix 3\",\r\n\t\t\t\"PI_NAME_ID\": \"2\",\r\n\t\t\t\"STUDY_INSTITUTE\": \"INSTITUTE 1\",\r\n\t\t\t\"STUDY_DATE\": \"20210526\"\r\n\t\t},\r\n\t\t\"commonCropName\": \"testdata\",\r\n        \"contacts\": [\r\n            {\r\n                \"email\": \"bob@bob.com\",\r\n                \"instituteName\": \"The BrAPI Institute\",\r\n                \"name\": \"Bob Robertson\",\r\n                \"type\": \"Creator\"\r\n            }\r\n        ],\r\n\t\t\"externalReferences\": [\r\n\t\t\t{\r\n\t\t\t\t\"referenceID\": \"reference1\",\r\n\t\t\t\t\"referenceSource\": \"Source1\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"programDbId\": \"{{programDbId}}\",\r\n\t\t\"startDate\": \"2021-05-26\",\r\n        \"endDate\": \"2022-12-31\",\r\n\t\t\"trialDescription\": \"Study description\",\r\n\t\t\"trialName\": \"Study w complete details\"\r\n\t}\r\n]"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/trials",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"trials"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						},
						{
							"name": "Verify creation of multiple trials",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"//Check status",
											"pm.test(\"Check messageType\", function () {",
											"    pm.expect(jsonData.metadata.status[0].messageType).to.eql(\"INFO\");",
											"});",
											"pm.test(\"Check returned message\", function () {",
											"    pm.expect(jsonData.metadata.status[0].message).to.eql(\"5 out of 5 trials created successfully.\");",
											"});",
											"",
											"pm.test(\"Check if trialName returned is correct\", function () {",
											"    var trialNames = [\"T RCBD w Fieldmap\",\"T RIBD\",\"T Augmented\",\"T ELO w checks\",\"T Prep\"];",
											"    for (var i = 0; i < jsonData.result.data.length; i++) {",
											"    pm.expect(jsonData.result.data[i].trialName).to.eql(trialNames[i]);",
											"    }",
											"});",
											"",
											"pm.environment.unset(\"createdTrialRCBD\");",
											"pm.environment.set(\"createdTrialRCBD\", jsonData.result.data[0].trialDbId);",
											"pm.environment.unset(\"createdTrialRIBD\");",
											"pm.environment.set(\"createdTrialRIBD\", jsonData.result.data[1].trialDbId);",
											"pm.environment.unset(\"createdTrialAugmented\");",
											"pm.environment.set(\"createdTrialAugmented\", jsonData.result.data[2].trialDbId);",
											"pm.environment.unset(\"createdTrialELO\");",
											"pm.environment.set(\"createdTrialELO\", jsonData.result.data[3].trialDbId);",
											"pm.environment.unset(\"createdTrialPrep\");",
											"pm.environment.set(\"createdTrialPrep\", jsonData.result.data[4].trialDbId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n    {\r\n        \"programDbId\": \"c9e335d2-3057-4958-a43e-e38cf61d09ca\",\r\n        \"startDate\": \"2021-05-26\",\r\n        \"trialDescription\": \"Study description\",\r\n        \"trialName\": \"T RCBD w Fieldmap\"\r\n    },\r\n    {\r\n        \"programDbId\": \"c9e335d2-3057-4958-a43e-e38cf61d09ca\",\r\n        \"startDate\": \"2021-05-26\",\r\n        \"trialDescription\": \"Study description\",\r\n        \"trialName\": \"T RIBD\"\r\n    },\r\n    {\r\n        \"programDbId\": \"c9e335d2-3057-4958-a43e-e38cf61d09ca\",\r\n        \"startDate\": \"2021-05-26\",\r\n        \"trialDescription\": \"Study description\",\r\n        \"trialName\": \"T Augmented\"\r\n    },\r\n    {\r\n        \"programDbId\": \"c9e335d2-3057-4958-a43e-e38cf61d09ca\",\r\n        \"startDate\": \"2021-05-26\",\r\n        \"trialDescription\": \"Study description\",\r\n        \"trialName\": \"T ELO w checks\"\r\n    },\r\n    {\r\n        \"programDbId\": \"c9e335d2-3057-4958-a43e-e38cf61d09ca\",\r\n        \"startDate\": \"2021-05-26\",\r\n        \"trialDescription\": \"Study description\",\r\n        \"trialName\": \"T Prep\"\r\n    }\r\n]"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/trials",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"trials"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						},
						{
							"name": "Verify response code and body entered required inputs only",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"",
											"//Check status",
											"pm.test(\"Check messageType\", function () {",
											"    pm.expect(jsonData.metadata.status[0].messageType).to.eql(\"INFO\");",
											"});",
											"pm.test(\"Check message\", function () {",
											"    pm.expect(jsonData.metadata.status[0].message).to.eql(\"1 out of 1 trials created successfully.\");",
											"});",
											"",
											"pm.test(\"Check if trialDbId is not null\", function () {",
											"    pm.expect(jsonData.result.data[0].trialDbId).to.not.be.null;",
											"});",
											"pm.test(\"Check if trialName returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[0].trialName).to.eql(\"Study w required details only\");",
											"});",
											"",
											"pm.test(\"Check if trialDescription returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[0].trialDescription).to.eql(\"Study description\");",
											"});",
											"pm.test(\"Check if trialPUI returned is not null\", function () {",
											"    pm.expect(jsonData.result.data[0].trialPUI).to.not.be.null;",
											"});",
											"pm.test(\"Check if commonCropName returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[0].commonCropName).to.eql(\"testdata\");",
											"});",
											"pm.test(\"Check if programDbId returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[0].programDbId).to.eql(\"c9e335d2-3057-4958-a43e-e38cf61d09ca\");",
											"});",
											"pm.test(\"Check if programName returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[0].programName).to.eql(\"API Program\");",
											"});",
											"pm.test(\"Check if startDate returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[0].startDate).to.eql(\"2021-05-26\");",
											"});",
											"pm.test(\"Check if locationDbId returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[0].locationDbId).to.eql(\"9016\");",
											"});",
											"pm.test(\"Check if active returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[0].active).to.eql(true);",
											"});",
											"pm.test(\"Check if additionalInfo returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[0].additionalInfo).to.eql({});",
											"});",
											"",
											"pm.test(\"Check if contacts is not present\", function() {",
											"  pm.expect(jsonData.result.data).to.not.have.property('contacts');",
											"});",
											"pm.test(\"Check if externalReferences is not present\", function() {",
											"  pm.expect(jsonData.result.data).to.not.have.property('externalReferences');",
											"});",
											"pm.test(\"Check if documentationURL returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[0].documentationURL).to.eql(\"\");",
											"});",
											"pm.test(\"Check if publications returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[0].publications).to.eql([]);",
											"});",
											"pm.test(\"Check if datasetAuthorships returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[0].datasetAuthorships).to.eql([]);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n\t{\r\n\t\t\"programDbId\": \"c9e335d2-3057-4958-a43e-e38cf61d09ca\",\r\n\t\t\"startDate\": \"2021-05-26\",\r\n\t\t\"trialDescription\": \"Study description\",\r\n\t\t\"trialName\": \"Study w required details only\"\r\n\t}\r\n]"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/trials",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"trials"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered details that exceed max length of trialName",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"",
											"//Check status",
											"pm.test(\"Check messageType\", function () {",
											"    pm.expect(jsonData.metadata.status[0].messageType).to.eql(\"INFO\");",
											"});",
											"pm.test(\"Check message\", function () {",
											"    pm.expect(jsonData.metadata.status[0].message).to.eql(\"0 out of 1 trials created successfully.\");",
											"});",
											"pm.test(\"Check messageType\", function () {",
											"    pm.expect(jsonData.metadata.status[1].messageType).to.eql(\"ERROR\");",
											"});",
											"pm.test(\"Check if error message for missing trialName\", function () {",
											"    pm.expect(jsonData.metadata.status[1].message).to.eql(\"ERROR1 Trial at position 1 is invalid because the trialName must not exceed 225 characters.\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n\t{\r\n\t\t\"programDbId\": \"c9e335d2-3057-4958-a43e-e38cf61d09ca\",\r\n\t\t\"startDate\": \"2021-05-26\",\r\n\t\t\"trialDescription\": \"Study Deeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeescription\",\r\n\t\t\"trialName\": \"Study Naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaame\"\r\n\t}\r\n]"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/trials",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"trials"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered details that exceed max length of trialDescription",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"",
											"//Check status",
											"pm.test(\"Check messageType\", function () {",
											"    pm.expect(jsonData.metadata.status[0].messageType).to.eql(\"INFO\");",
											"});",
											"pm.test(\"Check message\", function () {",
											"    pm.expect(jsonData.metadata.status[0].message).to.eql(\"0 out of 1 trials created successfully.\");",
											"});",
											"pm.test(\"Check messageType\", function () {",
											"    pm.expect(jsonData.metadata.status[1].messageType).to.eql(\"ERROR\");",
											"});",
											"pm.test(\"Check if error message for missing trialName\", function () {",
											"    pm.expect(jsonData.metadata.status[1].message).to.eql(\"ERROR1 Trial at position 1 is invalid because the trialDescription must not exceed 225 characters.\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n\t{\r\n\t\t\"programDbId\": \"c9e335d2-3057-4958-a43e-e38cf61d09ca\",\r\n\t\t\"startDate\": \"2021-05-26\",\r\n\t\t\"trialDescription\": \"Study Deeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeescription\",\r\n\t\t\"trialName\": \"Study Naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaame\"\r\n\t}\r\n]"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/trials",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"trials"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered characters equal max length of field",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"//Check status",
											"pm.test(\"Check messageType\", function () {",
											"    pm.expect(jsonData.metadata.status[0].messageType).to.eql(\"INFO\");",
											"});",
											"pm.test(\"Check message\", function () {",
											"    pm.expect(jsonData.metadata.status[0].message).to.eql(\"1 out of 1 trials created successfully.\");",
											"});",
											"pm.test(\"Check if trialDbId is not null\", function () {",
											"    pm.expect(jsonData.result.data[0].trialDbId).to.not.be.null;",
											"});",
											"pm.test(\"Check if trialName returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[0].trialName).to.eql(\"Study Naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaame\");",
											"});",
											"",
											"pm.test(\"Check if trialDescription returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[0].trialDescription).to.eql(\"Study Deeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeescription\");",
											"});",
											"pm.test(\"Check if trialPUI returned is not null\", function () {",
											"    pm.expect(jsonData.result.data[0].trialPUI).to.not.be.null;",
											"});",
											"pm.test(\"Check if commonCropName returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[0].commonCropName).to.eql(\"testdata\");",
											"});",
											"pm.test(\"Check if programDbId returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[0].programDbId).to.eql(\"c9e335d2-3057-4958-a43e-e38cf61d09ca\");",
											"});",
											"pm.test(\"Check if programName returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[0].programName).to.eql(\"API Program\");",
											"});",
											"pm.test(\"Check if startDate returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[0].startDate).to.eql(\"2021-05-26\");",
											"});",
											"pm.test(\"Check if locationDbId returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[0].locationDbId).to.eql(\"9016\");",
											"});",
											"pm.test(\"Check if active returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[0].active).to.eql(true);",
											"});",
											"pm.test(\"Check if additionalInfo returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[0].additionalInfo).to.eql({});",
											"});",
											"pm.test(\"Check if contacts is empty\", function () {",
											"    pm.expect(jsonData.result.data[0].contacts).to.eql([]);",
											"});",
											"pm.test(\"Check if documentationURL returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[0].documentationURL).to.eql(\"\");",
											"});",
											"pm.test(\"Check if publications returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[0].publications).to.eql([]);",
											"});",
											"pm.test(\"Check if datasetAuthorships returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[0].datasetAuthorships).to.eql([]);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n\t{\r\n\t\t\"programDbId\": \"c9e335d2-3057-4958-a43e-e38cf61d09ca\",\r\n\t\t\"startDate\": \"2021-05-26\",\r\n\t\t\"trialDescription\": \"Study Deeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeescription\",\r\n\t\t\"trialName\": \"Study Naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaame\"\r\n\t}\r\n]"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/trials",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"trials"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered details but with no trialName",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"//Check status",
											"pm.test(\"Check messageType\", function () {",
											"    pm.expect(jsonData.metadata.status[0].messageType).to.eql(\"INFO\")",
											"});",
											"pm.test(\"Check message\", function () {",
											"    pm.expect(jsonData.metadata.status[0].message).to.eql(\"0 out of 1 trials created successfully.\");",
											"});",
											"pm.test(\"Check messageType\", function () {",
											"    pm.expect(jsonData.metadata.status[1].messageType).to.eql(\"ERROR\");",
											"});;",
											"pm.test(\"Check if error message for missing trialName\", function () {",
											"    pm.expect(jsonData.metadata.status[1].message).to.eql(\"ERROR1 Trial at position 1 is invalid because the trialName is not specified.\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n\t{\r\n\t\t\"active\": true,\r\n\t\t\"additionalInfo\": {\r\n\t\t\t\"STUDY_BM_CODE\": \"WCO\",\r\n\t\t\t\"INSTITUTE_ID\": \"12345\",\r\n\t\t\t\"Target_Region\": \"Region 3\",\r\n\t\t\t\"COOPERATOR_ID\": \"2\",\r\n\t\t\t\"Project_Prefix\": \"Project Prefix 3\",\r\n\t\t\t\"PI_NAME_ID\": \"2\",\r\n\t\t\t\"STUDY_INSTITUTE\": \"INSTITUTE 1\",\r\n\t\t\t\"STUDY_DATE\": \"20210526\"\r\n\t\t},\r\n\t\t\"commonCropName\": \"testdata\",\r\n\t\t\"externalReferences\": [\r\n\t\t\t{\r\n\t\t\t\t\"referenceID\": \"reference1\",\r\n\t\t\t\t\"referenceSource\": \"Source1\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"programDbId\": \"c9e335d2-3057-4958-a43e-e38cf61d09ca\",\r\n\t\t\"startDate\": \"2021-05-26\",\r\n        \"endDate\": \"2021-12-31\",\r\n\t\t\"trialDescription\": \"Study description\"\r\n\t}\r\n]"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/trials",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"trials"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered details but with no trialDescription",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"//Check status",
											"pm.test(\"Check messageType\", function () {",
											"    pm.expect(jsonData.metadata.status[0].messageType).to.eql(\"INFO\");",
											"});",
											"pm.test(\"Check message\", function () {",
											"    pm.expect(jsonData.metadata.status[0].message).to.eql(\"0 out of 1 trials created successfully.\");",
											"});",
											"pm.test(\"Check messageType\", function () {",
											"    pm.expect(jsonData.metadata.status[1].messageType).to.eql(\"ERROR\");",
											"});",
											"pm.test(\"Check if error message for missing trialName\", function () {",
											"    pm.expect(jsonData.metadata.status[1].message).to.eql(\"ERROR1 Trial at position 1 is invalid because the trialDescription is not specified.\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n\t{\r\n\t\t\"active\": true,\r\n\t\t\"additionalInfo\": {\r\n\t\t\t\"STUDY_BM_CODE\": \"WCO\",\r\n\t\t\t\"INSTITUTE_ID\": \"12345\",\r\n\t\t\t\"Target_Region\": \"Region 3\",\r\n\t\t\t\"COOPERATOR_ID\": \"2\",\r\n\t\t\t\"Project_Prefix\": \"Project Prefix 3\",\r\n\t\t\t\"PI_NAME_ID\": \"2\",\r\n\t\t\t\"STUDY_INSTITUTE\": \"INSTITUTE 1\",\r\n\t\t\t\"STUDY_DATE\": \"20210526\"\r\n\t\t},\r\n\t\t\"commonCropName\": \"testdata\",\r\n\t\t\"externalReferences\": [\r\n\t\t\t{\r\n\t\t\t\t\"referenceID\": \"reference1\",\r\n\t\t\t\t\"referenceSource\": \"Source1\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"programDbId\": \"c9e335d2-3057-4958-a43e-e38cf61d09ca\",\r\n\t\t\"startDate\": \"2021-05-26\",\r\n        \"endDate\": \"2021-12-31\",\r\n\t\t\"trialName\": \"Study w no trial description\"\r\n\t}\r\n]"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/trials",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"trials"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered details but with no startDate",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"//Check status",
											"pm.test(\"Check messageType\", function () {",
											"    pm.expect(jsonData.metadata.status[0].messageType).to.eql(\"INFO\");",
											"});",
											"pm.test(\"Check message\", function () {",
											"    pm.expect(jsonData.metadata.status[0].message).to.eql(\"0 out of 1 trials created successfully.\");",
											"});",
											"pm.test(\"Check messageType\", function () {",
											"    pm.expect(jsonData.metadata.status[1].messageType).to.eql(\"ERROR\");",
											"});",
											"pm.test(\"Check if error message for missing trialName\", function () {",
											"    pm.expect(jsonData.metadata.status[1].message).to.eql(\"ERROR1 Trial at position 1 is invalid because the startDate is not specified.\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n\t{\r\n\t\t\"active\": true,\r\n\t\t\"additionalInfo\": {\r\n\t\t\t\"STUDY_BM_CODE\": \"WCO\",\r\n\t\t\t\"INSTITUTE_ID\": \"12345\",\r\n\t\t\t\"Target_Region\": \"Region 3\",\r\n\t\t\t\"COOPERATOR_ID\": \"2\",\r\n\t\t\t\"Project_Prefix\": \"Project Prefix 3\",\r\n\t\t\t\"PI_NAME_ID\": \"2\",\r\n\t\t\t\"STUDY_INSTITUTE\": \"INSTITUTE 1\",\r\n\t\t\t\"STUDY_DATE\": \"20210526\"\r\n\t\t},\r\n\t\t\"commonCropName\": \"testdata\",\r\n\t\t\"externalReferences\": [\r\n\t\t\t{\r\n\t\t\t\t\"referenceID\": \"reference1\",\r\n\t\t\t\t\"referenceSource\": \"Source1\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"programDbId\": \"c9e335d2-3057-4958-a43e-e38cf61d09ca\",\r\n        \"endDate\": \"2021-12-31\",\r\n\t\t\"trialDescription\": \"Study description\",\r\n\t\t\"trialName\": \"Study w no start date\"\r\n\t}\r\n]"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/trials",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"trials"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered details but with no programDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"//Check status",
											"pm.test(\"Check messageType\", function () {",
											"    pm.expect(jsonData.metadata.status[0].messageType).to.eql(\"INFO\");",
											"});",
											"pm.test(\"Check message\", function () {",
											"    pm.expect(jsonData.metadata.status[0].message).to.eql(\"0 out of 1 trials created successfully.\");",
											"});",
											"pm.test(\"Check messageType\", function () {",
											"    pm.expect(jsonData.metadata.status[1].messageType).to.eql(\"ERROR\");",
											"});",
											"pm.test(\"Check if error message for missing trialName\", function () {",
											"    pm.expect(jsonData.metadata.status[1].message).to.eql(\"ERROR1 Trial at position 1 is invalid because the programDbId is not specified.\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n\t{\r\n\t\t\"active\": true,\r\n\t\t\"additionalInfo\": {\r\n\t\t\t\"STUDY_BM_CODE\": \"WCO\",\r\n\t\t\t\"INSTITUTE_ID\": \"12345\",\r\n\t\t\t\"Target_Region\": \"Region 3\",\r\n\t\t\t\"COOPERATOR_ID\": \"2\",\r\n\t\t\t\"Project_Prefix\": \"Project Prefix 3\",\r\n\t\t\t\"PI_NAME_ID\": \"2\",\r\n\t\t\t\"STUDY_INSTITUTE\": \"INSTITUTE 1\",\r\n\t\t\t\"STUDY_DATE\": \"20210526\"\r\n\t\t},\r\n\t\t\"commonCropName\": \"testdata\",\r\n\t\t\"externalReferences\": [\r\n\t\t\t{\r\n\t\t\t\t\"referenceID\": \"reference1\",\r\n\t\t\t\t\"referenceSource\": \"Source1\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"startDate\": \"2021-05-26\",\r\n        \"endDate\": \"2021-12-31\",\r\n\t\t\"trialDescription\": \"Study description\",\r\n\t\t\"trialName\": \"Study w no programDbId\"\r\n\t}\r\n]"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/trials",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"trials"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered existing trialName",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"//Check status",
											"pm.test(\"Check messageType\", function () {",
											"    pm.expect(jsonData.metadata.status[0].messageType).to.eql(\"INFO\");",
											"});",
											"pm.test(\"Check message\", function () {",
											"    pm.expect(jsonData.metadata.status[0].message).to.eql(\"0 out of 1 trials created successfully.\");",
											"});",
											"pm.test(\"Check messageType\", function () {",
											"    pm.expect(jsonData.metadata.status[1].messageType).to.eql(\"ERROR\");",
											"});",
											"pm.test(\"Check if error message for missing trialName\", function () {",
											"    pm.expect(jsonData.metadata.status[1].message).to.eql(\"ERROR1 Trial at position 1 is invalid because the trialName is already existing in the database.\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n\t{\r\n\t\t\"programDbId\": \"c9e335d2-3057-4958-a43e-e38cf61d09ca\",\r\n\t\t\"startDate\": \"2021-05-26\",\r\n\t\t\"trialDescription\": \"Study description\",\r\n\t\t\"trialName\": \"Study w required details only\"\r\n\t}\r\n]"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/trials",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"trials"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid code for an additionalInfo",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"//Check status",
											"pm.test(\"Check messageType\", function () {",
											"    pm.expect(jsonData.metadata.status[0].messageType).to.eql(\"INFO\");",
											"});",
											"pm.test(\"Check message\", function () {",
											"    pm.expect(jsonData.metadata.status[0].message).to.eql(\"1 out of 1 trials created successfully.\");",
											"});",
											"pm.test(\"Check if trialDbId is not null\", function () {",
											"    pm.expect(jsonData.result.data[0].trialDbId).to.not.be.null;",
											"});",
											"pm.test(\"Check if trialName returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[0].trialName).to.eql(\"Study w invalid codes for additionalInfo\");",
											"});",
											"",
											"pm.test(\"Check if trialDescription returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[0].trialDescription).to.eql(\"Study description\");",
											"});",
											"pm.test(\"Check if trialPUI returned is not null\", function () {",
											"    pm.expect(jsonData.result.data[0].trialPUI).to.not.be.null;",
											"});",
											"pm.test(\"Check if commonCropName returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[0].commonCropName).to.eql(\"testdata\");",
											"});",
											"pm.test(\"Check if programDbId returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[0].programDbId).to.eql(\"c9e335d2-3057-4958-a43e-e38cf61d09ca\");",
											"});",
											"pm.test(\"Check if programName returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[0].programName).to.eql(\"API Program\");",
											"});",
											"pm.test(\"Check if startDate returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[0].startDate).to.eql(\"2021-05-26\");",
											"});",
											"pm.test(\"Check if locationDbId returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[0].locationDbId).to.eql(\"9016\");",
											"});",
											"pm.test(\"Check if active returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[0].active).to.eql(true);",
											"});",
											"pm.test(\"Check if additionalInfo returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[0].additionalInfo).to.eql({});",
											"});",
											"pm.test(\"Check if contacts is empty\", function () {",
											"    pm.expect(jsonData.result.data[0].contacts).to.eql([]);",
											"});",
											"pm.test(\"Check if documentationURL returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[0].documentationURL).to.eql(\"\");",
											"});",
											"pm.test(\"Check if publications returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[0].publications).to.eql([]);",
											"});",
											"pm.test(\"Check if datasetAuthorships returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[0].datasetAuthorships).to.eql([]);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n\t{\r\n\t\t\"active\": true,\r\n\t\t\"additionalInfo\": {\r\n\t\t\t\"STUDY_BM_CODEx\": \"WCO\",\r\n\t\t\t\"INSTITUTE_IDx\": \"12345\",\r\n\t\t\t\"Target_Regionx\": \"Region 3\",\r\n\t\t\t\"COOPERATOR_IDx\": \"2\",\r\n\t\t\t\"Project_Prefixx\": \"Project Prefix 3\",\r\n\t\t\t\"PI_NAME_IDx\": \"2\",\r\n\t\t\t\"STUDY_INSTITUTEx\": \"INSTITUTE 1\",\r\n\t\t\t\"STUDY_DATEx\": \"20210526\"\r\n\t\t},\r\n\t\t\"commonCropName\": \"testdata\",\r\n\t\t\"externalReferences\": [\r\n\t\t\t{\r\n\t\t\t\t\"referenceID\": \"reference1\",\r\n\t\t\t\t\"referenceSource\": \"Source1\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"programDbId\": \"c9e335d2-3057-4958-a43e-e38cf61d09ca\",\r\n\t\t\"startDate\": \"2021-05-26\",\r\n        \"endDate\": \"2022-12-31\",\r\n\t\t\"trialDescription\": \"Study description\",\r\n\t\t\"trialName\": \"Study w invalid codes for additionalInfo\"\r\n\t}\r\n]"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/trials",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"trials"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid value for an additionalInfo",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"//Check status",
											"pm.test(\"Check messageType\", function () {",
											"    pm.expect(jsonData.metadata.status[0].messageType).to.eql(\"INFO\");",
											"});",
											"pm.test(\"Check message\", function () {",
											"    pm.expect(jsonData.metadata.status[0].message).to.eql(\"1 out of 1 trials created successfully.\");",
											"});",
											"pm.test(\"Check if trialDbId is not null\", function () {",
											"    pm.expect(jsonData.result.data[0].trialDbId).to.not.be.null;",
											"});",
											"pm.test(\"Check if trialName returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[0].trialName).to.eql(\"Study w invalid values for additionalInfo\");",
											"});",
											"",
											"pm.test(\"Check if trialDescription returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[0].trialDescription).to.eql(\"Study description\");",
											"});",
											"pm.test(\"Check if trialPUI returned is not null\", function () {",
											"    pm.expect(jsonData.result.data[0].trialPUI).to.not.be.null;",
											"});",
											"pm.test(\"Check if commonCropName returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[0].commonCropName).to.eql(\"testdata\");",
											"});",
											"pm.test(\"Check if programDbId returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[0].programDbId).to.eql(\"c9e335d2-3057-4958-a43e-e38cf61d09ca\");",
											"});",
											"pm.test(\"Check if programName returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[0].programName).to.eql(\"API Program\");",
											"});",
											"pm.test(\"Check if startDate returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[0].startDate).to.eql(\"2021-05-26\");",
											"});",
											"pm.test(\"Check if endDate returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[0].endDate).to.eql(\"2022-12-31\");",
											"});",
											"pm.test(\"Check if locationDbId returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[0].locationDbId).to.eql(\"9016\");",
											"});",
											"pm.test(\"Check if active returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[0].active).to.eql(true);",
											"});",
											"",
											"pm.test(\"Check if additionalInfo STUDY_INSTITUTE returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[0].additionalInfo.STUDY_INSTITUTE).to.eql(\"INSTITUTE 1\");",
											"});",
											"pm.test(\"Check if STUDY_BM_CODE is not present in additionalInfo\", function() {",
											"  pm.expect(jsonData.result.data[0].additionalInfo).to.not.have.property('STUDY_BM_CODE');",
											"});",
											"",
											"pm.test(\"Check if INSTITUTE_ID is not present in additionalInfo\", function() {",
											"  pm.expect(jsonData.result.data[0].additionalInfo).to.not.have.property('INSTITUTE_ID');",
											"});",
											"pm.test(\"Check if Target_Region is not present in additionalInfo\", function() {",
											"  pm.expect(jsonData.result.data[0].additionalInfo).to.not.have.property('Target_Region');",
											"});",
											"pm.test(\"Check if Project_Prefix is not present in additionalInfo\", function() {",
											"  pm.expect(jsonData.result.data[0].additionalInfo).to.not.have.property('Project_Prefix');",
											"});",
											"pm.test(\"Check if PI_NAME_ID is not present in additionalInfo\", function() {",
											"  pm.expect(jsonData.result.data[0].additionalInfo).to.not.have.property('PI_NAME_ID');",
											"});",
											"pm.test(\"Check if STUDY_DATE is not present in additionalInfo\", function() {",
											"  pm.expect(jsonData.result.data[0].additionalInfo).to.not.have.property('STUDY_DATE');",
											"});",
											"",
											"pm.test(\"Check if contacts is empty\", function () {",
											"    pm.expect(jsonData.result.data[0].contacts).to.eql([]);",
											"});",
											"pm.test(\"Check if documentationURL returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[0].documentationURL).to.eql(\"\");",
											"});",
											"pm.test(\"Check if publications returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[0].publications).to.eql([]);",
											"});",
											"pm.test(\"Check if datasetAuthorships returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[0].datasetAuthorships).to.eql([]);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n\t{\r\n\t\t\"active\": true,\r\n\t\t\"additionalInfo\": {\r\n\t\t\t\"STUDY_BM_CODE\": \"invalid\",\r\n\t\t\t\"INSTITUTE_ID\": \"invalid\",\r\n\t\t\t\"Target_Region\": \"invalid\",\r\n\t\t\t\"Project_Prefix\": \"invalid\",\r\n\t\t\t\"PI_NAME_ID\": \"invalid\",\r\n\t\t\t\"STUDY_INSTITUTE\": \"INSTITUTE 1\",\r\n\t\t\t\"STUDY_DATE\": \"invalid\"\r\n\t\t},\r\n\t\t\"commonCropName\": \"testdata\",\r\n\t\t\"programDbId\": \"c9e335d2-3057-4958-a43e-e38cf61d09ca\",\r\n\t\t\"startDate\": \"2021-05-26\",\r\n        \"endDate\": \"2022-12-31\",\r\n\t\t\"trialDescription\": \"Study description\",\r\n\t\t\"trialName\": \"Study w invalid values for additionalInfo\"\r\n\t}\r\n]"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/trials",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"trials"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid text that exceeds maxlength for an additionalInfo",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"//Check status",
											"pm.test(\"Check messageType\", function () {",
											"    pm.expect(jsonData.metadata.status[0].messageType).to.eql(\"INFO\");",
											"});",
											"pm.test(\"Check message\", function () {",
											"    pm.expect(jsonData.metadata.status[0].message).to.eql(\"0 out of 1 trials created successfully.\");",
											"});",
											"pm.test(\"Check messageType\", function () {",
											"    pm.expect(jsonData.metadata.status[1].messageType).to.eql(\"ERROR\");",
											"});",
											"pm.test(\"Check if error message for missing trialName\", function () {",
											"    pm.expect(jsonData.metadata.status[1].message).to.eql(\"ERROR1 Trial at position 1 is invalid because additionalInfo value with key: STUDY_INSTITUTE must not exceed length of 255.\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n\t{\r\n\t\t\"active\": true,\r\n\t\t\"additionalInfo\": {\r\n\t\t\t\"STUDY_BM_CODE\": \"WCO\",\r\n\t\t\t\"INSTITUTE_ID\": \"invalid\",\r\n\t\t\t\"Target_Region\": \"invalid\",\r\n\t\t\t\"COOPERATOR_ID\": \"2\",\r\n\t\t\t\"Project_Prefix\": \"invalid\",\r\n\t\t\t\"PI_NAME_ID\": \"invalid\",\r\n\t\t\t\"STUDY_INSTITUTE\": \"invaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaalid\",\r\n\t\t\t\"STUDY_DATE\": \"2021-05-26\"\r\n\t\t},\r\n\t\t\"commonCropName\": \"testdata\",\r\n\t\t\"externalReferences\": [\r\n\t\t\t{\r\n\t\t\t\t\"referenceID\": \"reference1\",\r\n\t\t\t\t\"referenceSource\": \"Source1\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"programDbId\": \"c9e335d2-3057-4958-a43e-e38cf61d09ca\",\r\n\t\t\"startDate\": \"2021-05-26\",\r\n        \"endDate\": \"2021-12-31\",\r\n\t\t\"trialDescription\": \"Study description\",\r\n\t\t\"trialName\": \"Study w text value for additionalInfo that exceeds maxlength\"\r\n\t}\r\n]"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/trials",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"trials"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid value for commonCropName",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"//Check status",
											"pm.test(\"Check messageType\", function () {",
											"    pm.expect(jsonData.metadata.status[0].messageType).to.eql(\"INFO\");",
											"});",
											"pm.test(\"Check message\", function () {",
											"    pm.expect(jsonData.metadata.status[0].message).to.eql(\"1 out of 1 trials created successfully.\");",
											"});",
											"pm.test(\"Check if trialDbId is not null\", function () {",
											"    pm.expect(jsonData.result.data[0].trialDbId).to.not.be.null;",
											"});",
											"pm.test(\"Check if trialName returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[0].trialName).to.eql(\"Study w invalid commonCropName\");",
											"});",
											"",
											"pm.test(\"Check if trialDescription returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[0].trialDescription).to.eql(\"Study description\");",
											"});",
											"pm.test(\"Check if trialPUI returned is not null\", function () {",
											"    pm.expect(jsonData.result.data[0].trialPUI).to.not.be.null;",
											"});",
											"pm.test(\"Check if commonCropName returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[0].commonCropName).to.eql(\"testdata\");",
											"});",
											"pm.test(\"Check if programDbId returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[0].programDbId).to.eql(\"c9e335d2-3057-4958-a43e-e38cf61d09ca\");",
											"});",
											"pm.test(\"Check if programName returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[0].programName).to.eql(\"API Program\");",
											"});",
											"pm.test(\"Check if startDate returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[0].startDate).to.eql(\"2021-05-26\");",
											"});",
											"pm.test(\"Check if locationDbId returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[0].locationDbId).to.eql(\"9016\");",
											"});",
											"pm.test(\"Check if active returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[0].active).to.eql(true);",
											"});",
											"pm.test(\"Check if additionalInfo returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[0].additionalInfo).to.eql({});",
											"});",
											"pm.test(\"Check if contacts is empty\", function () {",
											"    pm.expect(jsonData.result.data[0].contacts).to.eql([]);",
											"});",
											"pm.test(\"Check if documentationURL returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[0].documentationURL).to.eql(\"\");",
											"});",
											"pm.test(\"Check if publications returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[0].publications).to.eql([]);",
											"});",
											"pm.test(\"Check if datasetAuthorships returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[0].datasetAuthorships).to.eql([]);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n\t{\r\n\t\t\"commonCropName\": \"invalid\",\r\n        \"programDbId\": \"c9e335d2-3057-4958-a43e-e38cf61d09ca\",\r\n\t\t\"startDate\": \"2021-05-26\",\r\n\t\t\"trialDescription\": \"Study description\",\r\n\t\t\"trialName\": \"Study w invalid commonCropName\"\r\n\t}\r\n]"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/trials",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"trials"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid date format for startDate",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"//Check status",
											"pm.test(\"Check messageType\", function () {",
											"    pm.expect(jsonData.metadata.status[0].messageType).to.eql(\"INFO\");",
											"});",
											"pm.test(\"Check message\", function () {",
											"    pm.expect(jsonData.metadata.status[0].message).to.eql(\"0 out of 1 trials created successfully.\");",
											"});",
											"pm.test(\"Check messageType\", function () {",
											"    pm.expect(jsonData.metadata.status[1].messageType).to.eql(\"ERROR\");",
											"});",
											"pm.test(\"Check if error message for missing trialName\", function () {",
											"    pm.expect(jsonData.metadata.status[1].message).to.eql(\"ERROR1 Trial at position 1 is invalid because the startDate must follow yyyy-MM-dd format.\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n\t{\r\n\t\t\"programDbId\": \"c9e335d2-3057-4958-a43e-e38cf61d09ca\",\r\n\t\t\"startDate\": \"20210526\",\r\n\t\t\"trialDescription\": \"Study description\",\r\n\t\t\"trialName\": \"Study w invalid startDate\"\r\n\t}\r\n]"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/trials",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"trials"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid date format for endDate",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"//Check status",
											"pm.test(\"Check messageType\", function () {",
											"    pm.expect(jsonData.metadata.status[0].messageType).to.eql(\"INFO\");",
											"});",
											"pm.test(\"Check message\", function () {",
											"    pm.expect(jsonData.metadata.status[0].message).to.eql(\"0 out of 1 trials created successfully.\");",
											"});",
											"pm.test(\"Check messageType\", function () {",
											"    pm.expect(jsonData.metadata.status[1].messageType).to.eql(\"ERROR\");",
											"});",
											"pm.test(\"Check if error message for missing trialName\", function () {",
											"    pm.expect(jsonData.metadata.status[1].message).to.eql(\"ERROR1 Trial at position 1 is invalid because the endDate must follow yyyy-MM-dd format.\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n\t{\r\n\t\t\"programDbId\": \"c9e335d2-3057-4958-a43e-e38cf61d09ca\",\r\n\t\t\"startDate\": \"2021-05-26\",\r\n        \"endDate\": \"20211231\",\r\n\t\t\"trialDescription\": \"Study description\",\r\n\t\t\"trialName\": \"Study w invalid startDate\"\r\n\t}\r\n]"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/trials",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"trials"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered non-existing programDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"//Check status",
											"pm.test(\"Check messageType\", function () {",
											"    pm.expect(jsonData.metadata.status[0].messageType).to.eql(\"INFO\");",
											"});",
											"pm.test(\"Check message\", function () {",
											"    pm.expect(jsonData.metadata.status[0].message).to.eql(\"0 out of 1 trials created successfully.\");",
											"});",
											"pm.test(\"Check messageType\", function () {",
											"    pm.expect(jsonData.metadata.status[1].messageType).to.eql(\"ERROR\");",
											"});",
											"pm.test(\"Check if error message for missing trialName\", function () {",
											"    pm.expect(jsonData.metadata.status[1].message).to.eql(\"ERROR1 Trial at position 1 is invalid because the programDbId is not existing in the database.\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n\t{\r\n\t\t\"programDbId\": \"invalid\",\r\n\t\t\"startDate\": \"2021-05-26\",\r\n        \"endDate\": \"2021-12-31\",\r\n\t\t\"trialDescription\": \"Study description\",\r\n\t\t\"trialName\": \"Study w invalid startDate\"\r\n\t}\r\n]"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/trials",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"trials"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						}
					]
				},
				{
					"name": "POST ​/{crop}​/brapi​/v2​/studies",
					"item": [
						{
							"name": "Verify response code and body when entered complete set of valid inputs for an existing study with no existing design",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"var index = 0",
											"",
											"pm.environment.unset(\"createdStudyDbId1\");",
											"pm.environment.set(\"createdStudyDbId1\", jsonData.result.data[index].studyDbId);",
											"//Check status",
											"pm.test(\"Check messageType\", function () {",
											"    pm.expect(jsonData.metadata.status[index].messageType).to.eql(\"INFO\");",
											"});",
											"pm.test(\"Check message\", function () {",
											"    pm.expect(jsonData.metadata.status[index].message).to.eql(\"1 out of 1 studies created successfully.\");",
											"});",
											"",
											"//Check additionalInfo",
											"pm.test(\"Check if additionalInfo Study institute ID - conducted (DBID) returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].additionalInfo['Study institute ID - conducted (DBID)']).to.eql(\"12345\");",
											"});",
											"pm.test(\"Check if additionalInfo Target Region Variable\", function () {",
											"    pm.expect(jsonData.result.data[index].additionalInfo['Target Region Variable']).to.eql(\"\");",
											"});",
											"pm.test(\"Check if additionalInfo Project Prefix BCID Variable returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].additionalInfo['Project Prefix BCID Variable']).to.eql(\"\");",
											"});",
											"pm.test(\"Check if additionalInfo Breeding Method returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].additionalInfo['Breeding method applied to all plots in a study (CODE)']).to.eql(\"WCO\");",
											"});",
											"pm.test(\"Check if additionalInfo Study institute returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].additionalInfo['Study institute -conducted (DBCV)']).to.eql(\"INSTITUTE 1\");",
											"});",
											"pm.test(\"Check if additionalInfo studyObjective returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].additionalInfo['studyObjective']).to.eql(\"\");",
											"});",
											"pm.test(\"Check if additionalInfo Date the study was created returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].additionalInfo['Date the study was created']).to.eql(\"20210526\");",
											"});",
											"",
											"//Check contacts",
											"pm.test(\"Check if contacts is empty\", function () {",
											"    pm.expect(jsonData.result.data[index].contacts).to.eql([]);",
											"});",
											"pm.test(\"Check if dataLinks returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].dataLinks).to.eql([   ]);",
											"});",
											"",
											"//Check environmentParameters",
											"pm.test(\"Check if environmentParameters parameterNames are correct\", function () {",
											"   var paramNames = [",
											"       \"SITE_SOIL_PH\",",
											"       \"Selection_Trait\",",
											"       \"Crop_season_Code\",",
											"       \"SEEDING_DATE\",",
											"       \"PlotLng_m\"];",
											"   for (var i = 0; i < jsonData.result.data[index].environmentParameters.length; i++) {",
											"    pm.expect(jsonData.result.data[index].environmentParameters[i].parameterName).to.eql(paramNames[i]);",
											"   }",
											"});",
											"",
											"pm.test(\"Check if environmentParameters descriptions are correct\", function () {",
											"   var descriptions = [",
											"       \"Soil acidity - ph meter (pH)\",",
											"       \"Values indicate trait(s) under selection in a particular advancement process\",",
											"       \"Season - Assigned (Code)\",",
											"       \"Date Seeded - applied (yyyymmdd)\",",
											"       \"Plot length\"];",
											"   for (var i = 0; i < jsonData.result.data[index].environmentParameters.length; i++) {",
											"    pm.expect(jsonData.result.data[index].environmentParameters[i].description).to.eql(descriptions[i]);",
											"   }",
											"});",
											"",
											"pm.test(\"Check if environmentParameters units are correct\", function () {",
											"   var units = [",
											"       \"pH\",",
											"       \"STCodes\",",
											"       \"Code of Crop_season_Code\",",
											"       \"Date (yyyymmdd) of SEEDING_DATE\",",
											"       \"m\"];",
											"   for (var i = 0; i < jsonData.result.data[index].environmentParameters.length; i++) {",
											"    pm.expect(jsonData.result.data[index].environmentParameters[i].unit).to.eql(units[i]);",
											"   }",
											"});",
											"",
											"pm.test(\"Check if environmentParameters unitPUIs are correct\", function () {",
											"   var unitPUIs = [\"6100\",\"17284\",\"17273\",\"17274\",\"6086\"];",
											"   for (var i = 0; i < jsonData.result.data[index].environmentParameters.length; i++) {",
											"    pm.expect(jsonData.result.data[index].environmentParameters[i].unitPUI).to.eql(unitPUIs[i]);",
											"   }",
											"});",
											"pm.test(\"Check if environmentParameters values are correct\", function () {",
											"   var values = [\"7.5\",\"DH\",\"0\",\"20210601\",\"5\"];",
											"   for (var i = 0; i < jsonData.result.data[index].environmentParameters.length; i++) {",
											"    pm.expect(jsonData.result.data[index].environmentParameters[i].value).to.eql(values[i]);",
											"   }",
											"});",
											"pm.test(\"Check if environmentParameters parameterPUIs are correct\", function () {",
											"   var parameterPUIs = [\"8270\",\"17290\",\"8371\",\"8383\",\"8760\"];",
											"   for (var i = 0; i < jsonData.result.data[index].environmentParameters.length; i++) {",
											"    pm.expect(jsonData.result.data[index].environmentParameters[i].parameterPUI).to.eql(parameterPUIs[i]);",
											"   }",
											"});",
											"",
											"//Check experimental design",
											"",
											"pm.test(\"Check if experimentalDesign description returned is correct\", function () {",
											"     pm.expect(jsonData.result.data[index].experimentalDesign.description).to.eql(\"Externally generated design\");",
											"});",
											"pm.test(\"Check if experimentalDesign pui returned is correct\", function () {",
											"     pm.expect(jsonData.result.data[index].experimentalDesign.pui).to.eql(\"10168\");",
											"});",
											"//Check external reference",
											"pm.test(\"Check if externalReferences referenceIDs are correct\", function () {",
											"   var referenceIDs = [",
											"       \"doi:10.155454/12341234\",",
											"       \"http://purl.obolibrary.org/obo/ro.owl\",",
											"       \"75a50e76\"];",
											"   for (var i = 0; i < jsonData.result.data[index].externalReferences.length; i++) {",
											"    pm.expect(jsonData.result.data[index].externalReferences[i].referenceID).to.eql(referenceIDs[i]);",
											"   }",
											"});",
											"",
											"pm.test(\"Check if externalReferences referenceSources are correct\", function () {",
											"   var referenceSources = [",
											"       \"DOI\",",
											"       \"OBO Library\",",
											"       \"Remote Data Collection Upload Tool\"];",
											"   for (var i = 0; i < jsonData.result.data[index].externalReferences.length; i++) {",
											"    pm.expect(jsonData.result.data[index].externalReferences[i].referenceSource).to.eql(referenceSources[i]);",
											"   }",
											"});",
											"",
											"pm.test(\"Check if lastUpdate timeStamp returned is correct\", function () {",
											"    var moment = require('moment');",
											"     pm.expect(jsonData.result.data[index].lastUpdate.timeStamp).to.eql(moment().format((\"YYYYMMDD\")));",
											"});",
											"pm.test(\"Check if lastUpdate version returned is correct\", function () {",
											"     pm.expect(jsonData.result.data[index].lastUpdate.version).to.eql(\"1.0\");",
											"});",
											"pm.test(\"Check if observationUnitsDescription returned is correct\", function () {",
											"     pm.expect(jsonData.result.data[index].observationUnitsDescription).to.eql(\"\");",
											"});",
											"pm.test(\"Check if studyCode returned is correct\", function () {",
											"     pm.expect(jsonData.result.data[index].studyCode).to.eql(\"\");",
											"});",
											"pm.test(\"Check if studyDescription returned is correct\", function () {",
											"     pm.expect(jsonData.result.data[index].studyDescription).to.eql(\"Study description\");",
											"});",
											"",
											"pm.test(\"Check if studyPUI returned is correct\", function () {",
											"     pm.expect(jsonData.result.data[index].studyPUI).to.not.be.null;",
											"});",
											"pm.test(\"Check if observationLevels levelName returned is correct\", function () {",
											"     pm.expect(jsonData.result.data[index].observationLevels[0].levelName).to.eql(\"study\");",
											"});",
											"pm.test(\"Check if observationLevels levelOrder returned is correct\", function () {",
											"     pm.expect(jsonData.result.data[index].observationLevels[0].levelOrder).to.eql(4);",
											"});",
											"",
											"pm.test(\"Check if active returned is correct\", function () {",
											"     pm.expect(jsonData.result.data[index].active).to.eql(true);",
											"});",
											"",
											"",
											"pm.test(\"Check if startDate returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].startDate).to.eql(\"2021-05-26T00:00:00.000Z\");",
											"});",
											"pm.test(\"Check if endDate returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].endDate).to.eql(\"2022-12-31T00:00:00.000Z\");",
											"});",
											"pm.test(\"Check if studyDbId returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].studyDbId).to.eql(\"116\");",
											"});",
											"pm.test(\"Check if studyName returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].studyName).to.eql(\"Study w complete details Environment Number 1\");",
											"});",
											"",
											"pm.test(\"Check if studyTypeDbId returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].studyTypeDbId).to.eql(\"6\");",
											"});",
											"",
											"pm.test(\"Check if studyTypeName returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].studyTypeName).to.eql(\"Trial\");",
											"});",
											"",
											"pm.test(\"Check if seasons returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].seasons[0]).to.eql(\"Dry season\");",
											"});",
											"",
											"pm.test(\"Check if programDbId returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].programDbId).to.eql(\"c9e335d2-3057-4958-a43e-e38cf61d09ca\");",
											"});",
											"",
											"pm.test(\"Check if locationName returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].locationName).to.eql(\"Aargau\");",
											"});",
											"pm.test(\"Check if locationDbId returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].locationDbId).to.eql(\"3953\");",
											"});",
											"pm.test(\"Check if programName returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].programName).to.eql(\"API Program\");",
											"});",
											"pm.test(\"Check if trialName returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].trialName).to.eql(\"Study w complete details\");",
											"});",
											"pm.test(\"Check if trialDbId returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].trialDbId).to.eql(pm.environment.get(\"createdTrialDbId\"));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n    {\r\n        \"environmentParameters\": [\r\n            {\r\n                \"parameterName\": \"SITE_SOIL_PH\",\r\n                \"description\": \"Soil acidity - ph meter (pH)\",\r\n                \"unit\": \"pH\",\r\n                \"unitPUI\": \"6100\",\r\n                \"value\": \"7.5\",\r\n                \"parameterPUI\": \"8270\"\r\n            },\r\n            {\r\n                \"parameterName\": \"Selection_Trait\",\r\n                \"description\": \"Values indicate trait(s) under selection in a particular advancement process\",\r\n                \"unit\": \"STCodes\",\r\n                \"unitPUI\": \"17284\",\r\n                \"value\": \"DH\",\r\n                \"parameterPUI\": \"17290\"\r\n            },\r\n            {\r\n                \"parameterName\": \"SEEDING_DATE\",\r\n                \"description\": \"Date Seeded - applied (yyyymmdd)\",\r\n                \"unit\": \"Date (yyyymmdd) of SEEDING_DATE\",\r\n                \"unitPUI\": \"17274\",\r\n                \"value\": \"20210601\",\r\n                \"parameterPUI\": \"8383\"\r\n            },\r\n            {\r\n                \"parameterName\": \"PlotLng_m\",\r\n                \"description\": \"Plot length\",\r\n                \"unit\": \"m\",\r\n                \"unitPUI\": \"6086\",\r\n                \"value\": \"5\",\r\n                \"parameterPUI\": \"8760\"\r\n            }\r\n        ],\r\n        \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"doi:10.155454/12341234\",\r\n                \"referenceSource\": \"DOI\"\r\n            },\r\n            {\r\n                \"referenceID\": \"http://purl.obolibrary.org/obo/ro.owl\",\r\n                \"referenceSource\": \"OBO Library\"\r\n            },\r\n            {\r\n                \"referenceID\": \"75a50e76\",\r\n                \"referenceSource\": \"Remote Data Collection Upload Tool\"\r\n            }\r\n        ],\r\n        \"locationDbId\": \"3953\",\r\n        \"seasons\": [\r\n            \"Dry season\"\r\n        ],\r\n        \"trialDbId\": {{createdTrialDbId}}\r\n    }\r\n]"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/studies",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"studies"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered details for multiple instances for multipleTrials",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"var index = 0;",
											"",
											"",
											"//Check status",
											"pm.test(\"Check messageType\", function () {",
											"    pm.expect(jsonData.metadata.status[index].messageType).to.eql(\"INFO\");",
											"});",
											"pm.test(\"Check message\", function () {",
											"    pm.expect(jsonData.metadata.status[index].message).to.eql(\"11 out of 11 studies created successfully.\");",
											"});",
											"",
											"//Save generated 2nd studyDbId for createdTrialDbId1",
											"pm.environment.unset(\"createdStudyDbId2\");",
											"pm.environment.set(\"createdStudyDbId2\", jsonData.result.data[0].studyDbId);",
											"",
											"//Save generated 1st and 2nd studyDbId for T RCBD",
											"pm.environment.unset(\"createdStudyDbIdRCBD1\");",
											"pm.environment.set(\"createdStudyDbIdRCBD1\", jsonData.result.data[1].studyDbId);",
											"pm.environment.unset(\"createdStudyDbIdRCBD2\");",
											"pm.environment.set(\"createdStudyDbIdRCBD2\", jsonData.result.data[2].studyDbId);",
											"",
											"//Save generated 1st and 2nd studyDbId for T RIBD",
											"pm.environment.unset(\"createdStudyDbIdRIBD1\");",
											"pm.environment.set(\"createdStudyDbIdRIBD1\", jsonData.result.data[3].studyDbId);",
											"pm.environment.unset(\"createdStudyDbIdRIBD2\");",
											"pm.environment.set(\"createdStudyDbIdRIBD2\", jsonData.result.data[4].studyDbId);",
											"",
											"//Save generated 1st and 2nd studyDbId for T Augmented",
											"pm.environment.unset(\"createdStudyDbIdAug1\");",
											"pm.environment.set(\"createdStudyDbIdAug1\", jsonData.result.data[5].studyDbId);",
											"pm.environment.unset(\"createdStudyDbIdAug2\");",
											"pm.environment.set(\"createdStudyDbIdAug2\", jsonData.result.data[6].studyDbId);",
											"",
											"",
											"//Save generated 1st and 2nd studyDbId for T ELO w Checks",
											"pm.environment.unset(\"createdStudyDbIdELO1\");",
											"pm.environment.set(\"createdStudyDbIdELO1\", jsonData.result.data[7].studyDbId);",
											"pm.environment.unset(\"createdStudyDbIdELO2\");",
											"pm.environment.set(\"createdStudyDbIdELO2\", jsonData.result.data[8].studyDbId);",
											"",
											"",
											"//Save generated 1st and 2nd studyDbId for T Prep",
											"pm.environment.unset(\"createdStudyDbIdPrep1\");",
											"pm.environment.set(\"createdStudyDbIdPrep1\", jsonData.result.data[9].studyDbId);",
											"pm.environment.unset(\"createdStudyDbIdPrep2\");",
											"pm.environment.set(\"createdStudyDbIdPrep2\", jsonData.result.data[10].studyDbId);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n    {\r\n        \"environmentParameters\": [\r\n            {\r\n                \"parameterName\": \"SITE_SOIL_PH\",\r\n                \"description\": \"Soil acidity - ph meter (pH)\",\r\n                \"unit\": \"pH\",\r\n                \"unitPUI\": \"6100\",\r\n                \"value\": \"7.5\",\r\n                \"parameterPUI\": \"8270\"\r\n            },\r\n            {\r\n                \"parameterName\": \"Selection_Trait\",\r\n                \"description\": \"Values indicate trait(s) under selection in a particular advancement process\",\r\n                \"unit\": \"STCodes\",\r\n                \"unitPUI\": \"17284\",\r\n                \"value\": \"DH\",\r\n                \"parameterPUI\": \"17290\"\r\n            },\r\n            {\r\n                \"parameterName\": \"SEEDING_DATE\",\r\n                \"description\": \"Date Seeded - applied (yyyymmdd)\",\r\n                \"unit\": \"Date (yyyymmdd) of SEEDING_DATE\",\r\n                \"unitPUI\": \"17274\",\r\n                \"value\": \"20210601\",\r\n                \"parameterPUI\": \"8383\"\r\n            },\r\n            {\r\n                \"parameterName\": \"PlotLng_m\",\r\n                \"description\": \"Plot length\",\r\n                \"unit\": \"m\",\r\n                \"unitPUI\": \"6086\",\r\n                \"value\": \"5\",\r\n                \"parameterPUI\": \"8760\"\r\n            }\r\n        ],\r\n        \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"doi:10.155454/12341234\",\r\n                \"referenceSource\": \"DOI\"\r\n            },\r\n            {\r\n                \"referenceID\": \"http://purl.obolibrary.org/obo/ro.owl\",\r\n                \"referenceSource\": \"OBO Library\"\r\n            },\r\n            {\r\n                \"referenceID\": \"75a50e76\",\r\n                \"referenceSource\": \"Remote Data Collection Upload Tool\"\r\n            }\r\n        ],\r\n        \"locationDbId\": \"3953\",\r\n        \"seasons\": [\r\n            \"Wet season\"\r\n        ],\r\n        \"trialDbId\": {{createdTrialDbId}}\r\n    },\r\n    {\r\n        \"environmentParameters\": [\r\n            {\r\n                \"parameterName\": \"SITE_SOIL_PH\",\r\n                \"description\": \"Soil acidity - ph meter (pH)\",\r\n                \"unit\": \"pH\",\r\n                \"unitPUI\": \"6100\",\r\n                \"value\": \"7.5\",\r\n                \"parameterPUI\": \"8270\"\r\n            },\r\n            {\r\n                \"parameterName\": \"Selection_Trait\",\r\n                \"description\": \"Values indicate trait(s) under selection in a particular advancement process\",\r\n                \"unit\": \"STCodes\",\r\n                \"unitPUI\": \"17284\",\r\n                \"value\": \"DH\",\r\n                \"parameterPUI\": \"17290\"\r\n            },\r\n            {\r\n                \"parameterName\": \"SEEDING_DATE\",\r\n                \"description\": \"Date Seeded - applied (yyyymmdd)\",\r\n                \"unit\": \"Date (yyyymmdd) of SEEDING_DATE\",\r\n                \"unitPUI\": \"17274\",\r\n                \"value\": \"20210601\",\r\n                \"parameterPUI\": \"8383\"\r\n            },\r\n            {\r\n                \"parameterName\": \"PlotLng_m\",\r\n                \"description\": \"Plot length\",\r\n                \"unit\": \"m\",\r\n                \"unitPUI\": \"6086\",\r\n                \"value\": \"5\",\r\n                \"parameterPUI\": \"8760\"\r\n            }\r\n        ],\r\n        \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"doi:10.155454/12341234\",\r\n                \"referenceSource\": \"DOI\"\r\n            },\r\n            {\r\n                \"referenceID\": \"http://purl.obolibrary.org/obo/ro.owl\",\r\n                \"referenceSource\": \"OBO Library\"\r\n            },\r\n            {\r\n                \"referenceID\": \"75a50e76\",\r\n                \"referenceSource\": \"Remote Data Collection Upload Tool\"\r\n            }\r\n        ],\r\n        \"locationDbId\": \"3953\",\r\n        \"seasons\": [\r\n            \"Dry season\"\r\n        ],\r\n        \"trialDbId\": {{createdTrialRCBD}}\r\n    },\r\n    {\r\n        \"environmentParameters\": [\r\n            {\r\n                \"parameterName\": \"SITE_SOIL_PH\",\r\n                \"description\": \"Soil acidity - ph meter (pH)\",\r\n                \"unit\": \"pH\",\r\n                \"unitPUI\": \"6100\",\r\n                \"value\": \"7.5\",\r\n                \"parameterPUI\": \"8270\"\r\n            },\r\n            {\r\n                \"parameterName\": \"Selection_Trait\",\r\n                \"description\": \"Values indicate trait(s) under selection in a particular advancement process\",\r\n                \"unit\": \"STCodes\",\r\n                \"unitPUI\": \"17284\",\r\n                \"value\": \"DH\",\r\n                \"parameterPUI\": \"17290\"\r\n            },\r\n            {\r\n                \"parameterName\": \"SEEDING_DATE\",\r\n                \"description\": \"Date Seeded - applied (yyyymmdd)\",\r\n                \"unit\": \"Date (yyyymmdd) of SEEDING_DATE\",\r\n                \"unitPUI\": \"17274\",\r\n                \"value\": \"20210601\",\r\n                \"parameterPUI\": \"8383\"\r\n            },\r\n            {\r\n                \"parameterName\": \"PlotLng_m\",\r\n                \"description\": \"Plot length\",\r\n                \"unit\": \"m\",\r\n                \"unitPUI\": \"6086\",\r\n                \"value\": \"5\",\r\n                \"parameterPUI\": \"8760\"\r\n            }\r\n        ],\r\n        \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"doi:10.155454/12341234\",\r\n                \"referenceSource\": \"DOI\"\r\n            },\r\n            {\r\n                \"referenceID\": \"http://purl.obolibrary.org/obo/ro.owl\",\r\n                \"referenceSource\": \"OBO Library\"\r\n            },\r\n            {\r\n                \"referenceID\": \"75a50e76\",\r\n                \"referenceSource\": \"Remote Data Collection Upload Tool\"\r\n            }\r\n        ],\r\n        \"locationDbId\": \"3953\",\r\n        \"seasons\": [\r\n            \"Wet season\"\r\n        ],\r\n        \"trialDbId\": {{createdTrialRCBD}}\r\n    },\r\n    {\r\n        \"environmentParameters\": [\r\n            {\r\n                \"parameterName\": \"SITE_SOIL_PH\",\r\n                \"description\": \"Soil acidity - ph meter (pH)\",\r\n                \"unit\": \"pH\",\r\n                \"unitPUI\": \"6100\",\r\n                \"value\": \"7.5\",\r\n                \"parameterPUI\": \"8270\"\r\n            },\r\n            {\r\n                \"parameterName\": \"Selection_Trait\",\r\n                \"description\": \"Values indicate trait(s) under selection in a particular advancement process\",\r\n                \"unit\": \"STCodes\",\r\n                \"unitPUI\": \"17284\",\r\n                \"value\": \"DH\",\r\n                \"parameterPUI\": \"17290\"\r\n            },\r\n            {\r\n                \"parameterName\": \"SEEDING_DATE\",\r\n                \"description\": \"Date Seeded - applied (yyyymmdd)\",\r\n                \"unit\": \"Date (yyyymmdd) of SEEDING_DATE\",\r\n                \"unitPUI\": \"17274\",\r\n                \"value\": \"20210601\",\r\n                \"parameterPUI\": \"8383\"\r\n            },\r\n            {\r\n                \"parameterName\": \"PlotLng_m\",\r\n                \"description\": \"Plot length\",\r\n                \"unit\": \"m\",\r\n                \"unitPUI\": \"6086\",\r\n                \"value\": \"5\",\r\n                \"parameterPUI\": \"8760\"\r\n            }\r\n        ],\r\n        \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"doi:10.155454/12341234\",\r\n                \"referenceSource\": \"DOI\"\r\n            },\r\n            {\r\n                \"referenceID\": \"http://purl.obolibrary.org/obo/ro.owl\",\r\n                \"referenceSource\": \"OBO Library\"\r\n            },\r\n            {\r\n                \"referenceID\": \"75a50e76\",\r\n                \"referenceSource\": \"Remote Data Collection Upload Tool\"\r\n            }\r\n        ],\r\n        \"locationDbId\": \"3953\",\r\n        \"seasons\": [\r\n            \"Dry season\"\r\n        ],\r\n        \"trialDbId\": {{createdTrialRIBD}}\r\n    },\r\n    {\r\n        \"environmentParameters\": [\r\n            {\r\n                \"parameterName\": \"SITE_SOIL_PH\",\r\n                \"description\": \"Soil acidity - ph meter (pH)\",\r\n                \"unit\": \"pH\",\r\n                \"unitPUI\": \"6100\",\r\n                \"value\": \"7.5\",\r\n                \"parameterPUI\": \"8270\"\r\n            },\r\n            {\r\n                \"parameterName\": \"Selection_Trait\",\r\n                \"description\": \"Values indicate trait(s) under selection in a particular advancement process\",\r\n                \"unit\": \"STCodes\",\r\n                \"unitPUI\": \"17284\",\r\n                \"value\": \"DH\",\r\n                \"parameterPUI\": \"17290\"\r\n            },\r\n            {\r\n                \"parameterName\": \"SEEDING_DATE\",\r\n                \"description\": \"Date Seeded - applied (yyyymmdd)\",\r\n                \"unit\": \"Date (yyyymmdd) of SEEDING_DATE\",\r\n                \"unitPUI\": \"17274\",\r\n                \"value\": \"20210601\",\r\n                \"parameterPUI\": \"8383\"\r\n            },\r\n            {\r\n                \"parameterName\": \"PlotLng_m\",\r\n                \"description\": \"Plot length\",\r\n                \"unit\": \"m\",\r\n                \"unitPUI\": \"6086\",\r\n                \"value\": \"5\",\r\n                \"parameterPUI\": \"8760\"\r\n            }\r\n        ],\r\n        \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"doi:10.155454/12341234\",\r\n                \"referenceSource\": \"DOI\"\r\n            },\r\n            {\r\n                \"referenceID\": \"http://purl.obolibrary.org/obo/ro.owl\",\r\n                \"referenceSource\": \"OBO Library\"\r\n            },\r\n            {\r\n                \"referenceID\": \"75a50e76\",\r\n                \"referenceSource\": \"Remote Data Collection Upload Tool\"\r\n            }\r\n        ],\r\n        \"locationDbId\": \"3953\",\r\n        \"seasons\": [\r\n            \"Wet season\"\r\n        ],\r\n        \"trialDbId\": {{createdTrialRIBD}}\r\n    },\r\n    {\r\n        \"environmentParameters\": [\r\n            {\r\n                \"parameterName\": \"SITE_SOIL_PH\",\r\n                \"description\": \"Soil acidity - ph meter (pH)\",\r\n                \"unit\": \"pH\",\r\n                \"unitPUI\": \"6100\",\r\n                \"value\": \"7.5\",\r\n                \"parameterPUI\": \"8270\"\r\n            },\r\n            {\r\n                \"parameterName\": \"Selection_Trait\",\r\n                \"description\": \"Values indicate trait(s) under selection in a particular advancement process\",\r\n                \"unit\": \"STCodes\",\r\n                \"unitPUI\": \"17284\",\r\n                \"value\": \"DH\",\r\n                \"parameterPUI\": \"17290\"\r\n            },\r\n            {\r\n                \"parameterName\": \"SEEDING_DATE\",\r\n                \"description\": \"Date Seeded - applied (yyyymmdd)\",\r\n                \"unit\": \"Date (yyyymmdd) of SEEDING_DATE\",\r\n                \"unitPUI\": \"17274\",\r\n                \"value\": \"20210601\",\r\n                \"parameterPUI\": \"8383\"\r\n            },\r\n            {\r\n                \"parameterName\": \"PlotLng_m\",\r\n                \"description\": \"Plot length\",\r\n                \"unit\": \"m\",\r\n                \"unitPUI\": \"6086\",\r\n                \"value\": \"5\",\r\n                \"parameterPUI\": \"8760\"\r\n            }\r\n        ],\r\n        \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"doi:10.155454/12341234\",\r\n                \"referenceSource\": \"DOI\"\r\n            },\r\n            {\r\n                \"referenceID\": \"http://purl.obolibrary.org/obo/ro.owl\",\r\n                \"referenceSource\": \"OBO Library\"\r\n            },\r\n            {\r\n                \"referenceID\": \"75a50e76\",\r\n                \"referenceSource\": \"Remote Data Collection Upload Tool\"\r\n            }\r\n        ],\r\n        \"locationDbId\": \"3953\",\r\n        \"seasons\": [\r\n            \"Dry season\"\r\n        ],\r\n        \"trialDbId\": {{createdTrialAugmented}}\r\n    },\r\n    {\r\n        \"environmentParameters\": [\r\n            {\r\n                \"parameterName\": \"SITE_SOIL_PH\",\r\n                \"description\": \"Soil acidity - ph meter (pH)\",\r\n                \"unit\": \"pH\",\r\n                \"unitPUI\": \"6100\",\r\n                \"value\": \"7.5\",\r\n                \"parameterPUI\": \"8270\"\r\n            },\r\n            {\r\n                \"parameterName\": \"Selection_Trait\",\r\n                \"description\": \"Values indicate trait(s) under selection in a particular advancement process\",\r\n                \"unit\": \"STCodes\",\r\n                \"unitPUI\": \"17284\",\r\n                \"value\": \"DH\",\r\n                \"parameterPUI\": \"17290\"\r\n            },\r\n            {\r\n                \"parameterName\": \"SEEDING_DATE\",\r\n                \"description\": \"Date Seeded - applied (yyyymmdd)\",\r\n                \"unit\": \"Date (yyyymmdd) of SEEDING_DATE\",\r\n                \"unitPUI\": \"17274\",\r\n                \"value\": \"20210601\",\r\n                \"parameterPUI\": \"8383\"\r\n            },\r\n            {\r\n                \"parameterName\": \"PlotLng_m\",\r\n                \"description\": \"Plot length\",\r\n                \"unit\": \"m\",\r\n                \"unitPUI\": \"6086\",\r\n                \"value\": \"5\",\r\n                \"parameterPUI\": \"8760\"\r\n            }\r\n        ],\r\n        \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"doi:10.155454/12341234\",\r\n                \"referenceSource\": \"DOI\"\r\n            },\r\n            {\r\n                \"referenceID\": \"http://purl.obolibrary.org/obo/ro.owl\",\r\n                \"referenceSource\": \"OBO Library\"\r\n            },\r\n            {\r\n                \"referenceID\": \"75a50e76\",\r\n                \"referenceSource\": \"Remote Data Collection Upload Tool\"\r\n            }\r\n        ],\r\n        \"locationDbId\": \"3953\",\r\n        \"seasons\": [\r\n            \"Wet season\"\r\n        ],\r\n        \"trialDbId\": {{createdTrialAugmented}}\r\n    },\r\n    {\r\n        \"environmentParameters\": [\r\n            {\r\n                \"parameterName\": \"SITE_SOIL_PH\",\r\n                \"description\": \"Soil acidity - ph meter (pH)\",\r\n                \"unit\": \"pH\",\r\n                \"unitPUI\": \"6100\",\r\n                \"value\": \"7.5\",\r\n                \"parameterPUI\": \"8270\"\r\n            },\r\n            {\r\n                \"parameterName\": \"Selection_Trait\",\r\n                \"description\": \"Values indicate trait(s) under selection in a particular advancement process\",\r\n                \"unit\": \"STCodes\",\r\n                \"unitPUI\": \"17284\",\r\n                \"value\": \"DH\",\r\n                \"parameterPUI\": \"17290\"\r\n            },\r\n            {\r\n                \"parameterName\": \"SEEDING_DATE\",\r\n                \"description\": \"Date Seeded - applied (yyyymmdd)\",\r\n                \"unit\": \"Date (yyyymmdd) of SEEDING_DATE\",\r\n                \"unitPUI\": \"17274\",\r\n                \"value\": \"20210601\",\r\n                \"parameterPUI\": \"8383\"\r\n            },\r\n            {\r\n                \"parameterName\": \"PlotLng_m\",\r\n                \"description\": \"Plot length\",\r\n                \"unit\": \"m\",\r\n                \"unitPUI\": \"6086\",\r\n                \"value\": \"5\",\r\n                \"parameterPUI\": \"8760\"\r\n            }\r\n        ],\r\n        \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"doi:10.155454/12341234\",\r\n                \"referenceSource\": \"DOI\"\r\n            },\r\n            {\r\n                \"referenceID\": \"http://purl.obolibrary.org/obo/ro.owl\",\r\n                \"referenceSource\": \"OBO Library\"\r\n            },\r\n            {\r\n                \"referenceID\": \"75a50e76\",\r\n                \"referenceSource\": \"Remote Data Collection Upload Tool\"\r\n            }\r\n        ],\r\n        \"locationDbId\": \"3953\",\r\n        \"seasons\": [\r\n            \"Dry season\"\r\n        ],\r\n        \"trialDbId\": {{createdTrialELO}}\r\n    },\r\n    {\r\n        \"environmentParameters\": [\r\n            {\r\n                \"parameterName\": \"SITE_SOIL_PH\",\r\n                \"description\": \"Soil acidity - ph meter (pH)\",\r\n                \"unit\": \"pH\",\r\n                \"unitPUI\": \"6100\",\r\n                \"value\": \"7.5\",\r\n                \"parameterPUI\": \"8270\"\r\n            },\r\n            {\r\n                \"parameterName\": \"Selection_Trait\",\r\n                \"description\": \"Values indicate trait(s) under selection in a particular advancement process\",\r\n                \"unit\": \"STCodes\",\r\n                \"unitPUI\": \"17284\",\r\n                \"value\": \"DH\",\r\n                \"parameterPUI\": \"17290\"\r\n            },\r\n            {\r\n                \"parameterName\": \"SEEDING_DATE\",\r\n                \"description\": \"Date Seeded - applied (yyyymmdd)\",\r\n                \"unit\": \"Date (yyyymmdd) of SEEDING_DATE\",\r\n                \"unitPUI\": \"17274\",\r\n                \"value\": \"20210601\",\r\n                \"parameterPUI\": \"8383\"\r\n            },\r\n            {\r\n                \"parameterName\": \"PlotLng_m\",\r\n                \"description\": \"Plot length\",\r\n                \"unit\": \"m\",\r\n                \"unitPUI\": \"6086\",\r\n                \"value\": \"5\",\r\n                \"parameterPUI\": \"8760\"\r\n            }\r\n        ],\r\n        \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"doi:10.155454/12341234\",\r\n                \"referenceSource\": \"DOI\"\r\n            },\r\n            {\r\n                \"referenceID\": \"http://purl.obolibrary.org/obo/ro.owl\",\r\n                \"referenceSource\": \"OBO Library\"\r\n            },\r\n            {\r\n                \"referenceID\": \"75a50e76\",\r\n                \"referenceSource\": \"Remote Data Collection Upload Tool\"\r\n            }\r\n        ],\r\n        \"locationDbId\": \"3953\",\r\n        \"seasons\": [\r\n            \"Wet season\"\r\n        ],\r\n        \"trialDbId\": {{createdTrialELO}}\r\n    },\r\n    {\r\n        \"environmentParameters\": [\r\n            {\r\n                \"parameterName\": \"SITE_SOIL_PH\",\r\n                \"description\": \"Soil acidity - ph meter (pH)\",\r\n                \"unit\": \"pH\",\r\n                \"unitPUI\": \"6100\",\r\n                \"value\": \"7.5\",\r\n                \"parameterPUI\": \"8270\"\r\n            },\r\n            {\r\n                \"parameterName\": \"Selection_Trait\",\r\n                \"description\": \"Values indicate trait(s) under selection in a particular advancement process\",\r\n                \"unit\": \"STCodes\",\r\n                \"unitPUI\": \"17284\",\r\n                \"value\": \"DH\",\r\n                \"parameterPUI\": \"17290\"\r\n            },\r\n            {\r\n                \"parameterName\": \"SEEDING_DATE\",\r\n                \"description\": \"Date Seeded - applied (yyyymmdd)\",\r\n                \"unit\": \"Date (yyyymmdd) of SEEDING_DATE\",\r\n                \"unitPUI\": \"17274\",\r\n                \"value\": \"20210601\",\r\n                \"parameterPUI\": \"8383\"\r\n            },\r\n            {\r\n                \"parameterName\": \"PlotLng_m\",\r\n                \"description\": \"Plot length\",\r\n                \"unit\": \"m\",\r\n                \"unitPUI\": \"6086\",\r\n                \"value\": \"5\",\r\n                \"parameterPUI\": \"8760\"\r\n            }\r\n        ],\r\n        \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"doi:10.155454/12341234\",\r\n                \"referenceSource\": \"DOI\"\r\n            },\r\n            {\r\n                \"referenceID\": \"http://purl.obolibrary.org/obo/ro.owl\",\r\n                \"referenceSource\": \"OBO Library\"\r\n            },\r\n            {\r\n                \"referenceID\": \"75a50e76\",\r\n                \"referenceSource\": \"Remote Data Collection Upload Tool\"\r\n            }\r\n        ],\r\n        \"locationDbId\": \"3953\",\r\n        \"seasons\": [\r\n            \"Dry season\"\r\n        ],\r\n        \"trialDbId\": {{createdTrialPrep}}\r\n    },\r\n    {\r\n        \"environmentParameters\": [\r\n            {\r\n                \"parameterName\": \"SITE_SOIL_PH\",\r\n                \"description\": \"Soil acidity - ph meter (pH)\",\r\n                \"unit\": \"pH\",\r\n                \"unitPUI\": \"6100\",\r\n                \"value\": \"7.5\",\r\n                \"parameterPUI\": \"8270\"\r\n            },\r\n            {\r\n                \"parameterName\": \"Selection_Trait\",\r\n                \"description\": \"Values indicate trait(s) under selection in a particular advancement process\",\r\n                \"unit\": \"STCodes\",\r\n                \"unitPUI\": \"17284\",\r\n                \"value\": \"DH\",\r\n                \"parameterPUI\": \"17290\"\r\n            },\r\n            {\r\n                \"parameterName\": \"SEEDING_DATE\",\r\n                \"description\": \"Date Seeded - applied (yyyymmdd)\",\r\n                \"unit\": \"Date (yyyymmdd) of SEEDING_DATE\",\r\n                \"unitPUI\": \"17274\",\r\n                \"value\": \"20210601\",\r\n                \"parameterPUI\": \"8383\"\r\n            },\r\n            {\r\n                \"parameterName\": \"PlotLng_m\",\r\n                \"description\": \"Plot length\",\r\n                \"unit\": \"m\",\r\n                \"unitPUI\": \"6086\",\r\n                \"value\": \"5\",\r\n                \"parameterPUI\": \"8760\"\r\n            }\r\n        ],\r\n        \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"doi:10.155454/12341234\",\r\n                \"referenceSource\": \"DOI\"\r\n            },\r\n            {\r\n                \"referenceID\": \"http://purl.obolibrary.org/obo/ro.owl\",\r\n                \"referenceSource\": \"OBO Library\"\r\n            },\r\n            {\r\n                \"referenceID\": \"75a50e76\",\r\n                \"referenceSource\": \"Remote Data Collection Upload Tool\"\r\n            }\r\n        ],\r\n        \"locationDbId\": \"3953\",\r\n        \"seasons\": [\r\n            \"Wet season\"\r\n        ],\r\n        \"trialDbId\": {{createdTrialPrep}}\r\n    }\r\n]"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/studies",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"studies"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered characters greater than max length of referenceResource field",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"//Check status",
											"pm.test(\"Check messageType\", function () {",
											"    pm.expect(jsonData.metadata.status[0].messageType).to.eql(\"INFO\");",
											"});",
											"pm.test(\"Check message\", function () {",
											"    pm.expect(jsonData.metadata.status[0].message).to.eql(\"0 out of 1 studies created successfully.\");",
											"});",
											"pm.test(\"Check messageType\", function () {",
											"    pm.expect(jsonData.metadata.status[1].messageType).to.eql(\"ERROR\");",
											"});;",
											"pm.test(\"Check if error message for missing trialName\", function () {",
											"    pm.expect(jsonData.metadata.status[1].message).to.eql(\"ERROR1 Study at position 1 is invalid because referenceSource in referenceSource must not exceed length of 255.\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n\t{\r\n\t\t\"environmentParameters\": [\r\n\t\t\t{\r\n\t\t\t\t\"parameterName\": \"SITE_SOIL_PH\",\r\n\t\t\t\t\"description\": \"Soil acidity - ph meter (pH)\",\r\n\t\t\t\t\"unit\": \"pH\",\r\n\t\t\t\t\"unitPUI\": \"6100\",\r\n\t\t\t\t\"value\": \"7.5\",\r\n\t\t\t\t\"parameterPUI\": \"8270\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"parameterName\": \"COOPERATOR_ID\",\r\n\t\t\t\t\"description\": \"COOPERATOR ID -Assigned (DBID)\",\r\n\t\t\t\t\"unit\": \"Person id\",\r\n\t\t\t\t\"unitPUI\": \"1901\",\r\n\t\t\t\t\"value\": \"1\",\r\n\t\t\t\t\"parameterPUI\": \"8372\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"parameterName\": \"Selection_Trait\",\r\n\t\t\t\t\"description\": \"Values indicate trait(s) under selection in a particular advancement process\",\r\n\t\t\t\t\"unit\": \"STCodes\",\r\n\t\t\t\t\"unitPUI\": \"17284\",\r\n\t\t\t\t\"value\": \"DH\",\r\n\t\t\t\t\"parameterPUI\": \"17290\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"parameterName\": \"SEEDING_DATE\",\r\n\t\t\t\t\"description\": \"Date Seeded - applied (yyyymmdd)\",\r\n\t\t\t\t\"unit\": \"Date (yyyymmdd) of SEEDING_DATE\",\r\n\t\t\t\t\"unitPUI\": \"17274\",\r\n\t\t\t\t\"value\": \"20210601\",\r\n\t\t\t\t\"parameterPUI\": \"8383\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"parameterName\": \"SITE_ALT\",\r\n\t\t\t\t\"description\": \"Altitude of site - observed (m)\",\r\n\t\t\t\t\"unit\": \"m\",\r\n\t\t\t\t\"unitPUI\": \"6086\",\r\n\t\t\t\t\"value\": \"67.0\",\r\n\t\t\t\t\"parameterPUI\": \"8194\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"externalReferences\": [\r\n\t\t\t{\r\n\t\t\t\t\"referenceID\": \"doi:10.155454/12341234\",\r\n\t\t\t\t\"referenceSource\": \"referenceResourceeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"referenceID\": \"http://purl.obolibrary.org/obo/ro.owl\",\r\n\t\t\t\t\"referenceSource\": \"OBO Library\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"referenceID\": \"75a50e76\",\r\n\t\t\t\t\"referenceSource\": \"Remote Data Collection Upload Tool\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"locationDbId\": \"3953\",\r\n\t\t\"seasons\": [\r\n\t\t\t\"Dry season\"\r\n\t\t],\r\n\t\t\"trialDbId\": {{createdTrialDbId}}\r\n\t}\r\n]"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/studies",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"studies"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when no trialDbId specified",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"//Check status",
											"pm.test(\"Check messageType\", function () {",
											"    pm.expect(jsonData.metadata.status[0].messageType).to.eql(\"INFO\");",
											"});",
											"pm.test(\"Check message\", function () {",
											"    pm.expect(jsonData.metadata.status[0].message).to.eql(\"0 out of 1 studies created successfully.\");",
											"});",
											"pm.test(\"Check messageType\", function () {",
											"    pm.expect(jsonData.metadata.status[1].messageType).to.eql(\"ERROR\");",
											"});;",
											"pm.test(\"Check if error message for missing trialName\", function () {",
											"    pm.expect(jsonData.metadata.status[1].message).to.eql(\"ERROR1 Study at position 1 is invalid because the trialDbId is not specified.\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n\t{\r\n\t\t\"environmentParameters\": [\r\n\t\t\t{\r\n\t\t\t\t\"parameterName\": \"SITE_SOIL_PH\",\r\n\t\t\t\t\"description\": \"Soil acidity - ph meter (pH)\",\r\n\t\t\t\t\"unit\": \"pH\",\r\n\t\t\t\t\"unitPUI\": \"6100\",\r\n\t\t\t\t\"value\": \"7.5\",\r\n\t\t\t\t\"parameterPUI\": \"8270\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"parameterName\": \"COOPERATOR_ID\",\r\n\t\t\t\t\"description\": \"COOPERATOR ID -Assigned (DBID)\",\r\n\t\t\t\t\"unit\": \"Person id\",\r\n\t\t\t\t\"unitPUI\": \"1901\",\r\n\t\t\t\t\"value\": \"1\",\r\n\t\t\t\t\"parameterPUI\": \"8372\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"parameterName\": \"Selection_Trait\",\r\n\t\t\t\t\"description\": \"Values indicate trait(s) under selection in a particular advancement process\",\r\n\t\t\t\t\"unit\": \"STCodes\",\r\n\t\t\t\t\"unitPUI\": \"17284\",\r\n\t\t\t\t\"value\": \"DH\",\r\n\t\t\t\t\"parameterPUI\": \"17290\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"parameterName\": \"SEEDING_DATE\",\r\n\t\t\t\t\"description\": \"Date Seeded - applied (yyyymmdd)\",\r\n\t\t\t\t\"unit\": \"Date (yyyymmdd) of SEEDING_DATE\",\r\n\t\t\t\t\"unitPUI\": \"17274\",\r\n\t\t\t\t\"value\": \"20210601\",\r\n\t\t\t\t\"parameterPUI\": \"8383\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"parameterName\": \"SITE_ALT\",\r\n\t\t\t\t\"description\": \"Altitude of site - observed (m)\",\r\n\t\t\t\t\"unit\": \"m\",\r\n\t\t\t\t\"unitPUI\": \"6086\",\r\n\t\t\t\t\"value\": \"67.0\",\r\n\t\t\t\t\"parameterPUI\": \"8194\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"externalReferences\": [\r\n\t\t\t{\r\n\t\t\t\t\"referenceID\": \"doi:10.155454/12341234\",\r\n\t\t\t\t\"referenceSource\": \"DOI\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"referenceID\": \"http://purl.obolibrary.org/obo/ro.owl\",\r\n\t\t\t\t\"referenceSource\": \"OBO Library\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"referenceID\": \"75a50e76\",\r\n\t\t\t\t\"referenceSource\": \"Remote Data Collection Upload Tool\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"locationDbId\": \"3953\",\r\n\t\t\"seasons\": [\r\n\t\t\t\"Dry season\"\r\n\t\t]\r\n\t}\r\n]"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/studies",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"studies"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered non-existing locationDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"//Check status",
											"pm.test(\"Check messageType\", function () {",
											"    pm.expect(jsonData.metadata.status[0].messageType).to.eql(\"INFO\");",
											"});",
											"pm.test(\"Check message\", function () {",
											"    pm.expect(jsonData.metadata.status[0].message).to.eql(\"0 out of 1 studies created successfully.\");",
											"});",
											"pm.test(\"Check messageType\", function () {",
											"    pm.expect(jsonData.metadata.status[1].messageType).to.eql(\"ERROR\");",
											"});;",
											"pm.test(\"Check if error message for missing trialName\", function () {",
											"    pm.expect(jsonData.metadata.status[1].message).to.eql(\"ERROR1 Study at position 1 is invalid because the locationDbId is invalid.\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n\t{\r\n\t\t\"environmentParameters\": [\r\n\t\t\t{\r\n\t\t\t\t\"parameterName\": \"SITE_SOIL_PH\",\r\n\t\t\t\t\"description\": \"Soil acidity - ph meter (pH)\",\r\n\t\t\t\t\"unit\": \"pH\",\r\n\t\t\t\t\"unitPUI\": \"6100\",\r\n\t\t\t\t\"value\": \"7.5\",\r\n\t\t\t\t\"parameterPUI\": \"8270\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"parameterName\": \"COOPERATOR_ID\",\r\n\t\t\t\t\"description\": \"COOPERATOR ID -Assigned (DBID)\",\r\n\t\t\t\t\"unit\": \"Person id\",\r\n\t\t\t\t\"unitPUI\": \"1901\",\r\n\t\t\t\t\"value\": \"1\",\r\n\t\t\t\t\"parameterPUI\": \"8372\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"parameterName\": \"Selection_Trait\",\r\n\t\t\t\t\"description\": \"Values indicate trait(s) under selection in a particular advancement process\",\r\n\t\t\t\t\"unit\": \"STCodes\",\r\n\t\t\t\t\"unitPUI\": \"17284\",\r\n\t\t\t\t\"value\": \"DH\",\r\n\t\t\t\t\"parameterPUI\": \"17290\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"parameterName\": \"SEEDING_DATE\",\r\n\t\t\t\t\"description\": \"Date Seeded - applied (yyyymmdd)\",\r\n\t\t\t\t\"unit\": \"Date (yyyymmdd) of SEEDING_DATE\",\r\n\t\t\t\t\"unitPUI\": \"17274\",\r\n\t\t\t\t\"value\": \"20210601\",\r\n\t\t\t\t\"parameterPUI\": \"8383\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"parameterName\": \"SITE_ALT\",\r\n\t\t\t\t\"description\": \"Altitude of site - observed (m)\",\r\n\t\t\t\t\"unit\": \"m\",\r\n\t\t\t\t\"unitPUI\": \"6086\",\r\n\t\t\t\t\"value\": \"67.0\",\r\n\t\t\t\t\"parameterPUI\": \"8194\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"externalReferences\": [\r\n\t\t\t{\r\n\t\t\t\t\"referenceID\": \"doi:10.155454/12341234\",\r\n\t\t\t\t\"referenceSource\": \"DOI\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"referenceID\": \"http://purl.obolibrary.org/obo/ro.owl\",\r\n\t\t\t\t\"referenceSource\": \"OBO Library\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"referenceID\": \"75a50e76\",\r\n\t\t\t\t\"referenceSource\": \"Remote Data Collection Upload Tool\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"locationDbId\": \"9999\",\r\n\t\t\"seasons\": [\r\n\t\t\t\"Dry season\"\r\n\t\t],\r\n\t\t\"trialDbId\": {{createdTrialDbId}}\r\n\t}\r\n]"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/studies",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"studies"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						},
						{
							"name": "Verify posting details with Crop_season_Code on environment parameters and no seasons parameter",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"var index = 0",
											"//Check status",
											"pm.test(\"Check messageType\", function () {",
											"    pm.expect(jsonData.metadata.status[index].messageType).to.eql(\"INFO\");",
											"});",
											"pm.test(\"Check message\", function () {",
											"    pm.expect(jsonData.metadata.status[index].message).to.eql(\"1 out of 1 studies created successfully.\");",
											"});",
											"",
											"//Check additionalInfo",
											"pm.test(\"Check if additionalInfo Study institute ID - conducted (DBID) returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].additionalInfo['Study institute ID - conducted (DBID)']).to.eql(\"12345\");",
											"});",
											"pm.test(\"Check if additionalInfo Target Region Variable\", function () {",
											"    pm.expect(jsonData.result.data[index].additionalInfo['Target Region Variable']).to.eql(\"\");",
											"});",
											"pm.test(\"Check if additionalInfo Project Prefix BCID Variable returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].additionalInfo['Project Prefix BCID Variable']).to.eql(\"\");",
											"});",
											"pm.test(\"Check if additionalInfo Breeding Method returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].additionalInfo['Breeding method applied to all plots in a study (CODE)']).to.eql(\"WCO\");",
											"});",
											"pm.test(\"Check if additionalInfo Study institute returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].additionalInfo['Study institute -conducted (DBCV)']).to.eql(\"INSTITUTE 1\");",
											"});",
											"pm.test(\"Check if additionalInfo studyObjective returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].additionalInfo['studyObjective']).to.eql(\"\");",
											"});",
											"pm.test(\"Check if additionalInfo Date the study was created returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].additionalInfo['Date the study was created']).to.eql(\"20210526\");",
											"});",
											"",
											"//Check contacts",
											"pm.test(\"Check if contacts is empty\", function () {",
											"    pm.expect(jsonData.result.data[index].contacts).to.eql([]);",
											"});",
											"",
											"pm.test(\"Check if dataLinks returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].dataLinks).to.eql([   ]);",
											"});",
											"",
											"//Check environmentParameters",
											"pm.test(\"Check if environmentParameters parameterNames are correct\", function () {",
											"   var paramNames = [",
											"       \"SITE_SOIL_PH\",",
											"       \"Selection_Trait\",",
											"       \"Crop_season_Code\",",
											"       \"SEEDING_DATE\",",
											"       \"PlotLng_m\"];",
											"   for (var i = 0; i < jsonData.result.data[index].environmentParameters.length; i++) {",
											"    pm.expect(jsonData.result.data[index].environmentParameters[i].parameterName).to.eql(paramNames[i]);",
											"   }",
											"});",
											"",
											"pm.test(\"Check if environmentParameters descriptions are correct\", function () {",
											"   var descriptions = [",
											"       \"Soil acidity - ph meter (pH)\",",
											"       \"Values indicate trait(s) under selection in a particular advancement process\",",
											"       \"Season - Assigned (Code)\",",
											"       \"Date Seeded - applied (yyyymmdd)\",",
											"       \"Plot length\"];",
											"   for (var i = 0; i < jsonData.result.data[index].environmentParameters.length; i++) {",
											"    pm.expect(jsonData.result.data[index].environmentParameters[i].description).to.eql(descriptions[i]);",
											"   }",
											"});",
											"",
											"pm.test(\"Check if environmentParameters units are correct\", function () {",
											"   var units = [",
											"       \"pH\",",
											"       \"STCodes\",",
											"       \"Code of Crop_season_Code\",",
											"       \"Date (yyyymmdd) of SEEDING_DATE\",",
											"       \"m\"];",
											"   for (var i = 0; i < jsonData.result.data[index].environmentParameters.length; i++) {",
											"    pm.expect(jsonData.result.data[index].environmentParameters[i].unit).to.eql(units[i]);",
											"   }",
											"});",
											"",
											"pm.test(\"Check if environmentParameters unitPUIs are correct\", function () {",
											"   var unitPUIs = [\"6100\",\"17284\",\"17273\",\"17274\",\"6086\"];",
											"   for (var i = 0; i < jsonData.result.data[index].environmentParameters.length; i++) {",
											"    pm.expect(jsonData.result.data[index].environmentParameters[i].unitPUI).to.eql(unitPUIs[i]);",
											"   }",
											"});",
											"pm.test(\"Check if environmentParameters values are correct\", function () {",
											"   var values = [\"7.5\",\"DH\",\"1\",\"20210601\",\"5\"];",
											"   for (var i = 0; i < jsonData.result.data[index].environmentParameters.length; i++) {",
											"    pm.expect(jsonData.result.data[index].environmentParameters[i].value).to.eql(values[i]);",
											"   }",
											"});",
											"pm.test(\"Check if environmentParameters parameterPUIs are correct\", function () {",
											"   var parameterPUIs = [\"8270\",\"17290\",\"8371\",\"8383\",\"8760\"];",
											"   for (var i = 0; i < jsonData.result.data[index].environmentParameters.length; i++) {",
											"    pm.expect(jsonData.result.data[index].environmentParameters[i].parameterPUI).to.eql(parameterPUIs[i]);",
											"   }",
											"});",
											"",
											"//Check experimental design",
											"",
											"pm.test(\"Check if experimentalDesign description returned is correct\", function () {",
											"     pm.expect(jsonData.result.data[index].experimentalDesign.description).to.eql(\"Externally generated design\");",
											"});",
											"pm.test(\"Check if experimentalDesign pui returned is correct\", function () {",
											"     pm.expect(jsonData.result.data[index].experimentalDesign.pui).to.eql(\"10168\");",
											"});",
											"//Check external reference",
											"pm.test(\"Check if externalReferences referenceIDs are correct\", function () {",
											"   var referenceIDs = [",
											"       \"doi:10.155454/12341234\",",
											"       \"http://purl.obolibrary.org/obo/ro.owl\",",
											"       \"75a50e76\"];",
											"   for (var i = 0; i < jsonData.result.data[index].externalReferences.length; i++) {",
											"    pm.expect(jsonData.result.data[index].externalReferences[i].referenceID).to.eql(referenceIDs[i]);",
											"   }",
											"});",
											"",
											"pm.test(\"Check if externalReferences referenceSources are correct\", function () {",
											"   var referenceSources = [",
											"       \"DOI\",",
											"       \"OBO Library\",",
											"       \"Remote Data Collection Upload Tool\"];",
											"   for (var i = 0; i < jsonData.result.data[index].externalReferences.length; i++) {",
											"    pm.expect(jsonData.result.data[index].externalReferences[i].referenceSource).to.eql(referenceSources[i]);",
											"   }",
											"});",
											"",
											"pm.test(\"Check if lastUpdate timeStamp returned is correct\", function () {    ",
											"    var moment = require('moment');",
											"     pm.expect(jsonData.result.data[index].lastUpdate.timeStamp).to.eql(moment().format((\"YYYYMMDD\")))",
											"});",
											"pm.test(\"Check if lastUpdate version returned is correct\", function () {",
											"     pm.expect(jsonData.result.data[index].lastUpdate.version).to.eql(\"1.0\");",
											"});",
											"pm.test(\"Check if observationUnitsDescription returned is correct\", function () {",
											"     pm.expect(jsonData.result.data[index].observationUnitsDescription).to.eql(\"\");",
											"});",
											"pm.test(\"Check if studyCode returned is correct\", function () {",
											"     pm.expect(jsonData.result.data[index].studyCode).to.eql(\"\");",
											"});",
											"pm.test(\"Check if studyDescription returned is correct\", function () {",
											"     pm.expect(jsonData.result.data[index].studyDescription).to.eql(\"Study description\");",
											"});",
											"",
											"pm.test(\"Check if studyPUI returned is correct\", function () {",
											"     pm.expect(jsonData.result.data[index].studyPUI).to.not.be.null;",
											"});",
											"pm.test(\"Check if observationLevels levelName returned is correct\", function () {",
											"     pm.expect(jsonData.result.data[index].observationLevels[0].levelName).to.eql(\"study\");",
											"});",
											"pm.test(\"Check if observationLevels levelOrder returned is correct\", function () {",
											"     pm.expect(jsonData.result.data[index].observationLevels[0].levelOrder).to.eql(4);",
											"});",
											"",
											"pm.test(\"Check if active returned is correct\", function () {",
											"     pm.expect(jsonData.result.data[index].active).to.eql(true);",
											"});",
											"",
											"",
											"pm.test(\"Check if startDate returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].startDate).to.eql(\"2021-05-26T00:00:00.000Z\");",
											"});",
											"pm.test(\"Check if endDate returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].endDate).to.eql(\"2022-12-31T00:00:00.000Z\");",
											"});",
											"pm.test(\"Check if studyDbId returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].studyDbId).to.eql(\"128\");",
											"});",
											"pm.test(\"Check if studyName returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].studyName).to.eql(\"Study w complete details Environment Number 3\");",
											"});",
											"",
											"pm.test(\"Check if studyTypeDbId returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].studyTypeDbId).to.eql(\"6\");",
											"});",
											"",
											"pm.test(\"Check if studyTypeName returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].studyTypeName).to.eql(\"Trial\");",
											"});",
											"",
											"pm.test(\"Check if seasons returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].seasons[0]).to.eql(\"Wet season\");",
											"});",
											"",
											"pm.test(\"Check if programDbId returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].programDbId).to.eql(\"c9e335d2-3057-4958-a43e-e38cf61d09ca\");",
											"});",
											"",
											"pm.test(\"Check if locationName returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].locationName).to.eql(\"Aargau\");",
											"});",
											"pm.test(\"Check if locationDbId returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].locationDbId).to.eql(\"3953\");",
											"});",
											"pm.test(\"Check if programName returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].programName).to.eql(\"API Program\");",
											"});",
											"pm.test(\"Check if trialName returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].trialName).to.eql(\"Study w complete details\");",
											"});",
											"pm.test(\"Check if trialDbId returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].trialDbId).to.eql(pm.environment.get(\"createdTrialDbId\"));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n    {\r\n        \"environmentParameters\": [\r\n            {\r\n                \"parameterName\": \"SITE_SOIL_PH\",\r\n                \"description\": \"Soil acidity - ph meter (pH)\",\r\n                \"unit\": \"pH\",\r\n                \"unitPUI\": \"6100\",\r\n                \"value\": \"7.5\",\r\n                \"parameterPUI\": \"8270\"\r\n            },\r\n            {\r\n                \"parameterName\": \"Selection_Trait\",\r\n                \"description\": \"Values indicate trait(s) under selection in a particular advancement process\",\r\n                \"unit\": \"STCodes\",\r\n                \"unitPUI\": \"17284\",\r\n                \"value\": \"DH\",\r\n                \"parameterPUI\": \"17290\"\r\n            },\r\n            {\r\n                \"parameterName\": \"SEEDING_DATE\",\r\n                \"description\": \"Date Seeded - applied (yyyymmdd)\",\r\n                \"unit\": \"Date (yyyymmdd) of SEEDING_DATE\",\r\n                \"unitPUI\": \"17274\",\r\n                \"value\": \"20210601\",\r\n                \"parameterPUI\": \"8383\"\r\n            },\r\n            {\r\n                \"parameterName\": \"PlotLng_m\",\r\n                \"description\": \"Plot length\",\r\n                \"unit\": \"m\",\r\n                \"unitPUI\": \"6086\",\r\n                \"value\": \"5\",\r\n                \"parameterPUI\": \"8760\"\r\n            },\r\n            {\r\n                \"parameterName\": \"Crop_season_Code\",\r\n                \"description\": \"Season - Assigned (Code)\",\r\n                \"unit\": \"Code of Crop_season_Code\",\r\n                \"unitPUI\": \"17273\",\r\n                \"value\": \"1\",\r\n                \"parameterPUI\": \"8371\"\r\n            }\r\n        ],\r\n        \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"doi:10.155454/12341234\",\r\n                \"referenceSource\": \"DOI\"\r\n            },\r\n            {\r\n                \"referenceID\": \"http://purl.obolibrary.org/obo/ro.owl\",\r\n                \"referenceSource\": \"OBO Library\"\r\n            },\r\n            {\r\n                \"referenceID\": \"75a50e76\",\r\n                \"referenceSource\": \"Remote Data Collection Upload Tool\"\r\n            }\r\n        ],\r\n        \"locationDbId\": \"3953\",\r\n        \"trialDbId\": {{createdTrialDbId}}\r\n    }\r\n]"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/studies",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"studies"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						},
						{
							"name": "Verify posting details for an existing study with existing design",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"var index = 0",
											"//Check status",
											"pm.test(\"Check messageType\", function () {",
											"    pm.expect(jsonData.metadata.status[index].messageType).to.eql(\"INFO\");",
											"});",
											"pm.test(\"Check message\", function () {",
											"    pm.expect(jsonData.metadata.status[index].message).to.eql(\"1 out of 1 studies created successfully.\");",
											"});",
											"",
											"pm.test(\"Check if additionalInfo studyObjective returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].additionalInfo['studyObjective']).to.eql(\"\");",
											"});",
											"",
											"pm.test(\"Check if contacts is empty\", function () {",
											"    pm.expect(jsonData.result.data[index].contacts).to.eql([]);",
											"});",
											"pm.test(\"Check if dataLinks returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].dataLinks).to.eql([   ]);",
											"});",
											"",
											"//Check environmentParameters",
											"pm.test(\"Check if environmentParameters parameterNames are correct\", function () {",
											"   var paramNames = [",
											"       \"SITE_SOIL_PH\",",
											"       \"Selection_Trait\",",
											"       \"Crop_season_Code\",",
											"       \"SEEDING_DATE\",",
											"       \"PlotLng_m\"];",
											"   for (var i = 0; i < jsonData.result.data[index].environmentParameters.length; i++) {",
											"    pm.expect(jsonData.result.data[index].environmentParameters[i].parameterName).to.eql(paramNames[i]);",
											"   }",
											"});",
											"",
											"pm.test(\"Check if environmentParameters descriptions are correct\", function () {",
											"   var descriptions = [",
											"       \"Soil acidity - ph meter (pH)\",",
											"       \"Values indicate trait(s) under selection in a particular advancement process\",",
											"       \"Season - Assigned (Code)\",",
											"       \"Date Seeded - applied (yyyymmdd)\",",
											"       \"Plot length\"];",
											"   for (var i = 0; i < jsonData.result.data[index].environmentParameters.length; i++) {",
											"    pm.expect(jsonData.result.data[index].environmentParameters[i].description).to.eql(descriptions[i]);",
											"   }",
											"});",
											"",
											"pm.test(\"Check if environmentParameters units are correct\", function () {",
											"   var units = [",
											"       \"pH\",",
											"       \"STCodes\",",
											"       \"Code of Crop_season_Code\",",
											"       \"Date (yyyymmdd) of SEEDING_DATE\",",
											"       \"m\"];",
											"   for (var i = 0; i < jsonData.result.data[index].environmentParameters.length; i++) {",
											"    pm.expect(jsonData.result.data[index].environmentParameters[i].unit).to.eql(units[i]);",
											"   }",
											"});",
											"",
											"pm.test(\"Check if environmentParameters unitPUIs are correct\", function () {",
											"   var unitPUIs = [\"6100\",\"17284\",\"17273\",\"17274\",\"6086\"];",
											"   for (var i = 0; i < jsonData.result.data[index].environmentParameters.length; i++) {",
											"    pm.expect(jsonData.result.data[index].environmentParameters[i].unitPUI).to.eql(unitPUIs[i]);",
											"   }",
											"});",
											"pm.test(\"Check if environmentParameters values are correct\", function () {",
											"   var values = [\"7.5\",\"DH\",\"1\",\"20210601\",\"5\"];",
											"   for (var i = 0; i < jsonData.result.data[index].environmentParameters.length; i++) {",
											"    pm.expect(jsonData.result.data[index].environmentParameters[i].value).to.eql(values[i]);",
											"   }",
											"});",
											"pm.test(\"Check if environmentParameters parameterPUIs are correct\", function () {",
											"   var parameterPUIs = [\"8270\",\"17290\",\"8371\",\"8383\",\"8760\"];",
											"   for (var i = 0; i < jsonData.result.data[index].environmentParameters.length; i++) {",
											"    pm.expect(jsonData.result.data[index].environmentParameters[i].parameterPUI).to.eql(parameterPUIs[i]);",
											"   }",
											"});",
											"",
											"//Check external reference",
											"pm.test(\"Check if externalReferences referenceIDs are correct\", function () {",
											"   var referenceIDs = [",
											"       \"doi:10.155454/12341234\",",
											"       \"http://purl.obolibrary.org/obo/ro.owl\",",
											"       \"75a50e76\"];",
											"   for (var i = 0; i < jsonData.result.data[index].externalReferences.length; i++) {",
											"    pm.expect(jsonData.result.data[index].externalReferences[i].referenceID).to.eql(referenceIDs[i]);",
											"   }",
											"});",
											"",
											"pm.test(\"Check if externalReferences referenceSources are correct\", function () {",
											"   var referenceSources = [",
											"       \"DOI\",",
											"       \"OBO Library\",",
											"       \"Remote Data Collection Upload Tool\"];",
											"   for (var i = 0; i < jsonData.result.data[index].externalReferences.length; i++) {",
											"    pm.expect(jsonData.result.data[index].externalReferences[i].referenceSource).to.eql(referenceSources[i]);",
											"   }",
											"});",
											"",
											"pm.test(\"Check if lastUpdate timeStamp returned is correct\", function () {    ",
											"     pm.expect(jsonData.result.data[index].lastUpdate.timeStamp).to.eql(\"20200316\")",
											"});",
											"pm.test(\"Check if lastUpdate version returned is correct\", function () {",
											"     pm.expect(jsonData.result.data[index].lastUpdate.version).to.eql(\"1.0\");",
											"});",
											"pm.test(\"Check if observationUnitsDescription returned is correct\", function () {",
											"     pm.expect(jsonData.result.data[index].observationUnitsDescription).to.eql(\"\");",
											"});",
											"pm.test(\"Check if studyCode returned is correct\", function () {",
											"     pm.expect(jsonData.result.data[index].studyCode).to.eql(\"\");",
											"});",
											"pm.test(\"Check if studyDescription returned is correct\", function () {",
											"     pm.expect(jsonData.result.data[index].studyDescription).to.eql(\"Nursery 1\");",
											"});",
											"",
											"pm.test(\"Check if studyPUI returned is correct\", function () {",
											"     pm.expect(jsonData.result.data[index].studyPUI).to.not.be.null;",
											"});",
											"pm.test(\"Check if observationLevels levelName returned is correct\", function () {",
											"     pm.expect(jsonData.result.data[index].observationLevels[0].levelName).to.eql(\"study\");",
											"});",
											"pm.test(\"Check if observationLevels levelOrder returned is correct\", function () {",
											"     pm.expect(jsonData.result.data[index].observationLevels[0].levelOrder).to.eql(4);",
											"});",
											"",
											"pm.test(\"Check if active returned is correct\", function () {",
											"     pm.expect(jsonData.result.data[index].active).to.eql(false);",
											"});",
											"",
											"",
											"pm.test(\"Check if startDate returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].startDate).to.eql(\"2018-10-25T00:00:00.000Z\");",
											"});",
											"pm.test(\"Check if endDate returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].endDate).to.eql(\"2019-10-25T00:00:00.000Z\");",
											"});",
											"pm.test(\"Check if studyDbId returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].studyDbId).to.eql(\"129\");",
											"});",
											"pm.test(\"Check if studyName returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].studyName).to.eql(\"Study with Imported Cross Nursery 2018002 Environment Number 3\");",
											"});",
											"",
											"pm.test(\"Check if studyTypeDbId returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].studyTypeDbId).to.eql(\"1\");",
											"});",
											"",
											"pm.test(\"Check if studyTypeName returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].studyTypeName).to.eql(\"Nursery\");",
											"});",
											"",
											"pm.test(\"Check if seasons returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].seasons[0]).to.eql(\"Wet season\");",
											"});",
											"",
											"pm.test(\"Check if programDbId returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].programDbId).to.eql(\"c9e335d2-3057-4958-a43e-e38cf61d09ca\");",
											"});",
											"",
											"pm.test(\"Check if locationName returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].locationName).to.eql(\"Aargau\");",
											"});",
											"pm.test(\"Check if locationDbId returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].locationDbId).to.eql(\"3953\");",
											"});",
											"pm.test(\"Check if programName returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].programName).to.eql(\"API Program\");",
											"});",
											"pm.test(\"Check if trialName returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].trialName).to.eql(\"Study with Imported Cross Nursery 2018002\");",
											"});",
											"pm.test(\"Check if trialDbId returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].trialDbId).to.eql(pm.environment.get(\"studyId\"));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n    {\r\n        \"environmentParameters\": [\r\n            {\r\n                \"parameterName\": \"SITE_SOIL_PH\",\r\n                \"description\": \"Soil acidity - ph meter (pH)\",\r\n                \"unit\": \"pH\",\r\n                \"unitPUI\": \"6100\",\r\n                \"value\": \"7.5\",\r\n                \"parameterPUI\": \"8270\"\r\n            },\r\n            {\r\n                \"parameterName\": \"Selection_Trait\",\r\n                \"description\": \"Values indicate trait(s) under selection in a particular advancement process\",\r\n                \"unit\": \"STCodes\",\r\n                \"unitPUI\": \"17284\",\r\n                \"value\": \"DH\",\r\n                \"parameterPUI\": \"17290\"\r\n            },\r\n            {\r\n                \"parameterName\": \"SEEDING_DATE\",\r\n                \"description\": \"Date Seeded - applied (yyyymmdd)\",\r\n                \"unit\": \"Date (yyyymmdd) of SEEDING_DATE\",\r\n                \"unitPUI\": \"17274\",\r\n                \"value\": \"20210601\",\r\n                \"parameterPUI\": \"8383\"\r\n            },\r\n            {\r\n                \"parameterName\": \"PlotLng_m\",\r\n                \"description\": \"Plot length\",\r\n                \"unit\": \"m\",\r\n                \"unitPUI\": \"6086\",\r\n                \"value\": \"5\",\r\n                \"parameterPUI\": \"8760\"\r\n            },\r\n            {\r\n                \"parameterName\": \"Crop_season_Code\",\r\n                \"description\": \"Season - Assigned (Code)\",\r\n                \"unit\": \"Code of Crop_season_Code\",\r\n                \"unitPUI\": \"17273\",\r\n                \"value\": \"1\",\r\n                \"parameterPUI\": \"8371\"\r\n            }\r\n        ],\r\n        \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"doi:10.155454/12341234\",\r\n                \"referenceSource\": \"DOI\"\r\n            },\r\n            {\r\n                \"referenceID\": \"http://purl.obolibrary.org/obo/ro.owl\",\r\n                \"referenceSource\": \"OBO Library\"\r\n            },\r\n            {\r\n                \"referenceID\": \"75a50e76\",\r\n                \"referenceSource\": \"Remote Data Collection Upload Tool\"\r\n            }\r\n        ],\r\n        \"locationDbId\": \"3953\",\r\n        \"trialDbId\": {{studyId}}\r\n    }\r\n]"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/studies",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"studies"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered required details only",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"var index = 0",
											"",
											"//Check status",
											"pm.test(\"Check messageType\", function () {",
											"    pm.expect(jsonData.metadata.status[index].messageType).to.eql(\"INFO\");",
											"});",
											"pm.test(\"Check message\", function () {",
											"    pm.expect(jsonData.metadata.status[index].message).to.eql(\"1 out of 1 studies created successfully.\");",
											"});",
											"",
											"//Check additionalInfo",
											"pm.test(\"Check if additionalInfo Study institute ID - conducted (DBID) returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].additionalInfo['Study institute ID - conducted (DBID)']).to.eql(\"12345\");",
											"});",
											"pm.test(\"Check if additionalInfo Target Region Variable\", function () {",
											"    pm.expect(jsonData.result.data[index].additionalInfo['Target Region Variable']).to.eql(\"\");",
											"});",
											"pm.test(\"Check if additionalInfo Project Prefix BCID Variable returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].additionalInfo['Project Prefix BCID Variable']).to.eql(\"\");",
											"});",
											"pm.test(\"Check if additionalInfo Breeding Method returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].additionalInfo['Breeding method applied to all plots in a study (CODE)']).to.eql(\"WCO\");",
											"});",
											"pm.test(\"Check if additionalInfo Study institute returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].additionalInfo['Study institute -conducted (DBCV)']).to.eql(\"INSTITUTE 1\");",
											"});",
											"pm.test(\"Check if additionalInfo studyObjective returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].additionalInfo['studyObjective']).to.eql(\"\");",
											"});",
											"pm.test(\"Check if additionalInfo Date the study was created returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].additionalInfo['Date the study was created']).to.eql(\"20210526\");",
											"});",
											"",
											"//Check contacts",
											"pm.test(\"Check if contacts returned is empty\", function () {",
											"    pm.expect(jsonData.result.data[index].contacts).to.eql([]);",
											"});",
											"pm.test(\"Check if dataLinks returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].dataLinks).to.eql([   ]);",
											"});",
											"",
											"//Check environmentParameters",
											"pm.test(\"Check if environmentParameters parameterNames are correct\", function () {",
											"   var paramNames = [",
											"       \"SITE_ALT\"];",
											"   for (var i = 0; i < jsonData.result.data[index].environmentParameters.length; i++) {",
											"    pm.expect(jsonData.result.data[index].environmentParameters[i].parameterName).to.eql(paramNames[i]);",
											"   }",
											"});",
											"",
											"pm.test(\"Check if environmentParameters descriptions are correct\", function () {",
											"   var descriptions = [",
											"       \"Altitude of site - observed (m)\"];",
											"   for (var i = 0; i < jsonData.result.data[index].environmentParameters.length; i++) {",
											"    pm.expect(jsonData.result.data[index].environmentParameters[i].description).to.eql(descriptions[i]);",
											"   }",
											"});",
											"",
											"pm.test(\"Check if environmentParameters units are correct\", function () {",
											"   var units = [",
											"       \"m\"];",
											"   for (var i = 0; i < jsonData.result.data[index].environmentParameters.length; i++) {",
											"    pm.expect(jsonData.result.data[index].environmentParameters[i].unit).to.eql(units[i]);",
											"   }",
											"});",
											"",
											"pm.test(\"Check if environmentParameters unitPUIs are correct\", function () {",
											"   var unitPUIs = [\"6086\"];",
											"   for (var i = 0; i < jsonData.result.data[index].environmentParameters.length; i++) {",
											"    pm.expect(jsonData.result.data[index].environmentParameters[i].unitPUI).to.eql(unitPUIs[i]);",
											"   }",
											"});",
											"pm.test(\"Check if environmentParameters values are correct\", function () {",
											"   var values = [\"\"];",
											"   for (var i = 0; i < jsonData.result.data[index].environmentParameters.length; i++) {",
											"    pm.expect(jsonData.result.data[index].environmentParameters[i].value).to.eql(values[i]);",
											"   }",
											"});",
											"pm.test(\"Check if environmentParameters parameterPUIs are correct\", function () {",
											"   var parameterPUIs = [\"8194\"];",
											"   for (var i = 0; i < jsonData.result.data[index].environmentParameters.length; i++) {",
											"    pm.expect(jsonData.result.data[index].environmentParameters[i].parameterPUI).to.eql(parameterPUIs[i]);",
											"   }",
											"});",
											"",
											"//Check experimental design",
											"",
											"pm.test(\"Check if experimentalDesign description returned is correct\", function () {",
											"     pm.expect(jsonData.result.data[index].experimentalDesign.description).to.eql(\"Externally generated design\");",
											"});",
											"pm.test(\"Check if experimentalDesign pui returned is correct\", function () {",
											"     pm.expect(jsonData.result.data[index].experimentalDesign.pui).to.eql(\"10168\");",
											"});",
											"",
											"pm.test(\"Check if lastUpdate timeStamp returned is correct\", function () {",
											"    var moment = require('moment');",
											"     pm.expect(jsonData.result.data[index].lastUpdate.timeStamp).to.eql(moment().format((\"YYYYMMDD\")));",
											"});",
											"pm.test(\"Check if lastUpdate version returned is correct\", function () {",
											"     pm.expect(jsonData.result.data[index].lastUpdate.version).to.eql(\"1.0\");",
											"});",
											"pm.test(\"Check if observationUnitsDescription returned is correct\", function () {",
											"     pm.expect(jsonData.result.data[index].observationUnitsDescription).to.eql(\"\");",
											"});",
											"pm.test(\"Check if studyCode returned is correct\", function () {",
											"     pm.expect(jsonData.result.data[index].studyCode).to.eql(\"\");",
											"});",
											"pm.test(\"Check if studyDescription returned is correct\", function () {",
											"     pm.expect(jsonData.result.data[index].studyDescription).to.eql(\"Study description\");",
											"});",
											"",
											"pm.test(\"Check if studyPUI returned is correct\", function () {",
											"     pm.expect(jsonData.result.data[index].studyPUI).to.not.be.null;",
											"});",
											"pm.test(\"Check if observationLevels levelName returned is correct\", function () {",
											"     pm.expect(jsonData.result.data[index].observationLevels[0].levelName).to.eql(\"study\");",
											"});",
											"pm.test(\"Check if observationLevels levelOrder returned is correct\", function () {",
											"     pm.expect(jsonData.result.data[index].observationLevels[0].levelOrder).to.eql(4);",
											"});",
											"",
											"pm.test(\"Check if active returned is correct\", function () {",
											"     pm.expect(jsonData.result.data[index].active).to.eql(true);",
											"});",
											"",
											"",
											"pm.test(\"Check if startDate returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].startDate).to.eql(\"2021-05-26T00:00:00.000Z\");",
											"});",
											"pm.test(\"Check if endDate returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].endDate).to.eql(\"2022-12-31T00:00:00.000Z\");",
											"});",
											"pm.test(\"Check if studyDbId returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].studyDbId).to.eql(\"130\");",
											"});",
											"pm.test(\"Check if studyName returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].studyName).to.eql(\"Study w complete details Environment Number 4\");",
											"});",
											"",
											"pm.test(\"Check if studyTypeDbId returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].studyTypeDbId).to.eql(\"6\");",
											"});",
											"",
											"pm.test(\"Check if studyTypeName returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].studyTypeName).to.eql(\"Trial\");",
											"});",
											"pm.test(\"Check if programDbId returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].programDbId).to.eql(\"c9e335d2-3057-4958-a43e-e38cf61d09ca\");",
											"});",
											"",
											"pm.test(\"Check if locationName returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].locationName).to.eql(\"Unspecified Location\");",
											"});",
											"pm.test(\"Check if locationDbId returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].locationDbId).to.eql(\"9016\");",
											"});",
											"pm.test(\"Check if programName returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].programName).to.eql(\"API Program\");",
											"});",
											"pm.test(\"Check if trialName returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].trialName).to.eql(\"Study w complete details\");",
											"});",
											"pm.test(\"Check if trialDbId returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].trialDbId).to.eql(pm.environment.get(\"createdTrialDbId\"));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n\t{\r\n\t\t\"trialDbId\": {{createdTrialDbId}}\r\n\t}\r\n]"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/studies",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"studies"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered details for multiple studies",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"var index = 0",
											"//Check status",
											"pm.test(\"Check messageType\", function () {",
											"    pm.expect(jsonData.metadata.status[index].messageType).to.eql(\"INFO\");",
											"});",
											"pm.test(\"Check message\", function () {",
											"    pm.expect(jsonData.metadata.status[index].message).to.eql(\"2 out of 2 studies created successfully.\");",
											"});",
											"",
											"//Verify details of first study",
											"pm.test(\"Check if active returned is correct\", function () {",
											"     pm.expect(jsonData.result.data[index].active).to.eql(true);",
											"});",
											"pm.test(\"Check if startDate returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].startDate).to.eql(\"2021-05-26T00:00:00.000Z\");",
											"});",
											"pm.test(\"Check if endDate returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].endDate).to.eql(\"2022-12-31T00:00:00.000Z\");",
											"});",
											"pm.test(\"Check if studyDbId returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].studyDbId).to.eql(\"131\");",
											"});",
											"pm.test(\"Check if studyName returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].studyName).to.eql(\"Study w complete details Environment Number 5\");",
											"});",
											"",
											"pm.test(\"Check if studyTypeDbId returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].studyTypeDbId).to.eql(\"6\");",
											"});",
											"",
											"pm.test(\"Check if studyTypeName returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].studyTypeName).to.eql(\"Trial\");",
											"});",
											"pm.test(\"Check if programDbId returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].programDbId).to.eql(\"c9e335d2-3057-4958-a43e-e38cf61d09ca\");",
											"});",
											"pm.test(\"Check if locationName returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].locationName).to.eql(\"Unspecified Location\");",
											"});",
											"pm.test(\"Check if locationDbId returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].locationDbId).to.eql(\"9016\");",
											"});",
											"pm.test(\"Check if programName returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].programName).to.eql(\"API Program\");",
											"});",
											"pm.test(\"Check if trialName returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].trialName).to.eql(\"Study w complete details\");",
											"});",
											"pm.test(\"Check if trialDbId returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].trialDbId).to.eql(pm.environment.get(\"createdTrialDbId\"));",
											"});",
											"",
											"",
											"//Verify details of 2nd study",
											"var index = 1;",
											"pm.test(\"Check if active returned is correct\", function () {",
											"     pm.expect(jsonData.result.data[index].active).to.eql(false);",
											"});",
											"",
											"pm.test(\"Check if startDate returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].startDate).to.eql(\"2018-10-25T00:00:00.000Z\");",
											"});",
											"pm.test(\"Check if endDate returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].endDate).to.eql(\"2019-10-25T00:00:00.000Z\");",
											"});",
											"pm.test(\"Check if studyDbId returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].studyDbId).to.eql(\"132\");",
											"});",
											"pm.test(\"Check if studyName returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].studyName).to.eql(\"Study with Imported Cross Nursery 2018002 Environment Number 4\");",
											"});",
											"pm.test(\"Check if studyTypeDbId returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].studyTypeDbId).to.eql(\"1\");",
											"});",
											"",
											"pm.test(\"Check if studyTypeName returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].studyTypeName).to.eql(\"Nursery\");",
											"});",
											"",
											"pm.test(\"Check if seasons returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].seasons).to.eql([]);",
											"});",
											"",
											"pm.test(\"Check if programDbId returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].programDbId).to.eql(\"c9e335d2-3057-4958-a43e-e38cf61d09ca\");",
											"});",
											"pm.test(\"Check if locationName returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].locationName).to.eql(\"Unspecified Location\");",
											"});",
											"pm.test(\"Check if locationDbId returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].locationDbId).to.eql(\"9016\");",
											"});",
											"pm.test(\"Check if programName returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].programName).to.eql(\"API Program\");",
											"});",
											"pm.test(\"Check if trialName returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].trialName).to.eql(\"Study with Imported Cross Nursery 2018002\");",
											"});",
											"pm.test(\"Check if trialDbId returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].trialDbId).to.eql(pm.environment.get(\"studyId\"));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n\t{\r\n\t\t\"trialDbId\": {{createdTrialDbId}}\r\n\t},\r\n    {\r\n\t\t\"trialDbId\": {{studyId}}\r\n\t}\r\n]"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/studies",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"studies"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid value for environment parameters and seasons",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"var index = 0",
											"",
											"//Check status",
											"pm.test(\"Check messageType\", function () {",
											"    pm.expect(jsonData.metadata.status[index].messageType).to.eql(\"INFO\");",
											"});",
											"pm.test(\"Check message\", function () {",
											"    pm.expect(jsonData.metadata.status[index].message).to.eql(\"1 out of 1 studies created successfully.\");",
											"});",
											"",
											"//Check additionalInfo",
											"pm.test(\"Check if additionalInfo Study institute ID - conducted (DBID) returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].additionalInfo['Study institute ID - conducted (DBID)']).to.eql(\"12345\");",
											"});",
											"pm.test(\"Check if additionalInfo Target Region Variable\", function () {",
											"    pm.expect(jsonData.result.data[index].additionalInfo['Target Region Variable']).to.eql(\"\");",
											"});",
											"pm.test(\"Check if additionalInfo Project Prefix BCID Variable returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].additionalInfo['Project Prefix BCID Variable']).to.eql(\"\");",
											"});",
											"pm.test(\"Check if additionalInfo Breeding Method returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].additionalInfo['Breeding method applied to all plots in a study (CODE)']).to.eql(\"WCO\");",
											"});",
											"pm.test(\"Check if additionalInfo Study institute returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].additionalInfo['Study institute -conducted (DBCV)']).to.eql(\"INSTITUTE 1\");",
											"});",
											"pm.test(\"Check if additionalInfo studyObjective returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].additionalInfo['studyObjective']).to.eql(\"\");",
											"});",
											"pm.test(\"Check if additionalInfo Date the study was created returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].additionalInfo['Date the study was created']).to.eql(\"20210526\");",
											"});",
											"",
											"//Check contacts",
											"pm.test(\"Check if contacts is empty\", function () {",
											"    pm.expect(jsonData.result.data[index].contacts).to.eql([]);",
											"});",
											"pm.test(\"Check if dataLinks returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].dataLinks).to.eql([   ]);",
											"});",
											"",
											"//Check environmentParameters",
											"pm.test(\"Check if environmentParameters parameterNames are correct\", function () {",
											"   var paramNames = [",
											"       \"SITE_SOIL_PH\",",
											"       \"Selection_Trait\",",
											"       \"Crop_season_Code\",",
											"       \"SEEDING_DATE\",",
											"       \"PlotLng_m\"];",
											"   for (var i = 0; i < jsonData.result.data[index].environmentParameters.length; i++) {",
											"    pm.expect(jsonData.result.data[index].environmentParameters[i].parameterName).to.eql(paramNames[i]);",
											"   }",
											"});",
											"",
											"pm.test(\"Check if environmentParameters descriptions are correct\", function () {",
											"   var descriptions = [",
											"       \"Soil acidity - ph meter (pH)\",",
											"       \"Values indicate trait(s) under selection in a particular advancement process\",",
											"       \"Season - Assigned (Code)\",",
											"       \"Date Seeded - applied (yyyymmdd)\",",
											"       \"Plot length\"];",
											"   for (var i = 0; i < jsonData.result.data[index].environmentParameters.length; i++) {",
											"    pm.expect(jsonData.result.data[index].environmentParameters[i].description).to.eql(descriptions[i]);",
											"   }",
											"});",
											"",
											"pm.test(\"Check if environmentParameters units are correct\", function () {",
											"   var units = [",
											"       \"pH\",",
											"       \"STCodes\",",
											"       \"Code of Crop_season_Code\",",
											"       \"Date (yyyymmdd) of SEEDING_DATE\",",
											"       \"m\"];",
											"   for (var i = 0; i < jsonData.result.data[index].environmentParameters.length; i++) {",
											"    pm.expect(jsonData.result.data[index].environmentParameters[i].unit).to.eql(units[i]);",
											"   }",
											"});",
											"",
											"pm.test(\"Check if environmentParameters unitPUIs are correct\", function () {",
											"   var unitPUIs = [\"6100\",\"17284\",\"17273\",\"17274\",\"6086\"];",
											"   for (var i = 0; i < jsonData.result.data[index].environmentParameters.length; i++) {",
											"    pm.expect(jsonData.result.data[index].environmentParameters[i].unitPUI).to.eql(unitPUIs[i]);",
											"   }",
											"});",
											"pm.test(\"Check if environmentParameters values are correct\", function () {",
											"   var values = [\"7.5\",\"DH\",\"0\",\"20210601\",\"5\"];",
											"   for (var i = 0; i < jsonData.result.data[index].environmentParameters.length; i++) {",
											"    pm.expect(jsonData.result.data[index].environmentParameters[i].value).to.eql(values[i]);",
											"   }",
											"});",
											"pm.test(\"Check if environmentParameters parameterPUIs are correct\", function () {",
											"   var parameterPUIs = [\"8270\",\"17290\",\"8371\",\"8383\",\"8760\"];",
											"   for (var i = 0; i < jsonData.result.data[index].environmentParameters.length; i++) {",
											"    pm.expect(jsonData.result.data[index].environmentParameters[i].parameterPUI).to.eql(parameterPUIs[i]);",
											"   }",
											"});",
											"",
											"//Check experimental design",
											"",
											"pm.test(\"Check if experimentalDesign description returned is correct\", function () {",
											"     pm.expect(jsonData.result.data[index].experimentalDesign.description).to.eql(\"Externally generated design\");",
											"});",
											"pm.test(\"Check if experimentalDesign pui returned is correct\", function () {",
											"     pm.expect(jsonData.result.data[index].experimentalDesign.pui).to.eql(\"10168\");",
											"});",
											"//Check external reference",
											"pm.test(\"Check if externalReferences referenceIDs are correct\", function () {",
											"   var referenceIDs = [",
											"       \"doi:10.155454/12341234\",",
											"       \"http://purl.obolibrary.org/obo/ro.owl\",",
											"       \"75a50e76\"];",
											"   for (var i = 0; i < jsonData.result.data[index].externalReferences.length; i++) {",
											"    pm.expect(jsonData.result.data[index].externalReferences[i].referenceID).to.eql(referenceIDs[i]);",
											"   }",
											"});",
											"",
											"pm.test(\"Check if externalReferences referenceSources are correct\", function () {",
											"   var referenceSources = [",
											"       \"DOI\",",
											"       \"OBO Library\",",
											"       \"Remote Data Collection Upload Tool\"];",
											"   for (var i = 0; i < jsonData.result.data[index].externalReferences.length; i++) {",
											"    pm.expect(jsonData.result.data[index].externalReferences[i].referenceSource).to.eql(referenceSources[i]);",
											"   }",
											"});",
											"",
											"pm.test(\"Check if lastUpdate timeStamp returned is correct\", function () {",
											"    var moment = require('moment');",
											"     pm.expect(jsonData.result.data[index].lastUpdate.timeStamp).to.eql(moment().format((\"YYYYMMDD\")));",
											"});",
											"pm.test(\"Check if lastUpdate version returned is correct\", function () {",
											"     pm.expect(jsonData.result.data[index].lastUpdate.version).to.eql(\"1.0\");",
											"});",
											"pm.test(\"Check if observationUnitsDescription returned is correct\", function () {",
											"     pm.expect(jsonData.result.data[index].observationUnitsDescription).to.eql(\"\");",
											"});",
											"pm.test(\"Check if studyCode returned is correct\", function () {",
											"     pm.expect(jsonData.result.data[index].studyCode).to.eql(\"\");",
											"});",
											"pm.test(\"Check if studyDescription returned is correct\", function () {",
											"     pm.expect(jsonData.result.data[index].studyDescription).to.eql(\"Study description\");",
											"});",
											"",
											"pm.test(\"Check if studyPUI returned is correct\", function () {",
											"     pm.expect(jsonData.result.data[index].studyPUI).to.not.be.null;",
											"});",
											"pm.test(\"Check if observationLevels levelName returned is correct\", function () {",
											"     pm.expect(jsonData.result.data[index].observationLevels[0].levelName).to.eql(\"study\");",
											"});",
											"pm.test(\"Check if observationLevels levelOrder returned is correct\", function () {",
											"     pm.expect(jsonData.result.data[index].observationLevels[0].levelOrder).to.eql(4);",
											"});",
											"",
											"pm.test(\"Check if active returned is correct\", function () {",
											"     pm.expect(jsonData.result.data[index].active).to.eql(true);",
											"});",
											"",
											"",
											"pm.test(\"Check if startDate returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].startDate).to.eql(\"2021-05-26T00:00:00.000Z\");",
											"});",
											"pm.test(\"Check if endDate returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].endDate).to.eql(\"2022-12-31T00:00:00.000Z\");",
											"});",
											"pm.test(\"Check if studyDbId returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].studyDbId).to.eql(\"133\");",
											"});",
											"pm.test(\"Check if studyName returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].studyName).to.eql(\"Study w complete details Environment Number 6\");",
											"});",
											"",
											"pm.test(\"Check if studyTypeDbId returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].studyTypeDbId).to.eql(\"6\");",
											"});",
											"",
											"pm.test(\"Check if studyTypeName returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].studyTypeName).to.eql(\"Trial\");",
											"});",
											"",
											"pm.test(\"Check if seasons returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].seasons).to.eql([]);",
											"});",
											"",
											"pm.test(\"Check if programDbId returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].programDbId).to.eql(\"c9e335d2-3057-4958-a43e-e38cf61d09ca\");",
											"});",
											"",
											"pm.test(\"Check if locationName returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].locationName).to.eql(\"Aargau\");",
											"});",
											"pm.test(\"Check if locationDbId returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].locationDbId).to.eql(\"3953\");",
											"});",
											"pm.test(\"Check if programName returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].programName).to.eql(\"API Program\");",
											"});",
											"pm.test(\"Check if trialName returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].trialName).to.eql(\"Study w complete details\");",
											"});",
											"pm.test(\"Check if trialDbId returned is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].trialDbId).to.eql(pm.environment.get(\"createdTrialDbId\"));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n\t{\r\n\t\t\"environmentParameters\": [\r\n\t\t\t{\r\n\t\t\t\t\"parameterName\": \"SITE_SOIL_PH\",\r\n\t\t\t\t\"description\": \"Soil acidity - ph meter (pH)\",\r\n\t\t\t\t\"unit\": \"pH\",\r\n\t\t\t\t\"unitPUI\": \"6100\",\r\n\t\t\t\t\"value\": \"invalid\",\r\n\t\t\t\t\"parameterPUI\": \"8270\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"parameterName\": \"Selection_Trait\",\r\n\t\t\t\t\"description\": \"Values indicate trait(s) under selection in a particular advancement process\",\r\n\t\t\t\t\"unit\": \"STCodes\",\r\n\t\t\t\t\"unitPUI\": \"17284\",\r\n\t\t\t\t\"value\": \"invalid\",\r\n\t\t\t\t\"parameterPUI\": \"17290\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"parameterName\": \"SEEDING_DATE\",\r\n\t\t\t\t\"description\": \"Date Seeded - applied (yyyymmdd)\",\r\n\t\t\t\t\"unit\": \"Date (yyyymmdd) of SEEDING_DATE\",\r\n\t\t\t\t\"unitPUI\": \"17274\",\r\n\t\t\t\t\"value\": \"invalid\",\r\n\t\t\t\t\"parameterPUI\": \"8383\"\r\n\t\t\t},\r\n          {\r\n            \"parameterName\": \"PlotLng_m\",\r\n            \"description\": \"Plot length\",\r\n            \"unit\": \"m\",\r\n            \"unitPUI\": \"6086\",\r\n            \"value\": \"invalid\",\r\n            \"parameterPUI\": \"8760\"\r\n          }\r\n\t\t],\r\n\t\t\"externalReferences\": [\r\n\t\t\t{\r\n\t\t\t\t\"referenceID\": \"doi:10.155454/12341234\",\r\n\t\t\t\t\"referenceSource\": \"DOI\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"referenceID\": \"http://purl.obolibrary.org/obo/ro.owl\",\r\n\t\t\t\t\"referenceSource\": \"OBO Library\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"referenceID\": \"75a50e76\",\r\n\t\t\t\t\"referenceSource\": \"Remote Data Collection Upload Tool\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"locationDbId\": \"3953\",\r\n\t\t\"seasons\": [\r\n\t\t\t\"invalid\"\r\n\t\t],\r\n\t\t\"trialDbId\": {{createdTrialDbId}}\r\n\t}\r\n]"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/studies",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"studies"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						}
					]
				},
				{
					"name": "POST ​/{crop}​/brapi​/v2​/observationunits",
					"item": [
						{
							"name": "Verify response code and body entered complete set of inputs",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const ObservationUnitSchema_v2 = JSON.parse(pm.environment.get(\"ObservationUnitSchema_v2\"));",
											"pm.test(\"Validate schema\", () => {",
											"    pm.response.to.have.jsonSchema(ObservationUnitSchema_v2);",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"//Check status",
											"pm.test(\"Check messageType\", function () {",
											"    pm.expect(jsonData.metadata.status[0].messageType).to.eql(\"INFO\");",
											"});",
											"pm.test(\"Check message\", function () {",
											"    pm.expect(jsonData.metadata.status[0].message).to.eql(\"2 out of 2 observation units created successfully.\");",
											"});",
											"",
											"pm.test(\"Check datafiles\", function () {",
											"    pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"//Check details of result",
											"var index = 0;",
											"pm.test(\"Check additionalInfo\", function () {",
											"    pm.expect(jsonData.result.data[index].additionalInfo).to.eql({ENTRY_NO: '1'});",
											"});",
											"",
											"pm.test(\"Check externalReferences referenceID\", function () {",
											"    pm.expect(jsonData.result.data[index].externalReferences[0].referenceID).to.eql(\"refID\");",
											"});",
											"pm.test(\"Check externalReferences referenceSource\", function () {",
											"    pm.expect(jsonData.result.data[index].externalReferences[0].referenceSource).to.eql(\"referenceSource\");",
											"});",
											"",
											"pm.test(\"Check if observationUnitDbId is not null\", function () {",
											"    pm.expect(jsonData.result.data[index].observationUnitDbId).to.not.be.null;",
											"});",
											"pm.test(\"Check if observationUnitName is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].observationUnitName).to.eql(\"PLOT1\");",
											"});",
											"pm.test(\"Check if germplasmDbId is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].germplasmDbId).to.eql(\"PKWDG942cd372\");",
											"});",
											"",
											"pm.test(\"Check if germplasmName is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].germplasmName).to.eql(\"CML1\");",
											"});",
											"",
											"pm.test(\"Check if studyDbId is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].studyDbId).to.eql(pm.environment.get(\"createdStudyDbId1\"));",
											"});",
											"",
											"pm.test(\"Check if studyName is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].studyName).to.eql(\"Study w complete details_1\");",
											"});",
											"pm.test(\"Check if programName is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].programName).to.eql(\"API Program\");",
											"});",
											"pm.test(\"Check if observations is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].observations).to.eql([]);",
											"});",
											"pm.test(\"Check if locationDbId is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].locationDbId).to.eql(\"3953\");",
											"});",
											"",
											"pm.test(\"Check if locationName is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].locationName).to.eql(\"Aargau\");",
											"});",
											"pm.test(\"Check if observationUnitPUI is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].observationUnitPUI).to.eql(\"\");",
											"});",
											"",
											"pm.test(\"Check if observationUnitPosition entryType is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].observationUnitPosition.entryType).to.eql(\"Test entry\");",
											"});",
											"pm.test(\"Check if observationUnitPosition geoCoordinates geomtry coordinates are correct\", function () {",
											"    pm.expect(jsonData.result.data[index].observationUnitPosition.geoCoordinates.geometry.coordinates).to.eql([-76.506042,42.417373,123]);",
											"});",
											"pm.test(\"Check if observationUnitPosition geoCoordinates geometry type is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].observationUnitPosition.geoCoordinates.geometry.type).to.eql(\"Point\");",
											"});",
											"pm.test(\"Check if observationUnitPosition geoCoordinates type is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].observationUnitPosition.geoCoordinates.type).to.eql(\"Feature\");",
											"});",
											"",
											"pm.test(\"Check if observationUnitPosition observationLevel is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].observationUnitPosition.observationLevel.levelName).to.eql(\"PLOT\");",
											"});",
											"",
											"//Check observationLevelRelationships",
											"pm.test(\"Check if observationLevelRelationships levelCode is correct\", function () {",
											"    var levelCodes = [\"1\",\"1\",\"1\"];",
											"     for (var i = 0; i < jsonData.result.data[index].observationUnitPosition.observationLevelRelationships.length; i++) {   ",
											"    pm.expect(jsonData.result.data[index].observationUnitPosition.observationLevelRelationships[i].levelCode).to.eql(levelCodes[i]);",
											"    }",
											"});",
											"",
											"pm.test(\"Check if observationLevelRelationships levelName is correct\", function () {",
											"    var levelNames = [\"PLOT\",\"REP\",\"BLOCK\"];",
											"     for (var i = 0; i < jsonData.result.data[index].observationUnitPosition.observationLevelRelationships.length; i++) {   ",
											"    pm.expect(jsonData.result.data[index].observationUnitPosition.observationLevelRelationships[i].levelName).to.eql(levelNames[i]);",
											"    }",
											"});",
											"pm.test(\"Check if observationLevelRelationships levelOrder is null\", function () {",
											"     for (var i = 0; i < jsonData.result.data[index].observationUnitPosition.observationLevelRelationships.length; i++) {   ",
											"    pm.expect(jsonData.result.data[index].observationUnitPosition.observationLevelRelationships[i].levelOrder).to.be.null;",
											"    }",
											"});",
											"",
											"pm.test(\"Check if observationUnitPosition positionCoordinateX is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].observationUnitPosition.positionCoordinateX).to.eql(\"1\");",
											"});",
											"pm.test(\"Check if observationUnitPosition positionCoordinateXType is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].observationUnitPosition.positionCoordinateXType).to.eql(\"GRID_COL\");",
											"});",
											"pm.test(\"Check if observationUnitPosition positionCoordinateY is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].observationUnitPosition.positionCoordinateY).to.eql(\"2\");",
											"});",
											"pm.test(\"Check if observationUnitPosition positionCoordinateYType is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].observationUnitPosition.positionCoordinateYType).to.eql(\"GRID_ROW\");",
											"});",
											"",
											"pm.test(\"Check if programDbId is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].programDbId).to.eql(pm.environment.get(\"programDbId\"));",
											"});",
											"pm.test(\"Check if seedLotDbId is null\", function () {",
											"    pm.expect(jsonData.result.data[index].seedLotDbId).to.be.null;",
											"});",
											"pm.test(\"Check if treatments is empty\", function () {",
											"    pm.expect(jsonData.result.data[index].treatments).to.be.eql([]);",
											"});",
											"pm.test(\"Check if trialDbId is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].trialDbId).to.eql(pm.environment.get(\"createdTrialDbId\"));",
											"});",
											"pm.test(\"Check if trialName is correct\", function () {",
											"    pm.expect(jsonData.result.data[index].trialName).to.eql(\"Study w complete details\");",
											"});",
											"",
											"//Save generated observationUnitDbId",
											"pm.environment.unset(\"createdObservationUnitDbId\");",
											"pm.environment.set(\"createdObservationUnitDbId\", jsonData.result.data[0].observationUnitDbId);",
											"pm.environment.unset(\"createdObservationUnitDbId2\");",
											"pm.environment.set(\"createdObservationUnitDbId2\", jsonData.result.data[1].observationUnitDbId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n    {\r\n        \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"{{germplasm_uuid}}\",\r\n        \"observationUnitPosition\": {\r\n            \"entryType\": \"Test entry\",\r\n            \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n            \"observationLevelRelationships\": [\r\n                {\r\n                    \"levelCode\": \"1\",\r\n                    \"levelName\": \"PLOT\",\r\n                    \"levelOrder\": 0\r\n                },\r\n                {\r\n                    \"levelCode\": \"1\",\r\n                    \"levelName\": \"REP\",\r\n                    \"levelOrder\": 0\r\n                },\r\n                {\r\n                    \"levelCode\": \"1\",\r\n                    \"levelName\": \"BLOCK\",\r\n                    \"levelOrder\": 0\r\n                }\r\n            ],\r\n            \"positionCoordinateX\": \"1\",\r\n            \"positionCoordinateY\": \"2\"\r\n        },\r\n        \"programDbId\": \"{{api_program_id}}\",\r\n        \"studyDbId\": \"{{createdStudyDbId1}}\",\r\n        \"trialDbId\": \"{{createdTrialDbId}}\"\r\n    },\r\n    {\r\n                \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"{{germplasm_uuid}}\",\r\n        \"observationUnitPosition\": {\r\n            \"entryType\": \"Test entry\",\r\n            \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n            \"observationLevelRelationships\": [\r\n                {\r\n                    \"levelCode\": \"2\",\r\n                    \"levelName\": \"PLOT\",\r\n                    \"levelOrder\": 0\r\n                },\r\n                {\r\n                    \"levelCode\": \"2\",\r\n                    \"levelName\": \"REP\",\r\n                    \"levelOrder\": 0\r\n                },\r\n                {\r\n                    \"levelCode\": \"1\",\r\n                    \"levelName\": \"BLOCK\",\r\n                    \"levelOrder\": 0\r\n                }\r\n            ],\r\n            \"positionCoordinateX\": \"1\",\r\n            \"positionCoordinateY\": \"2\"\r\n        },\r\n        \"programDbId\": \"{{api_program_id}}\",\r\n        \"studyDbId\": \"{{createdStudyDbId1}}\",\r\n        \"trialDbId\": \"{{createdTrialDbId}}\"\r\n    }\r\n]"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/observationunits",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"observationunits"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered multiple observationUnits for different trials",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"//Check status",
											"pm.test(\"Check messageType\", function () {",
											"    pm.expect(jsonData.metadata.status[0].messageType).to.eql(\"INFO\");",
											"});",
											"pm.test(\"Check message\", function () {",
											"    pm.expect(jsonData.metadata.status[0].message).to.eql(\"194 out of 194 observation units created successfully.\");",
											"});",
											"",
											"pm.test(\"Check datafiles\", function () {",
											"    pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n   {\r\n\t    \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDGccd05c2c\",\r\n        \"studyDbId\": \"{{createdStudyDbIdRCBD1}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Test entry\",\r\n          \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"3\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"1\",\r\n              \"levelName\": \"REP\",\r\n              \"levelOrder\": null\r\n            }\r\n          ],\r\n          \"positionCoordinateX\": \"1\",\r\n          \"positionCoordinateXType\": \"GRID_COL\",\r\n          \"positionCoordinateY\": \"3\",\r\n          \"positionCoordinateYType\": \"GRID_ROW\"\r\n        },\r\n        \"programDbId\": \"{{api_program_id}}\",\r\n        \"trialDbId\": \"{{createdTrialRCBD}}\"\r\n      },\r\n      {\r\n\t    \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDGccd05c2c\",\r\n        \"studyDbId\": \"{{createdStudyDbIdRCBD1}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Test entry\",\r\n          \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"9\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"2\",\r\n              \"levelName\": \"REP\",\r\n              \"levelOrder\": null\r\n            }\r\n          ],\r\n          \"positionCoordinateX\": \"2\",\r\n          \"positionCoordinateXType\": \"GRID_COL\",\r\n          \"positionCoordinateY\": \"4\",\r\n          \"positionCoordinateYType\": \"GRID_ROW\"\r\n        },\r\n        \"programDbId\": \"{{api_program_id}}\",\r\n        \"trialDbId\": \"{{createdTrialRCBD}}\"\r\n      },\r\n      {\r\n\t    \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDGccd05c2c\",\r\n        \"studyDbId\": \"{{createdStudyDbIdRCBD2}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Test entry\",\r\n          \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"3\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"1\",\r\n              \"levelName\": \"REP\",\r\n              \"levelOrder\": null\r\n            }\r\n          ],\r\n          \"positionCoordinateX\": \"3\",\r\n          \"positionCoordinateXType\": \"GRID_COL\",\r\n          \"positionCoordinateY\": \"3\",\r\n          \"positionCoordinateYType\": \"GRID_ROW\"\r\n        },\r\n        \"programDbId\": \"{{api_program_id}}\",\r\n        \"trialDbId\": \"{{createdTrialRCBD}}\"\r\n      },\r\n      {\r\n\t    \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDGccd05c2c\",\r\n        \"studyDbId\": \"{{createdStudyDbIdRCBD2}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Test entry\",\r\n          \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"8\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"2\",\r\n              \"levelName\": \"REP\",\r\n              \"levelOrder\": null\r\n            }\r\n          ],\r\n          \"positionCoordinateX\": \"4\",\r\n          \"positionCoordinateXType\": \"GRID_COL\",\r\n          \"positionCoordinateY\": \"3\",\r\n          \"positionCoordinateYType\": \"GRID_ROW\"\r\n        },\r\n        \"programDbId\": \"{{api_program_id}}\",\r\n        \"trialDbId\": \"{{createdTrialRCBD}}\"\r\n      },\r\n      {\r\n\t    \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDG23d9fdba\",\r\n        \"studyDbId\": \"{{createdStudyDbIdRCBD1}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Test entry\",\r\n          \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"4\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"1\",\r\n              \"levelName\": \"REP\",\r\n              \"levelOrder\": null\r\n            }\r\n          ],\r\n          \"positionCoordinateX\": \"1\",\r\n          \"positionCoordinateXType\": \"GRID_COL\",\r\n          \"positionCoordinateY\": \"4\",\r\n          \"positionCoordinateYType\": \"GRID_ROW\"\r\n        },\r\n        \"programDbId\": \"{{api_program_id}}\",\r\n        \"trialDbId\": \"{{createdTrialRCBD}}\"\r\n      },\r\n      {\r\n\t    \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDG23d9fdba\",\r\n        \"studyDbId\": \"{{createdStudyDbIdRCBD1}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Test entry\",\r\n          \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"6\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"2\",\r\n              \"levelName\": \"REP\",\r\n              \"levelOrder\": null\r\n            }\r\n          ],\r\n          \"positionCoordinateX\": \"2\",\r\n          \"positionCoordinateXType\": \"GRID_COL\",\r\n          \"positionCoordinateY\": \"1\",\r\n          \"positionCoordinateYType\": \"GRID_ROW\"\r\n        },\r\n        \"programDbId\": \"{{api_program_id}}\",\r\n        \"trialDbId\": \"{{createdTrialRCBD}}\"\r\n      },\r\n      {\r\n\t    \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDG23d9fdba\",\r\n        \"studyDbId\": \"{{createdStudyDbIdRCBD2}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Test entry\",\r\n          \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"1\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"1\",\r\n              \"levelName\": \"REP\",\r\n              \"levelOrder\": null\r\n            }\r\n          ],\r\n          \"positionCoordinateX\": \"3\",\r\n          \"positionCoordinateXType\": \"GRID_COL\",\r\n          \"positionCoordinateY\": \"1\",\r\n          \"positionCoordinateYType\": \"GRID_ROW\"\r\n        },\r\n        \"programDbId\": \"{{api_program_id}}\",\r\n        \"trialDbId\": \"{{createdTrialRCBD}}\"\r\n      },\r\n      {\r\n\t    \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDG23d9fdba\",\r\n        \"studyDbId\": \"{{createdStudyDbIdRCBD2}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Test entry\",\r\n          \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"7\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"2\",\r\n              \"levelName\": \"REP\",\r\n              \"levelOrder\": null\r\n            }\r\n          ],\r\n          \"positionCoordinateX\": \"4\",\r\n          \"positionCoordinateXType\": \"GRID_COL\",\r\n          \"positionCoordinateY\": \"2\",\r\n          \"positionCoordinateYType\": \"GRID_ROW\"\r\n        },\r\n        \"programDbId\": \"{{api_program_id}}\",\r\n        \"trialDbId\": \"{{createdTrialRCBD}}\"\r\n      },\r\n      {\r\n\t    \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDG29baa574\",\r\n        \"studyDbId\": \"{{createdStudyDbIdRCBD1}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Test entry\",\r\n          \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"2\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"1\",\r\n              \"levelName\": \"REP\",\r\n              \"levelOrder\": null\r\n            }\r\n          ],\r\n          \"positionCoordinateX\": \"1\",\r\n          \"positionCoordinateXType\": \"GRID_COL\",\r\n          \"positionCoordinateY\": \"2\",\r\n          \"positionCoordinateYType\": \"GRID_ROW\"\r\n        },\r\n        \"programDbId\": \"{{api_program_id}}\",\r\n        \"trialDbId\": \"{{createdTrialRCBD}}\"\r\n      },\r\n      {\r\n\t    \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDG29baa574\",\r\n\t\t\"studyDbId\": \"{{createdStudyDbIdRCBD1}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Test entry\",\r\n          \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"10\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"2\",\r\n              \"levelName\": \"REP\",\r\n              \"levelOrder\": null\r\n            }\r\n          ],\r\n          \"positionCoordinateX\": \"2\",\r\n          \"positionCoordinateXType\": \"GRID_COL\",\r\n          \"positionCoordinateY\": \"5\",\r\n          \"positionCoordinateYType\": \"GRID_ROW\"\r\n        },\r\n        \"programDbId\": \"{{api_program_id}}\",\r\n        \"trialDbId\": \"{{createdTrialRCBD}}\"\r\n      },\r\n      {\r\n\t    \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDG29baa574\",\r\n        \"studyDbId\": \"{{createdStudyDbIdRCBD2}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Test entry\",\r\n          \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"4\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"1\",\r\n              \"levelName\": \"REP\",\r\n              \"levelOrder\": null\r\n            }\r\n          ],\r\n          \"positionCoordinateX\": \"3\",\r\n          \"positionCoordinateXType\": \"GRID_COL\",\r\n          \"positionCoordinateY\": \"4\",\r\n          \"positionCoordinateYType\": \"GRID_ROW\"\r\n        },\r\n        \"programDbId\": \"{{api_program_id}}\",\r\n        \"trialDbId\": \"{{createdTrialRCBD}}\"\r\n      },\r\n      {\r\n\t    \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDG29baa574\",\r\n        \"studyDbId\": \"{{createdStudyDbIdRCBD2}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Test entry\",\r\n          \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"9\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"2\",\r\n              \"levelName\": \"REP\",\r\n              \"levelOrder\": null\r\n            }\r\n          ],\r\n          \"positionCoordinateX\": \"4\",\r\n          \"positionCoordinateXType\": \"GRID_COL\",\r\n          \"positionCoordinateY\": \"4\",\r\n          \"positionCoordinateYType\": \"GRID_ROW\"\r\n        },\r\n        \"programDbId\": \"{{api_program_id}}\",\r\n        \"trialDbId\": \"{{createdTrialRCBD}}\"\r\n      },\r\n      {\r\n\t    \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDG24f2eb14\",\r\n        \"studyDbId\": \"{{createdStudyDbIdRCBD1}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Test entry\",\r\n          \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"5\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"1\",\r\n              \"levelName\": \"REP\",\r\n              \"levelOrder\": null\r\n            }\r\n          ],\r\n          \"positionCoordinateX\": \"1\",\r\n          \"positionCoordinateXType\": \"GRID_COL\",\r\n          \"positionCoordinateY\": \"5\",\r\n          \"positionCoordinateYType\": \"GRID_ROW\"\r\n        },\r\n        \"programDbId\": \"{{api_program_id}}\",\r\n        \"trialDbId\": \"{{createdTrialRCBD}}\"\r\n      },\r\n      {\r\n\t    \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDG24f2eb14\",\r\n        \"studyDbId\": \"{{createdStudyDbIdRCBD1}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Test entry\",\r\n          \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"7\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"2\",\r\n              \"levelName\": \"REP\",\r\n              \"levelOrder\": null\r\n            }\r\n          ],\r\n          \"positionCoordinateX\": \"2\",\r\n          \"positionCoordinateXType\": \"GRID_COL\",\r\n          \"positionCoordinateY\": \"2\",\r\n          \"positionCoordinateYType\": \"GRID_ROW\"\r\n        },\r\n        \"programDbId\": \"{{api_program_id}}\",\r\n        \"trialDbId\": \"{{createdTrialRCBD}}\"\r\n      },\r\n      {\r\n\t    \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDG24f2eb14\",\r\n        \"studyDbId\": \"{{createdStudyDbIdRCBD2}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Test entry\",\r\n          \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"5\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"1\",\r\n              \"levelName\": \"REP\",\r\n              \"levelOrder\": null\r\n            }\r\n          ],\r\n          \"positionCoordinateX\": \"3\",\r\n          \"positionCoordinateXType\": \"GRID_COL\",\r\n          \"positionCoordinateY\": \"5\",\r\n          \"positionCoordinateYType\": \"GRID_ROW\"\r\n        },\r\n        \"programDbId\": \"{{api_program_id}}\",\r\n        \"trialDbId\": \"{{createdTrialRCBD}}\"\r\n      },\r\n      {\r\n\t    \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDG24f2eb14\",\r\n        \"studyDbId\": \"{{createdStudyDbIdRCBD2}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Test entry\",\r\n          \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"10\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"2\",\r\n              \"levelName\": \"REP\",\r\n              \"levelOrder\": null\r\n            }\r\n          ],\r\n          \"positionCoordinateX\": \"4\",\r\n          \"positionCoordinateXType\": \"GRID_COL\",\r\n          \"positionCoordinateY\": \"5\",\r\n          \"positionCoordinateYType\": \"GRID_ROW\"\r\n        },\r\n        \"programDbId\": \"{{api_program_id}}\",\r\n        \"trialDbId\": \"{{createdTrialRCBD}}\"\r\n      },\r\n      {\r\n\t    \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDGe70f481b\",\r\n        \"studyDbId\": \"{{createdStudyDbIdRCBD1}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Test entry\",\r\n          \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"1\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"1\",\r\n              \"levelName\": \"REP\",\r\n              \"levelOrder\": null\r\n            }\r\n          ],\r\n          \"positionCoordinateX\": \"1\",\r\n          \"positionCoordinateXType\": \"GRID_COL\",\r\n          \"positionCoordinateY\": \"1\",\r\n          \"positionCoordinateYType\": \"GRID_ROW\"\r\n        },\r\n        \"programDbId\": \"{{api_program_id}}\",\r\n        \"trialDbId\": \"{{createdTrialRCBD}}\"\r\n      },\r\n      {\r\n\t    \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDGe70f481b\",\r\n        \"studyDbId\": \"{{createdStudyDbIdRCBD1}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Test entry\",\r\n          \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"8\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"2\",\r\n              \"levelName\": \"REP\",\r\n              \"levelOrder\": null\r\n            }\r\n          ],\r\n          \"positionCoordinateX\": \"2\",\r\n          \"positionCoordinateXType\": \"GRID_COL\",\r\n          \"positionCoordinateY\": \"3\",\r\n          \"positionCoordinateYType\": \"GRID_ROW\"\r\n        },\r\n        \"programDbId\": \"{{api_program_id}}\",\r\n        \"trialDbId\": \"{{createdTrialRCBD}}\"\r\n      },\r\n      {\r\n\t    \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDGe70f481b\",\r\n        \"studyDbId\": \"{{createdStudyDbIdRCBD2}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Test entry\",\r\n          \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"2\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"1\",\r\n              \"levelName\": \"REP\",\r\n              \"levelOrder\": null\r\n            }\r\n          ],\r\n          \"positionCoordinateX\": \"3\",\r\n          \"positionCoordinateXType\": \"GRID_COL\",\r\n          \"positionCoordinateY\": \"2\",\r\n          \"positionCoordinateYType\": \"GRID_ROW\"\r\n        },\r\n        \"programDbId\": \"{{api_program_id}}\",\r\n        \"trialDbId\": \"{{createdTrialRCBD}}\"\r\n      },\r\n      {\r\n\t    \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDGe70f481b\",\r\n        \"studyDbId\": \"{{createdStudyDbIdRCBD2}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Test entry\",\r\n          \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"6\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"2\",\r\n              \"levelName\": \"REP\",\r\n              \"levelOrder\": null\r\n            }\r\n          ],\r\n          \"positionCoordinateX\": \"4\",\r\n          \"positionCoordinateXType\": \"GRID_COL\",\r\n          \"positionCoordinateY\": \"1\",\r\n          \"positionCoordinateYType\": \"GRID_ROW\"\r\n        },\r\n        \"programDbId\": \"{{api_program_id}}\",\r\n        \"trialDbId\": \"{{createdTrialRCBD}}\"\r\n      },\r\n\t  \r\n\t  {\r\n\t    \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDGad095cb8\",\r\n        \"studyDbId\": \"{{createdStudyDbIdAug1}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Test entry\",\r\n          \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"5\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"1\",\r\n              \"levelName\": \"BLOCK\",\r\n              \"levelOrder\": null\r\n            }\r\n          ]\r\n        },\r\n        \"programDbId\": \"{{api_program_id}}\",\r\n        \"trialDbId\": \"{{createdTrialAugmented}}\"\r\n      },\r\n      {\r\n\t    \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDGad095cb8\",\r\n        \"studyDbId\": \"{{createdStudyDbIdAug2}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Test entry\",\r\n          \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"2\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"1\",\r\n              \"levelName\": \"BLOCK\",\r\n              \"levelOrder\": null\r\n            }\r\n          ]\r\n        },\r\n        \"programDbId\": \"{{api_program_id}}\",\r\n        \"trialDbId\": \"{{createdTrialAugmented}}\"\r\n      },\r\n      {\r\n\t    \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDG21d7c9ea\",\r\n        \"studyDbId\": \"{{createdStudyDbIdAug1}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Test entry\",\r\n          \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"6\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"1\",\r\n              \"levelName\": \"BLOCK\",\r\n              \"levelOrder\": null\r\n            }\r\n          ]\r\n        },\r\n        \"programDbId\": \"{{api_program_id}}\",\r\n        \"trialDbId\": \"{{createdTrialAugmented}}\"\r\n      },\r\n      {\r\n\t    \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDG21d7c9ea\",\r\n        \"studyDbId\": \"{{createdStudyDbIdAug2}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Test entry\",\r\n          \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"3\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"1\",\r\n              \"levelName\": \"BLOCK\",\r\n              \"levelOrder\": null\r\n            }\r\n          ]\r\n        },\r\n        \"programDbId\": \"{{api_program_id}}\",\r\n        \"trialDbId\": \"{{createdTrialAugmented}}\"\r\n      },\r\n      {\r\n\t    \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDG24a5822a\",\r\n        \"studyDbId\": \"{{createdStudyDbIdAug1}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Check entry\",\r\n          \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"3\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"1\",\r\n              \"levelName\": \"BLOCK\",\r\n              \"levelOrder\": null\r\n            }\r\n          ]\r\n        },\r\n        \"programDbId\": \"{{api_program_id}}\",\r\n        \"trialDbId\": \"{{createdTrialAugmented}}\"\r\n      },\r\n      {\r\n\t    \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDG24a5822a\",\r\n        \"studyDbId\": \"{{createdStudyDbIdAug1}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Check entry\",\r\n          \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"12\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"2\",\r\n              \"levelName\": \"BLOCK\",\r\n              \"levelOrder\": null\r\n            }\r\n          ]\r\n        },\r\n        \"programDbId\": \"{{api_program_id}}\",\r\n        \"trialDbId\": \"{{createdTrialAugmented}}\"\r\n      },\r\n      {\r\n\t    \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDG24a5822a\",\r\n        \"studyDbId\": \"{{createdStudyDbIdAug2}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Check entry\",\r\n          \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"1\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"1\",\r\n              \"levelName\": \"BLOCK\",\r\n              \"levelOrder\": null\r\n            }\r\n          ]\r\n        },\r\n        \"programDbId\": \"{{api_program_id}}\",\r\n        \"trialDbId\": \"{{createdTrialAugmented}}\"\r\n      },\r\n      {\r\n\t    \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDG24a5822a\",\r\n        \"studyDbId\": \"{{createdStudyDbIdAug2}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Check entry\",\r\n          \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"10\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"2\",\r\n              \"levelName\": \"BLOCK\",\r\n              \"levelOrder\": null\r\n            }\r\n          ]\r\n        },\r\n        \"programDbId\": \"{{api_program_id}}\",\r\n        \"trialDbId\": \"{{createdTrialAugmented}}\"\r\n      },\r\n      {\r\n\t    \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDGdb639fcd\",\r\n        \"studyDbId\": \"{{createdStudyDbIdAug1}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Test entry\",\r\n          \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"1\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"1\",\r\n              \"levelName\": \"BLOCK\",\r\n              \"levelOrder\": null\r\n            }\r\n          ]\r\n        },\r\n        \"programDbId\": \"{{api_program_id}}\",\r\n        \"trialDbId\": \"{{createdTrialAugmented}}\"\r\n      },\r\n      {\r\n\t    \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDGdb639fcd\",\r\n        \"studyDbId\": \"{{createdStudyDbIdAug2}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Test entry\",\r\n          \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"9\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"2\",\r\n              \"levelName\": \"BLOCK\",\r\n              \"levelOrder\": null\r\n            }\r\n          ]\r\n        },\r\n        \"programDbId\": \"{{api_program_id}}\",\r\n        \"trialDbId\": \"{{createdTrialAugmented}}\"\r\n      },\r\n      {\r\n\t    \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDGdb7ba6a4\",\r\n        \"studyDbId\": \"{{createdStudyDbIdAug1}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Test entry\",\r\n          \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"9\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"2\",\r\n              \"levelName\": \"BLOCK\",\r\n              \"levelOrder\": null\r\n            }\r\n          ]\r\n        },\r\n        \"programDbId\": \"{{api_program_id}}\",\r\n        \"trialDbId\": \"{{createdTrialAugmented}}\"\r\n      },\r\n      {\r\n\t    \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDGdb7ba6a4\",\r\n        \"studyDbId\": \"{{createdStudyDbIdAug2}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Test entry\",\r\n          \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"11\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"2\",\r\n              \"levelName\": \"BLOCK\",\r\n              \"levelOrder\": null\r\n            }\r\n          ]\r\n        },\r\n        \"programDbId\": \"{{api_program_id}}\",\r\n        \"trialDbId\": \"{{createdTrialAugmented}}\"\r\n      },\r\n      {\r\n\t    \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDG25fc9e14\",\r\n        \"studyDbId\": \"{{createdStudyDbIdAug1}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Test entry\",\r\n          \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"10\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"2\",\r\n              \"levelName\": \"BLOCK\",\r\n              \"levelOrder\": null\r\n            }\r\n          ]\r\n        },\r\n        \"programDbId\": \"{{api_program_id}}\",\r\n        \"trialDbId\": \"{{createdTrialAugmented}}\"\r\n      },\r\n      {\r\n\t    \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDG25fc9e14\",\r\n        \"studyDbId\": \"{{createdStudyDbIdAug2}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Test entry\",\r\n          \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"8\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"2\",\r\n              \"levelName\": \"BLOCK\",\r\n              \"levelOrder\": null\r\n            }\r\n          ]\r\n        },\r\n        \"programDbId\": \"{{api_program_id}}\",\r\n        \"trialDbId\": \"{{createdTrialAugmented}}\"\r\n      },\r\n      {\r\n\t    \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDG8a570e06\",\r\n        \"studyDbId\": \"{{createdStudyDbIdAug1}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Check entry\",\r\n          \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"4\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"1\",\r\n              \"levelName\": \"BLOCK\",\r\n              \"levelOrder\": null\r\n            }\r\n          ]\r\n        },\r\n        \"programDbId\": \"{{api_program_id}}\",\r\n        \"trialDbId\": \"{{createdTrialAugmented}}\"\r\n      },\r\n      {\r\n\t    \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDG8a570e06\",\r\n        \"studyDbId\": \"{{createdStudyDbIdAug1}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Check entry\",\r\n          \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"7\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"2\",\r\n              \"levelName\": \"BLOCK\",\r\n              \"levelOrder\": null\r\n            }\r\n          ]\r\n        },\r\n        \"programDbId\": \"{{api_program_id}}\",\r\n        \"trialDbId\": \"{{createdTrialAugmented}}\"\r\n      },\r\n      {\r\n\t    \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDG8a570e06\",\r\n        \"studyDbId\": \"{{createdStudyDbIdAug2}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Check entry\",\r\n          \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"6\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"1\",\r\n              \"levelName\": \"BLOCK\",\r\n              \"levelOrder\": null\r\n            }\r\n          ]\r\n        },\r\n        \"programDbId\": \"{{api_program_id}}\",\r\n        \"trialDbId\": \"{{createdTrialAugmented}}\"\r\n      },\r\n      {\r\n\t    \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDG8a570e06\",\r\n        \"studyDbId\": \"{{createdStudyDbIdAug2}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Check entry\",\r\n          \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"7\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"2\",\r\n              \"levelName\": \"BLOCK\",\r\n              \"levelOrder\": null\r\n            }\r\n          ]\r\n        },\r\n        \"programDbId\": \"{{api_program_id}}\",\r\n        \"trialDbId\": \"{{createdTrialAugmented}}\"\r\n      },\r\n      {\r\n\t    \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDG3b386538\",\r\n        \"studyDbId\": \"{{createdStudyDbIdAug1}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Test entry\",\r\n          \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"11\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"2\",\r\n              \"levelName\": \"BLOCK\",\r\n              \"levelOrder\": null\r\n            }\r\n          ]\r\n        },\r\n        \"programDbId\": \"{{api_program_id}}\",\r\n        \"trialDbId\": \"{{createdTrialAugmented}}\"\r\n      },\r\n      {\r\n\t    \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDG3b386538\",\r\n        \"studyDbId\": \"{{createdStudyDbIdAug2}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Test entry\",\r\n          \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"12\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"2\",\r\n              \"levelName\": \"BLOCK\",\r\n              \"levelOrder\": null\r\n            }\r\n          ]\r\n        },\r\n        \"programDbId\": \"{{api_program_id}}\",\r\n        \"trialDbId\": \"{{createdTrialAugmented}}\"\r\n      },\r\n      {\r\n\t    \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDGa669bdd4\",\r\n        \"studyDbId\": \"{{createdStudyDbIdAug1}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Test entry\",\r\n          \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"2\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"1\",\r\n              \"levelName\": \"BLOCK\",\r\n              \"levelOrder\": null\r\n            }\r\n          ]\r\n        },\r\n        \"programDbId\": \"{{api_program_id}}\",\r\n        \"trialDbId\": \"{{createdTrialAugmented}}\"\r\n      },\r\n      {\r\n\t    \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDGa669bdd4\",\r\n        \"studyDbId\": \"{{createdStudyDbIdAug2}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Test entry\",\r\n          \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"4\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"1\",\r\n              \"levelName\": \"BLOCK\",\r\n              \"levelOrder\": null\r\n            }\r\n          ]\r\n        },\r\n        \"programDbId\": \"{{api_program_id}}\",\r\n        \"trialDbId\": \"{{createdTrialAugmented}}\"\r\n      },\r\n      {\r\n\t    \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDG033908c3\",\r\n        \"studyDbId\": \"{{createdStudyDbIdAug1}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Test entry\",\r\n          \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"8\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"2\",\r\n              \"levelName\": \"BLOCK\",\r\n              \"levelOrder\": null\r\n            }\r\n          ]\r\n        },\r\n        \"programDbId\": \"{{api_program_id}}\",\r\n        \"trialDbId\": \"{{createdTrialAugmented}}\"\r\n      },\r\n      {\r\n\t    \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDG033908c3\",\r\n        \"studyDbId\": \"{{createdStudyDbIdAug2}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Test entry\",\r\n          \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"5\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"1\",\r\n              \"levelName\": \"BLOCK\",\r\n              \"levelOrder\": null\r\n            }\r\n          ]\r\n        },\r\n        \"programDbId\": \"{{api_program_id}}\",\r\n        \"trialDbId\": \"{{createdTrialAugmented}}\"\r\n      },\r\n\r\n   {\r\n\t    \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDGad095cb8\",\r\n        \"studyDbId\": \"{{createdStudyDbIdRIBD1}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Test entry\",\r\n          \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"3\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"1\",\r\n              \"levelName\": \"REP\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"1\",\r\n              \"levelName\": \"BLOCK\",\r\n              \"levelOrder\": null\r\n            }\r\n          ]\r\n        },\r\n        \"programDbId\": \"c9e335d2-3057-4958-a43e-e38cf61d09ca\",\r\n        \"trialDbId\": \"{{createdTrialRIBD}}\"\r\n      },\r\n      {\r\n\t    \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDGad095cb8\",\r\n        \"studyDbId\": \"{{createdStudyDbIdRIBD1}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Test entry\",\r\n          \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"20\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"2\",\r\n              \"levelName\": \"REP\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"2\",\r\n              \"levelName\": \"BLOCK\",\r\n              \"levelOrder\": null\r\n            }\r\n          ]\r\n        },\r\n        \"programDbId\": \"c9e335d2-3057-4958-a43e-e38cf61d09ca\",\r\n        \"trialDbId\": \"{{createdTrialRIBD}}\"\r\n      },\r\n      {\r\n\t    \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDGad095cb8\",\r\n        \"studyDbId\": \"{{createdStudyDbIdRIBD1}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Test entry\",\r\n          \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"28\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"3\",\r\n              \"levelName\": \"REP\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"2\",\r\n              \"levelName\": \"BLOCK\",\r\n              \"levelOrder\": null\r\n            }\r\n          ]\r\n        },\r\n        \"programDbId\": \"c9e335d2-3057-4958-a43e-e38cf61d09ca\",\r\n        \"trialDbId\": \"{{createdTrialRIBD}}\"\r\n      },\r\n      {\r\n\t    \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDGad095cb8\",\r\n        \"studyDbId\": \"{{createdStudyDbIdRIBD1}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Test entry\",\r\n          \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"36\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"4\",\r\n              \"levelName\": \"REP\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"2\",\r\n              \"levelName\": \"BLOCK\",\r\n              \"levelOrder\": null\r\n            }\r\n          ]\r\n        },\r\n        \"programDbId\": \"c9e335d2-3057-4958-a43e-e38cf61d09ca\",\r\n        \"trialDbId\": \"{{createdTrialRIBD}}\"\r\n      },\r\n      {\r\n\t    \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDGad095cb8\",\r\n        \"studyDbId\": \"{{createdStudyDbIdRIBD2}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Test entry\",\r\n          \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"8\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"1\",\r\n              \"levelName\": \"REP\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"2\",\r\n              \"levelName\": \"BLOCK\",\r\n              \"levelOrder\": null\r\n            }\r\n          ]\r\n        },\r\n        \"programDbId\": \"c9e335d2-3057-4958-a43e-e38cf61d09ca\",\r\n        \"trialDbId\": \"{{createdTrialRIBD}}\"\r\n      },\r\n      {\r\n\t    \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDGad095cb8\",\r\n        \"studyDbId\": \"{{createdStudyDbIdRIBD2}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Test entry\",\r\n          \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"12\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"2\",\r\n              \"levelName\": \"REP\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"1\",\r\n              \"levelName\": \"BLOCK\",\r\n              \"levelOrder\": null\r\n            }\r\n          ]\r\n        },\r\n        \"programDbId\": \"c9e335d2-3057-4958-a43e-e38cf61d09ca\",\r\n        \"trialDbId\": \"{{createdTrialRIBD}}\"\r\n      },\r\n      {\r\n\t    \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDGad095cb8\",\r\n        \"studyDbId\": \"{{createdStudyDbIdRIBD2}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Test entry\",\r\n          \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"24\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"3\",\r\n              \"levelName\": \"REP\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"1\",\r\n              \"levelName\": \"BLOCK\",\r\n              \"levelOrder\": null\r\n            }\r\n          ]\r\n        },\r\n        \"programDbId\": \"c9e335d2-3057-4958-a43e-e38cf61d09ca\",\r\n        \"trialDbId\": \"{{createdTrialRIBD}}\"\r\n      },\r\n      {\r\n\t    \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDGad095cb8\",\r\n        \"studyDbId\": \"{{createdStudyDbIdRIBD2}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Test entry\",\r\n          \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"36\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"4\",\r\n              \"levelName\": \"REP\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"2\",\r\n              \"levelName\": \"BLOCK\",\r\n              \"levelOrder\": null\r\n            }\r\n          ]\r\n        },\r\n        \"programDbId\": \"c9e335d2-3057-4958-a43e-e38cf61d09ca\",\r\n        \"trialDbId\": \"{{createdTrialRIBD}}\"\r\n      },\r\n      {\r\n\t    \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDG21d7c9ea\",\r\n        \"studyDbId\": \"{{createdStudyDbIdRIBD1}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Test entry\",\r\n          \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"1\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"1\",\r\n              \"levelName\": \"REP\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"1\",\r\n              \"levelName\": \"BLOCK\",\r\n              \"levelOrder\": null\r\n            }\r\n          ]\r\n        },\r\n        \"programDbId\": \"c9e335d2-3057-4958-a43e-e38cf61d09ca\",\r\n        \"trialDbId\": \"{{createdTrialRIBD}}\"\r\n      },\r\n      {\r\n\t    \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"observationUnitDbId\": \"PKWDP3cfmxLVb\",\r\n        \"germplasmDbId\": \"PKWDG21d7c9ea\",\r\n        \"studyDbId\": \"{{createdStudyDbIdRIBD1}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Test entry\",\r\n          \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"11\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"2\",\r\n              \"levelName\": \"REP\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"1\",\r\n              \"levelName\": \"BLOCK\",\r\n              \"levelOrder\": null\r\n            }\r\n          ]\r\n        },\r\n        \"programDbId\": \"c9e335d2-3057-4958-a43e-e38cf61d09ca\",\r\n        \"trialDbId\": \"{{createdTrialRIBD}}\"\r\n      },\r\n      {\r\n\t    \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDG21d7c9ea\",\r\n        \"studyDbId\": \"{{createdStudyDbIdRIBD1}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Test entry\",\r\n          \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"21\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"3\",\r\n              \"levelName\": \"REP\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"1\",\r\n              \"levelName\": \"BLOCK\",\r\n              \"levelOrder\": null\r\n            }\r\n          ]\r\n        },\r\n        \"programDbId\": \"c9e335d2-3057-4958-a43e-e38cf61d09ca\",\r\n        \"trialDbId\": \"{{createdTrialRIBD}}\"\r\n      },\r\n      {\r\n\t    \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDG21d7c9ea\",\r\n        \"studyDbId\": \"{{createdStudyDbIdRIBD1}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Test entry\",\r\n          \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"31\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"4\",\r\n              \"levelName\": \"REP\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"1\",\r\n              \"levelName\": \"BLOCK\",\r\n              \"levelOrder\": null\r\n            }\r\n          ]\r\n        },\r\n        \"programDbId\": \"c9e335d2-3057-4958-a43e-e38cf61d09ca\",\r\n        \"trialDbId\": \"{{createdTrialRIBD}}\"\r\n      },\r\n      {\r\n\t    \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDG21d7c9ea\",\r\n        \"studyDbId\": \"{{createdStudyDbIdRIBD2}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Test entry\",\r\n          \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"1\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"1\",\r\n              \"levelName\": \"REP\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"1\",\r\n              \"levelName\": \"BLOCK\",\r\n              \"levelOrder\": null\r\n            }\r\n          ]\r\n        },\r\n        \"programDbId\": \"c9e335d2-3057-4958-a43e-e38cf61d09ca\",\r\n        \"trialDbId\": \"{{createdTrialRIBD}}\"\r\n      },\r\n      {\r\n\t    \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDG21d7c9ea\",\r\n        \"studyDbId\": \"{{createdStudyDbIdRIBD2}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Test entry\",\r\n          \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"14\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"2\",\r\n              \"levelName\": \"REP\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"1\",\r\n              \"levelName\": \"BLOCK\",\r\n              \"levelOrder\": null\r\n            }\r\n          ]\r\n        },\r\n        \"programDbId\": \"c9e335d2-3057-4958-a43e-e38cf61d09ca\",\r\n        \"trialDbId\": \"{{createdTrialRIBD}}\"\r\n      },\r\n      {\r\n\t    \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDG21d7c9ea\",\r\n        \"studyDbId\": \"{{createdStudyDbIdRIBD2}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Test entry\",\r\n          \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"21\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"3\",\r\n              \"levelName\": \"REP\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"1\",\r\n              \"levelName\": \"BLOCK\",\r\n              \"levelOrder\": null\r\n            }\r\n          ]\r\n        },\r\n        \"programDbId\": \"c9e335d2-3057-4958-a43e-e38cf61d09ca\",\r\n        \"trialDbId\": \"{{createdTrialRIBD}}\"\r\n      },\r\n      {\r\n\t    \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDG21d7c9ea\",\r\n        \"studyDbId\": \"{{createdStudyDbIdRIBD2}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Test entry\",\r\n          \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"35\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"4\",\r\n              \"levelName\": \"REP\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"1\",\r\n              \"levelName\": \"BLOCK\",\r\n              \"levelOrder\": null\r\n            }\r\n          ]\r\n        },\r\n        \"programDbId\": \"c9e335d2-3057-4958-a43e-e38cf61d09ca\",\r\n        \"trialDbId\": \"{{createdTrialRIBD}}\"\r\n      },\r\n      {\r\n\t    \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDG24a5822a\",\r\n        \"studyDbId\": \"{{createdStudyDbIdRIBD1}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Test entry\",\r\n          \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"9\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"1\",\r\n              \"levelName\": \"REP\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"2\",\r\n              \"levelName\": \"BLOCK\",\r\n              \"levelOrder\": null\r\n            }\r\n          ]\r\n        },\r\n        \"programDbId\": \"c9e335d2-3057-4958-a43e-e38cf61d09ca\",\r\n        \"trialDbId\": \"{{createdTrialRIBD}}\"\r\n      },\r\n      {\r\n\t    \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDG24a5822a\",\r\n        \"studyDbId\": \"{{createdStudyDbIdRIBD1}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Test entry\",\r\n          \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"19\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"2\",\r\n              \"levelName\": \"REP\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"2\",\r\n              \"levelName\": \"BLOCK\",\r\n              \"levelOrder\": null\r\n            }\r\n          ]\r\n        },\r\n        \"programDbId\": \"c9e335d2-3057-4958-a43e-e38cf61d09ca\",\r\n        \"trialDbId\": \"{{createdTrialRIBD}}\"\r\n      },\r\n      {\r\n\t    \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDG24a5822a\",\r\n        \"studyDbId\": \"{{createdStudyDbIdRIBD1}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Test entry\",\r\n          \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"26\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"3\",\r\n              \"levelName\": \"REP\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"2\",\r\n              \"levelName\": \"BLOCK\",\r\n              \"levelOrder\": null\r\n            }\r\n          ]\r\n        },\r\n        \"programDbId\": \"c9e335d2-3057-4958-a43e-e38cf61d09ca\",\r\n        \"trialDbId\": \"{{createdTrialRIBD}}\"\r\n      },\r\n      {\r\n\t    \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDG24a5822a\",\r\n        \"studyDbId\": \"{{createdStudyDbIdRIBD1}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Test entry\",\r\n          \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"34\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"4\",\r\n              \"levelName\": \"REP\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"1\",\r\n              \"levelName\": \"BLOCK\",\r\n              \"levelOrder\": null\r\n            }\r\n          ]\r\n        },\r\n        \"programDbId\": \"c9e335d2-3057-4958-a43e-e38cf61d09ca\",\r\n        \"trialDbId\": \"{{createdTrialRIBD}}\"\r\n      },\r\n      {\r\n\t    \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDG24a5822a\",\r\n        \"studyDbId\": \"{{createdStudyDbIdRIBD2}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Test entry\",\r\n          \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"7\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"1\",\r\n              \"levelName\": \"REP\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"2\",\r\n              \"levelName\": \"BLOCK\",\r\n              \"levelOrder\": null\r\n            }\r\n          ]\r\n        },\r\n        \"programDbId\": \"c9e335d2-3057-4958-a43e-e38cf61d09ca\",\r\n        \"trialDbId\": \"{{createdTrialRIBD}}\"\r\n      },\r\n      {\r\n\t    \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDG24a5822a\",\r\n        \"studyDbId\": \"{{createdStudyDbIdRIBD2}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Test entry\",\r\n          \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"11\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"2\",\r\n              \"levelName\": \"REP\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"1\",\r\n              \"levelName\": \"BLOCK\",\r\n              \"levelOrder\": null\r\n            }\r\n          ]\r\n        },\r\n        \"programDbId\": \"c9e335d2-3057-4958-a43e-e38cf61d09ca\",\r\n        \"trialDbId\": \"{{createdTrialRIBD}}\"\r\n      },\r\n      {\r\n\t    \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDG24a5822a\",\r\n        \"studyDbId\": \"{{createdStudyDbIdRIBD2}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Test entry\",\r\n          \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"25\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"3\",\r\n              \"levelName\": \"REP\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"1\",\r\n              \"levelName\": \"BLOCK\",\r\n              \"levelOrder\": null\r\n            }\r\n          ]\r\n        },\r\n        \"programDbId\": \"c9e335d2-3057-4958-a43e-e38cf61d09ca\",\r\n        \"trialDbId\": \"{{createdTrialRIBD}}\"\r\n      },\r\n      {\r\n\t    \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDG24a5822a\",\r\n        \"studyDbId\": \"{{createdStudyDbIdRIBD2}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Test entry\",\r\n          \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"37\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"4\",\r\n              \"levelName\": \"REP\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"2\",\r\n              \"levelName\": \"BLOCK\",\r\n              \"levelOrder\": null\r\n            }\r\n          ]\r\n        },\r\n        \"programDbId\": \"c9e335d2-3057-4958-a43e-e38cf61d09ca\",\r\n        \"trialDbId\": \"{{createdTrialRIBD}}\"\r\n      },\r\n      {\r\n\t    \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDGdb639fcd\",\r\n        \"studyDbId\": \"{{createdStudyDbIdRIBD1}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Test entry\",\r\n          \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"10\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"1\",\r\n              \"levelName\": \"REP\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"2\",\r\n              \"levelName\": \"BLOCK\",\r\n              \"levelOrder\": null\r\n            }\r\n          ]\r\n        },\r\n        \"programDbId\": \"c9e335d2-3057-4958-a43e-e38cf61d09ca\",\r\n        \"trialDbId\": \"{{createdTrialRIBD}}\"\r\n      },\r\n      {\r\n\t    \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDGdb639fcd\",\r\n        \"studyDbId\": \"{{createdStudyDbIdRIBD1}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Test entry\",\r\n          \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"18\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"2\",\r\n              \"levelName\": \"REP\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"2\",\r\n              \"levelName\": \"BLOCK\",\r\n              \"levelOrder\": null\r\n            }\r\n          ]\r\n        },\r\n        \"programDbId\": \"c9e335d2-3057-4958-a43e-e38cf61d09ca\",\r\n        \"trialDbId\": \"{{createdTrialRIBD}}\"\r\n      },\r\n      {\r\n\t    \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDGdb639fcd\",\r\n        \"studyDbId\": \"{{createdStudyDbIdRIBD1}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Test entry\",\r\n          \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"22\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"3\",\r\n              \"levelName\": \"REP\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"1\",\r\n              \"levelName\": \"BLOCK\",\r\n              \"levelOrder\": null\r\n            }\r\n          ]\r\n        },\r\n        \"programDbId\": \"c9e335d2-3057-4958-a43e-e38cf61d09ca\",\r\n        \"trialDbId\": \"{{createdTrialRIBD}}\"\r\n      },\r\n      {\r\n\t    \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDGdb639fcd\",\r\n        \"studyDbId\": \"{{createdStudyDbIdRIBD1}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Test entry\",\r\n          \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"32\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"4\",\r\n              \"levelName\": \"REP\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"1\",\r\n              \"levelName\": \"BLOCK\",\r\n              \"levelOrder\": null\r\n            }\r\n          ]\r\n        },\r\n        \"programDbId\": \"c9e335d2-3057-4958-a43e-e38cf61d09ca\",\r\n        \"trialDbId\": \"{{createdTrialRIBD}}\"\r\n      },\r\n      {\r\n\t    \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDGdb639fcd\",\r\n        \"studyDbId\": \"{{createdStudyDbIdRIBD2}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Test entry\",\r\n          \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"10\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"1\",\r\n              \"levelName\": \"REP\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"2\",\r\n              \"levelName\": \"BLOCK\",\r\n              \"levelOrder\": null\r\n            }\r\n          ]\r\n        },\r\n        \"programDbId\": \"c9e335d2-3057-4958-a43e-e38cf61d09ca\",\r\n        \"trialDbId\": \"{{createdTrialRIBD}}\"\r\n      },\r\n      {\r\n\t    \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDGdb639fcd\",\r\n        \"studyDbId\": \"{{createdStudyDbIdRIBD2}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Test entry\",\r\n          \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"16\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"2\",\r\n              \"levelName\": \"REP\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"2\",\r\n              \"levelName\": \"BLOCK\",\r\n              \"levelOrder\": null\r\n            }\r\n          ]\r\n        },\r\n        \"programDbId\": \"c9e335d2-3057-4958-a43e-e38cf61d09ca\",\r\n        \"trialDbId\": \"{{createdTrialRIBD}}\"\r\n      },\r\n      {\r\n\t    \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDGdb639fcd\",\r\n        \"studyDbId\": \"{{createdStudyDbIdRIBD2}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Test entry\",\r\n          \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"22\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"3\",\r\n              \"levelName\": \"REP\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"1\",\r\n              \"levelName\": \"BLOCK\",\r\n              \"levelOrder\": null\r\n            }\r\n          ]\r\n        },\r\n        \"programDbId\": \"c9e335d2-3057-4958-a43e-e38cf61d09ca\",\r\n        \"trialDbId\": \"{{createdTrialRIBD}}\"\r\n      },\r\n      {\r\n\t    \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDGdb639fcd\",\r\n        \"studyDbId\": \"{{createdStudyDbIdRIBD2}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Test entry\",\r\n          \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"32\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"4\",\r\n              \"levelName\": \"REP\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"1\",\r\n              \"levelName\": \"BLOCK\",\r\n              \"levelOrder\": null\r\n            }\r\n          ]\r\n        },\r\n        \"programDbId\": \"c9e335d2-3057-4958-a43e-e38cf61d09ca\",\r\n        \"trialDbId\": \"{{createdTrialRIBD}}\"\r\n      },\r\n      {\r\n\t    \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDGdb7ba6a4\",\r\n        \"studyDbId\": \"{{createdStudyDbIdRIBD1}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Test entry\",\r\n          \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"6\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"1\",\r\n              \"levelName\": \"REP\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"2\",\r\n              \"levelName\": \"BLOCK\",\r\n              \"levelOrder\": null\r\n            }\r\n          ]\r\n        },\r\n        \"programDbId\": \"c9e335d2-3057-4958-a43e-e38cf61d09ca\",\r\n        \"trialDbId\": \"{{createdTrialRIBD}}\"\r\n      },\r\n      {\r\n\t    \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDGdb7ba6a4\",\r\n        \"studyDbId\": \"{{createdStudyDbIdRIBD1}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Test entry\",\r\n          \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"12\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"2\",\r\n              \"levelName\": \"REP\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"1\",\r\n              \"levelName\": \"BLOCK\",\r\n              \"levelOrder\": null\r\n            }\r\n          ]\r\n        },\r\n        \"programDbId\": \"c9e335d2-3057-4958-a43e-e38cf61d09ca\",\r\n        \"trialDbId\": \"{{createdTrialRIBD}}\"\r\n      },\r\n      {\r\n\t    \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDGdb7ba6a4\",\r\n        \"studyDbId\": \"{{createdStudyDbIdRIBD1}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Test entry\",\r\n          \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"25\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"3\",\r\n              \"levelName\": \"REP\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"1\",\r\n              \"levelName\": \"BLOCK\",\r\n              \"levelOrder\": null\r\n            }\r\n          ]\r\n        },\r\n        \"programDbId\": \"c9e335d2-3057-4958-a43e-e38cf61d09ca\",\r\n        \"trialDbId\": \"{{createdTrialRIBD}}\"\r\n      },\r\n      {\r\n\t    \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDGdb7ba6a4\",\r\n        \"studyDbId\": \"{{createdStudyDbIdRIBD1}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Test entry\",\r\n          \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"38\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"4\",\r\n              \"levelName\": \"REP\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"2\",\r\n              \"levelName\": \"BLOCK\",\r\n              \"levelOrder\": null\r\n            }\r\n          ]\r\n        },\r\n        \"programDbId\": \"c9e335d2-3057-4958-a43e-e38cf61d09ca\",\r\n        \"trialDbId\": \"{{createdTrialRIBD}}\"\r\n      },\r\n      {\r\n\t    \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDGdb7ba6a4\",\r\n        \"studyDbId\": \"{{createdStudyDbIdRIBD2}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Test entry\",\r\n          \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"4\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"1\",\r\n              \"levelName\": \"REP\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"1\",\r\n              \"levelName\": \"BLOCK\",\r\n              \"levelOrder\": null\r\n            }\r\n          ]\r\n        },\r\n        \"programDbId\": \"c9e335d2-3057-4958-a43e-e38cf61d09ca\",\r\n        \"trialDbId\": \"{{createdTrialRIBD}}\"\r\n      },\r\n      {\r\n\t    \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDGdb7ba6a4\",\r\n        \"studyDbId\": \"{{createdStudyDbIdRIBD2}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Test entry\",\r\n          \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"18\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"2\",\r\n              \"levelName\": \"REP\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"2\",\r\n              \"levelName\": \"BLOCK\",\r\n              \"levelOrder\": null\r\n            }\r\n          ]\r\n        },\r\n        \"programDbId\": \"c9e335d2-3057-4958-a43e-e38cf61d09ca\",\r\n        \"trialDbId\": \"{{createdTrialRIBD}}\"\r\n      },\r\n      {\r\n\t    \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDGdb7ba6a4\",\r\n        \"studyDbId\": \"{{createdStudyDbIdRIBD2}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Test entry\",\r\n          \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"30\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"3\",\r\n              \"levelName\": \"REP\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"2\",\r\n              \"levelName\": \"BLOCK\",\r\n              \"levelOrder\": null\r\n            }\r\n          ]\r\n        },\r\n        \"programDbId\": \"c9e335d2-3057-4958-a43e-e38cf61d09ca\",\r\n        \"trialDbId\": \"{{createdTrialRIBD}}\"\r\n      },\r\n      {\r\n\t    \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDGdb7ba6a4\",\r\n        \"studyDbId\": \"{{createdStudyDbIdRIBD2}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Test entry\",\r\n          \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"38\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"4\",\r\n              \"levelName\": \"REP\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"2\",\r\n              \"levelName\": \"BLOCK\",\r\n              \"levelOrder\": null\r\n            }\r\n          ]\r\n        },\r\n        \"programDbId\": \"c9e335d2-3057-4958-a43e-e38cf61d09ca\",\r\n        \"trialDbId\": \"{{createdTrialRIBD}}\"\r\n      },\r\n      {\r\n\t    \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDG25fc9e14\",\r\n        \"studyDbId\": \"{{createdStudyDbIdRIBD1}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Test entry\",\r\n          \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"5\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"1\",\r\n              \"levelName\": \"REP\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"1\",\r\n              \"levelName\": \"BLOCK\",\r\n              \"levelOrder\": null\r\n            }\r\n          ]\r\n        },\r\n        \"programDbId\": \"c9e335d2-3057-4958-a43e-e38cf61d09ca\",\r\n        \"trialDbId\": \"{{createdTrialRIBD}}\"\r\n      },\r\n      {\r\n\t    \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDG25fc9e14\",\r\n        \"studyDbId\": \"{{createdStudyDbIdRIBD1}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Test entry\",\r\n          \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"17\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"2\",\r\n              \"levelName\": \"REP\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"2\",\r\n              \"levelName\": \"BLOCK\",\r\n              \"levelOrder\": null\r\n            }\r\n          ]\r\n        },\r\n        \"programDbId\": \"c9e335d2-3057-4958-a43e-e38cf61d09ca\",\r\n        \"trialDbId\": \"{{createdTrialRIBD}}\"\r\n      },\r\n      {\r\n\t    \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDG25fc9e14\",\r\n        \"studyDbId\": \"{{createdStudyDbIdRIBD1}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Test entry\",\r\n          \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"23\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"3\",\r\n              \"levelName\": \"REP\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"1\",\r\n              \"levelName\": \"BLOCK\",\r\n              \"levelOrder\": null\r\n            }\r\n          ]\r\n        },\r\n        \"programDbId\": \"c9e335d2-3057-4958-a43e-e38cf61d09ca\",\r\n        \"trialDbId\": \"{{createdTrialRIBD}}\"\r\n      },\r\n      {\r\n\t    \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDG25fc9e14\",\r\n        \"studyDbId\": \"{{createdStudyDbIdRIBD1}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Test entry\",\r\n          \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"35\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"4\",\r\n              \"levelName\": \"REP\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"1\",\r\n              \"levelName\": \"BLOCK\",\r\n              \"levelOrder\": null\r\n            }\r\n          ]\r\n        },\r\n        \"programDbId\": \"c9e335d2-3057-4958-a43e-e38cf61d09ca\",\r\n        \"trialDbId\": \"{{createdTrialRIBD}}\"\r\n      },\r\n      {\r\n\t    \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDG25fc9e14\",\r\n        \"studyDbId\": \"{{createdStudyDbIdRIBD2}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Test entry\",\r\n          \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"5\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"1\",\r\n              \"levelName\": \"REP\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"1\",\r\n              \"levelName\": \"BLOCK\",\r\n              \"levelOrder\": null\r\n            }\r\n          ]\r\n        },\r\n        \"programDbId\": \"c9e335d2-3057-4958-a43e-e38cf61d09ca\",\r\n        \"trialDbId\": \"{{createdTrialRIBD}}\"\r\n      },\r\n      {\r\n\t    \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDG25fc9e14\",\r\n        \"studyDbId\": \"{{createdStudyDbIdRIBD2}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Test entry\",\r\n          \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"15\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"2\",\r\n              \"levelName\": \"REP\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"1\",\r\n              \"levelName\": \"BLOCK\",\r\n              \"levelOrder\": null\r\n            }\r\n          ]\r\n        },\r\n        \"programDbId\": \"c9e335d2-3057-4958-a43e-e38cf61d09ca\",\r\n        \"trialDbId\": \"{{createdTrialRIBD}}\"\r\n      },\r\n      {\r\n\t    \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDG25fc9e14\",\r\n        \"studyDbId\": \"{{createdStudyDbIdRIBD2}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Test entry\",\r\n          \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"28\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"3\",\r\n              \"levelName\": \"REP\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"2\",\r\n              \"levelName\": \"BLOCK\",\r\n              \"levelOrder\": null\r\n            }\r\n          ]\r\n        },\r\n        \"programDbId\": \"c9e335d2-3057-4958-a43e-e38cf61d09ca\",\r\n        \"trialDbId\": \"{{createdTrialRIBD}}\"\r\n      },\r\n      {\r\n\t    \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDG25fc9e14\",\r\n        \"studyDbId\": \"{{createdStudyDbIdRIBD2}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Test entry\",\r\n          \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"33\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"4\",\r\n              \"levelName\": \"REP\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"1\",\r\n              \"levelName\": \"BLOCK\",\r\n              \"levelOrder\": null\r\n            }\r\n          ]\r\n        },\r\n        \"programDbId\": \"c9e335d2-3057-4958-a43e-e38cf61d09ca\",\r\n        \"trialDbId\": \"{{createdTrialRIBD}}\"\r\n      },\r\n      {\r\n\t    \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDG8a570e06\",\r\n        \"studyDbId\": \"{{createdStudyDbIdRIBD1}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Test entry\",\r\n          \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"2\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"1\",\r\n              \"levelName\": \"REP\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"1\",\r\n              \"levelName\": \"BLOCK\",\r\n              \"levelOrder\": null\r\n            }\r\n          ]\r\n        },\r\n        \"programDbId\": \"c9e335d2-3057-4958-a43e-e38cf61d09ca\",\r\n        \"trialDbId\": \"{{createdTrialRIBD}}\"\r\n      },\r\n      {\r\n\t    \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDG8a570e06\",\r\n        \"studyDbId\": \"{{createdStudyDbIdRIBD1}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Test entry\",\r\n          \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"13\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"2\",\r\n              \"levelName\": \"REP\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"1\",\r\n              \"levelName\": \"BLOCK\",\r\n              \"levelOrder\": null\r\n            }\r\n          ]\r\n        },\r\n        \"programDbId\": \"c9e335d2-3057-4958-a43e-e38cf61d09ca\",\r\n        \"trialDbId\": \"{{createdTrialRIBD}}\"\r\n      },\r\n      {\r\n\t    \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDG8a570e06\",\r\n        \"studyDbId\": \"{{createdStudyDbIdRIBD1}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Test entry\",\r\n          \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"27\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"3\",\r\n              \"levelName\": \"REP\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"2\",\r\n              \"levelName\": \"BLOCK\",\r\n              \"levelOrder\": null\r\n            }\r\n          ]\r\n        },\r\n        \"programDbId\": \"c9e335d2-3057-4958-a43e-e38cf61d09ca\",\r\n        \"trialDbId\": \"{{createdTrialRIBD}}\"\r\n      },\r\n      {\r\n\t    \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDG8a570e06\",\r\n        \"studyDbId\": \"{{createdStudyDbIdRIBD1}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Test entry\",\r\n          \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"33\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"4\",\r\n              \"levelName\": \"REP\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"1\",\r\n              \"levelName\": \"BLOCK\",\r\n              \"levelOrder\": null\r\n            }\r\n          ]\r\n        },\r\n        \"programDbId\": \"c9e335d2-3057-4958-a43e-e38cf61d09ca\",\r\n        \"trialDbId\": \"{{createdTrialRIBD}}\"\r\n      },\r\n      {\r\n\t    \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDG8a570e06\",\r\n        \"studyDbId\": \"{{createdStudyDbIdRIBD2}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Test entry\",\r\n          \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"6\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"1\",\r\n              \"levelName\": \"REP\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"2\",\r\n              \"levelName\": \"BLOCK\",\r\n              \"levelOrder\": null\r\n            }\r\n          ]\r\n        },\r\n        \"programDbId\": \"c9e335d2-3057-4958-a43e-e38cf61d09ca\",\r\n        \"trialDbId\": \"{{createdTrialRIBD}}\"\r\n      },\r\n      {\r\n\t    \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDG8a570e06\",\r\n        \"studyDbId\": \"{{createdStudyDbIdRIBD2}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Test entry\",\r\n          \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"17\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"2\",\r\n              \"levelName\": \"REP\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"2\",\r\n              \"levelName\": \"BLOCK\",\r\n              \"levelOrder\": null\r\n            }\r\n          ]\r\n        },\r\n        \"programDbId\": \"c9e335d2-3057-4958-a43e-e38cf61d09ca\",\r\n        \"trialDbId\": \"{{createdTrialRIBD}}\"\r\n      },\r\n      {\r\n\t    \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDG8a570e06\",\r\n        \"studyDbId\": \"{{createdStudyDbIdRIBD2}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Test entry\",\r\n          \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"27\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"3\",\r\n              \"levelName\": \"REP\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"2\",\r\n              \"levelName\": \"BLOCK\",\r\n              \"levelOrder\": null\r\n            }\r\n          ]\r\n        },\r\n        \"programDbId\": \"c9e335d2-3057-4958-a43e-e38cf61d09ca\",\r\n        \"trialDbId\": \"{{createdTrialRIBD}}\"\r\n      },\r\n      {\r\n\t    \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDG8a570e06\",\r\n        \"studyDbId\": \"{{createdStudyDbIdRIBD2}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Test entry\",\r\n          \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"34\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"4\",\r\n              \"levelName\": \"REP\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"1\",\r\n              \"levelName\": \"BLOCK\",\r\n              \"levelOrder\": null\r\n            }\r\n          ]\r\n        },\r\n        \"programDbId\": \"c9e335d2-3057-4958-a43e-e38cf61d09ca\",\r\n        \"trialDbId\": \"{{createdTrialRIBD}}\"\r\n      },\r\n      {\r\n\t    \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDG3b386538\",\r\n        \"studyDbId\": \"{{createdStudyDbIdRIBD1}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Test entry\",\r\n          \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"8\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"1\",\r\n              \"levelName\": \"REP\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"2\",\r\n              \"levelName\": \"BLOCK\",\r\n              \"levelOrder\": null\r\n            }\r\n          ]\r\n        },\r\n        \"programDbId\": \"c9e335d2-3057-4958-a43e-e38cf61d09ca\",\r\n        \"trialDbId\": \"{{createdTrialRIBD}}\"\r\n      },\r\n      {\r\n\t    \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDG3b386538\",\r\n        \"studyDbId\": \"{{createdStudyDbIdRIBD1}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Test entry\",\r\n          \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"15\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"2\",\r\n              \"levelName\": \"REP\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"1\",\r\n              \"levelName\": \"BLOCK\",\r\n              \"levelOrder\": null\r\n            }\r\n          ]\r\n        },\r\n        \"programDbId\": \"c9e335d2-3057-4958-a43e-e38cf61d09ca\",\r\n        \"trialDbId\": \"{{createdTrialRIBD}}\"\r\n      },\r\n      {\r\n\t    \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDG3b386538\",\r\n        \"studyDbId\": \"{{createdStudyDbIdRIBD1}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Test entry\",\r\n          \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"24\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"3\",\r\n              \"levelName\": \"REP\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"1\",\r\n              \"levelName\": \"BLOCK\",\r\n              \"levelOrder\": null\r\n            }\r\n          ]\r\n        },\r\n        \"programDbId\": \"c9e335d2-3057-4958-a43e-e38cf61d09ca\",\r\n        \"trialDbId\": \"{{createdTrialRIBD}}\"\r\n      },\r\n      {\r\n\t    \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDG3b386538\",\r\n        \"studyDbId\": \"{{createdStudyDbIdRIBD1}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Test entry\",\r\n          \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"37\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"4\",\r\n              \"levelName\": \"REP\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"2\",\r\n              \"levelName\": \"BLOCK\",\r\n              \"levelOrder\": null\r\n            }\r\n          ]\r\n        },\r\n        \"programDbId\": \"c9e335d2-3057-4958-a43e-e38cf61d09ca\",\r\n        \"trialDbId\": \"{{createdTrialRIBD}}\"\r\n      },\r\n      {\r\n\t    \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDG3b386538\",\r\n        \"studyDbId\": \"{{createdStudyDbIdRIBD2}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Test entry\",\r\n          \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"2\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"1\",\r\n              \"levelName\": \"REP\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"1\",\r\n              \"levelName\": \"BLOCK\",\r\n              \"levelOrder\": null\r\n            }\r\n          ]\r\n        },\r\n        \"programDbId\": \"c9e335d2-3057-4958-a43e-e38cf61d09ca\",\r\n        \"trialDbId\": \"{{createdTrialRIBD}}\"\r\n      },\r\n      {\r\n\t    \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDG3b386538\",\r\n        \"studyDbId\": \"{{createdStudyDbIdRIBD2}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Test entry\",\r\n          \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"20\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"2\",\r\n              \"levelName\": \"REP\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"2\",\r\n              \"levelName\": \"BLOCK\",\r\n              \"levelOrder\": null\r\n            }\r\n          ]\r\n        },\r\n        \"programDbId\": \"c9e335d2-3057-4958-a43e-e38cf61d09ca\",\r\n        \"trialDbId\": \"{{createdTrialRIBD}}\"\r\n      },\r\n      {\r\n\t    \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDG3b386538\",\r\n        \"studyDbId\": \"{{createdStudyDbIdRIBD2}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Test entry\",\r\n          \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"23\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"3\",\r\n              \"levelName\": \"REP\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"1\",\r\n              \"levelName\": \"BLOCK\",\r\n              \"levelOrder\": null\r\n            }\r\n          ]\r\n        },\r\n        \"programDbId\": \"c9e335d2-3057-4958-a43e-e38cf61d09ca\",\r\n        \"trialDbId\": \"{{createdTrialRIBD}}\"\r\n      },\r\n      {\r\n\t    \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDG3b386538\",\r\n        \"studyDbId\": \"{{createdStudyDbIdRIBD2}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Test entry\",\r\n          \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"31\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"4\",\r\n              \"levelName\": \"REP\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"1\",\r\n              \"levelName\": \"BLOCK\",\r\n              \"levelOrder\": null\r\n            }\r\n          ]\r\n        },\r\n        \"programDbId\": \"c9e335d2-3057-4958-a43e-e38cf61d09ca\",\r\n        \"trialDbId\": \"{{createdTrialRIBD}}\"\r\n      },\r\n      {\r\n\t    \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDGa669bdd4\",\r\n        \"studyDbId\": \"{{createdStudyDbIdRIBD1}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Test entry\",\r\n          \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"7\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"1\",\r\n              \"levelName\": \"REP\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"2\",\r\n              \"levelName\": \"BLOCK\",\r\n              \"levelOrder\": null\r\n            }\r\n          ]\r\n        },\r\n        \"programDbId\": \"c9e335d2-3057-4958-a43e-e38cf61d09ca\",\r\n        \"trialDbId\": \"{{createdTrialRIBD}}\"\r\n      },\r\n      {\r\n\t    \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDGa669bdd4\",\r\n        \"studyDbId\": \"{{createdStudyDbIdRIBD1}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Test entry\",\r\n          \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"16\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"2\",\r\n              \"levelName\": \"REP\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"2\",\r\n              \"levelName\": \"BLOCK\",\r\n              \"levelOrder\": null\r\n            }\r\n          ]\r\n        },\r\n        \"programDbId\": \"c9e335d2-3057-4958-a43e-e38cf61d09ca\",\r\n        \"trialDbId\": \"{{createdTrialRIBD}}\"\r\n      },\r\n      {\r\n\t    \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDGa669bdd4\",\r\n        \"studyDbId\": \"{{createdStudyDbIdRIBD1}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Test entry\",\r\n          \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"30\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"3\",\r\n              \"levelName\": \"REP\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"2\",\r\n              \"levelName\": \"BLOCK\",\r\n              \"levelOrder\": null\r\n            }\r\n          ]\r\n        },\r\n        \"programDbId\": \"c9e335d2-3057-4958-a43e-e38cf61d09ca\",\r\n        \"trialDbId\": \"{{createdTrialRIBD}}\"\r\n      },\r\n      {\r\n\t    \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDGa669bdd4\",\r\n        \"studyDbId\": \"{{createdStudyDbIdRIBD1}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Test entry\",\r\n          \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"39\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"4\",\r\n              \"levelName\": \"REP\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"2\",\r\n              \"levelName\": \"BLOCK\",\r\n              \"levelOrder\": null\r\n            }\r\n          ]\r\n        },\r\n        \"programDbId\": \"c9e335d2-3057-4958-a43e-e38cf61d09ca\",\r\n        \"trialDbId\": \"{{createdTrialRIBD}}\"\r\n      },\r\n      {\r\n\t    \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDGa669bdd4\",\r\n        \"studyDbId\": \"{{createdStudyDbIdRIBD2}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Test entry\",\r\n          \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"9\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"1\",\r\n              \"levelName\": \"REP\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"2\",\r\n              \"levelName\": \"BLOCK\",\r\n              \"levelOrder\": null\r\n            }\r\n          ]\r\n        },\r\n        \"programDbId\": \"c9e335d2-3057-4958-a43e-e38cf61d09ca\",\r\n        \"trialDbId\": \"{{createdTrialRIBD}}\"\r\n      },\r\n      {\r\n\t    \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDGa669bdd4\",\r\n        \"studyDbId\": \"{{createdStudyDbIdRIBD2}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Test entry\",\r\n          \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"19\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"2\",\r\n              \"levelName\": \"REP\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"2\",\r\n              \"levelName\": \"BLOCK\",\r\n              \"levelOrder\": null\r\n            }\r\n          ]\r\n        },\r\n        \"programDbId\": \"c9e335d2-3057-4958-a43e-e38cf61d09ca\",\r\n        \"trialDbId\": \"{{createdTrialRIBD}}\"\r\n      },\r\n      {\r\n\t    \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDGa669bdd4\",\r\n        \"studyDbId\": \"{{createdStudyDbIdRIBD2}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Test entry\",\r\n          \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"29\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"3\",\r\n              \"levelName\": \"REP\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"2\",\r\n              \"levelName\": \"BLOCK\",\r\n              \"levelOrder\": null\r\n            }\r\n          ]\r\n        },\r\n        \"programDbId\": \"c9e335d2-3057-4958-a43e-e38cf61d09ca\",\r\n        \"trialDbId\": \"{{createdTrialRIBD}}\"\r\n      },\r\n      {\r\n\t    \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDGa669bdd4\",\r\n        \"studyDbId\": \"{{createdStudyDbIdRIBD2}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Test entry\",\r\n          \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"39\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"4\",\r\n              \"levelName\": \"REP\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"2\",\r\n              \"levelName\": \"BLOCK\",\r\n              \"levelOrder\": null\r\n            }\r\n          ]\r\n        },\r\n        \"programDbId\": \"c9e335d2-3057-4958-a43e-e38cf61d09ca\",\r\n        \"trialDbId\": \"{{createdTrialRIBD}}\"\r\n      },\r\n      {\r\n\t    \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDG033908c3\",\r\n        \"studyDbId\": \"{{createdStudyDbIdRIBD1}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Test entry\",\r\n          \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"4\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"1\",\r\n              \"levelName\": \"REP\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"1\",\r\n              \"levelName\": \"BLOCK\",\r\n              \"levelOrder\": null\r\n            }\r\n          ]\r\n        },\r\n        \"programDbId\": \"c9e335d2-3057-4958-a43e-e38cf61d09ca\",\r\n        \"trialDbId\": \"{{createdTrialRIBD}}\"\r\n      },\r\n      {\r\n\t    \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDG033908c3\",\r\n        \"studyDbId\": \"{{createdStudyDbIdRIBD1}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Test entry\",\r\n          \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"14\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"2\",\r\n              \"levelName\": \"REP\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"1\",\r\n              \"levelName\": \"BLOCK\",\r\n              \"levelOrder\": null\r\n            }\r\n          ]\r\n        },\r\n        \"programDbId\": \"c9e335d2-3057-4958-a43e-e38cf61d09ca\",\r\n        \"trialDbId\": \"{{createdTrialRIBD}}\"\r\n      },\r\n      {\r\n\t    \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDG033908c3\",\r\n        \"studyDbId\": \"{{createdStudyDbIdRIBD1}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Test entry\",\r\n          \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"29\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"3\",\r\n              \"levelName\": \"REP\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"2\",\r\n              \"levelName\": \"BLOCK\",\r\n              \"levelOrder\": null\r\n            }\r\n          ]\r\n        },\r\n        \"programDbId\": \"c9e335d2-3057-4958-a43e-e38cf61d09ca\",\r\n        \"trialDbId\": \"{{createdTrialRIBD}}\"\r\n      },\r\n      {\r\n\t    \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDG033908c3\",\r\n        \"studyDbId\": \"{{createdStudyDbIdRIBD1}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Test entry\",\r\n          \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"40\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"4\",\r\n              \"levelName\": \"REP\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"2\",\r\n              \"levelName\": \"BLOCK\",\r\n              \"levelOrder\": null\r\n            }\r\n          ]\r\n        },\r\n        \"programDbId\": \"c9e335d2-3057-4958-a43e-e38cf61d09ca\",\r\n        \"trialDbId\": \"{{createdTrialRIBD}}\"\r\n      },\r\n      {\r\n\t    \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDG033908c3\",\r\n        \"studyDbId\": \"{{createdStudyDbIdRIBD2}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Test entry\",\r\n          \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"3\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"1\",\r\n              \"levelName\": \"REP\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"1\",\r\n              \"levelName\": \"BLOCK\",\r\n              \"levelOrder\": null\r\n            }\r\n          ]\r\n        },\r\n        \"programDbId\": \"c9e335d2-3057-4958-a43e-e38cf61d09ca\",\r\n        \"trialDbId\": \"{{createdTrialRIBD}}\"\r\n      },\r\n      {\r\n\t    \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDG033908c3\",\r\n        \"studyDbId\": \"{{createdStudyDbIdRIBD2}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Test entry\",\r\n          \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"13\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"2\",\r\n              \"levelName\": \"REP\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"1\",\r\n              \"levelName\": \"BLOCK\",\r\n              \"levelOrder\": null\r\n            }\r\n          ]\r\n        },\r\n        \"programDbId\": \"c9e335d2-3057-4958-a43e-e38cf61d09ca\",\r\n        \"trialDbId\": \"{{createdTrialRIBD}}\"\r\n      },\r\n      {\r\n\t    \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDG033908c3\",\r\n        \"studyDbId\": \"{{createdStudyDbIdRIBD2}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Test entry\",\r\n          \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"26\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"3\",\r\n              \"levelName\": \"REP\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"2\",\r\n              \"levelName\": \"BLOCK\",\r\n              \"levelOrder\": null\r\n            }\r\n          ]\r\n        },\r\n        \"programDbId\": \"c9e335d2-3057-4958-a43e-e38cf61d09ca\",\r\n        \"trialDbId\": \"{{createdTrialRIBD}}\"\r\n      },\r\n      {\r\n\t    \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDG033908c3\",\r\n        \"studyDbId\": \"{{createdStudyDbIdRIBD2}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Test entry\",\r\n          \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"40\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"4\",\r\n              \"levelName\": \"REP\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"2\",\r\n              \"levelName\": \"BLOCK\",\r\n              \"levelOrder\": null\r\n            }\r\n          ]\r\n        },\r\n        \"programDbId\": \"c9e335d2-3057-4958-a43e-e38cf61d09ca\",\r\n        \"trialDbId\": \"{{createdTrialRIBD}}\"\r\n      },\r\n      {\r\n\t    \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDGad095cb8\",\r\n        \"studyDbId\": \"{{createdStudyDbIdELO1}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Test entry\",\r\n          \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"4\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            }\r\n          ]\r\n        },\r\n        \"programDbId\": \"{{api_program_id}}\",\r\n        \"trialDbId\": \"{{createdTrialELO}}\"\r\n      },\r\n      {\r\n\t    \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDGad095cb8\",\r\n        \"studyDbId\": \"{{createdStudyDbIdELO2}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Test entry\",\r\n          \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"4\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            }\r\n          ]\r\n        },\r\n        \"programDbId\": \"{{api_program_id}}\",\r\n        \"trialDbId\": \"{{createdTrialELO}}\"\r\n      },\r\n      {\r\n\t    \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDG21d7c9ea\",\r\n        \"studyDbId\": \"{{createdStudyDbIdELO1}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Test entry\",\r\n          \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"5\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            }\r\n          ]\r\n        },\r\n        \"programDbId\": \"{{api_program_id}}\",\r\n        \"trialDbId\": \"{{createdTrialELO}}\"\r\n      },\r\n      {\r\n\t    \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDG21d7c9ea\",\r\n        \"studyDbId\": \"{{createdStudyDbIdELO2}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Test entry\",\r\n          \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"5\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            }\r\n          ]\r\n        },\r\n        \"programDbId\": \"{{api_program_id}}\",\r\n        \"trialDbId\": \"{{createdTrialELO}}\"\r\n      },\r\n      {\r\n\t    \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDG24a5822a\",\r\n        \"studyDbId\": \"{{createdStudyDbIdELO1}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Check entry\",\r\n          \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"1\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            }\r\n          ]\r\n        },\r\n        \"programDbId\": \"{{api_program_id}}\",\r\n        \"trialDbId\": \"{{createdTrialELO}}\"\r\n      },\r\n      {\r\n\t    \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDG24a5822a\",\r\n        \"studyDbId\": \"{{createdStudyDbIdELO1}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Check entry\",\r\n          \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"6\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            }\r\n          ]\r\n        },\r\n        \"programDbId\": \"{{api_program_id}}\",\r\n        \"trialDbId\": \"{{createdTrialELO}}\"\r\n      },\r\n      {\r\n\t    \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDG24a5822a\",\r\n        \"studyDbId\": \"{{createdStudyDbIdELO1}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Check entry\",\r\n          \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"11\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            }\r\n          ]\r\n        },\r\n        \"programDbId\": \"{{api_program_id}}\",\r\n        \"trialDbId\": \"{{createdTrialELO}}\"\r\n      },\r\n      {\r\n\t    \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDG24a5822a\",\r\n        \"studyDbId\": \"{{createdStudyDbIdELO1}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Check entry\",\r\n          \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"16\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            }\r\n          ]\r\n        },\r\n        \"programDbId\": \"{{api_program_id}}\",\r\n        \"trialDbId\": \"{{createdTrialELO}}\"\r\n      },\r\n      {\r\n\t    \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDG24a5822a\",\r\n        \"studyDbId\": \"{{createdStudyDbIdELO2}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Check entry\",\r\n          \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"1\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            }\r\n          ]\r\n        },\r\n        \"programDbId\": \"{{api_program_id}}\",\r\n        \"trialDbId\": \"{{createdTrialELO}}\"\r\n      },\r\n      {\r\n\t    \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDG24a5822a\",\r\n        \"studyDbId\": \"{{createdStudyDbIdELO2}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Check entry\",\r\n          \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"6\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            }\r\n          ]\r\n        },\r\n        \"programDbId\": \"{{api_program_id}}\",\r\n        \"trialDbId\": \"{{createdTrialELO}}\"\r\n      },\r\n      {\r\n\t    \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDG24a5822a\",\r\n        \"studyDbId\": \"{{createdStudyDbIdELO2}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Check entry\",\r\n          \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"11\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            }\r\n          ]\r\n        },\r\n        \"programDbId\": \"{{api_program_id}}\",\r\n        \"trialDbId\": \"{{createdTrialELO}}\"\r\n      },\r\n      {\r\n\t    \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDG24a5822a\",\r\n        \"studyDbId\": \"{{createdStudyDbIdELO2}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Check entry\",\r\n          \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"16\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            }\r\n          ]\r\n        },\r\n        \"programDbId\": \"{{api_program_id}}\",\r\n        \"trialDbId\": \"{{createdTrialELO}}\"\r\n      },\r\n      {\r\n        \"germplasmDbId\": \"PKWDGdb639fcd\",\r\n        \"germplasmName\": \"IB14\",\r\n        \"studyDbId\": \"{{createdStudyDbIdELO1}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Test entry\",\r\n          \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"9\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            }\r\n          ]\r\n        },\r\n        \"programDbId\": \"{{api_program_id}}\",\r\n        \"trialDbId\": \"{{createdTrialELO}}\"\r\n      },\r\n      {\r\n\t    \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDGdb639fcd\",\r\n        \"studyDbId\": \"{{createdStudyDbIdELO2}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Test entry\",\r\n          \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"9\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            }\r\n          ]\r\n        },\r\n        \"programDbId\": \"{{api_program_id}}\",\r\n        \"trialDbId\": \"{{createdTrialELO}}\"\r\n      },\r\n      {\r\n\t    \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDGdb7ba6a4\",\r\n        \"studyDbId\": \"{{createdStudyDbIdELO1}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Test entry\",\r\n          \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"10\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            }\r\n          ]\r\n        },\r\n        \"programDbId\": \"{{api_program_id}}\",\r\n        \"trialDbId\": \"{{createdTrialELO}}\"\r\n      },\r\n      {\r\n\t    \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDGdb7ba6a4\",\r\n        \"studyDbId\": \"{{createdStudyDbIdELO2}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Test entry\",\r\n          \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"10\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            }\r\n          ]\r\n        },\r\n        \"programDbId\": \"{{api_program_id}}\",\r\n        \"trialDbId\": \"{{createdTrialELO}}\"\r\n      },\r\n      {\r\n\t    \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDG25fc9e14\",\r\n        \"studyDbId\": \"{{createdStudyDbIdELO1}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Disease check\",\r\n          \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"2\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            }\r\n          ]\r\n        },\r\n        \"programDbId\": \"{{api_program_id}}\",\r\n        \"trialDbId\": \"{{createdTrialELO}}\"\r\n      },\r\n      {\r\n\t    \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDG25fc9e14\",\r\n        \"studyDbId\": \"{{createdStudyDbIdELO1}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Disease check\",\r\n          \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"7\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            }\r\n          ]\r\n        },\r\n        \"programDbId\": \"{{api_program_id}}\",\r\n        \"trialDbId\": \"{{createdTrialELO}}\"\r\n      },\r\n      {\r\n\t    \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDG25fc9e14\",\r\n        \"studyDbId\": \"{{createdStudyDbIdELO1}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Disease check\",\r\n          \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"12\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            }\r\n          ]\r\n        },\r\n        \"programDbId\": \"{{api_program_id}}\",\r\n        \"trialDbId\": \"{{createdTrialELO}}\"\r\n      },\r\n      {\r\n\t    \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDG25fc9e14\",\r\n        \"studyDbId\": \"{{createdStudyDbIdELO1}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Disease check\",\r\n          \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"17\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            }\r\n          ]\r\n        },\r\n        \"programDbId\": \"{{api_program_id}}\",\r\n        \"trialDbId\": \"{{createdTrialELO}}\"\r\n      },\r\n      {\r\n\t    \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDG25fc9e14\",\r\n        \"studyDbId\": \"{{createdStudyDbIdELO2}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Disease check\",\r\n          \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"2\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            }\r\n          ]\r\n        },\r\n        \"programDbId\": \"{{api_program_id}}\",\r\n        \"trialDbId\": \"{{createdTrialELO}}\"\r\n      },\r\n      {\r\n\t    \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDG25fc9e14\",\r\n        \"studyDbId\": \"{{createdStudyDbIdELO2}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Disease check\",\r\n          \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"7\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            }\r\n          ]\r\n        },\r\n        \"programDbId\": \"{{api_program_id}}\",\r\n        \"trialDbId\": \"{{createdTrialELO}}\"\r\n      },\r\n      {\r\n\t    \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDG25fc9e14\",\r\n        \"studyDbId\": \"{{createdStudyDbIdELO2}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Disease check\",\r\n          \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"12\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            }\r\n          ]\r\n        },\r\n        \"programDbId\": \"{{api_program_id}}\",\r\n        \"trialDbId\": \"{{createdTrialELO}}\"\r\n      },\r\n      {\r\n\t    \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDG25fc9e14\",\r\n        \"studyDbId\": \"{{createdStudyDbIdELO2}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Disease check\",\r\n          \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"17\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            }\r\n          ]\r\n        },\r\n        \"programDbId\": \"{{api_program_id}}\",\r\n        \"trialDbId\": \"{{createdTrialELO}}\"\r\n      },\r\n      {\r\n\t    \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDG8a570e06\",\r\n        \"studyDbId\": \"{{createdStudyDbIdELO1}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Test entry\",\r\n          \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"14\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            }\r\n          ]\r\n        },\r\n        \"programDbId\": \"{{api_program_id}}\",\r\n        \"trialDbId\": \"{{createdTrialELO}}\"\r\n      },\r\n      {\r\n\t    \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDG8a570e06\",\r\n        \"studyDbId\": \"{{createdStudyDbIdELO2}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Test entry\",\r\n          \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"14\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            }\r\n          ]\r\n        },\r\n        \"programDbId\": \"{{api_program_id}}\",\r\n        \"trialDbId\": \"{{createdTrialELO}}\"\r\n      },\r\n      {\r\n\t    \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDG3b386538\",\r\n        \"studyDbId\": \"{{createdStudyDbIdELO1}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Stress check\",\r\n          \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"3\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            }\r\n          ]\r\n        },\r\n        \"programDbId\": \"{{api_program_id}}\",\r\n        \"trialDbId\": \"{{createdTrialELO}}\"\r\n      },\r\n      {\r\n\t    \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDG3b386538\",\r\n        \"studyDbId\": \"{{createdStudyDbIdELO1}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Stress check\",\r\n          \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"8\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            }\r\n          ]\r\n        },\r\n        \"programDbId\": \"{{api_program_id}}\",\r\n        \"trialDbId\": \"{{createdTrialELO}}\"\r\n      },\r\n      {\r\n\t    \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDG3b386538\",\r\n        \"studyDbId\": \"{{createdStudyDbIdELO1}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Stress check\",\r\n          \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"13\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            }\r\n          ]\r\n        },\r\n        \"programDbId\": \"{{api_program_id}}\",\r\n        \"trialDbId\": \"{{createdTrialELO}}\"\r\n      },\r\n      {\r\n\t    \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDG3b386538\",\r\n        \"studyDbId\": \"{{createdStudyDbIdELO1}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Stress check\",\r\n          \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"18\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            }\r\n          ]\r\n        },\r\n        \"programDbId\": \"{{api_program_id}}\",\r\n        \"trialDbId\": \"{{createdTrialELO}}\"\r\n      },\r\n      {\r\n\t    \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDG3b386538\",\r\n        \"studyDbId\": \"{{createdStudyDbIdELO2}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Stress check\",\r\n          \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"3\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            }\r\n          ]\r\n        },\r\n        \"programDbId\": \"{{api_program_id}}\",\r\n        \"trialDbId\": \"{{createdTrialELO}}\"\r\n      },\r\n      {\r\n\t    \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDG3b386538\",\r\n        \"studyDbId\": \"{{createdStudyDbIdELO2}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Stress check\",\r\n          \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"8\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            }\r\n          ]\r\n        },\r\n        \"programDbId\": \"{{api_program_id}}\",\r\n        \"trialDbId\": \"{{createdTrialELO}}\"\r\n      },\r\n      {\r\n\t    \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDG3b386538\",\r\n        \"studyDbId\": \"{{createdStudyDbIdELO2}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Stress check\",\r\n          \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"13\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            }\r\n          ]\r\n        },\r\n        \"programDbId\": \"{{api_program_id}}\",\r\n        \"trialDbId\": \"{{createdTrialELO}}\"\r\n      },\r\n      {\r\n\t    \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDG3b386538\",\r\n        \"studyDbId\": \"{{createdStudyDbIdELO2}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Stress check\",\r\n          \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"18\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            }\r\n          ]\r\n        },\r\n        \"programDbId\": \"{{api_program_id}}\",\r\n        \"trialDbId\": \"{{createdTrialELO}}\"\r\n      },\r\n      {\r\n\t    \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDGa669bdd4\",\r\n        \"studyDbId\": \"{{createdStudyDbIdELO1}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Test entry\",\r\n          \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"15\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            }\r\n          ]\r\n        },\r\n        \"programDbId\": \"{{api_program_id}}\",\r\n        \"trialDbId\": \"{{createdTrialELO}}\"\r\n      },\r\n      {\r\n\t    \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDGa669bdd4\",\r\n        \"studyDbId\": \"{{createdStudyDbIdELO2}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Test entry\",\r\n          \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"15\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            }\r\n          ]\r\n        },\r\n        \"programDbId\": \"{{api_program_id}}\",\r\n        \"trialDbId\": \"{{createdTrialELO}}\"\r\n      },\r\n      {\r\n\t    \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDG033908c3\",\r\n        \"studyDbId\": \"{{createdStudyDbIdELO1}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Test entry\",\r\n          \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"19\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            }\r\n          ]\r\n        },\r\n        \"programDbId\": \"{{api_program_id}}\",\r\n        \"trialDbId\": \"{{createdTrialELO}}\"\r\n      },\r\n      {\r\n\t    \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDG033908c3\",\r\n        \"studyDbId\": \"{{createdStudyDbIdELO2}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Test entry\",\r\n          \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"19\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            }\r\n          ]\r\n        },\r\n        \"programDbId\": \"{{api_program_id}}\",\r\n        \"trialDbId\": \"{{createdTrialELO}}\"\r\n      },\r\n\r\n\r\n\r\n      {\r\n\t    \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDGad095cb8\",\r\n        \"studyDbId\": \"{{createdStudyDbIdPrep1}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Test entry\",\r\n           \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"2\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"1\",\r\n              \"levelName\": \"BLOCK\",\r\n              \"levelOrder\": null\r\n            }\r\n          ]\r\n        },\r\n        \"programDbId\": \"{{api_program_id}}\",\r\n        \"trialDbId\": \"{{createdTrialPrep}}\"\r\n      },\r\n      {\r\n        \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDGad095cb8\",\r\n        \"studyDbId\": \"{{createdStudyDbIdPrep1}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Test entry\",\r\n           \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"9\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"2\",\r\n              \"levelName\": \"BLOCK\",\r\n              \"levelOrder\": null\r\n            }\r\n          ]\r\n        },\r\n        \"programDbId\": \"{{api_program_id}}\",\r\n        \"trialDbId\": \"{{createdTrialPrep}}\"\r\n      },\r\n      {\r\n        \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDGad095cb8\",\r\n        \"studyDbId\": \"{{createdStudyDbIdPrep2}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Test entry\",\r\n           \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"1\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"1\",\r\n              \"levelName\": \"BLOCK\",\r\n              \"levelOrder\": null\r\n            }\r\n          ]\r\n        },\r\n        \"programDbId\": \"{{api_program_id}}\",\r\n        \"trialDbId\": \"{{createdTrialPrep}}\"\r\n      },\r\n      {\r\n        \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDGad095cb8\",\r\n        \"studyDbId\": \"{{createdStudyDbIdPrep2}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Test entry\",\r\n           \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"13\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"3\",\r\n              \"levelName\": \"BLOCK\",\r\n              \"levelOrder\": null\r\n            }\r\n          ]\r\n        },\r\n        \"programDbId\": \"{{api_program_id}}\",\r\n        \"trialDbId\": \"{{createdTrialPrep}}\"\r\n      },\r\n      {\r\n        \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDG21d7c9ea\",\r\n        \"studyDbId\": \"{{createdStudyDbIdPrep1}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Non Replicated\",\r\n           \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"3\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"1\",\r\n              \"levelName\": \"BLOCK\",\r\n              \"levelOrder\": null\r\n            }\r\n          ]\r\n        },\r\n        \"programDbId\": \"{{api_program_id}}\",\r\n        \"trialDbId\": \"{{createdTrialPrep}}\"\r\n      },\r\n      {\r\n        \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDG21d7c9ea\",\r\n        \"studyDbId\": \"{{createdStudyDbIdPrep2}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Non Replicated\",\r\n           \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"3\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"1\",\r\n              \"levelName\": \"BLOCK\",\r\n              \"levelOrder\": null\r\n            }\r\n          ]\r\n        },\r\n        \"programDbId\": \"{{api_program_id}}\",\r\n        \"trialDbId\": \"{{createdTrialPrep}}\"\r\n      },\r\n      {\r\n        \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDG24a5822a\",\r\n        \"studyDbId\": \"{{createdStudyDbIdPrep1}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Test entry\",\r\n           \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"6\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"1\",\r\n              \"levelName\": \"BLOCK\",\r\n              \"levelOrder\": null\r\n            }\r\n          ]\r\n        },\r\n        \"programDbId\": \"{{api_program_id}}\",\r\n        \"trialDbId\": \"{{createdTrialPrep}}\"\r\n      },\r\n      {\r\n        \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDG24a5822a\",\r\n        \"studyDbId\": \"{{createdStudyDbIdPrep1}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Test entry\",\r\n           \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"11\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"2\",\r\n              \"levelName\": \"BLOCK\",\r\n              \"levelOrder\": null\r\n            }\r\n          ]\r\n        },\r\n        \"programDbId\": \"{{api_program_id}}\",\r\n        \"trialDbId\": \"{{createdTrialPrep}}\"\r\n      },\r\n      {\r\n        \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDG24a5822a\",\r\n        \"studyDbId\": \"{{createdStudyDbIdPrep2}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Test entry\",\r\n           \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"6\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"2\",\r\n              \"levelName\": \"BLOCK\",\r\n              \"levelOrder\": null\r\n            }\r\n          ]\r\n        },\r\n        \"programDbId\": \"{{api_program_id}}\",\r\n        \"trialDbId\": \"{{createdTrialPrep}}\"\r\n      },\r\n      {\r\n        \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDG24a5822a\",\r\n        \"studyDbId\": \"{{createdStudyDbIdPrep2}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Test entry\",\r\n           \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"11\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"3\",\r\n              \"levelName\": \"BLOCK\",\r\n              \"levelOrder\": null\r\n            }\r\n          ]\r\n        },\r\n        \"programDbId\": \"{{api_program_id}}\",\r\n        \"trialDbId\": \"{{createdTrialPrep}}\"\r\n      },\r\n      {\r\n        \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDGdb639fcd\",\r\n        \"studyDbId\": \"{{createdStudyDbIdPrep1}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Check entry\",\r\n           \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"7\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"2\",\r\n              \"levelName\": \"BLOCK\",\r\n              \"levelOrder\": null\r\n            }\r\n          ]\r\n        },\r\n        \"programDbId\": \"{{api_program_id}}\",\r\n        \"trialDbId\": \"{{createdTrialPrep}}\"\r\n      },\r\n      {\r\n        \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDGdb639fcd\",\r\n        \"studyDbId\": \"{{createdStudyDbIdPrep1}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Check entry\",\r\n           \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"12\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"3\",\r\n              \"levelName\": \"BLOCK\",\r\n              \"levelOrder\": null\r\n            }\r\n          ]\r\n        },\r\n        \"programDbId\": \"{{api_program_id}}\",\r\n        \"trialDbId\": \"{{createdTrialPrep}}\"\r\n      },\r\n      {\r\n        \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDGdb639fcd\",\r\n        \"studyDbId\": \"{{createdStudyDbIdPrep2}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Check entry\",\r\n           \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"4\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"1\",\r\n              \"levelName\": \"BLOCK\",\r\n              \"levelOrder\": null\r\n            }\r\n          ]\r\n        },\r\n        \"programDbId\": \"{{api_program_id}}\",\r\n        \"trialDbId\": \"{{createdTrialPrep}}\"\r\n      },\r\n      {\r\n        \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDGdb639fcd\",\r\n        \"studyDbId\": \"{{createdStudyDbIdPrep2}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Check entry\",\r\n           \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"7\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"2\",\r\n              \"levelName\": \"BLOCK\",\r\n              \"levelOrder\": null\r\n            }\r\n          ]\r\n        },\r\n        \"programDbId\": \"{{api_program_id}}\",\r\n        \"trialDbId\": \"{{createdTrialPrep}}\"\r\n      },\r\n      {\r\n        \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDGdb7ba6a4\",\r\n        \"studyDbId\": \"{{createdStudyDbIdPrep1}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Test entry\",\r\n           \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"1\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"1\",\r\n              \"levelName\": \"BLOCK\",\r\n              \"levelOrder\": null\r\n            }\r\n          ]\r\n        },\r\n        \"programDbId\": \"{{api_program_id}}\",\r\n        \"trialDbId\": \"{{createdTrialPrep}}\"\r\n      },\r\n      {\r\n        \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDGdb7ba6a4\",\r\n        \"studyDbId\": \"{{createdStudyDbIdPrep2}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Test entry\",\r\n           \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"15\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"3\",\r\n              \"levelName\": \"BLOCK\",\r\n              \"levelOrder\": null\r\n            }\r\n          ]\r\n        },\r\n        \"programDbId\": \"{{api_program_id}}\",\r\n        \"trialDbId\": \"{{createdTrialPrep}}\"\r\n      },\r\n      {\r\n        \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDG25fc9e14\",\r\n        \"studyDbId\": \"{{createdStudyDbIdPrep1}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Test entry\",\r\n           \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"4\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"1\",\r\n              \"levelName\": \"BLOCK\",\r\n              \"levelOrder\": null\r\n            }\r\n          ]\r\n        },\r\n        \"programDbId\": \"{{api_program_id}}\",\r\n        \"trialDbId\": \"{{createdTrialPrep}}\"\r\n      },\r\n      {\r\n        \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDG25fc9e14\",\r\n        \"studyDbId\": \"{{createdStudyDbIdPrep1}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Test entry\",\r\n           \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"14\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"3\",\r\n              \"levelName\": \"BLOCK\",\r\n              \"levelOrder\": null\r\n            }\r\n          ]\r\n        },\r\n        \"programDbId\": \"{{api_program_id}}\",\r\n        \"trialDbId\": \"{{createdTrialPrep}}\"\r\n      },\r\n      {\r\n        \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDG25fc9e14\",\r\n        \"studyDbId\": \"{{createdStudyDbIdPrep2}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Test entry\",\r\n           \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"2\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"1\",\r\n              \"levelName\": \"BLOCK\",\r\n              \"levelOrder\": null\r\n            }\r\n          ]\r\n        },\r\n        \"programDbId\": \"{{api_program_id}}\",\r\n        \"trialDbId\": \"{{createdTrialPrep}}\"\r\n      },\r\n      {\r\n        \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDG25fc9e14\",\r\n        \"studyDbId\": \"{{createdStudyDbIdPrep2}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Test entry\",\r\n           \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"10\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"2\",\r\n              \"levelName\": \"BLOCK\",\r\n              \"levelOrder\": null\r\n            }\r\n          ]\r\n        },\r\n        \"programDbId\": \"{{api_program_id}}\",\r\n        \"trialDbId\": \"{{createdTrialPrep}}\"\r\n      },\r\n      {\r\n        \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDG8a570e06\",\r\n        \"studyDbId\": \"{{createdStudyDbIdPrep1}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Check entry\",\r\n           \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"8\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"2\",\r\n              \"levelName\": \"BLOCK\",\r\n              \"levelOrder\": null\r\n            }\r\n          ]\r\n        },\r\n        \"programDbId\": \"{{api_program_id}}\",\r\n        \"trialDbId\": \"{{createdTrialPrep}}\"\r\n      },\r\n      {\r\n        \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDG8a570e06\",\r\n        \"studyDbId\": \"{{createdStudyDbIdPrep1}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Check entry\",\r\n           \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"15\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"3\",\r\n              \"levelName\": \"BLOCK\",\r\n              \"levelOrder\": null\r\n            }\r\n          ]\r\n        },\r\n        \"programDbId\": \"{{api_program_id}}\",\r\n        \"trialDbId\": \"{{createdTrialPrep}}\"\r\n      },\r\n      {\r\n        \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDG8a570e06\",\r\n        \"studyDbId\": \"{{createdStudyDbIdPrep2}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Check entry\",\r\n           \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"5\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"1\",\r\n              \"levelName\": \"BLOCK\",\r\n              \"levelOrder\": null\r\n            }\r\n          ]\r\n        },\r\n        \"programDbId\": \"{{api_program_id}}\",\r\n        \"trialDbId\": \"{{createdTrialPrep}}\"\r\n      },\r\n      {\r\n        \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDG8a570e06\",\r\n        \"studyDbId\": \"{{createdStudyDbIdPrep2}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Check entry\",\r\n           \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"16\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"3\",\r\n              \"levelName\": \"BLOCK\",\r\n              \"levelOrder\": null\r\n            }\r\n          ]\r\n        },\r\n        \"programDbId\": \"{{api_program_id}}\",\r\n        \"trialDbId\": \"{{createdTrialPrep}}\"\r\n      },\r\n      {\r\n        \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDG3b386538\",\r\n        \"studyDbId\": \"{{createdStudyDbIdPrep1}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Test entry\",\r\n           \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"5\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"1\",\r\n              \"levelName\": \"BLOCK\",\r\n              \"levelOrder\": null\r\n            }\r\n          ]\r\n        },\r\n        \"programDbId\": \"{{api_program_id}}\",\r\n        \"trialDbId\": \"{{createdTrialPrep}}\"\r\n      },\r\n      {\r\n        \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDG3b386538\",\r\n        \"studyDbId\": \"{{createdStudyDbIdPrep1}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Test entry\",\r\n           \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"13\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"3\",\r\n              \"levelName\": \"BLOCK\",\r\n              \"levelOrder\": null\r\n            }\r\n          ]\r\n        },\r\n        \"programDbId\": \"{{api_program_id}}\",\r\n        \"trialDbId\": \"{{createdTrialPrep}}\"\r\n      },\r\n      {\r\n        \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDG3b386538\",\r\n        \"studyDbId\": \"{{createdStudyDbIdPrep2}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Test entry\",\r\n           \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"8\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"2\",\r\n              \"levelName\": \"BLOCK\",\r\n              \"levelOrder\": null\r\n            }\r\n          ]\r\n        },\r\n        \"programDbId\": \"{{api_program_id}}\",\r\n        \"trialDbId\": \"{{createdTrialPrep}}\"\r\n      },\r\n      {\r\n        \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDG3b386538\",\r\n        \"studyDbId\": \"{{createdStudyDbIdPrep2}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Test entry\",\r\n           \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"12\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"3\",\r\n              \"levelName\": \"BLOCK\",\r\n              \"levelOrder\": null\r\n            }\r\n          ]\r\n        },\r\n        \"programDbId\": \"{{api_program_id}}\",\r\n        \"trialDbId\": \"{{createdTrialPrep}}\"\r\n      },\r\n      {\r\n        \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDGa669bdd4\",\r\n        \"studyDbId\": \"{{createdStudyDbIdPrep1}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Test entry\",\r\n           \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"10\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"2\",\r\n              \"levelName\": \"BLOCK\",\r\n              \"levelOrder\": null\r\n            }\r\n          ]\r\n        },\r\n        \"programDbId\": \"{{api_program_id}}\",\r\n        \"trialDbId\": \"{{createdTrialPrep}}\"\r\n      },\r\n      {\r\n        \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDGa669bdd4\",\r\n        \"studyDbId\": \"{{createdStudyDbIdPrep2}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Test entry\",\r\n           \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"14\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"3\",\r\n              \"levelName\": \"BLOCK\",\r\n              \"levelOrder\": null\r\n            }\r\n          ]\r\n        },\r\n        \"programDbId\": \"{{api_program_id}}\",\r\n        \"trialDbId\": \"{{createdTrialPrep}}\"\r\n      },\r\n      {\r\n        \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDG033908c3\",\r\n        \"studyDbId\": \"{{createdStudyDbIdPrep1}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Test entry\",\r\n           \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"16\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"3\",\r\n              \"levelName\": \"BLOCK\",\r\n              \"levelOrder\": null\r\n            }\r\n          ]\r\n        },\r\n        \"programDbId\": \"{{api_program_id}}\",\r\n        \"trialDbId\": \"{{createdTrialPrep}}\"\r\n      },\r\n      {\r\n        \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDG033908c3\",\r\n        \"studyDbId\": \"{{createdStudyDbIdPrep2}}\",\r\n        \"observationUnitPosition\": {\r\n          \"entryType\": \"Test entry\",\r\n           \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n          \"observationLevelRelationships\": [\r\n            {\r\n              \"levelCode\": \"9\",\r\n              \"levelName\": \"PLOT\",\r\n              \"levelOrder\": null\r\n            },\r\n            {\r\n              \"levelCode\": \"2\",\r\n              \"levelName\": \"BLOCK\",\r\n              \"levelOrder\": null\r\n            }\r\n          ]\r\n        },\r\n        \"programDbId\": \"{{api_program_id}}\",\r\n        \"trialDbId\": \"{{createdTrialPrep}}\"\r\n      }\r\n\r\n]"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/observationunits",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"observationunits"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered required details only",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"//Check status",
											"pm.test(\"Check messageType\", function () {",
											"    pm.expect(jsonData.metadata.status[0].messageType).to.eql(\"INFO\");",
											"});",
											"pm.test(\"Check message\", function () {",
											"    pm.expect(jsonData.metadata.status[0].message).to.eql(\"1 out of 1 observation units created successfully.\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n    {\r\n        \"germplasmDbId\": \"{{germplasm_uuid}}\",\r\n        \"observationUnitPosition\": {\r\n            \"entryType\": \"Test entry\",\r\n            \"observationLevelRelationships\": [\r\n                {\r\n                    \"levelCode\": \"3\",\r\n                    \"levelName\": \"PLOT\",\r\n                    \"levelOrder\": 0\r\n                },\r\n                {\r\n                    \"levelCode\": \"3\",\r\n                    \"levelName\": \"REP\",\r\n                    \"levelOrder\": 0\r\n                },\r\n                {\r\n                    \"levelCode\": \"1\",\r\n                    \"levelName\": \"BLOCK\",\r\n                    \"levelOrder\": 0\r\n                }\r\n            ],\r\n            \"positionCoordinateX\": \"1\",\r\n            \"positionCoordinateY\": \"2\"\r\n        },\r\n        \"programDbId\": \"{{api_program_id}}\",\r\n        \"studyDbId\": \"{{createdStudyDbId1}}\",\r\n        \"trialDbId\": \"{{createdTrialDbId}}\"\r\n    }\r\n]"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/observationunits",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"observationunits"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						},
						{
							"name": "Verify response code and body entered invalid levelCode",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"//Check status",
											"pm.test(\"Check messageType\", function () {",
											"    pm.expect(jsonData.metadata.status[0].messageType).to.eql(\"INFO\");",
											"});",
											"pm.test(\"Check message\", function () {",
											"    pm.expect(jsonData.metadata.status[0].message).to.eql(\"0 out of 1 observation units created successfully.\");",
											"});",
											"pm.test(\"Check messageType\", function () {",
											"    pm.expect(jsonData.metadata.status[1].messageType).to.eql(\"ERROR\");",
											"});;",
											"pm.test(\"Check error message for invalid levelNames\", function () {",
											"    pm.expect(jsonData.metadata.status[1].message).to.eql(\"ERROR1 Observation Unit at position 1 is invalid because plot level code is not valid.\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n    {\r\n        \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"{{germplasm_uuid}}\",\r\n        \"observationUnitPosition\": {\r\n            \"entryType\": \"Test entry\",\r\n            \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n            \"observationLevelRelationships\": [\r\n                {\r\n                    \"levelCode\": \"0\",\r\n                    \"levelName\": \"PLOT\",\r\n                    \"levelOrder\": 0\r\n                },\r\n                {\r\n                    \"levelCode\": \"1\",\r\n                    \"levelName\": \"REP\",\r\n                    \"levelOrder\": 0\r\n                },\r\n                {\r\n                    \"levelCode\": \"1\",\r\n                    \"levelName\": \"BLOCK\",\r\n                    \"levelOrder\": 0\r\n                }\r\n            ],\r\n            \"positionCoordinateX\": \"1\",\r\n            \"positionCoordinateY\": \"2\"\r\n        },\r\n        \"programDbId\": \"{{api_program_id}}\",\r\n        \"studyDbId\": \"{{createdStudyDbId1}}\",\r\n        \"trialDbId\": \"{{createdTrialDbId}}\"\r\n    }\r\n]"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/observationunits",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"observationunits"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						},
						{
							"name": "Verify response code and body entered invalid levelNames",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"//Check status",
											"pm.test(\"Check messageType\", function () {",
											"    pm.expect(jsonData.metadata.status[0].messageType).to.eql(\"INFO\");",
											"});",
											"pm.test(\"Check message\", function () {",
											"    pm.expect(jsonData.metadata.status[0].message).to.eql(\"0 out of 1 observation units created successfully.\");",
											"});",
											"pm.test(\"Check messageType\", function () {",
											"    pm.expect(jsonData.metadata.status[1].messageType).to.eql(\"ERROR\");",
											"});;",
											"pm.test(\"Check error message for invalid levelNames\", function () {",
											"    pm.expect(jsonData.metadata.status[1].message).to.eql(\"ERROR1 Observation Unit at position 1 is invalid. ObservationLevelRelationship levelNames allowed values are PLOT, REP, and BLOCK.  \");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n    {\r\n        \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"{{germplasm_uuid}}\",\r\n        \"observationUnitPosition\": {\r\n            \"entryType\": \"Test entry\",\r\n            \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n            \"observationLevelRelationships\": [\r\n                {\r\n                    \"levelCode\": \"1\",\r\n                    \"levelName\": \"PLOT_NO\",\r\n                    \"levelOrder\": 0\r\n                },\r\n                {\r\n                    \"levelCode\": \"1\",\r\n                    \"levelName\": \"REP\",\r\n                    \"levelOrder\": 0\r\n                },\r\n                {\r\n                    \"levelCode\": \"1\",\r\n                    \"levelName\": \"BLOCK\",\r\n                    \"levelOrder\": 0\r\n                }\r\n            ],\r\n            \"positionCoordinateX\": \"1\",\r\n            \"positionCoordinateY\": \"2\"\r\n        },\r\n        \"programDbId\": \"{{api_program_id}}\",\r\n        \"studyDbId\": \"{{createdStudyDbId1}}\",\r\n        \"trialDbId\": \"{{createdTrialDbId}}\"\r\n    }\r\n]"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/observationunits",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"observationunits"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when no plot specified",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"//Check status",
											"pm.test(\"Check messageType\", function () {",
											"    pm.expect(jsonData.metadata.status[0].messageType).to.eql(\"INFO\");",
											"});",
											"pm.test(\"Check message\", function () {",
											"    pm.expect(jsonData.metadata.status[0].message).to.eql(\"0 out of 1 observation units created successfully.\");",
											"});",
											"pm.test(\"Check messageType\", function () {",
											"    pm.expect(jsonData.metadata.status[1].messageType).to.eql(\"ERROR\");",
											"});;",
											"pm.test(\"Check error message for missing PLOT\", function () {",
											"    pm.expect(jsonData.metadata.status[1].message).to.eql(\"ERROR1 Observation Unit at position 1 is invalid because it has no PLOT in observationLevelRelationships.\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n    {\r\n        \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"{{germplasm_uuid}}\",\r\n        \"observationUnitPosition\": {\r\n            \"entryType\": \"Test entry\",\r\n            \"geoCoordinates\": {\r\n                \"geometry\": {\r\n                    \"coordinates\": [\r\n                        -76.506042,\r\n                        42.417373,\r\n                        123\r\n                    ],\r\n                    \"type\": \"Point\"\r\n                },\r\n                \"type\": \"Feature\"\r\n            },\r\n            \"observationLevelRelationships\": [\r\n                {\r\n                    \"levelCode\": \"1\",\r\n                    \"levelName\": \"REP\",\r\n                    \"levelOrder\": 0\r\n                },\r\n                {\r\n                    \"levelCode\": \"1\",\r\n                    \"levelName\": \"BLOCK\",\r\n                    \"levelOrder\": 0\r\n                }\r\n            ],\r\n            \"positionCoordinateX\": \"1\",\r\n            \"positionCoordinateY\": \"2\"\r\n        },\r\n        \"programDbId\": \"{{api_program_id}}\",\r\n        \"studyDbId\": \"{{createdStudyDbId1}}\",\r\n        \"trialDbId\": \"{{createdTrialDbId}}\"\r\n    }\r\n]"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/observationunits",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"observationunits"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when no trialDbId specified",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"//Check status",
											"pm.test(\"Check messageType\", function () {",
											"    pm.expect(jsonData.metadata.status[0].messageType).to.eql(\"INFO\");",
											"});",
											"pm.test(\"Check message\", function () {",
											"    pm.expect(jsonData.metadata.status[0].message).to.eql(\"0 out of 1 observation units created successfully.\");",
											"});",
											"pm.test(\"Check messageType\", function () {",
											"    pm.expect(jsonData.metadata.status[1].messageType).to.eql(\"ERROR\");",
											"});;",
											"pm.test(\"Check error message for missing trialDbId\", function () {",
											"    pm.expect(jsonData.metadata.status[1].message).to.eql(\"ERROR1 Observation Unit at position 1 is invalid because the trialDbId is not specified.\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n    {\r\n        \"germplasmDbId\": \"{{germplasm_uuid}}\",\r\n        \"observationUnitPosition\": {\r\n            \"entryType\": \"Test entry\"\r\n            },\r\n        \"programDbId\": \"{{api_program_id}}\",\r\n        \"studyDbId\": \"{{createdStudyDbId}}\"\r\n    }\r\n]"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/observationunits",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"observationunits"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when no studyDbId specified",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"//Check status",
											"pm.test(\"Check messageType\", function () {",
											"    pm.expect(jsonData.metadata.status[0].messageType).to.eql(\"INFO\");",
											"});",
											"pm.test(\"Check message\", function () {",
											"    pm.expect(jsonData.metadata.status[0].message).to.eql(\"0 out of 1 observation units created successfully.\");",
											"});",
											"pm.test(\"Check messageType\", function () {",
											"    pm.expect(jsonData.metadata.status[1].messageType).to.eql(\"ERROR\");",
											"});;",
											"pm.test(\"Check error message for missing studyDbId\", function () {",
											"    pm.expect(jsonData.metadata.status[1].message).to.eql(\"ERROR1 Observation Unit at position 1 is invalid because the studyDbId is not specified.\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n    {\r\n        \"germplasmDbId\": \"{{germplasm_uuid}}\",\r\n        \"observationUnitPosition\": {\r\n            \"entryType\": \"Test entry\"\r\n            },\r\n        \"programDbId\": \"{{api_program_id}}\",\r\n        \"trialDbId\": \"{{createdTrialDbId}}\"\r\n    }\r\n]"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/observationunits",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"observationunits"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when no programDbId specified",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"//Check status",
											"pm.test(\"Check messageType\", function () {",
											"    pm.expect(jsonData.metadata.status[0].messageType).to.eql(\"INFO\");",
											"});",
											"pm.test(\"Check message\", function () {",
											"    pm.expect(jsonData.metadata.status[0].message).to.eql(\"0 out of 1 observation units created successfully.\");",
											"});",
											"pm.test(\"Check messageType\", function () {",
											"    pm.expect(jsonData.metadata.status[1].messageType).to.eql(\"ERROR\");",
											"});;",
											"pm.test(\"Check error message for missing programDbId\", function () {",
											"    pm.expect(jsonData.metadata.status[1].message).to.eql(\"ERROR1 Observation Unit at position 1 is invalid because the programDbId is not specified.\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n    {\r\n        \"germplasmDbId\": \"{{germplasm_uuid}}\",\r\n        \"observationUnitPosition\": {\r\n            \"entryType\": \"Test entry\"\r\n            },\r\n        \"studyDbId\": \"{{createdStudyDbId}}\",\r\n        \"trialDbId\": \"{{createdTrialDbId}}\"\r\n    }\r\n]"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/observationunits",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"observationunits"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when no entryType specified",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"//Check status",
											"pm.test(\"Check messageType\", function () {",
											"    pm.expect(jsonData.metadata.status[0].messageType).to.eql(\"INFO\");",
											"});",
											"pm.test(\"Check message\", function () {",
											"    pm.expect(jsonData.metadata.status[0].message).to.eql(\"0 out of 1 observation units created successfully.\");",
											"});",
											"pm.test(\"Check messageType\", function () {",
											"    pm.expect(jsonData.metadata.status[1].messageType).to.eql(\"ERROR\");",
											"});;",
											"pm.test(\"Check error message for missing entryType\", function () {",
											"    pm.expect(jsonData.metadata.status[1].message).to.eql(\"ERROR1 Observation Unit at position 1 is invalid because entryType is not specified.\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n    {\r\n        \"germplasmDbId\": \"{{germplasm_uuid}}\",\r\n        \"programDbId\": \"{{api_program_id}}\",\r\n        \"studyDbId\": \"{{createdStudyDbId1}}\",\r\n        \"trialDbId\": \"{{createdTrialDbId}}\"\r\n    }\r\n]"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/observationunits",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"observationunits"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when no germplasmDbId specified",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"//Check status",
											"pm.test(\"Check messageType\", function () {",
											"    pm.expect(jsonData.metadata.status[0].messageType).to.eql(\"INFO\");",
											"});",
											"pm.test(\"Check message\", function () {",
											"    pm.expect(jsonData.metadata.status[0].message).to.eql(\"0 out of 1 observation units created successfully.\");",
											"});",
											"pm.test(\"Check messageType\", function () {",
											"    pm.expect(jsonData.metadata.status[1].messageType).to.eql(\"ERROR\");",
											"});;",
											"pm.test(\"Check error message for missing germplasmDbId\", function () {",
											"    pm.expect(jsonData.metadata.status[1].message).to.eql(\"ERROR1 Observation Unit at position 1 is invalid because germplasmDbId is not specified.\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n    {\r\n        \"observationUnitPosition\": {\r\n            \"entryType\": \"Test entry\"\r\n            },\r\n        \"programDbId\": \"{{api_program_id}}\",\r\n        \"studyDbId\": \"{{createdStudyDbId1}}\",\r\n        \"trialDbId\": \"{{createdTrialDbId}}\"\r\n    }\r\n]"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/observationunits",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"observationunits"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered non-existing trialDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"//Check status",
											"pm.test(\"Check messageType\", function () {",
											"    pm.expect(jsonData.metadata.status[0].messageType).to.eql(\"INFO\");",
											"});",
											"pm.test(\"Check message\", function () {",
											"    pm.expect(jsonData.metadata.status[0].message).to.eql(\"0 out of 1 observation units created successfully.\");",
											"});",
											"pm.test(\"Check messageType\", function () {",
											"    pm.expect(jsonData.metadata.status[1].messageType).to.eql(\"ERROR\");",
											"});;",
											"pm.test(\"Check error message for invalid programDbId, trialDbId, and studyDbId combination\", function () {",
											"    pm.expect(jsonData.metadata.status[1].message).to.eql(\"ERROR1 Observation Unit at position 1 is invalid because there is no study with specified programDbId, trialDbId, and studyDbId.\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n    {\r\n        \"germplasmDbId\": \"{{germplasm_uuid}}\",\r\n        \"observationUnitPosition\": {\r\n            \"entryType\": \"Test entry\"\r\n            },\r\n        \"programDbId\": \"{{api_program_id}}\",\r\n        \"studyDbId\": \"{{createdStudyDbId1}}\",\r\n        \"trialDbId\": \"{{non_existing_study_id}}\"\r\n    }\r\n]"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/observationunits",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"observationunits"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered non-existing programDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"//Check status",
											"pm.test(\"Check messageType\", function () {",
											"    pm.expect(jsonData.metadata.status[0].messageType).to.eql(\"INFO\");",
											"});",
											"pm.test(\"Check message\", function () {",
											"    pm.expect(jsonData.metadata.status[0].message).to.eql(\"0 out of 1 observation units created successfully.\");",
											"});",
											"pm.test(\"Check messageType\", function () {",
											"    pm.expect(jsonData.metadata.status[1].messageType).to.eql(\"ERROR\");",
											"});;",
											"pm.test(\"Check error message for invalid programDbId, trialDbId, and studyDbId combination\", function () {",
											"    pm.expect(jsonData.metadata.status[1].message).to.eql(\"ERROR1 Observation Unit at position 1 is invalid because there is no study with specified programDbId, trialDbId, and studyDbId.\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n    {\r\n        \"germplasmDbId\": \"{{germplasm_uuid}}\",\r\n        \"observationUnitPosition\": {\r\n            \"entryType\": \"Test entry\"\r\n            },\r\n        \"programDbId\": \"nonExisting\",\r\n        \"studyDbId\": \"{{createdStudyDbId}}\",\r\n        \"trialDbId\": \"{{createdTrialDbId}}\"\r\n    }\r\n]"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/observationunits",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"observationunits"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered non-existing studyDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"//Check status",
											"pm.test(\"Check messageType\", function () {",
											"    pm.expect(jsonData.metadata.status[0].messageType).to.eql(\"INFO\");",
											"});",
											"pm.test(\"Check message\", function () {",
											"    pm.expect(jsonData.metadata.status[0].message).to.eql(\"0 out of 1 observation units created successfully.\");",
											"});",
											"pm.test(\"Check messageType\", function () {",
											"    pm.expect(jsonData.metadata.status[1].messageType).to.eql(\"ERROR\");",
											"});;",
											"pm.test(\"Check error message for invalid programDbId, trialDbId, and studyDbId combination\", function () {",
											"    pm.expect(jsonData.metadata.status[1].message).to.eql(\"ERROR1 Observation Unit at position 1 is invalid because there is no study with specified programDbId, trialDbId, and studyDbId.\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n    {\r\n        \"germplasmDbId\": \"{{germplasm_uuid}}\",\r\n        \"observationUnitPosition\": {\r\n            \"entryType\": \"Test entry\"\r\n            },\r\n        \"programDbId\": \"{{api_program_id}}\",\r\n        \"studyDbId\": \"{{non_existing_study_id}}\",\r\n        \"trialDbId\": \"{{createdTrialDbId}}\"\r\n    }\r\n]"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/observationunits",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"observationunits"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered non-existing germplasmDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"//Check status",
											"pm.test(\"Check messageType\", function () {",
											"    pm.expect(jsonData.metadata.status[0].messageType).to.eql(\"INFO\");",
											"});",
											"pm.test(\"Check message\", function () {",
											"    pm.expect(jsonData.metadata.status[0].message).to.eql(\"0 out of 1 observation units created successfully.\");",
											"});",
											"pm.test(\"Check messageType\", function () {",
											"    pm.expect(jsonData.metadata.status[1].messageType).to.eql(\"ERROR\");",
											"});;",
											"pm.test(\"Check if error message for invalid germplasmDbId\", function () {",
											"    pm.expect(jsonData.metadata.status[1].message).to.eql(\"ERROR1 Observation Unit at position 1 is invalid because germplasmDbId is invalid.\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n    {\r\n        \"germplasmDbId\": \"invalid\",\r\n        \"observationUnitPosition\": {\r\n            \"entryType\": \"Test entry\"\r\n            },\r\n        \"programDbId\": \"{{api_program_id}}\",\r\n        \"studyDbId\": \"{{createdStudyDbId1}}\",\r\n        \"trialDbId\": \"{{createdTrialDbId}}\"\r\n    }\r\n]"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/observationunits",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"observationunits"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered germplasmDbId that is not yet used in the study",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"//Check status",
											"pm.test(\"Check messageType\", function () {",
											"    pm.expect(jsonData.metadata.status[0].messageType).to.eql(\"INFO\");",
											"});",
											"pm.test(\"Check message\", function () {",
											"    pm.expect(jsonData.metadata.status[0].message).to.eql(\"1 out of 1 observation units created successfully.\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n    {\r\n        \"germplasmDbId\": \"PKWDGa03082db\",\r\n        \"observationUnitPosition\": {\r\n            \"entryType\": \"Test entry\",\r\n            \"observationLevelRelationships\": [\r\n                {\r\n                    \"levelCode\": \"41\",\r\n                    \"levelName\": \"PLOT\",\r\n                    \"levelOrder\": 0\r\n                },\r\n                {\r\n                    \"levelCode\": \"1\",\r\n                    \"levelName\": \"REP\",\r\n                    \"levelOrder\": 0\r\n                }\r\n            ],\r\n            \r\n             \"positionCoordinateX\": \"1\",\r\n             \"positionCoordinateY\": \"2\"\r\n            },\r\n        \"programDbId\": \"{{api_program_id}}\",\r\n        \"studyDbId\": \"{{createdStudyDbId1}}\",\r\n        \"trialDbId\": \"{{createdTrialDbId}}\"\r\n    }\r\n]"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/observationunits",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"observationunits"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid entry type",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"//Check status",
											"pm.test(\"Check messageType\", function () {",
											"    pm.expect(jsonData.metadata.status[0].messageType).to.eql(\"INFO\");",
											"});",
											"pm.test(\"Check message\", function () {",
											"    pm.expect(jsonData.metadata.status[0].message).to.eql(\"0 out of 1 observation units created successfully.\");",
											"});",
											"pm.test(\"Check messageType\", function () {",
											"    pm.expect(jsonData.metadata.status[1].messageType).to.eql(\"ERROR\");",
											"});;",
											"pm.test(\"Check if error message for invalid entryType\", function () {",
											"    pm.expect(jsonData.metadata.status[1].message).to.eql(\"ERROR1 Observation Unit at position 1 is invalid because entryType is invalid.\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n    {\r\n        \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"refID\",\r\n                \"referenceSource\": \"referenceSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDG34bd21ac\",\r\n        \"observationUnitPosition\": {\r\n            \"entryType\": \"invalid\",\r\n            \"observationLevelRelationships\": [\r\n                {\r\n                    \"levelCode\": \"1\",\r\n                    \"levelName\": \"PLOT\",\r\n                    \"levelOrder\": 0\r\n                },\r\n                {\r\n                    \"levelCode\": \"1\",\r\n                    \"levelName\": \"REP\",\r\n                    \"levelOrder\": 0\r\n                }\r\n            ]\r\n        },\r\n        \"programDbId\": \"{{api_program_id}}\",\r\n        \"studyDbId\": \"{{createdStudyDbId1}}\",\r\n        \"trialDbId\": \"{{createdTrialDbId}}\"\r\n    }\r\n]"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/observationunits",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"observationunits"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered referenceSource greater than max length",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"//Check status",
											"pm.test(\"Check messageType\", function () {",
											"    pm.expect(jsonData.metadata.status[0].messageType).to.eql(\"INFO\");",
											"});",
											"pm.test(\"Check message\", function () {",
											"    pm.expect(jsonData.metadata.status[0].message).to.eql(\"0 out of 1 observation units created successfully.\");",
											"});",
											"pm.test(\"Check messageType\", function () {",
											"    pm.expect(jsonData.metadata.status[1].messageType).to.eql(\"ERROR\");",
											"});;",
											"pm.test(\"Check if error message for missing trialName\", function () {",
											"    pm.expect(jsonData.metadata.status[1].message).to.eql(\"ERROR1 Observation Unit at position 1 is invalid because referenceSource in referenceSource must not exceed length of 255.\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n    {\r\n        \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"HMMF\",\r\n                \"referenceSource\": \"referenceResourceeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"PKWDG34bd21ac\",\r\n        \"observationUnitPosition\": {\r\n            \"entryType\": \"Test entry\",\r\n            \"observationLevelRelationships\": [\r\n                {\r\n                    \"levelCode\": \"1\",\r\n                    \"levelName\": \"PLOT\",\r\n                    \"levelOrder\": 0\r\n                },\r\n                {\r\n                    \"levelCode\": \"1\",\r\n                    \"levelName\": \"REP\",\r\n                    \"levelOrder\": 0\r\n                }\r\n            ]\r\n        },\r\n        \"programDbId\": \"{{api_program_id}}\",\r\n        \"studyDbId\": \"{{createdStudyDbId1}}\",\r\n        \"trialDbId\": \"{{createdTrialDbId}}\"\r\n    }\r\n]"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/observationunits",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"observationunits"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						}
					]
				},
				{
					"name": "PUT ​/{crop}​/brapi​/v2​/variables​/{observationVariableDbId}",
					"item": [
						{
							"name": "Verify response code and body entered complete set of inputs for character/text variable",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Check status messageType\", function () {\r",
											"    pm.expect(jsonData.metadata.status[0].messageType).to.eql(\"INFO\");\r",
											"});\r",
											"pm.test(\"Check status message\", function () {\r",
											"    pm.expect(jsonData.metadata.status[0].message).to.eql(\"NOTES variable is updated successfully.\");\r",
											"});\r",
											"pm.test(\"Check additionalInfo\", function () {\r",
											"    pm.expect(jsonData.result.additionalInfo).to.eql({});\r",
											"});\r",
											"pm.test(\"Check commonCropName\", function () {\r",
											"    pm.expect(jsonData.result.commonCropName).to.eql(pm.environment.get(\"crop\"));\r",
											"});\r",
											"pm.test(\"Check defaultValue\", function () {\r",
											"    pm.expect(jsonData.result.defaultValue).to.eql(\"\");\r",
											"});\r",
											"pm.test(\"Check documentationURL\", function () {\r",
											"    pm.expect(jsonData.result.documentationURL).to.eql(null);\r",
											"});\r",
											"pm.test(\"Check externalReferences referenceID\", function () {\r",
											"    pm.expect(jsonData.result.externalReferences[0].referenceID).to.eql(\"noteReferenceID\");\r",
											"});\r",
											"pm.test(\"Check externalReferences referenceSource\", function () {\r",
											"    pm.expect(jsonData.result.externalReferences[0].referenceSource).to.eql(\"noteReferenceSource\");\r",
											"});\r",
											"pm.test(\"Check growthStage\", function () {\r",
											"    pm.expect(jsonData.result.growthStage).to.eql(null);\r",
											"});\r",
											"pm.test(\"Check institution\", function () {\r",
											"    pm.expect(jsonData.result.institution).to.eql(null);\r",
											"});\r",
											"pm.test(\"Check language\", function () {\r",
											"    pm.expect(jsonData.result.language).to.eql(null);\r",
											"});\r",
											"pm.test(\"Check observationVariableDbId\", function () {\r",
											"    pm.expect(jsonData.result.observationVariableDbId).to.eql(\"8390\");\r",
											"});\r",
											"pm.test(\"Check observationVariableName\", function () {\r",
											"    pm.expect(jsonData.result.observationVariableName).to.eql(\"NOTES\");\r",
											"});\r",
											"pm.test(\"Check ontologyReference\", function () {\r",
											"    pm.expect(jsonData.result.ontologyReference).to.eql(null);\r",
											"});\r",
											"//Check trait\r",
											"pm.test(\"Check trait additionalInfo\", function () {\r",
											"    pm.expect(jsonData.result.trait.additionalInfo).to.eql({});\r",
											"});\r",
											"pm.test(\"Check trait alternativeAbbreviations\", function () {\r",
											"    pm.expect(jsonData.result.trait.alternativeAbbreviations).to.eql([]);\r",
											"});\r",
											"pm.test(\"Check trait attribute\", function () {\r",
											"    pm.expect(jsonData.result.trait.attribute).to.eql(null);\r",
											"});\r",
											"pm.test(\"Check trait entity\", function () {\r",
											"    pm.expect(jsonData.result.trait.entity).to.eql(null);\r",
											"});\r",
											"pm.test(\"Check trait externalReferences referenceID \", function () {\r",
											"    pm.expect(jsonData.result.trait.externalReferences[0].referenceID).to.eql(\"noteTraitReferenceID\");\r",
											"});\r",
											"pm.test(\"Check trait externalReferences referenceSource \", function () {\r",
											"    pm.expect(jsonData.result.trait.externalReferences[0].referenceSource).to.eql(\"noteTraitReferenceSource\");\r",
											"});\r",
											"pm.test(\"Check trait mainAbbreviation\", function () {\r",
											"    pm.expect(jsonData.result.trait.mainAbbreviation).to.eql(null);\r",
											"});\r",
											"pm.test(\"Check trait traitClass\", function () {\r",
											"    pm.expect(jsonData.result.trait.traitClass).to.eql(\"General\");\r",
											"});\r",
											"pm.test(\"Check trait traitDescription\", function () {\r",
											"    pm.expect(jsonData.result.trait.traitDescription).to.eql(\"Comment\");\r",
											"});\r",
											"pm.test(\"Check trait status\", function () {\r",
											"    pm.expect(jsonData.result.trait.status).to.eql(\"Active\");\r",
											"});\r",
											"pm.test(\"Check trait synonyms\", function () {\r",
											"    pm.expect(jsonData.result.trait.synonyms).to.eql([]);\r",
											"});\r",
											"pm.test(\"Check trait traitName\", function () {\r",
											"    pm.expect(jsonData.result.trait.traitName).to.eql(\"Comment\");\r",
											"});\r",
											"pm.test(\"Check trait ontologyReference documentationLinks\", function () {\r",
											"    pm.expect(jsonData.result.trait.ontologyReference.documentationLinks).to.eql([]);\r",
											"});\r",
											"pm.test(\"Check trait ontologyReference ontologyDbId\", function () {\r",
											"    pm.expect(jsonData.result.trait.ontologyReference.ontologyDbId).to.eql(\"null\");\r",
											"});\r",
											"pm.test(\"Check trait ontologyReference version\", function () {\r",
											"    pm.expect(jsonData.result.trait.ontologyReference.version).to.eql(null);\r",
											"});\r",
											"\r",
											"//Check method\r",
											"pm.test(\"Check method additionalInfo\", function () {\r",
											"    pm.expect(jsonData.result.method.additionalInfo).to.eql({});\r",
											"});\r",
											"pm.test(\"Check method bibliographicalReference\", function () {\r",
											"    pm.expect(jsonData.result.method.bibliographicalReference).to.eql(null);\r",
											"});\r",
											"pm.test(\"Check method externalReferences referenceID\", function () {\r",
											"    pm.expect(jsonData.result.method.externalReferences[0].referenceID).to.eql('noteMethodReferenceID');\r",
											"});\r",
											"pm.test(\"Check method externalReferences referenceSource\", function () {\r",
											"    pm.expect(jsonData.result.method.externalReferences[0].referenceSource).to.eql('noteMethodReferenceSource');\r",
											"});\r",
											"pm.test(\"Check method methodClass\", function () {\r",
											"    pm.expect(jsonData.result.method.methodClass).to.eql(null);\r",
											"});\r",
											"pm.test(\"Check method description\", function () {\r",
											"    pm.expect(jsonData.result.method.description).to.eql(\"Value recorded after observation\");\r",
											"});\r",
											"pm.test(\"Check method formula\", function () {\r",
											"    pm.expect(jsonData.result.method.formula).to.eql(\"null\");\r",
											"});\r",
											"pm.test(\"Check method methodDbId\", function () {\r",
											"    pm.expect(jsonData.result.method.methodDbId).to.eql(\"4110\");\r",
											"});\r",
											"pm.test(\"Check method methodName\", function () {\r",
											"    pm.expect(jsonData.result.method.methodName).to.eql(\"Observed\");\r",
											"});\r",
											"pm.test(\"Check method ontologyReferenceObject documentationLinks\", function () {\r",
											"    pm.expect(jsonData.result.method.ontologyReferenceObject.documentationLinks).to.eql([]);\r",
											"});\r",
											"pm.test(\"Check method ontologyReferenceObject ontologyDbId\", function () {\r",
											"    pm.expect(jsonData.result.method.ontologyReferenceObject.ontologyDbId).to.eql(\"4110\");\r",
											"});\r",
											"pm.test(\"Check method ontologyReferenceObject ontologyName\", function () {\r",
											"    pm.expect(jsonData.result.method.ontologyReferenceObject.ontologyName).to.eql(\"Observed\");\r",
											"});\r",
											"pm.test(\"Check method ontologyReferenceObject version\", function () {\r",
											"    pm.expect(jsonData.result.method.ontologyReferenceObject.version).to.eql(null);\r",
											"});\r",
											"\r",
											"pm.test(\"Check method ontologyReference documentationLinks\", function () {\r",
											"    pm.expect(jsonData.result.method.ontologyReference.documentationLinks).to.eql([]);\r",
											"});\r",
											"pm.test(\"Check method ontologyReference ontologyDbId\", function () {\r",
											"    pm.expect(jsonData.result.method.ontologyReference.ontologyDbId).to.eql(\"4110\");\r",
											"});\r",
											"pm.test(\"Check method ontologyReference ontologyName\", function () {\r",
											"    pm.expect(jsonData.result.method.ontologyReference.ontologyName).to.eql(\"Observed\");\r",
											"});\r",
											"pm.test(\"Check method ontologyReference version\", function () {\r",
											"    pm.expect(jsonData.result.method.ontologyReference.version).to.eql(null);\r",
											"});\r",
											"\r",
											"//Check scale\r",
											"pm.test(\"Check scale additionalInfo\", function () {\r",
											"    pm.expect(jsonData.result.scale.additionalInfo).to.eql({});\r",
											"});\r",
											"pm.test(\"Check scale dataType\", function () {\r",
											"    pm.expect(jsonData.result.scale.dataType).to.eql(\"Text\");\r",
											"});\r",
											"pm.test(\"Check scale decimalPlaces\", function () {\r",
											"    pm.expect(jsonData.result.scale.decimalPlaces).to.eql(null);\r",
											"});\r",
											"pm.test(\"Check scale externalReferences referenceID\", function () {\r",
											"    pm.expect(jsonData.result.scale.externalReferences[0].referenceID).to.eql(\"noteScaleReferenceID\");\r",
											"});\r",
											"pm.test(\"Check scale externalReferences referenceSource\", function () {\r",
											"    pm.expect(jsonData.result.scale.externalReferences[0].referenceSource).to.eql(\"noteScaleReferenceSource\");\r",
											"});\r",
											"pm.test(\"Check scale ontologyReference documentationLinks\", function () {\r",
											"    pm.expect(jsonData.result.scale.ontologyReference.documentationLinks).to.eql([]);\r",
											"});\r",
											"pm.test(\"Check scale ontologyReference ontologyDbId\", function () {\r",
											"    pm.expect(jsonData.result.scale.ontologyReference.ontologyDbId).to.eql(\"6020\");\r",
											"});\r",
											"pm.test(\"Check scale ontologyReference ontologyName\", function () {\r",
											"    pm.expect(jsonData.result.scale.ontologyReference.ontologyName).to.eql(\"Text\");\r",
											"});\r",
											"pm.test(\"Check scale ontologyReference version\", function () {\r",
											"    pm.expect(jsonData.result.scale.ontologyReference.version).to.eql(null);\r",
											"});\r",
											"pm.test(\"Check scale scaleDbId\", function () {\r",
											"    pm.expect(jsonData.result.scale.scaleDbId).to.eql(\"6020\");\r",
											"});\r",
											"pm.test(\"Check scale scaleName\", function () {\r",
											"    pm.expect(jsonData.result.scale.scaleName).to.eql(\"Text\");\r",
											"});\r",
											"pm.test(\"Check scale validValues categories\", function () {\r",
											"    pm.expect(jsonData.result.scale.validValues.categories).to.eql(null);\r",
											"});\r",
											"pm.test(\"Check scale validValues max\", function () {\r",
											"    pm.expect(jsonData.result.scale.validValues.max).to.eql(null);\r",
											"});\r",
											"pm.test(\"Check scale validValues min\", function () {\r",
											"    pm.expect(jsonData.result.scale.validValues.min).to.eql(null);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Check scientist\", function () {\r",
											"    pm.expect(jsonData.result.scientist).to.eql(null);\r",
											"});\r",
											"pm.test(\"Check status\", function () {\r",
											"    pm.expect(jsonData.result.status).to.eql(null);\r",
											"});\r",
											"pm.test(\"Check submissionTimestamp\", function () {\r",
											"    pm.expect(jsonData.result.submissionTimestamp).to.eql(null);\r",
											"});\r",
											"pm.test(\"Check synonyms\", function () {\r",
											"    pm.expect(jsonData.result.synonyms).to.eql([]);\r",
											"});\r",
											"pm.test(\"Check studyDbIds\", function () {\r",
											"    pm.expect(jsonData.result.studyDbIds).to.not.be.null;\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"additionalInfo\": {},\r\n    \"commonCropName\": \"testdata\",\r\n    \"contextOfUse\": [\r\n        \"PLOT\"\r\n    ],\r\n    \"defaultValue\": \"\",\r\n    \"documentationURL\": null,\r\n    \"externalReferences\": [\r\n        {\r\n            \"referenceID\": \"noteReferenceID\",\r\n            \"referenceSource\": \"noteReferenceSource\"\r\n        }\r\n    ],\r\n    \"growthStage\": null,\r\n    \"institution\": null,\r\n    \"language\": null,\r\n    \"observationVariableDbId\": \"8390\",\r\n    \"observationVariableName\": \"NOTES\",\r\n    \"ontologyDbId\": \"8390\",\r\n    \"ontologyName\": \"NOTES\",\r\n    \"ontologyReference\": null,\r\n    \"trait\": {\r\n        \"additionalInfo\": {},\r\n        \"alternativeAbbreviations\": [],\r\n        \"attribute\": null,\r\n        \"entity\": null,\r\n        \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"noteTraitReferenceID\",\r\n                \"referenceSource\": \"noteTraitReferenceSource\"\r\n            }\r\n        ],\r\n        \"mainAbbreviation\": null,\r\n        \"traitClass\": \"General\",\r\n        \"traitDescription\": \"Comment\",\r\n        \"name\": \"Comment\",\r\n        \"status\": \"Active\",\r\n        \"synonyms\": [],\r\n        \"traitDbId\": \"2065\",\r\n        \"traitName\": \"Comment\",\r\n        \"ontologyReference\": {\r\n            \"documentationLinks\": [],\r\n            \"ontologyDbId\": \"null\",\r\n            \"ontologyName\": \"Comment\",\r\n            \"version\": null\r\n        }\r\n    },\r\n    \"method\": {\r\n        \"additionalInfo\": {},\r\n        \"bibliographicalReference\": null,\r\n        \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"noteMethodReferenceID\",\r\n                \"referenceSource\": \"noteMethodReferenceSource\"\r\n            }\r\n        ],\r\n        \"methodClass\": null,\r\n        \"description\": \"Value recorded after observation\",\r\n        \"formula\": \"null\",\r\n        \"methodDbId\": \"4110\",\r\n        \"methodName\": \"Observed\",\r\n        \"ontologyReferenceObject\": {\r\n            \"documentationLinks\": [],\r\n            \"ontologyDbId\": \"4110\",\r\n            \"ontologyName\": \"Observed\",\r\n            \"version\": null\r\n        },\r\n        \"ontologyReference\": {\r\n            \"documentationLinks\": [],\r\n            \"ontologyDbId\": \"4110\",\r\n            \"ontologyName\": \"Observed\",\r\n            \"version\": null\r\n        }\r\n    },\r\n    \"scale\": {\r\n        \"additionalInfo\": {},\r\n        \"dataType\": \"Text\",\r\n        \"decimalPlaces\": null,\r\n        \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"noteScaleReferenceID\",\r\n                \"referenceSource\": \"noteScaleReferenceSource\"\r\n            }\r\n        ],\r\n        \"ontologyReference\": {\r\n            \"documentationLinks\": [],\r\n            \"ontologyDbId\": \"6020\",\r\n            \"ontologyName\": \"Text\",\r\n            \"version\": null\r\n        },\r\n        \"scaleDbId\": \"6020\",\r\n        \"scaleName\": \"Text\",\r\n        \"validValues\": {\r\n            \"categories\": null,\r\n            \"max\": null,\r\n            \"min\": null\r\n        }\r\n    },\r\n    \"scientist\": null,\r\n    \"status\": null,\r\n    \"submissionTimestamp\": null,\r\n    \"synonyms\": [],\r\n    \"studyDbIds\": [\r\n        \"{{createdStudyDbId1}}\"\r\n    ]\r\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/variables/8390",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"variables",
										"8390"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						},
						{
							"name": "Verify response code and details when entered complete set of inputs for a numerical variable",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"var jsonData = pm.response.json();\r",
											"pm.test(\"Check status messageType\", function () {\r",
											"    pm.expect(jsonData.metadata.status[0].messageType).to.eql(\"INFO\");\r",
											"});\r",
											"pm.test(\"Check status message\", function () {\r",
											"    pm.expect(jsonData.metadata.status[0].message).to.eql(\"Biomas_yield variable is updated successfully.\");\r",
											"});\r",
											"pm.test(\"Check additionalInfo\", function () {\r",
											"    pm.expect(jsonData.result.additionalInfo).to.eql({});\r",
											"});\r",
											"pm.test(\"Check commonCropName\", function () {\r",
											"    pm.expect(jsonData.result.commonCropName).to.eql(pm.environment.get(\"crop\"));\r",
											"});\r",
											"pm.test(\"Check defaultValue\", function () {\r",
											"    pm.expect(jsonData.result.defaultValue).to.eql(\"\");\r",
											"});\r",
											"pm.test(\"Check documentationURL\", function () {\r",
											"    pm.expect(jsonData.result.documentationURL).to.eql(null);\r",
											"});\r",
											"pm.test(\"Check externalReferences referenceID\", function () {\r",
											"    pm.expect(jsonData.result.externalReferences[0].referenceID).to.eql(\"biomasReferenceID\");\r",
											"});\r",
											"pm.test(\"Check externalReferences referenceSource\", function () {\r",
											"    pm.expect(jsonData.result.externalReferences[0].referenceSource).to.eql(\"biomasReferenceSource\");\r",
											"});\r",
											"pm.test(\"Check growthStage\", function () {\r",
											"    pm.expect(jsonData.result.growthStage).to.eql(null);\r",
											"});\r",
											"pm.test(\"Check institution\", function () {\r",
											"    pm.expect(jsonData.result.institution).to.eql(null);\r",
											"});\r",
											"pm.test(\"Check language\", function () {\r",
											"    pm.expect(jsonData.result.language).to.eql(null);\r",
											"});\r",
											"pm.test(\"Check observationVariableDbId\", function () {\r",
											"    pm.expect(jsonData.result.observationVariableDbId).to.eql(\"18010\");\r",
											"});\r",
											"pm.test(\"Check observationVariableName\", function () {\r",
											"    pm.expect(jsonData.result.observationVariableName).to.eql(\"Biomas_yield\");\r",
											"});\r",
											"pm.test(\"Check ontologyReference\", function () {\r",
											"    pm.expect(jsonData.result.ontologyReference).to.eql(null);\r",
											"});\r",
											"//Check trait\r",
											"pm.test(\"Check trait additionalInfo\", function () {\r",
											"    pm.expect(jsonData.result.trait.additionalInfo).to.eql({});\r",
											"});\r",
											"pm.test(\"Check trait alternativeAbbreviations\", function () {\r",
											"    pm.expect(jsonData.result.trait.alternativeAbbreviations).to.eql([]);\r",
											"});\r",
											"pm.test(\"Check trait attribute\", function () {\r",
											"    pm.expect(jsonData.result.trait.attribute).to.eql(null);\r",
											"});\r",
											"pm.test(\"Check trait entity\", function () {\r",
											"    pm.expect(jsonData.result.trait.entity).to.eql(null);\r",
											"});\r",
											"pm.test(\"Check trait externalReferences referenceID \", function () {\r",
											"    pm.expect(jsonData.result.trait.externalReferences[0].referenceID).to.eql(\"biomasTraitReferenceID\");\r",
											"});\r",
											"pm.test(\"Check trait externalReferences referenceSource \", function () {\r",
											"    pm.expect(jsonData.result.trait.externalReferences[0].referenceSource).to.eql(\"biomasTraitReferenceSource\");\r",
											"});\r",
											"pm.test(\"Check trait mainAbbreviation\", function () {\r",
											"    pm.expect(jsonData.result.trait.mainAbbreviation).to.eql(null);\r",
											"});\r",
											"pm.test(\"Check trait traitClass\", function () {\r",
											"    pm.expect(jsonData.result.trait.traitClass).to.eql(\"Agronomic\");\r",
											"});\r",
											"pm.test(\"Check trait traitDescription\", function () {\r",
											"    pm.expect(jsonData.result.trait.traitDescription).to.eql(\"Biomass\");\r",
											"});\r",
											"pm.test(\"Check trait status\", function () {\r",
											"    pm.expect(jsonData.result.trait.status).to.eql(\"Active\");\r",
											"});\r",
											"pm.test(\"Check trait synonyms\", function () {\r",
											"    pm.expect(jsonData.result.trait.synonyms).to.eql([]);\r",
											"});\r",
											"pm.test(\"Check trait traitName\", function () {\r",
											"    pm.expect(jsonData.result.trait.traitName).to.eql(\"Biomass\");\r",
											"});\r",
											"pm.test(\"Check trait ontologyReference documentationLinks\", function () {\r",
											"    pm.expect(jsonData.result.trait.ontologyReference.documentationLinks).to.eql([]);\r",
											"});\r",
											"pm.test(\"Check trait ontologyReference ontologyDbId\", function () {\r",
											"    pm.expect(jsonData.result.trait.ontologyReference.ontologyDbId).to.eql(\"null\");\r",
											"});\r",
											"pm.test(\"Check trait ontologyReference version\", function () {\r",
											"    pm.expect(jsonData.result.trait.ontologyReference.version).to.eql(null);\r",
											"});\r",
											"\r",
											"//Check method\r",
											"pm.test(\"Check method additionalInfo\", function () {\r",
											"    pm.expect(jsonData.result.method.additionalInfo).to.eql({});\r",
											"});\r",
											"pm.test(\"Check method bibliographicalReference\", function () {\r",
											"    pm.expect(jsonData.result.method.bibliographicalReference).to.eql(null);\r",
											"});\r",
											"pm.test(\"Check method externalReferences referenceID\", function () {\r",
											"    pm.expect(jsonData.result.method.externalReferences[0].referenceID).to.eql('biomasMethodReferenceID');\r",
											"});\r",
											"pm.test(\"Check method externalReferences referenceSource\", function () {\r",
											"    pm.expect(jsonData.result.method.externalReferences[0].referenceSource).to.eql('biomasMethodReferenceSource');\r",
											"});\r",
											"pm.test(\"Check method methodClass\", function () {\r",
											"    pm.expect(jsonData.result.method.methodClass).to.eql(null);\r",
											"});\r",
											"pm.test(\"Check method description\", function () {\r",
											"    pm.expect(jsonData.result.method.description).to.eql(\"Dry and weigh\");\r",
											"});\r",
											"pm.test(\"Check method formula\", function () {\r",
											"    pm.expect(jsonData.result.method.formula).to.eql(\"{{100020}}+5\");\r",
											"});\r",
											"pm.test(\"Check method methodDbId\", function () {\r",
											"    pm.expect(jsonData.result.method.methodDbId).to.eql(\"16000\");\r",
											"});\r",
											"pm.test(\"Check method methodName\", function () {\r",
											"    pm.expect(jsonData.result.method.methodName).to.eql(\"Dry and weigh\");\r",
											"});\r",
											"pm.test(\"Check method ontologyReferenceObject documentationLinks\", function () {\r",
											"    pm.expect(jsonData.result.method.ontologyReferenceObject.documentationLinks).to.eql([]);\r",
											"});\r",
											"pm.test(\"Check method ontologyReferenceObject ontologyDbId\", function () {\r",
											"    pm.expect(jsonData.result.method.ontologyReferenceObject.ontologyDbId).to.eql(\"16000\");\r",
											"});\r",
											"pm.test(\"Check method ontologyReferenceObject ontologyName\", function () {\r",
											"    pm.expect(jsonData.result.method.ontologyReferenceObject.ontologyName).to.eql(\"Dry and weigh\");\r",
											"});\r",
											"pm.test(\"Check method ontologyReferenceObject version\", function () {\r",
											"    pm.expect(jsonData.result.method.ontologyReferenceObject.version).to.eql(null);\r",
											"});\r",
											"\r",
											"pm.test(\"Check method ontologyReference documentationLinks\", function () {\r",
											"    pm.expect(jsonData.result.method.ontologyReference.documentationLinks).to.eql([]);\r",
											"});\r",
											"pm.test(\"Check method ontologyReference ontologyDbId\", function () {\r",
											"    pm.expect(jsonData.result.method.ontologyReference.ontologyDbId).to.eql(\"16000\");\r",
											"});\r",
											"pm.test(\"Check method ontologyReference ontologyName\", function () {\r",
											"    pm.expect(jsonData.result.method.ontologyReference.ontologyName).to.eql(\"Dry and weigh\");\r",
											"});\r",
											"pm.test(\"Check method ontologyReference version\", function () {\r",
											"    pm.expect(jsonData.result.method.ontologyReference.version).to.eql(null);\r",
											"});\r",
											"\r",
											"//Check scale\r",
											"pm.test(\"Check scale additionalInfo\", function () {\r",
											"    pm.expect(jsonData.result.scale.additionalInfo).to.eql({});\r",
											"});\r",
											"pm.test(\"Check scale dataType\", function () {\r",
											"    pm.expect(jsonData.result.scale.dataType).to.eql(\"Numerical\");\r",
											"});\r",
											"pm.test(\"Check scale decimalPlaces\", function () {\r",
											"    pm.expect(jsonData.result.scale.decimalPlaces).to.eql(4);\r",
											"});\r",
											"pm.test(\"Check scale externalReferences referenceID\", function () {\r",
											"    pm.expect(jsonData.result.scale.externalReferences[0].referenceID).to.eql(\"biomasScaleReferenceID\");\r",
											"});\r",
											"pm.test(\"Check scale externalReferences referenceSource\", function () {\r",
											"    pm.expect(jsonData.result.scale.externalReferences[0].referenceSource).to.eql(\"biomasScaleReferenceSource\");\r",
											"});\r",
											"pm.test(\"Check scale ontologyReference documentationLinks\", function () {\r",
											"    pm.expect(jsonData.result.scale.ontologyReference.documentationLinks).to.eql([]);\r",
											"});\r",
											"pm.test(\"Check scale ontologyReference ontologyDbId\", function () {\r",
											"    pm.expect(jsonData.result.scale.ontologyReference.ontologyDbId).to.eql(\"17010\");\r",
											"});\r",
											"pm.test(\"Check scale ontologyReference ontologyName\", function () {\r",
											"    pm.expect(jsonData.result.scale.ontologyReference.ontologyName).to.eql(\"t/ha\");\r",
											"});\r",
											"pm.test(\"Check scale ontologyReference version\", function () {\r",
											"    pm.expect(jsonData.result.scale.ontologyReference.version).to.eql(null);\r",
											"});\r",
											"pm.test(\"Check scale scaleDbId\", function () {\r",
											"    pm.expect(jsonData.result.scale.scaleDbId).to.eql(\"17010\");\r",
											"});\r",
											"pm.test(\"Check scale scaleName\", function () {\r",
											"    pm.expect(jsonData.result.scale.scaleName).to.eql(\"t/ha\");\r",
											"});\r",
											"pm.test(\"Check scale validValues categories\", function () {\r",
											"    pm.expect(jsonData.result.scale.validValues.categories).to.eql(null);\r",
											"});\r",
											"pm.test(\"Check scale validValues max\", function () {\r",
											"    pm.expect(jsonData.result.scale.validValues.max).to.eql(null);\r",
											"});\r",
											"pm.test(\"Check scale validValues min\", function () {\r",
											"    pm.expect(jsonData.result.scale.validValues.min).to.eql(null);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Check scientist\", function () {\r",
											"    pm.expect(jsonData.result.scientist).to.eql(null);\r",
											"});\r",
											"pm.test(\"Check status\", function () {\r",
											"    pm.expect(jsonData.result.status).to.eql(null);\r",
											"});\r",
											"pm.test(\"Check submissionTimestamp\", function () {\r",
											"    pm.expect(jsonData.result.submissionTimestamp).to.eql(null);\r",
											"});\r",
											"pm.test(\"Check synonyms\", function () {\r",
											"    pm.expect(jsonData.result.synonyms).to.eql([]);\r",
											"});\r",
											"pm.test(\"Check studyDbIds\", function () {\r",
											"    pm.expect(jsonData.result.studyDbIds).to.not.be.null;\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"additionalInfo\": {},\r\n    \"commonCropName\": \"testdata\",\r\n    \"contextOfUse\": [\r\n        \"PLOT\"\r\n    ],\r\n    \"defaultValue\": \"\",\r\n    \"documentationURL\": null,\r\n    \"externalReferences\": [\r\n        {\r\n            \"referenceID\": \"biomasReferenceID\",\r\n            \"referenceSource\": \"biomasReferenceSource\"\r\n        }\r\n    ],\r\n    \"growthStage\": null,\r\n    \"institution\": null,\r\n    \"language\": null,\r\n    \"observationVariableDbId\": \"18010\",\r\n    \"observationVariableName\": \"Biomas_yield\",\r\n    \"ontologyDbId\": \"18010\",\r\n    \"ontologyName\": \"Biomas_yield\",\r\n    \"ontologyReference\": null,\r\n    \"trait\": {\r\n        \"additionalInfo\": {},\r\n        \"alternativeAbbreviations\": [],\r\n        \"attribute\": null,\r\n        \"entity\": null,\r\n        \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"biomasTraitReferenceID\",\r\n                \"referenceSource\": \"biomasTraitReferenceSource\"\r\n            }\r\n        ],\r\n        \"mainAbbreviation\": null,\r\n        \"traitClass\": \"Agronomic\",\r\n        \"traitDescription\": \"Biomass\",\r\n        \"name\": \"Biomass\",\r\n        \"status\": \"Active\",\r\n        \"synonyms\": [],\r\n        \"traitDbId\": \"15010\",\r\n        \"traitName\": \"Biomass\",\r\n        \"ontologyReference\": {\r\n            \"documentationLinks\": [],\r\n            \"ontologyDbId\": \"null\",\r\n            \"ontologyName\": \"Biomass\",\r\n            \"version\": null\r\n        }\r\n    },\r\n    \"method\": {\r\n        \"additionalInfo\": {},\r\n        \"bibliographicalReference\": null,\r\n        \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"biomasMethodReferenceID\",\r\n                \"referenceSource\": \"biomasMethodReferenceSource\"\r\n            }\r\n        ],\r\n        \"methodClass\": null,\r\n        \"description\": \"Dry and weigh\",\r\n        \"formula\": \"{{100020}}+5\",\r\n        \"methodDbId\": \"16000\",\r\n        \"methodName\": \"Dry and weigh\",\r\n        \"ontologyReferenceObject\": {\r\n            \"documentationLinks\": [],\r\n            \"ontologyDbId\": \"16000\",\r\n            \"ontologyName\": \"Dry and weigh\",\r\n            \"version\": null\r\n        },\r\n        \"ontologyReference\": {\r\n            \"documentationLinks\": [],\r\n            \"ontologyDbId\": \"16000\",\r\n            \"ontologyName\": \"Dry and weigh\",\r\n            \"version\": null\r\n        }\r\n    },\r\n    \"scale\": {\r\n        \"additionalInfo\": {},\r\n        \"dataType\": \"Numerical\",\r\n        \"decimalPlaces\": 4,\r\n        \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"biomasScaleReferenceID\",\r\n                \"referenceSource\": \"biomasScaleReferenceSource\"\r\n            }\r\n        ],\r\n        \"ontologyReference\": {\r\n            \"documentationLinks\": [],\r\n            \"ontologyDbId\": \"17010\",\r\n            \"ontologyName\": \"t/ha\",\r\n            \"version\": null\r\n        },\r\n        \"scaleDbId\": \"17010\",\r\n        \"scaleName\": \"t/ha\",\r\n        \"validValues\": {\r\n            \"categories\": null,\r\n            \"max\": null,\r\n            \"min\": null\r\n        }\r\n    },\r\n    \"scientist\": null,\r\n    \"status\": null,\r\n    \"submissionTimestamp\": null,\r\n    \"synonyms\": [],\r\n    \"studyDbIds\": [\r\n        \"{{createdStudyDbId1}}\"\r\n    ]\r\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/variables/18010",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"variables",
										"18010"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						},
						{
							"name": "Verify response code and details when entered complete set of inputs for a categorical variable",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"var jsonData = pm.response.json();\r",
											"pm.test(\"Check status messageType\", function (){\r",
											"    pm.expect(jsonData.metadata.status[0].messageType).to.eql(\"INFO\");\r",
											"});\r",
											"pm.test(\"Check status message\", function () {\r",
											"    pm.expect(jsonData.metadata.status[0].message).to.eql(\"DisPressure_0_9 variable is updated successfully.\");\r",
											"});\r",
											"pm.test(\"Check additionalInfo\", function () {\r",
											"    pm.expect(jsonData.result.additionalInfo).to.eql({});\r",
											"});\r",
											"pm.test(\"Check commonCropName\", function () {\r",
											"    pm.expect(jsonData.result.commonCropName).to.eql(pm.environment.get(\"crop\"));\r",
											"});\r",
											"pm.test(\"Check defaultValue\", function () {\r",
											"    pm.expect(jsonData.result.defaultValue).to.eql(\"\");\r",
											"});\r",
											"pm.test(\"Check documentationURL\", function () {\r",
											"    pm.expect(jsonData.result.documentationURL).to.eql(null);\r",
											"});\r",
											"pm.test(\"Check externalReferences referenceID\", function () {\r",
											"    pm.expect(jsonData.result.externalReferences[0].referenceID).to.eql(\"DisPressureReferenceID\");\r",
											"});\r",
											"pm.test(\"Check externalReferences referenceSource\", function () {\r",
											"    pm.expect(jsonData.result.externalReferences[0].referenceSource).to.eql(\"DisPressureReferenceSource\");\r",
											"});\r",
											"pm.test(\"Check growthStage\", function () {\r",
											"    pm.expect(jsonData.result.growthStage).to.eql(null);\r",
											"});\r",
											"pm.test(\"Check institution\", function () {\r",
											"    pm.expect(jsonData.result.institution).to.eql(null);\r",
											"});\r",
											"pm.test(\"Check language\", function () {\r",
											"    pm.expect(jsonData.result.language).to.eql(null);\r",
											"});\r",
											"pm.test(\"Check observationVariableDbId\", function () {\r",
											"    pm.expect(jsonData.result.observationVariableDbId).to.eql(\"18050\");\r",
											"});\r",
											"pm.test(\"Check observationVariableName\", function () {\r",
											"    pm.expect(jsonData.result.observationVariableName).to.eql(\"DisPressure_0_9\");\r",
											"});\r",
											"pm.test(\"Check ontologyReference\", function () {\r",
											"    pm.expect(jsonData.result.ontologyReference).to.eql(null);\r",
											"});\r",
											"//Check trait\r",
											"pm.test(\"Check trait additionalInfo\", function () {\r",
											"    pm.expect(jsonData.result.trait.additionalInfo).to.eql({});\r",
											"});\r",
											"pm.test(\"Check trait alternativeAbbreviations\", function () {\r",
											"    pm.expect(jsonData.result.trait.alternativeAbbreviations).to.eql([]);\r",
											"});\r",
											"pm.test(\"Check trait attribute\", function () {\r",
											"    pm.expect(jsonData.result.trait.attribute).to.eql(null);\r",
											"});\r",
											"pm.test(\"Check trait entity\", function () {\r",
											"    pm.expect(jsonData.result.trait.entity).to.eql(null);\r",
											"});\r",
											"pm.test(\"Check trait externalReferences referenceID \", function () {\r",
											"    pm.expect(jsonData.result.trait.externalReferences[0].referenceID).to.eql(\"DisPressureTraitReferenceID\");\r",
											"});\r",
											"pm.test(\"Check trait externalReferences referenceSource \", function () {\r",
											"    pm.expect(jsonData.result.trait.externalReferences[0].referenceSource).to.eql(\"DisPressureTraitReferenceSource\");\r",
											"});\r",
											"pm.test(\"Check trait mainAbbreviation\", function () {\r",
											"    pm.expect(jsonData.result.trait.mainAbbreviation).to.eql(null);\r",
											"});\r",
											"pm.test(\"Check trait traitClass\", function () {\r",
											"    pm.expect(jsonData.result.trait.traitClass).to.eql(\"Biotic stress\");\r",
											"});\r",
											"pm.test(\"Check trait traitDescription\", function () {\r",
											"    pm.expect(jsonData.result.trait.traitDescription).to.eql(\"Disease pressure\");\r",
											"});\r",
											"pm.test(\"Check trait status\", function () {\r",
											"    pm.expect(jsonData.result.trait.status).to.eql(\"Active\");\r",
											"});\r",
											"pm.test(\"Check trait synonyms\", function () {\r",
											"    pm.expect(jsonData.result.trait.synonyms).to.eql([]);\r",
											"});\r",
											"pm.test(\"Check trait traitName\", function () {\r",
											"    pm.expect(jsonData.result.trait.traitName).to.eql(\"Disease pressure\");\r",
											"});\r",
											"pm.test(\"Check trait ontologyReference documentationLinks\", function () {\r",
											"    pm.expect(jsonData.result.trait.ontologyReference.documentationLinks).to.eql([]);\r",
											"});\r",
											"pm.test(\"Check trait ontologyReference ontologyDbId\", function () {\r",
											"    pm.expect(jsonData.result.trait.ontologyReference.ontologyDbId).to.eql(\"null\");\r",
											"});\r",
											"pm.test(\"Check trait ontologyReference version\", function () {\r",
											"    pm.expect(jsonData.result.trait.ontologyReference.version).to.eql(null);\r",
											"});\r",
											"\r",
											"//Check method\r",
											"pm.test(\"Check method additionalInfo\", function () {\r",
											"    pm.expect(jsonData.result.method.additionalInfo).to.eql({});\r",
											"});\r",
											"pm.test(\"Check method bibliographicalReference\", function () {\r",
											"    pm.expect(jsonData.result.method.bibliographicalReference).to.eql(null);\r",
											"});\r",
											"pm.test(\"Check method externalReferences referenceID\", function () {\r",
											"    pm.expect(jsonData.result.method.externalReferences[0].referenceID).to.eql('DisPressureMethodReferenceID');\r",
											"});\r",
											"pm.test(\"Check method externalReferences referenceSource\", function () {\r",
											"    pm.expect(jsonData.result.method.externalReferences[0].referenceSource).to.eql('DisPressureMethodReferenceSource');\r",
											"});\r",
											"pm.test(\"Check method methodClass\", function () {\r",
											"    pm.expect(jsonData.result.method.methodClass).to.eql(null);\r",
											"});\r",
											"pm.test(\"Check method description\", function () {\r",
											"    pm.expect(jsonData.result.method.description).to.eql(\"Visual assessment\");\r",
											"});\r",
											"pm.test(\"Check method formula\", function () {\r",
											"    pm.expect(jsonData.result.method.formula).to.eql('null');\r",
											"});\r",
											"pm.test(\"Check method methodDbId\", function () {\r",
											"    pm.expect(jsonData.result.method.methodDbId).to.eql(\"16030\");\r",
											"});\r",
											"pm.test(\"Check method methodName\", function () {\r",
											"    pm.expect(jsonData.result.method.methodName).to.eql(\"Visual assessment\");\r",
											"});\r",
											"pm.test(\"Check method ontologyReferenceObject documentationLinks\", function () {\r",
											"    pm.expect(jsonData.result.method.ontologyReferenceObject.documentationLinks).to.eql([]);\r",
											"});\r",
											"pm.test(\"Check method ontologyReferenceObject ontologyDbId\", function () {\r",
											"    pm.expect(jsonData.result.method.ontologyReferenceObject.ontologyDbId).to.eql(\"16030\");\r",
											"});\r",
											"pm.test(\"Check method ontologyReferenceObject ontologyName\", function () {\r",
											"    pm.expect(jsonData.result.method.ontologyReferenceObject.ontologyName).to.eql(\"Visual assessment\");\r",
											"});\r",
											"pm.test(\"Check method ontologyReferenceObject version\", function () {\r",
											"    pm.expect(jsonData.result.method.ontologyReferenceObject.version).to.eql(null);\r",
											"});\r",
											"\r",
											"pm.test(\"Check method ontologyReference documentationLinks\", function () {\r",
											"    pm.expect(jsonData.result.method.ontologyReference.documentationLinks).to.eql([]);\r",
											"});\r",
											"pm.test(\"Check method ontologyReference ontologyDbId\", function () {\r",
											"    pm.expect(jsonData.result.method.ontologyReference.ontologyDbId).to.eql(\"16030\");\r",
											"});\r",
											"pm.test(\"Check method ontologyReference ontologyName\", function () {\r",
											"    pm.expect(jsonData.result.method.ontologyReference.ontologyName).to.eql(\"Visual assessment\");\r",
											"});\r",
											"pm.test(\"Check method ontologyReference version\", function () {\r",
											"    pm.expect(jsonData.result.method.ontologyReference.version).to.eql(null);\r",
											"});\r",
											"\r",
											"//Check scale\r",
											"pm.test(\"Check scale additionalInfo\", function () {\r",
											"    pm.expect(jsonData.result.scale.additionalInfo).to.eql({});\r",
											"});\r",
											"pm.test(\"Check scale dataType\", function () {\r",
											"    pm.expect(jsonData.result.scale.dataType).to.eql(\"Nominal\");\r",
											"});\r",
											"pm.test(\"Check scale decimalPlaces\", function () {\r",
											"    pm.expect(jsonData.result.scale.decimalPlaces).to.eql(null);\r",
											"});\r",
											"pm.test(\"Check scale externalReferences referenceID\", function () {\r",
											"    pm.expect(jsonData.result.scale.externalReferences[0].referenceID).to.eql(\"DisPressureScaleReferenceID\");\r",
											"});\r",
											"pm.test(\"Check scale externalReferences referenceSource\", function () {\r",
											"    pm.expect(jsonData.result.scale.externalReferences[0].referenceSource).to.eql(\"DisPressureScaleReferenceSource\");\r",
											"});\r",
											"pm.test(\"Check scale ontologyReference documentationLinks\", function () {\r",
											"    pm.expect(jsonData.result.scale.ontologyReference.documentationLinks).to.eql([]);\r",
											"});\r",
											"pm.test(\"Check scale ontologyReference ontologyDbId\", function () {\r",
											"    pm.expect(jsonData.result.scale.ontologyReference.ontologyDbId).to.eql(\"17040\");\r",
											"});\r",
											"pm.test(\"Check scale ontologyReference ontologyName\", function () {\r",
											"    pm.expect(jsonData.result.scale.ontologyReference.ontologyName).to.eql(\"Score\");\r",
											"});\r",
											"pm.test(\"Check scale ontologyReference version\", function () {\r",
											"    pm.expect(jsonData.result.scale.ontologyReference.version).to.eql(null);\r",
											"});\r",
											"pm.test(\"Check scale scaleDbId\", function () {\r",
											"    pm.expect(jsonData.result.scale.scaleDbId).to.eql(\"17040\");\r",
											"});\r",
											"pm.test(\"Check scale scaleName\", function () {\r",
											"    pm.expect(jsonData.result.scale.scaleName).to.eql(\"Score\");\r",
											"});\r",
											"pm.test(\"Check scale validValues categories\", function () {\r",
											"    pm.expect(jsonData.result.scale.validValues.categories).to.eql([ \"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\"]);\r",
											"});\r",
											"pm.test(\"Check scale validValues max\", function () {\r",
											"    pm.expect(jsonData.result.scale.validValues.max).to.eql(null);\r",
											"});\r",
											"pm.test(\"Check scale validValues min\", function () {\r",
											"    pm.expect(jsonData.result.scale.validValues.min).to.eql(null);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Check scientist\", function () {\r",
											"    pm.expect(jsonData.result.scientist).to.eql(null);\r",
											"});\r",
											"pm.test(\"Check status\", function () {\r",
											"    pm.expect(jsonData.result.status).to.eql(null);\r",
											"});\r",
											"pm.test(\"Check submissionTimestamp\", function () {\r",
											"    pm.expect(jsonData.result.submissionTimestamp).to.eql(null);\r",
											"});\r",
											"pm.test(\"Check synonyms\", function () {\r",
											"    pm.expect(jsonData.result.synonyms).to.eql(['Disease_pressure']);\r",
											"});\r",
											"pm.test(\"Check studyDbIds\", function () {\r",
											"    pm.expect(jsonData.result.studyDbIds).to.not.be.null;\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"additionalInfo\": {},\r\n    \"commonCropName\": \"testdata\",\r\n    \"contextOfUse\": [\r\n        \"PLOT\"\r\n    ],\r\n    \"defaultValue\": \"\",\r\n    \"documentationURL\": null,\r\n    \"externalReferences\": [\r\n        {\r\n            \"referenceID\": \"DisPressureReferenceID\",\r\n            \"referenceSource\": \"DisPressureReferenceSource\"\r\n        }\r\n    ],\r\n    \"growthStage\": null,\r\n    \"institution\": null,\r\n    \"language\": null,\r\n    \"observationVariableDbId\": \"18050\",\r\n    \"observationVariableName\": \"DisPressure_0_9\",\r\n    \"ontologyDbId\": \"18050\",\r\n    \"ontologyName\": \"DisPressure_0_9\",\r\n    \"ontologyReference\": null,\r\n    \"trait\": {\r\n        \"additionalInfo\": {},\r\n        \"alternativeAbbreviations\": [],\r\n        \"attribute\": null,\r\n        \"entity\": null,\r\n        \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"DisPressureTraitReferenceID\",\r\n                \"referenceSource\": \"DisPressureTraitReferenceSource\"\r\n            }\r\n        ],\r\n        \"mainAbbreviation\": null,\r\n        \"traitClass\": \"Biotic stress\",\r\n        \"traitDescription\": \"Disease pressure\",\r\n        \"name\": \"Disease pressure\",\r\n        \"status\": \"Active\",\r\n        \"synonyms\": [],\r\n        \"traitDbId\": \"15050\",\r\n        \"traitName\": \"Disease pressure\",\r\n        \"ontologyReference\": {\r\n            \"documentationLinks\": [],\r\n            \"ontologyDbId\": \"null\",\r\n            \"ontologyName\": \"Disease pressure\",\r\n            \"version\": null\r\n        }\r\n    },\r\n    \"method\": {\r\n        \"additionalInfo\": {},\r\n        \"bibliographicalReference\": null,\r\n        \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"DisPressureMethodReferenceID\",\r\n                \"referenceSource\": \"DisPressureMethodReferenceSource\"\r\n            }\r\n        ],\r\n        \"methodClass\": null,\r\n        \"description\": \"Visual assessment\",\r\n        \"formula\": \"null\",\r\n        \"methodDbId\": \"16030\",\r\n        \"methodName\": \"Visual assessment\",\r\n        \"ontologyReferenceObject\": {\r\n            \"documentationLinks\": [],\r\n            \"ontologyDbId\": \"16030\",\r\n            \"ontologyName\": \"Visual assessment\",\r\n            \"version\": null\r\n        },\r\n        \"ontologyReference\": {\r\n            \"documentationLinks\": [],\r\n            \"ontologyDbId\": \"16030\",\r\n            \"ontologyName\": \"Visual assessment\",\r\n            \"version\": null\r\n        }\r\n    },\r\n    \"scale\": {\r\n        \"additionalInfo\": {},\r\n        \"dataType\": \"Nominal\",\r\n        \"decimalPlaces\": null,\r\n        \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"DisPressureScaleReferenceID\",\r\n                \"referenceSource\": \"DisPressureScaleReferenceSource\"\r\n            }\r\n        ],\r\n        \"ontologyReference\": {\r\n            \"documentationLinks\": [],\r\n            \"ontologyDbId\": \"17040\",\r\n            \"ontologyName\": \"Score\",\r\n            \"version\": null\r\n        },\r\n        \"scaleDbId\": \"17040\",\r\n        \"scaleName\": \"Score\",\r\n        \"validValues\": {\r\n            \"categories\": [\r\n                {\r\n                    \"label\": \"No disease\",\r\n                    \"value\": \"0\"\r\n                },\r\n                {\r\n                    \"label\": \"10 percent of plants affected\",\r\n                    \"value\": \"1\"\r\n                },\r\n                {\r\n                    \"label\": \"20 percent of plants affected\",\r\n                    \"value\": \"2\"\r\n                },\r\n                {\r\n                    \"label\": \"30 percent of plants affected\",\r\n                    \"value\": \"3\"\r\n                },\r\n                {\r\n                    \"label\": \"40 percent of plants affected\",\r\n                    \"value\": \"4\"\r\n                },\r\n                {\r\n                    \"label\": \"50 percent of plants affected\",\r\n                    \"value\": \"5\"\r\n                },\r\n                {\r\n                    \"label\": \"60 percent of plants affected\",\r\n                    \"value\": \"6\"\r\n                },\r\n                {\r\n                    \"label\": \"70 percent of plants affected\",\r\n                    \"value\": \"7\"\r\n                },\r\n                {\r\n                    \"label\": \"80 percent of plants affected\",\r\n                    \"value\": \"8\"\r\n                },\r\n                {\r\n                    \"label\": \"All plants affected\",\r\n                    \"value\": \"9\"\r\n                }\r\n            ],\r\n            \"max\": null,\r\n            \"min\": null\r\n        }\r\n    },\r\n    \"scientist\": null,\r\n    \"status\": null,\r\n    \"submissionTimestamp\": null,\r\n    \"synonyms\": [\r\n        \"Disease_pressure\"\r\n    ],\r\n    \"studyDbIds\": [\r\n        \"{{createdStudyDbId1}}\"\r\n    ]\r\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/variables/18050",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"variables",
										"18050"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						},
						{
							"name": "Verify response code and details when entered complete set of inputs for a date variable",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"var jsonData = pm.response.json();\r",
											"pm.test(\"Check status messageType\", function (){\r",
											"    pm.expect(jsonData.metadata.status[0].messageType).to.eql(\"INFO\");\r",
											"});\r",
											"pm.test(\"Check status message\", function () {\r",
											"    pm.expect(jsonData.metadata.status[0].message).to.eql(\"GermiTest_date variable is updated successfully.\");\r",
											"});\r",
											"pm.test(\"Check additionalInfo\", function () {\r",
											"    pm.expect(jsonData.result.additionalInfo).to.eql({});\r",
											"});\r",
											"pm.test(\"Check commonCropName\", function () {\r",
											"    pm.expect(jsonData.result.commonCropName).to.eql(pm.environment.get(\"crop\"));\r",
											"});\r",
											"pm.test(\"Check defaultValue\", function () {\r",
											"    pm.expect(jsonData.result.defaultValue).to.eql(\"\");\r",
											"});\r",
											"pm.test(\"Check documentationURL\", function () {\r",
											"    pm.expect(jsonData.result.documentationURL).to.eql(null);\r",
											"});\r",
											"pm.test(\"Check externalReferences referenceID\", function () {\r",
											"    pm.expect(jsonData.result.externalReferences[0].referenceID).to.eql(\"GermiTestReferenceID\");\r",
											"});\r",
											"pm.test(\"Check externalReferences referenceSource\", function () {\r",
											"    pm.expect(jsonData.result.externalReferences[0].referenceSource).to.eql(\"GermiTestReferenceSource\");\r",
											"});\r",
											"pm.test(\"Check growthStage\", function () {\r",
											"    pm.expect(jsonData.result.growthStage).to.eql(null);\r",
											"});\r",
											"pm.test(\"Check institution\", function () {\r",
											"    pm.expect(jsonData.result.institution).to.eql(null);\r",
											"});\r",
											"pm.test(\"Check language\", function () {\r",
											"    pm.expect(jsonData.result.language).to.eql(null);\r",
											"});\r",
											"pm.test(\"Check observationVariableDbId\", function () {\r",
											"    pm.expect(jsonData.result.observationVariableDbId).to.eql(\"8630\");\r",
											"});\r",
											"pm.test(\"Check observationVariableName\", function () {\r",
											"    pm.expect(jsonData.result.observationVariableName).to.eql(\"GermiTest_date\");\r",
											"});\r",
											"pm.test(\"Check ontologyReference\", function () {\r",
											"    pm.expect(jsonData.result.ontologyReference).to.eql(null);\r",
											"});\r",
											"//Check trait\r",
											"pm.test(\"Check trait additionalInfo\", function () {\r",
											"    pm.expect(jsonData.result.trait.additionalInfo).to.eql({});\r",
											"});\r",
											"pm.test(\"Check trait alternativeAbbreviations\", function () {\r",
											"    pm.expect(jsonData.result.trait.alternativeAbbreviations).to.eql([]);\r",
											"});\r",
											"pm.test(\"Check trait attribute\", function () {\r",
											"    pm.expect(jsonData.result.trait.attribute).to.eql(null);\r",
											"});\r",
											"pm.test(\"Check trait entity\", function () {\r",
											"    pm.expect(jsonData.result.trait.entity).to.eql(null);\r",
											"});\r",
											"pm.test(\"Check trait externalReferences referenceID \", function () {\r",
											"    pm.expect(jsonData.result.trait.externalReferences[0].referenceID).to.eql(\"GermiTestTraitReferenceID\");\r",
											"});\r",
											"pm.test(\"Check trait externalReferences referenceSource \", function () {\r",
											"    pm.expect(jsonData.result.trait.externalReferences[0].referenceSource).to.eql(\"GermiTestTraitReferenceSource\");\r",
											"});\r",
											"pm.test(\"Check trait mainAbbreviation\", function () {\r",
											"    pm.expect(jsonData.result.trait.mainAbbreviation).to.eql(null);\r",
											"});\r",
											"pm.test(\"Check trait traitClass\", function () {\r",
											"    pm.expect(jsonData.result.trait.traitClass).to.eql(\"Seed increase methods,Agronomic\");\r",
											"});\r",
											"pm.test(\"Check trait traitDescription\", function () {\r",
											"    pm.expect(jsonData.result.trait.traitDescription).to.eql(\"The physiological and developmental changes that occur in a seed commencing with water uptake (imbibition) and terminating with the elongation ofthe embryonic axis.\");\r",
											"});\r",
											"pm.test(\"Check trait status\", function () {\r",
											"    pm.expect(jsonData.result.trait.status).to.eql(\"Active\");\r",
											"});\r",
											"pm.test(\"Check trait synonyms\", function () {\r",
											"    pm.expect(jsonData.result.trait.synonyms).to.eql([]);\r",
											"});\r",
											"pm.test(\"Check trait traitName\", function () {\r",
											"    pm.expect(jsonData.result.trait.traitName).to.eql(\"Seed germination\");\r",
											"});\r",
											"pm.test(\"Check trait ontologyReference documentationLinks\", function () {\r",
											"    pm.expect(jsonData.result.trait.ontologyReference.documentationLinks).to.eql([]);\r",
											"});\r",
											"pm.test(\"Check trait ontologyReference ontologyDbId\", function () {\r",
											"    pm.expect(jsonData.result.trait.ontologyReference.ontologyDbId).to.eql(\"null\");\r",
											"});\r",
											"pm.test(\"Check trait ontologyReference version\", function () {\r",
											"    pm.expect(jsonData.result.trait.ontologyReference.version).to.eql(null);\r",
											"});\r",
											"\r",
											"//Check method\r",
											"pm.test(\"Check method additionalInfo\", function () {\r",
											"    pm.expect(jsonData.result.method.additionalInfo).to.eql({});\r",
											"});\r",
											"pm.test(\"Check method bibliographicalReference\", function () {\r",
											"    pm.expect(jsonData.result.method.bibliographicalReference).to.eql(null);\r",
											"});\r",
											"pm.test(\"Check method externalReferences referenceID\", function () {\r",
											"    pm.expect(jsonData.result.method.externalReferences[0].referenceID).to.eql('GermiTestMethodReferenceID');\r",
											"});\r",
											"pm.test(\"Check method externalReferences referenceSource\", function () {\r",
											"    pm.expect(jsonData.result.method.externalReferences[0].referenceSource).to.eql('GermiTestMethodReferenceSource');\r",
											"});\r",
											"pm.test(\"Check method methodClass\", function () {\r",
											"    pm.expect(jsonData.result.method.methodClass).to.eql(null);\r",
											"});\r",
											"pm.test(\"Check method description\", function () {\r",
											"    pm.expect(jsonData.result.method.description).to.eql(\"Term, name or id assigned\");\r",
											"});\r",
											"pm.test(\"Check method formula\", function () {\r",
											"    pm.expect(jsonData.result.method.formula).to.eql('null');\r",
											"});\r",
											"pm.test(\"Check method methodDbId\", function () {\r",
											"    pm.expect(jsonData.result.method.methodDbId).to.eql(\"4030\");\r",
											"});\r",
											"pm.test(\"Check method methodName\", function () {\r",
											"    pm.expect(jsonData.result.method.methodName).to.eql(\"Assigned\");\r",
											"});\r",
											"pm.test(\"Check method ontologyReferenceObject documentationLinks\", function () {\r",
											"    pm.expect(jsonData.result.method.ontologyReferenceObject.documentationLinks).to.eql([]);\r",
											"});\r",
											"pm.test(\"Check method ontologyReferenceObject ontologyDbId\", function () {\r",
											"    pm.expect(jsonData.result.method.ontologyReferenceObject.ontologyDbId).to.eql(\"4030\");\r",
											"});\r",
											"pm.test(\"Check method ontologyReferenceObject ontologyName\", function () {\r",
											"    pm.expect(jsonData.result.method.ontologyReferenceObject.ontologyName).to.eql(\"Assigned\");\r",
											"});\r",
											"pm.test(\"Check method ontologyReferenceObject version\", function () {\r",
											"    pm.expect(jsonData.result.method.ontologyReferenceObject.version).to.eql(null);\r",
											"});\r",
											"\r",
											"pm.test(\"Check method ontologyReference documentationLinks\", function () {\r",
											"    pm.expect(jsonData.result.method.ontologyReference.documentationLinks).to.eql([]);\r",
											"});\r",
											"pm.test(\"Check method ontologyReference ontologyDbId\", function () {\r",
											"    pm.expect(jsonData.result.method.ontologyReference.ontologyDbId).to.eql(\"4030\");\r",
											"});\r",
											"pm.test(\"Check method ontologyReference ontologyName\", function () {\r",
											"    pm.expect(jsonData.result.method.ontologyReference.ontologyName).to.eql(\"Assigned\");\r",
											"});\r",
											"pm.test(\"Check method ontologyReference version\", function () {\r",
											"    pm.expect(jsonData.result.method.ontologyReference.version).to.eql(null);\r",
											"});\r",
											"\r",
											"//Check scale\r",
											"pm.test(\"Check scale additionalInfo\", function () {\r",
											"    pm.expect(jsonData.result.scale.additionalInfo).to.eql({});\r",
											"});\r",
											"pm.test(\"Check scale dataType\", function () {\r",
											"    pm.expect(jsonData.result.scale.dataType).to.eql(\"Date\");\r",
											"});\r",
											"pm.test(\"Check scale decimalPlaces\", function () {\r",
											"    pm.expect(jsonData.result.scale.decimalPlaces).to.eql(null);\r",
											"});\r",
											"pm.test(\"Check scale externalReferences referenceID\", function () {\r",
											"    pm.expect(jsonData.result.scale.externalReferences[0].referenceID).to.eql(\"GermiTestScaleReferenceID\");\r",
											"});\r",
											"pm.test(\"Check scale externalReferences referenceSource\", function () {\r",
											"    pm.expect(jsonData.result.scale.externalReferences[0].referenceSource).to.eql(\"GermiTestScaleReferenceSource\");\r",
											"});\r",
											"pm.test(\"Check scale ontologyReference documentationLinks\", function () {\r",
											"    pm.expect(jsonData.result.scale.ontologyReference.documentationLinks).to.eql([]);\r",
											"});\r",
											"pm.test(\"Check scale ontologyReference ontologyDbId\", function () {\r",
											"    pm.expect(jsonData.result.scale.ontologyReference.ontologyDbId).to.eql(\"6060\");\r",
											"});\r",
											"pm.test(\"Check scale ontologyReference ontologyName\", function () {\r",
											"    pm.expect(jsonData.result.scale.ontologyReference.ontologyName).to.eql(\"Date (yyyymmdd)\");\r",
											"});\r",
											"pm.test(\"Check scale ontologyReference version\", function () {\r",
											"    pm.expect(jsonData.result.scale.ontologyReference.version).to.eql(null);\r",
											"});\r",
											"pm.test(\"Check scale scaleDbId\", function () {\r",
											"    pm.expect(jsonData.result.scale.scaleDbId).to.eql(\"6060\");\r",
											"});\r",
											"pm.test(\"Check scale scaleName\", function () {\r",
											"    pm.expect(jsonData.result.scale.scaleName).to.eql(\"Date (yyyymmdd)\");\r",
											"});\r",
											"pm.test(\"Check scale validValues categories\", function () {\r",
											"    pm.expect(jsonData.result.scale.validValues.categories).to.eql(null);\r",
											"});\r",
											"pm.test(\"Check scale validValues max\", function () {\r",
											"    pm.expect(jsonData.result.scale.validValues.max).to.eql(null);\r",
											"});\r",
											"pm.test(\"Check scale validValues min\", function () {\r",
											"    pm.expect(jsonData.result.scale.validValues.min).to.eql(null);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Check scientist\", function () {\r",
											"    pm.expect(jsonData.result.scientist).to.eql(null);\r",
											"});\r",
											"pm.test(\"Check status\", function () {\r",
											"    pm.expect(jsonData.result.status).to.eql(null);\r",
											"});\r",
											"pm.test(\"Check submissionTimestamp\", function () {\r",
											"    pm.expect(jsonData.result.submissionTimestamp).to.eql(null);\r",
											"});\r",
											"pm.test(\"Check synonyms\", function () {\r",
											"    pm.expect(jsonData.result.synonyms).to.eql([]);\r",
											"});\r",
											"pm.test(\"Check studyDbIds\", function () {\r",
											"    pm.expect(jsonData.result.studyDbIds).to.not.be.null;\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"additionalInfo\": {},\r\n    \"commonCropName\": \"testdata\",\r\n    \"contextOfUse\": [\r\n        \"PLOT\"\r\n    ],\r\n    \"defaultValue\": \"\",\r\n    \"documentationURL\": null,\r\n    \"externalReferences\": [\r\n        {\r\n            \"referenceID\": \"GermiTestReferenceID\",\r\n            \"referenceSource\": \"GermiTestReferenceSource\"\r\n        }\r\n    ],\r\n    \"growthStage\": null,\r\n    \"institution\": null,\r\n    \"language\": null,\r\n    \"observationVariableDbId\": \"8630\",\r\n    \"observationVariableName\": \"GermiTest_date\",\r\n    \"ontologyDbId\": \"8630\",\r\n    \"ontologyName\": \"GermiTest_date\",\r\n    \"ontologyReference\": null,\r\n    \"trait\": {\r\n        \"additionalInfo\": {},\r\n        \"alternativeAbbreviations\": [],\r\n        \"attribute\": null,\r\n        \"entity\": null,\r\n        \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"GermiTestTraitReferenceID\",\r\n                \"referenceSource\": \"GermiTestTraitReferenceSource\"\r\n            }\r\n        ],\r\n        \"mainAbbreviation\": null,\r\n        \"traitClass\": \"Seed increase methods,Agronomic\",\r\n        \"traitDescription\": \"The physiological and developmental changes that occur in a seed commencing with water uptake (imbibition) and terminating with the elongation ofthe embryonic axis.\",\r\n        \"name\": \"Seed germination\",\r\n        \"status\": \"Active\",\r\n        \"synonyms\": [],\r\n        \"traitDbId\": \"2640\",\r\n        \"traitName\": \"Seed germination\",\r\n        \"ontologyReference\": {\r\n            \"documentationLinks\": [],\r\n            \"ontologyDbId\": \"null\",\r\n            \"ontologyName\": \"Seed germination\",\r\n            \"version\": null\r\n        }\r\n    },\r\n    \"method\": {\r\n        \"additionalInfo\": {},\r\n        \"bibliographicalReference\": null,\r\n        \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"GermiTestMethodReferenceID\",\r\n                \"referenceSource\": \"GermiTestMethodReferenceSource\"\r\n            }\r\n        ],\r\n        \"methodClass\": null,\r\n        \"description\": \"Term, name or id assigned\",\r\n        \"formula\": \"null\",\r\n        \"methodDbId\": \"4030\",\r\n        \"methodName\": \"Assigned\",\r\n        \"ontologyReferenceObject\": {\r\n            \"documentationLinks\": [],\r\n            \"ontologyDbId\": \"4030\",\r\n            \"ontologyName\": \"Assigned\",\r\n            \"version\": null\r\n        },\r\n        \"ontologyReference\": {\r\n            \"documentationLinks\": [],\r\n            \"ontologyDbId\": \"4030\",\r\n            \"ontologyName\": \"Assigned\",\r\n            \"version\": null\r\n        }\r\n    },\r\n    \"scale\": {\r\n        \"additionalInfo\": {},\r\n        \"dataType\": \"Date\",\r\n        \"decimalPlaces\": null,\r\n        \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"GermiTestScaleReferenceID\",\r\n                \"referenceSource\": \"GermiTestScaleReferenceSource\"\r\n            }\r\n        ],\r\n        \"ontologyReference\": {\r\n            \"documentationLinks\": [],\r\n            \"ontologyDbId\": \"6060\",\r\n            \"ontologyName\": \"Date (yyyymmdd)\",\r\n            \"version\": null\r\n        },\r\n        \"scaleDbId\": \"6060\",\r\n        \"scaleName\": \"Date (yyyymmdd)\",\r\n        \"validValues\": {\r\n            \"categories\": null,\r\n            \"max\": null,\r\n            \"min\": null\r\n        }\r\n    },\r\n    \"scientist\": null,\r\n    \"status\": null,\r\n    \"submissionTimestamp\": null,\r\n    \"synonyms\": [],\r\n    \"studyDbIds\": [\r\n        \"{{createdStudyDbId1}}\"\r\n    ]\r\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/variables/8630",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"variables",
										"8630"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						},
						{
							"name": "Verify response code and details when observationVariableDbId is missing",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Check status messageType\", function () {\r",
											"    pm.expect(jsonData.metadata.status[0].messageType).to.eql(\"ERROR\");\r",
											"});\r",
											"pm.test(\"Check status message\", function () {\r",
											"    pm.expect(jsonData.metadata.status[0].message).to.eql(\"ERROR1 ObservationVariableDbId is required.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"additionalInfo\": {},\r\n\t\"commonCropName\": \"maize\",\r\n\t\"contextOfUse\": [\r\n\t\t\"PLOT\"\r\n\t],\r\n\t\"defaultValue\": \"\",\r\n\t\"documentationURL\": null,\r\n\t\"externalReferences\": null,\r\n\t\"growthStage\": null,\r\n\t\"institution\": null,\r\n\t\"language\": null,\r\n\t\"observationVariableName\": \"NOTES\",\r\n\t\"ontologyDbId\": \"8390\",\r\n\t\"ontologyName\": \"NOTES\",\r\n\t\"ontologyReference\": null,\r\n\t\"trait\": {\r\n\t\t\"additionalInfo\": {},\r\n\t\t\"alternativeAbbreviations\": [],\r\n\t\t\"attribute\": null,\r\n\t\t\"entity\": null,\r\n\t\t\"externalReferences\": null,\r\n\t\t\"mainAbbreviation\": null,\r\n\t\t\"traitClass\": \"General\",\r\n\t\t\"traitDescription\": \"Comment\",\r\n\t\t\"name\": \"Comment\",\r\n\t\t\"status\": \"Active\",\r\n\t\t\"synonyms\": [],\r\n\t\t\"traitDbId\": \"2065\",\r\n\t\t\"traitName\": \"Comment\",\r\n\t\t\"ontologyReference\": {\r\n\t\t\t\"documentationLinks\": [],\r\n\t\t\t\"ontologyDbId\": \"null\",\r\n\t\t\t\"ontologyName\": \"Comment\",\r\n\t\t\t\"version\": null\r\n\t\t}\r\n\t},\r\n\t\"method\": {\r\n\t\t\"additionalInfo\": {},\r\n\t\t\"bibliographicalReference\": null,\r\n\t\t\"externalReferences\": null,\r\n\t\t\"methodClass\": null,\r\n\t\t\"description\": \"Value recorded after observation\",\r\n\t\t\"formula\": \"null\",\r\n\t\t\"methodDbId\": \"4110\",\r\n\t\t\"methodName\": \"Observed\",\r\n\t\t\"ontologyReferenceObject\": {\r\n\t\t\t\"documentationLinks\": [],\r\n\t\t\t\"ontologyDbId\": \"4110\",\r\n\t\t\t\"ontologyName\": \"Observed\",\r\n\t\t\t\"version\": null\r\n\t\t},\r\n\t\t\"ontologyReference\": {\r\n\t\t\t\"documentationLinks\": [],\r\n\t\t\t\"ontologyDbId\": \"4110\",\r\n\t\t\t\"ontologyName\": \"Observed\",\r\n\t\t\t\"version\": null\r\n\t\t}\r\n\t},\r\n\t\"scale\": {\r\n\t\t\"additionalInfo\": {},\r\n\t\t\"dataType\": \"Text\",\r\n\t\t\"decimalPlaces\": null,\r\n\t\t\"externalReferences\": null,\r\n\t\t\"ontologyReference\": {\r\n\t\t\t\"documentationLinks\": [],\r\n\t\t\t\"ontologyDbId\": \"6020\",\r\n\t\t\t\"ontologyName\": \"Text\",\r\n\t\t\t\"version\": null\r\n\t\t},\r\n\t\t\"scaleDbId\": \"6020\",\r\n\t\t\"scaleName\": \"Text\",\r\n\t\t\"validValues\": {\r\n\t\t\t\"categories\": null,\r\n\t\t\t\"max\": null,\r\n\t\t\t\"min\": null\r\n\t\t}\r\n\t},\r\n\t\"scientist\": null,\r\n\t\"status\": null,\r\n\t\"submissionTimestamp\": null,\r\n\t\"synonyms\": [],\r\n\t\"studyDbIds\": [\r\n\t\t\"{{createdStudyDbId1}}\"\r\n\t]\r\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/variables/8390",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"variables",
										"8390"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						},
						{
							"name": "Verify response code and details when traitDbId is missing",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Check status messageType\", function () {\r",
											"    pm.expect(jsonData.metadata.status[0].messageType).to.eql(\"ERROR\");\r",
											"});\r",
											"pm.test(\"Check status message\", function () {\r",
											"    pm.expect(jsonData.metadata.status[0].message).to.eql(\"ERROR1 TraitDbId is required.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"additionalInfo\": {},\r\n\t\"commonCropName\": \"maize\",\r\n\t\"contextOfUse\": [\r\n\t\t\"PLOT\"\r\n\t],\r\n\t\"defaultValue\": \"\",\r\n\t\"documentationURL\": null,\r\n\t\"externalReferences\": null,\r\n\t\"growthStage\": null,\r\n\t\"institution\": null,\r\n\t\"language\": null,\r\n\t\"observationVariableDbId\": \"8390\",\r\n\t\"observationVariableName\": \"NOTES\",\r\n\t\"ontologyDbId\": \"8390\",\r\n\t\"ontologyName\": \"NOTES\",\r\n\t\"ontologyReference\": null,\r\n\t\"trait\": {\r\n\t\t\"additionalInfo\": {},\r\n\t\t\"alternativeAbbreviations\": [],\r\n\t\t\"attribute\": null,\r\n\t\t\"entity\": null,\r\n\t\t\"externalReferences\": null,\r\n\t\t\"mainAbbreviation\": null,\r\n\t\t\"traitClass\": \"General\",\r\n\t\t\"traitDescription\": \"Comment\",\r\n\t\t\"name\": \"Comment\",\r\n\t\t\"status\": \"Active\",\r\n\t\t\"synonyms\": [],\r\n\t\t\"traitName\": \"Comment\",\r\n\t\t\"ontologyReference\": {\r\n\t\t\t\"documentationLinks\": [],\r\n\t\t\t\"ontologyDbId\": \"null\",\r\n\t\t\t\"ontologyName\": \"Comment\",\r\n\t\t\t\"version\": null\r\n\t\t}\r\n\t},\r\n\t\"method\": {\r\n\t\t\"additionalInfo\": {},\r\n\t\t\"bibliographicalReference\": null,\r\n\t\t\"externalReferences\": null,\r\n\t\t\"methodClass\": null,\r\n\t\t\"description\": \"Value recorded after observation\",\r\n\t\t\"formula\": \"null\",\r\n\t\t\"methodDbId\": \"4110\",\r\n\t\t\"methodName\": \"Observed\",\r\n\t\t\"ontologyReferenceObject\": {\r\n\t\t\t\"documentationLinks\": [],\r\n\t\t\t\"ontologyDbId\": \"4110\",\r\n\t\t\t\"ontologyName\": \"Observed\",\r\n\t\t\t\"version\": null\r\n\t\t},\r\n\t\t\"ontologyReference\": {\r\n\t\t\t\"documentationLinks\": [],\r\n\t\t\t\"ontologyDbId\": \"4110\",\r\n\t\t\t\"ontologyName\": \"Observed\",\r\n\t\t\t\"version\": null\r\n\t\t}\r\n\t},\r\n\t\"scale\": {\r\n\t\t\"additionalInfo\": {},\r\n\t\t\"dataType\": \"Text\",\r\n\t\t\"decimalPlaces\": null,\r\n\t\t\"externalReferences\": null,\r\n\t\t\"ontologyReference\": {\r\n\t\t\t\"documentationLinks\": [],\r\n\t\t\t\"ontologyDbId\": \"6020\",\r\n\t\t\t\"ontologyName\": \"Text\",\r\n\t\t\t\"version\": null\r\n\t\t},\r\n\t\t\"scaleDbId\": \"6020\",\r\n\t\t\"scaleName\": \"Text\",\r\n\t\t\"validValues\": {\r\n\t\t\t\"categories\": null,\r\n\t\t\t\"max\": null,\r\n\t\t\t\"min\": null\r\n\t\t}\r\n\t},\r\n\t\"scientist\": null,\r\n\t\"status\": null,\r\n\t\"submissionTimestamp\": null,\r\n\t\"synonyms\": [],\r\n\t\"studyDbIds\": [\r\n\t\t\"{{createdStudyDbId1}}\"\r\n\t]\r\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/variables/8390",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"variables",
										"8390"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						},
						{
							"name": "Verify response code and details when methodDbId is missing",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Check status messageType\", function () {\r",
											"    pm.expect(jsonData.metadata.status[0].messageType).to.eql(\"ERROR\");\r",
											"});\r",
											"pm.test(\"Check status message\", function () {\r",
											"    pm.expect(jsonData.metadata.status[0].message).to.eql(\"ERROR1 MethodDbId is required.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"additionalInfo\": {},\r\n    \"commonCropName\": \"maize\",\r\n    \"contextOfUse\": [\r\n        \"PLOT\"\r\n    ],\r\n    \"defaultValue\": \"\",\r\n    \"documentationURL\": null,\r\n    \"externalReferences\": [\r\n        {\r\n            \"referenceID\": \"noteReferenceID\",\r\n            \"referenceSource\": \"noteReferenceSource\"\r\n        }\r\n    ],\r\n    \"growthStage\": null,\r\n    \"institution\": null,\r\n    \"language\": null,\r\n    \"observationVariableDbId\": \"8390\",\r\n    \"observationVariableName\": \"NOTES\",\r\n    \"ontologyDbId\": \"8390\",\r\n    \"ontologyName\": \"NOTES\",\r\n    \"ontologyReference\": null,\r\n    \"trait\": {\r\n        \"additionalInfo\": {},\r\n        \"alternativeAbbreviations\": [],\r\n        \"attribute\": null,\r\n        \"entity\": null,\r\n        \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"noteTraitReferenceID\",\r\n                \"referenceSource\": \"noteTraitReferenceSource\"\r\n            }\r\n        ],\r\n        \"mainAbbreviation\": null,\r\n        \"traitClass\": \"General\",\r\n        \"traitDescription\": \"Comment\",\r\n        \"name\": \"Comment\",\r\n        \"status\": \"Active\",\r\n        \"synonyms\": [],\r\n        \"traitDbId\": \"2065\",\r\n        \"traitName\": \"Comment\",\r\n        \"ontologyReference\": {\r\n            \"documentationLinks\": [],\r\n            \"ontologyDbId\": \"null\",\r\n            \"ontologyName\": \"Comment\",\r\n            \"version\": null\r\n        }\r\n    },\r\n    \"method\": {\r\n        \"additionalInfo\": {},\r\n        \"bibliographicalReference\": null,\r\n        \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"noteMethodReferenceID\",\r\n                \"referenceSource\": \"noteMethodReferenceSource\"\r\n            }\r\n        ],\r\n        \"methodClass\": null,\r\n        \"description\": \"Value recorded after observation\",\r\n        \"formula\": \"null\",\r\n        \"methodName\": \"Observed\",\r\n        \"ontologyReferenceObject\": {\r\n            \"documentationLinks\": [],\r\n            \"ontologyDbId\": \"4110\",\r\n            \"ontologyName\": \"Observed\",\r\n            \"version\": null\r\n        },\r\n        \"ontologyReference\": {\r\n            \"documentationLinks\": [],\r\n            \"ontologyDbId\": \"4110\",\r\n            \"ontologyName\": \"Observed\",\r\n            \"version\": null\r\n        }\r\n    },\r\n    \"scale\": {\r\n        \"additionalInfo\": {},\r\n        \"dataType\": \"Text\",\r\n        \"decimalPlaces\": null,\r\n        \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"noteScaleReferenceID\",\r\n                \"referenceSource\": \"noteScaleReferenceSource\"\r\n            }\r\n        ],\r\n        \"ontologyReference\": {\r\n            \"documentationLinks\": [],\r\n            \"ontologyDbId\": \"6020\",\r\n            \"ontologyName\": \"Text\",\r\n            \"version\": null\r\n        },\r\n        \"scaleDbId\": \"6020\",\r\n        \"scaleName\": \"Text\",\r\n        \"validValues\": {\r\n            \"categories\": null,\r\n            \"max\": null,\r\n            \"min\": null\r\n        }\r\n    },\r\n    \"scientist\": null,\r\n    \"status\": null,\r\n    \"submissionTimestamp\": null,\r\n    \"synonyms\": [],\r\n    \"studyDbIds\": [\r\n        \"{{createdStudyDbId1}}\"\r\n    ]\r\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/variables/8390",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"variables",
										"8390"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						},
						{
							"name": "Verify response code and details when scaleDbId is missing",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Check status messageType\", function () {\r",
											"    pm.expect(jsonData.metadata.status[0].messageType).to.eql(\"ERROR\");\r",
											"});\r",
											"pm.test(\"Check status message\", function () {\r",
											"    pm.expect(jsonData.metadata.status[0].message).to.eql(\"ERROR1 ScaleDbId is required.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"additionalInfo\": {},\r\n    \"commonCropName\": \"maize\",\r\n    \"contextOfUse\": [\r\n        \"PLOT\"\r\n    ],\r\n    \"defaultValue\": \"\",\r\n    \"documentationURL\": null,\r\n    \"externalReferences\": [\r\n        {\r\n            \"referenceID\": \"noteReferenceID\",\r\n            \"referenceSource\": \"noteReferenceSource\"\r\n        }\r\n    ],\r\n    \"growthStage\": null,\r\n    \"institution\": null,\r\n    \"language\": null,\r\n    \"observationVariableDbId\": \"8390\",\r\n    \"observationVariableName\": \"NOTES\",\r\n    \"ontologyDbId\": \"8390\",\r\n    \"ontologyName\": \"NOTES\",\r\n    \"ontologyReference\": null,\r\n    \"trait\": {\r\n        \"additionalInfo\": {},\r\n        \"alternativeAbbreviations\": [],\r\n        \"attribute\": null,\r\n        \"entity\": null,\r\n        \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"noteTraitReferenceID\",\r\n                \"referenceSource\": \"noteTraitReferenceSource\"\r\n            }\r\n        ],\r\n        \"mainAbbreviation\": null,\r\n        \"traitClass\": \"General\",\r\n        \"traitDescription\": \"Comment\",\r\n        \"name\": \"Comment\",\r\n        \"status\": \"Active\",\r\n        \"synonyms\": [],\r\n        \"traitDbId\": \"2065\",\r\n        \"traitName\": \"Comment\",\r\n        \"ontologyReference\": {\r\n            \"documentationLinks\": [],\r\n            \"ontologyDbId\": \"null\",\r\n            \"ontologyName\": \"Comment\",\r\n            \"version\": null\r\n        }\r\n    },\r\n    \"method\": {\r\n        \"additionalInfo\": {},\r\n        \"bibliographicalReference\": null,\r\n        \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"noteMethodReferenceID\",\r\n                \"referenceSource\": \"noteMethodReferenceSource\"\r\n            }\r\n        ],\r\n        \"methodClass\": null,\r\n        \"description\": \"Value recorded after observation\",\r\n        \"formula\": \"null\",\r\n        \"methodDbId\": \"4110\",\r\n        \"methodName\": \"Observed\",\r\n        \"ontologyReferenceObject\": {\r\n            \"documentationLinks\": [],\r\n            \"ontologyDbId\": \"4110\",\r\n            \"ontologyName\": \"Observed\",\r\n            \"version\": null\r\n        },\r\n        \"ontologyReference\": {\r\n            \"documentationLinks\": [],\r\n            \"ontologyDbId\": \"4110\",\r\n            \"ontologyName\": \"Observed\",\r\n            \"version\": null\r\n        }\r\n    },\r\n    \"scale\": {\r\n        \"additionalInfo\": {},\r\n        \"dataType\": \"Text\",\r\n        \"decimalPlaces\": null,\r\n        \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"noteScaleReferenceID\",\r\n                \"referenceSource\": \"noteScaleReferenceSource\"\r\n            }\r\n        ],\r\n        \"ontologyReference\": {\r\n            \"documentationLinks\": [],\r\n            \"ontologyDbId\": \"6020\",\r\n            \"ontologyName\": \"Text\",\r\n            \"version\": null\r\n        },\r\n        \"scaleName\": \"Text\",\r\n        \"validValues\": {\r\n            \"categories\": null,\r\n            \"max\": null,\r\n            \"min\": null\r\n        }\r\n    },\r\n    \"scientist\": null,\r\n    \"status\": null,\r\n    \"submissionTimestamp\": null,\r\n    \"synonyms\": [],\r\n    \"studyDbIds\": [\r\n        \"{{createdStudyDbId1}}\"\r\n    ]\r\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/variables/8390",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"variables",
										"8390"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						},
						{
							"name": "Verify response code and details when studyDbId is missing",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"var jsonData = pm.response.json();\r",
											"pm.test(\"Check status messageType\", function () {\r",
											"    pm.expect(jsonData.metadata.status[0].messageType).to.eql(\"INFO\");\r",
											"});\r",
											"pm.test(\"Check status message\", function () {\r",
											"    pm.expect(jsonData.metadata.status[0].message).to.eql(\"Lodging_incidence variable is updated successfully.\");\r",
											"});\r",
											"pm.test(\"Check additionalInfo\", function () {\r",
											"    pm.expect(jsonData.result.additionalInfo).to.eql({});\r",
											"});\r",
											"pm.test(\"Check commonCropName\", function () {\r",
											"    pm.expect(jsonData.result.commonCropName).to.eql(null);\r",
											"});\r",
											"pm.test(\"Check defaultValue\", function () {\r",
											"    pm.expect(jsonData.result.defaultValue).to.eql(null);\r",
											"});\r",
											"pm.test(\"Check documentationURL\", function () {\r",
											"    pm.expect(jsonData.result.documentationURL).to.eql(null);\r",
											"});\r",
											"pm.test(\"Check externalReferences\", function () {\r",
											"    pm.expect(jsonData.result.externalReferences).to.eql(null);\r",
											"});\r",
											"pm.test(\"Check growthStage\", function () {\r",
											"    pm.expect(jsonData.result.growthStage).to.eql(null);\r",
											"});\r",
											"pm.test(\"Check institution\", function () {\r",
											"    pm.expect(jsonData.result.institution).to.eql(null);\r",
											"});\r",
											"pm.test(\"Check language\", function () {\r",
											"    pm.expect(jsonData.result.language).to.eql(null);\r",
											"});\r",
											"pm.test(\"Check observationVariableDbId\", function () {\r",
											"    pm.expect(jsonData.result.observationVariableDbId).to.eql(\"18060\");\r",
											"});\r",
											"pm.test(\"Check observationVariableName\", function () {\r",
											"    pm.expect(jsonData.result.observationVariableName).to.eql(\"Lodging_incidence\");\r",
											"});\r",
											"pm.test(\"Check ontologyReference documentationLinks\", function () {\r",
											"    pm.expect(jsonData.result.ontologyReference.documentationLinks).to.eql([]);\r",
											"});\r",
											"pm.test(\"Check ontologyReference ontologyDbId\", function () {\r",
											"    pm.expect(jsonData.result.ontologyReference.ontologyDbId).to.eql(null);\r",
											"});\r",
											"pm.test(\"Check ontologyReference ontologyName\", function () {\r",
											"    pm.expect(jsonData.result.ontologyReference.ontologyName).to.eql(null);\r",
											"});\r",
											"pm.test(\"Check ontologyReference version\", function () {\r",
											"    pm.expect(jsonData.result.ontologyReference.version).to.eql(null);\r",
											"});\r",
											"//Check trait\r",
											"pm.test(\"Check trait additionalInfo\", function () {\r",
											"    pm.expect(jsonData.result.trait.additionalInfo).to.eql({});\r",
											"});\r",
											"pm.test(\"Check trait alternativeAbbreviations\", function () {\r",
											"    pm.expect(jsonData.result.trait.alternativeAbbreviations).to.eql([]);\r",
											"});\r",
											"pm.test(\"Check trait attribute\", function () {\r",
											"    pm.expect(jsonData.result.trait.attribute).to.eql(null);\r",
											"});\r",
											"pm.test(\"Check trait entity\", function () {\r",
											"    pm.expect(jsonData.result.trait.entity).to.eql(null);\r",
											"});\r",
											"pm.test(\"Check trait externalReferences \", function () {\r",
											"    pm.expect(jsonData.result.trait.externalReferences).to.eql(null);\r",
											"});\r",
											"pm.test(\"Check trait mainAbbreviation\", function () {\r",
											"    pm.expect(jsonData.result.trait.mainAbbreviation).to.eql(null);\r",
											"});\r",
											"pm.test(\"Check trait traitClass\", function () {\r",
											"    pm.expect(jsonData.result.trait.traitClass).to.eql(null);\r",
											"});\r",
											"pm.test(\"Check trait traitDescription\", function () {\r",
											"    pm.expect(jsonData.result.trait.traitDescription).to.eql(null);\r",
											"});\r",
											"pm.test(\"Check trait status\", function () {\r",
											"    pm.expect(jsonData.result.trait.status).to.eql(null);\r",
											"});\r",
											"pm.test(\"Check trait synonyms\", function () {\r",
											"    pm.expect(jsonData.result.trait.synonyms).to.eql([]);\r",
											"});\r",
											"pm.test(\"Check trait traitName\", function () {\r",
											"    pm.expect(jsonData.result.trait.traitName).to.eql(null);\r",
											"});\r",
											"pm.test(\"Check trait ontologyReference documentationLinks\", function () {\r",
											"    pm.expect(jsonData.result.trait.ontologyReference.documentationLinks).to.eql([]);\r",
											"});\r",
											"pm.test(\"Check trait ontologyReference ontologyDbId\", function () {\r",
											"    pm.expect(jsonData.result.trait.ontologyReference.ontologyDbId).to.eql(null);\r",
											"});\r",
											"pm.test(\"Check trait ontologyReference version\", function () {\r",
											"    pm.expect(jsonData.result.trait.ontologyReference.version).to.eql(null);\r",
											"});\r",
											"\r",
											"//Check method\r",
											"pm.test(\"Check method additionalInfo\", function () {\r",
											"    pm.expect(jsonData.result.method.additionalInfo).to.eql({});\r",
											"});\r",
											"pm.test(\"Check method bibliographicalReference\", function () {\r",
											"    pm.expect(jsonData.result.method.bibliographicalReference).to.eql(null);\r",
											"});\r",
											"pm.test(\"Check method externalReferences\", function () {\r",
											"    pm.expect(jsonData.result.method.externalReferences).to.eql(null);\r",
											"});\r",
											"\r",
											"pm.test(\"Check method methodClass\", function () {\r",
											"    pm.expect(jsonData.result.method.methodClass).to.eql(null);\r",
											"});\r",
											"pm.test(\"Check method description\", function () {\r",
											"    pm.expect(jsonData.result.method.description).to.eql(null);\r",
											"});\r",
											"pm.test(\"Check method formula\", function () {\r",
											"    pm.expect(jsonData.result.method.formula).to.eql(null);\r",
											"});\r",
											"pm.test(\"Check method methodDbId\", function () {\r",
											"    pm.expect(jsonData.result.method.methodDbId).to.eql(\"16000\");\r",
											"});\r",
											"pm.test(\"Check method methodName\", function () {\r",
											"    pm.expect(jsonData.result.method.methodName).to.eql(null);\r",
											"});\r",
											"pm.test(\"Check method ontologyReferenceObject documentationLinks\", function () {\r",
											"    pm.expect(jsonData.result.method.ontologyReferenceObject.documentationLinks).to.eql([]);\r",
											"});\r",
											"pm.test(\"Check method ontologyReferenceObject ontologyDbId\", function () {\r",
											"    pm.expect(jsonData.result.method.ontologyReferenceObject.ontologyDbId).to.eql(null);\r",
											"});\r",
											"pm.test(\"Check method ontologyReferenceObject ontologyName\", function () {\r",
											"    pm.expect(jsonData.result.method.ontologyReferenceObject.ontologyName).to.eql(null);\r",
											"});\r",
											"pm.test(\"Check method ontologyReferenceObject version\", function () {\r",
											"    pm.expect(jsonData.result.method.ontologyReferenceObject.version).to.eql(null);\r",
											"});\r",
											"\r",
											"pm.test(\"Check method ontologyReference documentationLinks\", function () {\r",
											"    pm.expect(jsonData.result.method.ontologyReference.documentationLinks).to.eql([]);\r",
											"});\r",
											"pm.test(\"Check method ontologyReference ontologyDbId\", function () {\r",
											"    pm.expect(jsonData.result.method.ontologyReference.ontologyDbId).to.eql(null);\r",
											"});\r",
											"pm.test(\"Check method ontologyReference ontologyName\", function () {\r",
											"    pm.expect(jsonData.result.method.ontologyReference.ontologyName).to.eql(null);\r",
											"});\r",
											"pm.test(\"Check method ontologyReference version\", function () {\r",
											"    pm.expect(jsonData.result.method.ontologyReference.version).to.eql(null);\r",
											"});\r",
											"\r",
											"//Check scale\r",
											"pm.test(\"Check scale additionalInfo\", function () {\r",
											"    pm.expect(jsonData.result.scale.additionalInfo).to.eql({});\r",
											"});\r",
											"pm.test(\"Check scale dataType\", function () {\r",
											"    pm.expect(jsonData.result.scale.dataType).to.eql(null);\r",
											"});\r",
											"pm.test(\"Check scale decimalPlaces\", function () {\r",
											"    pm.expect(jsonData.result.scale.decimalPlaces).to.eql(null);\r",
											"});\r",
											"pm.test(\"Check scale externalReferences\", function () {\r",
											"    pm.expect(jsonData.result.scale.externalReferences).to.eql(null);\r",
											"});\r",
											"pm.test(\"Check scale ontologyReference documentationLinks\", function () {\r",
											"    pm.expect(jsonData.result.scale.ontologyReference.documentationLinks).to.eql([]);\r",
											"});\r",
											"pm.test(\"Check scale ontologyReference ontologyDbId\", function () {\r",
											"    pm.expect(jsonData.result.scale.ontologyReference.ontologyDbId).to.eql(null);\r",
											"});\r",
											"pm.test(\"Check scale ontologyReference ontologyName\", function () {\r",
											"    pm.expect(jsonData.result.scale.ontologyReference.ontologyName).to.eql(null);\r",
											"});\r",
											"pm.test(\"Check scale ontologyReference version\", function () {\r",
											"    pm.expect(jsonData.result.scale.ontologyReference.version).to.eql(null);\r",
											"});\r",
											"pm.test(\"Check scale scaleDbId\", function () {\r",
											"    pm.expect(jsonData.result.scale.scaleDbId).to.eql(\"17010\");\r",
											"});\r",
											"pm.test(\"Check scale scaleName\", function () {\r",
											"    pm.expect(jsonData.result.scale.scaleName).to.eql(null);\r",
											"});\r",
											"pm.test(\"Check scale validValues categories\", function () {\r",
											"    pm.expect(jsonData.result.scale.validValues.categories).to.eql([]);\r",
											"});\r",
											"pm.test(\"Check scale validValues max\", function () {\r",
											"    pm.expect(jsonData.result.scale.validValues.max).to.eql(null);\r",
											"});\r",
											"pm.test(\"Check scale validValues min\", function () {\r",
											"    pm.expect(jsonData.result.scale.validValues.min).to.eql(null);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Check scientist\", function () {\r",
											"    pm.expect(jsonData.result.scientist).to.eql(null);\r",
											"});\r",
											"pm.test(\"Check status\", function () {\r",
											"    pm.expect(jsonData.result.status).to.eql(null);\r",
											"});\r",
											"pm.test(\"Check submissionTimestamp\", function () {\r",
											"    pm.expect(jsonData.result.submissionTimestamp).to.eql(null);\r",
											"});\r",
											"pm.test(\"Check synonyms\", function () {\r",
											"    pm.expect(jsonData.result.synonyms).to.eql([]);\r",
											"});\r",
											"pm.test(\"Check studyDbIds\", function () {\r",
											"    pm.expect(jsonData.result.studyDbIds).to.not.be.null;\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"observationVariableDbId\": \"18060\",\r\n    \"observationVariableName\": \"Lodging_incidence\",\r\n\t\"trait\": {\r\n\t\t\"traitDbId\": \"15010\"\r\n\t},\r\n\t\"method\": {\r\n\t\t\"methodDbId\": \"16000\"\r\n\t},\r\n\t\"scale\": {\r\n\t\t\"scaleDbId\": \"17010\"\r\n\t}\r\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/variables/18060",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"variables",
										"18060"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						},
						{
							"name": "Verify response code and details when updated observationVariableName",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Check status messageType\", function () {\r",
											"    pm.expect(jsonData.metadata.status[0].messageType).to.eql(\"INFO\");\r",
											"});\r",
											"pm.test(\"Check status message\", function () {\r",
											"    pm.expect(jsonData.metadata.status[0].message).to.eql(\"Lodging_incidence_edited variable is updated successfully.\");\r",
											"});\r",
											"pm.test(\"Check additionalInfo\", function () {\r",
											"    pm.expect(jsonData.result.additionalInfo).to.eql({});\r",
											"});\r",
											"pm.test(\"Check commonCropName\", function () {\r",
											"    pm.expect(jsonData.result.commonCropName).to.eql(null);\r",
											"});\r",
											"pm.test(\"Check defaultValue\", function () {\r",
											"    pm.expect(jsonData.result.defaultValue).to.eql(null);\r",
											"});\r",
											"pm.test(\"Check documentationURL\", function () {\r",
											"    pm.expect(jsonData.result.documentationURL).to.eql(null);\r",
											"});\r",
											"pm.test(\"Check externalReferences\", function () {\r",
											"    pm.expect(jsonData.result.externalReferences).to.eql(null);\r",
											"});\r",
											"\r",
											"pm.test(\"Check growthStage\", function () {\r",
											"    pm.expect(jsonData.result.growthStage).to.eql(null);\r",
											"});\r",
											"pm.test(\"Check institution\", function () {\r",
											"    pm.expect(jsonData.result.institution).to.eql(null);\r",
											"});\r",
											"pm.test(\"Check language\", function () {\r",
											"    pm.expect(jsonData.result.language).to.eql(null);\r",
											"});\r",
											"pm.test(\"Check observationVariableDbId\", function () {\r",
											"    pm.expect(jsonData.result.observationVariableDbId).to.eql(\"18060\");\r",
											"});\r",
											"pm.test(\"Check observationVariableName\", function () {\r",
											"    pm.expect(jsonData.result.observationVariableName).to.eql(\"Lodging_incidence_edited\");\r",
											"});\r",
											"pm.test(\"Check ontologyReference documentationLinks\", function () {\r",
											"    pm.expect(jsonData.result.ontologyReference.documentationLinks).to.eql([]);\r",
											"});\r",
											"pm.test(\"Check ontologyReference ontologyDbId\", function () {\r",
											"    pm.expect(jsonData.result.ontologyReference.ontologyDbId).to.eql(null);\r",
											"});\r",
											"pm.test(\"Check ontologyReference ontologyName\", function () {\r",
											"    pm.expect(jsonData.result.ontologyReference.ontologyName).to.eql(null);\r",
											"});\r",
											"pm.test(\"Check ontologyReference version\", function () {\r",
											"    pm.expect(jsonData.result.ontologyReference.version).to.eql(null);\r",
											"});\r",
											"//Check trait\r",
											"pm.test(\"Check trait additionalInfo\", function () {\r",
											"    pm.expect(jsonData.result.trait.additionalInfo).to.eql({});\r",
											"});\r",
											"pm.test(\"Check trait alternativeAbbreviations\", function () {\r",
											"    pm.expect(jsonData.result.trait.alternativeAbbreviations).to.eql([]);\r",
											"});\r",
											"pm.test(\"Check trait attribute\", function () {\r",
											"    pm.expect(jsonData.result.trait.attribute).to.eql(null);\r",
											"});\r",
											"pm.test(\"Check trait entity\", function () {\r",
											"    pm.expect(jsonData.result.trait.entity).to.eql(null);\r",
											"});\r",
											"pm.test(\"Check trait externalReferences \", function () {\r",
											"    pm.expect(jsonData.result.trait.externalReferences).to.eql(null);\r",
											"});\r",
											"pm.test(\"Check trait mainAbbreviation\", function () {\r",
											"    pm.expect(jsonData.result.trait.mainAbbreviation).to.eql(null);\r",
											"});\r",
											"pm.test(\"Check trait traitClass\", function () {\r",
											"    pm.expect(jsonData.result.trait.traitClass).to.eql(null);\r",
											"});\r",
											"pm.test(\"Check trait traitDescription\", function () {\r",
											"    pm.expect(jsonData.result.trait.traitDescription).to.eql(null);\r",
											"});\r",
											"pm.test(\"Check trait status\", function () {\r",
											"    pm.expect(jsonData.result.trait.status).to.eql(null);\r",
											"});\r",
											"pm.test(\"Check trait synonyms\", function () {\r",
											"    pm.expect(jsonData.result.trait.synonyms).to.eql([]);\r",
											"});\r",
											"pm.test(\"Check trait traitName\", function () {\r",
											"    pm.expect(jsonData.result.trait.traitName).to.eql(null);\r",
											"});\r",
											"pm.test(\"Check trait ontologyReference documentationLinks\", function () {\r",
											"    pm.expect(jsonData.result.trait.ontologyReference.documentationLinks).to.eql([]);\r",
											"});\r",
											"pm.test(\"Check trait ontologyReference ontologyDbId\", function () {\r",
											"    pm.expect(jsonData.result.trait.ontologyReference.ontologyDbId).to.eql(null);\r",
											"});\r",
											"pm.test(\"Check trait ontologyReference version\", function () {\r",
											"    pm.expect(jsonData.result.trait.ontologyReference.version).to.eql(null);\r",
											"});\r",
											"\r",
											"//Check method\r",
											"pm.test(\"Check method additionalInfo\", function () {\r",
											"    pm.expect(jsonData.result.method.additionalInfo).to.eql({});\r",
											"});\r",
											"pm.test(\"Check method bibliographicalReference\", function () {\r",
											"    pm.expect(jsonData.result.method.bibliographicalReference).to.eql(null);\r",
											"});\r",
											"pm.test(\"Check method externalReferences referenceID\", function () {\r",
											"    pm.expect(jsonData.result.method.externalReferences).to.eql(null);\r",
											"});\r",
											"\r",
											"pm.test(\"Check method methodClass\", function () {\r",
											"    pm.expect(jsonData.result.method.methodClass).to.eql(null);\r",
											"});\r",
											"pm.test(\"Check method description\", function () {\r",
											"    pm.expect(jsonData.result.method.description).to.eql(null);\r",
											"});\r",
											"pm.test(\"Check method formula\", function () {\r",
											"    pm.expect(jsonData.result.method.formula).to.eql(null);\r",
											"});\r",
											"pm.test(\"Check method methodDbId\", function () {\r",
											"    pm.expect(jsonData.result.method.methodDbId).to.eql(\"16000\");\r",
											"});\r",
											"pm.test(\"Check method methodName\", function () {\r",
											"    pm.expect(jsonData.result.method.methodName).to.eql(null);\r",
											"});\r",
											"pm.test(\"Check method ontologyReferenceObject documentationLinks\", function () {\r",
											"    pm.expect(jsonData.result.method.ontologyReferenceObject.documentationLinks).to.eql([]);\r",
											"});\r",
											"pm.test(\"Check method ontologyReferenceObject ontologyDbId\", function () {\r",
											"    pm.expect(jsonData.result.method.ontologyReferenceObject.ontologyDbId).to.eql(null);\r",
											"});\r",
											"pm.test(\"Check method ontologyReferenceObject ontologyName\", function () {\r",
											"    pm.expect(jsonData.result.method.ontologyReferenceObject.ontologyName).to.eql(null);\r",
											"});\r",
											"pm.test(\"Check method ontologyReferenceObject version\", function () {\r",
											"    pm.expect(jsonData.result.method.ontologyReferenceObject.version).to.eql(null);\r",
											"});\r",
											"\r",
											"pm.test(\"Check method ontologyReference documentationLinks\", function () {\r",
											"    pm.expect(jsonData.result.method.ontologyReference.documentationLinks).to.eql([]);\r",
											"});\r",
											"pm.test(\"Check method ontologyReference ontologyDbId\", function () {\r",
											"    pm.expect(jsonData.result.method.ontologyReference.ontologyDbId).to.eql(null);\r",
											"});\r",
											"pm.test(\"Check method ontologyReference ontologyName\", function () {\r",
											"    pm.expect(jsonData.result.method.ontologyReference.ontologyName).to.eql(null);\r",
											"});\r",
											"pm.test(\"Check method ontologyReference version\", function () {\r",
											"    pm.expect(jsonData.result.method.ontologyReference.version).to.eql(null);\r",
											"});\r",
											"\r",
											"//Check scale\r",
											"pm.test(\"Check scale additionalInfo\", function () {\r",
											"    pm.expect(jsonData.result.scale.additionalInfo).to.eql({});\r",
											"});\r",
											"pm.test(\"Check scale dataType\", function () {\r",
											"    pm.expect(jsonData.result.scale.dataType).to.eql(null);\r",
											"});\r",
											"pm.test(\"Check scale decimalPlaces\", function () {\r",
											"    pm.expect(jsonData.result.scale.decimalPlaces).to.eql(null);\r",
											"});\r",
											"pm.test(\"Check scale externalReferences\", function () {\r",
											"    pm.expect(jsonData.result.scale.externalReferences).to.eql(null);\r",
											"});\r",
											"pm.test(\"Check scale ontologyReference documentationLinks\", function () {\r",
											"    pm.expect(jsonData.result.scale.ontologyReference.documentationLinks).to.eql([]);\r",
											"});\r",
											"pm.test(\"Check scale ontologyReference ontologyDbId\", function () {\r",
											"    pm.expect(jsonData.result.scale.ontologyReference.ontologyDbId).to.eql(null);\r",
											"});\r",
											"pm.test(\"Check scale ontologyReference ontologyName\", function () {\r",
											"    pm.expect(jsonData.result.scale.ontologyReference.ontologyName).to.eql(null);\r",
											"});\r",
											"pm.test(\"Check scale ontologyReference version\", function () {\r",
											"    pm.expect(jsonData.result.scale.ontologyReference.version).to.eql(null);\r",
											"});\r",
											"pm.test(\"Check scale scaleDbId\", function () {\r",
											"    pm.expect(jsonData.result.scale.scaleDbId).to.eql(\"17010\");\r",
											"});\r",
											"pm.test(\"Check scale scaleName\", function () {\r",
											"    pm.expect(jsonData.result.scale.scaleName).to.eql(null);\r",
											"});\r",
											"pm.test(\"Check scale validValues categories\", function () {\r",
											"    pm.expect(jsonData.result.scale.validValues.categories).to.eql([]);\r",
											"});\r",
											"pm.test(\"Check scale validValues max\", function () {\r",
											"    pm.expect(jsonData.result.scale.validValues.max).to.eql(null);\r",
											"});\r",
											"pm.test(\"Check scale validValues min\", function () {\r",
											"    pm.expect(jsonData.result.scale.validValues.min).to.eql(null);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Check scientist\", function () {\r",
											"    pm.expect(jsonData.result.scientist).to.eql(null);\r",
											"});\r",
											"pm.test(\"Check status\", function () {\r",
											"    pm.expect(jsonData.result.status).to.eql(null);\r",
											"});\r",
											"pm.test(\"Check submissionTimestamp\", function () {\r",
											"    pm.expect(jsonData.result.submissionTimestamp).to.eql(null);\r",
											"});\r",
											"pm.test(\"Check synonyms\", function () {\r",
											"    pm.expect(jsonData.result.synonyms).to.eql([]);\r",
											"});\r",
											"pm.test(\"Check studyDbIds\", function () {\r",
											"    pm.expect(jsonData.result.studyDbIds).to.not.be.null;\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"observationVariableDbId\": \"18060\",\r\n    \"observationVariableName\": \"Lodging_incidence_edited\",\r\n\t\"trait\": {\r\n\t\t\"traitDbId\": \"15010\"\r\n\t},\r\n\t\"method\": {\r\n\t\t\"methodDbId\": \"16000\"\r\n\t},\r\n\t\"scale\": {\r\n\t\t\"scaleDbId\": \"17010\"\r\n\t}\r\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/variables/18060",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"variables",
										"18060"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						},
						{
							"name": "Verify response code and details when observationVariableName is greater than max length",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Check status messageType\", function () {\r",
											"    pm.expect(jsonData.metadata.status[0].messageType).to.eql(\"ERROR\");\r",
											"});\r",
											"pm.test(\"Check status message\", function () {\r",
											"    pm.expect(jsonData.metadata.status[0].message).to.eql(\"ERROR1 ObservationVariableName can not have more than 200 characters.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"observationVariableDbId\": \"18060\",\r\n    \"observationVariableName\": \"Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Donec qua\",\r\n\t\"trait\": {\r\n\t\t\"traitDbId\": \"15010\"\r\n\t},\r\n\t\"method\": {\r\n\t\t\"methodDbId\": \"16000\"\r\n\t},\r\n\t\"scale\": {\r\n\t\t\"scaleDbId\": \"17010\"\r\n\t}\r\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/variables/18060",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"variables",
										"18060"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						},
						{
							"name": "Verify response code and details when entered invalid observationVariableId in path",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Check status messageType\", function () {\r",
											"    pm.expect(jsonData.metadata.status[0].messageType).to.eql(\"ERROR\");\r",
											"});\r",
											"pm.test(\"Check status message\", function () {\r",
											"    pm.expect(jsonData.metadata.status[0].message).to.eql(\"ERROR1 ObservationVariableDbId parameter and VariableDTO.observationVariableDbId should be equal.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"additionalInfo\": {},\r\n    \"commonCropName\": \"maize\",\r\n    \"contextOfUse\": [\r\n        \"PLOT\"\r\n    ],\r\n    \"defaultValue\": \"\",\r\n    \"documentationURL\": null,\r\n    \"externalReferences\": [\r\n        {\r\n            \"referenceID\": \"noteReferenceID\",\r\n            \"referenceSource\": \"noteReferenceSource\"\r\n        }\r\n    ],\r\n    \"growthStage\": null,\r\n    \"institution\": null,\r\n    \"language\": null,\r\n    \"observationVariableDbId\": \"8390\",\r\n    \"observationVariableName\": \"NOTES\",\r\n    \"ontologyDbId\": \"8390\",\r\n    \"ontologyName\": \"NOTES\",\r\n    \"ontologyReference\": null,\r\n    \"trait\": {\r\n        \"additionalInfo\": {},\r\n        \"alternativeAbbreviations\": [],\r\n        \"attribute\": null,\r\n        \"entity\": null,\r\n        \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"noteTraitReferenceID\",\r\n                \"referenceSource\": \"noteTraitReferenceSource\"\r\n            }\r\n        ],\r\n        \"mainAbbreviation\": null,\r\n        \"traitClass\": \"General\",\r\n        \"traitDescription\": \"Comment\",\r\n        \"name\": \"Comment\",\r\n        \"status\": \"Active\",\r\n        \"synonyms\": [],\r\n        \"traitDbId\": \"2065\",\r\n        \"traitName\": \"Comment\",\r\n        \"ontologyReference\": {\r\n            \"documentationLinks\": [],\r\n            \"ontologyDbId\": \"null\",\r\n            \"ontologyName\": \"Comment\",\r\n            \"version\": null\r\n        }\r\n    },\r\n    \"method\": {\r\n        \"additionalInfo\": {},\r\n        \"bibliographicalReference\": null,\r\n        \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"noteMethodReferenceID\",\r\n                \"referenceSource\": \"noteMethodReferenceSource\"\r\n            }\r\n        ],\r\n        \"methodClass\": null,\r\n        \"description\": \"Value recorded after observation\",\r\n        \"formula\": \"null\",\r\n        \"methodDbId\": \"4110\",\r\n        \"methodName\": \"Observed\",\r\n        \"ontologyReferenceObject\": {\r\n            \"documentationLinks\": [],\r\n            \"ontologyDbId\": \"4110\",\r\n            \"ontologyName\": \"Observed\",\r\n            \"version\": null\r\n        },\r\n        \"ontologyReference\": {\r\n            \"documentationLinks\": [],\r\n            \"ontologyDbId\": \"4110\",\r\n            \"ontologyName\": \"Observed\",\r\n            \"version\": null\r\n        }\r\n    },\r\n    \"scale\": {\r\n        \"additionalInfo\": {},\r\n        \"dataType\": \"Text\",\r\n        \"decimalPlaces\": null,\r\n        \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"noteScaleReferenceID\",\r\n                \"referenceSource\": \"noteScaleReferenceSource\"\r\n            }\r\n        ],\r\n        \"ontologyReference\": {\r\n            \"documentationLinks\": [],\r\n            \"ontologyDbId\": \"6020\",\r\n            \"ontologyName\": \"Text\",\r\n            \"version\": null\r\n        },\r\n        \"scaleDbId\": \"6020\",\r\n        \"scaleName\": \"Text\",\r\n        \"validValues\": {\r\n            \"categories\": null,\r\n            \"max\": null,\r\n            \"min\": null\r\n        }\r\n    },\r\n    \"scientist\": null,\r\n    \"status\": null,\r\n    \"submissionTimestamp\": null,\r\n    \"synonyms\": [],\r\n    \"studyDbIds\": [\r\n        \"{{createdStudyDbId1}}\"\r\n    ]\r\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/variables/9999999",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"variables",
										"9999999"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						},
						{
							"name": "Verify response code and details when entered invalid observationVariableId in request body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Check status messageType\", function () {\r",
											"    pm.expect(jsonData.metadata.status[0].messageType).to.eql(\"ERROR\");\r",
											"});\r",
											"pm.test(\"Check status message\", function () {\r",
											"    pm.expect(jsonData.metadata.status[0].message).to.eql(\"ERROR1 ObservationVariableDbId parameter and VariableDTO.observationVariableDbId should be equal.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"additionalInfo\": {},\r\n    \"commonCropName\": \"maize\",\r\n    \"contextOfUse\": [\r\n        \"PLOT\"\r\n    ],\r\n    \"defaultValue\": \"\",\r\n    \"documentationURL\": null,\r\n    \"externalReferences\": [\r\n        {\r\n            \"referenceID\": \"noteReferenceID\",\r\n            \"referenceSource\": \"noteReferenceSource\"\r\n        }\r\n    ],\r\n    \"growthStage\": null,\r\n    \"institution\": null,\r\n    \"language\": null,\r\n    \"observationVariableDbId\": \"9999999\",\r\n    \"observationVariableName\": \"NOTES\",\r\n    \"ontologyDbId\": \"8390\",\r\n    \"ontologyName\": \"NOTES\",\r\n    \"ontologyReference\": null,\r\n    \"trait\": {\r\n        \"additionalInfo\": {},\r\n        \"alternativeAbbreviations\": [],\r\n        \"attribute\": null,\r\n        \"entity\": null,\r\n        \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"noteTraitReferenceID\",\r\n                \"referenceSource\": \"noteTraitReferenceSource\"\r\n            }\r\n        ],\r\n        \"mainAbbreviation\": null,\r\n        \"traitClass\": \"General\",\r\n        \"traitDescription\": \"Comment\",\r\n        \"name\": \"Comment\",\r\n        \"status\": \"Active\",\r\n        \"synonyms\": [],\r\n        \"traitDbId\": \"2065\",\r\n        \"traitName\": \"Comment\",\r\n        \"ontologyReference\": {\r\n            \"documentationLinks\": [],\r\n            \"ontologyDbId\": \"null\",\r\n            \"ontologyName\": \"Comment\",\r\n            \"version\": null\r\n        }\r\n    },\r\n    \"method\": {\r\n        \"additionalInfo\": {},\r\n        \"bibliographicalReference\": null,\r\n        \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"noteMethodReferenceID\",\r\n                \"referenceSource\": \"noteMethodReferenceSource\"\r\n            }\r\n        ],\r\n        \"methodClass\": null,\r\n        \"description\": \"Value recorded after observation\",\r\n        \"formula\": \"null\",\r\n        \"methodDbId\": \"4110\",\r\n        \"methodName\": \"Observed\",\r\n        \"ontologyReferenceObject\": {\r\n            \"documentationLinks\": [],\r\n            \"ontologyDbId\": \"4110\",\r\n            \"ontologyName\": \"Observed\",\r\n            \"version\": null\r\n        },\r\n        \"ontologyReference\": {\r\n            \"documentationLinks\": [],\r\n            \"ontologyDbId\": \"4110\",\r\n            \"ontologyName\": \"Observed\",\r\n            \"version\": null\r\n        }\r\n    },\r\n    \"scale\": {\r\n        \"additionalInfo\": {},\r\n        \"dataType\": \"Text\",\r\n        \"decimalPlaces\": null,\r\n        \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"noteScaleReferenceID\",\r\n                \"referenceSource\": \"noteScaleReferenceSource\"\r\n            }\r\n        ],\r\n        \"ontologyReference\": {\r\n            \"documentationLinks\": [],\r\n            \"ontologyDbId\": \"6020\",\r\n            \"ontologyName\": \"Text\",\r\n            \"version\": null\r\n        },\r\n        \"scaleDbId\": \"6020\",\r\n        \"scaleName\": \"Text\",\r\n        \"validValues\": {\r\n            \"categories\": null,\r\n            \"max\": null,\r\n            \"min\": null\r\n        }\r\n    },\r\n    \"scientist\": null,\r\n    \"status\": null,\r\n    \"submissionTimestamp\": null,\r\n    \"synonyms\": [],\r\n    \"studyDbIds\": [\r\n        \"{{createdStudyDbId1}}\"\r\n    ]\r\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/variables/8390",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"variables",
										"8390"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						},
						{
							"name": "Verify response code and details when entered invalid observationVariableId both in path and request body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Check status messageType\", function () {\r",
											"    pm.expect(jsonData.metadata.status[0].messageType).to.eql(\"ERROR\");\r",
											"});\r",
											"pm.test(\"Check status message\", function () {\r",
											"    pm.expect(jsonData.metadata.status[0].message).to.eql(\"ERROR1 ObservationVariableDbId is invalid.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"additionalInfo\": {},\r\n    \"commonCropName\": \"maize\",\r\n    \"contextOfUse\": [\r\n        \"PLOT\"\r\n    ],\r\n    \"defaultValue\": \"\",\r\n    \"documentationURL\": null,\r\n    \"externalReferences\": [\r\n        {\r\n            \"referenceID\": \"noteReferenceID\",\r\n            \"referenceSource\": \"noteReferenceSource\"\r\n        }\r\n    ],\r\n    \"growthStage\": null,\r\n    \"institution\": null,\r\n    \"language\": null,\r\n    \"observationVariableDbId\": \"9999999\",\r\n    \"observationVariableName\": \"NOTES\",\r\n    \"ontologyDbId\": \"8390\",\r\n    \"ontologyName\": \"NOTES\",\r\n    \"ontologyReference\": null,\r\n    \"trait\": {\r\n        \"additionalInfo\": {},\r\n        \"alternativeAbbreviations\": [],\r\n        \"attribute\": null,\r\n        \"entity\": null,\r\n        \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"noteTraitReferenceID\",\r\n                \"referenceSource\": \"noteTraitReferenceSource\"\r\n            }\r\n        ],\r\n        \"mainAbbreviation\": null,\r\n        \"traitClass\": \"General\",\r\n        \"traitDescription\": \"Comment\",\r\n        \"name\": \"Comment\",\r\n        \"status\": \"Active\",\r\n        \"synonyms\": [],\r\n        \"traitDbId\": \"2065\",\r\n        \"traitName\": \"Comment\",\r\n        \"ontologyReference\": {\r\n            \"documentationLinks\": [],\r\n            \"ontologyDbId\": \"null\",\r\n            \"ontologyName\": \"Comment\",\r\n            \"version\": null\r\n        }\r\n    },\r\n    \"method\": {\r\n        \"additionalInfo\": {},\r\n        \"bibliographicalReference\": null,\r\n        \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"noteMethodReferenceID\",\r\n                \"referenceSource\": \"noteMethodReferenceSource\"\r\n            }\r\n        ],\r\n        \"methodClass\": null,\r\n        \"description\": \"Value recorded after observation\",\r\n        \"formula\": \"null\",\r\n        \"methodDbId\": \"4110\",\r\n        \"methodName\": \"Observed\",\r\n        \"ontologyReferenceObject\": {\r\n            \"documentationLinks\": [],\r\n            \"ontologyDbId\": \"4110\",\r\n            \"ontologyName\": \"Observed\",\r\n            \"version\": null\r\n        },\r\n        \"ontologyReference\": {\r\n            \"documentationLinks\": [],\r\n            \"ontologyDbId\": \"4110\",\r\n            \"ontologyName\": \"Observed\",\r\n            \"version\": null\r\n        }\r\n    },\r\n    \"scale\": {\r\n        \"additionalInfo\": {},\r\n        \"dataType\": \"Text\",\r\n        \"decimalPlaces\": null,\r\n        \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"noteScaleReferenceID\",\r\n                \"referenceSource\": \"noteScaleReferenceSource\"\r\n            }\r\n        ],\r\n        \"ontologyReference\": {\r\n            \"documentationLinks\": [],\r\n            \"ontologyDbId\": \"6020\",\r\n            \"ontologyName\": \"Text\",\r\n            \"version\": null\r\n        },\r\n        \"scaleDbId\": \"6020\",\r\n        \"scaleName\": \"Text\",\r\n        \"validValues\": {\r\n            \"categories\": null,\r\n            \"max\": null,\r\n            \"min\": null\r\n        }\r\n    },\r\n    \"scientist\": null,\r\n    \"status\": null,\r\n    \"submissionTimestamp\": null,\r\n    \"synonyms\": [],\r\n    \"studyDbIds\": [\r\n        \"{{createdStudyDbId1}}\"\r\n    ]\r\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/variables/9999999",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"variables",
										"9999999"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						},
						{
							"name": "Verify response code and details when entered invalid traitDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Check status messageType\", function () {\r",
											"    pm.expect(jsonData.metadata.status[0].messageType).to.eql(\"ERROR\");\r",
											"});\r",
											"pm.test(\"Check status message\", function () {\r",
											"    pm.expect(jsonData.metadata.status[0].message).to.eql(\"ERROR1 No Property with ID 999999 exists.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"additionalInfo\": {},\r\n\t\"commonCropName\": \"testdata\",\r\n\t\"contextOfUse\": [\r\n\t\t\"PLOT\"\r\n\t],\r\n\t\"defaultValue\": \"\",\r\n\t\"documentationURL\": null,\r\n\t\"externalReferences\": null,\r\n\t\"growthStage\": null,\r\n\t\"institution\": null,\r\n\t\"language\": null,\r\n\t\"observationVariableDbId\": \"18060\",\r\n\t\"observationVariableName\": \"Lodging_incidence\",\r\n\t\"ontologyDbId\": \"18060\",\r\n\t\"ontologyName\": \"Lodging_incidence\",\r\n\t\"ontologyReference\": null,\r\n\t\"trait\": {\r\n\t\t\"additionalInfo\": {},\r\n\t\t\"alternativeAbbreviations\": [],\r\n\t\t\"attribute\": null,\r\n\t\t\"entity\": null,\r\n\t\t\"externalReferences\": null,\r\n\t\t\"mainAbbreviation\": null,\r\n\t\t\"traitClass\": \"Agronomic\",\r\n\t\t\"traitDescription\": \"Lodging incidence\",\r\n\t\t\"name\": \"Lodging incidence\",\r\n\t\t\"status\": \"Active\",\r\n\t\t\"synonyms\": [],\r\n\t\t\"traitDbId\": \"999999\",\r\n\t\t\"traitName\": \"Lodging incidence\",\r\n\t\t\"ontologyReference\": {\r\n\t\t\t\"documentationLinks\": [],\r\n\t\t\t\"ontologyDbId\": \"null\",\r\n\t\t\t\"ontologyName\": \"Lodging incidence\",\r\n\t\t\t\"version\": null\r\n\t\t}\r\n\t},\r\n\t\"method\": {\r\n\t\t\"additionalInfo\": {},\r\n\t\t\"bibliographicalReference\": null,\r\n\t\t\"externalReferences\": null,\r\n\t\t\"methodClass\": null,\r\n\t\t\"description\": \"Visual assessment\",\r\n\t\t\"formula\": \"null\",\r\n\t\t\"methodDbId\": \"16030\",\r\n\t\t\"methodName\": \"Visual assessment\",\r\n\t\t\"ontologyReferenceObject\": {\r\n\t\t\t\"documentationLinks\": [],\r\n\t\t\t\"ontologyDbId\": \"16030\",\r\n\t\t\t\"ontologyName\": \"Visual assessment\",\r\n\t\t\t\"version\": null\r\n\t\t},\r\n\t\t\"ontologyReference\": {\r\n\t\t\t\"documentationLinks\": [],\r\n\t\t\t\"ontologyDbId\": \"16030\",\r\n\t\t\t\"ontologyName\": \"Visual assessment\",\r\n\t\t\t\"version\": null\r\n\t\t}\r\n\t},\r\n\t\"scale\": {\r\n\t\t\"additionalInfo\": {},\r\n\t\t\"dataType\": \"Numerical\",\r\n\t\t\"decimalPlaces\": 4,\r\n\t\t\"externalReferences\": null,\r\n\t\t\"ontologyReference\": {\r\n\t\t\t\"documentationLinks\": [],\r\n\t\t\t\"ontologyDbId\": \"17050\",\r\n\t\t\t\"ontologyName\": \"Percent\",\r\n\t\t\t\"version\": null\r\n\t\t},\r\n\t\t\"scaleDbId\": \"17050\",\r\n\t\t\"scaleName\": \"Percent\",\r\n\t\t\"validValues\": {\r\n\t\t\t\"categories\": null,\r\n\t\t\t\"max\": null,\r\n\t\t\t\"min\": null\r\n\t\t}\r\n\t},\r\n\t\"scientist\": null,\r\n\t\"status\": null,\r\n\t\"submissionTimestamp\": null,\r\n\t\"synonyms\": []\r\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/variables/18060",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"variables",
										"18060"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						},
						{
							"name": "Verify response code and details when entered invalid scaleDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Check status messageType\", function () {\r",
											"    pm.expect(jsonData.metadata.status[0].messageType).to.eql(\"ERROR\");\r",
											"});\r",
											"pm.test(\"Check status message\", function () {\r",
											"    pm.expect(jsonData.metadata.status[0].message).to.eql(\"ERROR1 No SCALE with ID 999999 exists.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"additionalInfo\": {},\r\n\t\"commonCropName\": \"testdata\",\r\n\t\"contextOfUse\": [\r\n\t\t\"PLOT\"\r\n\t],\r\n\t\"defaultValue\": \"\",\r\n\t\"documentationURL\": null,\r\n\t\"externalReferences\": null,\r\n\t\"growthStage\": null,\r\n\t\"institution\": null,\r\n\t\"language\": null,\r\n\t\"observationVariableDbId\": \"18060\",\r\n\t\"observationVariableName\": \"Lodging_incidence\",\r\n\t\"ontologyDbId\": \"18060\",\r\n\t\"ontologyName\": \"Lodging_incidence\",\r\n\t\"ontologyReference\": null,\r\n\t\"trait\": {\r\n\t\t\"additionalInfo\": {},\r\n\t\t\"alternativeAbbreviations\": [],\r\n\t\t\"attribute\": null,\r\n\t\t\"entity\": null,\r\n\t\t\"externalReferences\": null,\r\n\t\t\"mainAbbreviation\": null,\r\n\t\t\"traitClass\": \"Agronomic\",\r\n\t\t\"traitDescription\": \"Lodging incidence\",\r\n\t\t\"name\": \"Lodging incidence\",\r\n\t\t\"status\": \"Active\",\r\n\t\t\"synonyms\": [],\r\n\t\t\"traitDbId\": \"15060\",\r\n\t\t\"traitName\": \"Lodging incidence\",\r\n\t\t\"ontologyReference\": {\r\n\t\t\t\"documentationLinks\": [],\r\n\t\t\t\"ontologyDbId\": \"null\",\r\n\t\t\t\"ontologyName\": \"Lodging incidence\",\r\n\t\t\t\"version\": null\r\n\t\t}\r\n\t},\r\n\t\"method\": {\r\n\t\t\"additionalInfo\": {},\r\n\t\t\"bibliographicalReference\": null,\r\n\t\t\"externalReferences\": null,\r\n\t\t\"methodClass\": null,\r\n\t\t\"description\": \"Visual assessment\",\r\n\t\t\"formula\": \"null\",\r\n\t\t\"methodDbId\": \"16030\",\r\n\t\t\"methodName\": \"Visual assessment\",\r\n\t\t\"ontologyReferenceObject\": {\r\n\t\t\t\"documentationLinks\": [],\r\n\t\t\t\"ontologyDbId\": \"16030\",\r\n\t\t\t\"ontologyName\": \"Visual assessment\",\r\n\t\t\t\"version\": null\r\n\t\t},\r\n\t\t\"ontologyReference\": {\r\n\t\t\t\"documentationLinks\": [],\r\n\t\t\t\"ontologyDbId\": \"16030\",\r\n\t\t\t\"ontologyName\": \"Visual assessment\",\r\n\t\t\t\"version\": null\r\n\t\t}\r\n\t},\r\n\t\"scale\": {\r\n\t\t\"additionalInfo\": {},\r\n\t\t\"dataType\": \"Numerical\",\r\n\t\t\"decimalPlaces\": 4,\r\n\t\t\"externalReferences\": null,\r\n\t\t\"ontologyReference\": {\r\n\t\t\t\"documentationLinks\": [],\r\n\t\t\t\"ontologyDbId\": \"17050\",\r\n\t\t\t\"ontologyName\": \"Percent\",\r\n\t\t\t\"version\": null\r\n\t\t},\r\n\t\t\"scaleDbId\": \"999999\",\r\n\t\t\"scaleName\": \"Percent\",\r\n\t\t\"validValues\": {\r\n\t\t\t\"categories\": null,\r\n\t\t\t\"max\": null,\r\n\t\t\t\"min\": null\r\n\t\t}\r\n\t},\r\n\t\"scientist\": null,\r\n\t\"status\": null,\r\n\t\"submissionTimestamp\": null,\r\n\t\"synonyms\": []\r\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/variables/18060",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"variables",
										"18060"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						},
						{
							"name": "Verify response code and details when entered invalid methodDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Check status messageType\", function () {\r",
											"    pm.expect(jsonData.metadata.status[0].messageType).to.eql(\"ERROR\");\r",
											"});\r",
											"pm.test(\"Check status message\", function () {\r",
											"    pm.expect(jsonData.metadata.status[0].message).to.eql(\"ERROR1 No Method with ID 999999 exists.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"additionalInfo\": {},\r\n\t\"commonCropName\": \"testdata\",\r\n\t\"contextOfUse\": [\r\n\t\t\"PLOT\"\r\n\t],\r\n\t\"defaultValue\": \"\",\r\n\t\"documentationURL\": null,\r\n\t\"externalReferences\": null,\r\n\t\"growthStage\": null,\r\n\t\"institution\": null,\r\n\t\"language\": null,\r\n\t\"observationVariableDbId\": \"18060\",\r\n\t\"observationVariableName\": \"Lodging_incidence\",\r\n\t\"ontologyDbId\": \"18060\",\r\n\t\"ontologyName\": \"Lodging_incidence\",\r\n\t\"ontologyReference\": null,\r\n\t\"trait\": {\r\n\t\t\"additionalInfo\": {},\r\n\t\t\"alternativeAbbreviations\": [],\r\n\t\t\"attribute\": null,\r\n\t\t\"entity\": null,\r\n\t\t\"externalReferences\": null,\r\n\t\t\"mainAbbreviation\": null,\r\n\t\t\"traitClass\": \"Agronomic\",\r\n\t\t\"traitDescription\": \"Lodging incidence\",\r\n\t\t\"name\": \"Lodging incidence\",\r\n\t\t\"status\": \"Active\",\r\n\t\t\"synonyms\": [],\r\n\t\t\"traitDbId\": \"15060\",\r\n\t\t\"traitName\": \"Lodging incidence\",\r\n\t\t\"ontologyReference\": {\r\n\t\t\t\"documentationLinks\": [],\r\n\t\t\t\"ontologyDbId\": \"null\",\r\n\t\t\t\"ontologyName\": \"Lodging incidence\",\r\n\t\t\t\"version\": null\r\n\t\t}\r\n\t},\r\n\t\"method\": {\r\n\t\t\"additionalInfo\": {},\r\n\t\t\"bibliographicalReference\": null,\r\n\t\t\"externalReferences\": null,\r\n\t\t\"methodClass\": null,\r\n\t\t\"description\": \"Visual assessment\",\r\n\t\t\"formula\": \"null\",\r\n\t\t\"methodDbId\": \"999999\",\r\n\t\t\"methodName\": \"Visual assessment\",\r\n\t\t\"ontologyReferenceObject\": {\r\n\t\t\t\"documentationLinks\": [],\r\n\t\t\t\"ontologyDbId\": \"16030\",\r\n\t\t\t\"ontologyName\": \"Visual assessment\",\r\n\t\t\t\"version\": null\r\n\t\t},\r\n\t\t\"ontologyReference\": {\r\n\t\t\t\"documentationLinks\": [],\r\n\t\t\t\"ontologyDbId\": \"16030\",\r\n\t\t\t\"ontologyName\": \"Visual assessment\",\r\n\t\t\t\"version\": null\r\n\t\t}\r\n\t},\r\n\t\"scale\": {\r\n\t\t\"additionalInfo\": {},\r\n\t\t\"dataType\": \"Numerical\",\r\n\t\t\"decimalPlaces\": 4,\r\n\t\t\"externalReferences\": null,\r\n\t\t\"ontologyReference\": {\r\n\t\t\t\"documentationLinks\": [],\r\n\t\t\t\"ontologyDbId\": \"17050\",\r\n\t\t\t\"ontologyName\": \"Percent\",\r\n\t\t\t\"version\": null\r\n\t\t},\r\n\t\t\"scaleDbId\": \"17050\",\r\n\t\t\"scaleName\": \"Percent\",\r\n\t\t\"validValues\": {\r\n\t\t\t\"categories\": null,\r\n\t\t\t\"max\": null,\r\n\t\t\t\"min\": null\r\n\t\t}\r\n\t},\r\n\t\"scientist\": null,\r\n\t\"status\": null,\r\n\t\"submissionTimestamp\": null,\r\n\t\"synonyms\": []\r\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/variables/18060",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"variables",
										"18060"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						},
						{
							"name": "Verify response code and details when entered invalid studyDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Check status messageType\", function () {\r",
											"    pm.expect(jsonData.metadata.status[0].messageType).to.eql(\"ERROR\");\r",
											"});\r",
											"pm.test(\"Check status message\", function () {\r",
											"    pm.expect(jsonData.metadata.status[0].message).to.eql(\"ERROR1 The following studyDbIds are invalid: 9999999.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"additionalInfo\": {},\r\n    \"commonCropName\": \"maize\",\r\n    \"contextOfUse\": [\r\n        \"PLOT\"\r\n    ],\r\n    \"defaultValue\": \"\",\r\n    \"documentationURL\": null,\r\n    \"externalReferences\": [\r\n        {\r\n            \"referenceID\": \"noteReferenceID\",\r\n            \"referenceSource\": \"noteReferenceSource\"\r\n        }\r\n    ],\r\n    \"growthStage\": null,\r\n    \"institution\": null,\r\n    \"language\": null,\r\n    \"observationVariableDbId\": \"8390\",\r\n    \"observationVariableName\": \"NOTES\",\r\n    \"ontologyDbId\": \"8390\",\r\n    \"ontologyName\": \"NOTES\",\r\n    \"ontologyReference\": null,\r\n    \"trait\": {\r\n        \"additionalInfo\": {},\r\n        \"alternativeAbbreviations\": [],\r\n        \"attribute\": null,\r\n        \"entity\": null,\r\n        \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"noteTraitReferenceID\",\r\n                \"referenceSource\": \"noteTraitReferenceSource\"\r\n            }\r\n        ],\r\n        \"mainAbbreviation\": null,\r\n        \"traitClass\": \"General\",\r\n        \"traitDescription\": \"Comment\",\r\n        \"name\": \"Comment\",\r\n        \"status\": \"Active\",\r\n        \"synonyms\": [],\r\n        \"traitDbId\": \"2065\",\r\n        \"traitName\": \"Comment\",\r\n        \"ontologyReference\": {\r\n            \"documentationLinks\": [],\r\n            \"ontologyDbId\": \"null\",\r\n            \"ontologyName\": \"Comment\",\r\n            \"version\": null\r\n        }\r\n    },\r\n    \"method\": {\r\n        \"additionalInfo\": {},\r\n        \"bibliographicalReference\": null,\r\n        \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"noteMethodReferenceID\",\r\n                \"referenceSource\": \"noteMethodReferenceSource\"\r\n            }\r\n        ],\r\n        \"methodClass\": null,\r\n        \"description\": \"Value recorded after observation\",\r\n        \"formula\": \"null\",\r\n        \"methodDbId\": \"4110\",\r\n        \"methodName\": \"Observed\",\r\n        \"ontologyReferenceObject\": {\r\n            \"documentationLinks\": [],\r\n            \"ontologyDbId\": \"4110\",\r\n            \"ontologyName\": \"Observed\",\r\n            \"version\": null\r\n        },\r\n        \"ontologyReference\": {\r\n            \"documentationLinks\": [],\r\n            \"ontologyDbId\": \"4110\",\r\n            \"ontologyName\": \"Observed\",\r\n            \"version\": null\r\n        }\r\n    },\r\n    \"scale\": {\r\n        \"additionalInfo\": {},\r\n        \"dataType\": \"Text\",\r\n        \"decimalPlaces\": null,\r\n        \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"noteScaleReferenceID\",\r\n                \"referenceSource\": \"noteScaleReferenceSource\"\r\n            }\r\n        ],\r\n        \"ontologyReference\": {\r\n            \"documentationLinks\": [],\r\n            \"ontologyDbId\": \"6020\",\r\n            \"ontologyName\": \"Text\",\r\n            \"version\": null\r\n        },\r\n        \"scaleDbId\": \"6020\",\r\n        \"scaleName\": \"Text\",\r\n        \"validValues\": {\r\n            \"categories\": null,\r\n            \"max\": null,\r\n            \"min\": null\r\n        }\r\n    },\r\n    \"scientist\": null,\r\n    \"status\": null,\r\n    \"submissionTimestamp\": null,\r\n    \"synonyms\": [],\r\n    \"studyDbIds\": [\r\n        \"9999999\"\r\n    ]\r\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/variables/8390",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"variables",
										"8390"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						}
					]
				},
				{
					"name": "POST ​/{crop}​/brapi​/v2​/observations",
					"item": [
						{
							"name": "Verify response code and body when entered complete set of inputs",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Check status messageType\", function () {\r",
											"    pm.expect(jsonData.metadata.status[0].messageType).to.eql(\"INFO\");\r",
											"});\r",
											"pm.test(\"Check status message\", function () {\r",
											"    pm.expect(jsonData.metadata.status[0].message).to.eql(\"4 out of 4 observations created successfully.\");\r",
											"});\r",
											"pm.test(\"Check datafiles\", function () {\r",
											"    pm.expect(jsonData.metadata.datafiles).to.eql([]);\r",
											"});\r",
											"\r",
											"//Check result\r",
											"var index = 0;\r",
											"\r",
											"pm.test(\"Check additionalInfo\", function () {\r",
											"    pm.expect(jsonData.result.data[index].additionalInfo).to.eql(null);\r",
											"});\r",
											"pm.test(\"Check collector\", function () {\r",
											"    pm.expect(jsonData.result.data[index].collector).to.eql(null);\r",
											"});\r",
											"\r",
											"pm.test(\"Check externalReferences referenceID\", function () {\r",
											"    pm.expect(jsonData.result.data[index].externalReferences[0].referenceID).to.eql(\"NoteRefID\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check externalReferences referenceSource\", function () {\r",
											"    pm.expect(jsonData.result.data[index].externalReferences[0].referenceSource).to.eql(\"NoteRefSource\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check germplasmDbId\", function () {\r",
											"    pm.expect(jsonData.result.data[index].germplasmDbId).to.eql(pm.environment.get(\"germplasm_uuid\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Check germplasmName\", function () {\r",
											"    pm.expect(jsonData.result.data[index].germplasmName).to.eql(\"CML1\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check observationDbId\", function () {\r",
											"    pm.expect(jsonData.result.data[index].observationDbId).to.not.be.null;\r",
											"});\r",
											"\r",
											"pm.test(\"Check observationTimeStamp\", function () {\r",
											"    var moment = require('moment');\r",
											"    pm.expect(jsonData.result.data[index].observationTimeStamp).to.eql(moment().format(\"YYYY-MM-DD\")+\"T00:00:00.000+08:00\");\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Check observationUnitDbId\", function () {\r",
											"    pm.expect(jsonData.result.data[index].observationUnitDbId).to.eql(pm.environment.get(\"createdObservationUnitDbId\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Check observationUnitName\", function () {\r",
											"    pm.expect(jsonData.result.data[index].observationUnitName).to.eql(\"\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check observationVariableDbId\", function () {\r",
											"    pm.expect(jsonData.result.data[index].observationVariableDbId).to.eql(\"8390\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check observationVariableName\", function () {\r",
											"    pm.expect(jsonData.result.data[index].observationVariableName).to.eql(\"NOTES\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check season season\", function () {\r",
											"    pm.expect(jsonData.result.data[index].season.season).to.eql(\"Dry season\");\r",
											"});\r",
											"pm.test(\"Check season seasonDbId\", function () {\r",
											"    pm.expect(jsonData.result.data[index].season.seasonDbId).to.eql(\"10290\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check studyDbId\", function () {\r",
											"    pm.expect(jsonData.result.data[index].studyDbId).to.eql(\"116\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check uploadedBy\", function () {\r",
											"    pm.expect(jsonData.result.data[index].uploadedBy).to.eql(null);\r",
											"});\r",
											"\r",
											"pm.test(\"Check value\", function () {\r",
											"    pm.expect(jsonData.result.data[index].value).to.eql(\"note2\");\r",
											"});\r",
											"\r",
											"pm.environment.unset(\"createdObservationDbId1\");\r",
											"pm.environment.set(\"createdObservationDbId1\", jsonData.result.data[0].observationDbId);\r",
											"\r",
											"pm.environment.unset(\"createdObservationDbId2\");\r",
											"pm.environment.set(\"createdObservationDbId2\", jsonData.result.data[1].observationDbId);\r",
											"\r",
											"pm.environment.unset(\"createdObservationDbId3\");\r",
											"pm.environment.set(\"createdObservationDbId3\", jsonData.result.data[2].observationDbId);\r",
											"\r",
											"pm.environment.unset(\"createdObservationDbId4\");\r",
											"pm.environment.set(\"createdObservationDbId4\", jsonData.result.data[3].observationDbId);\r",
											"\r",
											"pm.environment.unset(\"createdObservationTimestamp1\");\r",
											"pm.environment.set(\"createdObservationTimestamp1\", jsonData.result.data[0].observationTimeStamp);\r",
											"pm.environment.unset(\"createdObservationTimestamp2\");\r",
											"pm.environment.set(\"createdObservationTimestamp2\", jsonData.result.data[1].observationTimeStamp);\r",
											"pm.environment.unset(\"createdObservationTimestamp3\");\r",
											"pm.environment.set(\"createdObservationTimestamp3\", jsonData.result.data[2].observationTimeStamp);\r",
											"pm.environment.unset(\"createdObservationTimestamp4\");\r",
											"pm.environment.set(\"createdObservationTimestamp4\", jsonData.result.data[2].observationTimeStamp);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n    {\r\n        \"additionalInfo\": null,\r\n        \"collector\": null,\r\n        \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"NoteRefID\",\r\n                \"referenceSource\": \"NoteRefSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"{{germplasm_uuid}}\",\r\n        \"germplasmName\": \"CML1\",\r\n        \"observationDbId\": \"117006\",\r\n        \"observationTimeStamp\": \"2021-10-20T00:00:00.000+08:00\",\r\n        \"observationUnitDbId\": \"{{createdObservationUnitDbId}}\",\r\n        \"observationUnitName\": \"\",\r\n        \"observationVariableDbId\": \"8390\",\r\n        \"observationVariableName\": \"NOTES\",\r\n        \"season\": {\r\n            \"season\": \"Dry season\",\r\n            \"seasonDbId\": \"10290\"\r\n        },\r\n        \"studyDbId\": \"{{createdStudyDbId1}}\",\r\n        \"uploadedBy\": null,\r\n        \"value\": \"note2\"\r\n    },\r\n    {\r\n        \"additionalInfo\": null,\r\n        \"collector\": null,\r\n        \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"Biomas_yieldRefID\",\r\n                \"referenceSource\": \"Biomas_yieldRefSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"{{germplasm_uuid}}\",\r\n        \"germplasmName\": \"CML1\",\r\n        \"observationDbId\": \"117007\",\r\n        \"observationTimeStamp\": \"2021-10-20T00:00:00.000+08:00\",\r\n        \"observationUnitDbId\": \"{{createdObservationUnitDbId}}\",\r\n        \"observationUnitName\": \"\",\r\n        \"observationVariableDbId\": \"18010\",\r\n        \"observationVariableName\": \"Biomas_yield\",\r\n        \"season\": {\r\n            \"season\": \"Dry season\",\r\n            \"seasonDbId\": \"10290\"\r\n        },\r\n        \"studyDbId\": \"{{createdStudyDbId1}}\",\r\n        \"uploadedBy\": null,\r\n        \"value\": \"456\"\r\n    },\r\n    {\r\n        \"additionalInfo\": null,\r\n        \"collector\": null,\r\n        \"externalReferences\": [\r\n            {\r\n                \"referenceID\": \"DisPressure_0_9RefID\",\r\n                \"referenceSource\": \"DisPressure_0_9RefSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"{{germplasm_uuid}}\",\r\n        \"germplasmName\": \"CML1\",\r\n        \"observationDbId\": \"117008\",\r\n        \"observationTimeStamp\": \"2021-10-20T00:00:00.000+08:00\",\r\n        \"observationUnitDbId\": \"{{createdObservationUnitDbId}}\",\r\n        \"observationUnitName\": \"\",\r\n        \"observationVariableDbId\": \"18050\",\r\n        \"observationVariableName\": \"DisPressure_0_9\",\r\n        \"season\": {\r\n            \"season\": \"Dry season\",\r\n            \"seasonDbId\": \"10290\"\r\n        },\r\n        \"studyDbId\": \"{{createdStudyDbId1}}\",\r\n        \"uploadedBy\": null,\r\n        \"value\": \"7\"\r\n    },\r\n    {\r\n        \"additionalInfo\": null,\r\n        \"collector\": null,\r\n        \"externalReferences\": [\r\n                        {\r\n                \"referenceID\": \"GermiTest_dateRefID\",\r\n                \"referenceSource\": \"GermiTest_dateRefSource\"\r\n            }\r\n        ],\r\n        \"germplasmDbId\": \"{{germplasm_uuid}}\",\r\n        \"germplasmName\": \"CML1\",\r\n        \"observationDbId\": \"117009\",\r\n        \"observationTimeStamp\": \"2021-10-20T00:00:00.000+08:00\",\r\n        \"observationUnitDbId\": \"{{createdObservationUnitDbId}}\",\r\n        \"observationUnitName\": \"\",\r\n        \"observationVariableDbId\": \"8630\",\r\n        \"observationVariableName\": \"GermiTest_date\",\r\n        \"season\": {\r\n            \"season\": \"Dry season\",\r\n            \"seasonDbId\": \"10290\"\r\n        },\r\n        \"studyDbId\": \"{{createdStudyDbId1}}\",\r\n        \"uploadedBy\": null,\r\n        \"value\": \"20211020\"\r\n    }\r\n]"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/observations",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"observations"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered required details only",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Check status messageType\", function () {\r",
											"    pm.expect(jsonData.metadata.status[0].messageType).to.eql(\"INFO\");\r",
											"});\r",
											"pm.test(\"Check status message\", function () {\r",
											"    pm.expect(jsonData.metadata.status[0].message).to.eql(\"3 out of 3 observations created successfully.\");\r",
											"});\r",
											"pm.test(\"Check datafiles\", function () {\r",
											"    pm.expect(jsonData.metadata.datafiles).to.eql([]);\r",
											"});\r",
											"\r",
											"//Check result\r",
											"var index = 0;\r",
											"\r",
											"pm.test(\"Check additionalInfo\", function () {\r",
											"    pm.expect(jsonData.result.data[index].additionalInfo).to.eql(null);\r",
											"});\r",
											"pm.test(\"Check collector\", function () {\r",
											"    pm.expect(jsonData.result.data[index].collector).to.eql(null);\r",
											"});\r",
											"\r",
											"pm.test(\"Check externalReferences\", function () {\r",
											"    pm.expect(jsonData.result.data[index].externalReferences).to.eql(null);\r",
											"});\r",
											"\r",
											"pm.test(\"Check germplasmDbId\", function () {\r",
											"    pm.expect(jsonData.result.data[index].germplasmDbId).to.eql(pm.environment.get(\"germplasm_uuid\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Check germplasmName\", function () {\r",
											"    pm.expect(jsonData.result.data[index].germplasmName).to.eql(\"CML1\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check observationDbId\", function () {\r",
											"    pm.expect(jsonData.result.data[index].observationDbId).to.not.be.null;\r",
											"});\r",
											"\r",
											"pm.test(\"Check observationTimeStamp\", function () {\r",
											"    var moment = require('moment');\r",
											"    pm.expect(jsonData.result.data[index].observationTimeStamp).to.eql(moment().format(\"YYYY-MM-DD\")+\"T00:00:00.000+08:00\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check observationUnitDbId\", function () {\r",
											"    pm.expect(jsonData.result.data[index].observationUnitDbId).to.eql(pm.environment.get(\"createdObservationUnitDbId2\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Check observationUnitName\", function () {\r",
											"    pm.expect(jsonData.result.data[index].observationUnitName).to.eql(\"\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check observationVariableDbId\", function () {\r",
											"    pm.expect(jsonData.result.data[index].observationVariableDbId).to.eql(\"8390\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check observationVariableName\", function () {\r",
											"    pm.expect(jsonData.result.data[index].observationVariableName).to.eql(\"NOTES\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check season season\", function () {\r",
											"    pm.expect(jsonData.result.data[index].season.season).to.eql(\"Dry season\");\r",
											"});\r",
											"pm.test(\"Check season seasonDbId\", function () {\r",
											"    pm.expect(jsonData.result.data[index].season.seasonDbId).to.eql(\"10290\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check studyDbId\", function () {\r",
											"    pm.expect(jsonData.result.data[index].studyDbId).to.eql(\"116\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check uploadedBy\", function () {\r",
											"    pm.expect(jsonData.result.data[index].uploadedBy).to.eql(null);\r",
											"});\r",
											"\r",
											"pm.test(\"Check value\", function () {\r",
											"    pm.expect(jsonData.result.data[index].value).to.eql(\"note1\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.environment.unset(\"createdObservationDbId5\");\r",
											"pm.environment.set(\"createdObservationDbId5\", jsonData.result.data[0].observationDbId);\r",
											"\r",
											"pm.environment.unset(\"createdObservationDbId6\");\r",
											"pm.environment.set(\"createdObservationDbId6\", jsonData.result.data[1].observationDbId);\r",
											"\r",
											"pm.environment.unset(\"createdObservationDbId7\");\r",
											"pm.environment.set(\"createdObservationDbId7\", jsonData.result.data[2].observationDbId);\r",
											"\r",
											"pm.environment.unset(\"createdObservationTimestamp5\");\r",
											"pm.environment.set(\"createdObservationTimestamp5\", jsonData.result.data[0].observationTimeStamp);\r",
											"pm.environment.unset(\"createdObservationTimestamp6\");\r",
											"pm.environment.set(\"createdObservationTimestamp6\", jsonData.result.data[1].observationTimeStamp);\r",
											"pm.environment.unset(\"createdObservationTimestamp7\");\r",
											"pm.environment.set(\"createdObservationTimestamp7\", jsonData.result.data[2].observationTimeStamp);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n\t{\r\n\t\t\"germplasmDbId\": \"{{germplasm_uuid}}\",\r\n\t\t\"observationUnitDbId\": \"{{createdObservationUnitDbId2}}\",\r\n\t\t\"observationVariableDbId\": \"8390\",\r\n\t\t\"studyDbId\": \"{{createdStudyDbId1}}\",\r\n\t\t\"value\": \"note1\"\r\n\t},\r\n\t{\r\n\t\t\"germplasmDbId\": \"{{germplasm_uuid}}\",\r\n\t\t\"observationUnitDbId\": \"{{createdObservationUnitDbId2}}\",\r\n\t\t\"observationVariableDbId\": \"18010\",\r\n\t\t\"studyDbId\": \"{{createdStudyDbId1}}\",\r\n\t\t\"value\": \"123\"\r\n\t},\r\n\t{\r\n\t\t\"germplasmDbId\": \"{{germplasm_uuid}}\",\r\n\t\t\"observationUnitDbId\": \"{{createdObservationUnitDbId2}}\",\r\n\t\t\"observationVariableDbId\": \"8630\",\r\n\t\t\"studyDbId\": \"{{createdStudyDbId1}}\",\r\n\t\t\"value\": \"20211019\"\r\n\t}\r\n]"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/observations",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"observations"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid germplasmDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Check status messageType\", function () {\r",
											"    pm.expect(jsonData.metadata.status[0].messageType).to.eql(\"INFO\");\r",
											"});\r",
											"pm.test(\"Check status message\", function () {\r",
											"    pm.expect(jsonData.metadata.status[0].message).to.eql(\"0 out of 1 observations created successfully.\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check status messageType\", function () {\r",
											"    pm.expect(jsonData.metadata.status[1].messageType).to.eql(\"ERROR\");\r",
											"});\r",
											"pm.test(\"Check status message\", function () {\r",
											"    pm.expect(jsonData.metadata.status[1].message).to.eql(\"ERROR1 Observation at position 1 is invalid because the germplasmDbId is invalid.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n\t{\r\n\t\t\"germplasmDbId\": \"invalid\",\r\n\t\t\"observationUnitDbId\": \"{{createdObservationUnitDbId}}\",\r\n\t\t\"observationVariableDbId\": \"8390\",\r\n\t\t\"observationVariableName\": \"NOTES\",\r\n\t\t\"studyDbId\": \"{{createdStudyDbId1}}\",\r\n\t\t\"value\": \"note1\"\r\n\t}\r\n]"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/observations",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"observations"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid observationUnitDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Check status messageType\", function () {\r",
											"    pm.expect(jsonData.metadata.status[0].messageType).to.eql(\"INFO\");\r",
											"});\r",
											"pm.test(\"Check status message\", function () {\r",
											"    pm.expect(jsonData.metadata.status[0].message).to.eql(\"0 out of 1 observations created successfully.\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check status messageType\", function () {\r",
											"    pm.expect(jsonData.metadata.status[1].messageType).to.eql(\"ERROR\");\r",
											"});\r",
											"pm.test(\"Check status message\", function () {\r",
											"    pm.expect(jsonData.metadata.status[1].message).to.eql(\"ERROR1 Observation at position 1 is invalid because the observationUnitDbId is invalid.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n\t{\r\n\t\t\"germplasmDbId\": \"{{germplasm_uuid}}\",\r\n\t\t\"observationUnitDbId\": \"invalid\",\r\n\t\t\"observationVariableDbId\": \"8390\",\r\n\t\t\"observationVariableName\": \"NOTES\",\r\n\t\t\"studyDbId\": \"{{createdStudyDbId1}}\",\r\n\t\t\"value\": \"note1\"\r\n\t}\r\n]"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/observations",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"observations"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid observationVariableDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Check status messageType\", function () {\r",
											"    pm.expect(jsonData.metadata.status[0].messageType).to.eql(\"INFO\");\r",
											"});\r",
											"pm.test(\"Check status message\", function () {\r",
											"    pm.expect(jsonData.metadata.status[0].message).to.eql(\"0 out of 1 observations created successfully.\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check status messageType\", function () {\r",
											"    pm.expect(jsonData.metadata.status[1].messageType).to.eql(\"ERROR\");\r",
											"});\r",
											"pm.test(\"Check status message\", function () {\r",
											"    pm.expect(jsonData.metadata.status[1].message).to.eql(\"ERROR1 Observation at position 1 is invalid because the observationVariableDbId is invalid.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n\t{\r\n\t\t\"germplasmDbId\": \"{{germplasm_uuid}}\",\r\n\t\t\"observationUnitDbId\": \"{{createdObservationUnitDbId}}\",\r\n\t\t\"observationVariableDbId\": \"invalid\",\r\n\t\t\"observationVariableName\": \"NOTES\",\r\n\t\t\"studyDbId\": \"{{createdStudyDbId1}}\",\r\n\t\t\"value\": \"note1\"\r\n\t}\r\n]"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/observations",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"observations"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid studyDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Check status messageType\", function () {\r",
											"    pm.expect(jsonData.metadata.status[0].messageType).to.eql(\"INFO\");\r",
											"});\r",
											"pm.test(\"Check status message\", function () {\r",
											"    pm.expect(jsonData.metadata.status[0].message).to.eql(\"0 out of 1 observations created successfully.\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check status messageType\", function () {\r",
											"    pm.expect(jsonData.metadata.status[1].messageType).to.eql(\"ERROR\");\r",
											"});\r",
											"pm.test(\"Check status message\", function () {\r",
											"    pm.expect(jsonData.metadata.status[1].message).to.eql(\"ERROR1 Observation at position 1 is invalid because the studyDbId is invalid.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n\t{\r\n\t\t\"germplasmDbId\": \"{{germplasm_uuid}}\",\r\n\t\t\"observationUnitDbId\": \"{{createdObservationUnitDbId}}\",\r\n\t\t\"observationVariableDbId\": \"8390\",\r\n\t\t\"observationVariableName\": \"NOTES\",\r\n\t\t\"studyDbId\": \"invalid\",\r\n\t\t\"value\": \"note1\"\r\n\t}\r\n]"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/observations",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"observations"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid value for a numerical variable",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Check status messageType\", function () {\r",
											"    pm.expect(jsonData.metadata.status[0].messageType).to.eql(\"INFO\");\r",
											"});\r",
											"pm.test(\"Check status message\", function () {\r",
											"    pm.expect(jsonData.metadata.status[0].message).to.eql(\"0 out of 1 observations created successfully.\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check status messageType\", function () {\r",
											"    pm.expect(jsonData.metadata.status[1].messageType).to.eql(\"ERROR\");\r",
											"});\r",
											"pm.test(\"Check status message\", function () {\r",
											"    pm.expect(jsonData.metadata.status[1].message).to.eql(\"ERROR1 Observation at position 1 is invalid because the value must be numeric for Numerical observation variable scale datatype.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n\t{\r\n\t\t\"germplasmDbId\": \"{{germplasm_uuid}}\",\r\n\t\t\"observationUnitDbId\": \"{{createdObservationUnitDbId}}\",\r\n\t\t\"observationVariableDbId\": \"18010\",\r\n\t\t\"observationVariableName\": \"Biomas_yield\",\r\n\t\t\"studyDbId\": \"{{createdStudyDbId1}}\",\r\n\t\t\"value\": \"invalid\"\r\n\t}\r\n]"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/observations",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"observations"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid value for a cateogorical variable",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Check status messageType\", function () {\r",
											"    pm.expect(jsonData.metadata.status[0].messageType).to.eql(\"INFO\");\r",
											"});\r",
											"pm.test(\"Check status message\", function () {\r",
											"    pm.expect(jsonData.metadata.status[0].message).to.eql(\"1 out of 1 observations created successfully.\");\r",
											"});\r",
											"pm.test(\"Check datafiles\", function () {\r",
											"    pm.expect(jsonData.metadata.datafiles).to.eql([]);\r",
											"});\r",
											"\r",
											"//Check result\r",
											"var index = 0;\r",
											"\r",
											"pm.test(\"Check additionalInfo\", function () {\r",
											"    pm.expect(jsonData.result.data[index].additionalInfo).to.eql(null);\r",
											"});\r",
											"pm.test(\"Check collector\", function () {\r",
											"    pm.expect(jsonData.result.data[index].collector).to.eql(null);\r",
											"});\r",
											"\r",
											"pm.test(\"Check externalReferences\", function () {\r",
											"    pm.expect(jsonData.result.data[index].externalReferences).to.eql(null);\r",
											"});\r",
											"\r",
											"pm.test(\"Check germplasmDbId\", function () {\r",
											"    pm.expect(jsonData.result.data[index].germplasmDbId).to.eql(pm.environment.get(\"germplasm_uuid\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Check germplasmName\", function () {\r",
											"    pm.expect(jsonData.result.data[index].germplasmName).to.eql(\"CML1\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check observationDbId\", function () {\r",
											"    pm.expect(jsonData.result.data[index].observationDbId).to.not.be.null;\r",
											"});\r",
											"\r",
											"pm.test(\"Check observationTimeStamp\", function () {\r",
											"    var moment = require('moment');\r",
											"    pm.expect(jsonData.result.data[index].observationTimeStamp).to.eql(moment().format(\"YYYY-MM-DD\")+\"T00:00:00.000+08:00\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check observationUnitDbId\", function () {\r",
											"    pm.expect(jsonData.result.data[index].observationUnitDbId).to.eql(pm.environment.get(\"createdObservationUnitDbId2\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Check observationUnitName\", function () {\r",
											"    pm.expect(jsonData.result.data[index].observationUnitName).to.eql(\"\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check observationVariableDbId\", function () {\r",
											"    pm.expect(jsonData.result.data[index].observationVariableDbId).to.eql(\"18050\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check observationVariableName\", function () {\r",
											"    pm.expect(jsonData.result.data[index].observationVariableName).to.eql(\"DisPressure_0_9\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check season season\", function () {\r",
											"    pm.expect(jsonData.result.data[index].season.season).to.eql(\"Dry season\");\r",
											"});\r",
											"pm.test(\"Check season seasonDbId\", function () {\r",
											"    pm.expect(jsonData.result.data[index].season.seasonDbId).to.eql(\"10290\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check studyDbId\", function () {\r",
											"    pm.expect(jsonData.result.data[index].studyDbId).to.eql(\"116\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check uploadedBy\", function () {\r",
											"    pm.expect(jsonData.result.data[index].uploadedBy).to.eql(null);\r",
											"});\r",
											"\r",
											"pm.test(\"Check value\", function () {\r",
											"    pm.expect(jsonData.result.data[index].value).to.eql(\"invalid\");\r",
											"});\r",
											"\r",
											"pm.environment.unset(\"createdObservationDbId8\");\r",
											"pm.environment.set(\"createdObservationDbId8\", jsonData.result.data[0].observationDbId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n   \t{\r\n\t\t\"germplasmDbId\": \"{{germplasm_uuid}}\",\r\n\t\t\"observationUnitDbId\": \"{{createdObservationUnitDbId2}}\",\r\n\t\t\"observationVariableDbId\": \"18050\",\r\n\t\t\"observationVariableName\": \"DisPressure_0_9\",\r\n\t\t\"studyDbId\": \"{{createdStudyDbId1}}\",\r\n\t\t\"value\": \"invalid\"\r\n\t}\r\n]"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/observations",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"observations"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid value for a date variable",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Check status messageType\", function () {\r",
											"    pm.expect(jsonData.metadata.status[0].messageType).to.eql(\"INFO\");\r",
											"});\r",
											"pm.test(\"Check status message\", function () {\r",
											"    pm.expect(jsonData.metadata.status[0].message).to.eql(\"0 out of 1 observations created successfully.\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check status messageType\", function () {\r",
											"    pm.expect(jsonData.metadata.status[1].messageType).to.eql(\"ERROR\");\r",
											"});\r",
											"pm.test(\"Check status message\", function () {\r",
											"    pm.expect(jsonData.metadata.status[1].message).to.eql(\"ERROR1 Observation at position 1 is invalid because the value must be in yyyyMMdd format for date observation variable scale datatype.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n    {\r\n        \"germplasmDbId\": \"{{germplasm_uuid}}\",\r\n        \"observationUnitDbId\": \"{{createdObservationUnitDbId}}\",\r\n        \"observationVariableDbId\": \"8630\",\r\n        \"observationVariableName\": \"GermiTest_date\",\r\n        \"studyDbId\": \"{{createdStudyDbId1}}\",\r\n        \"value\": \"invalid\"\r\n    }\r\n]"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/observations",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"observations"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered value that exceeds maxlength for a character/text variable",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Check status messageType\", function () {\r",
											"    pm.expect(jsonData.metadata.status[0].messageType).to.eql(\"INFO\");\r",
											"});\r",
											"pm.test(\"Check status message\", function () {\r",
											"    pm.expect(jsonData.metadata.status[0].message).to.eql(\"0 out of 1 observations created successfully.\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check status messageType\", function () {\r",
											"    pm.expect(jsonData.metadata.status[1].messageType).to.eql(\"ERROR\");\r",
											"});\r",
											"pm.test(\"Check status message\", function () {\r",
											"    pm.expect(jsonData.metadata.status[1].message).to.eql(\"ERROR1 Observation at position 1 is invalid because the value must not exceed length of 255.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n    {\r\n        \"germplasmDbId\": \"{{germplasm_uuid}}\",\r\n        \"observationUnitDbId\": \"{{createdObservationUnitDbId}}\",\r\n        \"observationVariableDbId\": \"8390\",\r\n        \"observationVariableName\": \"NOTES\",\r\n        \"studyDbId\": \"{{createdStudyDbId1}}\",\r\n        \"value\": \"Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Donec quam felis, ultricies nec, pellentesque eu, pretium quis,.\"\r\n    }\r\n]"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/observations",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"observations"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						}
					]
				},
				{
					"name": "GET ​/{crop}​/brapi​/v2​/observations",
					"item": [
						{
							"name": "Verify response code and body when entered valid crop name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"",
											"",
											"//Check metadata",
											"pm.test(\"Check current page\", function () {",
											"    pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											"});",
											"pm.test(\"Check pageSize\", function () {",
											"    pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											"});",
											"pm.test(\"Check totalCount\", function () {",
											"    pm.expect(jsonData.metadata.pagination.totalCount).to.eql(1693);",
											"})",
											"",
											"pm.test(\"Check status\", function () {",
											"    pm.expect(jsonData.metadata.status).to.eql([]);",
											"})",
											"pm.test(\"Check datafiles\", function () {",
											"    pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"})",
											"",
											"//Check result",
											"var index = 0;",
											"",
											"pm.test(\"Check additionalInfo\", function () {",
											"    pm.expect(jsonData.result.data[index].additionalInfo).to.eql(null);",
											"});",
											"pm.test(\"Check collector\", function () {",
											"    pm.expect(jsonData.result.data[index].collector).to.eql(null);",
											"});",
											"",
											"pm.test(\"Check externalReferences\", function () {",
											"    pm.expect(jsonData.result.data[index].externalReferences).to.eql(null);",
											"});",
											"",
											"pm.test(\"Check germplasmDbId\", function () {",
											"    pm.expect(jsonData.result.data[index].germplasmDbId).to.eql(\"PKWDG47fa785e\");",
											"});",
											"",
											"pm.test(\"Check germplasmName\", function () {",
											"    pm.expect(jsonData.result.data[index].germplasmName).to.eql(\"CML4\");",
											"});",
											"",
											"pm.test(\"Check observationDbId\", function () {",
											"    pm.expect(jsonData.result.data[index].observationDbId).to.not.be.null;",
											"});",
											"",
											"pm.test(\"Check observationTimeStamp\", function () {",
											"    //TODO: Get current date time",
											"    pm.expect(jsonData.result.data[index].observationTimeStamp).to.eql(\"2018-10-26T00:00:00.000+08:00\");",
											"});",
											"",
											"pm.test(\"Check observationUnitDbId\", function () {",
											"    pm.expect(jsonData.result.data[index].observationUnitDbId).to.eql(\"PKWDPEV6LPs1N\");",
											"});",
											"",
											"pm.test(\"Check observationUnitName\", function () {",
											"    pm.expect(jsonData.result.data[index].observationUnitName).to.eql(\"\");",
											"});",
											"",
											"pm.test(\"Check observationVariableDbId\", function () {",
											"    pm.expect(jsonData.result.data[index].observationVariableDbId).to.eql(\"8263\");",
											"});",
											"",
											"pm.test(\"Check observationVariableName\", function () {",
											"    pm.expect(jsonData.result.data[index].observationVariableName).to.eql(\"NPSEL\");",
											"});",
											"",
											"pm.test(\"Check season season\", function () {",
											"    pm.expect(jsonData.result.data[index].season.season).to.eql(\"Dry season\");",
											"});",
											"pm.test(\"Check season seasonDbId\", function () {",
											"    pm.expect(jsonData.result.data[index].season.seasonDbId).to.eql(\"10290\");",
											"});",
											"",
											"pm.test(\"Check studyDbId\", function () {",
											"    pm.expect(jsonData.result.data[index].studyDbId).to.eql(\"1\");",
											"});",
											"",
											"pm.test(\"Check uploadedBy\", function () {",
											"    pm.expect(jsonData.result.data[index].uploadedBy).to.eql(null);",
											"});",
											"",
											"pm.test(\"Check value\", function () {",
											"    pm.expect(jsonData.result.data[index].value).to.eql(\"3\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/observations",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"observations"
									]
								},
								"description": "GET /{crop}/brapi/v1/observationLevels"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered combined parameters",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"",
											"",
											"//Check metadata",
											"pm.test(\"Check current page\", function () {",
											"    pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											"});",
											"pm.test(\"Check pageSize\", function () {",
											"    pm.expect(jsonData.metadata.pagination.pageSize).to.eql(10);",
											"});",
											"pm.test(\"Check totalCount\", function () {",
											"    pm.expect(jsonData.metadata.pagination.totalCount).to.eql(1);",
											"})",
											"",
											"pm.test(\"Check status\", function () {",
											"    pm.expect(jsonData.metadata.status).to.eql([]);",
											"})",
											"pm.test(\"Check datafiles\", function () {",
											"    pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"})",
											"",
											"//Check result",
											"var index = 0;",
											"",
											"pm.test(\"Check additionalInfo\", function () {",
											"    pm.expect(jsonData.result.data[index].additionalInfo).to.eql(null);",
											"});",
											"pm.test(\"Check collector\", function () {",
											"    pm.expect(jsonData.result.data[index].collector).to.eql(null);",
											"});",
											"",
											"pm.test(\"Check externalReferences referenceID\", function () {",
											"    pm.expect(jsonData.result.data[index].externalReferences[0].referenceID).to.eql(\"NoteRefID\");",
											"});",
											"pm.test(\"Check externalReferences referenceSource\", function () {",
											"    pm.expect(jsonData.result.data[index].externalReferences[0].referenceSource).to.eql(\"NoteRefSource\");",
											"});",
											"",
											"pm.test(\"Check germplasmDbId\", function () {",
											"    pm.expect(jsonData.result.data[index].germplasmDbId).to.eql(pm.environment.get(\"germplasm_uuid\"));",
											"});",
											"",
											"pm.test(\"Check germplasmName\", function () {",
											"    pm.expect(jsonData.result.data[index].germplasmName).to.eql(\"CML1\");",
											"});",
											"",
											"pm.test(\"Check observationDbId\", function () {",
											"    pm.expect(jsonData.result.data[index].observationDbId).to.not.be.null;",
											"});",
											"",
											"pm.test(\"Check observationTimeStamp\", function () {",
											"    //TODO: Get current date time",
											"    pm.expect(jsonData.result.data[index].observationTimeStamp).to.eql(pm.environment.get(\"createdObservationTimestamp1\"));",
											"});",
											"",
											"pm.test(\"Check observationUnitDbId\", function () {",
											"    pm.expect(jsonData.result.data[index].observationUnitDbId).to.eql(pm.environment.get(\"createdObservationUnitDbId\"));",
											"});",
											"",
											"pm.test(\"Check observationUnitName\", function () {",
											"    pm.expect(jsonData.result.data[index].observationUnitName).to.eql(\"\");",
											"});",
											"",
											"pm.test(\"Check observationVariableDbId\", function () {",
											"    pm.expect(jsonData.result.data[index].observationVariableDbId).to.eql(\"8390\");",
											"});",
											"",
											"pm.test(\"Check observationVariableName\", function () {",
											"    pm.expect(jsonData.result.data[index].observationVariableName).to.eql(\"NOTES\");",
											"});",
											"",
											"pm.test(\"Check season season\", function () {",
											"    pm.expect(jsonData.result.data[index].season.season).to.eql(\"Dry season\");",
											"});",
											"pm.test(\"Check season seasonDbId\", function () {",
											"    pm.expect(jsonData.result.data[index].season.seasonDbId).to.eql(\"10290\");",
											"});",
											"",
											"pm.test(\"Check studyDbId\", function () {",
											"    pm.expect(jsonData.result.data[index].studyDbId).to.eql(\"116\");",
											"});",
											"",
											"pm.test(\"Check uploadedBy\", function () {",
											"    pm.expect(jsonData.result.data[index].uploadedBy).to.eql(null);",
											"});",
											"",
											"pm.test(\"Check value\", function () {",
											"    pm.expect(jsonData.result.data[index].value).to.eql(\"note2\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/observations?observationDbId={{createdObservationDbId1}}&observationUnitDbId={{createdObservationUnitDbId}}&germplasmDbId={{germplasm_uuid}}&observationVariableDbId=8390&studyDbId={{createdStudyDbId1}}&locationDbId=3953&trialDbId={{createdTrialDbId}}&programDbId={{programDbId}}&seasonDbId=10290&observationTimeStampRangeStart=&observationTimeStampRangeEnd&externalReferenceID=NoteRefID&externalReferenceSource=NoteRefSource&page=0&pageSize=10",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"observations"
									],
									"query": [
										{
											"key": "observationDbId",
											"value": "{{createdObservationDbId1}}"
										},
										{
											"key": "observationUnitDbId",
											"value": "{{createdObservationUnitDbId}}"
										},
										{
											"key": "germplasmDbId",
											"value": "{{germplasm_uuid}}"
										},
										{
											"key": "observationVariableDbId",
											"value": "8390"
										},
										{
											"key": "studyDbId",
											"value": "{{createdStudyDbId1}}"
										},
										{
											"key": "locationDbId",
											"value": "3953",
											"description": "Aargau"
										},
										{
											"key": "trialDbId",
											"value": "{{createdTrialDbId}}"
										},
										{
											"key": "programDbId",
											"value": "{{programDbId}}"
										},
										{
											"key": "seasonDbId",
											"value": "10290"
										},
										{
											"key": "observationTimeStampRangeStart",
											"value": ""
										},
										{
											"key": "observationTimeStampRangeEnd",
											"value": ""
										},
										{
											"key": "externalReferenceID",
											"value": "NoteRefID"
										},
										{
											"key": "externalReferenceSource",
											"value": "NoteRefSource"
										},
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "10"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/observationLevels"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered valid paginations",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"",
											"",
											"//Check metadata",
											"pm.test(\"Check current page\", function () {",
											"    pm.expect(jsonData.metadata.pagination.currentPage).to.eql(1);",
											"});",
											"pm.test(\"Check pageSize\", function () {",
											"    pm.expect(jsonData.metadata.pagination.pageSize).to.eql(10);",
											"});",
											"pm.test(\"Check totalCount\", function () {",
											"    pm.expect(jsonData.metadata.pagination.totalCount).to.eql(1693);",
											"})",
											"",
											"pm.test(\"Check status\", function () {",
											"    pm.expect(jsonData.metadata.status).to.eql([]);",
											"})",
											"pm.test(\"Check datafiles\", function () {",
											"    pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"})",
											"",
											"//Check result",
											"var index = 0;",
											"",
											"pm.test(\"Check additionalInfo\", function () {",
											"    pm.expect(jsonData.result.data[index].additionalInfo).to.eql(null);",
											"});",
											"pm.test(\"Check collector\", function () {",
											"    pm.expect(jsonData.result.data[index].collector).to.eql(null);",
											"});",
											"",
											"pm.test(\"Check externalReferences\", function () {",
											"    pm.expect(jsonData.result.data[index].externalReferences).to.eql(null);",
											"});",
											"",
											"pm.test(\"Check germplasmDbId\", function () {",
											"    pm.expect(jsonData.result.data[index].germplasmDbId).to.eql(\"PKWDG34bd21ac\");",
											"});",
											"",
											"pm.test(\"Check germplasmName\", function () {",
											"    pm.expect(jsonData.result.data[index].germplasmName).to.eql(\"CML14\");",
											"});",
											"",
											"pm.test(\"Check observationDbId\", function () {",
											"    pm.expect(jsonData.result.data[index].observationDbId).to.not.be.null;",
											"});",
											"",
											"pm.test(\"Check observationTimeStamp\", function () {",
											"    //TODO: Get current date time",
											"    pm.expect(jsonData.result.data[index].observationTimeStamp).to.eql(\"2018-10-26T00:00:00.000+08:00\");",
											"});",
											"",
											"pm.test(\"Check observationUnitDbId\", function () {",
											"    pm.expect(jsonData.result.data[index].observationUnitDbId).to.eql(\"PKWDPPh1TNHCh\");",
											"});",
											"",
											"pm.test(\"Check observationUnitName\", function () {",
											"    pm.expect(jsonData.result.data[index].observationUnitName).to.eql(\"\");",
											"});",
											"",
											"pm.test(\"Check observationVariableDbId\", function () {",
											"    pm.expect(jsonData.result.data[index].observationVariableDbId).to.eql(\"8263\");",
											"});",
											"",
											"pm.test(\"Check observationVariableName\", function () {",
											"    pm.expect(jsonData.result.data[index].observationVariableName).to.eql(\"NPSEL\");",
											"});",
											"",
											"pm.test(\"Check season season\", function () {",
											"    pm.expect(jsonData.result.data[index].season.season).to.eql(\"Dry season\");",
											"});",
											"pm.test(\"Check season seasonDbId\", function () {",
											"    pm.expect(jsonData.result.data[index].season.seasonDbId).to.eql(\"10290\");",
											"});",
											"",
											"pm.test(\"Check studyDbId\", function () {",
											"    pm.expect(jsonData.result.data[index].studyDbId).to.eql(\"1\");",
											"});",
											"",
											"pm.test(\"Check uploadedBy\", function () {",
											"    pm.expect(jsonData.result.data[index].uploadedBy).to.eql(null);",
											"});",
											"",
											"pm.test(\"Check value\", function () {",
											"    pm.expect(jsonData.result.data[index].value).to.eql(\"3\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/observations?page=1&pageSize=10",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"observations"
									],
									"query": [
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "pageSize",
											"value": "10"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/observationLevels"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered valid obsevationDbId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"pm.test(\"Verify returned metadata\", function () {",
											"    pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											"    pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											"    pm.expect(jsonData.metadata.pagination.totalCount).to.eql(1);",
											"    pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											"    pm.expect(jsonData.metadata.status).to.eql([]);",
											"    pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"",
											"pm.test(\"Check if all observationDbIds are correct\", function () {",
											"    for (i = 0; i < jsonData.result.data.length; i++) { ",
											"    pm.expect(jsonData.result.data[i].observationDbId).to.eql(pm.environment.get(\"createdObservationDbId1\"));",
											"    }",
											"}); "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/observations?observationDbId={{createdObservationDbId1}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"observations"
									],
									"query": [
										{
											"key": "observationDbId",
											"value": "{{createdObservationDbId1}}"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/observationLevels"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid obsevationDbId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"pm.test(\"Verify returned metadata\", function () {",
											"    pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											"    pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											"    pm.expect(jsonData.metadata.pagination.totalCount).to.eql(0);",
											"    pm.expect(jsonData.metadata.pagination.totalPages).to.eql(0);",
											"    pm.expect(jsonData.metadata.status).to.eql([]);",
											"    pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"",
											"pm.test(\"Check if all result is empty\", function () {",
											"    pm.expect(jsonData.result.data).to.be.empty;",
											"",
											"}); "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/observations?observationDbId=99999",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"observations"
									],
									"query": [
										{
											"key": "observationDbId",
											"value": "99999"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/observationLevels"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered valid observationUnitDbId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"pm.test(\"Verify returned metadata\", function () {",
											"    pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											"    pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											"    pm.expect(jsonData.metadata.pagination.totalCount).to.eql(4);",
											"    pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											"    pm.expect(jsonData.metadata.status).to.eql([]);",
											"    pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"",
											"pm.test(\"Check if all observationUnitDbIds are correct\", function () {",
											"    for (i = 0; i < jsonData.result.data.length; i++) { ",
											"    pm.expect(jsonData.result.data[i].observationUnitDbId).to.eql(pm.environment.get(\"createdObservationUnitDbId\"));",
											"    }",
											"}); "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/observations?observationUnitDbId={{createdObservationUnitDbId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"observations"
									],
									"query": [
										{
											"key": "observationUnitDbId",
											"value": "{{createdObservationUnitDbId}}"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/observationLevels"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid observationUnitDbId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"pm.test(\"Verify returned metadata\", function () {",
											"    pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											"    pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											"    pm.expect(jsonData.metadata.pagination.totalCount).to.eql(0);",
											"    pm.expect(jsonData.metadata.pagination.totalPages).to.eql(0);",
											"    pm.expect(jsonData.metadata.status).to.eql([]);",
											"    pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"",
											"pm.test(\"Check if all result is empty\", function () {",
											"    pm.expect(jsonData.result.data).to.be.empty;",
											"",
											"}); "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/observations?observationUnitDbId=invalid",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"observations"
									],
									"query": [
										{
											"key": "observationUnitDbId",
											"value": "invalid"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/observationLevels"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered valid germplasmDbId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"pm.test(\"Verify returned metadata\", function () {",
											"    pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											"    pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											"    pm.expect(jsonData.metadata.pagination.totalCount).to.eql(95);",
											"    pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											"    pm.expect(jsonData.metadata.status).to.eql([]);",
											"    pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"",
											"pm.test(\"Check if all germplasmDbIds are correct\", function () {",
											"    for (i = 0; i < jsonData.result.data.length; i++) { ",
											"    pm.expect(jsonData.result.data[i].germplasmDbId).to.eql(pm.environment.get(\"germplasm_uuid\"));",
											"    }",
											"}); "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/observations?germplasmDbId={{germplasm_uuid}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"observations"
									],
									"query": [
										{
											"key": "germplasmDbId",
											"value": "{{germplasm_uuid}}"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/observationLevels"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid germplasmDbId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"pm.test(\"Verify returned metadata\", function () {",
											"    pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											"    pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											"    pm.expect(jsonData.metadata.pagination.totalCount).to.eql(0);",
											"    pm.expect(jsonData.metadata.pagination.totalPages).to.eql(0);",
											"    pm.expect(jsonData.metadata.status).to.eql([]);",
											"    pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"",
											"pm.test(\"Check if all result is empty\", function () {",
											"    pm.expect(jsonData.result.data).to.be.empty;",
											"",
											"}); "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/observations?germplasmDbId=invalid",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"observations"
									],
									"query": [
										{
											"key": "germplasmDbId",
											"value": "invalid"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/observationLevels"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered valid observationVariableDbId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"pm.test(\"Verify returned metadata\", function () {",
											"    pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											"    pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											"    pm.expect(jsonData.metadata.pagination.totalCount).to.eql(3);",
											"    pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											"    pm.expect(jsonData.metadata.status).to.eql([]);",
											"    pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Check if all observationVariableDbIds are correct\", function () {",
											"    for (i = 0; i < jsonData.result.data.length; i++) { ",
											"    pm.expect(jsonData.result.data[i].observationVariableDbId).to.eql(\"8390\");",
											"    }",
											"}); "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/observations?observationVariableDbId=8390",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"observations"
									],
									"query": [
										{
											"key": "observationVariableDbId",
											"value": "8390"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/observationLevels"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid observationVariableDbId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"pm.test(\"Verify returned metadata\", function () {",
											"    pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											"    pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											"    pm.expect(jsonData.metadata.pagination.totalCount).to.eql(0);",
											"    pm.expect(jsonData.metadata.pagination.totalPages).to.eql(0);",
											"    pm.expect(jsonData.metadata.status).to.eql([]);",
											"    pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"",
											"pm.test(\"Check if all result is empty\", function () {",
											"    pm.expect(jsonData.result.data).to.be.empty;",
											"",
											"}); "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/observations?observationVariableDbId=99999",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"observations"
									],
									"query": [
										{
											"key": "observationVariableDbId",
											"value": "99999"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/observationLevels"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered valid studyDbId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"pm.test(\"Verify returned metadata\", function () {",
											"    pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											"    pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											"    pm.expect(jsonData.metadata.pagination.totalCount).to.eql(8);",
											"    pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											"    pm.expect(jsonData.metadata.status).to.eql([]);",
											"    pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Check if all studyDbIds are correct\", function () {",
											"    for (i = 0; i < jsonData.result.data.length; i++) { ",
											"    pm.expect(jsonData.result.data[i].studyDbId).to.eql(pm.environment.get(\"createdStudyDbId1\"));",
											"    }",
											"}); "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/observations?studyDbId={{createdStudyDbId1}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"observations"
									],
									"query": [
										{
											"key": "studyDbId",
											"value": "{{createdStudyDbId1}}"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/observationLevels"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid studyDbId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"pm.test(\"Verify returned metadata\", function () {",
											"    pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											"    pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											"    pm.expect(jsonData.metadata.pagination.totalCount).to.eql(0);",
											"    pm.expect(jsonData.metadata.pagination.totalPages).to.eql(0);",
											"    pm.expect(jsonData.metadata.status).to.eql([]);",
											"    pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"",
											"pm.test(\"Check if all result is empty\", function () {",
											"    pm.expect(jsonData.result.data).to.be.empty;",
											"",
											"}); "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/observations?studyDbId=99999",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"observations"
									],
									"query": [
										{
											"key": "studyDbId",
											"value": "99999"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/observationLevels"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered valid locationDbId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"pm.test(\"Verify returned metadata\", function () {",
											"    pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											"    pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											"    pm.expect(jsonData.metadata.pagination.totalCount).to.eql(8);",
											"    pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											"    pm.expect(jsonData.metadata.status).to.eql([]);",
											"    pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Check if all observationDbIds are correct\", function () {",
											"   var observationDbIds = [",
											"       pm.environment.get(\"createdObservationDbId1\"),",
											"       pm.environment.get(\"createdObservationDbId2\"),",
											"       pm.environment.get(\"createdObservationDbId3\"),",
											"       pm.environment.get(\"createdObservationDbId4\"),",
											"       pm.environment.get(\"createdObservationDbId5\"),",
											"       pm.environment.get(\"createdObservationDbId6\"),",
											"       pm.environment.get(\"createdObservationDbId7\"),",
											"       pm.environment.get(\"createdObservationDbId8\")",
											"       ];",
											"    for (var i = 0; i < jsonData.result.data.length; i++) { ",
											"       pm.expect(jsonData.result.data[i].observationDbId).to.be.oneOf(observationDbIds);",
											"        console.log(jsonData.result.data[i].observationDbId);",
											"    }",
											"}); "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/observations?locationDbId=3953",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"observations"
									],
									"query": [
										{
											"key": "locationDbId",
											"value": "3953"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/observationLevels"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid locationDbId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"pm.test(\"Verify returned metadata\", function () {",
											"    pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											"    pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											"    pm.expect(jsonData.metadata.pagination.totalCount).to.eql(0);",
											"    pm.expect(jsonData.metadata.pagination.totalPages).to.eql(0);",
											"    pm.expect(jsonData.metadata.status).to.eql([]);",
											"    pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"",
											"pm.test(\"Check if all result is empty\", function () {",
											"    pm.expect(jsonData.result.data).to.be.empty;",
											"",
											"}); "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/observations?locationDbId=99999",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"observations"
									],
									"query": [
										{
											"key": "locationDbId",
											"value": "99999"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/observationLevels"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered valid trialDbId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"pm.test(\"Verify returned metadata\", function () {",
											"    pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											"    pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											"    pm.expect(jsonData.metadata.pagination.totalCount).to.eql(8);",
											"    pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											"    pm.expect(jsonData.metadata.status).to.eql([]);",
											"    pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Check if all observationDbIds are correct\", function () {",
											"   var observationDbIds = [",
											"       pm.environment.get(\"createdObservationDbId1\"),",
											"       pm.environment.get(\"createdObservationDbId2\"),",
											"       pm.environment.get(\"createdObservationDbId3\"),",
											"       pm.environment.get(\"createdObservationDbId4\"),",
											"       pm.environment.get(\"createdObservationDbId5\"),",
											"       pm.environment.get(\"createdObservationDbId6\"),",
											"       pm.environment.get(\"createdObservationDbId7\"),",
											"       pm.environment.get(\"createdObservationDbId8\")",
											"       ];",
											"    for (var i = 0; i < jsonData.result.data.length; i++) { ",
											"       pm.expect(jsonData.result.data[i].observationDbId).to.be.oneOf(observationDbIds);",
											"        console.log(jsonData.result.data[i].observationDbId);",
											"    }",
											"}); "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/observations?trialDbId={{createdTrialDbId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"observations"
									],
									"query": [
										{
											"key": "trialDbId",
											"value": "{{createdTrialDbId}}"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/observationLevels"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid trialDbId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"pm.test(\"Verify returned metadata\", function () {",
											"    pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											"    pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											"    pm.expect(jsonData.metadata.pagination.totalCount).to.eql(0);",
											"    pm.expect(jsonData.metadata.pagination.totalPages).to.eql(0);",
											"    pm.expect(jsonData.metadata.status).to.eql([]);",
											"    pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"",
											"pm.test(\"Check if all result is empty\", function () {",
											"    pm.expect(jsonData.result.data).to.be.empty;",
											"",
											"}); "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/observations?trialDbId=99999",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"observations"
									],
									"query": [
										{
											"key": "trialDbId",
											"value": "99999"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/observationLevels"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered valid programDbId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"pm.test(\"Verify returned metadata\", function () {",
											"    pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											"    pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											"    pm.expect(jsonData.metadata.pagination.totalCount).to.eql(1693);",
											"    pm.expect(jsonData.metadata.pagination.totalPages).to.eql(2);",
											"    pm.expect(jsonData.metadata.status).to.eql([]);",
											"    pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"//Note: There is no programDbId available in the response body, so the only assertion possible is checking the expected total count"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/observations?programDbId={{api_program_id}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"observations"
									],
									"query": [
										{
											"key": "programDbId",
											"value": "{{api_program_id}}"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/observationLevels"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid programDbId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"pm.test(\"Verify returned metadata\", function () {",
											"    pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											"    pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											"    pm.expect(jsonData.metadata.pagination.totalCount).to.eql(0);",
											"    pm.expect(jsonData.metadata.pagination.totalPages).to.eql(0);",
											"    pm.expect(jsonData.metadata.status).to.eql([]);",
											"    pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"",
											"pm.test(\"Check if all result is empty\", function () {",
											"    pm.expect(jsonData.result.data).to.be.empty;",
											"",
											"}); "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/observations?programDbId=invalid",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"observations"
									],
									"query": [
										{
											"key": "programDbId",
											"value": "invalid"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/observationLevels"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered valid seasonDbId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"pm.test(\"Verify returned metadata\", function () {",
											"    pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											"    pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											"    pm.expect(jsonData.metadata.pagination.totalCount).to.eql(408);",
											"    pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											"    pm.expect(jsonData.metadata.status).to.eql([]);",
											"    pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Check if all observationDbIds are correct\", function () {",
											"    for (var i = 0; i < jsonData.result.data.length; i++) { ",
											"       pm.expect(jsonData.result.data[i].season.seasonDbId).to.be.eql(\"10290\");",
											"    }",
											"}); "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/observations?seasonDbId=10290",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"observations"
									],
									"query": [
										{
											"key": "seasonDbId",
											"value": "10290"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/observationLevels"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid seasonDbId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"pm.test(\"Verify returned metadata\", function () {",
											"    pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											"    pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											"    pm.expect(jsonData.metadata.pagination.totalCount).to.eql(0);",
											"    pm.expect(jsonData.metadata.pagination.totalPages).to.eql(0);",
											"    pm.expect(jsonData.metadata.status).to.eql([]);",
											"    pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"",
											"pm.test(\"Check if all result is empty\", function () {",
											"    pm.expect(jsonData.result.data).to.be.empty;",
											"",
											"}); "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/observations?seasonDbId=99999",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"observations"
									],
									"query": [
										{
											"key": "seasonDbId",
											"value": "99999"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/observationLevels"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered valid observationTimeStamps",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(8);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"",
											"pm.test(\"Check if observation timestamps are within observationTimeStamps\", function () {",
											"  var moment = require('moment');",
											"  var timeStampStart = moment.utc(\"2022-01-01T00:00:00.000+08:00\").format();",
											"  var timeStampEnd = moment.utc(\"2022-12-31T00:00:00.000+08:00\").format();",
											"  for (i = 0; i < jsonData.result.data.length ; i++) {",
											"            var returnedTimeStamp = jsonData.result.data[i].observationTimeStamp;",
											"            var isAfter = moment(returnedTimeStamp).isAfter(timeStampStart);",
											"            var isBefore = moment(returnedTimeStamp).isBefore(timeStampEnd);",
											"            pm.expect(isAfter).to.eql(true);",
											"            pm.expect(isBefore).to.eql(true);",
											"        ",
											"  }",
											"",
											" ",
											"});    ",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/observations?observationTimeStampRangeStart=2022-01-17T00:00:00.000+08:00&observationTimeStampRangeEnd=2022-12-19T00:00:00.000+08:00",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"observations"
									],
									"query": [
										{
											"key": "observationTimeStampRangeStart",
											"value": "2022-01-17T00:00:00.000+08:00"
										},
										{
											"key": "observationTimeStampRangeEnd",
											"value": "2022-12-19T00:00:00.000+08:00"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/observationLevels"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid observationTimeStamps",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"pm.test(\"Verify returned metadata\", function () {",
											"    pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											"    pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											"    pm.expect(jsonData.metadata.pagination.totalCount).to.eql(0);",
											"    pm.expect(jsonData.metadata.pagination.totalPages).to.eql(0);",
											"    pm.expect(jsonData.metadata.status).to.eql([]);",
											"    pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"",
											"pm.test(\"Check if all result is empty\", function () {",
											"    pm.expect(jsonData.result.data).to.be.empty;",
											"",
											"}); "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/observations?observationTimeStampRangeStart=invalid&observationTimeStampRangeEnd=invalid",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"observations"
									],
									"query": [
										{
											"key": "observationTimeStampRangeStart",
											"value": "invalid"
										},
										{
											"key": "observationTimeStampRangeEnd",
											"value": "invalid"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/observationLevels"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered valid externalReferenceID",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"pm.test(\"Verify returned metadata\", function () {",
											"    pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											"    pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											"    pm.expect(jsonData.metadata.pagination.totalCount).to.eql(1);",
											"    pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											"    pm.expect(jsonData.metadata.status).to.eql([]);",
											"    pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Check if all externalReferenceIDs are correct\", function () {",
											"    for (var i = 0; i < jsonData.result.data.length; i++) { ",
											"       pm.expect(jsonData.result.data[i].externalReferences[0].referenceID).to.be.eql(\"NoteRefID\");",
											"    }",
											"}); "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/observations?externalReferenceID=NoteRefID",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"observations"
									],
									"query": [
										{
											"key": "externalReferenceID",
											"value": "NoteRefID"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/observationLevels"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid externalReferenceID",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"pm.test(\"Verify returned metadata\", function () {",
											"    pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											"    pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											"    pm.expect(jsonData.metadata.pagination.totalCount).to.eql(0);",
											"    pm.expect(jsonData.metadata.pagination.totalPages).to.eql(0);",
											"    pm.expect(jsonData.metadata.status).to.eql([]);",
											"    pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"",
											"pm.test(\"Check if all result is empty\", function () {",
											"    pm.expect(jsonData.result.data).to.be.empty;",
											"",
											"}); "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/observations?externalReferenceID=invalid",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"observations"
									],
									"query": [
										{
											"key": "externalReferenceID",
											"value": "invalid"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/observationLevels"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered valid externalReferenceSource",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"pm.test(\"Verify returned metadata\", function () {",
											"    pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											"    pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											"    pm.expect(jsonData.metadata.pagination.totalCount).to.eql(1);",
											"    pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											"    pm.expect(jsonData.metadata.status).to.eql([]);",
											"    pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Check if all externalReferenceSources are correct\", function () {",
											"    for (var i = 0; i < jsonData.result.data.length; i++) { ",
											"       pm.expect(jsonData.result.data[i].externalReferences[0].referenceSource).to.be.eql(\"NoteRefSource\");",
											"    }",
											"}); "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/observations?externalReferenceSource=NoteRefSource",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"observations"
									],
									"query": [
										{
											"key": "externalReferenceSource",
											"value": "NoteRefSource"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/observationLevels"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid externalReferenceSource",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"pm.test(\"Verify returned metadata\", function () {",
											"    pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											"    pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											"    pm.expect(jsonData.metadata.pagination.totalCount).to.eql(0);",
											"    pm.expect(jsonData.metadata.pagination.totalPages).to.eql(0);",
											"    pm.expect(jsonData.metadata.status).to.eql([]);",
											"    pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"",
											"pm.test(\"Check if all result is empty\", function () {",
											"    pm.expect(jsonData.result.data).to.be.empty;",
											"",
											"}); "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/observations?externalReferenceSource=invalid",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"observations"
									],
									"query": [
										{
											"key": "externalReferenceSource",
											"value": "invalid"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/observationLevels"
							},
							"response": []
						},
						{
							"name": "Verify response when entered invalid crop",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Verify returned error message\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.errors[0].message).to.eql(\"Invalid crop invalid for URL:/invalid/brapi/v2/observations\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/invalid/brapi/v2/observations",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"invalid",
										"brapi",
										"v2",
										"observations"
									]
								},
								"description": "GET /{crop}/brapi/v1/observationLevels"
							},
							"response": []
						},
						{
							"name": "Verify response when entered invalid page",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"",
											"pm.test(\"Verify returned error message\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.errors[0].message).to.eql(\"A total of 1 pages are available, so the page number must between 0 and 1 (exclusive).\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/observations?page=10000&pageSize=10000",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"observations"
									],
									"query": [
										{
											"key": "page",
											"value": "10000"
										},
										{
											"key": "pageSize",
											"value": "10000"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/observationLevels"
							},
							"response": []
						},
						{
							"name": "Verify response when entered invalid pageSize",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"",
											"pm.test(\"Verify returned error message\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.errors[0].message).to.eql(\"Page size must between 1 and 10000.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/observations?page=0&pageSize=10001",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"observations"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "10001"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/observationLevels"
							},
							"response": []
						}
					]
				},
				{
					"name": "observation-unit-resource-brapi",
					"item": [
						{
							"name": "PATCH /{crop}​/brapi​/v2​/observationunits​/{observationUnitDbId}",
							"item": [
								{
									"name": "Verify response code and body when entered valid inputs",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Verify returned metadata\", function () {",
													" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
													" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(0);",
													" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(0);",
													" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(0);",
													" pm.expect(jsonData.metadata.status).to.eql([]);",
													" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
													"});",
													"pm.test(\"Verify geoCoordinates type\", function () {",
													"    pm.expect(jsonData.result.observationUnitPosition.geoCoordinates.type).to.eql(\"Feature\");",
													"});",
													"",
													"pm.test(\"Verify geometry coordinates\", function () {",
													"    pm.expect(jsonData.result.observationUnitPosition.geoCoordinates.geometry.coordinates[0]).to.eql(-76.506042);",
													"    pm.expect(jsonData.result.observationUnitPosition.geoCoordinates.geometry.coordinates[1]).to.eql(42.417373);",
													"});",
													"",
													"pm.test(\"Verify geometry type\", function () {",
													"    pm.expect(jsonData.result.observationUnitPosition.geoCoordinates.geometry.type).to.eql(\"Point\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const echoPostRequest = {\r",
													"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
													"  method: 'POST',\r",
													"  header: 'Content-Type:application/json',\r",
													"  body: {\r",
													"    mode: 'application/json',\r",
													"    raw: JSON.stringify({\r",
													"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
													"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
													"        \t\"grant_type\": \"\",\r",
													"            \"client_id\": \"\"\r",
													"        })\r",
													"  }\r",
													"};\r",
													"\r",
													"var getToken = true;\r",
													"\r",
													"if (!pm.environment.get('masterTokenExpiry') || \r",
													"    !pm.environment.get('masterToken')) {\r",
													"    console.log('Token or expiry date are missing')\r",
													"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
													"    console.log('Token is expired')\r",
													"} else {\r",
													"    getToken = false;\r",
													"    console.log('Token and expiry date are all good');\r",
													"}\r",
													"\r",
													"if (getToken === true) {\r",
													"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
													"    console.log(err ? err : res.json());\r",
													"        if (err === null) {\r",
													"            console.log('Saving the token and expiry date')\r",
													"            var responseJson = res.json();\r",
													"            pm.environment.set('masterToken', responseJson.access_token)\r",
													"    \r",
													"            var expiryDate = new Date();\r",
													"pm.globals.get(\"variable_key\");\r",
													"pm.globals.get(\"variable_key\");\r",
													"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
													"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
													"        }\r",
													"    });\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{masterToken}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"observationUnitPosition\": {\r\n    \"geoCoordinates\":  {\r\n        \"geometry\": {\r\n            \"coordinates\": [\r\n                -76.506042,\r\n                42.417373\r\n            ],\r\n            \"type\": \"Point\"\r\n        },\r\n        \"type\": \"Feature\"\r\n    }\r\n  }\r\n}"
										},
										"url": {
											"raw": "{{BMSurl}}/{{crop}}/brapi/v2/observationunits/{{study6_obs_unit_id}}",
											"host": [
												"{{BMSurl}}"
											],
											"path": [
												"{{crop}}",
												"brapi",
												"v2",
												"observationunits",
												"{{study6_obs_unit_id}}"
											]
										},
										"description": "PATCH /{crop}​/brapi​/v2​/observationunits​/{observationUnitDbId}"
									},
									"response": []
								},
								{
									"name": "Verify response code and body when entered non-existing observationUnitDbId",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"pm.test(\"Verify error message\", function () {",
													"    var error = pm.response.json().errors[0].message;",
													"    pm.expect(error).to.eql(\"Invalid observation unit id.\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const echoPostRequest = {\r",
													"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
													"  method: 'POST',\r",
													"  header: 'Content-Type:application/json',\r",
													"  body: {\r",
													"    mode: 'application/json',\r",
													"    raw: JSON.stringify({\r",
													"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
													"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
													"        \t\"grant_type\": \"\",\r",
													"            \"client_id\": \"\"\r",
													"        })\r",
													"  }\r",
													"};\r",
													"\r",
													"var getToken = true;\r",
													"\r",
													"if (!pm.environment.get('masterTokenExpiry') || \r",
													"    !pm.environment.get('masterToken')) {\r",
													"    console.log('Token or expiry date are missing')\r",
													"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
													"    console.log('Token is expired')\r",
													"} else {\r",
													"    getToken = false;\r",
													"    console.log('Token and expiry date are all good');\r",
													"}\r",
													"\r",
													"if (getToken === true) {\r",
													"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
													"    console.log(err ? err : res.json());\r",
													"        if (err === null) {\r",
													"            console.log('Saving the token and expiry date')\r",
													"            var responseJson = res.json();\r",
													"            pm.environment.set('masterToken', responseJson.access_token)\r",
													"    \r",
													"            var expiryDate = new Date();\r",
													"pm.globals.get(\"variable_key\");\r",
													"pm.globals.get(\"variable_key\");\r",
													"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
													"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
													"        }\r",
													"    });\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{masterToken}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"observationUnitPosition\": {\r\n    \"geoCoordinates\":  {\r\n        \"geometry\": {\r\n            \"coordinates\": [\r\n                -76.506042,\r\n                42.417373\r\n            ],\r\n            \"type\": \"Point\"\r\n        },\r\n        \"type\": \"Feature\"\r\n    }\r\n  }\r\n}"
										},
										"url": {
											"raw": "{{BMSurl}}/{{crop}}/brapi/v2/observationunits/nonExistingId",
											"host": [
												"{{BMSurl}}"
											],
											"path": [
												"{{crop}}",
												"brapi",
												"v2",
												"observationunits",
												"nonExistingId"
											]
										},
										"description": "PATCH /{crop}​/brapi​/v2​/observationunits​/{observationUnitDbId}"
									},
									"response": []
								}
							]
						},
						{
							"name": "POST ​/{crop}​/brapi​/v2​/search​/observationunits",
							"item": [
								{
									"name": "Post search by germplasmDbId",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"    var jsonData = pm.response.json();",
													"    pm.environment.unset(\"searchResultDbId2_germplasmDbId\");",
													"    pm.environment.set(\"searchResultDbId2_germplasmDbId\", jsonData.result.searchResultsDbId);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const echoPostRequest = {\r",
													"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
													"  method: 'POST',\r",
													"  header: 'Content-Type:application/json',\r",
													"  body: {\r",
													"    mode: 'application/json',\r",
													"    raw: JSON.stringify({\r",
													"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
													"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
													"        \t\"grant_type\": \"\",\r",
													"            \"client_id\": \"\"\r",
													"        })\r",
													"  }\r",
													"};\r",
													"\r",
													"var getToken = true;\r",
													"\r",
													"if (!pm.environment.get('masterTokenExpiry') || \r",
													"    !pm.environment.get('masterToken')) {\r",
													"    console.log('Token or expiry date are missing')\r",
													"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
													"    console.log('Token is expired')\r",
													"} else {\r",
													"    getToken = false;\r",
													"    console.log('Token and expiry date are all good');\r",
													"}\r",
													"\r",
													"if (getToken === true) {\r",
													"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
													"    console.log(err ? err : res.json());\r",
													"        if (err === null) {\r",
													"            console.log('Saving the token and expiry date')\r",
													"            var responseJson = res.json();\r",
													"            pm.environment.set('masterToken', responseJson.access_token)\r",
													"    \r",
													"            var expiryDate = new Date();\r",
													"pm.globals.get(\"variable_key\");\r",
													"pm.globals.get(\"variable_key\");\r",
													"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
													"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
													"        }\r",
													"    });\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{masterToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"germplasmDbIds\": [\n\t\t\"PKWDG942cd372\"\n\t]\n}"
										},
										"url": {
											"raw": "{{BMSurl}}/{{crop}}/brapi/v2/search/observationunits",
											"host": [
												"{{BMSurl}}"
											],
											"path": [
												"{{crop}}",
												"brapi",
												"v2",
												"search",
												"observationunits"
											]
										},
										"description": "POST ​/{crop}​/brapi​/v2​/search​/observationunits"
									},
									"response": []
								},
								{
									"name": "Post search by locationDbIds",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"    var jsonData = pm.response.json();",
													"    pm.environment.unset(\"searchResultDbId2_locationDbId\");",
													"    pm.environment.set(\"searchResultDbId2_locationDbId\", jsonData.result.searchResultsDbId);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const echoPostRequest = {\r",
													"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
													"  method: 'POST',\r",
													"  header: 'Content-Type:application/json',\r",
													"  body: {\r",
													"    mode: 'application/json',\r",
													"    raw: JSON.stringify({\r",
													"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
													"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
													"        \t\"grant_type\": \"\",\r",
													"            \"client_id\": \"\"\r",
													"        })\r",
													"  }\r",
													"};\r",
													"\r",
													"var getToken = true;\r",
													"\r",
													"if (!pm.environment.get('masterTokenExpiry') || \r",
													"    !pm.environment.get('masterToken')) {\r",
													"    console.log('Token or expiry date are missing')\r",
													"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
													"    console.log('Token is expired')\r",
													"} else {\r",
													"    getToken = false;\r",
													"    console.log('Token and expiry date are all good');\r",
													"}\r",
													"\r",
													"if (getToken === true) {\r",
													"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
													"    console.log(err ? err : res.json());\r",
													"        if (err === null) {\r",
													"            console.log('Saving the token and expiry date')\r",
													"            var responseJson = res.json();\r",
													"            pm.environment.set('masterToken', responseJson.access_token)\r",
													"    \r",
													"            var expiryDate = new Date();\r",
													"pm.globals.get(\"variable_key\");\r",
													"pm.globals.get(\"variable_key\");\r",
													"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
													"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
													"        }\r",
													"    });\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{masterToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"locationDbIds\": [\n\t\t\"9001\"\n\t]\n}"
										},
										"url": {
											"raw": "{{BMSurl}}/{{crop}}/brapi/v2/search/observationunits",
											"host": [
												"{{BMSurl}}"
											],
											"path": [
												"{{crop}}",
												"brapi",
												"v2",
												"search",
												"observationunits"
											]
										},
										"description": "POST ​/{crop}​/brapi​/v2​/search​/observationunits"
									},
									"response": []
								},
								{
									"name": "Post search by observationLevel",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"    var jsonData = pm.response.json();",
													"    pm.environment.unset(\"searchResultDbId2_observationLevel\");",
													"    pm.environment.set(\"searchResultDbId2_observationLevel\", jsonData.result.searchResultsDbId);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const echoPostRequest = {\r",
													"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
													"  method: 'POST',\r",
													"  header: 'Content-Type:application/json',\r",
													"  body: {\r",
													"    mode: 'application/json',\r",
													"    raw: JSON.stringify({\r",
													"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
													"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
													"        \t\"grant_type\": \"\",\r",
													"            \"client_id\": \"\"\r",
													"        })\r",
													"  }\r",
													"};\r",
													"\r",
													"var getToken = true;\r",
													"\r",
													"if (!pm.environment.get('masterTokenExpiry') || \r",
													"    !pm.environment.get('masterToken')) {\r",
													"    console.log('Token or expiry date are missing')\r",
													"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
													"    console.log('Token is expired')\r",
													"} else {\r",
													"    getToken = false;\r",
													"    console.log('Token and expiry date are all good');\r",
													"}\r",
													"\r",
													"if (getToken === true) {\r",
													"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
													"    console.log(err ? err : res.json());\r",
													"        if (err === null) {\r",
													"            console.log('Saving the token and expiry date')\r",
													"            var responseJson = res.json();\r",
													"            pm.environment.set('masterToken', responseJson.access_token)\r",
													"    \r",
													"            var expiryDate = new Date();\r",
													"pm.globals.get(\"variable_key\");\r",
													"pm.globals.get(\"variable_key\");\r",
													"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
													"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
													"        }\r",
													"    });\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{masterToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"observationLevel\":\n\t\t\"PLOT\"\n}"
										},
										"url": {
											"raw": "{{BMSurl}}/{{crop}}/brapi/v2/search/observationunits",
											"host": [
												"{{BMSurl}}"
											],
											"path": [
												"{{crop}}",
												"brapi",
												"v2",
												"search",
												"observationunits"
											]
										},
										"description": "POST ​/{crop}​/brapi​/v2​/search​/observationunits"
									},
									"response": []
								},
								{
									"name": "Post search by observationUnitDbIds",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"    var jsonData = pm.response.json();",
													"    pm.environment.unset(\"searchResultDbId2_observationUnitDbId\");",
													"    pm.environment.set(\"searchResultDbId2_observationUnitDbId\", jsonData.result.searchResultsDbId);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const echoPostRequest = {\r",
													"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
													"  method: 'POST',\r",
													"  header: 'Content-Type:application/json',\r",
													"  body: {\r",
													"    mode: 'application/json',\r",
													"    raw: JSON.stringify({\r",
													"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
													"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
													"        \t\"grant_type\": \"\",\r",
													"            \"client_id\": \"\"\r",
													"        })\r",
													"  }\r",
													"};\r",
													"\r",
													"var getToken = true;\r",
													"\r",
													"if (!pm.environment.get('masterTokenExpiry') || \r",
													"    !pm.environment.get('masterToken')) {\r",
													"    console.log('Token or expiry date are missing')\r",
													"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
													"    console.log('Token is expired')\r",
													"} else {\r",
													"    getToken = false;\r",
													"    console.log('Token and expiry date are all good');\r",
													"}\r",
													"\r",
													"if (getToken === true) {\r",
													"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
													"    console.log(err ? err : res.json());\r",
													"        if (err === null) {\r",
													"            console.log('Saving the token and expiry date')\r",
													"            var responseJson = res.json();\r",
													"            pm.environment.set('masterToken', responseJson.access_token)\r",
													"    \r",
													"            var expiryDate = new Date();\r",
													"pm.globals.get(\"variable_key\");\r",
													"pm.globals.get(\"variable_key\");\r",
													"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
													"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
													"        }\r",
													"    });\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{masterToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"observationUnitDbIds\":[\n\t\t\"{{createdObservationUnitDbId}}\"\n\t\t]\n}"
										},
										"url": {
											"raw": "{{BMSurl}}/{{crop}}/brapi/v2/search/observationunits",
											"host": [
												"{{BMSurl}}"
											],
											"path": [
												"{{crop}}",
												"brapi",
												"v2",
												"search",
												"observationunits"
											]
										},
										"description": "POST ​/{crop}​/brapi​/v2​/search​/observationunits"
									},
									"response": []
								},
								{
									"name": "Post search by programDbIds",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"    var jsonData = pm.response.json();",
													"    pm.environment.unset(\"searchResultDbId2_programDbId\");",
													"    pm.environment.set(\"searchResultDbId2_programDbId\", jsonData.result.searchResultsDbId);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const echoPostRequest = {\r",
													"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
													"  method: 'POST',\r",
													"  header: 'Content-Type:application/json',\r",
													"  body: {\r",
													"    mode: 'application/json',\r",
													"    raw: JSON.stringify({\r",
													"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
													"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
													"        \t\"grant_type\": \"\",\r",
													"            \"client_id\": \"\"\r",
													"        })\r",
													"  }\r",
													"};\r",
													"\r",
													"var getToken = true;\r",
													"\r",
													"if (!pm.environment.get('masterTokenExpiry') || \r",
													"    !pm.environment.get('masterToken')) {\r",
													"    console.log('Token or expiry date are missing')\r",
													"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
													"    console.log('Token is expired')\r",
													"} else {\r",
													"    getToken = false;\r",
													"    console.log('Token and expiry date are all good');\r",
													"}\r",
													"\r",
													"if (getToken === true) {\r",
													"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
													"    console.log(err ? err : res.json());\r",
													"        if (err === null) {\r",
													"            console.log('Saving the token and expiry date')\r",
													"            var responseJson = res.json();\r",
													"            pm.environment.set('masterToken', responseJson.access_token)\r",
													"    \r",
													"            var expiryDate = new Date();\r",
													"pm.globals.get(\"variable_key\");\r",
													"pm.globals.get(\"variable_key\");\r",
													"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
													"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
													"        }\r",
													"    });\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{masterToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"programDbIds\": [\n\t\t\"{{api_program_id}}\"\n\t]\n}"
										},
										"url": {
											"raw": "{{BMSurl}}/{{crop}}/brapi/v2/search/observationunits",
											"host": [
												"{{BMSurl}}"
											],
											"path": [
												"{{crop}}",
												"brapi",
												"v2",
												"search",
												"observationunits"
											]
										},
										"description": "POST ​/{crop}​/brapi​/v2​/search​/observationunits"
									},
									"response": []
								},
								{
									"name": "Post search by studyDbId",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"    var jsonData = pm.response.json();",
													"    pm.environment.unset(\"searchResultDbId2_studyDbId\");",
													"    pm.environment.set(\"searchResultDbId2_studyDbId\", jsonData.result.searchResultsDbId);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const echoPostRequest = {\r",
													"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
													"  method: 'POST',\r",
													"  header: 'Content-Type:application/json',\r",
													"  body: {\r",
													"    mode: 'application/json',\r",
													"    raw: JSON.stringify({\r",
													"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
													"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
													"        \t\"grant_type\": \"\",\r",
													"            \"client_id\": \"\"\r",
													"        })\r",
													"  }\r",
													"};\r",
													"\r",
													"var getToken = true;\r",
													"\r",
													"if (!pm.environment.get('masterTokenExpiry') || \r",
													"    !pm.environment.get('masterToken')) {\r",
													"    console.log('Token or expiry date are missing')\r",
													"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
													"    console.log('Token is expired')\r",
													"} else {\r",
													"    getToken = false;\r",
													"    console.log('Token and expiry date are all good');\r",
													"}\r",
													"\r",
													"if (getToken === true) {\r",
													"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
													"    console.log(err ? err : res.json());\r",
													"        if (err === null) {\r",
													"            console.log('Saving the token and expiry date')\r",
													"            var responseJson = res.json();\r",
													"            pm.environment.set('masterToken', responseJson.access_token)\r",
													"    \r",
													"            var expiryDate = new Date();\r",
													"pm.globals.get(\"variable_key\");\r",
													"pm.globals.get(\"variable_key\");\r",
													"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
													"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
													"        }\r",
													"    });\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{masterToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"studyDbIds\": [\n\t\t\"{{studyDbId}}\"\n\t]\n}"
										},
										"url": {
											"raw": "{{BMSurl}}/{{crop}}/brapi/v2/search/observationunits",
											"host": [
												"{{BMSurl}}"
											],
											"path": [
												"{{crop}}",
												"brapi",
												"v2",
												"search",
												"observationunits"
											]
										},
										"description": "POST ​/{crop}​/brapi​/v2​/search​/observationunits"
									},
									"response": []
								},
								{
									"name": "Post search by externalReferenceID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"    var jsonData = pm.response.json();",
													"    pm.environment.unset(\"searchResultDbId2_externalReferenceID\");",
													"    pm.environment.set(\"searchResultDbId2_externalReferenceID\", jsonData.result.searchResultsDbId);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const echoPostRequest = {\r",
													"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
													"  method: 'POST',\r",
													"  header: 'Content-Type:application/json',\r",
													"  body: {\r",
													"    mode: 'application/json',\r",
													"    raw: JSON.stringify({\r",
													"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
													"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
													"        \t\"grant_type\": \"\",\r",
													"            \"client_id\": \"\"\r",
													"        })\r",
													"  }\r",
													"};\r",
													"\r",
													"var getToken = true;\r",
													"\r",
													"if (!pm.environment.get('masterTokenExpiry') || \r",
													"    !pm.environment.get('masterToken')) {\r",
													"    console.log('Token or expiry date are missing')\r",
													"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
													"    console.log('Token is expired')\r",
													"} else {\r",
													"    getToken = false;\r",
													"    console.log('Token and expiry date are all good');\r",
													"}\r",
													"\r",
													"if (getToken === true) {\r",
													"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
													"    console.log(err ? err : res.json());\r",
													"        if (err === null) {\r",
													"            console.log('Saving the token and expiry date')\r",
													"            var responseJson = res.json();\r",
													"            pm.environment.set('masterToken', responseJson.access_token)\r",
													"    \r",
													"            var expiryDate = new Date();\r",
													"pm.globals.get(\"variable_key\");\r",
													"pm.globals.get(\"variable_key\");\r",
													"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
													"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
													"        }\r",
													"    });\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{masterToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"externalReferenceIDs\": [\n\t\t\"refID\"\n\t]\n}"
										},
										"url": {
											"raw": "{{BMSurl}}/{{crop}}/brapi/v2/search/observationunits",
											"host": [
												"{{BMSurl}}"
											],
											"path": [
												"{{crop}}",
												"brapi",
												"v2",
												"search",
												"observationunits"
											]
										},
										"description": "POST ​/{crop}​/brapi​/v2​/search​/observationunits"
									},
									"response": []
								},
								{
									"name": "Post search by externalReferenceSource",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"    var jsonData = pm.response.json();",
													"    pm.environment.unset(\"searchResultDbId2_referenceSource\");",
													"    pm.environment.set(\"searchResultDbId2_referenceSource\", jsonData.result.searchResultsDbId);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const echoPostRequest = {\r",
													"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
													"  method: 'POST',\r",
													"  header: 'Content-Type:application/json',\r",
													"  body: {\r",
													"    mode: 'application/json',\r",
													"    raw: JSON.stringify({\r",
													"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
													"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
													"        \t\"grant_type\": \"\",\r",
													"            \"client_id\": \"\"\r",
													"        })\r",
													"  }\r",
													"};\r",
													"\r",
													"var getToken = true;\r",
													"\r",
													"if (!pm.environment.get('masterTokenExpiry') || \r",
													"    !pm.environment.get('masterToken')) {\r",
													"    console.log('Token or expiry date are missing')\r",
													"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
													"    console.log('Token is expired')\r",
													"} else {\r",
													"    getToken = false;\r",
													"    console.log('Token and expiry date are all good');\r",
													"}\r",
													"\r",
													"if (getToken === true) {\r",
													"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
													"    console.log(err ? err : res.json());\r",
													"        if (err === null) {\r",
													"            console.log('Saving the token and expiry date')\r",
													"            var responseJson = res.json();\r",
													"            pm.environment.set('masterToken', responseJson.access_token)\r",
													"    \r",
													"            var expiryDate = new Date();\r",
													"pm.globals.get(\"variable_key\");\r",
													"pm.globals.get(\"variable_key\");\r",
													"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
													"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
													"        }\r",
													"    });\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{masterToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"externalReferenceSources\": [\n\t\t\"referenceSource\"\n\t]\n}"
										},
										"url": {
											"raw": "{{BMSurl}}/{{crop}}/brapi/v2/search/observationunits",
											"host": [
												"{{BMSurl}}"
											],
											"path": [
												"{{crop}}",
												"brapi",
												"v2",
												"search",
												"observationunits"
											]
										},
										"description": "POST ​/{crop}​/brapi​/v2​/search​/observationunits"
									},
									"response": []
								},
								{
									"name": "Post search by trialDbId",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"    var jsonData = pm.response.json();",
													"    pm.environment.unset(\"searchResultDbId2_trialDbId\");",
													"    pm.environment.set(\"searchResultDbId2_trialDbId\", jsonData.result.searchResultsDbId);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const echoPostRequest = {\r",
													"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
													"  method: 'POST',\r",
													"  header: 'Content-Type:application/json',\r",
													"  body: {\r",
													"    mode: 'application/json',\r",
													"    raw: JSON.stringify({\r",
													"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
													"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
													"        \t\"grant_type\": \"\",\r",
													"            \"client_id\": \"\"\r",
													"        })\r",
													"  }\r",
													"};\r",
													"\r",
													"var getToken = true;\r",
													"\r",
													"if (!pm.environment.get('masterTokenExpiry') || \r",
													"    !pm.environment.get('masterToken')) {\r",
													"    console.log('Token or expiry date are missing')\r",
													"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
													"    console.log('Token is expired')\r",
													"} else {\r",
													"    getToken = false;\r",
													"    console.log('Token and expiry date are all good');\r",
													"}\r",
													"\r",
													"if (getToken === true) {\r",
													"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
													"    console.log(err ? err : res.json());\r",
													"        if (err === null) {\r",
													"            console.log('Saving the token and expiry date')\r",
													"            var responseJson = res.json();\r",
													"            pm.environment.set('masterToken', responseJson.access_token)\r",
													"    \r",
													"            var expiryDate = new Date();\r",
													"pm.globals.get(\"variable_key\");\r",
													"pm.globals.get(\"variable_key\");\r",
													"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
													"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
													"        }\r",
													"    });\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{masterToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"trialDbIds\": [\n\t\t\"{{createdTrialDbId}}\"\n\t]\n}"
										},
										"url": {
											"raw": "{{BMSurl}}/{{crop}}/brapi/v2/search/observationunits",
											"host": [
												"{{BMSurl}}"
											],
											"path": [
												"{{crop}}",
												"brapi",
												"v2",
												"search",
												"observationunits"
											]
										},
										"description": "POST ​/{crop}​/brapi​/v2​/search​/observationunits"
									},
									"response": []
								},
								{
									"name": "Post search by combination of all filters",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"    var jsonData = pm.response.json();",
													"    pm.environment.unset(\"searchResultDbId2_combined\");",
													"    pm.environment.set(\"searchResultDbId2_combined\", jsonData.result.searchResultsDbId);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const echoPostRequest = {\r",
													"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
													"  method: 'POST',\r",
													"  header: 'Content-Type:application/json',\r",
													"  body: {\r",
													"    mode: 'application/json',\r",
													"    raw: JSON.stringify({\r",
													"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
													"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
													"        \t\"grant_type\": \"\",\r",
													"            \"client_id\": \"\"\r",
													"        })\r",
													"  }\r",
													"};\r",
													"\r",
													"var getToken = true;\r",
													"\r",
													"if (!pm.environment.get('masterTokenExpiry') || \r",
													"    !pm.environment.get('masterToken')) {\r",
													"    console.log('Token or expiry date are missing')\r",
													"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
													"    console.log('Token is expired')\r",
													"} else {\r",
													"    getToken = false;\r",
													"    console.log('Token and expiry date are all good');\r",
													"}\r",
													"\r",
													"if (getToken === true) {\r",
													"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
													"    console.log(err ? err : res.json());\r",
													"        if (err === null) {\r",
													"            console.log('Saving the token and expiry date')\r",
													"            var responseJson = res.json();\r",
													"            pm.environment.set('masterToken', responseJson.access_token)\r",
													"    \r",
													"            var expiryDate = new Date();\r",
													"pm.globals.get(\"variable_key\");\r",
													"pm.globals.get(\"variable_key\");\r",
													"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
													"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
													"        }\r",
													"    });\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{masterToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"externalReferenceIDs\": [\n        \"refID\"\n    ],\n    \"externalReferenceSources\": [\n        \"referenceSource\"\n    ],\n    \"germplasmDbIds\": [\n        \"PKWDG942cd372\"\n    ],\n    \"studyDbIds\": [\n        \"{{createdStudyDbId1}}\"\n    ],\n    \"programDbIds\": [\n        \"{{api_program_id}}\"\n    ],\n    \t\"locationDbIds\": [\n\t\t\"3953\"\n\t],\n    \"observationUnitDbIds\": [\n        \"{{createdObservationUnitDbId}}\"\n    ],\n\t\"observationLevel\":\n\t\t\"PLOT\",\n    \"trialDbIds\": [\n        \"{{createdTrialDbId}}\"\n    ]\n}"
										},
										"url": {
											"raw": "{{BMSurl}}/{{crop}}/brapi/v2/search/observationunits",
											"host": [
												"{{BMSurl}}"
											],
											"path": [
												"{{crop}}",
												"brapi",
												"v2",
												"search",
												"observationunits"
											]
										},
										"description": "POST ​/{crop}​/brapi​/v2​/search​/observationunits"
									},
									"response": []
								}
							]
						},
						{
							"name": "GET ​/{crop}​/brapi​/v2​/search​/observationunits​/{searchResultsDbid}",
							"item": [
								{
									"name": "Verify results when entered searchResultsDbid that filters by germplasmDbIds",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"var jsonData = pm.response.json();",
													"var data = jsonData.result.data[0];",
													"",
													"pm.test(\"Verify returned metadata\", function () {",
													"  pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
													"  pm.expect(jsonData.metadata.pagination.pageSize).to.eql(10000);",
													"  pm.expect(jsonData.metadata.pagination.totalCount).to.eql(124);",
													"  pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
													"  pm.expect(jsonData.metadata.status).to.eql([]);",
													"  pm.expect(jsonData.metadata.datafiles).to.eql([]);",
													"});",
													"",
													"pm.test(\"Check if all data has correct germplasmDbId\", function () {",
													"  var jsonData = pm.response.json();",
													"  var dataLength = jsonData.result.data.length;",
													"",
													"  for (i = 0; i < dataLength; i++) {",
													"    var data = jsonData.result.data[i];",
													"    pm.expect(data.germplasmDbId).to.eql(\"PKWDG942cd372\");",
													"  }",
													"",
													"});    "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const echoPostRequest = {\r",
													"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
													"  method: 'POST',\r",
													"  header: 'Content-Type:application/json',\r",
													"  body: {\r",
													"    mode: 'application/json',\r",
													"    raw: JSON.stringify({\r",
													"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
													"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
													"        \t\"grant_type\": \"\",\r",
													"            \"client_id\": \"\"\r",
													"        })\r",
													"  }\r",
													"};\r",
													"\r",
													"var getToken = true;\r",
													"\r",
													"if (!pm.environment.get('masterTokenExpiry') || \r",
													"    !pm.environment.get('masterToken')) {\r",
													"    console.log('Token or expiry date are missing')\r",
													"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
													"    console.log('Token is expired')\r",
													"} else {\r",
													"    getToken = false;\r",
													"    console.log('Token and expiry date are all good');\r",
													"}\r",
													"\r",
													"if (getToken === true) {\r",
													"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
													"    console.log(err ? err : res.json());\r",
													"        if (err === null) {\r",
													"            console.log('Saving the token and expiry date')\r",
													"            var responseJson = res.json();\r",
													"            pm.environment.set('masterToken', responseJson.access_token)\r",
													"    \r",
													"            var expiryDate = new Date();\r",
													"pm.globals.get(\"variable_key\");\r",
													"pm.globals.get(\"variable_key\");\r",
													"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
													"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
													"        }\r",
													"    });\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{masterToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{BMSurl}}/{{crop}}/brapi/v2/search/observationunits/{{searchResultDbId2_germplasmDbId}}?page=0&pageSize=10000",
											"host": [
												"{{BMSurl}}"
											],
											"path": [
												"{{crop}}",
												"brapi",
												"v2",
												"search",
												"observationunits",
												"{{searchResultDbId2_germplasmDbId}}"
											],
											"query": [
												{
													"key": "page",
													"value": "0"
												},
												{
													"key": "pageSize",
													"value": "10000"
												}
											]
										},
										"description": "GET ​/{crop}​/brapi​/v2​/search​/observationunits​/{searchResultsDbid}"
									},
									"response": []
								},
								{
									"name": "Verify results when entered searchResultsDbid that filters by locationDbId",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Verify returned metadata\", function () {",
													" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
													" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(10000);",
													" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(180);",
													" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
													" pm.expect(jsonData.metadata.status).to.eql([]);",
													" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
													"});",
													"",
													"pm.test(\"Check if all data has correct locationDbId\", function () {",
													"  var jsonData = pm.response.json();",
													"  var dataLength = jsonData.result.data.length;",
													"",
													"  for (i = 0; i < dataLength ; i++) {",
													"      var data = jsonData.result.data[i];",
													"      pm.expect(data.locationDbId).to.eql(\"9001\");",
													"  }",
													" ",
													"});    ",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const echoPostRequest = {\r",
													"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
													"  method: 'POST',\r",
													"  header: 'Content-Type:application/json',\r",
													"  body: {\r",
													"    mode: 'application/json',\r",
													"    raw: JSON.stringify({\r",
													"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
													"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
													"        \t\"grant_type\": \"\",\r",
													"            \"client_id\": \"\"\r",
													"        })\r",
													"  }\r",
													"};\r",
													"\r",
													"var getToken = true;\r",
													"\r",
													"if (!pm.environment.get('masterTokenExpiry') || \r",
													"    !pm.environment.get('masterToken')) {\r",
													"    console.log('Token or expiry date are missing')\r",
													"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
													"    console.log('Token is expired')\r",
													"} else {\r",
													"    getToken = false;\r",
													"    console.log('Token and expiry date are all good');\r",
													"}\r",
													"\r",
													"if (getToken === true) {\r",
													"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
													"    console.log(err ? err : res.json());\r",
													"        if (err === null) {\r",
													"            console.log('Saving the token and expiry date')\r",
													"            var responseJson = res.json();\r",
													"            pm.environment.set('masterToken', responseJson.access_token)\r",
													"    \r",
													"            var expiryDate = new Date();\r",
													"pm.globals.get(\"variable_key\");\r",
													"pm.globals.get(\"variable_key\");\r",
													"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
													"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
													"        }\r",
													"    });\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{masterToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{BMSurl}}/{{crop}}/brapi/v2/search/observationunits/{{searchResultDbId2_locationDbId}}?page=0&pageSize=10000",
											"host": [
												"{{BMSurl}}"
											],
											"path": [
												"{{crop}}",
												"brapi",
												"v2",
												"search",
												"observationunits",
												"{{searchResultDbId2_locationDbId}}"
											],
											"query": [
												{
													"key": "page",
													"value": "0"
												},
												{
													"key": "pageSize",
													"value": "10000"
												}
											]
										},
										"description": "GET ​/{crop}​/brapi​/v2​/search​/observationunits​/{searchResultsDbid}"
									},
									"response": []
								},
								{
									"name": "Verify results when entered searchResultsDbid that filters by observationLevel",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Verify returned metadata\", function () {",
													"  pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
													"  pm.expect(jsonData.metadata.pagination.pageSize).to.eql(10000);",
													"  pm.expect(jsonData.metadata.pagination.totalCount).to.eql(618);",
													"  pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
													"  pm.expect(jsonData.metadata.status).to.eql([]);",
													"  pm.expect(jsonData.metadata.datafiles).to.eql([]);",
													"});",
													"",
													"pm.test(\"Check if all data has correct observationLevel\", function () {",
													"  var jsonData = pm.response.json();",
													"  var dataLength = jsonData.result.data.length;",
													"",
													"  for (i = 0; i < dataLength; i++) {",
													"    var data = jsonData.result.data[i];",
													"    pm.expect(data.observationUnitPosition.observationLevel.levelName).to.eql(\"PLOT\");",
													"  }",
													"",
													"});    ",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const echoPostRequest = {\r",
													"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
													"  method: 'POST',\r",
													"  header: 'Content-Type:application/json',\r",
													"  body: {\r",
													"    mode: 'application/json',\r",
													"    raw: JSON.stringify({\r",
													"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
													"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
													"        \t\"grant_type\": \"\",\r",
													"            \"client_id\": \"\"\r",
													"        })\r",
													"  }\r",
													"};\r",
													"\r",
													"var getToken = true;\r",
													"\r",
													"if (!pm.environment.get('masterTokenExpiry') || \r",
													"    !pm.environment.get('masterToken')) {\r",
													"    console.log('Token or expiry date are missing')\r",
													"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
													"    console.log('Token is expired')\r",
													"} else {\r",
													"    getToken = false;\r",
													"    console.log('Token and expiry date are all good');\r",
													"}\r",
													"\r",
													"if (getToken === true) {\r",
													"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
													"    console.log(err ? err : res.json());\r",
													"        if (err === null) {\r",
													"            console.log('Saving the token and expiry date')\r",
													"            var responseJson = res.json();\r",
													"            pm.environment.set('masterToken', responseJson.access_token)\r",
													"    \r",
													"            var expiryDate = new Date();\r",
													"pm.globals.get(\"variable_key\");\r",
													"pm.globals.get(\"variable_key\");\r",
													"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
													"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
													"        }\r",
													"    });\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{masterToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{BMSurl}}/{{crop}}/brapi/v2/search/observationunits/{{searchResultDbId2_observationLevel}}?page=0&pageSize=10000",
											"host": [
												"{{BMSurl}}"
											],
											"path": [
												"{{crop}}",
												"brapi",
												"v2",
												"search",
												"observationunits",
												"{{searchResultDbId2_observationLevel}}"
											],
											"query": [
												{
													"key": "page",
													"value": "0"
												},
												{
													"key": "pageSize",
													"value": "10000"
												}
											]
										},
										"description": "GET ​/{crop}​/brapi​/v2​/search​/observationunits​/{searchResultsDbid}"
									},
									"response": []
								},
								{
									"name": "Verify results when entered searchResultsDbid that filters by observationUnitDbId",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Verify returned metadata\", function () {",
													" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
													" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(10000);",
													" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(1);",
													" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
													" pm.expect(jsonData.metadata.status).to.eql([]);",
													" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
													"});",
													"",
													"pm.test(\"Check if all data has correct observationUnitDbId\", function () {",
													"  var jsonData = pm.response.json();",
													"  var dataLength = jsonData.result.data.length;",
													"",
													"  for (i = 0; i < dataLength ; i++) {",
													"      var data = jsonData.result.data[i];",
													"      pm.expect(data.observationUnitDbId).to.eql(pm.environment.get(\"createdObservationUnitDbId\"));",
													"  }",
													" ",
													"});    ",
													"",
													"//Check details of result",
													"var index = 0;",
													"pm.test(\"Check additionalInfo ENTRY_NO\", function () {",
													"    pm.expect(jsonData.result.data[index].additionalInfo.ENTRY_NO).to.eql(\"1\");",
													"});",
													"",
													"pm.test(\"Check externalReferences referenceID\", function () {",
													"    pm.expect(jsonData.result.data[index].externalReferences[0].referenceID).to.eql(\"refID\");",
													"});",
													"pm.test(\"Check externalReferences referenceSource\", function () {",
													"    pm.expect(jsonData.result.data[index].externalReferences[0].referenceSource).to.eql(\"referenceSource\");",
													"});",
													"",
													"pm.test(\"Check if observationUnitDbId is correct\", function () {",
													"    pm.expect(jsonData.result.data[index].observationUnitDbId).to.eql(pm.environment.get(\"createdObservationUnitDbId\"));",
													"});",
													"pm.test(\"Check if observationUnitName is correct\", function () {",
													"    pm.expect(jsonData.result.data[index].observationUnitName).to.eql(\"PLOT1\");",
													"});",
													"pm.test(\"Check if germplasmDbId is correct\", function () {",
													"    pm.expect(jsonData.result.data[index].germplasmDbId).to.eql(\"PKWDG942cd372\");",
													"});",
													"",
													"pm.test(\"Check if germplasmName is correct\", function () {",
													"    pm.expect(jsonData.result.data[index].germplasmName).to.eql(\"CML1\");",
													"});",
													"",
													"pm.test(\"Check if studyDbId is correct\", function () {",
													"    pm.expect(jsonData.result.data[index].studyDbId).to.eql(pm.environment.get(\"createdStudyDbId1\"));",
													"});",
													"",
													"pm.test(\"Check if studyName is correct\", function () {",
													"    pm.expect(jsonData.result.data[index].studyName).to.eql(\"Study w complete details_1\");",
													"});",
													"pm.test(\"Check if programName is correct\", function () {",
													"    pm.expect(jsonData.result.data[index].programName).to.eql(\"API Program\");",
													"});",
													"//Check observations object",
													"pm.test(\"Check observationsDbId\", function () {",
													"var observationsDbIds = [pm.environment.get(\"createdObservationDbId1\"),pm.environment.get(\"createdObservationDbId2\"),pm.environment.get(\"createdObservationDbId3\"),pm.environment.get(\"createdObservationDbId4\")];",
													"    for(var i = 0; i< jsonData.result.data[index].observations.length;i++){",
													"     pm.expect(jsonData.result.data[index].observations[i].observationDbId).to.eql(observationsDbIds[i]);",
													"",
													"    }",
													"",
													"});",
													"",
													"pm.test(\"Check observationVariableDbId\", function () {",
													"var observationVariableDbIds = [\"8390\",\"18010\",\"18050\",\"8630\"];",
													"    for(var i = 0; i< jsonData.result.data[index].observations.length;i++){",
													"     pm.expect(jsonData.result.data[index].observations[i].observationVariableDbId).to.eql(observationVariableDbIds[i]);",
													"",
													"    }",
													"",
													"});",
													"pm.test(\"Check observationVariableName\", function () {",
													"var observationVariableNames = [\"NOTES\",\"Biomas_yield\",\"DisPressure_0_9\",\"GermiTest_date\"];",
													"    for(var i = 0; i< jsonData.result.data[index].observations.length;i++){",
													"     pm.expect(jsonData.result.data[index].observations[i].observationVariableName).to.eql(observationVariableNames[i]);",
													"",
													"    }",
													"",
													"});",
													"",
													"pm.test(\"Check observationTimeStamp\", function () {",
													"var observationTimeStamps = [",
													"    pm.environment.get(\"createdObservationTimestamp1\"),pm.environment.get(\"createdObservationTimestamp2\"),pm.environment.get(\"createdObservationTimestamp3\"),pm.environment.get(\"createdObservationTimestamp4\")",
													"    ];",
													"    for(var i = 0; i< jsonData.result.data[index].observations.length;i++){",
													"     pm.expect(jsonData.result.data[index].observations[i].observationTimeStamp).to.eql(observationTimeStamps[i]);",
													"",
													"    }",
													"",
													"pm.test(\"Check if observations season\", function () {",
													"    for (var i = 0; i < jsonData.result.data[index].observations.length; i++ ){",
													"        pm.expect(jsonData.result.data[index].observations[i].season.season).to.eql(\"Dry season\");",
													"    }",
													"});",
													"pm.test(\"Check if observations seasonDbId\", function () {",
													"    for (var i = 0; i < jsonData.result.data[index].observations.length; i++ ){",
													"        pm.expect(jsonData.result.data[index].observations[i].season.seasonDbId).to.eql(\"10290\");",
													"    }",
													"});",
													"pm.test(\"Check if collector is null\", function () {",
													"    for (var i = 0; i < jsonData.result.data[index].observations.length; i++ ){",
													"        pm.expect(jsonData.result.data[index].observations[i].collector).to.be.null;",
													"    }",
													"});",
													"pm.test(\"Check observations value\", function () {",
													"    var values = [\"note2\",\"456\",\"7\",\"20211020\"];",
													"    for (var i = 0; i < jsonData.result.data[index].observations.length; i++ ){",
													"        pm.expect(jsonData.result.data[index].observations[i].value).to.eql(values[i]);",
													"    }",
													"});",
													"",
													"",
													"",
													"",
													"});",
													"pm.test(\"Check if locationDbId is correct\", function () {",
													"    pm.expect(jsonData.result.data[index].locationDbId).to.eql(\"3953\");",
													"});",
													"",
													"pm.test(\"Check if locationName is correct\", function () {",
													"    pm.expect(jsonData.result.data[index].locationName).to.eql(\"Aargau\");",
													"});",
													"pm.test(\"Check if observationUnitPUI is correct\", function () {",
													"    pm.expect(jsonData.result.data[index].observationUnitPUI).to.eql(\"\");",
													"});",
													"",
													"pm.test(\"Check if observationUnitPosition entryType is correct\", function () {",
													"    pm.expect(jsonData.result.data[index].observationUnitPosition.entryType).to.eql(\"Test entry\");",
													"});",
													"pm.test(\"Check if observationUnitPosition geoCoordinates geomtry coordinates are correct\", function () {",
													"    pm.expect(jsonData.result.data[index].observationUnitPosition.geoCoordinates.geometry.coordinates).to.eql([-76.506042,42.417373,123]);",
													"});",
													"pm.test(\"Check if observationUnitPosition geoCoordinates geometry type is correct\", function () {",
													"    pm.expect(jsonData.result.data[index].observationUnitPosition.geoCoordinates.geometry.type).to.eql(\"Point\");",
													"});",
													"pm.test(\"Check if observationUnitPosition geoCoordinates type is correct\", function () {",
													"    pm.expect(jsonData.result.data[index].observationUnitPosition.geoCoordinates.type).to.eql(\"Feature\");",
													"});",
													"",
													"pm.test(\"Check if observationUnitPosition observationLevel is correct\", function () {",
													"    pm.expect(jsonData.result.data[index].observationUnitPosition.observationLevel.levelName).to.eql(\"PLOT\");",
													"});",
													"",
													"//Check observationLevelRelationships",
													"pm.test(\"Check if observationLevelRelationships levelCode is correct\", function () {",
													"    var levelCodes = [\"1\",\"1\",\"1\"];",
													"     for (var i = 0; i < jsonData.result.data[index].observationUnitPosition.observationLevelRelationships.length; i++) {   ",
													"    pm.expect(jsonData.result.data[index].observationUnitPosition.observationLevelRelationships[i].levelCode).to.eql(levelCodes[i]);",
													"    }",
													"});",
													"",
													"pm.test(\"Check if observationLevelRelationships levelName is correct\", function () {",
													"    var levelNames = [\"PLOT\",\"REP\",\"BLOCK\"];",
													"     for (var i = 0; i < jsonData.result.data[index].observationUnitPosition.observationLevelRelationships.length; i++) {   ",
													"    pm.expect(jsonData.result.data[index].observationUnitPosition.observationLevelRelationships[i].levelName).to.eql(levelNames[i]);",
													"    }",
													"});",
													"pm.test(\"Check if observationLevelRelationships levelOrder is null\", function () {",
													"     for (var i = 0; i < jsonData.result.data[index].observationUnitPosition.observationLevelRelationships.length; i++) {   ",
													"    pm.expect(jsonData.result.data[index].observationUnitPosition.observationLevelRelationships[i].levelOrder).to.be.null;",
													"    }",
													"});",
													"",
													"pm.test(\"Check if observationUnitPosition positionCoordinateX is correct\", function () {",
													"    pm.expect(jsonData.result.data[index].observationUnitPosition.positionCoordinateX).to.eql(\"1\");",
													"});",
													"pm.test(\"Check if observationUnitPosition positionCoordinateXType is correct\", function () {",
													"    pm.expect(jsonData.result.data[index].observationUnitPosition.positionCoordinateXType).to.eql(\"GRID_COL\");",
													"});",
													"pm.test(\"Check if observationUnitPosition positionCoordinateY is correct\", function () {",
													"    pm.expect(jsonData.result.data[index].observationUnitPosition.positionCoordinateY).to.eql(\"2\");",
													"});",
													"pm.test(\"Check if observationUnitPosition positionCoordinateYType is correct\", function () {",
													"    pm.expect(jsonData.result.data[index].observationUnitPosition.positionCoordinateYType).to.eql(\"GRID_ROW\");",
													"});",
													"",
													"pm.test(\"Check if programDbId is correct\", function () {",
													"    pm.expect(jsonData.result.data[index].programDbId).to.eql(pm.environment.get(\"programDbId\"));",
													"});",
													"pm.test(\"Check if seedLotDbId is null\", function () {",
													"    pm.expect(jsonData.result.data[index].seedLotDbId).to.be.null;",
													"});",
													"pm.test(\"Check if treatments is empty\", function () {",
													"    pm.expect(jsonData.result.data[index].treatments).to.be.eql([]);",
													"});",
													"pm.test(\"Check if trialDbId is correct\", function () {",
													"    pm.expect(jsonData.result.data[index].trialDbId).to.eql(pm.environment.get(\"createdTrialDbId\"));",
													"});",
													"pm.test(\"Check if trialName is correct\", function () {",
													"    pm.expect(jsonData.result.data[index].trialName).to.eql(\"Study w complete details\");",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const echoPostRequest = {\r",
													"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
													"  method: 'POST',\r",
													"  header: 'Content-Type:application/json',\r",
													"  body: {\r",
													"    mode: 'application/json',\r",
													"    raw: JSON.stringify({\r",
													"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
													"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
													"        \t\"grant_type\": \"\",\r",
													"            \"client_id\": \"\"\r",
													"        })\r",
													"  }\r",
													"};\r",
													"\r",
													"var getToken = true;\r",
													"\r",
													"if (!pm.environment.get('masterTokenExpiry') || \r",
													"    !pm.environment.get('masterToken')) {\r",
													"    console.log('Token or expiry date are missing')\r",
													"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
													"    console.log('Token is expired')\r",
													"} else {\r",
													"    getToken = false;\r",
													"    console.log('Token and expiry date are all good');\r",
													"}\r",
													"\r",
													"if (getToken === true) {\r",
													"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
													"    console.log(err ? err : res.json());\r",
													"        if (err === null) {\r",
													"            console.log('Saving the token and expiry date')\r",
													"            var responseJson = res.json();\r",
													"            pm.environment.set('masterToken', responseJson.access_token)\r",
													"    \r",
													"            var expiryDate = new Date();\r",
													"pm.globals.get(\"variable_key\");\r",
													"pm.globals.get(\"variable_key\");\r",
													"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
													"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
													"        }\r",
													"    });\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{masterToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{BMSurl}}/{{crop}}/brapi/v2/search/observationunits/{{searchResultDbId2_observationUnitDbId}}?page=0&pageSize=10000",
											"host": [
												"{{BMSurl}}"
											],
											"path": [
												"{{crop}}",
												"brapi",
												"v2",
												"search",
												"observationunits",
												"{{searchResultDbId2_observationUnitDbId}}"
											],
											"query": [
												{
													"key": "page",
													"value": "0"
												},
												{
													"key": "pageSize",
													"value": "10000"
												}
											]
										},
										"description": "GET ​/{crop}​/brapi​/v2​/search​/observationunits​/{searchResultsDbid}"
									},
									"response": []
								},
								{
									"name": "Verify results when entered searchResultsDbid that filters by programDbId",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Verify returned metadata\", function () {",
													"  pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
													"  pm.expect(jsonData.metadata.pagination.pageSize).to.eql(10000);",
													"  pm.expect(jsonData.metadata.pagination.totalCount).to.eql(2618);",
													"  pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
													"  pm.expect(jsonData.metadata.status).to.eql([]);",
													"  pm.expect(jsonData.metadata.datafiles).to.eql([]);",
													"});",
													"",
													"pm.test(\"Check if all data has correct programDbId\", function () {",
													"  var jsonData = pm.response.json();",
													"  var dataLength = jsonData.result.data.length;",
													"",
													"  for (i = 0; i < dataLength; i++) {",
													"    var data = jsonData.result.data[i];",
													"    pm.expect(data.programDbId).to.eql(pm.environment.get(\"api_program_id\"));",
													"  }",
													"",
													"});    ",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const echoPostRequest = {\r",
													"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
													"  method: 'POST',\r",
													"  header: 'Content-Type:application/json',\r",
													"  body: {\r",
													"    mode: 'application/json',\r",
													"    raw: JSON.stringify({\r",
													"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
													"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
													"        \t\"grant_type\": \"\",\r",
													"            \"client_id\": \"\"\r",
													"        })\r",
													"  }\r",
													"};\r",
													"\r",
													"var getToken = true;\r",
													"\r",
													"if (!pm.environment.get('masterTokenExpiry') || \r",
													"    !pm.environment.get('masterToken')) {\r",
													"    console.log('Token or expiry date are missing')\r",
													"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
													"    console.log('Token is expired')\r",
													"} else {\r",
													"    getToken = false;\r",
													"    console.log('Token and expiry date are all good');\r",
													"}\r",
													"\r",
													"if (getToken === true) {\r",
													"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
													"    console.log(err ? err : res.json());\r",
													"        if (err === null) {\r",
													"            console.log('Saving the token and expiry date')\r",
													"            var responseJson = res.json();\r",
													"            pm.environment.set('masterToken', responseJson.access_token)\r",
													"    \r",
													"            var expiryDate = new Date();\r",
													"pm.globals.get(\"variable_key\");\r",
													"pm.globals.get(\"variable_key\");\r",
													"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
													"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
													"        }\r",
													"    });\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{masterToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{BMSurl}}/{{crop}}/brapi/v2/search/observationunits/{{searchResultDbId2_programDbId}}?page=0&pageSize=10000",
											"host": [
												"{{BMSurl}}"
											],
											"path": [
												"{{crop}}",
												"brapi",
												"v2",
												"search",
												"observationunits",
												"{{searchResultDbId2_programDbId}}"
											],
											"query": [
												{
													"key": "page",
													"value": "0"
												},
												{
													"key": "pageSize",
													"value": "10000"
												}
											]
										},
										"description": "GET ​/{crop}​/brapi​/v2​/search​/observationunits​/{searchResultsDbid}"
									},
									"response": []
								},
								{
									"name": "Verify results when entered searchResultsDbid that filters by programDbId wtih pagination details",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Verify returned metadata\", function () {",
													"  pm.expect(jsonData.metadata.pagination.currentPage).to.eql(1);",
													"  pm.expect(jsonData.metadata.pagination.pageSize).to.eql(10);",
													"  pm.expect(jsonData.metadata.pagination.totalCount).to.eql(2618);",
													"  pm.expect(jsonData.metadata.pagination.totalPages).to.eql(262);",
													"  pm.expect(jsonData.metadata.status).to.eql([]);",
													"  pm.expect(jsonData.metadata.datafiles).to.eql([]);",
													"});",
													"",
													"pm.test(\"Check if all data has correct programDbId\", function () {",
													"  var jsonData = pm.response.json();",
													"  var dataLength = jsonData.result.data.length;",
													"",
													"  for (i = 0; i < dataLength; i++) {",
													"    var data = jsonData.result.data[i];",
													"    pm.expect(data.programDbId).to.eql(pm.environment.get(\"api_program_id\"));",
													"  }",
													"",
													"});    ",
													"",
													"//Check details of result",
													"var index = 0;",
													"pm.test(\"Check additionalInfo ENTRY_NO\", function () {",
													"    pm.expect(jsonData.result.data[index].additionalInfo.ENTRY_NO).to.eql(\"11\");",
													"});",
													"",
													"pm.test(\"Check externalReferences\", function () {",
													"    pm.expect(jsonData.result.data[index].externalReferences).to.eql(null);",
													"});",
													"",
													"",
													"pm.test(\"Check if observationUnitDbId is correct\", function () {",
													"    pm.expect(jsonData.result.data[index].observationUnitDbId).to.eql(\"PKWDP0fPOkMaC\");",
													"});",
													"pm.test(\"Check if observationUnitName is correct\", function () {",
													"    pm.expect(jsonData.result.data[index].observationUnitName).to.eql(\"PLOT11\");",
													"});",
													"pm.test(\"Check if germplasmDbId is correct\", function () {",
													"    pm.expect(jsonData.result.data[index].germplasmDbId).to.eql(\"PKWDG225f1813\");",
													"});",
													"",
													"pm.test(\"Check if germplasmName is correct\", function () {",
													"    pm.expect(jsonData.result.data[index].germplasmName).to.eql(\"GP11\");",
													"});",
													"",
													"pm.test(\"Check if studyDbId is correct\", function () {",
													"    pm.expect(jsonData.result.data[index].studyDbId).to.eql(\"1\");",
													"});",
													"",
													"pm.test(\"Check if studyName is correct\", function () {",
													"    pm.expect(jsonData.result.data[index].studyName).to.eql(\"Study with Imported Cross Nursery 2018002_1\");",
													"});",
													"pm.test(\"Check if programName is correct\", function () {",
													"    pm.expect(jsonData.result.data[index].programName).to.eql(\"API Program\");",
													"});",
													"",
													"//Check observations",
													"pm.test(\"Check observations observationDbId\", function () {",
													"    var observationDbIds = [\"510\",\"65099\",\"65100\",\"65101\"];",
													"    for (var i = 0; i < jsonData.result.data[index].observations.length; i++ ){",
													"        pm.expect(jsonData.result.data[index].observations[i].observationDbId).to.eql(observationDbIds[i]);",
													"    }",
													"});",
													"pm.test(\"Check observations observationVariableDbId\", function () {",
													"    var observationVariableDbIds = [\"8263\",\"18100\",\"18000\",\"18010\"];",
													"    for (var i = 0; i < jsonData.result.data[index].observations.length; i++ ){",
													"        pm.expect(jsonData.result.data[index].observations[i].observationVariableDbId).to.eql(observationVariableDbIds[i]);",
													"    }",
													"});",
													"pm.test(\"Check observations observationVariableName\", function () {",
													"    var observationVariableNames = [",
													"        \"NPSEL\",",
													"        \"WeedPressure_number\",",
													"        \"Grain_yield\",",
													"        \"Biomas_yield\"",
													"        ];",
													"    for (var i = 0; i < jsonData.result.data[index].observations.length; i++ ){",
													"        pm.expect(jsonData.result.data[index].observations[i].observationVariableName).to.eql(observationVariableNames[i]);",
													"    }",
													"});",
													"pm.test(\"Check observations observationTimeStamp\", function () {",
													"    var observationTimeStamps = [",
													"        \"2018-10-26T00:00:00.000+08:00\",",
													"        \"2020-09-30T00:00:00.000+08:00\",",
													"        \"2020-09-30T00:00:00.000+08:00\",",
													"        \"2020-09-30T00:00:00.000+08:00\"",
													"        ];",
													"    for (var i = 0; i < jsonData.result.data[index].observations.length; i++ ){",
													"        pm.expect(jsonData.result.data[index].observations[i].observationTimeStamp).to.eql(observationTimeStamps[i]);",
													"    }",
													"});",
													"pm.test(\"Check if observations season\", function () {",
													"    for (var i = 0; i < jsonData.result.data[index].observations.length; i++ ){",
													"        pm.expect(jsonData.result.data[index].observations[i].season.season).to.eql(\"Dry season\");",
													"    }",
													"});",
													"pm.test(\"Check if observations seasonDbId\", function () {",
													"    for (var i = 0; i < jsonData.result.data[index].observations.length; i++ ){",
													"        pm.expect(jsonData.result.data[index].observations[i].season.seasonDbId).to.eql(\"10290\");",
													"    }",
													"});",
													"pm.test(\"Check if collector is null\", function () {",
													"    for (var i = 0; i < jsonData.result.data[index].observations.length; i++ ){",
													"        pm.expect(jsonData.result.data[index].observations[i].collector).to.be.null;",
													"    }",
													"});",
													"pm.test(\"Check observations value\", function () {",
													"    var values = [\"2\",\"39\",\"20\",\"31\"];",
													"    for (var i = 0; i < jsonData.result.data[index].observations.length; i++ ){",
													"        pm.expect(jsonData.result.data[index].observations[i].value).to.eql(values[i]);",
													"    }",
													"});",
													"",
													"",
													"",
													"//End",
													"",
													"pm.test(\"Check if locationDbId is correct\", function () {",
													"    pm.expect(jsonData.result.data[index].locationDbId).to.eql(\"9001\");",
													"});",
													"",
													"pm.test(\"Check if locationName is correct\", function () {",
													"    pm.expect(jsonData.result.data[index].locationName).to.eql(\"Africa Rice Centre\");",
													"});",
													"pm.test(\"Check if observationUnitPUI is correct\", function () {",
													"    pm.expect(jsonData.result.data[index].observationUnitPUI).to.eql(\"\");",
													"});",
													"",
													"pm.test(\"Check if observationUnitPosition entryType is correct\", function () {",
													"    pm.expect(jsonData.result.data[index].observationUnitPosition.entryType).to.eql(\"Test entry\");",
													"});",
													"pm.test(\"Check if observationUnitPosition geoCoordinates are correct\", function () {",
													"    pm.expect(jsonData.result.data[index].observationUnitPosition.geoCoordinates).to.eql(null);",
													"});",
													"",
													"pm.test(\"Check if observationUnitPosition observationLevel is correct\", function () {",
													"    pm.expect(jsonData.result.data[index].observationUnitPosition.observationLevel.levelName).to.eql(\"PLOT\");",
													"});",
													"",
													"//Check observationLevelRelationships",
													"pm.test(\"Check if observationLevelRelationships levelCode is correct\", function () {",
													"    var levelCodes = [\"11\"];",
													"     for (var i = 0; i < jsonData.result.data[index].observationUnitPosition.observationLevelRelationships.length; i++) {   ",
													"    pm.expect(jsonData.result.data[index].observationUnitPosition.observationLevelRelationships[i].levelCode).to.eql(levelCodes[i]);",
													"    }",
													"});",
													"",
													"pm.test(\"Check if observationLevelRelationships levelName is correct\", function () {",
													"    var levelNames = [\"PLOT\"];",
													"     for (var i = 0; i < jsonData.result.data[index].observationUnitPosition.observationLevelRelationships.length; i++) {   ",
													"    pm.expect(jsonData.result.data[index].observationUnitPosition.observationLevelRelationships[i].levelName).to.eql(levelNames[i]);",
													"    }",
													"});",
													"pm.test(\"Check if observationLevelRelationships levelOrder is null\", function () {",
													"     for (var i = 0; i < jsonData.result.data[index].observationUnitPosition.observationLevelRelationships.length; i++) {   ",
													"    pm.expect(jsonData.result.data[index].observationUnitPosition.observationLevelRelationships[i].levelOrder).to.be.null;",
													"    }",
													"});",
													"",
													"",
													"",
													"pm.test(\"Check if observationUnitPosition positionCoordinateX is correct\", function () {",
													"    pm.expect(jsonData.result.data[index].observationUnitPosition.positionCoordinateX).to.eql(null);",
													"});",
													"pm.test(\"Check if observationUnitPosition positionCoordinateXType is correct\", function () {",
													"    pm.expect(jsonData.result.data[index].observationUnitPosition.positionCoordinateXType).to.eql(null);",
													"});",
													"pm.test(\"Check if observationUnitPosition positionCoordinateY is correct\", function () {",
													"    pm.expect(jsonData.result.data[index].observationUnitPosition.positionCoordinateY).to.eql(null);",
													"});",
													"pm.test(\"Check if observationUnitPosition positionCoordinateYType is correct\", function () {",
													"    pm.expect(jsonData.result.data[index].observationUnitPosition.positionCoordinateYType).to.eql(null);",
													"});",
													"",
													"pm.test(\"Check if programDbId is correct\", function () {",
													"    pm.expect(jsonData.result.data[index].programDbId).to.eql(pm.environment.get(\"programDbId\"));",
													"});",
													"pm.test(\"Check if seedLotDbId is null\", function () {",
													"    pm.expect(jsonData.result.data[index].seedLotDbId).to.be.null;",
													"});",
													"pm.test(\"Check if treatments is empty\", function () {",
													"    pm.expect(jsonData.result.data[index].treatments).to.be.eql([]);",
													"});",
													"pm.test(\"Check if trialDbId is correct\", function () {",
													"    pm.expect(jsonData.result.data[index].trialDbId).to.eql(\"3009\");",
													"});",
													"pm.test(\"Check if trialName is correct\", function () {",
													"    pm.expect(jsonData.result.data[index].trialName).to.eql(\"Study with Imported Cross Nursery 2018002\");",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const echoPostRequest = {\r",
													"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
													"  method: 'POST',\r",
													"  header: 'Content-Type:application/json',\r",
													"  body: {\r",
													"    mode: 'application/json',\r",
													"    raw: JSON.stringify({\r",
													"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
													"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
													"        \t\"grant_type\": \"\",\r",
													"            \"client_id\": \"\"\r",
													"        })\r",
													"  }\r",
													"};\r",
													"\r",
													"var getToken = true;\r",
													"\r",
													"if (!pm.environment.get('masterTokenExpiry') || \r",
													"    !pm.environment.get('masterToken')) {\r",
													"    console.log('Token or expiry date are missing')\r",
													"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
													"    console.log('Token is expired')\r",
													"} else {\r",
													"    getToken = false;\r",
													"    console.log('Token and expiry date are all good');\r",
													"}\r",
													"\r",
													"if (getToken === true) {\r",
													"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
													"    console.log(err ? err : res.json());\r",
													"        if (err === null) {\r",
													"            console.log('Saving the token and expiry date')\r",
													"            var responseJson = res.json();\r",
													"            pm.environment.set('masterToken', responseJson.access_token)\r",
													"    \r",
													"            var expiryDate = new Date();\r",
													"pm.globals.get(\"variable_key\");\r",
													"pm.globals.get(\"variable_key\");\r",
													"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
													"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
													"        }\r",
													"    });\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{masterToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{BMSurl}}/{{crop}}/brapi/v2/search/observationunits/{{searchResultDbId2_programDbId}}?page=1&pageSize=10",
											"host": [
												"{{BMSurl}}"
											],
											"path": [
												"{{crop}}",
												"brapi",
												"v2",
												"search",
												"observationunits",
												"{{searchResultDbId2_programDbId}}"
											],
											"query": [
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "pageSize",
													"value": "10"
												}
											]
										},
										"description": "GET ​/{crop}​/brapi​/v2​/search​/observationunits​/{searchResultsDbid}"
									},
									"response": []
								},
								{
									"name": "Verify results when entered searchResultsDbid that filters by studyDbId",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Verify returned metadata\", function () {",
													" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
													" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(10000);",
													" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(60);",
													" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
													" pm.expect(jsonData.metadata.status).to.eql([]);",
													" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
													"});",
													"",
													"pm.test(\"Check if all data has correct studyDbId\", function () {",
													"  var jsonData = pm.response.json();",
													"  var dataLength = jsonData.result.data.length;",
													"",
													"  for (i = 0; i < dataLength ; i++) {",
													"      var data = jsonData.result.data[i];",
													"      pm.expect(data.studyDbId).to.eql(pm.environment.get(\"studyDbId\"));",
													"  }",
													" ",
													"});    ",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const echoPostRequest = {\r",
													"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
													"  method: 'POST',\r",
													"  header: 'Content-Type:application/json',\r",
													"  body: {\r",
													"    mode: 'application/json',\r",
													"    raw: JSON.stringify({\r",
													"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
													"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
													"        \t\"grant_type\": \"\",\r",
													"            \"client_id\": \"\"\r",
													"        })\r",
													"  }\r",
													"};\r",
													"\r",
													"var getToken = true;\r",
													"\r",
													"if (!pm.environment.get('masterTokenExpiry') || \r",
													"    !pm.environment.get('masterToken')) {\r",
													"    console.log('Token or expiry date are missing')\r",
													"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
													"    console.log('Token is expired')\r",
													"} else {\r",
													"    getToken = false;\r",
													"    console.log('Token and expiry date are all good');\r",
													"}\r",
													"\r",
													"if (getToken === true) {\r",
													"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
													"    console.log(err ? err : res.json());\r",
													"        if (err === null) {\r",
													"            console.log('Saving the token and expiry date')\r",
													"            var responseJson = res.json();\r",
													"            pm.environment.set('masterToken', responseJson.access_token)\r",
													"    \r",
													"            var expiryDate = new Date();\r",
													"pm.globals.get(\"variable_key\");\r",
													"pm.globals.get(\"variable_key\");\r",
													"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
													"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
													"        }\r",
													"    });\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{masterToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{BMSurl}}/{{crop}}/brapi/v2/search/observationunits/{{searchResultDbId2_studyDbId}}?page=0&pageSize=10000",
											"host": [
												"{{BMSurl}}"
											],
											"path": [
												"{{crop}}",
												"brapi",
												"v2",
												"search",
												"observationunits",
												"{{searchResultDbId2_studyDbId}}"
											],
											"query": [
												{
													"key": "page",
													"value": "0"
												},
												{
													"key": "pageSize",
													"value": "10000"
												}
											]
										},
										"description": "GET ​/{crop}​/brapi​/v2​/search​/observationunits​/{searchResultsDbid}"
									},
									"response": []
								},
								{
									"name": "Verify results when entered searchResultsDbid that filters by externalReferenceSource",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Verify returned metadata\", function () {",
													" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
													" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(10000);",
													" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(195);",
													" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
													" pm.expect(jsonData.metadata.status).to.eql([]);",
													" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
													"});",
													"",
													"pm.test(\"Check if all data has correct externalReferenceSource\", function () {",
													"  var jsonData = pm.response.json();",
													"  var dataLength = jsonData.result.data.length;",
													"",
													"  for (i = 0; i < dataLength ; i++) {",
													"      var data = jsonData.result.data[i];",
													"      pm.expect(data.externalReferences[0].referenceSource).to.eql(\"referenceSource\");",
													"  }",
													" ",
													"});    ",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const echoPostRequest = {\r",
													"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
													"  method: 'POST',\r",
													"  header: 'Content-Type:application/json',\r",
													"  body: {\r",
													"    mode: 'application/json',\r",
													"    raw: JSON.stringify({\r",
													"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
													"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
													"        \t\"grant_type\": \"\",\r",
													"            \"client_id\": \"\"\r",
													"        })\r",
													"  }\r",
													"};\r",
													"\r",
													"var getToken = true;\r",
													"\r",
													"if (!pm.environment.get('masterTokenExpiry') || \r",
													"    !pm.environment.get('masterToken')) {\r",
													"    console.log('Token or expiry date are missing')\r",
													"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
													"    console.log('Token is expired')\r",
													"} else {\r",
													"    getToken = false;\r",
													"    console.log('Token and expiry date are all good');\r",
													"}\r",
													"\r",
													"if (getToken === true) {\r",
													"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
													"    console.log(err ? err : res.json());\r",
													"        if (err === null) {\r",
													"            console.log('Saving the token and expiry date')\r",
													"            var responseJson = res.json();\r",
													"            pm.environment.set('masterToken', responseJson.access_token)\r",
													"    \r",
													"            var expiryDate = new Date();\r",
													"pm.globals.get(\"variable_key\");\r",
													"pm.globals.get(\"variable_key\");\r",
													"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
													"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
													"        }\r",
													"    });\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{masterToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{BMSurl}}/{{crop}}/brapi/v2/search/observationunits/{{searchResultDbId2_referenceSource}}?page=0&pageSize=10000",
											"host": [
												"{{BMSurl}}"
											],
											"path": [
												"{{crop}}",
												"brapi",
												"v2",
												"search",
												"observationunits",
												"{{searchResultDbId2_referenceSource}}"
											],
											"query": [
												{
													"key": "page",
													"value": "0"
												},
												{
													"key": "pageSize",
													"value": "10000"
												}
											]
										},
										"description": "GET ​/{crop}​/brapi​/v2​/search​/observationunits​/{searchResultsDbid}"
									},
									"response": []
								},
								{
									"name": "Verify results when entered searchResultsDbid that filters by externalReferenceID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Verify returned metadata\", function () {",
													" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
													" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(10000);",
													" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(195);",
													" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
													" pm.expect(jsonData.metadata.status).to.eql([]);",
													" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
													"});",
													"",
													"pm.test(\"Check if all data has correct externalReferenceID\", function () {",
													"  var jsonData = pm.response.json();",
													"  var dataLength = jsonData.result.data.length;",
													"",
													"  for (i = 0; i < dataLength ; i++) {",
													"      var data = jsonData.result.data[i];",
													"      pm.expect(data.externalReferences[0].referenceID).to.eql(\"refID\");",
													"  }",
													" ",
													"});    ",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const echoPostRequest = {\r",
													"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
													"  method: 'POST',\r",
													"  header: 'Content-Type:application/json',\r",
													"  body: {\r",
													"    mode: 'application/json',\r",
													"    raw: JSON.stringify({\r",
													"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
													"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
													"        \t\"grant_type\": \"\",\r",
													"            \"client_id\": \"\"\r",
													"        })\r",
													"  }\r",
													"};\r",
													"\r",
													"var getToken = true;\r",
													"\r",
													"if (!pm.environment.get('masterTokenExpiry') || \r",
													"    !pm.environment.get('masterToken')) {\r",
													"    console.log('Token or expiry date are missing')\r",
													"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
													"    console.log('Token is expired')\r",
													"} else {\r",
													"    getToken = false;\r",
													"    console.log('Token and expiry date are all good');\r",
													"}\r",
													"\r",
													"if (getToken === true) {\r",
													"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
													"    console.log(err ? err : res.json());\r",
													"        if (err === null) {\r",
													"            console.log('Saving the token and expiry date')\r",
													"            var responseJson = res.json();\r",
													"            pm.environment.set('masterToken', responseJson.access_token)\r",
													"    \r",
													"            var expiryDate = new Date();\r",
													"pm.globals.get(\"variable_key\");\r",
													"pm.globals.get(\"variable_key\");\r",
													"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
													"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
													"        }\r",
													"    });\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{masterToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{BMSurl}}/{{crop}}/brapi/v2/search/observationunits/{{searchResultDbId2_externalReferenceID}}?page=0&pageSize=10000",
											"host": [
												"{{BMSurl}}"
											],
											"path": [
												"{{crop}}",
												"brapi",
												"v2",
												"search",
												"observationunits",
												"{{searchResultDbId2_externalReferenceID}}"
											],
											"query": [
												{
													"key": "page",
													"value": "0"
												},
												{
													"key": "pageSize",
													"value": "10000"
												}
											]
										},
										"description": "GET ​/{crop}​/brapi​/v2​/search​/observationunits​/{searchResultsDbid}"
									},
									"response": []
								},
								{
									"name": "Verify results when entered searchResultsDbid that filters by trialDbId",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Verify returned metadata\", function () {",
													" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
													" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(10000);",
													" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(4);",
													" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
													" pm.expect(jsonData.metadata.status).to.eql([]);",
													" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
													"});",
													"",
													"pm.test(\"Check if all data has correct trialDbId\", function () {",
													"  var jsonData = pm.response.json();",
													"  var dataLength = jsonData.result.data.length;",
													"",
													"  for (i = 0; i < dataLength ; i++) {",
													"      var data = jsonData.result.data[i];",
													"      pm.expect(data.trialDbId).to.eql(pm.environment.get(\"createdTrialDbId\"));",
													"  }",
													" ",
													"});    ",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const echoPostRequest = {\r",
													"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
													"  method: 'POST',\r",
													"  header: 'Content-Type:application/json',\r",
													"  body: {\r",
													"    mode: 'application/json',\r",
													"    raw: JSON.stringify({\r",
													"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
													"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
													"        \t\"grant_type\": \"\",\r",
													"            \"client_id\": \"\"\r",
													"        })\r",
													"  }\r",
													"};\r",
													"\r",
													"var getToken = true;\r",
													"\r",
													"if (!pm.environment.get('masterTokenExpiry') || \r",
													"    !pm.environment.get('masterToken')) {\r",
													"    console.log('Token or expiry date are missing')\r",
													"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
													"    console.log('Token is expired')\r",
													"} else {\r",
													"    getToken = false;\r",
													"    console.log('Token and expiry date are all good');\r",
													"}\r",
													"\r",
													"if (getToken === true) {\r",
													"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
													"    console.log(err ? err : res.json());\r",
													"        if (err === null) {\r",
													"            console.log('Saving the token and expiry date')\r",
													"            var responseJson = res.json();\r",
													"            pm.environment.set('masterToken', responseJson.access_token)\r",
													"    \r",
													"            var expiryDate = new Date();\r",
													"pm.globals.get(\"variable_key\");\r",
													"pm.globals.get(\"variable_key\");\r",
													"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
													"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
													"        }\r",
													"    });\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{masterToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{BMSurl}}/{{crop}}/brapi/v2/search/observationunits/{{searchResultDbId2_trialDbId}}?page=0&pageSize=10000",
											"host": [
												"{{BMSurl}}"
											],
											"path": [
												"{{crop}}",
												"brapi",
												"v2",
												"search",
												"observationunits",
												"{{searchResultDbId2_trialDbId}}"
											],
											"query": [
												{
													"key": "page",
													"value": "0"
												},
												{
													"key": "pageSize",
													"value": "10000"
												}
											]
										},
										"description": "GET ​/{crop}​/brapi​/v2​/search​/observationunits​/{searchResultsDbid}"
									},
									"response": []
								},
								{
									"name": "Verify results when entered searchResultsDbid that used all filters",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Verify returned metadata\", function () {",
													" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
													" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(10000);",
													" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(1);",
													" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
													" pm.expect(jsonData.metadata.status).to.eql([]);",
													" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
													"});",
													"",
													"",
													"//Check details of result",
													"var index = 0;",
													"pm.test(\"Check additionalInfo ENTRY_NO\", function () {",
													"    pm.expect(jsonData.result.data[index].additionalInfo.ENTRY_NO).to.eql(\"1\");",
													"});",
													"",
													"pm.test(\"Check externalReferences referenceID\", function () {",
													"    pm.expect(jsonData.result.data[index].externalReferences[0].referenceID).to.eql(\"refID\");",
													"});",
													"pm.test(\"Check externalReferences referenceSource\", function () {",
													"    pm.expect(jsonData.result.data[index].externalReferences[0].referenceSource).to.eql(\"referenceSource\");",
													"});",
													"",
													"pm.test(\"Check if observationUnitDbId is correct\", function () {",
													"    pm.expect(jsonData.result.data[index].observationUnitDbId).to.eql(pm.environment.get(\"createdObservationUnitDbId\"));",
													"});",
													"pm.test(\"Check if observationUnitName is correct\", function () {",
													"    pm.expect(jsonData.result.data[index].observationUnitName).to.eql(\"PLOT1\");",
													"});",
													"pm.test(\"Check if germplasmDbId is correct\", function () {",
													"    pm.expect(jsonData.result.data[index].germplasmDbId).to.eql(\"PKWDG942cd372\");",
													"});",
													"",
													"pm.test(\"Check if germplasmName is correct\", function () {",
													"    pm.expect(jsonData.result.data[index].germplasmName).to.eql(\"CML1\");",
													"});",
													"",
													"pm.test(\"Check if studyDbId is correct\", function () {",
													"    pm.expect(jsonData.result.data[index].studyDbId).to.eql(pm.environment.get(\"createdStudyDbId1\"));",
													"});",
													"",
													"pm.test(\"Check if studyName is correct\", function () {",
													"    pm.expect(jsonData.result.data[index].studyName).to.eql(\"Study w complete details_1\");",
													"});",
													"pm.test(\"Check if programName is correct\", function () {",
													"    pm.expect(jsonData.result.data[index].programName).to.eql(\"API Program\");",
													"});",
													"",
													"//Check observations",
													"pm.test(\"Check observations observationDbId\", function () {",
													"    var observationDbIds = [pm.environment.get(\"createdObservationDbId1\"),pm.environment.get(\"createdObservationDbId2\"),pm.environment.get(\"createdObservationDbId3\"),pm.environment.get(\"createdObservationDbId4\")];",
													"    for (var i = 0; i < jsonData.result.data[index].observations.length; i++ ){",
													"        pm.expect(jsonData.result.data[index].observations[i].observationDbId).to.eql(observationDbIds[i]);",
													"    }",
													"});",
													"pm.test(\"Check observations observationVariableDbId\", function () {",
													"    var observationVariableDbIds = [\"8390\",\"18010\",\"18050\",\"8630\"];",
													"    for (var i = 0; i < jsonData.result.data[index].observations.length; i++ ){",
													"        pm.expect(jsonData.result.data[index].observations[i].observationVariableDbId).to.eql(observationVariableDbIds[i]);",
													"    }",
													"});",
													"pm.test(\"Check observations observationVariableName\", function () {",
													"    var observationVariableNames = [\"NOTES\",\"Biomas_yield\",\"DisPressure_0_9\",\"GermiTest_date\"];",
													"    for (var i = 0; i < jsonData.result.data[index].observations.length; i++ ){",
													"        pm.expect(jsonData.result.data[index].observations[i].observationVariableName).to.eql(observationVariableNames[i]);",
													"    }",
													"});",
													"pm.test(\"Check observations observationTimeStamp\", function () {",
													"    var observationTimeStamps = [ pm.environment.get(\"createdObservationTimestamp1\"),pm.environment.get(\"createdObservationTimestamp2\"),pm.environment.get(\"createdObservationTimestamp3\"),pm.environment.get(\"createdObservationTimestamp4\")];",
													"    for (var i = 0; i < jsonData.result.data[index].observations.length; i++ ){",
													"        pm.expect(jsonData.result.data[index].observations[i].observationTimeStamp).to.eql(observationTimeStamps[i]);",
													"    }",
													"});",
													"pm.test(\"Check if observations season\", function () {",
													"    for (var i = 0; i < jsonData.result.data[index].observations.length; i++ ){",
													"        pm.expect(jsonData.result.data[index].observations[i].season.season).to.eql(\"Dry season\");",
													"    }",
													"});",
													"pm.test(\"Check if observations seasonDbId\", function () {",
													"    for (var i = 0; i < jsonData.result.data[index].observations.length; i++ ){",
													"        pm.expect(jsonData.result.data[index].observations[i].season.seasonDbId).to.eql(\"10290\");",
													"    }",
													"});",
													"pm.test(\"Check if collector is null\", function () {",
													"    for (var i = 0; i < jsonData.result.data[index].observations.length; i++ ){",
													"        pm.expect(jsonData.result.data[index].observations[i].collector).to.be.null;",
													"    }",
													"});",
													"pm.test(\"Check observations value\", function () {",
													"    var values = [\"note2\",\"456\",\"7\",\"20211020\"];",
													"    for (var i = 0; i < jsonData.result.data[index].observations.length; i++ ){",
													"        pm.expect(jsonData.result.data[index].observations[i].value).to.eql(values[i]);",
													"    }",
													"});",
													"",
													"pm.test(\"Check if locationDbId is correct\", function () {",
													"    pm.expect(jsonData.result.data[index].locationDbId).to.eql(\"3953\");",
													"});",
													"",
													"pm.test(\"Check if locationName is correct\", function () {",
													"    pm.expect(jsonData.result.data[index].locationName).to.eql(\"Aargau\");",
													"});",
													"pm.test(\"Check if observationUnitPUI is correct\", function () {",
													"    pm.expect(jsonData.result.data[index].observationUnitPUI).to.eql(\"\");",
													"});",
													"",
													"pm.test(\"Check if observationUnitPosition entryType is correct\", function () {",
													"    pm.expect(jsonData.result.data[index].observationUnitPosition.entryType).to.eql(\"Test entry\");",
													"});",
													"pm.test(\"Check if observationUnitPosition geoCoordinates geomtry coordinates are correct\", function () {",
													"    pm.expect(jsonData.result.data[index].observationUnitPosition.geoCoordinates.geometry.coordinates).to.eql([-76.506042,42.417373,123]);",
													"});",
													"pm.test(\"Check if observationUnitPosition geoCoordinates geometry type is correct\", function () {",
													"    pm.expect(jsonData.result.data[index].observationUnitPosition.geoCoordinates.geometry.type).to.eql(\"Point\");",
													"});",
													"pm.test(\"Check if observationUnitPosition geoCoordinates type is correct\", function () {",
													"    pm.expect(jsonData.result.data[index].observationUnitPosition.geoCoordinates.type).to.eql(\"Feature\");",
													"});",
													"",
													"pm.test(\"Check if observationUnitPosition observationLevel is correct\", function () {",
													"    pm.expect(jsonData.result.data[index].observationUnitPosition.observationLevel.levelName).to.eql(\"PLOT\");",
													"});",
													"",
													"//Check observationLevelRelationships",
													"pm.test(\"Check if observationLevelRelationships levelCode is correct\", function () {",
													"    var levelCodes = [\"1\",\"1\",\"1\"];",
													"     for (var i = 0; i < jsonData.result.data[index].observationUnitPosition.observationLevelRelationships.length; i++) {   ",
													"    pm.expect(jsonData.result.data[index].observationUnitPosition.observationLevelRelationships[i].levelCode).to.eql(levelCodes[i]);",
													"    }",
													"});",
													"",
													"pm.test(\"Check if observationLevelRelationships levelName is correct\", function () {",
													"    var levelNames = [\"PLOT\",\"REP\",\"BLOCK\"];",
													"     for (var i = 0; i < jsonData.result.data[index].observationUnitPosition.observationLevelRelationships.length; i++) {   ",
													"    pm.expect(jsonData.result.data[index].observationUnitPosition.observationLevelRelationships[i].levelName).to.eql(levelNames[i]);",
													"    }",
													"});",
													"pm.test(\"Check if observationLevelRelationships levelOrder is null\", function () {",
													"     for (var i = 0; i < jsonData.result.data[index].observationUnitPosition.observationLevelRelationships.length; i++) {   ",
													"    pm.expect(jsonData.result.data[index].observationUnitPosition.observationLevelRelationships[i].levelOrder).to.be.null;",
													"    }",
													"});",
													"",
													"pm.test(\"Check if observationUnitPosition positionCoordinateX is correct\", function () {",
													"    pm.expect(jsonData.result.data[index].observationUnitPosition.positionCoordinateX).to.eql(\"1\");",
													"});",
													"pm.test(\"Check if observationUnitPosition positionCoordinateXType is correct\", function () {",
													"    pm.expect(jsonData.result.data[index].observationUnitPosition.positionCoordinateXType).to.eql(\"GRID_COL\");",
													"});",
													"pm.test(\"Check if observationUnitPosition positionCoordinateY is correct\", function () {",
													"    pm.expect(jsonData.result.data[index].observationUnitPosition.positionCoordinateY).to.eql(\"2\");",
													"});",
													"pm.test(\"Check if observationUnitPosition positionCoordinateYType is correct\", function () {",
													"    pm.expect(jsonData.result.data[index].observationUnitPosition.positionCoordinateYType).to.eql(\"GRID_ROW\");",
													"});",
													"",
													"pm.test(\"Check if programDbId is correct\", function () {",
													"    pm.expect(jsonData.result.data[index].programDbId).to.eql(pm.environment.get(\"programDbId\"));",
													"});",
													"pm.test(\"Check if seedLotDbId is null\", function () {",
													"    pm.expect(jsonData.result.data[index].seedLotDbId).to.be.null;",
													"});",
													"pm.test(\"Check if treatments is empty\", function () {",
													"    pm.expect(jsonData.result.data[index].treatments).to.be.eql([]);",
													"});",
													"pm.test(\"Check if trialDbId is correct\", function () {",
													"    pm.expect(jsonData.result.data[index].trialDbId).to.eql(pm.environment.get(\"createdTrialDbId\"));",
													"});",
													"pm.test(\"Check if trialName is correct\", function () {",
													"    pm.expect(jsonData.result.data[index].trialName).to.eql(\"Study w complete details\");",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const echoPostRequest = {\r",
													"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
													"  method: 'POST',\r",
													"  header: 'Content-Type:application/json',\r",
													"  body: {\r",
													"    mode: 'application/json',\r",
													"    raw: JSON.stringify({\r",
													"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
													"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
													"        \t\"grant_type\": \"\",\r",
													"            \"client_id\": \"\"\r",
													"        })\r",
													"  }\r",
													"};\r",
													"\r",
													"var getToken = true;\r",
													"\r",
													"if (!pm.environment.get('masterTokenExpiry') || \r",
													"    !pm.environment.get('masterToken')) {\r",
													"    console.log('Token or expiry date are missing')\r",
													"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
													"    console.log('Token is expired')\r",
													"} else {\r",
													"    getToken = false;\r",
													"    console.log('Token and expiry date are all good');\r",
													"}\r",
													"\r",
													"if (getToken === true) {\r",
													"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
													"    console.log(err ? err : res.json());\r",
													"        if (err === null) {\r",
													"            console.log('Saving the token and expiry date')\r",
													"            var responseJson = res.json();\r",
													"            pm.environment.set('masterToken', responseJson.access_token)\r",
													"    \r",
													"            var expiryDate = new Date();\r",
													"pm.globals.get(\"variable_key\");\r",
													"pm.globals.get(\"variable_key\");\r",
													"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
													"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
													"        }\r",
													"    });\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{masterToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{BMSurl}}/{{crop}}/brapi/v2/search/observationunits/{{searchResultDbId2_combined}}?page=0&pageSize=10000",
											"host": [
												"{{BMSurl}}"
											],
											"path": [
												"{{crop}}",
												"brapi",
												"v2",
												"search",
												"observationunits",
												"{{searchResultDbId2_combined}}"
											],
											"query": [
												{
													"key": "page",
													"value": "0"
												},
												{
													"key": "pageSize",
													"value": "10000"
												}
											]
										},
										"description": "GET ​/{crop}​/brapi​/v2​/search​/observationunits​/{searchResultsDbid}"
									},
									"response": []
								}
							]
						}
					]
				}
			]
		}
	]
}
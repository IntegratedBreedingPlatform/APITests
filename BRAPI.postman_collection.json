{
	"info": {
		"_postman_id": "696b5b15-312f-4a52-a347-63d7bbd92399",
		"name": "BRAPI",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "authentication-controller-brapi",
			"item": [
				{
					"name": "Get admin token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "770338de-a7ae-407b-9239-9cb9a3487af3",
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.environment.unset(\"masterToken\");",
									"pm.environment.set(\"masterToken\", jsonData.access_token);",
									"pm.environment.unset(\"masterTokenExpiry\");",
									"pm.environment.set(\"masterTokenExpiry\", jsonData.expires_in);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{masterToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"username\": \"{{bms_user}}\",\r\n  \"password\": \"{{bms_password}}\",\r\n  \"grant_type\": \"\",\r\n  \"client_id\": \"\"\r\n}"
						},
						"url": {
							"raw": "{{BMSurl}}/brapi/v1/token",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"brapi",
								"v1",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get test user token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f5dca7e1-0175-4efc-a213-d81d4555fe33",
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.environment.unset(\"testuser_token\");",
									"pm.environment.set(\"testuser_token\", jsonData.access_token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{masterToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"username\": \"apitestuser\",\r\n  \"password\": \"apitestuser\",\r\n  \"grant_type\": \"\",\r\n  \"client_id\": \"\"\r\n}"
						},
						"url": {
							"raw": "{{BMSurl}}/brapi/v1/token",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"brapi",
								"v1",
								"token"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "call-resource-brapi",
			"item": [
				{
					"name": "GET ​/brapi​/v1​/calls",
					"item": [
						{
							"name": "Verify calls with no specified format",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9765d65b-57a3-434b-8acd-1a75d7c64da7",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Check total call count\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.metadata.pagination.totalCount).to.eql(28);",
											"});",
											"",
											"",
											"pm.test(\"Check a call with json or application/json format\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[2].call).to.eql(\"locations\");",
											"    pm.expect(jsonData.result.data[2].dataTypes[0]).to.eql(\"application/json\");",
											"    pm.expect(jsonData.result.data[2].datatypes[0]).to.eql(\"json\");",
											"});",
											"",
											"pm.test(\"Check a call with tsv or text/tsv\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[8].call).to.eql(\"studies/{studyDbId}/table\");",
											"    pm.expect(jsonData.result.data[8].dataTypes[1]).to.eql(\"text/tsv\");",
											"    pm.expect(jsonData.result.data[8].datatypes[1]).to.eql(\"tsv\");",
											"    ",
											"});",
											"",
											"pm.test(\"Check if format of study table call is csv\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[8].call).to.eql(\"studies/{studyDbId}/table\");",
											"    pm.expect(jsonData.result.data[8].dataTypes[2]).to.eql(\"text/csv\");",
											"    pm.expect(jsonData.result.data[8].datatypes[2]).to.eql(\"csv\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d771a06d-ffa6-4cf0-9e6b-a3f336f72b28",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/brapi/v1/calls",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"brapi",
										"v1",
										"calls"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify calls with csv format",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e9310d85-4b6d-43a9-916f-163e0c1f386c",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Check a study table call\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0].call).to.eql(\"studies/{studyDbId}/table\");",
											"        pm.expect(jsonData.result.data[0].datatypes[2]).to.eql(\"csv\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "17354638-f5b8-4a70-a8d3-4be74aa7412d",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/brapi/v1/calls?dataType=csv",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"brapi",
										"v1",
										"calls"
									],
									"query": [
										{
											"key": "dataType",
											"value": "csv"
										}
									]
								},
								"description": "GET ​/brapi​/v1​/calls"
							},
							"response": []
						},
						{
							"name": "Verify calls tsv format",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "635cd2e2-27c6-476f-b193-30118625a2fa",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Check a study table call\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0].call).to.eql(\"studies/{studyDbId}/table\");",
											"});",
											"",
											"pm.test(\"Check if format of samples call is tsv\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0].datatypes[1]).to.eql(\"tsv\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "cecfd9e3-4c6b-47d0-9bec-7be5c00d9db7",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/brapi/v1/calls?dataType=tsv",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"brapi",
										"v1",
										"calls"
									],
									"query": [
										{
											"key": "dataType",
											"value": "tsv"
										}
									]
								},
								"description": "GET ​/brapi​/v1​/calls"
							},
							"response": []
						},
						{
							"name": "Verify calls with json format",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ca5234d8-ce48-47d6-930a-673d09256a21",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Check a study table call\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[8].call).to.eql(\"studies/{studyDbId}/table\");",
											"});",
											"",
											"",
											"pm.test(\"Check if format of samples call is tsv\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[8].datatypes[0]).to.eql(\"json\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b63196f0-169f-4388-b24c-ba4f5a38addf",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/brapi/v1/calls?dataType=json",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"brapi",
										"v1",
										"calls"
									],
									"query": [
										{
											"key": "dataType",
											"value": "json"
										}
									]
								},
								"description": "GET ​/brapi​/v1​/calls"
							},
							"response": []
						},
						{
							"name": "Verify calls with  text/csv format",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "515df1b1-78f7-4809-a706-fe22cd02abf6",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Check total call count\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.metadata.pagination.totalCount).to.eql(1);",
											"});",
											"",
											"",
											"pm.test(\"Check a study table call\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0].call).to.eql(\"studies/{studyDbId}/table\");",
											"        pm.expect(jsonData.result.data[0].dataTypes[2]).to.eql(\"text/csv\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "65de7c46-d782-4103-82e8-b3313c75dc12",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/brapi/v1/calls?dataType=text/csv",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"brapi",
										"v1",
										"calls"
									],
									"query": [
										{
											"key": "dataType",
											"value": "text/csv"
										}
									]
								},
								"description": "GET ​/brapi​/v1​/calls"
							},
							"response": []
						},
						{
							"name": "Verify calls with text/tsv format",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0da932bb-817d-4c05-a4de-77f905f23c53",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Check a study table call\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0].call).to.eql(\"studies/{studyDbId}/table\");",
											"});",
											"",
											"pm.test(\"Check if format of samples call is tsv\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0].dataTypes[1]).to.eql(\"text/tsv\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "bcf6eaa0-a766-4079-936b-3295d550e14f",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/brapi/v1/calls?dataType=text/tsv",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"brapi",
										"v1",
										"calls"
									],
									"query": [
										{
											"key": "dataType",
											"value": "text/tsv"
										}
									]
								},
								"description": "GET ​/brapi​/v1​/calls"
							},
							"response": []
						},
						{
							"name": "Verify calls with application/json format",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8b1d2943-0ed9-4a19-b49b-6dd5df7f44e6",
										"exec": [
											"pm.test(\"Status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Check total call count\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.metadata.pagination.totalCount).to.eql(28);",
											"});",
											"",
											"",
											"pm.test(\"Check token call\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0].call).to.eql(\"token\");",
											"    pm.expect(jsonData.result.data[0].dataTypes[0]).to.eql(\"application/json\");",
											"});",
											"pm.test(\"Check crops call\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[1].call).to.eql(\"crops\");",
											"    pm.expect(jsonData.result.data[1].dataTypes[0]).to.eql(\"application/json\");",
											"});",
											"pm.test(\"Check locations call\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[2].call).to.eql(\"locations\");",
											"    pm.expect(jsonData.result.data[2].dataTypes[0]).to.eql(\"application/json\");",
											"});",
											"pm.test(\"Check phenotypes-search call\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[3].call).to.eql(\"phenotypes-search\");",
											"    pm.expect(jsonData.result.data[3].dataTypes[0]).to.eql(\"application/json\");",
											"});",
											"pm.test(\"Check programs call\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[4].call).to.eql(\"programs\");",
											"    pm.expect(jsonData.result.data[4].dataTypes[0]).to.eql(\"application/json\");",
											"});",
											"pm.test(\"Check samples/{sampleId} call\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[5].call).to.eql(\"samples/{sampleId}\");",
											"    pm.expect(jsonData.result.data[5].dataTypes[0]).to.eql(\"application/json\");",
											"});",
											"//pm.test(\"Check studies call\", function() {",
											"//    var jsonData = pm.response.json();",
											"//    pm.expect(jsonData.result.data[6].call).to.eql(\"studies\");",
											"//    pm.expect(jsonData.result.data[6].dataTypes[0]).to.eql(\"application/json\");",
											"//});",
											"pm.test(\"Check studies/{studyDbId} call\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[7].call).to.eql(\"studies/{studyDbId}\");",
											"    pm.expect(jsonData.result.data[7].dataTypes[0]).to.eql(\"application/json\");",
											"});",
											"pm.test(\"Check studies/{studyDbId}/table call\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[8].call).to.eql(\"studies/{studyDbId}/table\");",
											"    pm.expect(jsonData.result.data[8].dataTypes[0]).to.eql(\"application/json\");",
											"});",
											"pm.test(\"Check trials call\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[9].call).to.eql(\"trials\");",
											"    pm.expect(jsonData.result.data[9].dataTypes[0]).to.eql(\"application/json\");",
											"});",
											"pm.test(\"Check calls call\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[11].call).to.eql(\"calls\");",
											"    pm.expect(jsonData.result.data[11].dataTypes[0]).to.eql(\"application/json\");",
											"});",
											"pm.test(\"Check germplasm-search call\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[12].call).to.eql(\"germplasm-search\");",
											"    pm.expect(jsonData.result.data[12].dataTypes[0]).to.eql(\"application/json\");",
											"});",
											"pm.test(\"Check germplasm/{germplasmDbId} call\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[13].call).to.eql(\"germplasm/{germplasmDbId}\");",
											"    pm.expect(jsonData.result.data[13].dataTypes[0]).to.eql(\"application/json\");",
											"});",
											"pm.test(\"Check germplasm/{germplasmDbId}/pedigree call\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[14].call).to.eql(\"germplasm/{germplasmDbId}/pedigree\");",
											"    pm.expect(jsonData.result.data[14].dataTypes[0]).to.eql(\"application/json\");",
											"});",
											"pm.test(\"Check germplasm/{germplasmDbId}/progeny call\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[15].call).to.eql(\"germplasm/{germplasmDbId}/progeny\");",
											"    pm.expect(jsonData.result.data[15].dataTypes[0]).to.eql(\"application/json\");",
											"});",
											"pm.test(\"Check search/germplasm call\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[16].call).to.eql(\"search/germplasm\");",
											"    pm.expect(jsonData.result.data[16].dataTypes[0]).to.eql(\"application/json\");",
											"});",
											"",
											"pm.test(\"Check search/germplasm/{searchResultsDbid} call\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[17].call).to.eql(\"search/germplasm/{searchResultsDbid}\");",
											"    pm.expect(jsonData.result.data[17].dataTypes[0]).to.eql(\"application/json\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a39c4314-1613-4116-b13c-81dd1b86b5b8",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/brapi/v1/calls?dataType=application/json",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"brapi",
										"v1",
										"calls"
									],
									"query": [
										{
											"key": "dataType",
											"value": "application/json"
										}
									]
								},
								"description": "GET ​/brapi​/v1​/calls"
							},
							"response": []
						},
						{
							"name": "Verify calls with application/flapjack",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fc817a69-3988-4741-a5b6-c88285906a76",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Check if format of samples call is tsv\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.metadata.status[0].message).to.eql(\"not found calls\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "93bdd062-3f4a-4d40-b382-e65970d3cd65",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/brapi/v1/calls?dataType=application/flapjack",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"brapi",
										"v1",
										"calls"
									],
									"query": [
										{
											"key": "dataType",
											"value": "application/flapjack"
										}
									]
								},
								"description": "GET ​/brapi​/v1​/calls"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "GET ​/{crop}/brapi​/v1​/calls",
					"item": [
						{
							"name": "Verify calls with no specified format",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "91c90f61-72cc-4688-8e91-77bc44f29ba2",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Check total call count\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.metadata.pagination.totalCount).to.eql(28);",
											"});",
											"",
											"",
											"pm.test(\"Check a call with json or application/json format\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[2].call).to.eql(\"locations\");",
											"    pm.expect(jsonData.result.data[2].dataTypes[0]).to.eql(\"application/json\");",
											"    pm.expect(jsonData.result.data[2].datatypes[0]).to.eql(\"json\");",
											"});",
											"",
											"pm.test(\"Check a call with tsv or text/tsv\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[8].call).to.eql(\"studies/{studyDbId}/table\");",
											"    pm.expect(jsonData.result.data[8].dataTypes[1]).to.eql(\"text/tsv\");",
											"    pm.expect(jsonData.result.data[8].datatypes[1]).to.eql(\"tsv\");",
											"    ",
											"});",
											"",
											"pm.test(\"Check if format of study table call is csv\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[8].call).to.eql(\"studies/{studyDbId}/table\");",
											"    pm.expect(jsonData.result.data[8].dataTypes[2]).to.eql(\"text/csv\");",
											"    pm.expect(jsonData.result.data[8].datatypes[2]).to.eql(\"csv\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9db3244f-4f28-47b9-a88f-113c465fb0b5",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/calls",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"calls"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify calls with csv format",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8806ac37-a32d-4dc0-9a8b-8a066a4f1580",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Check a study table call\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0].call).to.eql(\"studies/{studyDbId}/table\");",
											"        pm.expect(jsonData.result.data[0].datatypes[2]).to.eql(\"csv\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e7788a9a-3efe-4f94-a927-5e76f734f450",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/calls?dataType=csv",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"calls"
									],
									"query": [
										{
											"key": "dataType",
											"value": "csv"
										}
									]
								},
								"description": "GET ​/brapi​/v1​/calls"
							},
							"response": []
						},
						{
							"name": "Verify calls tsv format",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f3155535-b4e1-4cef-8072-b650b5c11867",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Check a study table call\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0].call).to.eql(\"studies/{studyDbId}/table\");",
											"});",
											"",
											"pm.test(\"Check if format of samples call is tsv\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0].datatypes[1]).to.eql(\"tsv\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0daa9413-6d46-479d-bd68-9be17be9037a",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/calls?dataType=tsv",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"calls"
									],
									"query": [
										{
											"key": "dataType",
											"value": "tsv"
										}
									]
								},
								"description": "GET ​/brapi​/v1​/calls"
							},
							"response": []
						},
						{
							"name": "Verify calls with json format",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "989cbe59-af7e-4855-a998-e2beebb3a032",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Check a study table call\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[8].call).to.eql(\"studies/{studyDbId}/table\");",
											"});",
											"",
											"",
											"pm.test(\"Check if format of samples call is tsv\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[8].datatypes[0]).to.eql(\"json\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "eb43450e-b30c-4de0-927d-19217b948a91",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/calls?dataType=json",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"calls"
									],
									"query": [
										{
											"key": "dataType",
											"value": "json"
										}
									]
								},
								"description": "GET ​/brapi​/v1​/calls"
							},
							"response": []
						},
						{
							"name": "Verify calls with  text/csv format",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4d402582-da26-48b4-a788-4d1033a9c83c",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Check total call count\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.metadata.pagination.totalCount).to.eql(1);",
											"});",
											"",
											"",
											"pm.test(\"Check a study table call\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0].call).to.eql(\"studies/{studyDbId}/table\");",
											"        pm.expect(jsonData.result.data[0].dataTypes[2]).to.eql(\"text/csv\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "59e0b26f-498c-46b3-adb2-e8873575443f",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/calls?dataType=text/csv",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"calls"
									],
									"query": [
										{
											"key": "dataType",
											"value": "text/csv"
										}
									]
								},
								"description": "GET ​/brapi​/v1​/calls"
							},
							"response": []
						},
						{
							"name": "Verify calls with text/tsv format",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "03114fba-5e32-4427-aa72-0875144e8f99",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Check a study table call\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0].call).to.eql(\"studies/{studyDbId}/table\");",
											"});",
											"",
											"pm.test(\"Check if format of samples call is tsv\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0].dataTypes[1]).to.eql(\"text/tsv\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "3319c239-ae99-494a-99a7-4eb9ee64eb5c",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/calls?dataType=text/tsv",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"calls"
									],
									"query": [
										{
											"key": "dataType",
											"value": "text/tsv"
										}
									]
								},
								"description": "GET ​/brapi​/v1​/calls"
							},
							"response": []
						},
						{
							"name": "Verify calls with application/json format",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8c0e7f55-c19b-47ba-8a5e-da93aaaf6cbb",
										"exec": [
											"pm.test(\"Status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Check total call count\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.metadata.pagination.totalCount).to.eql(28);",
											"});",
											"",
											"",
											"pm.test(\"Check token call\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0].call).to.eql(\"token\");",
											"    pm.expect(jsonData.result.data[0].dataTypes[0]).to.eql(\"application/json\");",
											"});",
											"pm.test(\"Check crops call\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[1].call).to.eql(\"crops\");",
											"    pm.expect(jsonData.result.data[1].dataTypes[0]).to.eql(\"application/json\");",
											"});",
											"pm.test(\"Check locations call\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[2].call).to.eql(\"locations\");",
											"    pm.expect(jsonData.result.data[2].dataTypes[0]).to.eql(\"application/json\");",
											"});",
											"pm.test(\"Check phenotypes-search call\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[3].call).to.eql(\"phenotypes-search\");",
											"    pm.expect(jsonData.result.data[3].dataTypes[0]).to.eql(\"application/json\");",
											"});",
											"pm.test(\"Check programs call\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[4].call).to.eql(\"programs\");",
											"    pm.expect(jsonData.result.data[4].dataTypes[0]).to.eql(\"application/json\");",
											"});",
											"pm.test(\"Check samples/{sampleId} call\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[5].call).to.eql(\"samples/{sampleId}\");",
											"    pm.expect(jsonData.result.data[5].dataTypes[0]).to.eql(\"application/json\");",
											"});",
											"//pm.test(\"Check studies call\", function() {",
											"//    var jsonData = pm.response.json();",
											"//    pm.expect(jsonData.result.data[6].call).to.eql(\"studies\");",
											"//    pm.expect(jsonData.result.data[6].dataTypes[0]).to.eql(\"application/json\");",
											"//});",
											"pm.test(\"Check studies/{studyDbId} call\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[7].call).to.eql(\"studies/{studyDbId}\");",
											"    pm.expect(jsonData.result.data[7].dataTypes[0]).to.eql(\"application/json\");",
											"});",
											"pm.test(\"Check studies/{studyDbId}/table call\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[8].call).to.eql(\"studies/{studyDbId}/table\");",
											"    pm.expect(jsonData.result.data[8].dataTypes[0]).to.eql(\"application/json\");",
											"});",
											"pm.test(\"Check trials call\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[9].call).to.eql(\"trials\");",
											"    pm.expect(jsonData.result.data[9].dataTypes[0]).to.eql(\"application/json\");",
											"});",
											"pm.test(\"Check calls call\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[11].call).to.eql(\"calls\");",
											"    pm.expect(jsonData.result.data[11].dataTypes[0]).to.eql(\"application/json\");",
											"});",
											"pm.test(\"Check germplasm-search call\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[12].call).to.eql(\"germplasm-search\");",
											"    pm.expect(jsonData.result.data[12].dataTypes[0]).to.eql(\"application/json\");",
											"});",
											"pm.test(\"Check germplasm/{germplasmDbId} call\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[13].call).to.eql(\"germplasm/{germplasmDbId}\");",
											"    pm.expect(jsonData.result.data[13].dataTypes[0]).to.eql(\"application/json\");",
											"});",
											"pm.test(\"Check germplasm/{germplasmDbId}/pedigree call\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[14].call).to.eql(\"germplasm/{germplasmDbId}/pedigree\");",
											"    pm.expect(jsonData.result.data[14].dataTypes[0]).to.eql(\"application/json\");",
											"});",
											"pm.test(\"Check germplasm/{germplasmDbId}/progeny call\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[15].call).to.eql(\"germplasm/{germplasmDbId}/progeny\");",
											"    pm.expect(jsonData.result.data[15].dataTypes[0]).to.eql(\"application/json\");",
											"});",
											"pm.test(\"Check search/germplasm call\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[16].call).to.eql(\"search/germplasm\");",
											"    pm.expect(jsonData.result.data[16].dataTypes[0]).to.eql(\"application/json\");",
											"});",
											"",
											"pm.test(\"Check search/germplasm/{searchResultsDbid} call\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[17].call).to.eql(\"search/germplasm/{searchResultsDbid}\");",
											"    pm.expect(jsonData.result.data[17].dataTypes[0]).to.eql(\"application/json\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b302ef1c-9445-48cf-bc18-87dee14b233c",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/calls?dataType=application/json",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"calls"
									],
									"query": [
										{
											"key": "dataType",
											"value": "application/json"
										}
									]
								},
								"description": "GET ​/brapi​/v1​/calls"
							},
							"response": []
						},
						{
							"name": "Verify calls with application/flapjack",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c225cd93-d426-4177-89bf-f6192a7ff54a",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Check if format of samples call is tsv\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.metadata.status[0].message).to.eql(\"not found calls\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2f26f499-4203-4034-b49f-992decc75049",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/calls?dataType=application/flapjack",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"calls"
									],
									"query": [
										{
											"key": "dataType",
											"value": "application/flapjack"
										}
									]
								},
								"description": "GET ​/brapi​/v1​/calls"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "crop-resource-brapi",
			"item": [
				{
					"name": "GET /brapi/v1/crops",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6206079e-abe3-43cb-8361-1e093619bb4f",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Check testdata crop \", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.result.data[0]).to.eql(\"maize\");\r",
									"});\r",
									"pm.test(\"Check testdata crop \", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.result.data[1]).to.eql(\"testdata\");\r",
									"});\r",
									"\r",
									"/**\r",
									"pm.test(\"Check brachiaria crop \", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.result.data[0]).to.eql(\"brachiaria\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check chia crop \", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.result.data[1]).to.eql(\"chia\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check chickpea crop \", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.result.data[2]).to.eql(\"chickpea\");\r",
									"});\r",
									"pm.test(\"Check cowpea crop \", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.result.data[3]).to.eql(\"cowpea\");\r",
									"});\r",
									"pm.test(\"Check flax crop \", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.result.data[4]).to.eql(\"flax\");\r",
									"});\r",
									"pm.test(\"Check groundnut crop \", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.result.data[5]).to.eql(\"groundnut\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check maize crop \", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.result.data[6]).to.eql(\"maize\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check monggo crop \", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.result.data[7]).to.eql(\"monggo\");\r",
									"});\r",
									"pm.test(\"Check mustard crop \", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.result.data[8]).to.eql(\"mustard\");\r",
									"});\r",
									"pm.test(\"Check peanut crop \", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.result.data[9]).to.eql(\"peanut\");\r",
									"});\r",
									"pm.test(\"Check rapeseed crop \", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.result.data[10]).to.eql(\"rapeseed\");\r",
									"});\r",
									"pm.test(\"Check rice crop \", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.result.data[11]).to.eql(\"rice\");\r",
									"});\r",
									"pm.test(\"Check safflower crop \", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.result.data[12]).to.eql(\"safflower\");\r",
									"});\r",
									"pm.test(\"Check sorghum crop \", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.result.data[13]).to.eql(\"sorghum\");\r",
									"});\r",
									"pm.test(\"Check soybean crop \", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.result.data[14]).to.eql(\"soybean\");\r",
									"});\r",
									"pm.test(\"Check sunflower crop \", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.result.data[15]).to.eql(\"sunflower\");\r",
									"});\r",
									"pm.test(\"Check tomato crop \", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.result.data[17]).to.eql(\"tomato\");\r",
									"});\r",
									"pm.test(\"Check wheat crop \", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.result.data[18]).to.eql(\"wheat\");\r",
									"});\r",
									" */"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "6f64bc25-3931-47b0-81ef-5603ea4e64f8",
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{masterToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BMSurl}}/brapi/v1/crops",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"brapi",
								"v1",
								"crops"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "germplasm-resource-brapi",
			"item": [
				{
					"name": "GET ​/{crop}​/brapi​/v1​/germplasm",
					"item": [
						{
							"name": "Verify response code and body when entered valid crop only",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "49891dd9-addc-49cb-a380-26b3d4388c11",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"var data = jsonData.result.data[0];",
											"pm.test(\"Verify returned metadata\", function () {",
											"    pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											"    pm.expect(jsonData.metadata.pagination.pageSize).to.eql(10000);",
											"    pm.expect(jsonData.metadata.pagination.totalCount).to.eql(60);",
											"    pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											"    pm.expect(jsonData.metadata.status).to.eql([]);",
											"    pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"",
											"pm.test(\"Check germplasmDbId \", function () {",
											"    pm.expect(data.germplasmDbId).to.eql(\"21\");",
											"});",
											"",
											"pm.test(\"Check defaultDisplayName \", function () {",
											"    pm.expect(data.defaultDisplayName).to.eql(\"CML1\");",
											"});",
											"pm.test(\"Check accessionNumber \", function () {",
											"    pm.expect(data.accessionNumber).to.eql(\"ACCNO1\");",
											"});",
											"",
											"pm.test(\"Check germplasmName \", function () {",
											"    pm.expect(data.germplasmName).to.eql(\"CML1\");",
											"});",
											"",
											"pm.test(\"Check pedigree\", function () {",
											"    pm.expect(data.pedigree).to.eql(\"CML1\");",
											"});",
											"pm.test(\"Check germplasmSeedSource\", function () {",
											"    pm.expect(data.germplasmSeedSource).to.eql(\"AA001\");",
											"});",
											"",
											"pm.test(\"Check synonyms\", function () {",
											" var names = [\"GP1\",\"ACCNO1\", \"DVNM1\", \"GENUS1\", \"DVNM1\"];",
											"   for (var i = 0; i < data.synonyms.length; i++) {",
											"    pm.expect(data.synonyms[i]).to.eql(names[i]);",
											"    }",
											"",
											"});",
											"",
											"pm.test(\"Check commonCropName\", function () {",
											"    pm.expect(data.commonCropName).to.eql(\"testdata\");",
											"});",
											"",
											"pm.test(\"Check instituteCode\", function () {",
											"    pm.expect(data.instituteCode).to.eql(\"PROGM1\");",
											"});",
											"pm.test(\"Check instituteName\", function () {",
											"    pm.expect(data.instituteName).to.eql(\"PROGM1\");",
											"});",
											"",
											"pm.test(\"Check countryOfOriginCode\", function () {",
											"    pm.expect(data.countryOfOriginCode).to.eql(\"ORI_COUN1\");",
											"});",
											"",
											"pm.test(\"Check typeOfGermplasmStorageCode\", function () {",
											"    pm.expect(data.typeOfGermplasmStorageCode).to.eql([]);",
											"});",
											"pm.test(\"Check genus\", function () {",
											"    pm.expect(data.genus).to.eql(\"GENUS1\");",
											"});",
											"pm.test(\"Check species\", function () {",
											"    pm.expect(data.species).to.eql(\"SPNAM1\");",
											"});",
											"pm.test(\"Check taxonIds\", function () {",
											"    pm.expect(data.taxonIds).to.eql([]);",
											"});",
											"pm.test(\"Check speciesAuthority\", function () {",
											"    pm.expect(data.speciesAuthority).to.eql(\"SPAUTH1\");",
											"});",
											"",
											"pm.test(\"Check subtaxa\", function () {",
											"    pm.expect(data.subtaxa).to.eql(\"SUBTAX1\");",
											"});",
											"pm.test(\"Check subtaxaAuthority\", function () {",
											"    pm.expect(data.subtaxaAuthority).to.eql(\"STAUTH1\");",
											"});",
											"pm.test(\"Check donors\", function () {",
											"    pm.expect(data.donors).to.eql([]);",
											"});",
											"pm.test(\"Check acquisitionDate\", function () {",
											"    pm.expect(data.acquisitionDate).to.eql(\"2018-10-25\");",
											"});",
											"pm.test(\"Check breedingMethodDbId\", function () {",
											"    pm.expect(data.breedingMethodDbId).to.eql(\"Accession into genebank\");",
											"});",
											"pm.test(\"Check germplasmGenus\", function () {",
											"    pm.expect(data.germplasmGenus).to.eql(\"GENUS1\");",
											"});",
											"pm.test(\"Check germplasmSpecies\", function () {",
											"    pm.expect(data.germplasmSpecies).to.eql(\"SPNAM1\");",
											"});",
											"pm.test(\"Check seedSource\", function () {",
											"    pm.expect(data.seedSource).to.eql(\"AA001\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "fe6f5224-807a-4b6a-94e0-a9270879b933",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/germplasm?page=0&pageSize=10000",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"germplasm"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "10000"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered valid crop and germplasmDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2860c5fb-8f62-4d43-8842-7715b806bcdd",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"pm.test(\"Verify returned metadata\", function () {",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(10000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(1);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Check if all data has correct germplasmDbId\", function () {",
											"  var jsonData = pm.response.json();",
											"  var dataLength = jsonData.result.data.length;",
											"",
											"  for (i = 0; i < dataLength ; i++) {",
											"      var data = jsonData.result.data[i];",
											"      pm.expect(data.germplasmDbId).to.eql(pm.environment.get(\"germplasmDbId\"));",
											"  }",
											" ",
											"});    ",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b884aded-69ad-4ec3-810b-51bdfd515ece",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/germplasm?page=0&pageSize=10000&germplasmDbId={{germplasmDbId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"germplasm"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "10000"
										},
										{
											"key": "germplasmDbId",
											"value": "{{germplasmDbId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered valid crop and germplasmName",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d33ab08a-0f5d-4ff6-9f03-bcb328ba116e",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"pm.test(\"Verify returned metadata\", function () {",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(10000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(22);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Check if all data has correct germplasmName\", function () {",
											"  var dataLength = jsonData.result.data.length;",
											"",
											"  for (i = 0; i < dataLength ; i++) {",
											"      var data = jsonData.result.data[i];",
											"      pm.expect(data.germplasmName).to.include(\"CML1\");",
											"  }",
											" ",
											"});    ",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "4f566527-016b-4d87-a585-1d37babb1ac6",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/germplasm?page=0&pageSize=10000&germplasmName=CML1",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"germplasm"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "10000"
										},
										{
											"key": "germplasmName",
											"value": "CML1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered valid crop and commonCropName",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c7733353-dbc4-412d-9137-397b424be5e2",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"pm.test(\"Verify returned metadata\", function () {",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(10000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(60);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Check if all data has correct commonCropName\", function () {",
											"  var dataLength = jsonData.result.data.length;",
											"",
											"  for (i = 0; i < dataLength ; i++) {",
											"      var data = jsonData.result.data[i];",
											"      pm.expect(data.commonCropName).to.eql(pm.environment.get(\"crop\"));",
											"  }",
											" ",
											"});    ",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "45b09eed-62da-4b47-b659-821777d3fd96",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/germplasm?page=0&pageSize=10000&commonCropName={{crop}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"germplasm"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "10000"
										},
										{
											"key": "commonCropName",
											"value": "{{crop}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered pageSize greater than max",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0114370d-6e1f-4d0d-a665-e4abe4700259",
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"",
											"pm.test(\"Verify returned error message\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.errors[0].message).to.eql(\"Page size must between 1 and 10000.\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c7af3198-a6be-4998-b575-709a4514de7b",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/germplasm?page=0&pageSize=10001",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"germplasm"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "10001"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid page",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d1fff5ee-164b-46a7-b14a-72b506eb0e99",
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"",
											"pm.test(\"Verify returned error message\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.errors[0].message).to.eql(\"A total of 1 pages are available, so the page number must between 0 and 1 (exclusive).\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "07547da5-be41-48be-a506-be05ce965756",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/germplasm?page=9999&pageSize=10000",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"germplasm"
									],
									"query": [
										{
											"key": "page",
											"value": "9999"
										},
										{
											"key": "pageSize",
											"value": "10000"
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "GET ​/{crop}​/brapi​/v1​/germplasm​/{germplasmDbId}",
					"item": [
						{
							"name": "Verify response code and body when entered valid germplasmDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "129f211f-168a-44b4-8f74-4c88952ff7ad",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Check GID \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.germplasmDbId).to.eql(\"21\");",
											"});",
											"",
											"pm.test(\"Check defaultDisplayName \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.defaultDisplayName).to.eql(\"CML1\");",
											"});",
											"pm.test(\"Check accessionNumber \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.accessionNumber).to.eql(\"ACCNO1\");",
											"});",
											"",
											"pm.test(\"Check germplasmName \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.germplasmName).to.eql(\"CML1\");",
											"});",
											"",
											"pm.test(\"Check pedigree\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.pedigree).to.eql(\"CML1\");",
											"});",
											"  ",
											"pm.test(\"Check germplasmSeedSource\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.germplasmSeedSource).to.eql(\"AA001\");",
											"});",
											"  ",
											"pm.test(\"Check commonCropName\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.commonCropName).to.eql(\"testdata\");",
											"});",
											"",
											"pm.test(\"Check instituteCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.instituteCode).to.eql(\"PROGM1\");",
											"});",
											"pm.test(\"Check instituteName\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.instituteName).to.eql(\"PROGM1\");",
											"});",
											"",
											"",
											"pm.test(\"Check countryOfOriginCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.countryOfOriginCode).to.eql(\"ORI_COUN1\");",
											"});",
											"",
											"pm.test(\"Check genus\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.genus).to.eql(\"GENUS1\");",
											"});",
											"",
											"pm.test(\"Check species\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.species).to.eql(\"SPNAM1\");",
											"});",
											"",
											"pm.test(\"Check speciesAuthority\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.speciesAuthority).to.eql(\"SPAUTH1\");",
											"});",
											"",
											"pm.test(\"Check subtaxa\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.subtaxa).to.eql(\"SUBTAX1\");",
											"});",
											"",
											"pm.test(\"Check acquisitionDate\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.acquisitionDate).to.eql(\"2018-10-25\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1e2bbc82-e82b-459b-bc7a-b121c9deb3dc",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/germplasm/{{germplasmDbId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"germplasm",
										"{{germplasmDbId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered non-existing germplasmDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b2e2ea32-e5a9-4c48-b9f6-1099d4cd424a",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"pm.test(\"Response message is no germplasm found \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.metadata.status[0].message).to.eql(\"no germplasm found\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a29b50a1-c505-4913-a7a1-06ad2fa80df5",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/germplasm/{{nonExistingGID}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"germplasm",
										"{{nonExistingGID}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "GET ​/{crop}​/brapi​/v1​/germplasm​/{germplasmDbId}​/pedigree",
					"item": [
						{
							"name": "Verify response code and body when entered GID that was created via crossing,includeSiblings true",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a564f4bb-2131-4f1b-8718-fedd8b92a10a",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Verify returned metadata\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(0);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Check germplasmDbId \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.germplasmDbId).to.eql(41);",
											"});",
											"pm.test(\"Check defaultDisplayName \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.defaultDisplayName).to.eql(\"IB1\");",
											"    pm.expect(jsonData.result.pedigree).to.eql(\"CML1/CML6\");",
											"    pm.expect(jsonData.result.crossingPlan).to.eql(\"C2W|Single cross|GEN\");",
											"    pm.expect(jsonData.result.crossingYear).to.eql(2018);",
											"    pm.expect(jsonData.result.familyCode).to.equal(null);",
											"    pm.expect(jsonData.result.parent1DbId).to.eql(21);",
											"    pm.expect(jsonData.result.parent1Name).to.eql(\"CML1\");",
											"    pm.expect(jsonData.result.parent1Type).to.eql(\"FEMALE\");",
											"    pm.expect(jsonData.result.parent2DbId).to.eql(26);",
											"    pm.expect(jsonData.result.parent2Name).to.eql(\"CML6\");",
											"    pm.expect(jsonData.result.parent2Type).to.eql(\"MALE\");",
											"    pm.expect(jsonData.result.siblings[0].germplasmDbId).to.eql(61);",
											"    pm.expect(jsonData.result.siblings[0].defaultDisplayName).to.eql(\"CML1\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5bb34e24-4096-4252-9479-8b48c1d1bb21",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/germplasm/{{crossGID}}/pedigree?includeSiblings=true",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"germplasm",
										"{{crossGID}}",
										"pedigree"
									],
									"query": [
										{
											"key": "includeSiblings",
											"value": "true"
										}
									]
								},
								"description": "GET /{crop}​/brapi​/v1​/germplasm​/{germplasmDbId}​/pedigree"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered GID that was created via crossing,includeSiblings false",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "12ff4c18-1623-40fa-94d1-36e4bda77051",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Verify returned metadata\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(0);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Check germplasmDbId \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.germplasmDbId).to.eql(41);",
											"});",
											"pm.test(\"Check defaultDisplayName \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.defaultDisplayName).to.eql(\"IB1\");",
											"    pm.expect(jsonData.result.pedigree).to.eql(\"CML1/CML6\");",
											"    pm.expect(jsonData.result.crossingPlan).to.eql(\"C2W|Single cross|GEN\");",
											"    pm.expect(jsonData.result.crossingYear).to.eql(2018);",
											"    pm.expect(jsonData.result.familyCode).to.equal(null);",
											"    pm.expect(jsonData.result.parent1DbId).to.eql(21);",
											"    pm.expect(jsonData.result.parent1Name).to.eql(\"CML1\");",
											"    pm.expect(jsonData.result.parent1Type).to.eql(\"FEMALE\");",
											"    pm.expect(jsonData.result.parent2DbId).to.eql(26);",
											"    pm.expect(jsonData.result.parent2Name).to.eql(\"CML6\");",
											"    pm.expect(jsonData.result.parent2Type).to.eql(\"MALE\");",
											"    pm.expect(jsonData.result.siblings).to.eql(null);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "39788fb1-84fe-4424-a8c5-2b3bd4b3d416",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/germplasm/{{crossGID}}/pedigree?includeSiblings=false",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"germplasm",
										"{{crossGID}}",
										"pedigree"
									],
									"query": [
										{
											"key": "includeSiblings",
											"value": "false"
										}
									]
								},
								"description": "GET /{crop}​/brapi​/v1​/germplasm​/{germplasmDbId}​/pedigree"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered GID that was created via advancing",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d2398d18-dac2-40cd-aaf2-c39a7040f0e9",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Verify returned metadata\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(0);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Check germplasmDbId \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.germplasmDbId).to.eql(parseInt(pm.environment.get(\"advancedGID\")));",
											"});",
											"pm.test(\"Check defaultDisplayName \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.defaultDisplayName).to.eql(\"CML1\");",
											"    pm.expect(jsonData.result.pedigree).to.eql(\"CML1\");",
											"    pm.expect(jsonData.result.crossingPlan).to.eql(\"AGB1|Accession into genebank|MAN\");",
											"    pm.expect(jsonData.result.crossingYear).to.eql(2020);",
											"    pm.expect(jsonData.result.familyCode).to.equal(null);",
											"    pm.expect(jsonData.result.parent1DbId).to.eql(21);",
											"    pm.expect(jsonData.result.parent1Name).to.eql(\"CML1\");",
											"    pm.expect(jsonData.result.parent1Type).to.eql(\"POPULATION\");",
											"    pm.expect(jsonData.result.parent2DbId).to.eql(21);",
											"    pm.expect(jsonData.result.parent2Name).to.eql(\"CML1\");",
											"    pm.expect(jsonData.result.parent2Type).to.eql(\"SELF\");",
											"    pm.expect(jsonData.result.siblings).to.eql([]);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9844e1ee-d421-4a69-b522-5aabb5c4ff4d",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/germplasm/{{advancedGID}}/pedigree?includeSiblings=true",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"germplasm",
										"{{advancedGID}}",
										"pedigree"
									],
									"query": [
										{
											"key": "includeSiblings",
											"value": "true"
										}
									]
								},
								"description": "GET /{crop}​/brapi​/v1​/germplasm​/{germplasmDbId}​/pedigree"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered GID that was via import (no parent)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "49c626df-b5d0-4a32-a49b-2d343843e0ca",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Verify returned metadata\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(0);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Check germplasmDbId \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.germplasmDbId).to.eql(parseInt(pm.environment.get(\"noParentGID\")));",
											"});",
											"pm.test(\"Check defaultDisplayName \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.defaultDisplayName).to.eql(\"CML1\");",
											"    pm.expect(jsonData.result.pedigree).to.eql(\"CML1\");",
											"    pm.expect(jsonData.result.crossingPlan).to.eql(\"AGB1|Accession into genebank|MAN\");",
											"    pm.expect(jsonData.result.crossingYear).to.eql(2018);",
											"    pm.expect(jsonData.result.familyCode).to.equal(null);",
											"    pm.expect(jsonData.result.parent1DbId).to.eql(null);",
											"    pm.expect(jsonData.result.parent1Name).to.eql(null);",
											"    pm.expect(jsonData.result.parent1Type).to.eql(null);",
											"    pm.expect(jsonData.result.parent2DbId).to.eql(null);",
											"    pm.expect(jsonData.result.parent2Name).to.eql(null);",
											"    pm.expect(jsonData.result.parent2Type).to.eql(null);",
											"    pm.expect(jsonData.result.siblings).to.eql(null);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b08e60a3-af49-4c7f-8cc8-7d549916ee6b",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/germplasm/{{noParentGID}}/pedigree?includeSiblings=false",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"germplasm",
										"{{noParentGID}}",
										"pedigree"
									],
									"query": [
										{
											"key": "includeSiblings",
											"value": "false"
										}
									]
								},
								"description": "GET /{crop}​/brapi​/v1​/germplasm​/{germplasmDbId}​/pedigree"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered non-existing germplasmDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aee63938-b60c-4033-a0c0-7ca5b16c1931",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"pm.test(\"Response message is no germplasm found \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.metadata.status[0].message).to.eql(\"no germplasm found\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "441ca818-09b4-4189-94ac-690a088bd4ed",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/germplasm/{{nonExistingGID}}/pedigree",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"germplasm",
										"{{nonExistingGID}}",
										"pedigree"
									]
								},
								"description": "GET /{crop}​/brapi​/v1​/germplasm​/{germplasmDbId}​/pedigree"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered valid studyDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bd3ec3d8-c634-403f-ae9e-c2aefc26ca69",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"  var jsonData = pm.response.json();",
											"pm.test(\"Verify returned metadata\", function () {",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(20);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"",
											"pm.test(\"Verify returned data\", function () {",
											"  ",
											" pm.expect(jsonData.result.data[0].germplasmDbId).to.eql(\"21\");",
											" pm.expect(jsonData.result.data[0].defaultDisplayName).to.eql(\"CML1\");",
											" pm.expect(jsonData.result.data[0].germplasmName).to.eql(\"CML1\");",
											" pm.expect(jsonData.result.data[0].pedigree).to.eql(\"CML1\");",
											" //pm.expect(jsonData.result.data[0].synonyms).to.eql([]);",
											"",
											" pm.expect(jsonData.result.data[0].commonCropName).to.eql(\"testdata\");",
											" pm.expect(jsonData.result.data[0].instituteCode).to.eql(\"PROGM1\");",
											" pm.expect(jsonData.result.data[0].instituteName).to.eql(\"PROGM1\");",
											" pm.expect(jsonData.result.data[0].countryOfOriginCode).to.eql(\"ORI_COUN1\");",
											" pm.expect(jsonData.result.data[0].typeOfGermplasmStorageCode).to.eql([]);",
											" //pm.expect(jsonData.result.data[0].genus).to.eql(\"GENUS1\");",
											" //pm.expect(jsonData.result.data[0].species).to.eql(\"SPNAM1\");",
											" pm.expect(jsonData.result.data[0].taxonIds).to.eql([]);",
											" pm.expect(jsonData.result.data[0].speciesAuthority).to.eql(\"SPAUTH1\");",
											" pm.expect(jsonData.result.data[0].subtaxa).to.eql(\"SUBTAX1\");",
											" pm.expect(jsonData.result.data[0].subtaxaAuthority).to.eql(\"STAUTH1\");",
											" pm.expect(jsonData.result.data[0].donors).to.eql([]);",
											" pm.expect(jsonData.result.data[0].acquisitionDate).to.eql(\"2018-10-25\");",
											" pm.expect(jsonData.result.data[0].breedingMethodDbId).to.eql(\"Accession into genebank\");",
											" pm.expect(jsonData.result.data[0].germplasmGenus).to.eql(\"GENUS1\");",
											" pm.expect(jsonData.result.data[0].germplasmSpecies).to.eql(\"SPNAM1\");",
											" pm.expect(jsonData.result.data[0].seedSource).to.eql(\"AA001\");",
											" pm.expect(jsonData.result.data[0].entryNumber).to.eql(\"1\");",
											"    ",
											"});",
											"",
											"pm.test(\"Verify returned studyDbId\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.studyDbId).to.eql(pm.environment.get(\"studyDbId\"));",
											"});",
											"pm.test(\"Verify returned trialName\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.trialName).to.eql(\"Randomized Trial 20180003\");",
											"});",
											"",
											"pm.test(\"Check synonyms\", function () {",
											" var names = [\"GP1\",\"ACCNO1\", \"DVNM1\", \"GENUS1\", \"DVNM1\"];",
											"   for (var i = 0; i < jsonData.result.data[0].synonyms.length; i++) {",
											"    pm.expect(jsonData.result.data[0].synonyms[i]).to.eql(names[i]);",
											"    }",
											"",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "6339da72-bc6c-4b39-a520-d2e406b1bcaa",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/studies/{{studyDbId}}/germplasm",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"studies",
										"{{studyDbId}}",
										"germplasm"
									]
								},
								"description": "GET /{crop}/brapi/v1/studies/{studyDbId}"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "GET ​/{crop}​/brapi​/v1​/germplasm​/{germplasmDbId}​/progeny",
					"item": [
						{
							"name": "Verify response code and body when entered valid germplasmDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fee2c2ca-f673-415e-968b-e49929108aee",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(0);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"pm.test(\"Check germplasmDbId \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.germplasmDbId).to.eql(21);",
											"});",
											"pm.test(\"Check defaultDisplayName \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.defaultDisplayName).to.eql(\"CML1\");",
											"});",
											"pm.test(\"Check progeny details \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.progeny[0].germplasmDbId).to.eql(41);",
											"    pm.expect(jsonData.result.progeny[0].defaultDisplayName).to.eql(\"IB1\");",
											"   pm.expect(jsonData.result.progeny[0].parentType).to.eql(\"FEMALE\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b312dcab-5c80-4ebd-bade-7316a6dac059",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/germplasm/{{germplasmDbId}}/progeny",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"germplasm",
										"{{germplasmDbId}}",
										"progeny"
									]
								},
								"description": "GET ​/{crop}​/brapi​/v1​/germplasm​/{germplasmDbId}​/progeny"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered non-existing germplasmDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1e84f7ed-4bef-4f12-92e5-d7c6497571e3",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"pm.test(\"Response message is no germplasm found \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.metadata.status[0].message).to.eql(\"no germplasm found\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "51f72d53-0ecd-4ad1-a38a-9687e01db62f",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/germplasm/{{nonExistingGID}}/progeny",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"germplasm",
										"{{nonExistingGID}}",
										"progeny"
									]
								},
								"description": "GET ​/{crop}​/brapi​/v1​/germplasm​/{germplasmDbId}​/progeny"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "POST /{crop}/brapi/v1/search/germplasm",
					"item": [
						{
							"name": "Post search by germplasmDbIds",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0865eb15-bb63-42a6-b857-3b09957e4630",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"    var jsonData = pm.response.json();",
											"    pm.environment.unset(\"searchResultDbId_germplasmDbIds\");",
											"    pm.environment.set(\"searchResultDbId_germplasmDbIds\", jsonData.result.searchResultDbId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "8d68396d-d3eb-44ca-abb7-6b29aa8af4e4",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"germplasmDbIds\": [\r\n    \"21\"\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/search/germplasm",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"search",
										"germplasm"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when searched by germplasmSpecies",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "26685a62-667a-497d-97b9-de789ec8247d",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"    var jsonData = pm.response.json();",
											"    pm.environment.unset(\"searchResultDbId_germplasmSpecies\");",
											"    pm.environment.set(\"searchResultDbId_germplasmSpecies\", jsonData.result.searchResultDbId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "4b50bdea-5dbe-42a3-82bf-0e038a1d359d",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"germplasmDbIds\": [\r\n    \"21\"\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/search/germplasm",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"search",
										"germplasm"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when searched by germplasmGenus",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "79786ce5-e9f4-4550-a53a-f4c14e6194ef",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"    var jsonData = pm.response.json();",
											"    pm.environment.unset(\"searchResultDbId_germplasmGenus\");",
											"    pm.environment.set(\"searchResultDbId_germplasmGenus\", jsonData.result.searchResultDbId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1202ecd6-5f84-4a02-9c43-21ec8010ba6e",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"germplasmDbIds\": [\r\n    \"21\"\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/search/germplasm",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"search",
										"germplasm"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when searched by germplasmNames",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8a1084db-6ebe-4417-a0ab-6a5cb136b5a6",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"    var jsonData = pm.response.json();",
											"    pm.environment.unset(\"searchResultDbId_germplasmNames\");",
											"    pm.environment.set(\"searchResultDbId_germplasmNames\", jsonData.result.searchResultDbId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "23f5b116-adca-4cf3-b17e-d2eb72c30545",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"germplasmDbIds\": [\r\n    \"21\"\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/search/germplasm",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"search",
										"germplasm"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when searched by accessionNumbers",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f91d8a0b-a173-4b86-952a-64d1bf2de0ea",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"    var jsonData = pm.response.json();",
											"    pm.environment.unset(\"searchResultDbId_accessionNumbers\");",
											"    pm.environment.set(\"searchResultDbId_accessionNumbers\", jsonData.result.searchResultDbId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "bf2973be-ea9e-4ffa-9e05-f8625728bf45",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"accessionNumbers\": [\r\n    \"ACCNO1\"\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/search/germplasm",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"search",
										"germplasm"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when searched by commonCropNames",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ebe408bd-6103-48e0-a054-ec70eead26ca",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"    var jsonData = pm.response.json();",
											"    pm.environment.unset(\"ssearchResultDbId_commonCropNames\");",
											"    pm.environment.set(\"searchResultDbId_commonCropNames\", jsonData.result.searchResultDbId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b167a03c-7991-495f-a10b-bfc9f2be9b30",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"commonCropName\": [\r\n    \"testdata\"\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/search/germplasm",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"search",
										"germplasm"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when searched by searchResultDbId_preferredName",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6097b649-9dd4-4be7-8af0-15629beca64f",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"    var jsonData = pm.response.json();",
											"    pm.environment.unset(\"searchResultDbId_preferredName\");",
											"    pm.environment.set(\"searchResultDbId_preferredName\", jsonData.result.searchResultDbId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "58f1e6ed-63e6-47fc-af43-57e957240f2b",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"germplasmDbIds\": [\r\n    \"21\"\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/search/germplasm",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"search",
										"germplasm"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "GET ​/{crop}​/brapi​/v1​/search​/germplasm​/{germplasmDbId}​/attributes",
					"item": [
						{
							"name": "Verify response code and body when entered valid germplasmDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d4409876-ec97-4140-85e9-f6077f70dcb8",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Verify returned metadata\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(7);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"pm.test(\"Check attribute details \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0].attributeCode).to.eql(\"SPNAM\");",
											"    pm.expect(jsonData.result.data[0].attributeDbId).to.eql(2011);",
											"    pm.expect(jsonData.result.data[0].attributeName).to.eql(\"Additional details about germplasm\");",
											"    pm.expect(jsonData.result.data[0].determinedDate).to.eql(20181025);",
											"    pm.expect(jsonData.result.data[0].value).to.eql(\"SPNAM1\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "90285fa0-a924-44ea-80c7-25c69e6b1f2d",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/germplasm/{{germplasmDbId}}/attributes",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"germplasm",
										"{{germplasmDbId}}",
										"attributes"
									]
								},
								"description": "GET /{crop}​/brapi​/v1​/search​/germplasm​/{germplasmDbId}​/attributes"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered valid germplasmDbId and attributeDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1fa93b71-0c14-4522-92ae-796126c24c0a",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Verify returned metadata\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(1);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"pm.test(\"Check attribute details \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0].attributeCode).to.eql(\"ORI_COUN\");",
											"    pm.expect(jsonData.result.data[0].attributeDbId).to.eql(224);",
											"    pm.expect(jsonData.result.data[0].attributeName).to.eql(\"Country of Origin\");",
											"    pm.expect(jsonData.result.data[0].determinedDate).to.eql(20181025);",
											"    pm.expect(jsonData.result.data[0].value).to.eql(\"ORI_COUN1\");",
											"});",
											"",
											"pm.test(\"Check returned germplasmDbId \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.germplasmDbId).to.eql(pm.environment.get(\"germplasmDbId\"));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b762ce88-adaf-4849-9c4b-cb0e40a23b84",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/germplasm/{{germplasmDbId}}/attributes?attributeDbIds=224",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"germplasm",
										"{{germplasmDbId}}",
										"attributes"
									],
									"query": [
										{
											"key": "attributeDbIds",
											"value": "224"
										}
									]
								},
								"description": "GET /{crop}​/brapi​/v1​/search​/germplasm​/{germplasmDbId}​/attributes"
							},
							"response": []
						},
						{
							"name": "Enter valid germplasmDbId and attributeDbId that is not associated to the germplasm",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d378d170-dfc8-409a-b552-26fb82499df9",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"pm.test(\"Verify returned error\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.errors[0].message).to.eql(\"Invalid attribute identifier\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "831cda74-e2a8-403d-afa1-ec7b8604b008",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/germplasm/{{germplasmDbId}}/attributes?attributeDbIds=2131",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"germplasm",
										"{{germplasmDbId}}",
										"attributes"
									],
									"query": [
										{
											"key": "attributeDbIds",
											"value": "2131"
										}
									]
								},
								"description": "GET /{crop}​/brapi​/v1​/search​/germplasm​/{germplasmDbId}​/attributes"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered non-existing germplasmDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8af7e7ef-95df-4c85-afd3-bc4a93c30cdc",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"pm.test(\"Verify returned error\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.errors[0].message).to.eql(\"Invalid germplasm identifier\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f1038578-2824-43e9-ad97-8d04e0cbc396",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/germplasm/{{nonExistingGID}}/attributes",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"germplasm",
										"{{nonExistingGID}}",
										"attributes"
									]
								},
								"description": "GET /{crop}​/brapi​/v1​/search​/germplasm​/{germplasmDbId}​/attributes"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered valid germplasmDbId and attributeDbId Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "25ded4fe-02f5-40a0-8eac-7bf2c99ca2b3",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Verify returned metadata\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(10000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(1);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"pm.test(\"Check attribute details \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0].attributeCode).to.eql(\"ORI_COUN\");",
											"    pm.expect(jsonData.result.data[0].attributeDbId).to.eql(224);",
											"    pm.expect(jsonData.result.data[0].attributeName).to.eql(\"Country of Origin\");",
											"    pm.expect(jsonData.result.data[0].determinedDate).to.eql(20181025);",
											"    pm.expect(jsonData.result.data[0].value).to.eql(\"ORI_COUN1\");",
											"});",
											"",
											"pm.test(\"Check returned germplasmDbId \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.germplasmDbId).to.eql(pm.environment.get(\"germplasmDbId\"));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "70da8284-0929-438a-85af-5ee61d55abfe",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/germplasm/{{germplasmDbId}}/attributes?attributeDbIds=224&page=0&pageSize=10000",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"germplasm",
										"{{germplasmDbId}}",
										"attributes"
									],
									"query": [
										{
											"key": "attributeDbIds",
											"value": "224"
										},
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "10000"
										}
									]
								},
								"description": "GET /{crop}​/brapi​/v1​/search​/germplasm​/{germplasmDbId}​/attributes"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered pageSize greater than max",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ef3d9de9-0213-420f-a74b-5f906553a966",
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"",
											"pm.test(\"Verify returned error message\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.errors[0].message).to.eql(\"Page size must between 1 and 10000.\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0cb62b09-15b9-407f-9b50-02a0522f687b",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/germplasm/{{germplasmDbId}}/attributes?attributeDbIds=224&page=0&pageSize=10001",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"germplasm",
										"{{germplasmDbId}}",
										"attributes"
									],
									"query": [
										{
											"key": "attributeDbIds",
											"value": "224"
										},
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "10001"
										}
									]
								},
								"description": "GET /{crop}​/brapi​/v1​/search​/germplasm​/{germplasmDbId}​/attributes"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "GET /{crop}/brapi/v1/search/germplasm/{searchResultsDbid}",
					"item": [
						{
							"name": "Verify results when entered searchResultsDbid that filters by preferredName",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "330961aa-1266-4404-9089-8b9859bc9d49",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "40f6d5a5-cefd-459d-86b9-e1c28f623bd4",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"var jsonData = pm.response.json();\r",
											"var data = jsonData.result.data[0];\r",
											"pm.test(\"Verify returned metadata\", function () {\r",
											"    pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);\r",
											"    pm.expect(jsonData.metadata.pagination.pageSize).to.eql(100);\r",
											"    pm.expect(jsonData.metadata.pagination.totalCount).to.eql(1);\r",
											"    pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);\r",
											"    pm.expect(jsonData.metadata.status).to.eql([]);\r",
											"    pm.expect(jsonData.metadata.datafiles).to.eql([]);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Check germplasmDbId \", function () {\r",
											"    pm.expect(data.germplasmDbId).to.eql(\"21\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check defaultDisplayName \", function () {\r",
											"    pm.expect(data.defaultDisplayName).to.eql(\"CML1\");\r",
											"});\r",
											"pm.test(\"Check accessionNumber \", function () {\r",
											"    pm.expect(data.accessionNumber).to.eql(\"ACCNO1\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check germplasmName \", function () {\r",
											"    pm.expect(data.germplasmName).to.eql(\"CML1\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check pedigree\", function () {\r",
											"    pm.expect(data.pedigree).to.eql(\"CML1\");\r",
											"});\r",
											"pm.test(\"Check germplasmSeedSource\", function () {\r",
											"    pm.expect(data.germplasmSeedSource).to.eql(\"AA001\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check synonyms\", function () {\r",
											" var names = [\"GP1\",\"ACCNO1\", \"DVNM1\", \"GENUS1\", \"DVNM1\"];\r",
											"   for (var i = 0; i < data.synonyms.length; i++) {\r",
											"    pm.expect(data.synonyms[i]).to.eql(names[i]);\r",
											"    }\r",
											"});\r",
											"\r",
											"pm.test(\"Check commonCropName\", function () {\r",
											"    pm.expect(data.commonCropName).to.eql(\"testdata\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check instituteCode\", function () {\r",
											"    pm.expect(data.instituteCode).to.eql(\"PROGM1\");\r",
											"});\r",
											"pm.test(\"Check instituteName\", function () {\r",
											"    pm.expect(data.instituteName).to.eql(\"PROGM1\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check countryOfOriginCode\", function () {\r",
											"    pm.expect(data.countryOfOriginCode).to.eql(\"ORI_COUN1\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check typeOfGermplasmStorageCode\", function () {\r",
											"    pm.expect(data.typeOfGermplasmStorageCode).to.eql([]);\r",
											"});\r",
											"pm.test(\"Check genus\", function () {\r",
											"    pm.expect(data.genus).to.eql(\"GENUS1\");\r",
											"});\r",
											"pm.test(\"Check species\", function () {\r",
											"    pm.expect(data.species).to.eql(\"SPNAM1\");\r",
											"});\r",
											"pm.test(\"Check taxonIds\", function () {\r",
											"    pm.expect(data.taxonIds).to.eql([]);\r",
											"});\r",
											"pm.test(\"Check speciesAuthority\", function () {\r",
											"    pm.expect(data.speciesAuthority).to.eql(\"SPAUTH1\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check subtaxa\", function () {\r",
											"    pm.expect(data.subtaxa).to.eql(\"SUBTAX1\");\r",
											"});\r",
											"pm.test(\"Check subtaxaAuthority\", function () {\r",
											"    pm.expect(data.subtaxaAuthority).to.eql(\"STAUTH1\");\r",
											"});\r",
											"pm.test(\"Check donors\", function () {\r",
											"    pm.expect(data.donors).to.eql([]);\r",
											"});\r",
											"pm.test(\"Check acquisitionDate\", function () {\r",
											"    pm.expect(data.acquisitionDate).to.eql(\"2018-10-25\");\r",
											"});\r",
											"pm.test(\"Check breedingMethodDbId\", function () {\r",
											"    pm.expect(data.breedingMethodDbId).to.eql(\"Accession into genebank\");\r",
											"});\r",
											"pm.test(\"Check germplasmGenus\", function () {\r",
											"    pm.expect(data.germplasmGenus).to.eql(\"GENUS1\");\r",
											"});\r",
											"pm.test(\"Check germplasmSpecies\", function () {\r",
											"    pm.expect(data.germplasmSpecies).to.eql(\"SPNAM1\");\r",
											"});\r",
											"pm.test(\"Check seedSource\", function () {\r",
											"    pm.expect(data.seedSource).to.eql(\"AA001\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check observations\", function () {\r",
											"    pm.expect(jsonData.result.observations).to.eql([]);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/search/germplasm/{{searchResultDbId_preferredName}}?page=0&pageSize=100",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"search",
										"germplasm",
										"{{searchResultDbId_preferredName}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "100"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/search/germplasm/{searchResultsDbid}"
							},
							"response": []
						},
						{
							"name": "Verify results when entered searchResultsDbid that filters by germplasmSpecies",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "48a8177b-9e63-45c5-81dd-c6df1e065e5e",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "674cc0be-f230-4aa7-8273-00347cdcf583",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"var jsonData = pm.response.json();\r",
											"var data = jsonData.result.data[0];\r",
											"pm.test(\"Verify returned metadata\", function () {\r",
											"    pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);\r",
											"    pm.expect(jsonData.metadata.pagination.pageSize).to.eql(100);\r",
											"    pm.expect(jsonData.metadata.pagination.totalCount).to.eql(1);\r",
											"    pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);\r",
											"    pm.expect(jsonData.metadata.status).to.eql([]);\r",
											"    pm.expect(jsonData.metadata.datafiles).to.eql([]);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Check germplasmDbId \", function () {\r",
											"    pm.expect(data.germplasmDbId).to.eql(\"21\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check defaultDisplayName \", function () {\r",
											"    pm.expect(data.defaultDisplayName).to.eql(\"CML1\");\r",
											"});\r",
											"pm.test(\"Check accessionNumber \", function () {\r",
											"    pm.expect(data.accessionNumber).to.eql(\"ACCNO1\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check germplasmName \", function () {\r",
											"    pm.expect(data.germplasmName).to.eql(\"CML1\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check pedigree\", function () {\r",
											"    pm.expect(data.pedigree).to.eql(\"CML1\");\r",
											"});\r",
											"pm.test(\"Check germplasmSeedSource\", function () {\r",
											"    pm.expect(data.germplasmSeedSource).to.eql(\"AA001\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check synonyms\", function () {\r",
											" var names = [\"GP1\",\"ACCNO1\", \"DVNM1\", \"GENUS1\", \"DVNM1\"];\r",
											"   for (var i = 0; i < data.synonyms.length; i++) {\r",
											"    pm.expect(data.synonyms[i]).to.eql(names[i]);\r",
											"    }\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Check commonCropName\", function () {\r",
											"    pm.expect(data.commonCropName).to.eql(\"testdata\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check instituteCode\", function () {\r",
											"    pm.expect(data.instituteCode).to.eql(\"PROGM1\");\r",
											"});\r",
											"pm.test(\"Check instituteName\", function () {\r",
											"    pm.expect(data.instituteName).to.eql(\"PROGM1\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check countryOfOriginCode\", function () {\r",
											"    pm.expect(data.countryOfOriginCode).to.eql(\"ORI_COUN1\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check typeOfGermplasmStorageCode\", function () {\r",
											"    pm.expect(data.typeOfGermplasmStorageCode).to.eql([]);\r",
											"});\r",
											"pm.test(\"Check genus\", function () {\r",
											"    pm.expect(data.genus).to.eql(\"GENUS1\");\r",
											"});\r",
											"pm.test(\"Check species\", function () {\r",
											"    pm.expect(data.species).to.eql(\"SPNAM1\");\r",
											"});\r",
											"pm.test(\"Check taxonIds\", function () {\r",
											"    pm.expect(data.taxonIds).to.eql([]);\r",
											"});\r",
											"pm.test(\"Check speciesAuthority\", function () {\r",
											"    pm.expect(data.speciesAuthority).to.eql(\"SPAUTH1\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check subtaxa\", function () {\r",
											"    pm.expect(data.subtaxa).to.eql(\"SUBTAX1\");\r",
											"});\r",
											"pm.test(\"Check subtaxaAuthority\", function () {\r",
											"    pm.expect(data.subtaxaAuthority).to.eql(\"STAUTH1\");\r",
											"});\r",
											"pm.test(\"Check donors\", function () {\r",
											"    pm.expect(data.donors).to.eql([]);\r",
											"});\r",
											"pm.test(\"Check acquisitionDate\", function () {\r",
											"    pm.expect(data.acquisitionDate).to.eql(\"2018-10-25\");\r",
											"});\r",
											"pm.test(\"Check breedingMethodDbId\", function () {\r",
											"    pm.expect(data.breedingMethodDbId).to.eql(\"Accession into genebank\");\r",
											"});\r",
											"pm.test(\"Check germplasmGenus\", function () {\r",
											"    pm.expect(data.germplasmGenus).to.eql(\"GENUS1\");\r",
											"});\r",
											"pm.test(\"Check germplasmSpecies\", function () {\r",
											"    pm.expect(data.germplasmSpecies).to.eql(\"SPNAM1\");\r",
											"});\r",
											"pm.test(\"Check seedSource\", function () {\r",
											"    pm.expect(data.seedSource).to.eql(\"AA001\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check observations\", function () {\r",
											"    pm.expect(jsonData.result.observations).to.eql([]);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/search/germplasm/{{searchResultDbId_germplasmSpecies}}?page=0&pageSize=100",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"search",
										"germplasm",
										"{{searchResultDbId_germplasmSpecies}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "100"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/search/germplasm/{searchResultsDbid}"
							},
							"response": []
						},
						{
							"name": "Verify results when entered searchResultsDbid that filters by accessionNumbers",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "30af4be3-5845-431a-87bc-94d3e7de28b4",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "1ea3f795-916e-4e38-a0a7-fe75cfbf8815",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"var jsonData = pm.response.json();\r",
											"var data = jsonData.result.data[0];\r",
											"pm.test(\"Verify returned metadata\", function () {\r",
											"    pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);\r",
											"    pm.expect(jsonData.metadata.pagination.pageSize).to.eql(100);\r",
											"    pm.expect(jsonData.metadata.pagination.totalCount).to.eql(1);\r",
											"    pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);\r",
											"    pm.expect(jsonData.metadata.status).to.eql([]);\r",
											"    pm.expect(jsonData.metadata.datafiles).to.eql([]);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Check germplasmDbId \", function () {\r",
											"    pm.expect(data.germplasmDbId).to.eql(\"21\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check defaultDisplayName \", function () {\r",
											"    pm.expect(data.defaultDisplayName).to.eql(\"CML1\");\r",
											"});\r",
											"pm.test(\"Check accessionNumber \", function () {\r",
											"    pm.expect(data.accessionNumber).to.eql(\"ACCNO1\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check germplasmName \", function () {\r",
											"    pm.expect(data.germplasmName).to.eql(\"CML1\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check pedigree\", function () {\r",
											"    pm.expect(data.pedigree).to.eql(\"CML1\");\r",
											"});\r",
											"pm.test(\"Check germplasmSeedSource\", function () {\r",
											"    pm.expect(data.germplasmSeedSource).to.eql(\"AA001\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check synonyms\", function () {\r",
											" var names = [\"GP1\",\"ACCNO1\", \"DVNM1\", \"GENUS1\", \"DVNM1\"];\r",
											"   for (var i = 0; i < data.synonyms.length; i++) {\r",
											"    pm.expect(data.synonyms[i]).to.eql(names[i]);\r",
											"    }\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Check commonCropName\", function () {\r",
											"    pm.expect(data.commonCropName).to.eql(\"testdata\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check instituteCode\", function () {\r",
											"    pm.expect(data.instituteCode).to.eql(\"PROGM1\");\r",
											"});\r",
											"pm.test(\"Check instituteName\", function () {\r",
											"    pm.expect(data.instituteName).to.eql(\"PROGM1\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check countryOfOriginCode\", function () {\r",
											"    pm.expect(data.countryOfOriginCode).to.eql(\"ORI_COUN1\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check typeOfGermplasmStorageCode\", function () {\r",
											"    pm.expect(data.typeOfGermplasmStorageCode).to.eql([]);\r",
											"});\r",
											"pm.test(\"Check genus\", function () {\r",
											"    pm.expect(data.genus).to.eql(\"GENUS1\");\r",
											"});\r",
											"pm.test(\"Check species\", function () {\r",
											"    pm.expect(data.species).to.eql(\"SPNAM1\");\r",
											"});\r",
											"pm.test(\"Check taxonIds\", function () {\r",
											"    pm.expect(data.taxonIds).to.eql([]);\r",
											"});\r",
											"pm.test(\"Check speciesAuthority\", function () {\r",
											"    pm.expect(data.speciesAuthority).to.eql(\"SPAUTH1\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check subtaxa\", function () {\r",
											"    pm.expect(data.subtaxa).to.eql(\"SUBTAX1\");\r",
											"});\r",
											"pm.test(\"Check subtaxaAuthority\", function () {\r",
											"    pm.expect(data.subtaxaAuthority).to.eql(\"STAUTH1\");\r",
											"});\r",
											"pm.test(\"Check donors\", function () {\r",
											"    pm.expect(data.donors).to.eql([]);\r",
											"});\r",
											"pm.test(\"Check acquisitionDate\", function () {\r",
											"    pm.expect(data.acquisitionDate).to.eql(\"2018-10-25\");\r",
											"});\r",
											"pm.test(\"Check breedingMethodDbId\", function () {\r",
											"    pm.expect(data.breedingMethodDbId).to.eql(\"Accession into genebank\");\r",
											"});\r",
											"pm.test(\"Check germplasmGenus\", function () {\r",
											"    pm.expect(data.germplasmGenus).to.eql(\"GENUS1\");\r",
											"});\r",
											"pm.test(\"Check germplasmSpecies\", function () {\r",
											"    pm.expect(data.germplasmSpecies).to.eql(\"SPNAM1\");\r",
											"});\r",
											"pm.test(\"Check seedSource\", function () {\r",
											"    pm.expect(data.seedSource).to.eql(\"AA001\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check observations\", function () {\r",
											"    pm.expect(jsonData.result.observations).to.eql([]);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/search/germplasm/{{searchResultDbId_accessionNumbers}}?page=0&pageSize=100",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"search",
										"germplasm",
										"{{searchResultDbId_accessionNumbers}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "100"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/search/germplasm/{searchResultsDbid}"
							},
							"response": []
						},
						{
							"name": "Verify results when entered searchResultsDbid that filters by germplasmDbIds",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "28976a91-2bef-48a5-bcb9-c78002a62a5d",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "704c9935-a92b-4734-90a2-e91dff7d99ce",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"var jsonData = pm.response.json();\r",
											"var data = jsonData.result.data[0];\r",
											"pm.test(\"Verify returned metadata\", function () {\r",
											"    pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);\r",
											"    pm.expect(jsonData.metadata.pagination.pageSize).to.eql(100);\r",
											"    pm.expect(jsonData.metadata.pagination.totalCount).to.eql(1);\r",
											"    pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);\r",
											"    pm.expect(jsonData.metadata.status).to.eql([]);\r",
											"    pm.expect(jsonData.metadata.datafiles).to.eql([]);\r",
											"});\r",
											"\r",
											"pm.test(\"Check germplasmDbId \", function () {\r",
											"    pm.expect(data.germplasmDbId).to.eql(\"21\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check defaultDisplayName \", function () {\r",
											"    pm.expect(data.defaultDisplayName).to.eql(\"CML1\");\r",
											"});\r",
											"pm.test(\"Check accessionNumber \", function () {\r",
											"    pm.expect(data.accessionNumber).to.eql(\"ACCNO1\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check germplasmName \", function () {\r",
											"    pm.expect(data.germplasmName).to.eql(\"CML1\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check pedigree\", function () {\r",
											"    pm.expect(data.pedigree).to.eql(\"CML1\");\r",
											"});\r",
											"pm.test(\"Check germplasmSeedSource\", function () {\r",
											"    pm.expect(data.germplasmSeedSource).to.eql(\"AA001\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check synonyms\", function () {\r",
											" var names = [\"GP1\",\"ACCNO1\", \"DVNM1\", \"GENUS1\", \"DVNM1\"];\r",
											"   for (var i = 0; i < data.synonyms.length; i++) {\r",
											"    pm.expect(data.synonyms[i]).to.eql(names[i]);\r",
											"    }\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Check commonCropName\", function () {\r",
											"    pm.expect(data.commonCropName).to.eql(\"testdata\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check instituteCode\", function () {\r",
											"    pm.expect(data.instituteCode).to.eql(\"PROGM1\");\r",
											"});\r",
											"pm.test(\"Check instituteName\", function () {\r",
											"    pm.expect(data.instituteName).to.eql(\"PROGM1\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check countryOfOriginCode\", function () {\r",
											"    pm.expect(data.countryOfOriginCode).to.eql(\"ORI_COUN1\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check typeOfGermplasmStorageCode\", function () {\r",
											"    pm.expect(data.typeOfGermplasmStorageCode).to.eql([]);\r",
											"});\r",
											"pm.test(\"Check genus\", function () {\r",
											"    pm.expect(data.genus).to.eql(\"GENUS1\");\r",
											"});\r",
											"pm.test(\"Check species\", function () {\r",
											"    pm.expect(data.species).to.eql(\"SPNAM1\");\r",
											"});\r",
											"pm.test(\"Check taxonIds\", function () {\r",
											"    pm.expect(data.taxonIds).to.eql([]);\r",
											"});\r",
											"pm.test(\"Check speciesAuthority\", function () {\r",
											"    pm.expect(data.speciesAuthority).to.eql(\"SPAUTH1\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check subtaxa\", function () {\r",
											"    pm.expect(data.subtaxa).to.eql(\"SUBTAX1\");\r",
											"});\r",
											"pm.test(\"Check subtaxaAuthority\", function () {\r",
											"    pm.expect(data.subtaxaAuthority).to.eql(\"STAUTH1\");\r",
											"});\r",
											"pm.test(\"Check donors\", function () {\r",
											"    pm.expect(data.donors).to.eql([]);\r",
											"});\r",
											"pm.test(\"Check acquisitionDate\", function () {\r",
											"    pm.expect(data.acquisitionDate).to.eql(\"2018-10-25\");\r",
											"});\r",
											"pm.test(\"Check breedingMethodDbId\", function () {\r",
											"    pm.expect(data.breedingMethodDbId).to.eql(\"Accession into genebank\");\r",
											"});\r",
											"pm.test(\"Check germplasmGenus\", function () {\r",
											"    pm.expect(data.germplasmGenus).to.eql(\"GENUS1\");\r",
											"});\r",
											"pm.test(\"Check germplasmSpecies\", function () {\r",
											"    pm.expect(data.germplasmSpecies).to.eql(\"SPNAM1\");\r",
											"});\r",
											"pm.test(\"Check seedSource\", function () {\r",
											"    pm.expect(data.seedSource).to.eql(\"AA001\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check observations\", function () {\r",
											"    pm.expect(jsonData.result.observations).to.eql([]);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/search/germplasm/{{searchResultDbId_germplasmDbIds}}?page=0&pageSize=100",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"search",
										"germplasm",
										"{{searchResultDbId_germplasmDbIds}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "100"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/search/germplasm/{searchResultsDbid}"
							},
							"response": []
						},
						{
							"name": "Verify results when entered searchResultsDbid that filters by commonCropNames",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "1b28252d-826a-4898-9a08-0b27fae7f131",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "57abdc79-1ed7-44d2-a12b-b1e785cb5023",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"var jsonData = pm.response.json();\r",
											"var data = jsonData.result.data[0];\r",
											"pm.test(\"Verify returned metadata\", function () {\r",
											"    pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);\r",
											"    pm.expect(jsonData.metadata.pagination.pageSize).to.eql(100);\r",
											"    pm.expect(jsonData.metadata.pagination.totalCount).to.eql(60);\r",
											"    pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);\r",
											"    pm.expect(jsonData.metadata.status).to.eql([]);\r",
											"    pm.expect(jsonData.metadata.datafiles).to.eql([]);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Check germplasmDbId \", function () {\r",
											"    pm.expect(data.germplasmDbId).to.eql(\"21\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check defaultDisplayName \", function () {\r",
											"    pm.expect(data.defaultDisplayName).to.eql(\"CML1\");\r",
											"});\r",
											"pm.test(\"Check accessionNumber \", function () {\r",
											"    pm.expect(data.accessionNumber).to.eql(\"ACCNO1\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check germplasmName \", function () {\r",
											"    pm.expect(data.germplasmName).to.eql(\"CML1\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check pedigree\", function () {\r",
											"    pm.expect(data.pedigree).to.eql(\"CML1\");\r",
											"});\r",
											"pm.test(\"Check germplasmSeedSource\", function () {\r",
											"    pm.expect(data.germplasmSeedSource).to.eql(\"AA001\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check synonyms\", function () {\r",
											" var names = [\"GP1\",\"ACCNO1\", \"DVNM1\", \"GENUS1\", \"DVNM1\"];\r",
											"   for (var i = 0; i < data.synonyms.length; i++) {\r",
											"    pm.expect(data.synonyms[i]).to.eql(names[i]);\r",
											"    }\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Check commonCropName\", function () {\r",
											"    pm.expect(data.commonCropName).to.eql(\"testdata\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check instituteCode\", function () {\r",
											"    pm.expect(data.instituteCode).to.eql(\"PROGM1\");\r",
											"});\r",
											"pm.test(\"Check instituteName\", function () {\r",
											"    pm.expect(data.instituteName).to.eql(\"PROGM1\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check countryOfOriginCode\", function () {\r",
											"    pm.expect(data.countryOfOriginCode).to.eql(\"ORI_COUN1\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check typeOfGermplasmStorageCode\", function () {\r",
											"    pm.expect(data.typeOfGermplasmStorageCode).to.eql([]);\r",
											"});\r",
											"pm.test(\"Check genus\", function () {\r",
											"    pm.expect(data.genus).to.eql(\"GENUS1\");\r",
											"});\r",
											"pm.test(\"Check species\", function () {\r",
											"    pm.expect(data.species).to.eql(\"SPNAM1\");\r",
											"});\r",
											"pm.test(\"Check taxonIds\", function () {\r",
											"    pm.expect(data.taxonIds).to.eql([]);\r",
											"});\r",
											"pm.test(\"Check speciesAuthority\", function () {\r",
											"    pm.expect(data.speciesAuthority).to.eql(\"SPAUTH1\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check subtaxa\", function () {\r",
											"    pm.expect(data.subtaxa).to.eql(\"SUBTAX1\");\r",
											"});\r",
											"pm.test(\"Check subtaxaAuthority\", function () {\r",
											"    pm.expect(data.subtaxaAuthority).to.eql(\"STAUTH1\");\r",
											"});\r",
											"pm.test(\"Check donors\", function () {\r",
											"    pm.expect(data.donors).to.eql([]);\r",
											"});\r",
											"pm.test(\"Check acquisitionDate\", function () {\r",
											"    pm.expect(data.acquisitionDate).to.eql(\"2018-10-25\");\r",
											"});\r",
											"pm.test(\"Check breedingMethodDbId\", function () {\r",
											"    pm.expect(data.breedingMethodDbId).to.eql(\"Accession into genebank\");\r",
											"});\r",
											"pm.test(\"Check germplasmGenus\", function () {\r",
											"    pm.expect(data.germplasmGenus).to.eql(\"GENUS1\");\r",
											"});\r",
											"pm.test(\"Check germplasmSpecies\", function () {\r",
											"    pm.expect(data.germplasmSpecies).to.eql(\"SPNAM1\");\r",
											"});\r",
											"pm.test(\"Check seedSource\", function () {\r",
											"    pm.expect(data.seedSource).to.eql(\"AA001\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check observations\", function () {\r",
											"    pm.expect(jsonData.result.observations).to.eql([]);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/search/germplasm/{{searchResultDbId_commonCropNames}}?page=0&pageSize=100",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"search",
										"germplasm",
										"{{searchResultDbId_commonCropNames}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "100"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/search/germplasm/{searchResultsDbid}"
							},
							"response": []
						},
						{
							"name": "Verify results when entered searchResultsDbid that filters by germplasmGenus",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "0cfab9ed-7b9e-4e35-9183-815d99285bb0",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "8e6e0f59-9141-4b27-b8a9-762f68e2ca5d",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"var jsonData = pm.response.json();\r",
											"var data = jsonData.result.data[0];\r",
											"pm.test(\"Verify returned metadata\", function () {\r",
											"    pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);\r",
											"    pm.expect(jsonData.metadata.pagination.pageSize).to.eql(100);\r",
											"    pm.expect(jsonData.metadata.pagination.totalCount).to.eql(1);\r",
											"    pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);\r",
											"    pm.expect(jsonData.metadata.status).to.eql([]);\r",
											"    pm.expect(jsonData.metadata.datafiles).to.eql([]);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Check germplasmDbId \", function () {\r",
											"    pm.expect(data.germplasmDbId).to.eql(\"21\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check defaultDisplayName \", function () {\r",
											"    pm.expect(data.defaultDisplayName).to.eql(\"CML1\");\r",
											"});\r",
											"pm.test(\"Check accessionNumber \", function () {\r",
											"    pm.expect(data.accessionNumber).to.eql(\"ACCNO1\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check germplasmName \", function () {\r",
											"    pm.expect(data.germplasmName).to.eql(\"CML1\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check pedigree\", function () {\r",
											"    pm.expect(data.pedigree).to.eql(\"CML1\");\r",
											"});\r",
											"pm.test(\"Check germplasmSeedSource\", function () {\r",
											"    pm.expect(data.germplasmSeedSource).to.eql(\"AA001\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check synonyms\", function () {\r",
											" var names = [\"GP1\",\"ACCNO1\", \"DVNM1\", \"GENUS1\", \"DVNM1\"];\r",
											"   for (var i = 0; i < data.synonyms.length; i++) {\r",
											"    pm.expect(data.synonyms[i]).to.eql(names[i]);\r",
											"    }\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Check commonCropName\", function () {\r",
											"    pm.expect(data.commonCropName).to.eql(\"testdata\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check instituteCode\", function () {\r",
											"    pm.expect(data.instituteCode).to.eql(\"PROGM1\");\r",
											"});\r",
											"pm.test(\"Check instituteName\", function () {\r",
											"    pm.expect(data.instituteName).to.eql(\"PROGM1\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check countryOfOriginCode\", function () {\r",
											"    pm.expect(data.countryOfOriginCode).to.eql(\"ORI_COUN1\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check typeOfGermplasmStorageCode\", function () {\r",
											"    pm.expect(data.typeOfGermplasmStorageCode).to.eql([]);\r",
											"});\r",
											"pm.test(\"Check genus\", function () {\r",
											"    pm.expect(data.genus).to.eql(\"GENUS1\");\r",
											"});\r",
											"pm.test(\"Check species\", function () {\r",
											"    pm.expect(data.species).to.eql(\"SPNAM1\");\r",
											"});\r",
											"pm.test(\"Check taxonIds\", function () {\r",
											"    pm.expect(data.taxonIds).to.eql([]);\r",
											"});\r",
											"pm.test(\"Check speciesAuthority\", function () {\r",
											"    pm.expect(data.speciesAuthority).to.eql(\"SPAUTH1\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check subtaxa\", function () {\r",
											"    pm.expect(data.subtaxa).to.eql(\"SUBTAX1\");\r",
											"});\r",
											"pm.test(\"Check subtaxaAuthority\", function () {\r",
											"    pm.expect(data.subtaxaAuthority).to.eql(\"STAUTH1\");\r",
											"});\r",
											"pm.test(\"Check donors\", function () {\r",
											"    pm.expect(data.donors).to.eql([]);\r",
											"});\r",
											"pm.test(\"Check acquisitionDate\", function () {\r",
											"    pm.expect(data.acquisitionDate).to.eql(\"2018-10-25\");\r",
											"});\r",
											"pm.test(\"Check breedingMethodDbId\", function () {\r",
											"    pm.expect(data.breedingMethodDbId).to.eql(\"Accession into genebank\");\r",
											"});\r",
											"pm.test(\"Check germplasmGenus\", function () {\r",
											"    pm.expect(data.germplasmGenus).to.eql(\"GENUS1\");\r",
											"});\r",
											"pm.test(\"Check germplasmSpecies\", function () {\r",
											"    pm.expect(data.germplasmSpecies).to.eql(\"SPNAM1\");\r",
											"});\r",
											"pm.test(\"Check seedSource\", function () {\r",
											"    pm.expect(data.seedSource).to.eql(\"AA001\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check observations\", function () {\r",
											"    pm.expect(jsonData.result.observations).to.eql([]);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/search/germplasm/{{searchResultDbId_germplasmGenus}}?page=0&pageSize=100",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"search",
										"germplasm",
										"{{searchResultDbId_germplasmGenus}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "100"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/search/germplasm/{searchResultsDbid}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered non-existing searchResultsDbid",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "10779894-08db-4f14-8fdf-d1dcf70454ba",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3e12dfe7-28a4-44fe-98ad-aa9590228cea",
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"pm.test(\"Check error message\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.metadata.status[0].message).to.eql(\"no search request found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/search/germplasm/99999?page=0&pageSize=100",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"search",
										"germplasm",
										"99999"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "100"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/search/germplasm/{searchResultsDbid}"
							},
							"response": []
						},
						{
							"name": "Verify results when entered searchResultsDbid that filters by germplasmNames",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "b3dfb3bc-3bf4-4da7-838e-5f7e5433a6ba",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "427f66cb-ff0e-426d-ad77-0c2a4bdb51ba",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"var jsonData = pm.response.json();\r",
											"var data = jsonData.result.data[0];\r",
											"pm.test(\"Verify returned metadata\", function () {\r",
											"    pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);\r",
											"    pm.expect(jsonData.metadata.pagination.pageSize).to.eql(100);\r",
											"    pm.expect(jsonData.metadata.pagination.totalCount).to.eql(1);\r",
											"    pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);\r",
											"    pm.expect(jsonData.metadata.status).to.eql([]);\r",
											"    pm.expect(jsonData.metadata.datafiles).to.eql([]);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Check germplasmDbId \", function () {\r",
											"    pm.expect(data.germplasmDbId).to.eql(\"21\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check defaultDisplayName \", function () {\r",
											"    pm.expect(data.defaultDisplayName).to.eql(\"CML1\");\r",
											"});\r",
											"pm.test(\"Check accessionNumber \", function () {\r",
											"    pm.expect(data.accessionNumber).to.eql(\"ACCNO1\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check germplasmName \", function () {\r",
											"    pm.expect(data.germplasmName).to.eql(\"CML1\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check pedigree\", function () {\r",
											"    pm.expect(data.pedigree).to.eql(\"CML1\");\r",
											"});\r",
											"pm.test(\"Check germplasmSeedSource\", function () {\r",
											"    pm.expect(data.germplasmSeedSource).to.eql(\"AA001\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check synonyms\", function () {\r",
											" var names = [\"GP1\",\"ACCNO1\", \"DVNM1\", \"GENUS1\", \"DVNM1\"];\r",
											"   for (var i = 0; i < data.synonyms.length; i++) {\r",
											"    pm.expect(data.synonyms[i]).to.eql(names[i]);\r",
											"    }\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Check commonCropName\", function () {\r",
											"    pm.expect(data.commonCropName).to.eql(\"testdata\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check instituteCode\", function () {\r",
											"    pm.expect(data.instituteCode).to.eql(\"PROGM1\");\r",
											"});\r",
											"pm.test(\"Check instituteName\", function () {\r",
											"    pm.expect(data.instituteName).to.eql(\"PROGM1\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check countryOfOriginCode\", function () {\r",
											"    pm.expect(data.countryOfOriginCode).to.eql(\"ORI_COUN1\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check typeOfGermplasmStorageCode\", function () {\r",
											"    pm.expect(data.typeOfGermplasmStorageCode).to.eql([]);\r",
											"});\r",
											"pm.test(\"Check genus\", function () {\r",
											"    pm.expect(data.genus).to.eql(\"GENUS1\");\r",
											"});\r",
											"pm.test(\"Check species\", function () {\r",
											"    pm.expect(data.species).to.eql(\"SPNAM1\");\r",
											"});\r",
											"pm.test(\"Check taxonIds\", function () {\r",
											"    pm.expect(data.taxonIds).to.eql([]);\r",
											"});\r",
											"pm.test(\"Check speciesAuthority\", function () {\r",
											"    pm.expect(data.speciesAuthority).to.eql(\"SPAUTH1\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check subtaxa\", function () {\r",
											"    pm.expect(data.subtaxa).to.eql(\"SUBTAX1\");\r",
											"});\r",
											"pm.test(\"Check subtaxaAuthority\", function () {\r",
											"    pm.expect(data.subtaxaAuthority).to.eql(\"STAUTH1\");\r",
											"});\r",
											"pm.test(\"Check donors\", function () {\r",
											"    pm.expect(data.donors).to.eql([]);\r",
											"});\r",
											"pm.test(\"Check acquisitionDate\", function () {\r",
											"    pm.expect(data.acquisitionDate).to.eql(\"2018-10-25\");\r",
											"});\r",
											"pm.test(\"Check breedingMethodDbId\", function () {\r",
											"    pm.expect(data.breedingMethodDbId).to.eql(\"Accession into genebank\");\r",
											"});\r",
											"pm.test(\"Check germplasmGenus\", function () {\r",
											"    pm.expect(data.germplasmGenus).to.eql(\"GENUS1\");\r",
											"});\r",
											"pm.test(\"Check germplasmSpecies\", function () {\r",
											"    pm.expect(data.germplasmSpecies).to.eql(\"SPNAM1\");\r",
											"});\r",
											"pm.test(\"Check seedSource\", function () {\r",
											"    pm.expect(data.seedSource).to.eql(\"AA001\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check observations\", function () {\r",
											"    pm.expect(jsonData.result.observations).to.eql([]);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/search/germplasm/{{searchResultDbId_germplasmNames}}?page=0&pageSize=100",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"search",
										"germplasm",
										"{{searchResultDbId_germplasmNames}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "100"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/search/germplasm/{searchResultsDbid}"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "GET ​/{crop}​/brapi​/v1​/studies​/{studyDbId}​/germplasm",
					"item": [
						{
							"name": "Verify response code and body when entered valid studyDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "be4c815e-4325-42d3-bfbd-161a67e0abdf",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"var data = jsonData.result.data[0];",
											"pm.test(\"Verify returned metadata\", function () {",
											"",
											"    pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											"    pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											"    pm.expect(jsonData.metadata.pagination.totalCount).to.eql(20);",
											"    pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											"    pm.expect(jsonData.metadata.status).to.eql([]);",
											"    pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"//Verify returned data",
											"pm.test(\"Check germplasmDbId\", function () {",
											"    pm.expect(data.germplasmDbId).to.eql(\"21\");",
											"});",
											"",
											"pm.test(\"Check defaultDisplayName\", function () {",
											"    pm.expect(data.defaultDisplayName).to.eql(\"CML1\");",
											"});",
											"pm.test(\"Check germplasmName\", function () {",
											"    pm.expect(data.germplasmName).to.eql(\"CML1\");",
											"});",
											"pm.test(\"Check pedigree\", function () {",
											"    pm.expect(data.pedigree).to.eql(\"CML1\");",
											"});",
											"pm.test(\"Check germplasmSeedSource\", function () {",
											"    pm.expect(data.germplasmSeedSource).to.eql(\"AA001\");",
											"});",
											"pm.test(\"Check synonyms\", function () {",
											" var names = [\"GP1\",\"ACCNO1\", \"DVNM1\", \"GENUS1\", \"DVNM1\"];",
											"   for (var i = 0; i < data.synonyms.length; i++) {",
											"    pm.expect(data.synonyms[i]).to.eql(names[i]);",
											"    }",
											"",
											"});",
											"pm.test(\"Check commonCropName\", function () {",
											"    pm.expect(data.commonCropName).to.eql(\"testdata\");",
											"});",
											"pm.test(\"Check instituteCode\", function () {",
											"    pm.expect(data.instituteCode).to.eql(\"PROGM1\");",
											"});",
											"pm.test(\"Check instituteName\", function () {",
											"    pm.expect(data.instituteName).to.eql(\"PROGM1\");",
											"});",
											"pm.test(\"Check countryOfOriginCode\", function () {",
											"    pm.expect(data.countryOfOriginCode).to.eql(\"ORI_COUN1\");",
											"});",
											"pm.test(\"Check typeOfGermplasmStorageCode\", function () {",
											"    pm.expect(data.typeOfGermplasmStorageCode).to.eql([]);",
											"});",
											"pm.test(\"Check genus\", function () {",
											"    pm.expect(data.genus).to.eql(\"GENUS1\");",
											"});",
											"pm.test(\"Check species\", function () {",
											"    pm.expect(data.species).to.eql(\"SPNAM1\");",
											"});",
											"pm.test(\"Check taxonIds\", function () {",
											"    pm.expect(data.taxonIds).to.eql([]);",
											"});",
											"pm.test(\"Check speciesAuthority\", function () {",
											"    pm.expect(data.speciesAuthority).to.eql(\"SPAUTH1\");",
											"});",
											"pm.test(\"Check subtaxa\", function () {",
											"    pm.expect(data.subtaxa).to.eql(\"SUBTAX1\");",
											"});",
											"pm.test(\"Check subtaxaAuthority\", function () {",
											"    pm.expect(data.subtaxaAuthority).to.eql(\"STAUTH1\");",
											"});",
											"pm.test(\"Check donors\", function () {",
											"    pm.expect(data.donors).to.eql([]);",
											"});",
											"pm.test(\"Check acquisitionDate\", function () {",
											"    pm.expect(data.acquisitionDate).to.eql(\"2018-10-25\");",
											"});",
											"pm.test(\"Check breedingMethodDbId\", function () {",
											"    pm.expect(data.breedingMethodDbId).to.eql(\"Accession into genebank\");",
											"});",
											"pm.test(\"Check germplasmGenus\", function () {",
											"    pm.expect(data.germplasmGenus).to.eql(\"GENUS1\");",
											"});",
											"pm.test(\"Check germplasmSpecies\", function () {",
											"    pm.expect(data.germplasmSpecies).to.eql(\"SPNAM1\");",
											"});",
											"pm.test(\"Check seedSource\", function () {",
											"    pm.expect(data.seedSource).to.eql(\"AA001\");",
											"});",
											"pm.test(\"Check entryNumber\", function () {",
											"    pm.expect(data.entryNumber).to.eql(\"1\");",
											"});",
											"",
											"",
											"pm.test(\"Verify returned studyDbId\", function () {",
											"    pm.expect(jsonData.result.studyDbId).to.eql(pm.environment.get(\"studyDbId\"));",
											"});",
											"pm.test(\"Verify returned trialName\", function () {",
											"    pm.expect(jsonData.result.trialName).to.eql(\"Randomized Trial 20180003\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "53122ea4-9299-44c8-b523-f1b5cb0ddcae",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/studies/{{studyDbId}}/germplasm",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"studies",
										"{{studyDbId}}",
										"germplasm"
									]
								},
								"description": "GET /{crop}/brapi/v1/studies/{studyDbId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered non-existing studyDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "77f832c4-575f-4888-8dcc-c7b5dd8d9255",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Verify returned error\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"StudyDbId does not exist\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0a4d5442-9c0a-43a9-9513-4eae09bfd2e2",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/studies/{{non_existing_study_id}}/germplasm",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"studies",
										"{{non_existing_study_id}}",
										"germplasm"
									]
								},
								"description": "GET /{crop}/brapi/v1/studies/{studyDbId}"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "GET ​/{crop}​/brapi​/v1​/germplasm-search",
					"item": [
						{
							"name": "GET /{crop}/brapi/v1/germplasm-search using germplasmName",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b1996463-68ca-4a2d-afd9-10106cb2e15a",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Check GID \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0].germplasmDbId).to.eql(\"21\");",
											"});",
											"",
											"pm.test(\"Check defaultDisplayName \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0].defaultDisplayName).to.eql(\"CML1\");",
											"});",
											"pm.test(\"Check accessionNumber \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0].accessionNumber).to.eql(\"ACCNO1\");",
											"});",
											"",
											"pm.test(\"Check germplasmName \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0].germplasmName).to.eql(\"CML1\");",
											"});",
											"",
											"pm.test(\"Check pedigree\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0].pedigree).to.eql(\"CML1\");",
											"});",
											"  ",
											"pm.test(\"Check germplasmSeedSource\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0].germplasmSeedSource).to.eql(\"AA001\");",
											"});",
											"  ",
											"pm.test(\"Check commonCropName\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0].commonCropName).to.eql(\"testdata\");",
											"});",
											"",
											"pm.test(\"Check instituteCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0].instituteCode).to.eql(\"PROGM1\");",
											"});",
											"pm.test(\"Check instituteName\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0].instituteName).to.eql(\"PROGM1\");",
											"});",
											"",
											"pm.test(\"Check countryOfOriginCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0].countryOfOriginCode).to.eql(\"ORI_COUN1\");",
											"});",
											"",
											"pm.test(\"Check genus\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0].genus).to.eql(\"GENUS1\");",
											"});",
											"",
											"pm.test(\"Check species\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0].species).to.eql(\"SPNAM1\");",
											"});",
											"",
											"pm.test(\"Check speciesAuthority\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0].speciesAuthority).to.eql(\"SPAUTH1\");",
											"});",
											"",
											"pm.test(\"Check subtaxa\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0].subtaxa).to.eql(\"SUBTAX1\");",
											"});",
											"",
											"pm.test(\"Check acquisitionDate\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0].acquisitionDate).to.eql(\"2018-10-25\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a644d59e-a9a1-4cf1-9191-307ce4edc72b",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/germplasm-search?germplasmName=CML1",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"germplasm-search"
									],
									"query": [
										{
											"key": "germplasmName",
											"value": "CML1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET /{crop}/brapi/v1/germplasm-search using germplasmDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "25e72ce5-99f6-49d7-bfa6-cfa795763469",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Check GID \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0].germplasmDbId).to.eql(\"21\");",
											"});",
											"",
											"pm.test(\"Check defaultDisplayName \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0].defaultDisplayName).to.eql(\"CML1\");",
											"});",
											"pm.test(\"Check accessionNumber \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0].accessionNumber).to.eql(\"ACCNO1\");",
											"});",
											"",
											"pm.test(\"Check germplasmName \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0].germplasmName).to.eql(\"CML1\");",
											"});",
											"",
											"pm.test(\"Check pedigree\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0].pedigree).to.eql(\"CML1\");",
											"});",
											"  ",
											"pm.test(\"Check germplasmSeedSource\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0].germplasmSeedSource).to.eql(\"AA001\");",
											"});",
											"  ",
											"pm.test(\"Check commonCropName\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0].commonCropName).to.eql(\"testdata\");",
											"});",
											"",
											"pm.test(\"Check instituteCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0].instituteCode).to.eql(\"PROGM1\");",
											"});",
											"pm.test(\"Check instituteName\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0].instituteName).to.eql(\"PROGM1\");",
											"});",
											"",
											"pm.test(\"Check countryOfOriginCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0].countryOfOriginCode).to.eql(\"ORI_COUN1\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "3ca9a807-4738-4b6f-8b1f-d2ff9ec5b670",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/germplasm-search?germplasmDbId=21",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"germplasm-search"
									],
									"query": [
										{
											"key": "germplasmDbId",
											"value": "21"
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "location-resource-brapi",
			"item": [
				{
					"name": "Verify response code and body when entered valid crop",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9fbe800a-fd47-4789-8758-311208147a61",
								"exec": [
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Check total results\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.metadata.pagination.totalCount).to.eql(5069);",
									"});",
									"",
									"pm.test(\"Check a country location\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.result.data[1].name).to.eql(\"Afghanistan\") &&",
									"    pm.expect(jsonData.result.data[1].locationType).to.eql(\"Country\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "c607e2e6-0b7d-496f-85e7-378bfe9cc793",
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{masterToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BMSurl}}/{{crop}}/brapi/v1/locations",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"{{crop}}",
								"brapi",
								"v1",
								"locations"
							]
						},
						"description": "GET ​/{crop}​/brapi​/v1​/locations"
					},
					"response": []
				},
				{
					"name": "Verify response code and body when entered locationType",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "07b4eda5-c9ff-45ef-8bf7-2b965bb076f2",
								"exec": [
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check location type of first result item\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.result.data[0].locationType).to.eql(\"Breeding Location\")",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "d3b1f9eb-2a62-4538-a711-7f0cef229da0",
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{masterToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BMSurl}}/{{crop}}/brapi/v1/locations?locationType=breeding location",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"{{crop}}",
								"brapi",
								"v1",
								"locations"
							],
							"query": [
								{
									"key": "locationType",
									"value": "breeding location"
								}
							]
						},
						"description": "GET ​/{crop}​/brapi​/v1​/locations"
					},
					"response": []
				},
				{
					"name": "Verify response code and body when entered pagination details",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bb054217-685f-4216-aff3-4c1170da5000",
								"exec": [
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check current page\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0)",
									"});",
									"",
									"pm.test(\"Check pageSize\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.metadata.pagination.pageSize).to.eql(10000)",
									"});",
									"",
									"pm.test(\"Check total results\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.metadata.pagination.totalCount).to.eql(5069);",
									"});",
									"",
									"pm.test(\"Check a country location\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.result.data[1].name).to.eql(\"Afghanistan\") &&",
									"    pm.expect(jsonData.result.data[1].locationType).to.eql(\"Country\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "4ebc1c92-31ae-41b6-bfef-8d491ea041e2",
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{masterToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BMSurl}}/{{crop}}/brapi/v1/locations?page=0&pageSize=10000",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"{{crop}}",
								"brapi",
								"v1",
								"locations"
							],
							"query": [
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "pageSize",
									"value": "10000"
								}
							]
						},
						"description": "GET ​/{crop}​/brapi​/v1​/locations"
					},
					"response": []
				},
				{
					"name": "Verify response code and body when entered pageSize greater than max",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5122d441-0d37-43fd-8be5-621f93119d59",
								"exec": [
									"pm.test(\"Status code is 500\", function () {",
									"    pm.response.to.have.status(500);",
									"});",
									"",
									"pm.test(\"Verify returned error message\", function () {",
									"    var jsonData = pm.response.json();",
									" pm.expect(jsonData.errors[0].message).to.eql(\"Page size must between 1 and 10000.\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "88de3542-cb6b-4b1c-a686-15a1635104fa",
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{masterToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BMSurl}}/{{crop}}/brapi/v1/locations?page=0&pageSize=10001",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"{{crop}}",
								"brapi",
								"v1",
								"locations"
							],
							"query": [
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "pageSize",
									"value": "10001"
								}
							]
						},
						"description": "GET ​/{crop}​/brapi​/v1​/locations"
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "program-resource-brapi",
			"item": [
				{
					"name": "GET ​/{crop}​/brapi​/v1​/programs",
					"item": [
						{
							"name": "Verify response code and body when entered programName",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "476f7a2e-cc3a-4b66-980c-879c27e66f2b",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(1);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"pm.test(\"Check programDbId\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0].programDbId).to.eql(\"c9e335d2-3057-4958-a43e-e38cf61d09ca\");",
											"});",
											"pm.test(\"Check programName\",function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0].name).to.eql(\"API Program\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "bc64520a-7ce7-44a6-a917-678d51cff7ad",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/programs?programName=API Program",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"programs"
									],
									"query": [
										{
											"key": "programName",
											"value": "API Program"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v1​/programs"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered non-existing programName",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "89f54322-a67a-4c13-a4e0-14b3b6b64ef9",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"",
											"pm.test(\"Verify returned error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.metadata.status[0].message).to.eql(\"program not found.\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2037044d-a250-475a-b34e-e8968a41f5a8",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/programs?programName=non-existing program name",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"programs"
									],
									"query": [
										{
											"key": "programName",
											"value": "non-existing program name"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v1​/programs"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered crop name only",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b812ffc0-52b7-4036-bd40-5dc8633790d2",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(1);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"pm.test(\"Check programDbId\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0].programDbId).to.eql(\"c9e335d2-3057-4958-a43e-e38cf61d09ca\");",
											"});",
											"pm.test(\"Check programName\",function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0].name).to.eql(\"API Program\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9daa4a5d-26c2-4cc4-a14a-815c0c0d74ea",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/programs",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"programs"
									]
								},
								"description": "GET ​/{crop}​/brapi​/v1​/programs"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered pagination details",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7499478f-86fe-4bfc-9e3e-db206a011076",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(10000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(1);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"pm.test(\"Check programDbId\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0].programDbId).to.eql(\"c9e335d2-3057-4958-a43e-e38cf61d09ca\");",
											"});",
											"pm.test(\"Check programName\",function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0].name).to.eql(\"API Program\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "47c08567-4324-4063-8336-b853e8e28d9e",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/programs?page=0&pageSize=10000",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"programs"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "10000"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v1​/programs"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered pageSize greater than maximum",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6f379f1b-0f4f-4647-9d3a-8d3a1334797b",
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"",
											"pm.test(\"Verify returned error message\",function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Page size must between 1 and 10000.\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "31adc852-0e1a-4016-96ca-e587b083deaa",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/programs?page=0&pageSize=10001",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"programs"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "10001"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v1​/programs"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "sample-resource-brapi",
			"item": [
				{
					"name": "Verify response code and body when entered valid sampleId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1f09a52f-8b34-4c14-a7f6-e057a20e2217",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Verify returned sampleId\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.result.sampleId).to.eql(pm.environment.get(\"study_sampleId\"));",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "8b570b1a-9280-4659-8e32-eee90a1e6081",
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{masterToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BMSurl}}/{{crop}}/brapi/v1/samples/{{study_sampleId}}",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"{{crop}}",
								"brapi",
								"v1",
								"samples",
								"{{study_sampleId}}"
							]
						},
						"description": "GET /{crop}/brapi/v1/samples/{sampleId}"
					},
					"response": []
				},
				{
					"name": "Verify response code and body when entered invalid sampleId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "49112503-aacc-4fc0-a763-3c34a8c37d2f",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"pm.test(\"Verify returned error message\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.metadata.status[0].message).to.eql(\"not found sample\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "ba43b60c-4998-4b05-92bb-635705de4a1a",
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{masterToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BMSurl}}/{{crop}}/brapi/v1/samples/{{string_not_found}}",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"{{crop}}",
								"brapi",
								"v1",
								"samples",
								"{{string_not_found}}"
							]
						},
						"description": "GET /{crop}/brapi/v1/samples/{sampleId}"
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "trial-resource-brapi",
			"item": [
				{
					"name": "GET ​/{crop}​/brapi​/v1​/trials",
					"item": [
						{
							"name": "Verify response code and body when entered crop name only",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "eebef2ee-3048-4f9a-9a37-fdd2af7762ee",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check details of a trial in the list are correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[1].trialDbId).to.eql(JSON.parse(pm.environment.get(\"trialStudyId\")));",
											"    pm.expect(jsonData.result.data[1].trialName).to.eql(\"Randomized Trial 20180003\");",
											"    pm.expect(jsonData.result.data[1].programDbId).to.eql(\"c9e335d2-3057-4958-a43e-e38cf61d09ca\");",
											"    pm.expect(jsonData.result.data[1].programName).to.eql(\"API Program\");",
											"    pm.expect(jsonData.result.data[1].startDate).to.eql(\"20180912\");",
											"    pm.expect(jsonData.result.data[1].endDate).to.eql(\"20190220\");",
											"    pm.expect(jsonData.result.data[1].active).to.eql(true);",
											"});",
											"",
											"pm.test(\"Check details of an associated environment are correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[1].studies[0].studyDbId).to.eql(2);",
											"    pm.expect(jsonData.result.data[1].studies[0].studyName).to.eql(\"Randomized Trial 20180003 Environment Number 1\");",
											"    pm.expect(jsonData.result.data[1].studies[0].locationDbId).to.eql(\"9001\");",
											"    pm.expect(jsonData.result.data[1].studies[0].locationName).to.eql(\"Africa Rice Centre\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a081f48e-f1e3-403e-ac6d-15349d1ac172",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/trials",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"trials"
									]
								},
								"description": "GET ​/{crop}​/brapi​/v1​/trials"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered programDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bbf378eb-94ed-4dc6-af47-1beae66068c9",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check details of a trial in the list are correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[1].trialDbId).to.eql(JSON.parse(pm.environment.get(\"trialStudyId\")));",
											"    pm.expect(jsonData.result.data[1].trialName).to.eql(\"Randomized Trial 20180003\");",
											"    pm.expect(jsonData.result.data[1].programDbId).to.eql(\"c9e335d2-3057-4958-a43e-e38cf61d09ca\");",
											"    pm.expect(jsonData.result.data[1].programName).to.eql(\"API Program\");",
											"    pm.expect(jsonData.result.data[1].startDate).to.eql(\"20180912\");",
											"    pm.expect(jsonData.result.data[1].endDate).to.eql(\"20190220\");",
											"    pm.expect(jsonData.result.data[1].active).to.eql(true);",
											"});",
											"",
											"pm.test(\"Check details of an associated environment are correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[1].studies[0].studyDbId).to.eql(2);",
											"    pm.expect(jsonData.result.data[1].studies[0].studyName).to.eql(\"Randomized Trial 20180003 Environment Number 1\");",
											"    pm.expect(jsonData.result.data[1].studies[0].locationDbId).to.eql(\"9001\");",
											"    pm.expect(jsonData.result.data[1].studies[0].locationName).to.eql(\"Africa Rice Centre\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "4d4aa15c-f880-4766-8971-5956726d7301",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/trials?programDbId={{programDbId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"trials"
									],
									"query": [
										{
											"key": "programDbId",
											"value": "{{programDbId}}"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v1​/trials"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered locationDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "995ced9b-482f-4d1c-bf6b-6a06e07e70b2",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ecf25b20-b2ce-47c2-acac-7e38d0c11f7e",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/trials?locationDbId=9001",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"trials"
									],
									"query": [
										{
											"key": "locationDbId",
											"value": "9001"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v1​/trials"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered page and pageSize",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1c6d4910-5a9d-4c2a-a69a-9f3499cd3a69",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check details of a trial in the list are correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[1].trialDbId).to.eql(JSON.parse(pm.environment.get(\"trialStudyId\")));",
											"    pm.expect(jsonData.result.data[1].trialName).to.eql(\"Randomized Trial 20180003\");",
											"    pm.expect(jsonData.result.data[1].programDbId).to.eql(\"c9e335d2-3057-4958-a43e-e38cf61d09ca\");",
											"    pm.expect(jsonData.result.data[1].programName).to.eql(\"API Program\");",
											"    pm.expect(jsonData.result.data[1].startDate).to.eql(\"20180912\");",
											"    pm.expect(jsonData.result.data[1].endDate).to.eql(\"20190220\");",
											"    pm.expect(jsonData.result.data[1].active).to.eql(true);",
											"});",
											"",
											"pm.test(\"Check details of an associated environment are correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[1].studies[0].studyDbId).to.eql(2);",
											"    pm.expect(jsonData.result.data[1].studies[0].studyName).to.eql(\"Randomized Trial 20180003 Environment Number 1\");",
											"    pm.expect(jsonData.result.data[1].studies[0].locationDbId).to.eql(\"9001\");",
											"    pm.expect(jsonData.result.data[1].studies[0].locationName).to.eql(\"Africa Rice Centre\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "61000514-59c1-4ac7-a1db-7f1e1c4671cf",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/trials?page=0&pageSize=2",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"trials"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "2"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v1​/trials"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered pageSize greater than max",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cff9e840-f466-447a-9931-e2317beadb44",
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"",
											"pm.test(\"Check response message when exceeded max page size\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Page size must between 1 and 10000.\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f8331004-dc56-4cfe-bc01-17f50b3b3e9a",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/trials?page=0&pageSize=10001",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"trials"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "10001"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v1​/trials"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered active status",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8258f526-d2da-46c7-ad9e-3f7ef580ca6b",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check details of a trial in the list are correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[1].trialDbId).to.eql(JSON.parse(pm.environment.get(\"trialStudyId\")));",
											"    pm.expect(jsonData.result.data[1].trialName).to.eql(\"Randomized Trial 20180003\");",
											"    pm.expect(jsonData.result.data[1].programDbId).to.eql(\"c9e335d2-3057-4958-a43e-e38cf61d09ca\");",
											"    pm.expect(jsonData.result.data[1].programName).to.eql(\"API Program\");",
											"    pm.expect(jsonData.result.data[1].startDate).to.eql(\"20180912\");",
											"    pm.expect(jsonData.result.data[1].endDate).to.eql(\"20190220\");",
											"    pm.expect(jsonData.result.data[1].active).to.eql(true);",
											"});",
											"",
											"pm.test(\"Check details of an associated environment are correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[1].studies[0].studyDbId).to.eql(2);",
											"    pm.expect(jsonData.result.data[1].studies[0].studyName).to.eql(\"Randomized Trial 20180003 Environment Number 1\");",
											"    pm.expect(jsonData.result.data[1].studies[0].locationDbId).to.eql(\"9001\");",
											"    pm.expect(jsonData.result.data[1].studies[0].locationName).to.eql(\"Africa Rice Centre\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "45f4385b-f307-4f49-93cc-05a83ef812c1",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/trials?status=true",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"trials"
									],
									"query": [
										{
											"key": "status",
											"value": "true"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v1​/trials"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered inactive status",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "223e8b91-161b-4934-9eae-926c3c8e2cba",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Response message is no inactive studies found \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.metadata.status[0].message).to.eql(\"No inactive studies found.\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1bb6bbfd-6ed2-4f0f-8c68-86be0897eb9c",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/trials?active=false",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"trials"
									],
									"query": [
										{
											"key": "active",
											"value": "false"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v1​/trials"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered valid field name",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2ffe4882-42e6-4592-bc00-68846979c25c",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check details of a trial in the list are correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[1].trialDbId).to.eql(JSON.parse(pm.environment.get(\"trialStudyId\")));",
											"    pm.expect(jsonData.result.data[1].trialName).to.eql(\"Randomized Trial 20180003\");",
											"    pm.expect(jsonData.result.data[1].programDbId).to.eql(\"c9e335d2-3057-4958-a43e-e38cf61d09ca\");",
											"    pm.expect(jsonData.result.data[1].programName).to.eql(\"API Program\");",
											"    pm.expect(jsonData.result.data[1].startDate).to.eql(\"20180912\");",
											"    pm.expect(jsonData.result.data[1].endDate).to.eql(\"20190220\");",
											"    pm.expect(jsonData.result.data[1].active).to.eql(true);",
											"});",
											"",
											"pm.test(\"Check details of an associated environment are correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[1].studies[0].studyDbId).to.eql(2);",
											"    pm.expect(jsonData.result.data[1].studies[0].studyName).to.eql(\"Randomized Trial 20180003 Environment Number 1\");",
											"    pm.expect(jsonData.result.data[1].studies[0].locationDbId).to.eql(\"9001\");",
											"    pm.expect(jsonData.result.data[1].studies[0].locationName).to.eql(\"Africa Rice Centre\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f2ea91e1-f8c7-46aa-a231-dfeb5a70b829",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/trials?sortedBy=trialDbId",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"trials"
									],
									"query": [
										{
											"key": "sortedBy",
											"value": "trialDbId"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v1​/trials"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid field name",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9509c808-bf2e-413c-a1b5-ad2d3407ddaa",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Response message is correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.metadata.status[0].message).to.eql(\"sortBy bad filter, expect trialDbId/trialName/programDbId/programName/startDate/endDate/active\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "bbf64433-6abd-4f1d-b31c-056b5ba7db4f",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/trials?sortBy=studyId",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"trials"
									],
									"query": [
										{
											"key": "sortBy",
											"value": "studyId"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v1​/trials"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when sorted in ascending order",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "90b04810-7578-4fa5-b8ee-1ed6a5990edb",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check if first trialDbId is less than next trialDbId\", function () {",
											"   ",
											"  ",
											"    var jsonData = pm.response.json();",
											"    var data = jsonData.result.data;",
											"    var i;",
											"    for (i = 0; i+1 < data.length ; i++) { ",
											"      pm.expect(data[i+1].trialDbId).to.be.above(data[i].trialDbId);",
											"        ",
											"   }",
											" ",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "62325bcf-bda0-4074-9d42-b7739b52787b",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/trials?sortOrder=asc",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"trials"
									],
									"query": [
										{
											"key": "sortOrder",
											"value": "asc"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v1​/trials"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when sorted in descending order",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b874874e-5cdb-4b42-a600-af467fbdcb60",
										"exec": [
											"pm.test(\"Status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check if first trialDbId is greater than next trialDbId\", function () {",
											"    var jsonData = pm.response.json();",
											"    var data = jsonData.result.data;",
											"    var i;",
											"    for (i = 0; i+1 < data.length ; i++) { ",
											"      pm.expect(data[i].trialDbId).to.be.above(data[i+1].trialDbId);",
											"   ",
											"   }",
											" ",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b5ef9e03-9ad5-4808-9800-3ba8ece28832",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/trials?sortOrder=desc",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"trials"
									],
									"query": [
										{
											"key": "sortOrder",
											"value": "desc"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v1​/trials"
							},
							"response": []
						},
						{
							"name": "Verify response code and body entered invalid sort order",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ed6dc82d-4546-4f8c-87f7-05b9f175e8cf",
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Response message is correct\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.metadata.status[0].message).to.eql(\"sortOrder bad filter, expect asc/desc\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "3417c303-90c4-45e8-91d2-e6b1720c5ddf",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/trials?sortOrder=invalidorder",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"trials"
									],
									"query": [
										{
											"key": "sortOrder",
											"value": "invalidorder"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v1​/trials"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "GET ​/{crop}​/brapi​/v1​/trials​/{trialDbId}​/table",
					"item": [
						{
							"name": "Verify response code and body when entered valid trialDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "09d90cb1-f442-4c80-bdf0-5c6cc2c40fef",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check trialDbId is correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.trialDbId).to.eql(JSON.parse(pm.environment.get(\"studyId\")));",
											"});",
											"",
											"pm.test(\"Check header rows are correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.headerRow).to.include(",
											"        \"year\",",
											"        \"studyDbId\",",
											"        \"studyName\",",
											"        \"locationDbId\",",
											"        \"locationName\",",
											"        \"germplasmDbId\",",
											"        \"germplasmName\",",
											"        \"observationUnitDbId\",",
											"        \"plotNumber\",",
											"        \"replicate\",",
											"        \"blockNumber\",",
											"        \"observationTimestamp\",",
											"        \"entryType\",",
											"        \"X\",",
											"        \"Y\",",
											"        \"obsUnitId\");",
											"});",
											"",
											"pm.test(\"Check observation VariableDbIds are correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.observationVariableDbIds).to.include(",
											"        18000,",
											"        18010,",
											"        18110);",
											"});",
											"",
											"pm.test(\"Check observation variable names are correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.observationVariableNames).to.include(",
											"        \"Grain_yield\",",
											"        \"Biomas_yield\",",
											"        \"Grain_size\");",
											"});",
											"",
											"/*pm.test(\"Check details of first observation row are correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    console.log(pm.environment.get(\"study_first_row\"));",
											"    pm.expect(jsonData.result.data[0]).to.include(",
											" \"2019\", \"13\", \"Study for user 2 Environment Number 1\", \"9001\", \"Africa Rice Centre\", \"26\", \"GP6\", \"7051\", \"6\", null, null, \"UnknownTimestamp\", \"Test entry\", \"null\", \"null\", \"7119ebc0-1e7f-45c8-b5ec-663582aa2167\", null, \"17\", \"35\", \"48\"",
											"    //JSON.strinpm.environment.get(\"study_first_row\")",
											");",
											"});*/",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "57a99980-38ef-4eb1-8eee-84b0e3aae01c",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/trials/{{studyId}}/table",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"trials",
										"{{studyId}}",
										"table"
									]
								},
								"description": "GET​/{crop}​/brapi​/v1​/trials​/{trialDbId}​/table"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid trialDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "869b6984-bcdd-423d-af7a-55c72dc2dcc2",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "10188cbc-e3bc-469e-bca5-9e248bdab9b7",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/trials/{{non_existing_study_id}}/table",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"trials",
										"{{non_existing_study_id}}",
										"table"
									]
								},
								"description": "GET​/{crop}​/brapi​/v1​/trials​/{trialDbId}​/table"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "study-resource-brapi",
			"item": [
				{
					"name": "GET ​/{crop}​/brapi​/v1​/studies",
					"item": [
						{
							"name": "Verify response code and body when entered crop only",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6ebcdc01-bbec-4da4-b949-b5a9d6f4d52d",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(14);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Verify returned data\", function () {",
											" var jsonData = pm.response.json();",
											" pm.expect(jsonData.result.data[0].active).to.eql(\"true\");",
											" pm.expect(jsonData.result.data[0].startDate).to.eql(\"2018-10-25\");",
											" pm.expect(jsonData.result.data[0].studyDbId).to.eql(pm.environment.get(\"nursery1StudyDbId\"));",
											" pm.expect(jsonData.result.data[0].studyName).to.eql(\"Study with Imported Cross Nursery 2018002 Environment Number 1\");",
											" pm.expect(jsonData.result.data[0].studyTypeDbId).to.eql(\"1\");",
											" pm.expect(jsonData.result.data[0].studyTypeName).to.eql(\"Nursery\");",
											" pm.expect(jsonData.result.data[0].seasons[0].season).to.eql(\"Dry season\");",
											" pm.expect(jsonData.result.data[0].seasons[0].seasonDbId).to.eql(\"10290\");",
											" pm.expect(jsonData.result.data[0].locationDbId).to.eql(\"9001\");",
											" pm.expect(jsonData.result.data[0].locationName).to.eql(\"Africa Rice Centre\");",
											" pm.expect(jsonData.result.data[0].programDbId).to.eql(\"c9e335d2-3057-4958-a43e-e38cf61d09ca\");",
											" pm.expect(jsonData.result.data[0].programName).to.eql(\"API Program\");",
											" pm.expect(jsonData.result.data[0].trialName).to.eql(\"Study with Imported Cross Nursery 2018002\");",
											" pm.expect(jsonData.result.data[0].trialDbId).to.eql(\"3009\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a6cac964-5d48-4781-b572-a48654804777",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/studies",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"studies"
									]
								},
								"description": "GET /{crop}/brapi/v1/studies/{studyDbId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when filtered by studyTypeDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "28514bc3-6891-4ba0-854d-7c5eb3f5d7a7",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(7);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Verify returned data\", function () {",
											" var jsonData = pm.response.json();",
											" pm.expect(jsonData.result.data[0].active).to.eql(\"true\");",
											" pm.expect(jsonData.result.data[0].startDate).to.eql(\"2018-10-25\");",
											" pm.expect(jsonData.result.data[0].studyDbId).to.eql(pm.environment.get(\"nursery1StudyDbId\"));",
											" pm.expect(jsonData.result.data[0].studyName).to.eql(\"Study with Imported Cross Nursery 2018002 Environment Number 1\");",
											" pm.expect(jsonData.result.data[0].studyTypeDbId).to.eql(\"1\");",
											" pm.expect(jsonData.result.data[0].studyTypeName).to.eql(\"Nursery\");",
											" pm.expect(jsonData.result.data[0].seasons[0].season).to.eql(\"Dry season\");",
											" pm.expect(jsonData.result.data[0].seasons[0].seasonDbId).to.eql(\"10290\");",
											" pm.expect(jsonData.result.data[0].locationDbId).to.eql(\"9001\");",
											" pm.expect(jsonData.result.data[0].locationName).to.eql(\"Africa Rice Centre\");",
											" pm.expect(jsonData.result.data[0].programDbId).to.eql(\"c9e335d2-3057-4958-a43e-e38cf61d09ca\");",
											" pm.expect(jsonData.result.data[0].programName).to.eql(\"API Program\");",
											" pm.expect(jsonData.result.data[0].trialName).to.eql(\"Study with Imported Cross Nursery 2018002\");",
											" pm.expect(jsonData.result.data[0].trialDbId).to.eql(\"3009\");",
											"});",
											"",
											"",
											"pm.test(\"Check all studyDbIds are equal to input parameter\", function () {",
											"  var jsonData = pm.response.json();",
											"   var i;",
											"    for (i = 0; i < jsonData.result.data.length; i++) { ",
											"        pm.expect(jsonData.result.data[i].studyTypeDbId).to.eql(\"1\");",
											"    }",
											"});    ",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5dd41677-6cbc-4834-88ac-3bc72dbf2b4a",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/studies?studyTypeDbId=1",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"studies"
									],
									"query": [
										{
											"key": "studyTypeDbId",
											"value": "1"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/studies/{studyDbId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when filtered by programDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a8b3c21e-4a7b-4d2a-8c88-479d4a579849",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(14);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Verify returned data\", function () {",
											" var jsonData = pm.response.json();",
											" pm.expect(jsonData.result.data[0].active).to.eql(\"true\");",
											" pm.expect(jsonData.result.data[0].startDate).to.eql(\"2018-10-25\");",
											" pm.expect(jsonData.result.data[0].studyDbId).to.eql(pm.environment.get(\"nursery1StudyDbId\"));",
											" pm.expect(jsonData.result.data[0].studyName).to.eql(\"Study with Imported Cross Nursery 2018002 Environment Number 1\");",
											" pm.expect(jsonData.result.data[0].studyTypeDbId).to.eql(\"1\");",
											" pm.expect(jsonData.result.data[0].studyTypeName).to.eql(\"Nursery\");",
											" pm.expect(jsonData.result.data[0].seasons[0].season).to.eql(\"Dry season\");",
											" pm.expect(jsonData.result.data[0].seasons[0].seasonDbId).to.eql(\"10290\");",
											" pm.expect(jsonData.result.data[0].locationDbId).to.eql(\"9001\");",
											" pm.expect(jsonData.result.data[0].locationName).to.eql(\"Africa Rice Centre\");",
											" pm.expect(jsonData.result.data[0].programDbId).to.eql(\"c9e335d2-3057-4958-a43e-e38cf61d09ca\");",
											" pm.expect(jsonData.result.data[0].programName).to.eql(\"API Program\");",
											" pm.expect(jsonData.result.data[0].trialName).to.eql(\"Study with Imported Cross Nursery 2018002\");",
											" pm.expect(jsonData.result.data[0].trialDbId).to.eql(\"3009\");",
											"});",
											"",
											"",
											"pm.test(\"Check all programDbId are equal to input parameter\", function () {",
											"  var jsonData = pm.response.json();",
											"   var i;",
											"    for (i = 0; i < jsonData.result.data.length; i++) { ",
											"    pm.expect(jsonData.result.data[i].programDbId).to.eql(pm.environment.get(\"api_program_id\"));",
											"    }",
											"});    ",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f7af89b1-ac1f-4a3f-8412-67be3514689c",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/studies?programDbId={{api_program_id}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"studies"
									],
									"query": [
										{
											"key": "programDbId",
											"value": "{{api_program_id}}"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/studies/{studyDbId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when filtered by locationDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7828d688-6a14-4140-a524-913106b9b61f",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(8);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Verify returned data\", function () {",
											" var jsonData = pm.response.json();",
											" pm.expect(jsonData.result.data[0].active).to.eql(\"true\");",
											" pm.expect(jsonData.result.data[0].startDate).to.eql(\"2018-10-25\");",
											" pm.expect(jsonData.result.data[0].studyDbId).to.eql(pm.environment.get(\"nursery1StudyDbId\"));",
											" pm.expect(jsonData.result.data[0].studyName).to.eql(\"Study with Imported Cross Nursery 2018002 Environment Number 1\");",
											" pm.expect(jsonData.result.data[0].studyTypeDbId).to.eql(\"1\");",
											" pm.expect(jsonData.result.data[0].studyTypeName).to.eql(\"Nursery\");",
											" pm.expect(jsonData.result.data[0].seasons[0].season).to.eql(\"Dry season\");",
											" pm.expect(jsonData.result.data[0].seasons[0].seasonDbId).to.eql(\"10290\");",
											" pm.expect(jsonData.result.data[0].locationDbId).to.eql(\"9001\");",
											" pm.expect(jsonData.result.data[0].locationName).to.eql(\"Africa Rice Centre\");",
											" pm.expect(jsonData.result.data[0].programDbId).to.eql(\"c9e335d2-3057-4958-a43e-e38cf61d09ca\");",
											" pm.expect(jsonData.result.data[0].programName).to.eql(\"API Program\");",
											" pm.expect(jsonData.result.data[0].trialName).to.eql(\"Study with Imported Cross Nursery 2018002\");",
											" pm.expect(jsonData.result.data[0].trialDbId).to.eql(\"3009\");",
											"});",
											"",
											"",
											"pm.test(\"Check all locationDbId are equal to input parameter\", function () {",
											"  var jsonData = pm.response.json();",
											"   var i;",
											"    for (i = 0; i < jsonData.result.data.length; i++) { ",
											"    pm.expect(jsonData.result.data[i].locationDbId).to.eql(\"9001\");",
											"    }",
											"});    ",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5d15ff24-5962-48fd-ac0a-8c733201d101",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/studies?locationDbId=9001",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"studies"
									],
									"query": [
										{
											"key": "locationDbId",
											"value": "9001"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/studies/{studyDbId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when filtered by seasonDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3fb25ec5-c531-45cb-b0b0-a82ec5beed8e",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(2);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Verify returned data\", function () {",
											" var jsonData = pm.response.json();",
											" pm.expect(jsonData.result.data[0].active).to.eql(\"true\");",
											" pm.expect(jsonData.result.data[0].startDate).to.eql(\"2018-10-25\");",
											" pm.expect(jsonData.result.data[0].studyDbId).to.eql(pm.environment.get(\"nursery1StudyDbId\"));",
											" pm.expect(jsonData.result.data[0].studyName).to.eql(\"Study with Imported Cross Nursery 2018002 Environment Number 1\");",
											" pm.expect(jsonData.result.data[0].studyTypeDbId).to.eql(\"1\");",
											" pm.expect(jsonData.result.data[0].studyTypeName).to.eql(\"Nursery\");",
											" pm.expect(jsonData.result.data[0].seasons[0].season).to.eql(\"Dry season\");",
											" pm.expect(jsonData.result.data[0].seasons[0].seasonDbId).to.eql(\"10290\");",
											" pm.expect(jsonData.result.data[0].locationDbId).to.eql(\"9001\");",
											" pm.expect(jsonData.result.data[0].locationName).to.eql(\"Africa Rice Centre\");",
											" pm.expect(jsonData.result.data[0].programDbId).to.eql(\"c9e335d2-3057-4958-a43e-e38cf61d09ca\");",
											" pm.expect(jsonData.result.data[0].programName).to.eql(\"API Program\");",
											" pm.expect(jsonData.result.data[0].trialName).to.eql(\"Study with Imported Cross Nursery 2018002\");",
											" pm.expect(jsonData.result.data[0].trialDbId).to.eql(\"3009\");",
											"});",
											"",
											"",
											"pm.test(\"Check all seasonDbId are equal to input parameter\", function () {",
											"  var jsonData = pm.response.json();",
											"   var i;",
											"    for (i = 0; i < jsonData.result.data.length; i++) { ",
											"    pm.expect(jsonData.result.data[i].seasons[0].seasonDbId).to.eql(\"10290\");",
											"    }",
											"});    ",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "8277c49f-6665-4e7d-befa-028d2e3b0505",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/studies?seasonDbId=10290",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"studies"
									],
									"query": [
										{
											"key": "seasonDbId",
											"value": "10290"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/studies/{studyDbId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when filtered by trialDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8889ec92-344a-4694-9392-90d1eb2ce639",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(2);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Verify returned data\", function () {",
											" var jsonData = pm.response.json();",
											" pm.expect(jsonData.result.data[0].active).to.eql(\"true\");",
											" pm.expect(jsonData.result.data[0].startDate).to.eql(\"2018-09-12\");",
											" pm.expect(jsonData.result.data[0].studyDbId).to.eql(pm.environment.get(\"studyDbId\"));",
											" pm.expect(jsonData.result.data[0].studyName).to.eql(\"Randomized Trial 20180003 Environment Number 1\");",
											" pm.expect(jsonData.result.data[0].studyTypeDbId).to.eql(\"6\");",
											" pm.expect(jsonData.result.data[0].studyTypeName).to.eql(\"Trial\");",
											" pm.expect(jsonData.result.data[0].seasons[0].season).to.eql(\"Dry season\");",
											" pm.expect(jsonData.result.data[0].seasons[0].seasonDbId).to.eql(\"10290\");",
											" pm.expect(jsonData.result.data[0].locationDbId).to.eql(\"9001\");",
											" pm.expect(jsonData.result.data[0].locationName).to.eql(\"Africa Rice Centre\");",
											" pm.expect(jsonData.result.data[0].programDbId).to.eql(\"c9e335d2-3057-4958-a43e-e38cf61d09ca\");",
											" pm.expect(jsonData.result.data[0].programName).to.eql(\"API Program\");",
											" pm.expect(jsonData.result.data[0].trialName).to.eql(\"Randomized Trial 20180003\");",
											" pm.expect(jsonData.result.data[0].trialDbId).to.eql(\"3013\");",
											"});",
											"",
											"",
											"pm.test(\"Check all trialDbId are equal to input parameter\", function () {",
											"  var jsonData = pm.response.json();",
											"   var i;",
											"    for (i = 0; i < jsonData.result.data.length; i++) { ",
											"    pm.expect(jsonData.result.data[i].trialDbId).to.eql(\"3013\");",
											"    }",
											"});    ",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "dddd3f10-bd1f-4352-8ddd-a992eea3127f",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/studies?trialDbId=3013",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"studies"
									],
									"query": [
										{
											"key": "trialDbId",
											"value": "3013"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/studies/{studyDbId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when filtered by studyDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b8a78f6f-5ee4-4261-921c-94257136fb79",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(1);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Verify returned data\", function () {",
											" var jsonData = pm.response.json();",
											" pm.expect(jsonData.result.data[0].active).to.eql(\"true\");",
											" pm.expect(jsonData.result.data[0].startDate).to.eql(\"2018-10-25\");",
											" pm.expect(jsonData.result.data[0].studyDbId).to.eql(pm.environment.get(\"nursery1StudyDbId\"));",
											" pm.expect(jsonData.result.data[0].studyName).to.eql(\"Study with Imported Cross Nursery 2018002 Environment Number 1\");",
											" pm.expect(jsonData.result.data[0].studyTypeDbId).to.eql(\"1\");",
											" pm.expect(jsonData.result.data[0].studyTypeName).to.eql(\"Nursery\");",
											" pm.expect(jsonData.result.data[0].seasons[0].season).to.eql(\"Dry season\");",
											" pm.expect(jsonData.result.data[0].seasons[0].seasonDbId).to.eql(\"10290\");",
											" pm.expect(jsonData.result.data[0].locationDbId).to.eql(\"9001\");",
											" pm.expect(jsonData.result.data[0].locationName).to.eql(\"Africa Rice Centre\");",
											" pm.expect(jsonData.result.data[0].programDbId).to.eql(\"c9e335d2-3057-4958-a43e-e38cf61d09ca\");",
											" pm.expect(jsonData.result.data[0].programName).to.eql(\"API Program\");",
											" pm.expect(jsonData.result.data[0].trialName).to.eql(\"Study with Imported Cross Nursery 2018002\");",
											" pm.expect(jsonData.result.data[0].trialDbId).to.eql(\"3009\");",
											"});",
											"",
											"",
											"pm.test(\"Check all studyDbId are equal to input parameter\", function () {",
											"  var jsonData = pm.response.json();",
											"   var i;",
											"    for (i = 0; i < jsonData.result.data.length; i++) { ",
											"    pm.expect(jsonData.result.data[i].studyDbId).to.eql(pm.environment.get(\"nursery1StudyDbId\"));",
											"    }",
											"});    ",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b1b109cc-54a5-43da-9e4d-68fd12bac997",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/studies?studyDbId={{nursery1StudyDbId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"studies"
									],
									"query": [
										{
											"key": "studyDbId",
											"value": "{{nursery1StudyDbId}}"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/studies/{studyDbId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when filtered by active set to true",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4b8b33fe-7aad-4cd7-ac94-bf27e9deb59d",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(14);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Verify returned data\", function () {",
											" var jsonData = pm.response.json();",
											" pm.expect(jsonData.result.data[0].active).to.eql(\"true\");",
											" pm.expect(jsonData.result.data[0].startDate).to.eql(\"2018-10-25\");",
											" pm.expect(jsonData.result.data[0].studyDbId).to.eql(pm.environment.get(\"nursery1StudyDbId\"));",
											" pm.expect(jsonData.result.data[0].studyName).to.eql(\"Study with Imported Cross Nursery 2018002 Environment Number 1\");",
											" pm.expect(jsonData.result.data[0].studyTypeDbId).to.eql(\"1\");",
											" pm.expect(jsonData.result.data[0].studyTypeName).to.eql(\"Nursery\");",
											" pm.expect(jsonData.result.data[0].seasons[0].season).to.eql(\"Dry season\");",
											" pm.expect(jsonData.result.data[0].seasons[0].seasonDbId).to.eql(\"10290\");",
											" pm.expect(jsonData.result.data[0].locationDbId).to.eql(\"9001\");",
											" pm.expect(jsonData.result.data[0].locationName).to.eql(\"Africa Rice Centre\");",
											" pm.expect(jsonData.result.data[0].programDbId).to.eql(\"c9e335d2-3057-4958-a43e-e38cf61d09ca\");",
											" pm.expect(jsonData.result.data[0].programName).to.eql(\"API Program\");",
											" pm.expect(jsonData.result.data[0].trialName).to.eql(\"Study with Imported Cross Nursery 2018002\");",
											" pm.expect(jsonData.result.data[0].trialDbId).to.eql(\"3009\");",
											"});",
											"",
											"",
											"pm.test(\"Check all actvie are equal to input parameter\", function () {",
											"  var jsonData = pm.response.json();",
											"   var i;",
											"    for (i = 0; i < jsonData.result.data.length; i++) { ",
											"    pm.expect(jsonData.result.data[i].active).to.eql(\"true\");",
											"    }",
											"});    ",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d255851a-826d-4cea-9f5b-c4b9f30f4109",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/studies?active=true",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"studies"
									],
									"query": [
										{
											"key": "active",
											"value": "true"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/studies/{studyDbId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when filtered by active set to false",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ddc3b1d5-1164-46f3-ac52-25b6365feb90",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(3);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Verify returned data\", function () {",
											" var jsonData = pm.response.json();",
											" var index = 1;",
											" pm.expect(jsonData.result.data[index].active).to.eql(\"false\");",
											" pm.expect(jsonData.result.data[index].startDate).to.eql(\"2019-04-02\");",
											" pm.expect(jsonData.result.data[index].studyDbId).to.eql(\"7\");",
											" pm.expect(jsonData.result.data[index].studyName).to.eql(\"Trial for Subobs Creation#20190402142056988 Environment Number 1\");",
											" pm.expect(jsonData.result.data[index].studyTypeDbId).to.eql(\"6\");",
											" pm.expect(jsonData.result.data[index].studyTypeName).to.eql(\"Trial\");",
											" pm.expect(jsonData.result.data[index].seasons).to.eql([]);",
											" pm.expect(jsonData.result.data[index].locationDbId).to.eql(\"9016\");",
											" pm.expect(jsonData.result.data[index].locationName).to.eql(\"Unspecified Location\");",
											" pm.expect(jsonData.result.data[index].programDbId).to.eql(\"c9e335d2-3057-4958-a43e-e38cf61d09ca\");",
											" pm.expect(jsonData.result.data[index].programName).to.eql(\"API Program\");",
											" pm.expect(jsonData.result.data[index].trialName).to.eql(\"Trial for Subobs Creation#20190402142056988\");",
											" pm.expect(jsonData.result.data[index].trialDbId).to.eql(\"3032\");",
											"});",
											"",
											"",
											"pm.test(\"Check all active are equal to input parameter\", function () {",
											"  var jsonData = pm.response.json();",
											"   var i;",
											"    for (i = 0; i < jsonData.result.data.length; i++) { ",
											"    pm.expect(jsonData.result.data[i].active).to.eql(\"false\");",
											"    }",
											"});    ",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2c503208-5aed-4105-9bfb-6641db3c4167",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/studies?active=false",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"studies"
									],
									"query": [
										{
											"key": "active",
											"value": "false"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/studies/{studyDbId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when sortedBy trialDbId in asc order",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d90f9658-d904-449f-a5c6-b7bb6b0a75e6",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(14);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Verify returned data\", function () {",
											" var jsonData = pm.response.json();",
											" pm.expect(jsonData.result.data[0].active).to.eql(\"true\");",
											" pm.expect(jsonData.result.data[0].startDate).to.eql(\"2018-10-25\");",
											" pm.expect(jsonData.result.data[0].studyDbId).to.eql(pm.environment.get(\"nursery1StudyDbId\"));",
											" pm.expect(jsonData.result.data[0].studyName).to.eql(\"Study with Imported Cross Nursery 2018002 Environment Number 1\");",
											" pm.expect(jsonData.result.data[0].studyTypeDbId).to.eql(\"1\");",
											" pm.expect(jsonData.result.data[0].studyTypeName).to.eql(\"Nursery\");",
											" pm.expect(jsonData.result.data[0].seasons[0].season).to.eql(\"Dry season\");",
											" pm.expect(jsonData.result.data[0].seasons[0].seasonDbId).to.eql(\"10290\");",
											" pm.expect(jsonData.result.data[0].locationDbId).to.eql(\"9001\");",
											" pm.expect(jsonData.result.data[0].locationName).to.eql(\"Africa Rice Centre\");",
											" pm.expect(jsonData.result.data[0].programDbId).to.eql(\"c9e335d2-3057-4958-a43e-e38cf61d09ca\");",
											" pm.expect(jsonData.result.data[0].programName).to.eql(\"API Program\");",
											" pm.expect(jsonData.result.data[0].trialName).to.eql(\"Study with Imported Cross Nursery 2018002\");",
											" pm.expect(jsonData.result.data[0].trialDbId).to.eql(\"3009\");",
											"});",
											"",
											"",
											"pm.test(\"Check if next trialDbId is greater or equal to previous trialDbId\", function () {",
											"  ",
											"    var jsonData = pm.response.json();",
											"    var data = jsonData.result.data;",
											"    var i;",
											"    var proceed = true",
											"    for (i = 0; i+1 < data.length ; i++) {",
											"        ",
											"           if((parseInt(data[i+1].trialDbId)) >= (parseInt(data[i].trialDbId))){",
											"               proceed = true;",
											"             ",
											"           }else{",
											"              proceed = false;",
											"     }",
											"   }",
											"       pm.expect(proceed).to.eql(true);   ",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "87c43af4-f14d-4844-beb2-8ef026ae02ff",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/studies?sortBy=trialDbId&sortOrder=ASC",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"studies"
									],
									"query": [
										{
											"key": "sortBy",
											"value": "trialDbId"
										},
										{
											"key": "sortOrder",
											"value": "ASC"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/studies/{studyDbId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when sortedBy trialDbId in desc order",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1f43a419-2058-4bd3-8e97-a720c38f2306",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(14);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Verify returned data\", function () {",
											" var jsonData = pm.response.json();",
											" pm.expect(jsonData.result.data[0].active).to.eql(\"true\");",
											" pm.expect(jsonData.result.data[0].startDate).to.eql(\"2020-06-04\");",
											" pm.expect(jsonData.result.data[0].studyDbId).to.eql(\"34\");",
											" pm.expect(jsonData.result.data[0].studyName).to.eql(\"Study for Design Generation Environment Number 1\");",
											" pm.expect(jsonData.result.data[0].studyTypeDbId).to.eql(\"6\");",
											" pm.expect(jsonData.result.data[0].studyTypeName).to.eql(\"Trial\");",
											" pm.expect(jsonData.result.data[0].seasons).to.eql([]);",
											" pm.expect(jsonData.result.data[0].locationDbId).to.eql(\"9012\");",
											" pm.expect(jsonData.result.data[0].locationName).to.eql(\"INT LIVESTOCK RESEARCH INSTITUTE\");",
											" pm.expect(jsonData.result.data[0].programDbId).to.eql(\"c9e335d2-3057-4958-a43e-e38cf61d09ca\");",
											" pm.expect(jsonData.result.data[0].programName).to.eql(\"API Program\");",
											" pm.expect(jsonData.result.data[0].trialName).to.eql(\"Study for Design Generation\");",
											" pm.expect(jsonData.result.data[0].trialDbId).to.eql(\"3083\");",
											"});",
											"",
											"",
											"pm.test(\"Check if next trialDbId is less than or equal to previous trialDbId\", function () {",
											"  ",
											"    var jsonData = pm.response.json();",
											"    var data = jsonData.result.data;",
											"    var i;",
											"    var proceed = true",
											"    for (i = 0; i+1 < data.length ; i++) {",
											"        ",
											"           if((parseInt(data[i+1].trialDbId)) <= (parseInt(data[i].trialDbId))){",
											"               proceed = true;",
											"              console.log(data[i+1].trialDbId + \"is less than/equal \" +data[i].trialDbId);",
											"           }else{",
											"              proceed = false;",
											"     }",
											"   }",
											"       pm.expect(proceed).to.eql(true);   ",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "81947f7d-af29-416f-88f4-c6c5e55715df",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/studies?sortBy=trialDbId&sortOrder=DESC",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"studies"
									],
									"query": [
										{
											"key": "sortBy",
											"value": "trialDbId"
										},
										{
											"key": "sortOrder",
											"value": "DESC"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/studies/{studyDbId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid sortOrder value",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d25ea55c-5f14-46dd-9841-f0b617f3db19",
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"",
											"pm.test(\"Verify returned error message\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.errors[0].message).to.eql(\"sortOrder should be either ASC or DESC\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5f0672fc-b2b8-4ba0-a0a9-92bf9a94a837",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/studies?sortBy=trialDbId&sortOrder=invalid",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"studies"
									],
									"query": [
										{
											"key": "sortBy",
											"value": "trialDbId"
										},
										{
											"key": "sortOrder",
											"value": "invalid"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/studies/{studyDbId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered pagination details",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "61ed2755-65e7-4b74-8930-b00271b6ba50",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(10000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(14);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Verify returned data\", function () {",
											" var jsonData = pm.response.json();",
											" pm.expect(jsonData.result.data[0].active).to.eql(\"true\");",
											" pm.expect(jsonData.result.data[0].startDate).to.eql(\"2018-10-25\");",
											" pm.expect(jsonData.result.data[0].studyDbId).to.eql(pm.environment.get(\"nursery1StudyDbId\"));",
											" pm.expect(jsonData.result.data[0].studyName).to.eql(\"Study with Imported Cross Nursery 2018002 Environment Number 1\");",
											" pm.expect(jsonData.result.data[0].studyTypeDbId).to.eql(\"1\");",
											" pm.expect(jsonData.result.data[0].studyTypeName).to.eql(\"Nursery\");",
											" pm.expect(jsonData.result.data[0].seasons[0].season).to.eql(\"Dry season\");",
											" pm.expect(jsonData.result.data[0].seasons[0].seasonDbId).to.eql(\"10290\");",
											" pm.expect(jsonData.result.data[0].locationDbId).to.eql(\"9001\");",
											" pm.expect(jsonData.result.data[0].locationName).to.eql(\"Africa Rice Centre\");",
											" pm.expect(jsonData.result.data[0].programDbId).to.eql(\"c9e335d2-3057-4958-a43e-e38cf61d09ca\");",
											" pm.expect(jsonData.result.data[0].programName).to.eql(\"API Program\");",
											" pm.expect(jsonData.result.data[0].trialName).to.eql(\"Study with Imported Cross Nursery 2018002\");",
											" pm.expect(jsonData.result.data[0].trialDbId).to.eql(\"3009\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f8d978c4-09ba-493d-bf6a-2e7111bd1ae6",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/studies?page=0&pageSize=10000",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"studies"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "10000"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/studies/{studyDbId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid page",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e4893042-e269-4063-ab4d-905e05db9fab",
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"",
											"pm.test(\"Verify returned error message\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.errors[0].message).to.eql(\"A total of 1 pages are available, so the page number must between 0 and 1 (exclusive).\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "efe337c5-c877-4bce-bc3d-d12c856d1733",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/studies?page=1&pageSize=10000",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"studies"
									],
									"query": [
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "pageSize",
											"value": "10000"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/studies/{studyDbId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered pageSize greater than max",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7d00df29-81fc-446c-89cb-3b436409e704",
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"",
											"pm.test(\"Verify returned error message\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.errors[0].message).to.eql(\"Page size must between 1 and 10000.\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "bfcf9851-2720-4e9a-9cf3-ed8d22957cb7",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/studies?page=0&pageSize=10001",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"studies"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "10001"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/studies/{studyDbId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when filtered by combination of values",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5a59618f-064e-4df9-9f9e-060ea4173c44",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(1);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Verify returned data\", function () {",
											" var jsonData = pm.response.json();",
											" pm.expect(jsonData.result.data[0].active).to.eql(\"true\");",
											" pm.expect(jsonData.result.data[0].startDate).to.eql(\"2018-09-12\");",
											" pm.expect(jsonData.result.data[0].studyDbId).to.eql(pm.environment.get(\"studyDbId\"));",
											" pm.expect(jsonData.result.data[0].studyName).to.eql(\"Randomized Trial 20180003 Environment Number 1\");",
											" pm.expect(jsonData.result.data[0].studyTypeDbId).to.eql(\"6\");",
											" pm.expect(jsonData.result.data[0].studyTypeName).to.eql(\"Trial\");",
											" pm.expect(jsonData.result.data[0].seasons[0].season).to.eql(\"Dry season\");",
											" pm.expect(jsonData.result.data[0].seasons[0].seasonDbId).to.eql(\"10290\");",
											" pm.expect(jsonData.result.data[0].locationDbId).to.eql(\"9001\");",
											" pm.expect(jsonData.result.data[0].locationName).to.eql(\"Africa Rice Centre\");",
											" pm.expect(jsonData.result.data[0].programDbId).to.eql(\"c9e335d2-3057-4958-a43e-e38cf61d09ca\");",
											" pm.expect(jsonData.result.data[0].programName).to.eql(\"API Program\");",
											" pm.expect(jsonData.result.data[0].trialName).to.eql(\"Randomized Trial 20180003\");",
											" pm.expect(jsonData.result.data[0].trialDbId).to.eql(\"3013\");",
											"});",
											"",
											"",
											"pm.test(\"Check all trialDbId are equal to input parameter\", function () {",
											"  var jsonData = pm.response.json();",
											"   var i;",
											"    for (i = 0; i < jsonData.result.data.length; i++) { ",
											"    pm.expect(jsonData.result.data[i].trialDbId).to.eql(\"3013\");",
											"    }",
											"});    ",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "659635b5-63fc-4eb1-a751-0316e30d2bcb",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/studies?studyTypeDbId=6&programDbId={{api_program_id}}&locationDbId=9001&seasonDbId=10290&trialDbId=3013&studyDbId={{studyDbId}}&active=true",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"studies"
									],
									"query": [
										{
											"key": "studyTypeDbId",
											"value": "6"
										},
										{
											"key": "programDbId",
											"value": "{{api_program_id}}"
										},
										{
											"key": "locationDbId",
											"value": "9001"
										},
										{
											"key": "seasonDbId",
											"value": "10290"
										},
										{
											"key": "trialDbId",
											"value": "3013"
										},
										{
											"key": "studyDbId",
											"value": "{{studyDbId}}"
										},
										{
											"key": "active",
											"value": "true"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/studies/{studyDbId}"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "GET ​/{crop}​/brapi​/v1​/studies​/{studyDbId}",
					"item": [
						{
							"name": "Verify response code and body when entered valid studyDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d2f5399e-176b-420d-808f-c728e000590a",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(1);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(1);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Verify returned studyDbId\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.result.studyDbId).to.eql(pm.environment.get(\"studyDbId\"));",
											"});",
											"pm.test(\"Verify returned studyName\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.result.studyName).to.eql(\"Randomized Trial 20180003 Environment Number 1\");",
											"});",
											"",
											"pm.test(\"Verify returned studyType\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.result.studyType).to.eql(\"6\");",
											"});",
											"pm.test(\"Verify returned trialDbId\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.result.trialDbId).to.eql(pm.environment.get(\"trialStudyId\"));",
											"});",
											"",
											"pm.test(\"Verify returned startDate\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.result.startDate).to.eql(\"2018-09-12\");",
											"});",
											"pm.test(\"Verify returned active\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.result.active).to.eql(\"true\");",
											"});",
											"",
											"pm.test(\"Verify returned location details\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.result.location.locationDbId).to.eql(\"9001\");",
											" pm.expect(jsonData.result.location.locationType).to.eql(\"International Agricultural Research Center\");     ",
											" pm.expect(jsonData.result.location.name).to.eql(\"Africa Rice Centre\");",
											" pm.expect(jsonData.result.location.abbreviation).to.eql(\"WARDA\"); ",
											" pm.expect(jsonData.result.location.countryCode).to.eql(\"CIV\"); ",
											" pm.expect(jsonData.result.location.countryName).to.eql(\"Côte D'Ivoire\"); ",
											" pm.expect(jsonData.result.location.latitude).to.eql(7.68); ",
											" pm.expect(jsonData.result.location.longitude).to.eql(-5.03);     ",
											" pm.expect(jsonData.result.location.altitude).to.eql(375.0);     ",
											" pm.expect(jsonData.result.location.additionalInfo.province).to.eql(\"Bouaké\");  ",
											"            ",
											"});",
											"",
											"pm.test(\"Verify returned contacts\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.result.contacts[0].contactDbId).to.eql(120);",
											" pm.expect(jsonData.result.contacts[0].name).to.eql(\"API Test User\");",
											" pm.expect(jsonData.result.contacts[0].email).to.eql(\"api@mailinator.com\");",
											" pm.expect(jsonData.result.contacts[0].type).to.eql(\"\");",
											" pm.expect(jsonData.result.contacts[0].orcid).to.eql(\"\");",
											"    ",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "09686059-130e-413d-b5da-7511eac6adad",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/studies/{{studyDbId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"studies",
										"{{studyDbId}}"
									]
								},
								"description": "GET /{crop}/brapi/v1/studies/{studyDbId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered non-existing studyDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6c3dbb92-afcb-46b6-87d4-57b27f1c023b",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Verify returned body\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData).to.eql(null);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ca1d4079-795c-45b7-805c-d052b744b11b",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/studies/{{non_existing_study_id}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"studies",
										"{{non_existing_study_id}}"
									]
								},
								"description": "GET /{crop}/brapi/v1/studies/{studyDbId}"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "GET ​/{crop}​/brapi​/v1​/studies​/{studyDbId}​/table",
					"item": [
						{
							"name": "Verify response code and body when entered valid inputs with no format",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "889fb606-154b-4c30-adc0-803f462cc7bf",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check trialDbId is correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.studyDbId).to.eql(JSON.parse(pm.environment.get(\"studyDbId\")));",
											"});",
											"",
											"pm.test(\"Check header rows are correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.headerRow).to.include(",
											"        \"year\",",
											"        \"studyDbId\",",
											"        \"studyName\",",
											"        \"locationDbId\",",
											"        \"locationName\",",
											"        \"germplasmDbId\",",
											"        \"germplasmName\",",
											"        \"observationUnitDbId\",",
											"        \"plotNumber\",",
											"        \"replicate\",",
											"        \"blockNumber\",",
											"        \"observationTimestamp\",",
											"        \"entryType\",",
											"        \"X\",",
											"        \"Y\",",
											"        \"obsUnitId\");",
											"});",
											"",
											"pm.test(\"Check observation VariableDbIds are correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.observationVariableDbIds).to.include(",
											"        18000,",
											"        18010,",
											"        18110);",
											"});",
											"",
											"pm.test(\"Check observation variable names are correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.observationVariableNames).to.include(",
											"        \"Grain_yield\",",
											"        \"Biomas_yield\",",
											"        \"Grain_size\");",
											"});",
											"",
											"pm.test(\"Check details of first observation row are correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0]).to.include(",
											"    \"2018\",",
											"    \"2\",",
											"    \"Randomized Trial 20180003 Environment Number 1\",",
											"    \"9001\",",
											"    \"WARDA-X\",",
											"    \"24\",",
											"    \"GP4\",",
											"    \"1003\",",
											"    \"1\",",
											"    \"1\",",
											"    null,",
											"    \"UnknownTimestamp\",",
											"    \"Check entry\",",
											"    \"null\",",
											"    \"null\",",
											"    \"PKWDPivJxYgde\",",
											"    \"4\",",
											"    \"18\",",
											"    \"95\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "78fd5480-6850-4fa9-90ff-3e1ba90f1784",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/studies/{{studyDbId}}/table",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"studies",
										"{{studyDbId}}",
										"table"
									]
								},
								"description": "GET /{crop}/brapi/v1/studies/{studyDbId}/table"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered valid inputs with csv format",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "02d97ee0-89fd-468a-b742-1f42b6c31031",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check headers are correct\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"year,studyDbId,studyName,locationDbId,locationName,germplasmDbId,germplasmName,observationUnitDbId,plotNumber,replicate,blockNumber,observationTimestamp,entryType,X,Y,obsUnitId,Grain_yield|18000,Biomas_yield|18010,Grain_size|18110\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "7f0fd412-62fb-4a38-bec5-54c281744990",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/studies/{{studyDbId}}/table?format=csv",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"studies",
										"{{studyDbId}}",
										"table"
									],
									"query": [
										{
											"key": "format",
											"value": "csv"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/studies/{studyDbId}/table"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered valid inputs with tsv format",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "11c604eb-17a7-4562-9edf-3fd61fe73495",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check headers are correct\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"year\tstudyDbId\tstudyName\tlocationDbId\tlocationName\tgermplasmDbId\tgermplasmName\tobservationUnitDbId\tplotNumber\treplicate\tblockNumber\tobservationTimestamp\tentryType\tX\tY\tobsUnitId\tGrain_yield|18000\tBiomas_yield|18010\tGrain_size|18110\");",
											"    ",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2034b83d-8c54-4752-923b-33deb1faa734",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/studies/{{studyDbId}}/table?format=tsv",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"studies",
										"{{studyDbId}}",
										"table"
									],
									"query": [
										{
											"key": "format",
											"value": "tsv"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/studies/{studyDbId}/table"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered non-existing studyDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "490f1c0e-8ce5-4ab4-b7b6-6ed38fd566b5",
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"",
											"pm.test(\"Error message is correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"studyDbId 9999 does not exist\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "fd10c438-73e4-45fd-b119-dc328c26b628",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/studies/{{non_existing_study_id}}/table",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"studies",
										"{{non_existing_study_id}}",
										"table"
									]
								},
								"description": "GET /{crop}/brapi/v1/studies/{studyDbId}/table"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "GET ​/{crop}​/brapi​/v2​/studies​/{studyDbId}",
					"item": [
						{
							"name": "Verify response code and body when entered valid studyDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9a3be17c-abb9-4f43-8719-925c7cde37cd",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(1);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(1);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([{}]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"",
											"pm.test(\"Verify returned studyDbId\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.result.studyDbId).to.eql(pm.environment.get(\"studyDbId\"));",
											"});",
											"pm.test(\"Verify returned studyName\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.result.studyName).to.eql(\"Randomized Trial 20180003 Environment Number 1\");",
											"});",
											"pm.test(\"Verify returned studyDescription\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.result.studyDescription).to.eql(\"Trial created using RCBD design\");",
											"});",
											"pm.test(\"Verify returned studyType\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.result.studyType).to.eql(\"6\");",
											"});",
											"pm.test(\"Verify returned lastUpdate\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.result.lastUpdate).to.eql(\"20200311\");",
											"});",
											"pm.test(\"Verify returned commonCropName\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.result.commonCropName).to.eql(\"testdata\");",
											"});",
											"pm.test(\"Verify returned trialDbId\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.result.trialDbId).to.eql(pm.environment.get(\"trialStudyId\"));",
											"});",
											"",
											"pm.test(\"Verify returned startDate\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.result.startDate).to.eql(\"2018-09-12\");",
											"});",
											"pm.test(\"Verify returned active\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.result.active).to.eql(\"true\");",
											"});",
											"",
											"pm.test(\"Verify returned location details\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.result.location.locationDbId).to.eql(\"9001\");",
											" pm.expect(jsonData.result.location.locationType).to.eql(\"International Agricultural Research Center\");     ",
											" pm.expect(jsonData.result.location.name).to.eql(\"Africa Rice Centre\");",
											" pm.expect(jsonData.result.location.abbreviation).to.eql(\"WARDA\"); ",
											" pm.expect(jsonData.result.location.countryCode).to.eql(\"CIV\"); ",
											" pm.expect(jsonData.result.location.countryName).to.eql(\"Côte D'Ivoire\"); ",
											" pm.expect(jsonData.result.location.latitude).to.eql(7.68); ",
											" pm.expect(jsonData.result.location.longitude).to.eql(-5.03);     ",
											" pm.expect(jsonData.result.location.altitude).to.eql(375.0);     ",
											" pm.expect(jsonData.result.location.additionalInfo.province).to.eql(\"Bouaké\");  ",
											"            ",
											"});",
											"",
											"pm.test(\"Verify returned environmentParameter (SITE_SOIL_PH)\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.result.environmentParameters[0].parameterName).to.eql(\"SITE_SOIL_PH\");",
											" pm.expect(jsonData.result.environmentParameters[0].description).to.eql(\"Soil acidity - ph meter (pH)\");",
											" pm.expect(jsonData.result.environmentParameters[0].unit).to.eql(\"pH\");",
											" pm.expect(jsonData.result.environmentParameters[0].value).to.eql(\"1.4\");",
											"    ",
											"});",
											"",
											"pm.test(\"Verify returned environmentParameter (Selection Trait)\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.result.environmentParameters[1].parameterName).to.eql(\"Selection_Trait\");",
											" pm.expect(jsonData.result.environmentParameters[1].description).to.eql(\"Values indicate trait(s) under selection in a particular advancement process\");",
											" pm.expect(jsonData.result.environmentParameters[1].unit).to.eql(\"STCodes\");",
											" pm.expect(jsonData.result.environmentParameters[1].value).to.eql(\"DT\");",
											"    ",
											"});",
											"",
											"pm.test(\"Verify returned environmentParameter (NREP)\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.result.environmentParameters[2].parameterName).to.eql(\"NREP\");",
											" pm.expect(jsonData.result.environmentParameters[2].description).to.eql(\"Number of replications in an experiment\");",
											" pm.expect(jsonData.result.environmentParameters[2].unit).to.eql(\"Number\");",
											" pm.expect(jsonData.result.environmentParameters[2].value).to.eql(\"2\");",
											"    ",
											"});",
											"",
											"pm.test(\"Verify returned environmentParameter (LOCATION_ABBR)\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.result.environmentParameters[3].parameterName).to.eql(\"LOCATION_ABBR\");",
											" pm.expect(jsonData.result.environmentParameters[3].description).to.eql(\"Location code - assigned (LOC_ABBR)\");",
											" pm.expect(jsonData.result.environmentParameters[3].unit).to.eql(\"LOC_ABBR\");",
											" pm.expect(jsonData.result.environmentParameters[3].value).to.eql(\"WARDA-X\");",
											"    ",
											"});",
											"",
											"pm.test(\"Verify returned environmentParameter (Crop_Season_Start_Month)\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.result.environmentParameters[4].parameterName).to.eql(\"Crop_Season_Start_Month\");",
											" pm.expect(jsonData.result.environmentParameters[4].description).to.eql(\"Crop season start month (YYYYMM)\");",
											" pm.expect(jsonData.result.environmentParameters[4].unit).to.eql(\"Year-month (yyyymm)\");",
											" pm.expect(jsonData.result.environmentParameters[4].value).to.eql(\"201805\");",
											"    ",
											"});",
											"",
											"pm.test(\"Verify returned environmentParameter (CROP_SEASON)\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.result.environmentParameters[5].parameterName).to.eql(\"CROP_SEASON\");",
											" pm.expect(jsonData.result.environmentParameters[5].description).to.eql(\"Season - Assigned (Text)\");",
											" pm.expect(jsonData.result.environmentParameters[5].unit).to.eql(\"Text\");",
											" pm.expect(jsonData.result.environmentParameters[5].value).to.eql(\"Summer\");",
											"    ",
											"});",
											"",
											"pm.test(\"Verify returned environmentParameter (Crop_season_Code)\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.result.environmentParameters[6].parameterName).to.eql(\"Crop_season_Code\");",
											" pm.expect(jsonData.result.environmentParameters[6].description).to.eql(\"Season - Assigned (Code)\");",
											" pm.expect(jsonData.result.environmentParameters[6].unit).to.eql(\"Code of Crop_season_Code\");",
											" pm.expect(jsonData.result.environmentParameters[6].value).to.eql(\"10290\");",
											"    ",
											"});",
											"",
											"pm.test(\"Verify returned experimentalDesign\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.result.experimentalDesign.description).to.eql(\"Randomized complete block design\");",
											"    ",
											"});",
											"",
											"pm.test(\"Verify returned contacts\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.result.contacts[0].contactDbId).to.eql(120);",
											" pm.expect(jsonData.result.contacts[0].name).to.eql(\"API Test User\");",
											" pm.expect(jsonData.result.contacts[0].email).to.eql(\"api@mailinator.com\");",
											" pm.expect(jsonData.result.contacts[0].type).to.eql(\"\");",
											" pm.expect(jsonData.result.contacts[0].orcid).to.eql(\"\");",
											"    ",
											"});",
											"",
											"pm.test(\"Verify returned additionalInfo\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(pm.response.text()).to.include(\"Principal investigator - assigned (DBCV)\");",
											" pm.expect(pm.response.text()).to.include(\"API Test User\");",
											"    ",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "7eb032a8-d826-4ec8-9091-19aa119d1a44",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/studies/{{studyDbId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"studies",
										"{{studyDbId}}"
									]
								},
								"description": "GET /{crop}/brapi/v2/studies/{studyDbId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered non-existing studyDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "15ef3583-0da1-46f9-821d-e5769be41ce8",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Verify returned body\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData).to.eql(null);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0398b995-79f8-4df8-8ffc-23f3d580ab8b",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/studies/{{non_existing_study_id}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"studies",
										"{{non_existing_study_id}}"
									]
								},
								"description": "GET /{crop}/brapi/v2/studies/{studyDbId}"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "GET ​/{crop}​/brapi​/v1​/studies​/{studyDbId}​/observationvariables",
					"item": [
						{
							"name": "Verify response code and body when entered valid studyDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ce919f14-dcdf-4c7f-b8f0-341730e5073d",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"pm.test(\"Verify returned metadata\", function () {",
											"",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(3);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Verify returned studyDbId\", function () {",
											" pm.expect(jsonData.result.studyDbId).to.eql(pm.environment.get(\"studyDbId\"));",
											"});",
											"",
											"pm.test(\"Verify returned observationVariableName (Grain_yield) basic details\", function () {",
											"    pm.expect(jsonData.result.data[0].crop).to.eql(\"testdata\");",
											"    pm.expect(jsonData.result.data[0].date).to.eql(null);",
											"    pm.expect(jsonData.result.data[0].defaultValue).to.eql(\"\");",
											"    pm.expect(jsonData.result.data[0].documentationURL).to.eql(null);",
											"    pm.expect(jsonData.result.data[0].growthStage).to.eql(null);",
											"    pm.expect(jsonData.result.data[0].institution).to.eql(null);",
											"    pm.expect(jsonData.result.data[0].language).to.eql(null);",
											"    pm.expect(jsonData.result.data[0].name).to.eql(\"Grain_yield\");",
											"    pm.expect(jsonData.result.data[0].observationVariableDbId).to.eql(pm.environment.get(\"study_grainYield_cvterm_id\"));",
											"    pm.expect(jsonData.result.data[0].observationVariableName).to.eql(\"Grain_yield\");",
											"    pm.expect(jsonData.result.data[0].ontologyDbId).to.eql(null);",
											"    pm.expect(jsonData.result.data[0].ontologyName).to.eql(null);",
											"    pm.expect(jsonData.result.data[0].scientist).to.eql(null);",
											"    pm.expect(jsonData.result.data[0].status).to.eql(null);",
											"    pm.expect(jsonData.result.data[0].submissionTimestamp).to.eql(null);",
											"    pm.expect(jsonData.result.data[0].synonyms).to.eql([]);",
											"    pm.expect(jsonData.result.data[0].xref).to.eql(null);",
											"});",
											"pm.test(\"Verify returned observationVariableName (Grain_yield) scale details\", function () {    ",
											"    //Verify scale details",
											"    pm.expect(jsonData.result.data[0].scale.dataType).to.eql(\"Numerical\");",
											"    pm.expect(jsonData.result.data[0].scale.decimalPlaces).to.eql(4);",
											"    pm.expect(jsonData.result.data[0].scale.name).to.eql(\"Kg/ha\");",
											"    pm.expect(jsonData.result.data[0].scale.scaleDbId).to.eql(\"6090\");",
											"    pm.expect(jsonData.result.data[0].scale.scaleName).to.eql(\"Kg/ha\");",
											"    pm.expect(jsonData.result.data[0].scale.xref).to.eql(null);",
											"    pm.expect(jsonData.result.data[0].scale.validValues.categories).to.eql([]);",
											"    pm.expect(jsonData.result.data[0].scale.validValues.max).to.eql(null);",
											"    pm.expect(jsonData.result.data[0].scale.validValues.min).to.eql(null);",
											"    pm.expect(jsonData.result.data[0].scale.ontologyReference.documentationLinks[0].type).to.eql(\"WEBPAGE\");",
											"    pm.expect(jsonData.result.data[0].scale.ontologyReference.documentationLinks[0].url).to.eql(\"https://cropontology.org\");",
											"    pm.expect(jsonData.result.data[0].scale.ontologyReference.ontologyDbId).to.eql(null);",
											"    pm.expect(jsonData.result.data[0].scale.ontologyReference.ontologyName).to.eql(\"Kg/ha\");",
											"    pm.expect(jsonData.result.data[0].scale.ontologyReference.version).to.eql(null);",
											"    ",
											"});",
											"    pm.test(\"Verify returned observationVariableName (Grain_yield) trait details\", function () {  ",
											"    //Verify trait details",
											"        pm.expect(jsonData.result.data[0].trait.attribute).to.eql(null);",
											"        pm.expect(jsonData.result.data[0].trait.class).to.eql(\"Agronomic\");",
											"        pm.expect(jsonData.result.data[0].trait.description).to.eql(\"Yield\");",
											"        pm.expect(jsonData.result.data[0].trait.entity).to.eql(null);",
											"        pm.expect(jsonData.result.data[0].trait.mainAbbreviation).to.eql(null);",
											"        pm.expect(jsonData.result.data[0].trait.name).to.eql(\"Yield\");",
											"        pm.expect(jsonData.result.data[0].trait.status).to.eql(\"Active\");",
											"        pm.expect(jsonData.result.data[0].trait.synonyms).to.eql([]);",
											"        pm.expect(jsonData.result.data[0].trait.traitDbId).to.eql(\"15009\");",
											"        pm.expect(jsonData.result.data[0].trait.traitName).to.eql(\"Yield\");",
											"        pm.expect(jsonData.result.data[0].trait.xref).to.eql(\"null\");",
											"        pm.expect(jsonData.result.data[0].trait.ontologyReference.documentationLinks[0].type).to.eql(\"WEBPAGE\");",
											"        pm.expect(jsonData.result.data[0].trait.ontologyReference.documentationLinks[0].url).to.eql(\"https://cropontology.org\");",
											"        pm.expect(jsonData.result.data[0].trait.ontologyReference.ontologyDbId).to.eql(\"null\");",
											"        pm.expect(jsonData.result.data[0].trait.ontologyReference.ontologyName).to.eql(\"Yield\");",
											"        pm.expect(jsonData.result.data[0].trait.ontologyReference.version).to.eql(null);",
											"        ",
											"    });",
											"    pm.test(\"Verify returned observationVariableName (Grain_yield) method details\", function () {  ",
											" ",
											"    //Verify method details",
											"    pm.expect(jsonData.result.data[0].method.class).to.eql(null);",
											"    pm.expect(jsonData.result.data[0].method.description).to.eql(\"Dry and weigh\");",
											"    pm.expect(jsonData.result.data[0].method.formula).to.eql(\"{{18110}}+10\");",
											"    pm.expect(jsonData.result.data[0].method.methodDbId).to.eql(\"16000\");",
											"    pm.expect(jsonData.result.data[0].method.methodName).to.eql(\"Dry and weigh\");",
											"    pm.expect(jsonData.result.data[0].method.name).to.eql(\"Dry and weigh\");",
											"    pm.expect(jsonData.result.data[0].method.reference).to.eql(null);",
											"    });",
											"  pm.test(\"Verify returned observationVariableName (Grain_yield) or details\", function () {  ",
											" ",
											"    pm.expect(jsonData.result.data[0].method.ontologyReference.documentationLinks[0].type).to.eql(\"WEBPAGE\");",
											"    pm.expect(jsonData.result.data[0].method.ontologyReference.documentationLinks[0].url).to.eql(\"https://cropontology.org\");",
											"    pm.expect(jsonData.result.data[0].method.ontologyReference.ontologyDbId).to.eql(null);",
											"    pm.expect(jsonData.result.data[0].method.ontologyReference.ontologyName).to.eql(\"Dry and weigh\");pm.expect(jsonData.result.data[0].method.ontologyReference.version).to.eql(null);",
											"});",
											"    ",
											"pm.test(\"Verify returned observationVariableName (Biomas_yield) basic details\", function () {",
											"    pm.expect(jsonData.result.data[1].crop).to.eql(\"testdata\");",
											"    pm.expect(jsonData.result.data[1].date).to.eql(null);",
											"    pm.expect(jsonData.result.data[1].defaultValue).to.eql(\"\");",
											"    pm.expect(jsonData.result.data[1].documentationURL).to.eql(null);",
											"    pm.expect(jsonData.result.data[1].growthStage).to.eql(null);",
											"    pm.expect(jsonData.result.data[1].institution).to.eql(null);",
											"    pm.expect(jsonData.result.data[1].language).to.eql(null);",
											"    pm.expect(jsonData.result.data[1].name).to.eql(\"Biomas_yield\");",
											"    pm.expect(jsonData.result.data[1].observationVariableDbId).to.eql(pm.environment.get(\"study_biomass_cvterm_id\"));",
											"    pm.expect(jsonData.result.data[1].observationVariableName).to.eql(\"Biomas_yield\");",
											"    pm.expect(jsonData.result.data[1].ontologyDbId).to.eql(null);",
											"    pm.expect(jsonData.result.data[1].ontologyName).to.eql(null);",
											"    pm.expect(jsonData.result.data[1].scientist).to.eql(null);",
											"    pm.expect(jsonData.result.data[1].status).to.eql(null);",
											"    pm.expect(jsonData.result.data[1].submissionTimestamp).to.eql(null);",
											"    pm.expect(jsonData.result.data[1].synonyms).to.eql([]);",
											"    pm.expect(jsonData.result.data[1].xref).to.eql(null);",
											"    ",
											"});",
											"    ",
											"pm.test(\"Verify returned observationVariableName (Biomas_yield) scale details\", function () {",
											"    //Verify scale details",
											"    pm.expect(jsonData.result.data[1].scale.dataType).to.eql(\"Numerical\");",
											"    pm.expect(jsonData.result.data[1].scale.decimalPlaces).to.eql(4);",
											"    pm.expect(jsonData.result.data[1].scale.name).to.eql(\"t/ha\");",
											"    pm.expect(jsonData.result.data[1].scale.scaleDbId).to.eql(\"17010\");",
											"    pm.expect(jsonData.result.data[1].scale.scaleName).to.eql(\"t/ha\");",
											"    pm.expect(jsonData.result.data[1].scale.xref).to.eql(null);",
											"    pm.expect(jsonData.result.data[1].scale.validValues.categories).to.eql([]);",
											"    pm.expect(jsonData.result.data[1].scale.validValues.max).to.eql(null);",
											"    pm.expect(jsonData.result.data[1].scale.validValues.min).to.eql(null);",
											"    pm.expect(jsonData.result.data[1].scale.ontologyReference.documentationLinks[0].type).to.eql(\"WEBPAGE\");",
											"    pm.expect(jsonData.result.data[1].scale.ontologyReference.documentationLinks[0].url).to.eql(\"https://cropontology.org\");",
											"    pm.expect(jsonData.result.data[1].scale.ontologyReference.ontologyDbId).to.eql(null);",
											"    pm.expect(jsonData.result.data[1].scale.ontologyReference.ontologyName).to.eql(\"t/ha\");",
											"    pm.expect(jsonData.result.data[1].scale.ontologyReference.version).to.eql(null);",
											"    ",
											"});",
											"    ",
											"pm.test(\"Verify returned observationVariableName (Biomas_yield) ontology reference details\", function () {",
											"    //ontology reference",
											"    pm.expect(jsonData.result.data[1].ontologyReference).to.eql(null);",
											" /*   pm.expect(jsonData.result.data[1].ontologyReference.documentationLinks[0].url).to.eql(\"https://cropontology.org\");",
											"    pm.expect(jsonData.result.data[1].ontologyReference.ontologyDbId).to.eql(null);",
											"    pm.expect(jsonData.result.data[1].ontologyReference.ontologyName).to.eql(null);",
											"    pm.expect(jsonData.result.data[1].ontologyReference.version).to.eql(null);*/",
											"    ",
											"});",
											"    ",
											"pm.test(\"Verify returned observationVariableName (Biomas_yield) trait details\", function () {",
											"    //Verify trait details",
											"        pm.expect(jsonData.result.data[1].trait.attribute).to.eql(null);",
											"        pm.expect(jsonData.result.data[1].trait.class).to.eql(\"Agronomic\");",
											"        pm.expect(jsonData.result.data[1].trait.description).to.eql(\"Biomass\");",
											"        pm.expect(jsonData.result.data[1].trait.entity).to.eql(null);",
											"        pm.expect(jsonData.result.data[1].trait.mainAbbreviation).to.eql(null);",
											"        pm.expect(jsonData.result.data[1].trait.name).to.eql(\"Biomass\");",
											"        pm.expect(jsonData.result.data[1].trait.status).to.eql(\"Active\");",
											"        pm.expect(jsonData.result.data[1].trait.synonyms).to.eql([]);",
											"        pm.expect(jsonData.result.data[1].trait.traitDbId).to.eql(\"15010\");",
											"        pm.expect(jsonData.result.data[1].trait.traitName).to.eql(\"Biomass\");",
											"        pm.expect(jsonData.result.data[1].trait.xref).to.eql(\"null\");",
											"        pm.expect(jsonData.result.data[1].trait.ontologyReference.documentationLinks[0].type).to.eql(\"WEBPAGE\");",
											"        pm.expect(jsonData.result.data[1].trait.ontologyReference.documentationLinks[0].url).to.eql(\"https://cropontology.org\");",
											"        pm.expect(jsonData.result.data[1].trait.ontologyReference.ontologyDbId).to.eql(\"null\");",
											"        pm.expect(jsonData.result.data[1].trait.ontologyReference.ontologyName).to.eql(\"Biomass\");",
											"        pm.expect(jsonData.result.data[1].trait.ontologyReference.version).to.eql(null);",
											"});",
											"    ",
											"pm.test(\"Verify returned observationVariableName (Biomas_yield) method details\", function () { ",
											"    //Verify method details",
											"    pm.expect(jsonData.result.data[1].method.class).to.eql(null);",
											"    pm.expect(jsonData.result.data[1].method.description).to.eql(\"Dry and weigh\");",
											"    pm.expect(jsonData.result.data[1].method.formula).to.eql(\"{{100020}}+5\");",
											"    pm.expect(jsonData.result.data[1].method.methodDbId).to.eql(\"16000\");",
											"    pm.expect(jsonData.result.data[1].method.methodName).to.eql(\"Dry and weigh\");",
											"    pm.expect(jsonData.result.data[1].method.name).to.eql(\"Dry and weigh\");",
											"    pm.expect(jsonData.result.data[1].method.reference).to.eql(null);",
											"    pm.expect(jsonData.result.data[1].method.ontologyReference.documentationLinks[0].type).to.eql(\"WEBPAGE\");",
											"    pm.expect(jsonData.result.data[1].method.ontologyReference.documentationLinks[0].url).to.eql(\"https://cropontology.org\");",
											"    pm.expect(jsonData.result.data[1].method.ontologyReference.ontologyDbId).to.eql(null);",
											"    pm.expect(jsonData.result.data[1].method.ontologyReference.ontologyName).to.eql(\"Dry and weigh\");pm.expect(jsonData.result.data[1].method.ontologyReference.version).to.eql(null);",
											"});",
											"",
											"pm.test(\"Verify returned observationVariableName (Grain_size) basic details\", function () {",
											"    pm.expect(jsonData.result.data[2].crop).to.eql(\"testdata\");",
											"    pm.expect(jsonData.result.data[2].date).to.eql(null);",
											"    pm.expect(jsonData.result.data[2].defaultValue).to.eql(\"\");",
											"    pm.expect(jsonData.result.data[2].documentationURL).to.eql(null);",
											"    pm.expect(jsonData.result.data[2].growthStage).to.eql(null);",
											"    pm.expect(jsonData.result.data[2].institution).to.eql(null);",
											"    pm.expect(jsonData.result.data[2].language).to.eql(null);",
											"    pm.expect(jsonData.result.data[2].name).to.eql(\"Grain_size\");",
											"    pm.expect(jsonData.result.data[2].observationVariableDbId).to.eql(pm.environment.get(\"grain_size_cvterm_id\"));",
											"    pm.expect(jsonData.result.data[2].observationVariableName).to.eql(\"Grain_size\");",
											"    pm.expect(jsonData.result.data[2].ontologyDbId).to.eql(null);",
											"    pm.expect(jsonData.result.data[2].ontologyName).to.eql(null);",
											"    pm.expect(jsonData.result.data[2].scientist).to.eql(null);",
											"    pm.expect(jsonData.result.data[2].status).to.eql(null);",
											"    pm.expect(jsonData.result.data[2].submissionTimestamp).to.eql(null);",
											"    pm.expect(jsonData.result.data[2].synonyms).to.eql([]);",
											"    pm.expect(jsonData.result.data[2].xref).to.eql(null);",
											"});",
											"",
											"pm.test(\"Verify returned observationVariableName (Grain_size) scale details\", function () {    ",
											"    //Verify scale details",
											"    pm.expect(jsonData.result.data[2].scale.dataType).to.eql(\"Numerical\");",
											"    pm.expect(jsonData.result.data[2].scale.decimalPlaces).to.eql(4);",
											"    pm.expect(jsonData.result.data[2].scale.name).to.eql(\"g\");",
											"    pm.expect(jsonData.result.data[2].scale.scaleDbId).to.eql(\"6087\");",
											"    pm.expect(jsonData.result.data[2].scale.scaleName).to.eql(\"g\");",
											"    pm.expect(jsonData.result.data[2].scale.xref).to.eql(null);",
											"    pm.expect(jsonData.result.data[2].scale.validValues.categories).to.eql([]);",
											"    pm.expect(jsonData.result.data[2].scale.validValues.max).to.eql(null);",
											"    pm.expect(jsonData.result.data[2].scale.validValues.min).to.eql(null);",
											"    pm.expect(jsonData.result.data[2].scale.ontologyReference.documentationLinks[0].type).to.eql(\"WEBPAGE\");",
											"    pm.expect(jsonData.result.data[2].scale.ontologyReference.documentationLinks[0].url).to.eql(\"https://cropontology.org\");",
											"    pm.expect(jsonData.result.data[2].scale.ontologyReference.ontologyDbId).to.eql(null);",
											"    pm.expect(jsonData.result.data[2].scale.ontologyReference.ontologyName).to.eql(\"g\");",
											"    pm.expect(jsonData.result.data[2].scale.ontologyReference.version).to.eql(null);",
											"});",
											"",
											"pm.test(\"Verify returned observationVariableName (Grain_size) ontology reference details\", function () {    ",
											"    //ontology reference",
											"    pm.expect(jsonData.result.data[2].ontologyReference).to.eql(null);",
											"});",
											"pm.test(\"Verify returned observationVariableName (Grain_size) trait details\", function () {",
											"    //Verify trait details",
											"        pm.expect(jsonData.result.data[2].trait.attribute).to.eql(null);",
											"        pm.expect(jsonData.result.data[2].trait.class).to.eql(\"Agronomic\");",
											"        pm.expect(jsonData.result.data[2].trait.description).to.eql(\"Grain size\");",
											"        pm.expect(jsonData.result.data[2].trait.entity).to.eql(null);",
											"        pm.expect(jsonData.result.data[2].trait.mainAbbreviation).to.eql(null);",
											"        pm.expect(jsonData.result.data[2].trait.name).to.eql(\"Grain size\");",
											"        pm.expect(jsonData.result.data[2].trait.status).to.eql(\"Active\");",
											"        pm.expect(jsonData.result.data[2].trait.synonyms).to.eql([]);",
											"        pm.expect(jsonData.result.data[2].trait.traitDbId).to.eql(\"15110\");",
											"        pm.expect(jsonData.result.data[2].trait.traitName).to.eql(\"Grain size\");",
											"        pm.expect(jsonData.result.data[2].trait.xref).to.eql(\"null\");",
											"        pm.expect(jsonData.result.data[2].trait.ontologyReference.documentationLinks[0].type).to.eql(\"WEBPAGE\");",
											"        pm.expect(jsonData.result.data[2].trait.ontologyReference.documentationLinks[0].url).to.eql(\"https://cropontology.org\");",
											"        pm.expect(jsonData.result.data[2].trait.ontologyReference.ontologyDbId).to.eql(\"null\");",
											"        pm.expect(jsonData.result.data[2].trait.ontologyReference.ontologyName).to.eql(\"Grain size\");",
											"        pm.expect(jsonData.result.data[2].trait.ontologyReference.version).to.eql(null);",
											"});",
											"",
											"pm.test(\"Verify returned observationVariableName (Grain_size) method details\", function () {",
											"    //Verify method details",
											"    pm.expect(jsonData.result.data[2].method.class).to.eql(null);",
											"    pm.expect(jsonData.result.data[2].method.description).to.eql(\"Weigh 1000 dry grains\");",
											"    pm.expect(jsonData.result.data[2].method.formula).to.eql(\"null\");",
											"    pm.expect(jsonData.result.data[2].method.methodDbId).to.eql(\"16070\");",
											"    pm.expect(jsonData.result.data[2].method.methodName).to.eql(\"Weigh 1000 dry grains\");",
											"    pm.expect(jsonData.result.data[2].method.name).to.eql(\"Weigh 1000 dry grains\");",
											"    pm.expect(jsonData.result.data[2].method.reference).to.eql(null);",
											"    pm.expect(jsonData.result.data[2].method.ontologyReference.documentationLinks[0].type).to.eql(\"WEBPAGE\");",
											"    pm.expect(jsonData.result.data[2].method.ontologyReference.documentationLinks[0].url).to.eql(\"https://cropontology.org\");",
											"    pm.expect(jsonData.result.data[2].method.ontologyReference.ontologyDbId).to.eql(null);",
											"    pm.expect(jsonData.result.data[2].method.ontologyReference.ontologyName).to.eql(\"Weigh 1000 dry grains\");pm.expect(jsonData.result.data[2].method.ontologyReference.version).to.eql(null);",
											"});",
											"pm.test(\"Verify returned trialName\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.result.trialName).to.eql(\"Randomized Trial 20180003\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c4187544-eedc-45c2-91d2-cc48b5667310",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/studies/{{studyDbId}}/observationvariables",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"studies",
										"{{studyDbId}}",
										"observationvariables"
									]
								},
								"description": "GET /{crop}​/brapi​/v1​/studies​/{studyDbId}​/observationvariables"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered pagination details",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8209e8cf-894f-4350-8171-1f14d99278fb",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Verify returned metadata\", function () {",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(10000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(3);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Verify returned studyDbId\", function () {",
											" pm.expect(jsonData.result.studyDbId).to.eql(pm.environment.get(\"studyDbId\"));",
											"});",
											"",
											"pm.test(\"Verify returned observationVariableName (Grain_yield) basic details\", function () {",
											"    pm.expect(jsonData.result.data[0].crop).to.eql(\"testdata\");",
											"    pm.expect(jsonData.result.data[0].date).to.eql(null);",
											"    pm.expect(jsonData.result.data[0].defaultValue).to.eql(\"\");",
											"    pm.expect(jsonData.result.data[0].documentationURL).to.eql(null);",
											"    pm.expect(jsonData.result.data[0].growthStage).to.eql(null);",
											"    pm.expect(jsonData.result.data[0].institution).to.eql(null);",
											"    pm.expect(jsonData.result.data[0].language).to.eql(null);",
											"    pm.expect(jsonData.result.data[0].name).to.eql(\"Grain_yield\");",
											"    pm.expect(jsonData.result.data[0].observationVariableDbId).to.eql(pm.environment.get(\"study_grainYield_cvterm_id\"));",
											"    pm.expect(jsonData.result.data[0].observationVariableName).to.eql(\"Grain_yield\");",
											"    pm.expect(jsonData.result.data[0].ontologyDbId).to.eql(null);",
											"    pm.expect(jsonData.result.data[0].ontologyName).to.eql(null);",
											"    pm.expect(jsonData.result.data[0].scientist).to.eql(null);",
											"    pm.expect(jsonData.result.data[0].status).to.eql(null);",
											"    pm.expect(jsonData.result.data[0].submissionTimestamp).to.eql(null);",
											"    pm.expect(jsonData.result.data[0].synonyms).to.eql([]);",
											"    pm.expect(jsonData.result.data[0].xref).to.eql(null);",
											"});",
											"",
											"pm.test(\"Verify returned observationVariableName (Grain_yield) scale details\", function () {",
											"    //Verify scale details",
											"    pm.expect(jsonData.result.data[0].scale.dataType).to.eql(\"Numerical\");",
											"    pm.expect(jsonData.result.data[0].scale.decimalPlaces).to.eql(4);",
											"    pm.expect(jsonData.result.data[0].scale.name).to.eql(\"Kg/ha\");",
											"    pm.expect(jsonData.result.data[0].scale.scaleDbId).to.eql(\"6090\");",
											"    pm.expect(jsonData.result.data[0].scale.scaleName).to.eql(\"Kg/ha\");",
											"    pm.expect(jsonData.result.data[0].scale.xref).to.eql(null);",
											"    pm.expect(jsonData.result.data[0].scale.validValues.categories).to.eql([]);",
											"    pm.expect(jsonData.result.data[0].scale.validValues.max).to.eql(null);",
											"    pm.expect(jsonData.result.data[0].scale.validValues.min).to.eql(null);",
											"    pm.expect(jsonData.result.data[0].scale.ontologyReference.documentationLinks[0].type).to.eql(\"WEBPAGE\");",
											"    pm.expect(jsonData.result.data[0].scale.ontologyReference.documentationLinks[0].url).to.eql(\"https://cropontology.org\");",
											"    pm.expect(jsonData.result.data[0].scale.ontologyReference.ontologyDbId).to.eql(null);",
											"    pm.expect(jsonData.result.data[0].scale.ontologyReference.ontologyName).to.eql(\"Kg/ha\");",
											"    pm.expect(jsonData.result.data[0].scale.ontologyReference.version).to.eql(null);",
											"});",
											"",
											"pm.test(\"Verify returned observationVariableName (Grain_yield) trait details\", function () {",
											"    //Verify trait details",
											"        pm.expect(jsonData.result.data[0].trait.attribute).to.eql(null);",
											"        pm.expect(jsonData.result.data[0].trait.class).to.eql(\"Agronomic\");",
											"        pm.expect(jsonData.result.data[0].trait.description).to.eql(\"Yield\");",
											"        pm.expect(jsonData.result.data[0].trait.entity).to.eql(null);",
											"        pm.expect(jsonData.result.data[0].trait.mainAbbreviation).to.eql(null);",
											"        pm.expect(jsonData.result.data[0].trait.name).to.eql(\"Yield\");",
											"        pm.expect(jsonData.result.data[0].trait.status).to.eql(\"Active\");",
											"        pm.expect(jsonData.result.data[0].trait.synonyms).to.eql([]);",
											"        pm.expect(jsonData.result.data[0].trait.traitDbId).to.eql(\"15009\");",
											"        pm.expect(jsonData.result.data[0].trait.traitName).to.eql(\"Yield\");",
											"        pm.expect(jsonData.result.data[0].trait.xref).to.eql(\"null\");",
											"        pm.expect(jsonData.result.data[0].trait.ontologyReference.documentationLinks[0].type).to.eql(\"WEBPAGE\");",
											"        pm.expect(jsonData.result.data[0].trait.ontologyReference.documentationLinks[0].url).to.eql(\"https://cropontology.org\");",
											"        pm.expect(jsonData.result.data[0].trait.ontologyReference.ontologyDbId).to.eql(\"null\");",
											"        pm.expect(jsonData.result.data[0].trait.ontologyReference.ontologyName).to.eql(\"Yield\");",
											"        pm.expect(jsonData.result.data[0].trait.ontologyReference.version).to.eql(null);",
											"});",
											"",
											"pm.test(\"Verify returned observationVariableName (Grain_yield) method details\", function () {",
											" ",
											"    //Verify method details",
											"    pm.expect(jsonData.result.data[0].method.class).to.eql(null);",
											"    pm.expect(jsonData.result.data[0].method.description).to.eql(\"Dry and weigh\");",
											"    pm.expect(jsonData.result.data[0].method.formula).to.eql(\"{{18110}}+10\");",
											"    pm.expect(jsonData.result.data[0].method.methodDbId).to.eql(\"16000\");",
											"    pm.expect(jsonData.result.data[0].method.methodName).to.eql(\"Dry and weigh\");",
											"    pm.expect(jsonData.result.data[0].method.name).to.eql(\"Dry and weigh\");",
											"    pm.expect(jsonData.result.data[0].method.reference).to.eql(null);",
											"    pm.expect(jsonData.result.data[0].method.ontologyReference.documentationLinks[0].type).to.eql(\"WEBPAGE\");",
											"    pm.expect(jsonData.result.data[0].method.ontologyReference.documentationLinks[0].url).to.eql(\"https://cropontology.org\");",
											"    pm.expect(jsonData.result.data[0].method.ontologyReference.ontologyDbId).to.eql(null);",
											"    pm.expect(jsonData.result.data[0].method.ontologyReference.ontologyName).to.eql(\"Dry and weigh\");pm.expect(jsonData.result.data[0].method.ontologyReference.version).to.eql(null);",
											"});",
											"    ",
											"pm.test(\"Verify returned observationVariableName (Biomas_yield) basic details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[1].crop).to.eql(\"testdata\");",
											"    pm.expect(jsonData.result.data[1].date).to.eql(null);",
											"    pm.expect(jsonData.result.data[1].defaultValue).to.eql(\"\");",
											"    pm.expect(jsonData.result.data[1].documentationURL).to.eql(null);",
											"    pm.expect(jsonData.result.data[1].growthStage).to.eql(null);",
											"    pm.expect(jsonData.result.data[1].institution).to.eql(null);",
											"    pm.expect(jsonData.result.data[1].language).to.eql(null);",
											"    pm.expect(jsonData.result.data[1].name).to.eql(\"Biomas_yield\");",
											"    pm.expect(jsonData.result.data[1].observationVariableDbId).to.eql(pm.environment.get(\"study_biomass_cvterm_id\"));",
											"    pm.expect(jsonData.result.data[1].observationVariableName).to.eql(\"Biomas_yield\");",
											"    pm.expect(jsonData.result.data[1].ontologyDbId).to.eql(null);",
											"    pm.expect(jsonData.result.data[1].ontologyName).to.eql(null);",
											"    pm.expect(jsonData.result.data[1].scientist).to.eql(null);",
											"    pm.expect(jsonData.result.data[1].status).to.eql(null);",
											"    pm.expect(jsonData.result.data[1].submissionTimestamp).to.eql(null);",
											"    pm.expect(jsonData.result.data[1].synonyms).to.eql([]);",
											"    pm.expect(jsonData.result.data[1].xref).to.eql(null);",
											"});",
											"    ",
											"pm.test(\"Verify returned observationVariableName (Biomas_yield) scale details\", function () {   ",
											"    //Verify scale details",
											"    pm.expect(jsonData.result.data[1].scale.dataType).to.eql(\"Numerical\");",
											"    pm.expect(jsonData.result.data[1].scale.decimalPlaces).to.eql(4);",
											"    pm.expect(jsonData.result.data[1].scale.name).to.eql(\"t/ha\");",
											"    pm.expect(jsonData.result.data[1].scale.scaleDbId).to.eql(\"17010\");",
											"    pm.expect(jsonData.result.data[1].scale.scaleName).to.eql(\"t/ha\");",
											"    pm.expect(jsonData.result.data[1].scale.xref).to.eql(null);",
											"    pm.expect(jsonData.result.data[1].scale.validValues.categories).to.eql([]);",
											"    pm.expect(jsonData.result.data[1].scale.validValues.max).to.eql(null);",
											"    pm.expect(jsonData.result.data[1].scale.validValues.min).to.eql(null);",
											"    pm.expect(jsonData.result.data[1].scale.ontologyReference.documentationLinks[0].type).to.eql(\"WEBPAGE\");",
											"    pm.expect(jsonData.result.data[1].scale.ontologyReference.documentationLinks[0].url).to.eql(\"https://cropontology.org\");",
											"    pm.expect(jsonData.result.data[1].scale.ontologyReference.ontologyDbId).to.eql(null);",
											"    pm.expect(jsonData.result.data[1].scale.ontologyReference.ontologyName).to.eql(\"t/ha\");",
											"    pm.expect(jsonData.result.data[1].scale.ontologyReference.version).to.eql(null);",
											"});",
											"    ",
											"pm.test(\"Verify returned observationVariableName (Biomas_yield) ontology reference details\", function () {   ",
											"    //ontology reference",
											"    pm.expect(jsonData.result.data[1].ontologyReference).to.eql(null);",
											"",
											"});",
											"    ",
											"pm.test(\"Verify returned observationVariableName (Biomas_yield) trait details\", function () {",
											"    //Verify trait details",
											"        pm.expect(jsonData.result.data[1].trait.attribute).to.eql(null);",
											"        pm.expect(jsonData.result.data[1].trait.class).to.eql(\"Agronomic\");",
											"        pm.expect(jsonData.result.data[1].trait.description).to.eql(\"Biomass\");",
											"        pm.expect(jsonData.result.data[1].trait.entity).to.eql(null);",
											"        pm.expect(jsonData.result.data[1].trait.mainAbbreviation).to.eql(null);",
											"        pm.expect(jsonData.result.data[1].trait.name).to.eql(\"Biomass\");",
											"        pm.expect(jsonData.result.data[1].trait.status).to.eql(\"Active\");",
											"        pm.expect(jsonData.result.data[1].trait.synonyms).to.eql([]);",
											"        pm.expect(jsonData.result.data[1].trait.traitDbId).to.eql(\"15010\");",
											"        pm.expect(jsonData.result.data[1].trait.traitName).to.eql(\"Biomass\");",
											"        pm.expect(jsonData.result.data[1].trait.xref).to.eql(\"null\");",
											"        pm.expect(jsonData.result.data[1].trait.ontologyReference.documentationLinks[0].type).to.eql(\"WEBPAGE\");",
											"        pm.expect(jsonData.result.data[1].trait.ontologyReference.documentationLinks[0].url).to.eql(\"https://cropontology.org\");",
											"        pm.expect(jsonData.result.data[1].trait.ontologyReference.ontologyDbId).to.eql(\"null\");",
											"        pm.expect(jsonData.result.data[1].trait.ontologyReference.ontologyName).to.eql(\"Biomass\");",
											"        pm.expect(jsonData.result.data[1].trait.ontologyReference.version).to.eql(null);",
											"});",
											"    ",
											"pm.test(\"Verify returned observationVariableName (Biomas_yield) method details\", function () {",
											"    //Verify method details",
											"    pm.expect(jsonData.result.data[1].method.class).to.eql(null);",
											"    pm.expect(jsonData.result.data[1].method.description).to.eql(\"Dry and weigh\");",
											"    pm.expect(jsonData.result.data[1].method.formula).to.eql(\"{{100020}}+5\");",
											"    pm.expect(jsonData.result.data[1].method.methodDbId).to.eql(\"16000\");",
											"    pm.expect(jsonData.result.data[1].method.methodName).to.eql(\"Dry and weigh\");",
											"    pm.expect(jsonData.result.data[1].method.name).to.eql(\"Dry and weigh\");",
											"    pm.expect(jsonData.result.data[1].method.reference).to.eql(null);",
											"    pm.expect(jsonData.result.data[1].method.ontologyReference.documentationLinks[0].type).to.eql(\"WEBPAGE\");",
											"    pm.expect(jsonData.result.data[1].method.ontologyReference.documentationLinks[0].url).to.eql(\"https://cropontology.org\");",
											"    pm.expect(jsonData.result.data[1].method.ontologyReference.ontologyDbId).to.eql(null);",
											"    pm.expect(jsonData.result.data[1].method.ontologyReference.ontologyName).to.eql(\"Dry and weigh\");pm.expect(jsonData.result.data[1].method.ontologyReference.version).to.eql(null);",
											"});",
											"",
											"pm.test(\"Verify returned observationVariableName (Grain_size) basic details\", function () {",
											"    pm.expect(jsonData.result.data[2].crop).to.eql(\"testdata\");",
											"    pm.expect(jsonData.result.data[2].date).to.eql(null);",
											"    pm.expect(jsonData.result.data[2].defaultValue).to.eql(\"\");",
											"    pm.expect(jsonData.result.data[2].documentationURL).to.eql(null);",
											"    pm.expect(jsonData.result.data[2].growthStage).to.eql(null);",
											"    pm.expect(jsonData.result.data[2].institution).to.eql(null);",
											"    pm.expect(jsonData.result.data[2].language).to.eql(null);",
											"    pm.expect(jsonData.result.data[2].name).to.eql(\"Grain_size\");",
											"    pm.expect(jsonData.result.data[2].observationVariableDbId).to.eql(pm.environment.get(\"grain_size_cvterm_id\"));",
											"    pm.expect(jsonData.result.data[2].observationVariableName).to.eql(\"Grain_size\");",
											"    pm.expect(jsonData.result.data[2].ontologyDbId).to.eql(null);",
											"    pm.expect(jsonData.result.data[2].ontologyName).to.eql(null);",
											"    pm.expect(jsonData.result.data[2].scientist).to.eql(null);",
											"    pm.expect(jsonData.result.data[2].status).to.eql(null);",
											"    pm.expect(jsonData.result.data[2].submissionTimestamp).to.eql(null);",
											"    pm.expect(jsonData.result.data[2].synonyms).to.eql([]);",
											"    pm.expect(jsonData.result.data[2].xref).to.eql(null);",
											"});",
											"",
											"pm.test(\"Verify returned observationVariableName (Grain_size) scale details\", function () {    ",
											"    //Verify scale details",
											"    pm.expect(jsonData.result.data[2].scale.dataType).to.eql(\"Numerical\");",
											"    pm.expect(jsonData.result.data[2].scale.decimalPlaces).to.eql(4);",
											"    pm.expect(jsonData.result.data[2].scale.name).to.eql(\"g\");",
											"    pm.expect(jsonData.result.data[2].scale.scaleDbId).to.eql(\"6087\");",
											"    pm.expect(jsonData.result.data[2].scale.scaleName).to.eql(\"g\");",
											"    pm.expect(jsonData.result.data[2].scale.xref).to.eql(null);",
											"    pm.expect(jsonData.result.data[2].scale.validValues.categories).to.eql([]);",
											"    pm.expect(jsonData.result.data[2].scale.validValues.max).to.eql(null);",
											"    pm.expect(jsonData.result.data[2].scale.validValues.min).to.eql(null);",
											"    pm.expect(jsonData.result.data[2].scale.ontologyReference.documentationLinks[0].type).to.eql(\"WEBPAGE\");",
											"    pm.expect(jsonData.result.data[2].scale.ontologyReference.documentationLinks[0].url).to.eql(\"https://cropontology.org\");",
											"    pm.expect(jsonData.result.data[2].scale.ontologyReference.ontologyDbId).to.eql(null);",
											"    pm.expect(jsonData.result.data[2].scale.ontologyReference.ontologyName).to.eql(\"g\");",
											"    pm.expect(jsonData.result.data[2].scale.ontologyReference.version).to.eql(null);",
											"});",
											"",
											"pm.test(\"Verify returned observationVariableName (Grain_size) ontology reference details\", function () {",
											"    //ontology reference",
											"    pm.expect(jsonData.result.data[2].ontologyReference).to.eql(null);",
											"});",
											"",
											"pm.test(\"Verify returned observationVariableName (Grain_size) trait details\", function () {",
											"    //Verify trait details",
											"        pm.expect(jsonData.result.data[2].trait.attribute).to.eql(null);",
											"        pm.expect(jsonData.result.data[2].trait.class).to.eql(\"Agronomic\");",
											"        pm.expect(jsonData.result.data[2].trait.description).to.eql(\"Grain size\");",
											"        pm.expect(jsonData.result.data[2].trait.entity).to.eql(null);",
											"        pm.expect(jsonData.result.data[2].trait.mainAbbreviation).to.eql(null);",
											"        pm.expect(jsonData.result.data[2].trait.name).to.eql(\"Grain size\");",
											"        pm.expect(jsonData.result.data[2].trait.status).to.eql(\"Active\");",
											"        pm.expect(jsonData.result.data[2].trait.synonyms).to.eql([]);",
											"        pm.expect(jsonData.result.data[2].trait.traitDbId).to.eql(\"15110\");",
											"        pm.expect(jsonData.result.data[2].trait.traitName).to.eql(\"Grain size\");",
											"        pm.expect(jsonData.result.data[2].trait.xref).to.eql(\"null\");",
											"        pm.expect(jsonData.result.data[2].trait.ontologyReference.documentationLinks[0].type).to.eql(\"WEBPAGE\");",
											"        pm.expect(jsonData.result.data[2].trait.ontologyReference.documentationLinks[0].url).to.eql(\"https://cropontology.org\");",
											"        pm.expect(jsonData.result.data[2].trait.ontologyReference.ontologyDbId).to.eql(\"null\");",
											"        pm.expect(jsonData.result.data[2].trait.ontologyReference.ontologyName).to.eql(\"Grain size\");",
											"        pm.expect(jsonData.result.data[2].trait.ontologyReference.version).to.eql(null);",
											"});",
											"",
											"pm.test(\"Verify returned observationVariableName (Grain_size) method details\", function () {",
											"    pm.expect(jsonData.result.data[2].method.class).to.eql(null);",
											"    pm.expect(jsonData.result.data[2].method.description).to.eql(\"Weigh 1000 dry grains\");",
											"    pm.expect(jsonData.result.data[2].method.formula).to.eql(\"null\");",
											"    pm.expect(jsonData.result.data[2].method.methodDbId).to.eql(\"16070\");",
											"    pm.expect(jsonData.result.data[2].method.methodName).to.eql(\"Weigh 1000 dry grains\");",
											"    pm.expect(jsonData.result.data[2].method.name).to.eql(\"Weigh 1000 dry grains\");",
											"    pm.expect(jsonData.result.data[2].method.reference).to.eql(null);",
											"    pm.expect(jsonData.result.data[2].method.ontologyReference.documentationLinks[0].type).to.eql(\"WEBPAGE\");",
											"    pm.expect(jsonData.result.data[2].method.ontologyReference.documentationLinks[0].url).to.eql(\"https://cropontology.org\");",
											"    pm.expect(jsonData.result.data[2].method.ontologyReference.ontologyDbId).to.eql(null);",
											"    pm.expect(jsonData.result.data[2].method.ontologyReference.ontologyName).to.eql(\"Weigh 1000 dry grains\");pm.expect(jsonData.result.data[2].method.ontologyReference.version).to.eql(null);",
											"});",
											"pm.test(\"Verify returned trialName\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.result.trialName).to.eql(\"Randomized Trial 20180003\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b6d6ac3b-379f-42a8-bde2-6b1989290962",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/studies/{{studyDbId}}/observationvariables?page=0&pageSize=10000",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"studies",
										"{{studyDbId}}",
										"observationvariables"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "10000"
										}
									]
								},
								"description": "GET /{crop}​/brapi​/v1​/studies​/{studyDbId}​/observationvariables"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered pageSize greater than max",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3051916a-2d56-4d89-8683-a0527f772a28",
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"",
											"pm.test(\"Verify returned error message\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.errors[0].message).to.eql(\"Page size must between 1 and 10000.\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "43637207-f8ce-42a5-8a6a-0935a1c82e60",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/studies/{{studyDbId}}/observationvariables?page=0&pageSize=10001",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"studies",
										"{{studyDbId}}",
										"observationvariables"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "10001"
										}
									]
								},
								"description": "GET /{crop}​/brapi​/v1​/studies​/{studyDbId}​/observationvariables"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered non-existing studyDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a645d6d5-bd78-407a-8880-d27581620cfa",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Verify returned error message\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"The requested object studyDbId is not found.\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "915cf552-ce82-4f1d-a5c2-f98cad353a0e",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/studies/{{non_existing_study_id}}/observationvariables",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"studies",
										"{{non_existing_study_id}}",
										"observationvariables"
									]
								},
								"description": "GET /{crop}​/brapi​/v1​/studies​/{studyDbId}​/observationvariables"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "GET ​/{crop}​/brapi​/v1​/studies​/{studyDbId}​/observationunits",
					"item": [
						{
							"name": "Verify response code and body when entered valid studyDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "88bf7d54-faf0-44dd-a79d-71bc81e9a973",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"var data = jsonData.result.data[0];",
											"pm.test(\"Verify returned metadata\", function () {",
											"",
											"    pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											"    pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											"    pm.expect(jsonData.metadata.pagination.totalCount).to.eql(140);",
											"    pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											"    pm.expect(jsonData.metadata.status).to.eql([]);",
											"    pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"//Verify returned data of the first obs unit",
											"pm.test(\"Check observationUnitDbId\", function () {",
											"    pm.expect(data.observationUnitDbId).to.eql(\"PKWDPtLOzD8Sz\");",
											"});",
											"pm.test(\"Check observationUnitName\", function () {",
											"    pm.expect(data.observationUnitName).to.eql(\"PLOT1\");",
											"});",
											"pm.test(\"Check observationLevel\", function () {",
											"    pm.expect(data.observationLevel).to.eql(\"PLOT\");",
											"});",
											"pm.test(\"Check observationLevels\", function () {",
											"    pm.expect(data.observationLevels).to.eql(\"1\");",
											"});",
											"pm.test(\"Check plotNumber\", function () {",
											"    pm.expect(data.plotNumber).to.eql(\"1\");",
											"});",
											"pm.test(\"Check plantNumber\", function () {",
											"    pm.expect(data.plantNumber).to.eql(null);",
											"});",
											"pm.test(\"Check blockNumber\", function () {",
											"    pm.expect(data.blockNumber).to.eql(null);",
											"});",
											"pm.test(\"Check replicate\", function () {",
											"    pm.expect(data.replicate).to.eql(null);",
											"});",
											"pm.test(\"Check germplasmDbId\", function () {",
											"    pm.expect(data.germplasmDbId).to.eql(\"21\");",
											"});",
											"pm.test(\"Check germplasmName\", function () {",
											"    pm.expect(data.germplasmName).to.eql(\"GP1\");",
											"});",
											"pm.test(\"Check studyDbId\", function () {",
											"    pm.expect(data.studyDbId).to.eql(\"1\");",
											"});",
											"pm.test(\"Check studyName\", function () {",
											"    pm.expect(data.studyName).to.eql(\"Study with Imported Cross Nursery 2018002_1\");",
											"});",
											"pm.test(\"Check studyLocationDbId\", function () {",
											"    pm.expect(data.studyLocationDbId).to.eql(\"9001\");",
											"});",
											"pm.test(\"Check studyLocation\", function () {",
											"    pm.expect(data.studyLocation).to.eql(\"Africa Rice Centre\");",
											"});",
											"pm.test(\"Check programName\", function () {",
											"    pm.expect(data.programName).to.eql(\"API Program\");",
											"});",
											"pm.test(\"Check x\", function () {",
											"    pm.expect(data.x).to.eql(\"1\");",
											"});",
											"pm.test(\"Check y\", function () {",
											"    pm.expect(data.y).to.eql(\"1\");",
											"});",
											"pm.test(\"Check entryType\", function () {",
											"    pm.expect(data.entryType).to.eql(\"Test entry\");",
											"});",
											"pm.test(\"Check entryNumber\", function () {",
											"    pm.expect(data.entryNumber).to.eql(\"1\");",
											"});",
											"//Check first observation   ",
											"pm.test(\"Check observations\", function () {",
											"    var observation = data.observations[0];",
											"    pm.expect(observation.observationDbId).to.eql(\"1424\");",
											"    pm.expect(observation.observationVariableDbId).to.eql(\"18100\");",
											"    pm.expect(observation.observationVariableName).to.eql(\"WeedPressure_number\");",
											"    pm.expect(observation.observationTimeStamp).to.eql(\"2018-10-29T08:43:07.000Z\");",
											"    pm.expect(observation.season).to.eql(null);",
											"    pm.expect(observation.collector).to.eql(\"\");",
											"    pm.expect(observation.value).to.eql(\"21\");",
											"});",
											"pm.test(\"Check instanceNumber\", function () {",
											"    pm.expect(data.instanceNumber).to.eql(\"1\");",
											"});",
											"pm.test(\"Check positionCoordinateX\", function () {",
											"    pm.expect(data.positionCoordinateX).to.eql(\"1\");",
											"});",
											"pm.test(\"Check positionCoordinateY\", function () {",
											"    pm.expect(data.positionCoordinateY).to.eql(\"1\");",
											"});",
											"pm.test(\"Check observationUnitXRef\", function () {",
											"    pm.expect(data.observationUnitXRef).to.eql(null);",
											"});",
											"pm.test(\"Check programDbId\", function () {",
											"    pm.expect(data.programDbId).to.eql(pm.environment.get(\"api_program_id\"));",
											"});",
											"pm.test(\"Check treatments\", function () {",
											"    pm.expect(data.treatments).to.eql([]);",
											"});",
											"pm.test(\"Check trialDbId\", function () {",
											"    pm.expect(data.trialDbId).to.eql(\"3009\");",
											"});",
											"pm.test(\"Check trialName\", function () {",
											"    pm.expect(data.trialName).to.eql(\"Study with Imported Cross Nursery 2018002\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "908d97ce-cba4-4376-a02a-3782013cacd8",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/studies/{{nursery1StudyDbId}}/observationunits",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"studies",
										"{{nursery1StudyDbId}}",
										"observationunits"
									]
								},
								"description": "GET ​/{crop}​/brapi​/v1​/studies​/{studyDbId}​/observationunits"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered non-existing studyDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aacaa090-1bd4-427a-b85c-af7ae7c84564",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Verify returned body\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.errors[0].message).to.eql(\"StudyDbId does not exist\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "817b55a5-748a-4453-b3ab-2e74f021fbb9",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/studies/{{non_existing_study_id}}/observationunits",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"studies",
										"{{non_existing_study_id}}",
										"observationunits"
									]
								},
								"description": "GET ​/{crop}​/brapi​/v1​/studies​/{studyDbId}​/observationunits"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered plot observationLevel",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cce94868-9aea-4624-8bdb-73535fe0a7b7",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(20);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"",
											"pm.test(\"Verify returned data of the first obs unit\", function () {",
											"    var jsonData = pm.response.json();",
											"     pm.expect(jsonData.result.data[0].observationUnitDbId).to.eql(\"PKWDPtLOzD8Sz\");",
											"     pm.expect(jsonData.result.data[0].observationUnitName).to.eql(\"PLOT1\");",
											"     pm.expect(jsonData.result.data[0].observationLevel).to.eql(\"PLOT\");",
											"     pm.expect(jsonData.result.data[0].plotNumber).to.eql(\"1\");",
											"     pm.expect(jsonData.result.data[0].plantNumber).to.eql(null);",
											"     pm.expect(jsonData.result.data[0].blockNumber).to.eql(null);",
											"     pm.expect(jsonData.result.data[0].replicate).to.eql(null);",
											"     pm.expect(jsonData.result.data[0].germplasmDbId).to.eql(\"21\");",
											"     pm.expect(jsonData.result.data[0].germplasmName).to.eql(\"GP1\");",
											"     pm.expect(jsonData.result.data[0].studyDbId).to.eql(\"1\");",
											"     pm.expect(jsonData.result.data[0].studyName).to.eql(\"Study with Imported Cross Nursery 2018002_1\");",
											"     pm.expect(jsonData.result.data[0].programName).to.eql(\"API Program\");",
											"     pm.expect(jsonData.result.data[0].entryType).to.eql(\"Test entry\");",
											"     pm.expect(jsonData.result.data[0].entryNumber).to.eql(\"1\");",
											"     ",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e76d885e-1f44-4c78-85a8-9f52dfbd5777",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/studies/{{nursery1StudyDbId}}/observationunits?observationLevel=PLOT",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"studies",
										"{{nursery1StudyDbId}}",
										"observationunits"
									],
									"query": [
										{
											"key": "observationLevel",
											"value": "PLOT"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v1​/studies​/{studyDbId}​/observationunits"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered plant observationLevel",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a544e6b7-83d8-46bb-bd70-64a60fde2be2",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(40);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"",
											"pm.test(\"Verify returned data of the first obs unit\", function () {",
											"    var jsonData = pm.response.json();",
											"     pm.expect(jsonData.result.data[0].observationUnitDbId).to.eql(\"2a664296-3d7e-459d-ad77-87a7d5dae8c5\");",
											"     pm.expect(jsonData.result.data[0].observationUnitName).to.eql(null);",
											"     pm.expect(jsonData.result.data[0].observationLevel).to.eql(\"PLANT\");",
											"     pm.expect(jsonData.result.data[0].plotNumber).to.eql(null);",
											"     pm.expect(jsonData.result.data[0].plantNumber).to.eql(null);",
											"     pm.expect(jsonData.result.data[0].blockNumber).to.eql(null);",
											"     pm.expect(jsonData.result.data[0].replicate).to.eql(null);",
											"     pm.expect(jsonData.result.data[0].germplasmDbId).to.eql(\"21\");",
											"     pm.expect(jsonData.result.data[0].germplasmName).to.eql(\"GP1\");",
											"     pm.expect(jsonData.result.data[0].studyDbId).to.eql(\"1\");",
											"     pm.expect(jsonData.result.data[0].studyName).to.eql(\"Study with Imported Cross Nursery 2018002_1\");",
											"     pm.expect(jsonData.result.data[0].programName).to.eql(\"API Program\");",
											"     pm.expect(jsonData.result.data[0].entryType).to.eql(\"Test entry\");",
											"     pm.expect(jsonData.result.data[0].entryNumber).to.eql(\"1\");",
											"     ",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "56ec11ad-b099-439d-a367-2d013e304f7b",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/studies/{{nursery1StudyDbId}}/observationunits?observationLevel=PLANT",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"studies",
										"{{nursery1StudyDbId}}",
										"observationunits"
									],
									"query": [
										{
											"key": "observationLevel",
											"value": "PLANT"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v1​/studies​/{studyDbId}​/observationunits"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered quadrat observationLevel",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f967570f-69e7-4499-9d72-3158e399733b",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(80);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"",
											"pm.test(\"Verify returned data of the first obs unit\", function () {",
											"    var jsonData = pm.response.json();",
											"     pm.expect(jsonData.result.data[0].observationUnitDbId).to.eql(\"0b261507-54ce-4713-b3f2-709736761734\");",
											"     pm.expect(jsonData.result.data[0].observationUnitName).to.eql(null);",
											"     pm.expect(jsonData.result.data[0].observationLevel).to.eql(\"QUADRAT\");",
											"     pm.expect(jsonData.result.data[0].plotNumber).to.eql(null);",
											"     pm.expect(jsonData.result.data[0].plantNumber).to.eql(null);",
											"     pm.expect(jsonData.result.data[0].blockNumber).to.eql(null);",
											"     pm.expect(jsonData.result.data[0].replicate).to.eql(null);",
											"     pm.expect(jsonData.result.data[0].germplasmDbId).to.eql(\"21\");",
											"     pm.expect(jsonData.result.data[0].germplasmName).to.eql(\"GP1\");",
											"     pm.expect(jsonData.result.data[0].studyDbId).to.eql(\"1\");",
											"     pm.expect(jsonData.result.data[0].studyName).to.eql(\"Study with Imported Cross Nursery 2018002_1\");",
											"     pm.expect(jsonData.result.data[0].programName).to.eql(\"API Program\");",
											"     pm.expect(jsonData.result.data[0].entryType).to.eql(\"Test entry\");",
											"     pm.expect(jsonData.result.data[0].entryNumber).to.eql(\"1\");",
											"     ",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "727a6508-0186-45d7-b7bd-d7f8c1cebb93",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/studies/{{nursery1StudyDbId}}/observationunits?observationLevel=QUADRAT",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"studies",
										"{{nursery1StudyDbId}}",
										"observationunits"
									],
									"query": [
										{
											"key": "observationLevel",
											"value": "QUADRAT"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v1​/studies​/{studyDbId}​/observationunits"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid observationLevel",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "be1c9804-b81d-4aa0-8d06-e3c765225308",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(0);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"",
											"pm.test(\"Verify returned result\", function () {",
											"    var jsonData = pm.response.json();",
											"     pm.expect(jsonData.result.data).to.eql([]);",
											"     ",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "8d4354f5-5285-4c6c-8f77-046f72e395da",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/studies/{{nursery1StudyDbId}}/observationunits?observationLevel=INVALID",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"studies",
										"{{nursery1StudyDbId}}",
										"observationunits"
									],
									"query": [
										{
											"key": "observationLevel",
											"value": "INVALID"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v1​/studies​/{studyDbId}​/observationunits"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered pagination details",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f1eaaa5e-7270-41a4-a43e-f254ff4c2327",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(10000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(140);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Verify returned data of the first obs unit\", function () {",
											"    var jsonData = pm.response.json();",
											"     pm.expect(jsonData.result.data[0].observationUnitDbId).to.eql(\"PKWDPtLOzD8Sz\");",
											"     pm.expect(jsonData.result.data[0].observationUnitName).to.eql(\"PLOT1\");",
											"     pm.expect(jsonData.result.data[0].observationLevel).to.eql(\"PLOT\");",
											"     pm.expect(jsonData.result.data[0].plotNumber).to.eql(\"1\");",
											"     pm.expect(jsonData.result.data[0].plantNumber).to.eql(null);",
											"     pm.expect(jsonData.result.data[0].blockNumber).to.eql(null);",
											"     pm.expect(jsonData.result.data[0].replicate).to.eql(null);",
											"     pm.expect(jsonData.result.data[0].germplasmDbId).to.eql(\"21\");",
											"     pm.expect(jsonData.result.data[0].germplasmName).to.eql(\"GP1\");",
											"     pm.expect(jsonData.result.data[0].studyDbId).to.eql(\"1\");",
											"     pm.expect(jsonData.result.data[0].studyName).to.eql(\"Study with Imported Cross Nursery 2018002_1\");",
											"     pm.expect(jsonData.result.data[0].programName).to.eql(\"API Program\");",
											"     pm.expect(jsonData.result.data[0].entryType).to.eql(\"Test entry\");",
											"     pm.expect(jsonData.result.data[0].entryNumber).to.eql(\"1\");",
											"     ",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "060156f0-ab18-47a0-a778-a4a18b543b93",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/studies/{{nursery1StudyDbId}}/observationunits?page=0&pageSize=10000",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"studies",
										"{{nursery1StudyDbId}}",
										"observationunits"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "10000"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v1​/studies​/{studyDbId}​/observationunits"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered pageSize greater than max",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c1f0e37a-a65b-46f0-bd2c-3899b71e5bae",
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"",
											"pm.test(\"Verify returned error message\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.errors[0].message).to.eql(\"Page size must between 1 and 10000.\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9f00d203-20d7-49d2-8dc2-62b4cd675a4e",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/studies/{{nursery1StudyDbId}}/observationunits?page=0&pageSize=10001",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"studies",
										"{{nursery1StudyDbId}}",
										"observationunits"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "10001"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v1​/studies​/{studyDbId}​/observationunits"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "PUT ​/{crop}​/brapi​/v1​/studies​/{studyDbId}​/observations",
					"item": [
						{
							"name": "Verify response code and body when entered valid inputs for numeric trait",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6471ac3a-911b-4aed-bd07-ffd70509ac80",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"pm.test(\"Verify returned metadata\", function () {",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(0);",
											" pm.expect(jsonData.metadata.status[0][\"ignored-fields\"]).to.eql(\"collector, observationDbId, observationTimeStamp\");",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Verify returned collector\", function () {",
											" pm.expect(jsonData.result.observations[0].collector).to.eql(\"admin\");",
											"});",
											"pm.test(\"Verify returned observationDbId\", function () {",
											" pm.expect(jsonData.result.observations[0].observationDbId).to.eql(JSON.parse(pm.environment.get(\"study6_observationDbId_weed\")));",
											"});",
											"",
											"pm.test(\"Verify returned observationUnitDbId\", function () {",
											" pm.expect(jsonData.result.observations[0].observationUnitDbId).to.eql(pm.environment.get(\"study6_obs_unit_id\"));",
											"});",
											"",
											"pm.test(\"Verify returned observationVariableDbId\", function () {",
											" pm.expect(jsonData.result.observations[0].observationVariableDbId).to.eql(JSON.parse(pm.environment.get(\"study_weedPressure_cvterm_id\")));",
											"});",
											"",
											"pm.test(\"Verify returned value\", function () {",
											" pm.expect(jsonData.result.observations[0].value).to.eql(\"1000\");",
											"});",
											"",
											"pm.test(\"Verify returned observationTimeStamp\", function () {",
											" pm.expect(jsonData.result.observations[0].observationTimeStamp).to.eql(\"2020-04-27T07:39:11.000Z\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "bdc9e050-0799-4e69-9ce1-7e39b9d69d7b",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"observations\": [\r\n    {\r\n      \"collector\": \"admin\",\r\n      \"observationDbId\": {{study6_observationDbId_weed}},\r\n      \"observationTimeStamp\": \"2020-04-27T07:39:11.000Z\",\r\n      \"observationUnitDbId\": \"{{study6_obs_unit_id}}\",\r\n      \"observationVariableDbId\": {{study_weedPressure_cvterm_id}},\r\n      \"value\": \"1000\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/studies/{{study6_studyDbId}}/observations",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"studies",
										"{{study6_studyDbId}}",
										"observations"
									]
								},
								"description": "PUT /{crop}​/brapi​/v1​/studies​/{studyDbId}​/observations"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered valid inputs for categorical trait",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "518f8be6-729c-4848-a17e-5a85471cc9f1",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"pm.test(\"Verify returned metadata\", function () {",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(0);",
											" pm.expect(jsonData.metadata.status[0][\"ignored-fields\"]).to.eql(\"collector, observationDbId, observationTimeStamp\");",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Verify returned collector\", function () {",
											" pm.expect(jsonData.result.observations[0].collector).to.eql(\"admin\");",
											"});",
											"pm.test(\"Verify returned observationDbId\", function () {",
											" pm.expect(jsonData.result.observations[0].observationDbId).to.eql(JSON.parse(pm.environment.get(\"study6_observationDbId_dispressure\")));",
											"});",
											"",
											"pm.test(\"Verify returned observationUnitDbId\", function () {",
											" pm.expect(jsonData.result.observations[0].observationUnitDbId).to.eql(pm.environment.get(\"study6_obs_unit_id\"));",
											"});",
											"",
											"pm.test(\"Verify returned observationVariableDbId\", function () {",
											" pm.expect(jsonData.result.observations[0].observationVariableDbId).to.eql(JSON.parse(pm.environment.get(\"DisPressure_0_9_cvtermId\")));",
											"});",
											"",
											"pm.test(\"Verify returned value\", function () {",
											" pm.expect(jsonData.result.observations[0].value).to.eql(\"1\");",
											"});",
											"",
											"pm.test(\"Verify returned observationTimeStamp\", function () {",
											" pm.expect(jsonData.result.observations[0].observationTimeStamp).to.eql(\"2020-04-27T07:39:11.000Z\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "cf782c6b-24b8-4ca6-94d6-7606160873c9",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"observations\": [\r\n    {\r\n      \"collector\": \"admin\",\r\n      \"observationDbId\": {{study6_observationDbId_dispressure}},\r\n      \"observationTimeStamp\": \"2020-04-27T07:39:11.000Z\",\r\n      \"observationUnitDbId\": \"{{study6_obs_unit_id}}\",\r\n      \"observationVariableDbId\": {{DisPressure_0_9_cvtermId}},\r\n      \"categoricalValueId\": 19030,\r\n      \"value\": \"1\"\r\n    }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/studies/{{study6_studyDbId}}/observations",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"studies",
										"{{study6_studyDbId}}",
										"observations"
									]
								},
								"description": "PUT /{crop}​/brapi​/v1​/studies​/{studyDbId}​/observations"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered valid inputs for date trait",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8f7aed84-6134-43e7-b4ae-455244f1e6a8",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"pm.test(\"Verify returned metadata\", function () {",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(0);",
											" pm.expect(jsonData.metadata.status[0][\"ignored-fields\"]).to.eql(\"collector, observationDbId, observationTimeStamp\");",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Verify returned collector\", function () {",
											" pm.expect(jsonData.result.observations[0].collector).to.eql(\"admin\");",
											"});",
											"pm.test(\"Verify returned observationDbId\", function () {",
											" pm.expect(jsonData.result.observations[0].observationDbId).to.eql(JSON.parse(pm.environment.get(\"study6_observationDbId_germitest\")));",
											"});",
											"",
											"pm.test(\"Verify returned observationUnitDbId\", function () {",
											" pm.expect(jsonData.result.observations[0].observationUnitDbId).to.eql(pm.environment.get(\"study6_obs_unit_id\"));",
											"});",
											"",
											"pm.test(\"Verify returned observationVariableDbId\", function () {",
											" pm.expect(jsonData.result.observations[0].observationVariableDbId).to.eql(JSON.parse(pm.environment.get(\"germitest_date_cvtermId\")));",
											"});",
											"",
											"pm.test(\"Verify returned value\", function () {",
											" pm.expect(jsonData.result.observations[0].value).to.eql(\"2020-04-20\");",
											"});",
											"",
											"pm.test(\"Verify returned observationTimeStamp\", function () {",
											" pm.expect(jsonData.result.observations[0].observationTimeStamp).to.eql(\"2020-04-27T07:39:11.000Z\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c22cc61d-894e-48f8-b58d-119dcdac6130",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"observations\": [\r\n    {\r\n      \"collector\": \"admin\",\r\n      \"observationDbId\": {{study6_observationDbId_germitest}},\r\n      \"observationTimeStamp\": \"2020-04-27T07:39:11.000Z\",\r\n      \"observationUnitDbId\": \"{{study6_obs_unit_id}}\",\r\n      \"observationVariableDbId\": {{germitest_date_cvtermId}},\r\n      \"value\": \"2020-04-20\"\r\n    }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/studies/{{study6_studyDbId}}/observations",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"studies",
										"{{study6_studyDbId}}",
										"observations"
									]
								},
								"description": "PUT /{crop}​/brapi​/v1​/studies​/{studyDbId}​/observations"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered valid inputs for character trait",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "19b6c306-f58d-4b4d-928c-0662df03c2dd",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"pm.test(\"Verify returned metadata\", function () {",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(0);",
											" pm.expect(jsonData.metadata.status[0][\"ignored-fields\"]).to.eql(\"collector, observationDbId, observationTimeStamp\");",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Verify returned collector\", function () {",
											" pm.expect(jsonData.result.observations[0].collector).to.eql(\"admin\");",
											"});",
											"pm.test(\"Verify returned observationDbId\", function () {",
											" pm.expect(jsonData.result.observations[0].observationDbId).to.eql(JSON.parse(pm.environment.get(\"study6_observationDbId_note\")));",
											"});",
											"",
											"pm.test(\"Verify returned observationUnitDbId\", function () {",
											" pm.expect(jsonData.result.observations[0].observationUnitDbId).to.eql(pm.environment.get(\"study6_obs_unit_id\"));",
											"});",
											"",
											"pm.test(\"Verify returned observationVariableDbId\", function () {",
											" pm.expect(jsonData.result.observations[0].observationVariableDbId).to.eql(JSON.parse(pm.environment.get(\"notes_cvtermId\")));",
											"});",
											"",
											"pm.test(\"Verify returned value\", function () {",
											" pm.expect(jsonData.result.observations[0].value).to.eql(\"This is a test note\");",
											"});",
											"",
											"pm.test(\"Verify returned observationTimeStamp\", function () {",
											" pm.expect(jsonData.result.observations[0].observationTimeStamp).to.eql(\"2020-04-27T07:39:11.000Z\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2fdd6474-7363-46ce-9bbf-066197d00d7f",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"observations\": [\r\n    {\r\n      \"collector\": \"admin\",\r\n      \"observationDbId\": {{study6_observationDbId_note}},\r\n      \"observationTimeStamp\": \"2020-04-27T07:39:11.000Z\",\r\n      \"observationUnitDbId\": \"{{study6_obs_unit_id}}\",\r\n      \"observationVariableDbId\": {{notes_cvtermId}},\r\n      \"value\": \"This is a test note\"\r\n    }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/studies/{{study6_studyDbId}}/observations",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"studies",
										"{{study6_studyDbId}}",
										"observations"
									]
								},
								"description": "PUT /{crop}​/brapi​/v1​/studies​/{studyDbId}​/observations"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered valid inputs without optional values",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "572dc675-eaee-4002-ad7e-6d0c33aa1b34",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"pm.test(\"Verify returned metadata\", function () {",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(0);",
											" pm.expect(jsonData.metadata.status[0][\"ignored-fields\"]).to.eql(\"collector, observationDbId, observationTimeStamp\");",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Verify returned collector\", function () {",
											" pm.expect(jsonData.result.observations[0].collector).to.eql(null);",
											"});",
											"pm.test(\"Verify returned observationDbId\", function () {",
											" pm.expect(jsonData.result.observations[0].observationDbId).to.eql(JSON.parse(pm.environment.get(\"study6_observationDbId_weed\")));",
											"});",
											"",
											"pm.test(\"Verify returned observationUnitDbId\", function () {",
											" pm.expect(jsonData.result.observations[0].observationUnitDbId).to.eql(pm.environment.get(\"study6_obs_unit_id\"));",
											"});",
											"",
											"pm.test(\"Verify returned observationVariableDbId\", function () {",
											" pm.expect(jsonData.result.observations[0].observationVariableDbId).to.eql(JSON.parse(pm.environment.get(\"study_weedPressure_cvterm_id\")));",
											"});",
											"",
											"pm.test(\"Verify returned value\", function () {",
											" pm.expect(jsonData.result.observations[0].value).to.eql(\"1001\");",
											"});",
											"",
											"pm.test(\"Verify returned observationTimeStamp\", function () {",
											" pm.expect(jsonData.result.observations[0].observationTimeStamp).to.eql(null);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "85a9baa1-7fe3-47fb-b2ec-a08aa09c4c34",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"observations\": [\r\n    {\r\n      \"observationUnitDbId\": \"{{study6_obs_unit_id}}\",\r\n      \"observationVariableDbId\": {{study_weedPressure_cvterm_id}},\r\n      \"value\": \"1001\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/studies/{{study6_studyDbId}}/observations",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"studies",
										"{{study6_studyDbId}}",
										"observations"
									]
								},
								"description": "PUT /{crop}​/brapi​/v1​/studies​/{studyDbId}​/observations"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "observation-resource-brapi",
			"item": [
				{
					"name": "GET /{crop}/brapi/v1/observationLevels",
					"item": [
						{
							"name": "Verify response code and body when entered valid crop name",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "98c3bbb1-75b6-42c0-a17f-88da7df3233c",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "9b7a6e24-e54b-4fcd-ac71-71f64aad739a",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify returned observation levels\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0]).to.eql(\"MEANS\");",
											"    pm.expect(jsonData.result.data[1]).to.eql(\"PLOT\");",
											"    pm.expect(jsonData.result.data[2]).to.eql(\"PLANT\");",
											"    pm.expect(jsonData.result.data[3]).to.eql(\"QUADRAT\");",
											"    pm.expect(jsonData.result.data[4]).to.eql(\"TIMESERIES\");",
											"    pm.expect(jsonData.result.data[5]).to.eql(\"CUSTOM\");",
											"   ",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/observationLevels",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"observationLevels"
									]
								},
								"description": "GET /{crop}/brapi/v1/observationLevels"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered page number and page size aside from required parameters",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "f0e7a23c-2732-437e-9b28-93e9bc1f8609",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "2823279a-327d-4bae-a2c0-998a8ab37ec2",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify returned pagination\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											"    pm.expect(jsonData.metadata.pagination.pageSize).to.eql(3);",
											"   ",
											"});",
											"pm.test(\"Verify returned observation levels\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0]).to.eql(\"MEANS\");",
											"    pm.expect(jsonData.result.data[1]).to.eql(\"PLOT\");",
											"    pm.expect(jsonData.result.data[2]).to.eql(\"PLANT\");",
											"   ",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/observationLevels?page=0&pageSize=3",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"observationLevels"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "3"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/observationLevels"
							},
							"response": []
						},
						{
							"name": "Verify if user can invoke the call using 10000 as page size",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "c3d2d6e8-0a7e-47f8-aa86-9c8587dcf588",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "51dd1de0-89cb-4a2c-a547-d613fe27673a",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify returned pagination\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											"    pm.expect(jsonData.metadata.pagination.pageSize).to.eql(10000);",
											"   ",
											"});",
											"pm.test(\"Verify returned observation levels\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data[0]).to.eql(\"MEANS\");",
											"    pm.expect(jsonData.result.data[1]).to.eql(\"PLOT\");",
											"    pm.expect(jsonData.result.data[2]).to.eql(\"PLANT\");",
											"    pm.expect(jsonData.result.data[3]).to.eql(\"QUADRAT\");",
											"    pm.expect(jsonData.result.data[4]).to.eql(\"TIMESERIES\");",
											"    pm.expect(jsonData.result.data[5]).to.eql(\"CUSTOM\");",
											"   ",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/observationLevels?page=0&pageSize=10000",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"observationLevels"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "10000"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/observationLevels"
							},
							"response": []
						},
						{
							"name": "Verify if user can invoke the call using page size that is greater than 10000",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "626c4235-7a81-4675-8109-d14e408b9d8f",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "9d0d047c-2db0-4fd6-8696-7bd41a07ae5d",
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"",
											"pm.test(\"Verify returned error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Page size must between 1 and 10000.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/observationLevels?page=0&pageSize=10001",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"observationLevels"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "10001"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/observationLevels"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered string input to  page number",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "2a97aa56-5266-4054-b2e5-6ad6f603550f",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "8af15ba3-8eab-4550-920d-cc2f64536a43",
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"pm.test(\"Verify error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"For input string: \\\"asd\\\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/observationLevels?page={{string_input}}&pageSize=3",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"observationLevels"
									],
									"query": [
										{
											"key": "page",
											"value": "{{string_input}}"
										},
										{
											"key": "pageSize",
											"value": "3"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/observationLevels"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered string input to  pageSize",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "dbf5780b-9604-48a5-9eae-21046a376d5f",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "20565c36-824f-4d77-a5c3-9efce4db47df",
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"pm.test(\"Verify error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"For input string: \\\"asd\\\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/observationLevels?page=0&pageSize={{string_input}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"observationLevels"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "{{string_input}}"
										}
									]
								},
								"description": "GET /{crop}/brapi/v1/observationLevels"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "variable-resource-brapi",
			"item": [
				{
					"name": "Verify response code and body when entered valid crop",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e2451f39-0629-481d-986f-2f17e7854e3b",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Verify returned metadata\", function () {",
									"    var jsonData = pm.response.json();",
									" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
									" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
									" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(25);",
									" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
									" pm.expect(jsonData.metadata.status).to.eql([]);",
									" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
									"});",
									"",
									"pm.test(\"Verify returned variable (NOTES)\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.result.data[0].crop).to.eql(\"testdata\");",
									"    pm.expect(jsonData.result.data[0].date).to.eql(null);",
									"    pm.expect(jsonData.result.data[0].defaultValue).to.eql(\"\");",
									"    pm.expect(jsonData.result.data[0].documentationURL).to.eql(null);",
									"    pm.expect(jsonData.result.data[0].growthStage).to.eql(null);",
									"    pm.expect(jsonData.result.data[0].institution).to.eql(null);",
									"    pm.expect(jsonData.result.data[0].language).to.eql(null);",
									"    pm.expect(jsonData.result.data[0].name).to.eql(\"NOTES\");",
									"    pm.expect(jsonData.result.data[0].observationVariableDbId).to.eql(pm.environment.get(\"study_notes_cvtermId\"));",
									"    pm.expect(jsonData.result.data[0].observationVariableName).to.eql(\"NOTES\");",
									"    pm.expect(jsonData.result.data[0].ontologyDbId).to.eql(null);",
									"    pm.expect(jsonData.result.data[0].ontologyName).to.eql(null);",
									"    pm.expect(jsonData.result.data[0].scientist).to.eql(null);",
									"    pm.expect(jsonData.result.data[0].status).to.eql(null);",
									"    pm.expect(jsonData.result.data[0].submissionTimestamp).to.eql(null);",
									"    pm.expect(jsonData.result.data[0].synonyms).to.eql([]);",
									"    pm.expect(jsonData.result.data[0].xref).to.eql(null);",
									"    ",
									"    //Verify scale details",
									"    pm.expect(jsonData.result.data[0].scale.dataType).to.eql(\"Text\");",
									"    pm.expect(jsonData.result.data[0].scale.decimalPlaces).to.eql(null);",
									"    pm.expect(jsonData.result.data[0].scale.name).to.eql(\"Text\");",
									"    pm.expect(jsonData.result.data[0].scale.scaleDbId).to.eql(\"6020\");",
									"    pm.expect(jsonData.result.data[0].scale.scaleName).to.eql(\"Text\");",
									"    pm.expect(jsonData.result.data[0].scale.xref).to.eql(null);",
									"    pm.expect(jsonData.result.data[0].scale.validValues.categories).to.eql([]);",
									"    pm.expect(jsonData.result.data[0].scale.validValues.max).to.eql(null);",
									"    pm.expect(jsonData.result.data[0].scale.validValues.min).to.eql(null);",
									"    pm.expect(jsonData.result.data[0].scale.ontologyReference.documentationLinks[0].type).to.eql(\"WEBPAGE\");",
									"    pm.expect(jsonData.result.data[0].scale.ontologyReference.documentationLinks[0].url).to.eql(\"https://cropontology.org\");",
									"    pm.expect(jsonData.result.data[0].scale.ontologyReference.ontologyDbId).to.eql(null);",
									"    pm.expect(jsonData.result.data[0].scale.ontologyReference.ontologyName).to.eql(\"Text\");",
									"    pm.expect(jsonData.result.data[0].scale.ontologyReference.version).to.eql(null);",
									"    ",
									"    //Verify trait details",
									"        pm.expect(jsonData.result.data[0].trait.attribute).to.eql(null);",
									"        pm.expect(jsonData.result.data[0].trait.class).to.eql(\"General\");",
									"        pm.expect(jsonData.result.data[0].trait.description).to.eql(\"Comment\");",
									"        pm.expect(jsonData.result.data[0].trait.entity).to.eql(null);",
									"        pm.expect(jsonData.result.data[0].trait.mainAbbreviation).to.eql(null);",
									"        pm.expect(jsonData.result.data[0].trait.name).to.eql(\"Comment\");",
									"        pm.expect(jsonData.result.data[0].trait.status).to.eql(\"Active\");",
									"        pm.expect(jsonData.result.data[0].trait.synonyms).to.eql([]);",
									"        pm.expect(jsonData.result.data[0].trait.traitDbId).to.eql(\"2065\");",
									"        pm.expect(jsonData.result.data[0].trait.traitName).to.eql(\"Comment\");",
									"        pm.expect(jsonData.result.data[0].trait.xref).to.eql(\"null\");",
									"        pm.expect(jsonData.result.data[0].trait.ontologyReference.documentationLinks[0].type).to.eql(\"WEBPAGE\");",
									"        pm.expect(jsonData.result.data[0].trait.ontologyReference.documentationLinks[0].url).to.eql(\"https://cropontology.org\");",
									"        pm.expect(jsonData.result.data[0].trait.ontologyReference.ontologyDbId).to.eql(\"null\");",
									"        pm.expect(jsonData.result.data[0].trait.ontologyReference.ontologyName).to.eql(\"Comment\");",
									"        pm.expect(jsonData.result.data[0].trait.ontologyReference.version).to.eql(null);",
									" ",
									"    //Verify method details",
									"    pm.expect(jsonData.result.data[0].method.class).to.eql(null);",
									"    pm.expect(jsonData.result.data[0].method.description).to.eql(\"Value recorded after observation\");",
									"    pm.expect(jsonData.result.data[0].method.formula).to.eql(\"null\");",
									"    pm.expect(jsonData.result.data[0].method.methodDbId).to.eql(\"4110\");",
									"    pm.expect(jsonData.result.data[0].method.methodName).to.eql(\"Observed\");",
									"    pm.expect(jsonData.result.data[0].method.name).to.eql(\"Observed\");",
									"    pm.expect(jsonData.result.data[0].method.reference).to.eql(null);",
									"    pm.expect(jsonData.result.data[0].method.ontologyReference.documentationLinks[0].type).to.eql(\"WEBPAGE\");",
									"    pm.expect(jsonData.result.data[0].method.ontologyReference.documentationLinks[0].url).to.eql(\"https://cropontology.org\");",
									"    pm.expect(jsonData.result.data[0].method.ontologyReference.ontologyDbId).to.eql(null);",
									"    pm.expect(jsonData.result.data[0].method.ontologyReference.ontologyName).to.eql(\"Observed\");pm.expect(jsonData.result.data[0].method.ontologyReference.version).to.eql(null);",
									"});",
									"   "
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "1a24eef3-665a-4c27-a054-c9a269fad9e1",
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{masterToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "X-Auth-Token",
								"type": "text",
								"value": "{{masterToken}}"
							}
						],
						"url": {
							"raw": "{{BMSurl}}/{{crop}}/brapi/v1/variables",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"{{crop}}",
								"brapi",
								"v1",
								"variables"
							]
						},
						"description": "GET ​/{crop}​/brapi​/v1​/variables"
					},
					"response": []
				},
				{
					"name": "Verify response code and body when entered pagination details",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8c8dfd70-627f-4810-83ac-4286ddb54f33",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Verify returned metadata\", function () {",
									"    var jsonData = pm.response.json();",
									" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
									" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(10000);",
									" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(25);",
									" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
									" pm.expect(jsonData.metadata.status).to.eql([]);",
									" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
									"});",
									"",
									"pm.test(\"Verify returned variable (NOTES)\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.result.data[0].crop).to.eql(\"testdata\");",
									"    pm.expect(jsonData.result.data[0].date).to.eql(null);",
									"    pm.expect(jsonData.result.data[0].defaultValue).to.eql(\"\");",
									"    pm.expect(jsonData.result.data[0].documentationURL).to.eql(null);",
									"    pm.expect(jsonData.result.data[0].growthStage).to.eql(null);",
									"    pm.expect(jsonData.result.data[0].institution).to.eql(null);",
									"    pm.expect(jsonData.result.data[0].language).to.eql(null);",
									"    pm.expect(jsonData.result.data[0].name).to.eql(\"NOTES\");",
									"    pm.expect(jsonData.result.data[0].observationVariableDbId).to.eql(pm.environment.get(\"study_notes_cvtermId\"));",
									"    pm.expect(jsonData.result.data[0].observationVariableName).to.eql(\"NOTES\");",
									"    pm.expect(jsonData.result.data[0].ontologyDbId).to.eql(null);",
									"    pm.expect(jsonData.result.data[0].ontologyName).to.eql(null);",
									"    pm.expect(jsonData.result.data[0].scientist).to.eql(null);",
									"    pm.expect(jsonData.result.data[0].status).to.eql(null);",
									"    pm.expect(jsonData.result.data[0].submissionTimestamp).to.eql(null);",
									"    pm.expect(jsonData.result.data[0].synonyms).to.eql([]);",
									"    pm.expect(jsonData.result.data[0].xref).to.eql(null);",
									"    ",
									"    //Verify scale details",
									"    pm.expect(jsonData.result.data[0].scale.dataType).to.eql(\"Text\");",
									"    pm.expect(jsonData.result.data[0].scale.decimalPlaces).to.eql(null);",
									"    pm.expect(jsonData.result.data[0].scale.name).to.eql(\"Text\");",
									"    pm.expect(jsonData.result.data[0].scale.scaleDbId).to.eql(\"6020\");",
									"    pm.expect(jsonData.result.data[0].scale.scaleName).to.eql(\"Text\");",
									"    pm.expect(jsonData.result.data[0].scale.xref).to.eql(null);",
									"    pm.expect(jsonData.result.data[0].scale.validValues.categories).to.eql([]);",
									"    pm.expect(jsonData.result.data[0].scale.validValues.max).to.eql(null);",
									"    pm.expect(jsonData.result.data[0].scale.validValues.min).to.eql(null);",
									"    pm.expect(jsonData.result.data[0].scale.ontologyReference.documentationLinks[0].type).to.eql(\"WEBPAGE\");",
									"    pm.expect(jsonData.result.data[0].scale.ontologyReference.documentationLinks[0].url).to.eql(\"https://cropontology.org\");",
									"    pm.expect(jsonData.result.data[0].scale.ontologyReference.ontologyDbId).to.eql(null);",
									"    pm.expect(jsonData.result.data[0].scale.ontologyReference.ontologyName).to.eql(\"Text\");",
									"    pm.expect(jsonData.result.data[0].scale.ontologyReference.version).to.eql(null);",
									"    ",
									"    //Verify trait details",
									"        pm.expect(jsonData.result.data[0].trait.attribute).to.eql(null);",
									"        pm.expect(jsonData.result.data[0].trait.class).to.eql(\"General\");",
									"        pm.expect(jsonData.result.data[0].trait.description).to.eql(\"Comment\");",
									"        pm.expect(jsonData.result.data[0].trait.entity).to.eql(null);",
									"        pm.expect(jsonData.result.data[0].trait.mainAbbreviation).to.eql(null);",
									"        pm.expect(jsonData.result.data[0].trait.name).to.eql(\"Comment\");",
									"        pm.expect(jsonData.result.data[0].trait.status).to.eql(\"Active\");",
									"        pm.expect(jsonData.result.data[0].trait.synonyms).to.eql([]);",
									"        pm.expect(jsonData.result.data[0].trait.traitDbId).to.eql(\"2065\");",
									"        pm.expect(jsonData.result.data[0].trait.traitName).to.eql(\"Comment\");",
									"        pm.expect(jsonData.result.data[0].trait.xref).to.eql(\"null\");",
									"        pm.expect(jsonData.result.data[0].trait.ontologyReference.documentationLinks[0].type).to.eql(\"WEBPAGE\");",
									"        pm.expect(jsonData.result.data[0].trait.ontologyReference.documentationLinks[0].url).to.eql(\"https://cropontology.org\");",
									"        pm.expect(jsonData.result.data[0].trait.ontologyReference.ontologyDbId).to.eql(\"null\");",
									"        pm.expect(jsonData.result.data[0].trait.ontologyReference.ontologyName).to.eql(\"Comment\");",
									"        pm.expect(jsonData.result.data[0].trait.ontologyReference.version).to.eql(null);",
									" ",
									"    //Verify method details",
									"    pm.expect(jsonData.result.data[0].method.class).to.eql(null);",
									"    pm.expect(jsonData.result.data[0].method.description).to.eql(\"Value recorded after observation\");",
									"    pm.expect(jsonData.result.data[0].method.formula).to.eql(\"null\");",
									"    pm.expect(jsonData.result.data[0].method.methodDbId).to.eql(\"4110\");",
									"    pm.expect(jsonData.result.data[0].method.methodName).to.eql(\"Observed\");",
									"    pm.expect(jsonData.result.data[0].method.name).to.eql(\"Observed\");",
									"    pm.expect(jsonData.result.data[0].method.reference).to.eql(null);",
									"    pm.expect(jsonData.result.data[0].method.ontologyReference.documentationLinks[0].type).to.eql(\"WEBPAGE\");",
									"    pm.expect(jsonData.result.data[0].method.ontologyReference.documentationLinks[0].url).to.eql(\"https://cropontology.org\");",
									"    pm.expect(jsonData.result.data[0].method.ontologyReference.ontologyDbId).to.eql(null);",
									"    pm.expect(jsonData.result.data[0].method.ontologyReference.ontologyName).to.eql(\"Observed\");pm.expect(jsonData.result.data[0].method.ontologyReference.version).to.eql(null);",
									"});",
									"   "
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "302f9db1-7c7f-44e2-92f2-034c198c9c51",
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{masterToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "X-Auth-Token",
								"type": "text",
								"value": "{{masterToken}}"
							}
						],
						"url": {
							"raw": "{{BMSurl}}/{{crop}}/brapi/v1/variables?page=0&pageSize=10000",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"{{crop}}",
								"brapi",
								"v1",
								"variables"
							],
							"query": [
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "pageSize",
									"value": "10000"
								}
							]
						},
						"description": "GET ​/{crop}​/brapi​/v1​/variables"
					},
					"response": []
				},
				{
					"name": "Verify response code and body when entered pageSize greater than max",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e837d6e9-5acf-4569-ab41-2df19fca181b",
								"exec": [
									"pm.test(\"Status code is 500\", function () {",
									"    pm.response.to.have.status(500);",
									"});",
									"",
									"pm.test(\"Verify returned error message\", function () {",
									"    var jsonData = pm.response.json();",
									" pm.expect(jsonData.errors[0].message).to.eql(\"Page size must between 1 and 10000.\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "a38d7f05-732d-4d58-ae7c-7398dfabbe1b",
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{masterToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "X-Auth-Token",
								"type": "text",
								"value": "{{masterToken}}"
							}
						],
						"url": {
							"raw": "{{BMSurl}}/{{crop}}/brapi/v1/variables?page=0&pageSize=10001",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"{{crop}}",
								"brapi",
								"v1",
								"variables"
							],
							"query": [
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "pageSize",
									"value": "10001"
								}
							]
						},
						"description": "GET ​/{crop}​/brapi​/v1​/variables"
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "observation-unit-resource-brapi",
			"item": [
				{
					"name": "PATCH /{crop}​/brapi​/v2​/observationunits​/{observationUnitDbId}",
					"item": [
						{
							"name": "Verify response code and body when entered valid inputs",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "32ce0c1a-f451-45b6-8596-6532f77bb297",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(0);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"pm.test(\"Verify geoCoordinates type\", function () {",
											"    pm.expect(jsonData.result.observationUnitPosition.geoCoordinates.type).to.eql(\"Feature\");",
											"});",
											"",
											"pm.test(\"Verify geometry coordinates\", function () {",
											"    pm.expect(jsonData.result.observationUnitPosition.geoCoordinates.geometry.coordinates[0]).to.eql(-76.506042);",
											"    pm.expect(jsonData.result.observationUnitPosition.geoCoordinates.geometry.coordinates[1]).to.eql(42.417373);",
											"});",
											"",
											"pm.test(\"Verify geometry type\", function () {",
											"    pm.expect(jsonData.result.observationUnitPosition.geoCoordinates.geometry.type).to.eql(\"Point\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e3311b63-0211-440f-837d-47e7744d58fd",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"observationUnitPosition\": {\r\n    \"geoCoordinates\":  {\r\n        \"geometry\": {\r\n            \"coordinates\": [\r\n                -76.506042,\r\n                42.417373\r\n            ],\r\n            \"type\": \"Point\"\r\n        },\r\n        \"type\": \"Feature\"\r\n    }\r\n  }\r\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/observationunits/{{study6_obs_unit_id}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"observationunits",
										"{{study6_obs_unit_id}}"
									]
								},
								"description": "PATCH /{crop}​/brapi​/v2​/observationunits​/{observationUnitDbId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered non-existing observationUnitDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "42db56fa-fa45-4c6d-a260-8a4790a8dcb7",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Verify error message\", function () {",
											"    var error = pm.response.json().errors[0].message;",
											"    pm.expect(error).to.eql(\"Invalid observation unit id.\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "edf0b55b-4b96-4a62-a9f4-01a4ab4081ad",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"observationUnitPosition\": {\r\n    \"geoCoordinates\":  {\r\n        \"geometry\": {\r\n            \"coordinates\": [\r\n                -76.506042,\r\n                42.417373\r\n            ],\r\n            \"type\": \"Point\"\r\n        },\r\n        \"type\": \"Feature\"\r\n    }\r\n  }\r\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/observationunits/nonExistingId",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"observationunits",
										"nonExistingId"
									]
								},
								"description": "PATCH /{crop}​/brapi​/v2​/observationunits​/{observationUnitDbId}"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "POST ​/{crop}​/brapi​/v2​/search​/observationunits",
					"item": [
						{
							"name": "Post search by germplasmDbIds",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8f5bfa3e-31af-48e1-b129-6b529c0aa9f6",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"    var jsonData = pm.response.json();",
											"    pm.environment.unset(\"searchResultDbId2_germplasmDbId\");",
											"    pm.environment.set(\"searchResultDbId2_germplasmDbId\", jsonData.result.searchResultDbId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2f8aa752-b6ec-4fe0-adf2-2afe5e57427f",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"germplasmDbIds\": [\n\t\t\"24\"\n\t]\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/search/observationunits",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"search",
										"observationunits"
									]
								},
								"description": "POST ​/{crop}​/brapi​/v2​/search​/observationunits"
							},
							"response": []
						},
						{
							"name": "Post search by locationDbIds",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e4476b0d-cb67-44c4-bda0-2609a946c5fb",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"    var jsonData = pm.response.json();",
											"    pm.environment.unset(\"searchResultDbId2_locationDbId\");",
											"    pm.environment.set(\"searchResultDbId2_locationDbId\", jsonData.result.searchResultDbId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "76eea585-5369-469b-9f1a-9431d94630bb",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"locationDbIds\": [\n\t\t\"9001\"\n\t]\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/search/observationunits",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"search",
										"observationunits"
									]
								},
								"description": "POST ​/{crop}​/brapi​/v2​/search​/observationunits"
							},
							"response": []
						},
						{
							"name": "Post search by observationLevel",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "578a53a7-8044-4dea-ac47-7022b3291319",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"    var jsonData = pm.response.json();",
											"    pm.environment.unset(\"searchResultDbId2_observationLevel\");",
											"    pm.environment.set(\"searchResultDbId2_observationLevel\", jsonData.result.searchResultDbId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "fa70eec7-0271-4098-baf0-272048501639",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"observationLevel\":\n\t\t\"PLOT\"\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/search/observationunits",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"search",
										"observationunits"
									]
								},
								"description": "POST ​/{crop}​/brapi​/v2​/search​/observationunits"
							},
							"response": []
						},
						{
							"name": "Post search by observationUnitDbIds",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9dceeb71-4b03-43e1-afa9-c09e89fce513",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"    var jsonData = pm.response.json();",
											"    pm.environment.unset(\"searchResultDbId2_observationUnitDbId\");",
											"    pm.environment.set(\"searchResultDbId2_observationUnitDbId\", jsonData.result.searchResultDbId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a5a69d90-9167-43d3-a0a7-a81ae8a914b1",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"observationUnitDbIds\":[\n\t\t\"PKWDPEV6LPs1N\"\n\t\t]\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/search/observationunits",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"search",
										"observationunits"
									]
								},
								"description": "POST ​/{crop}​/brapi​/v2​/search​/observationunits"
							},
							"response": []
						},
						{
							"name": "Post search by programDbIds",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b835903e-8858-46a8-9514-4eb98ee862a3",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"    var jsonData = pm.response.json();",
											"    pm.environment.unset(\"searchResultDbId2_programDbId\");",
											"    pm.environment.set(\"searchResultDbId2_programDbId\", jsonData.result.searchResultDbId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "6a28367e-da62-4667-abd9-1bd088aa1ec7",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"programDbIds\": [\n\t\t\"{{api_program_id}}\"\n\t]\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/search/observationunits",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"search",
										"observationunits"
									]
								},
								"description": "POST ​/{crop}​/brapi​/v2​/search​/observationunits"
							},
							"response": []
						},
						{
							"name": "Post search by studyDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bbaf209c-c1dd-4a48-8496-71d5cf4762de",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"    var jsonData = pm.response.json();",
											"    pm.environment.unset(\"searchResultDbId2_studyDbId\");",
											"    pm.environment.set(\"searchResultDbId2_studyDbId\", jsonData.result.searchResultDbId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "aa9f72dc-a712-4e00-8ad0-b5e2d03f194d",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"studyDbIds\": [\n\t\t\"{{studyDbId}}\"\n\t]\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/search/observationunits",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"search",
										"observationunits"
									]
								},
								"description": "POST ​/{crop}​/brapi​/v2​/search​/observationunits"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "GET ​/{crop}​/brapi​/v2​/search​/observationunits​/{searchResultsDbid}",
					"item": [
						{
							"name": "Verify results when entered searchResultsDbid that filters by germplasmDbIds",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "79458fe8-6450-4932-b92c-01974ecc619a",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"var data = jsonData.result.data[0];",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											"  pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											"  pm.expect(jsonData.metadata.pagination.pageSize).to.eql(10000);",
											"  pm.expect(jsonData.metadata.pagination.totalCount).to.eql(119);",
											"  pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											"  pm.expect(jsonData.metadata.status).to.eql([]);",
											"  pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Check if all data has correct germplasmDbId\", function () {",
											"  var jsonData = pm.response.json();",
											"  var dataLength = jsonData.result.data.length;",
											"",
											"  for (i = 0; i < dataLength; i++) {",
											"    var data = jsonData.result.data[i];",
											"    pm.expect(data.germplasmDbId).to.eql(\"24\");",
											"  }",
											"",
											"});    ",
											"",
											"pm.test(\"Check observationUnitDbId\", function () {",
											"    pm.expect(data.observationUnitDbId).to.eql(\"PKWDPEV6LPs1N\");",
											"});",
											"pm.test(\"Check observationUnitDbId\", function () {",
											"    pm.expect(data.observationUnitName).to.eql(\"PLOT4\");",
											"});",
											"pm.test(\"Check observationLevel\", function () {",
											"    pm.expect(data.observationLevel).to.eql(\"PLOT\");",
											"});",
											"pm.test(\"Check plotNumber\", function () {",
											"    pm.expect(data.plotNumber).to.eql(\"4\");",
											"});",
											"pm.test(\"Check plantNumber\", function () {",
											"    pm.expect(data.plantNumber).to.eql(null);",
											"});",
											"pm.test(\"Check blockNumber\", function () {",
											"    pm.expect(data.blockNumber).to.eql(null);",
											"});",
											"pm.test(\"Check replicate\", function () {",
											"    pm.expect(data.replicate).to.eql(null);",
											"});",
											"pm.test(\"Check germplasmDbId\", function () {",
											"    pm.expect(data.germplasmDbId).to.eql(\"24\");",
											"});",
											"pm.test(\"Check germplasmName\", function () {",
											"    pm.expect(data.germplasmName).to.eql(\"GP4\");",
											"});",
											"pm.test(\"Check studyDbId\", function () {",
											"    pm.expect(data.studyDbId).to.eql(\"1\");",
											"});",
											"pm.test(\"Check studyName\", function () {",
											"    pm.expect(data.studyName).to.eql(\"Study with Imported Cross Nursery 2018002_1\");",
											"});",
											"pm.test(\"Check studyLocationDbId\", function () {",
											"    pm.expect(data.studyLocationDbId).to.eql(\"9001\");",
											"});",
											"pm.test(\"Check studyLocation\", function () {",
											"    pm.expect(data.studyLocation).to.eql(\"Africa Rice Centre\");",
											"});",
											"pm.test(\"Check programName\", function () {",
											"    pm.expect(data.programName).to.eql(\"API Program\");",
											"});",
											"pm.test(\"Check entryType\", function () {",
											"    pm.expect(data.entryType).to.eql(\"Test entry\");",
											"});",
											"pm.test(\"Check entryNumber\", function () {",
											"    pm.expect(data.entryNumber).to.eql(\"4\");",
											"});",
											"pm.test(\"Check observations\", function () {",
											"    pm.expect(data.observations[0].observationVariableDbId).to.eql(\"18100\");",
											"    pm.expect(data.observations[0].observationVariableName).to.eql(\"WeedPressure_number\");",
											"    pm.expect(data.observations[0].observationTimeStamp).to.eql(\"2018-10-29T08:43:07.000Z\");",
											"    pm.expect(data.observations[0].season).to.eql(null);",
											"    pm.expect(data.observations[0].collector).to.eql(\"\");",
											"    pm.expect(data.observations[0].value).to.eql(\"46\"); ",
											"});",
											"pm.test(\"Check additionalInfo\", function () {",
											"    pm.expect(data.additionalInfo).to.eql(\"\");",
											"});",
											"pm.test(\"Check locationDbId\", function () {",
											"    pm.expect(data.locationDbId).to.eql(\"9001\");",
											"});",
											"pm.test(\"Check locationName\", function () {",
											"    pm.expect(data.locationName).to.eql(\"Africa Rice Centre\");",
											"});",
											"pm.test(\"Check observationUnitPUI\", function () {",
											"    pm.expect(data.observationUnitPUI).to.eql(\"\");",
											"});",
											"pm.test(\"Check observationUnitPosition\", function () {",
											"    pm.expect(data.observationUnitPosition.blockNumber).to.eql(null);",
											"    pm.expect(data.observationUnitPosition.entryNumber).to.eql(\"4\");",
											"    pm.expect(data.observationUnitPosition.entryType[0]).to.eql(\"Test entry\");",
											"    pm.expect(data.observationUnitPosition.geoCoordinates).to.eql(null);",
											"    pm.expect(data.observationUnitPosition.positionCoordinateX).to.eql(\"1\"); ",
											"    pm.expect(data.observationUnitPosition.positionCoordinateXType).to.eql(\"GRID_COL\"); ",
											"    pm.expect(data.observationUnitPosition.positionCoordinateY).to.eql(\"1\"); ",
											"    pm.expect(data.observationUnitPosition.positionCoordinateYType).to.eql(\"GRID_ROW\"); ",
											"    pm.expect(data.observationUnitPosition.replicate).to.eql(null); ",
											"});",
											"pm.test(\"Check observationUnitXRef\", function () {",
											"    pm.expect(data.observationUnitXRef).to.eql(null);",
											"});",
											"pm.test(\"Check programDbId\", function () {",
											"    pm.expect(data.programDbId).to.eql(pm.environment.get(\"api_program_id\"));",
											"});",
											"pm.test(\"Check treatments\", function () {",
											"    pm.expect(data.treatments).to.eql([]);",
											"});",
											"pm.test(\"Check trialDbId\", function () {",
											"    pm.expect(data.trialDbId).to.eql(\"3009\");",
											"});",
											"pm.test(\"Check trialName\", function () {",
											"    pm.expect(data.trialName).to.eql(\"Study with Imported Cross Nursery 2018002\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f824ccee-dc4b-42fe-bdf1-d52cf7448c0c",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"germplasmDbIds\": [\n\t\t\"24\",\n\t\t\"31\",\n\t\t\"33\"\n\t]\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/search/observationunits/{{searchResultDbId2_germplasmDbId}}?page=0&pageSize=10000",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"search",
										"observationunits",
										"{{searchResultDbId2_germplasmDbId}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "10000"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v2​/search​/observationunits​/{searchResultsDbid}"
							},
							"response": []
						},
						{
							"name": "Verify results when entered searchResultsDbid that filters by locationDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e666f7ba-3425-49da-bfa6-25cd0da27d68",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(10000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(1460);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Check if all data has correct locationDbId\", function () {",
											"  var jsonData = pm.response.json();",
											"  var dataLength = jsonData.result.data.length;",
											"",
											"  for (i = 0; i < dataLength ; i++) {",
											"      var data = jsonData.result.data[i];",
											"      pm.expect(data.studyLocationDbId).to.eql(\"9001\");",
											"  }",
											" ",
											"});    ",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "62edf60f-f3fd-47f6-a42e-5515dcb222f9",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"germplasmDbIds\": [\n\t\t\"24\",\n\t\t\"31\",\n\t\t\"33\"\n\t]\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/search/observationunits/{{searchResultDbId2_locationDbId}}?page=0&pageSize=10000",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"search",
										"observationunits",
										"{{searchResultDbId2_locationDbId}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "10000"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v2​/search​/observationunits​/{searchResultsDbid}"
							},
							"response": []
						},
						{
							"name": "Verify results when entered searchResultsDbid that filters by observationLevel",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f6d21d93-5d4b-4843-a438-5f48d229a2d9",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											"  pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											"  pm.expect(jsonData.metadata.pagination.pageSize).to.eql(10000);",
											"  pm.expect(jsonData.metadata.pagination.totalCount).to.eql(380);",
											"  pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											"  pm.expect(jsonData.metadata.status).to.eql([]);",
											"  pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Check if all data has correct observationLevel\", function () {",
											"  var jsonData = pm.response.json();",
											"  var dataLength = jsonData.result.data.length;",
											"",
											"  for (i = 0; i < dataLength; i++) {",
											"    var data = jsonData.result.data[i];",
											"    pm.expect(data.observationLevel).to.eql(\"PLOT\");",
											"  }",
											"",
											"});    ",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "64f56487-1284-44e9-a248-3bff91611d61",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"germplasmDbIds\": [\n\t\t\"24\",\n\t\t\"31\",\n\t\t\"33\"\n\t]\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/search/observationunits/{{searchResultDbId2_observationLevel}}?page=0&pageSize=10000",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"search",
										"observationunits",
										"{{searchResultDbId2_observationLevel}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "10000"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v2​/search​/observationunits​/{searchResultsDbid}"
							},
							"response": []
						},
						{
							"name": "Verify results when entered searchResultsDbid that filters by observationUnitDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "09635c71-1af3-4401-8f9f-31307d7cf759",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(10000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(1);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Check if all data has correct observationUnitDbId\", function () {",
											"  var jsonData = pm.response.json();",
											"  var dataLength = jsonData.result.data.length;",
											"",
											"  for (i = 0; i < dataLength ; i++) {",
											"      var data = jsonData.result.data[i];",
											"      pm.expect(data.observationUnitDbId).to.eql(\"PKWDPEV6LPs1N\");",
											"  }",
											" ",
											"});    ",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ecafc7e2-3925-4f41-a2db-52752f2ae973",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"germplasmDbIds\": [\n\t\t\"24\",\n\t\t\"31\",\n\t\t\"33\"\n\t]\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/search/observationunits/{{searchResultDbId2_observationUnitDbId}}?page=0&pageSize=10000",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"search",
										"observationunits",
										"{{searchResultDbId2_observationUnitDbId}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "10000"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v2​/search​/observationunits​/{searchResultsDbid}"
							},
							"response": []
						},
						{
							"name": "Verify results when entered searchResultsDbid that filters by programDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "89df3050-f44d-4315-be78-7e349ecdaaef",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											"  pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											"  pm.expect(jsonData.metadata.pagination.pageSize).to.eql(10000);",
											"  pm.expect(jsonData.metadata.pagination.totalCount).to.eql(2380);",
											"  pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											"  pm.expect(jsonData.metadata.status).to.eql([]);",
											"  pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Check if all data has correct programName\", function () {",
											"  var jsonData = pm.response.json();",
											"  var dataLength = jsonData.result.data.length;",
											"",
											"  for (i = 0; i < dataLength; i++) {",
											"    var data = jsonData.result.data[i];",
											"    pm.expect(data.programName).to.eql(\"API Program\");",
											"  }",
											"",
											"});    ",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "091cd60a-05c2-4920-a83a-ff660be4ae24",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"germplasmDbIds\": [\n\t\t\"24\",\n\t\t\"31\",\n\t\t\"33\"\n\t]\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/search/observationunits/{{searchResultDbId2_programDbId}}?page=0&pageSize=10000",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"search",
										"observationunits",
										"{{searchResultDbId2_programDbId}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "10000"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v2​/search​/observationunits​/{searchResultsDbid}"
							},
							"response": []
						},
						{
							"name": "Verify results when entered searchResultsDbid that filters by studyDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c3036d11-09c0-4563-ae93-57eba38e62ed",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(10000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(60);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Check if all data has correct studyDbId\", function () {",
											"  var jsonData = pm.response.json();",
											"  var dataLength = jsonData.result.data.length;",
											"",
											"  for (i = 0; i < dataLength ; i++) {",
											"      var data = jsonData.result.data[i];",
											"      pm.expect(data.studyDbId).to.eql(pm.environment.get(\"studyDbId\"));",
											"  }",
											" ",
											"});    ",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "4474431f-0b4e-4d62-82df-5c8487a79960",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"germplasmDbIds\": [\n\t\t\"24\",\n\t\t\"31\",\n\t\t\"33\"\n\t]\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/search/observationunits/{{searchResultDbId2_studyDbId}}?page=0&pageSize=10000",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"search",
										"observationunits",
										"{{searchResultDbId2_studyDbId}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "10000"
										}
									]
								},
								"description": "GET ​/{crop}​/brapi​/v2​/search​/observationunits​/{searchResultsDbid}"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "phenotype-search-resource",
			"item": [
				{
					"name": "POST ​/{crop}​/brapi​/v1​/phenotypes-search",
					"item": [
						{
							"name": "Post phenotype search by trialDbId and plot dataset level",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6539a1d7-a1cb-4f9e-b7b0-893db4279f99",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(80);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Verify returned first record\", function () {",
											"    ",
											"    var data = jsonData.result.data[0];",
											"    pm.expect(data.observationUnitDbId).to.eq(\"PKWDPivJxYgde\");",
											"    pm.expect(data.observationUnitName).to.eql(\"PLOT1\");",
											"    pm.expect(data.observationLevel).to.eql(\"PLOT\");",
											"    pm.expect(data.observationLevels).to.eql(\"1\");",
											"    pm.expect(data.plotNumber).to.eql(\"1\");",
											"    pm.expect(data.plantNumber).to.eql(null);",
											"    pm.expect(data.blockNumber).to.eql(null);",
											"    pm.expect(data.replicate).to.eql(\"1\");",
											"    pm.expect(data.germplasmDbId).to.eql(\"24\");",
											"    pm.expect(data.germplasmName).to.eql(\"GP4\");",
											"    pm.expect(data.studyDbId).to.eql(\"2\");",
											"    pm.expect(data.studyName).to.eql(\"Randomized Trial 20180003_1\");",
											"    pm.expect(data.studyLocationDbId).to.eql(\"9001\");",
											"    pm.expect(data.studyLocation).to.eql(\"Africa Rice Centre\");",
											"    pm.expect(data.programName).to.eql(\"API Program\");",
											"    pm.expect(data.x).to.eql(\"1\");",
											"    pm.expect(data.y).to.eql(\"1\");",
											"    pm.expect(data.entryType).to.eql(\"Check entry\");",
											"    pm.expect(data.entryNumber).to.eql(\"4\");",
											"    pm.expect(data.instanceNumber).to.eql(\"1\");",
											"    ",
											"    //Verify Biomas_yield observation",
											"    var observation = data.observations[0];",
											"    pm.expect(observation.observationDbId).to.eql(\"1004\");",
											"    pm.expect(observation.observationVariableDbId).to.eql(pm.environment.get(\"study_biomass_cvterm_id\"));",
											"    pm.expect(observation.observationVariableName).to.eql(\"Biomas_yield\");",
											"    pm.expect(observation.observationTimeStamp).to.eql(\"2018-10-29T03:33:44.000Z\");",
											"    pm.expect(observation.season).to.eql(null);",
											"    pm.expect(observation.collector).to.eql(\"\");",
											"    pm.expect(observation.value).to.eql(\"18\");",
											"    ",
											"    //Verify Grain_size observation",
											"    observation = data.observations[1];",
											"    pm.expect(observation.observationDbId).to.eql(\"1005\");",
											"    pm.expect(observation.observationVariableDbId).to.eql(pm.environment.get(\"grain_size_cvterm_id\"));",
											"    pm.expect(observation.observationVariableName).to.eql(\"Grain_size\");",
											"    pm.expect(observation.observationTimeStamp).to.eql(\"2018-10-29T03:33:44.000Z\");",
											"    pm.expect(observation.season).to.eql(null);",
											"    pm.expect(observation.collector).to.eql(\"\");",
											"    pm.expect(observation.value).to.eql(\"95\");",
											"    ",
											"    //Verify Grain_yield measurement",
											"    observation = data.observations[2];",
											"    pm.expect(observation.observationDbId).to.eql(\"1006\");",
											"    pm.expect(observation.observationVariableDbId).to.eql(pm.environment.get(\"study_grainYield_cvterm_id\"));",
											"    pm.expect(observation.observationVariableName).to.eql(\"Grain_yield\");",
											"    pm.expect(observation.observationTimeStamp).to.eql(\"2018-10-29T03:33:44.000Z\");",
											"    pm.expect(observation.season).to.eql(null);",
											"    pm.expect(observation.collector).to.eql(\"\");",
											"    pm.expect(observation.value).to.eql(\"4\");",
											"    ",
											"});",
											"",
											"pm.test(\"Verify returned middle record\", function () {",
											"    ",
											"    var data = jsonData.result.data[35];",
											"    pm.expect(data.observationUnitDbId).to.eq(\"PKWDP7q5Tpjea\");",
											"    pm.expect(data.observationUnitName).to.eql(\"PLOT36\");",
											"    pm.expect(data.observationLevel).to.eql(\"PLOT\");",
											"    pm.expect(data.observationLevels).to.eql(\"1\");",
											"    pm.expect(data.plotNumber).to.eql(\"36\");",
											"    pm.expect(data.plantNumber).to.eql(null);",
											"    pm.expect(data.blockNumber).to.eql(null);",
											"    pm.expect(data.replicate).to.eql(\"2\");",
											"    pm.expect(data.germplasmDbId).to.eql(\"32\");",
											"    pm.expect(data.germplasmName).to.eql(\"GP12\");",
											"    pm.expect(data.studyDbId).to.eql(\"2\");",
											"    pm.expect(data.studyName).to.eql(\"Randomized Trial 20180003_1\");",
											"    pm.expect(data.studyLocationDbId).to.eql(\"9001\");",
											"    pm.expect(data.studyLocation).to.eql(\"Africa Rice Centre\");",
											"    pm.expect(data.programName).to.eql(\"API Program\");",
											"    pm.expect(data.x).to.eql(\"1\");",
											"    pm.expect(data.y).to.eql(\"1\");",
											"    pm.expect(data.entryType).to.eql(\"Test entry\");",
											"    pm.expect(data.entryNumber).to.eql(\"12\");",
											"    pm.expect(data.instanceNumber).to.eql(\"1\");",
											"    ",
											"    //Verify Biomas_yield observation",
											"    var observation = data.observations[0];",
											"    pm.expect(observation.observationDbId).to.eql(\"1179\");",
											"    pm.expect(observation.observationVariableDbId).to.eql(pm.environment.get(\"study_biomass_cvterm_id\"));",
											"    pm.expect(observation.observationVariableName).to.eql(\"Biomas_yield\");",
											"    pm.expect(observation.observationTimeStamp).to.eql(\"2018-10-29T03:33:45.000Z\");",
											"    pm.expect(observation.season).to.eql(null);",
											"    pm.expect(observation.collector).to.eql(\"\");",
											"    pm.expect(observation.value).to.eql(\"67\");",
											"    ",
											"    //Verify Grain_size observation",
											"    observation = data.observations[1];",
											"    pm.expect(observation.observationDbId).to.eql(\"1180\");",
											"    pm.expect(observation.observationVariableDbId).to.eql(pm.environment.get(\"grain_size_cvterm_id\"));",
											"    pm.expect(observation.observationVariableName).to.eql(\"Grain_size\");",
											"    pm.expect(observation.observationTimeStamp).to.eql(\"2018-10-29T03:33:45.000Z\");",
											"    pm.expect(observation.season).to.eql(null);",
											"    pm.expect(observation.collector).to.eql(\"\");",
											"    pm.expect(observation.value).to.eql(\"100\");",
											"    ",
											"    ",
											"    //Verify Grain_yield measurement",
											"    observation = data.observations[2];",
											"    pm.expect(observation.observationDbId).to.eql(\"1181\");",
											"    pm.expect(observation.observationVariableDbId).to.eql(pm.environment.get(\"study_grainYield_cvterm_id\"));",
											"    pm.expect(observation.observationVariableName).to.eql(\"Grain_yield\");",
											"    pm.expect(observation.observationTimeStamp).to.eql(\"2018-10-29T03:33:45.000Z\");",
											"    pm.expect(observation.season).to.eql(null);",
											"    pm.expect(observation.collector).to.eql(\"\");",
											"    pm.expect(observation.value).to.eql(\"36\");",
											"    ",
											"});",
											"",
											"pm.test(\"Verify returned last record\", function () {",
											"    ",
											"    var data = jsonData.result.data[72];",
											"    pm.expect(data.observationUnitDbId).to.eq(\"PKWDPWqLNmAcO\");",
											"    pm.expect(data.observationUnitName).to.eql(\"PLOT33\");",
											"    pm.expect(data.observationLevel).to.eql(\"PLOT\");",
											"    pm.expect(data.observationLevels).to.eql(\"1\");",
											"    pm.expect(data.plotNumber).to.eql(\"33\");",
											"    pm.expect(data.plantNumber).to.eql(null);",
											"    pm.expect(data.blockNumber).to.eql(null);",
											"    pm.expect(data.replicate).to.eql(\"2\");",
											"    pm.expect(data.germplasmDbId).to.eql(\"27\");",
											"    pm.expect(data.germplasmName).to.eql(\"GP7\");",
											"    pm.expect(data.studyDbId).to.eql(\"3\");",
											"    pm.expect(data.studyName).to.eql(\"Randomized Trial 20180003_2\");",
											"    pm.expect(data.studyLocationDbId).to.eql(\"9003\");",
											"    pm.expect(data.studyLocation).to.eql(\"Centro Internacional de Agricultura Tropical\");",
											"    pm.expect(data.programName).to.eql(\"API Program\");",
											"    pm.expect(data.x).to.eql(\"1\");",
											"    pm.expect(data.y).to.eql(\"1\");",
											"    pm.expect(data.entryType).to.eql(\"Test entry\");",
											"    pm.expect(data.entryNumber).to.eql(\"7\");",
											"    pm.expect(data.instanceNumber).to.eql(\"2\");",
											"    ",
											"    //Verify Biomas_yield observation",
											"    var observation = data.observations[0];",
											"    pm.expect(observation.observationDbId).to.eql(\"1364\");",
											"    pm.expect(observation.observationVariableDbId).to.eql(pm.environment.get(\"study_biomass_cvterm_id\"));",
											"    pm.expect(observation.observationVariableName).to.eql(\"Biomas_yield\");",
											"    pm.expect(observation.observationTimeStamp).to.eql(\"2018-10-29T03:34:02.000Z\");",
											"    pm.expect(observation.season).to.eql(null);",
											"    pm.expect(observation.collector).to.eql(\"\");",
											"    pm.expect(observation.value).to.eql(\"46\");",
											"    ",
											"    //Verify Grain_size observation",
											"    observation = data.observations[1];",
											"    pm.expect(observation.observationDbId).to.eql(\"1365\");",
											"    pm.expect(observation.observationVariableDbId).to.eql(pm.environment.get(\"grain_size_cvterm_id\"));",
											"    pm.expect(observation.observationVariableName).to.eql(\"Grain_size\");",
											"    pm.expect(observation.observationTimeStamp).to.eql(\"2018-10-29T03:34:02.000Z\");",
											"    pm.expect(observation.season).to.eql(null);",
											"    pm.expect(observation.collector).to.eql(\"\");",
											"    pm.expect(observation.value).to.eql(\"35\");",
											"    ",
											"    ",
											"    //Verify Grain_yield measurement",
											"    observation = data.observations[2];",
											"    pm.expect(observation.observationDbId).to.eql(\"1366\");",
											"    pm.expect(observation.observationVariableDbId).to.eql(pm.environment.get(\"study_grainYield_cvterm_id\"));",
											"    pm.expect(observation.observationVariableName).to.eql(\"Grain_yield\");",
											"    pm.expect(observation.observationTimeStamp).to.eql(\"2018-10-29T03:34:02.000Z\");",
											"    pm.expect(observation.season).to.eql(null);",
											"    pm.expect(observation.collector).to.eql(\"\");",
											"    pm.expect(observation.value).to.eql(\"94\");",
											"    ",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "3b15772c-2f2f-4f23-b83f-c548e30fc435",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"observationLevel\": \"PLOT\",\n\t\"trialDbIds\": [\n\t\t\"{{trialStudyId}}\"\n\t]\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/phenotypes-search",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"phenotypes-search"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						},
						{
							"name": "Post phenotype search by locationDbIds and plant dataset level",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bc8b93c1-2fb5-473a-97f4-ac05ed76ada5",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(600);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Verify returned first record\", function () {",
											"    ",
											"    var data = jsonData.result.data[0];",
											"    pm.expect(data.observationUnitDbId).to.eq(\"2a664296-3d7e-459d-ad77-87a7d5dae8c5\");",
											"    pm.expect(data.observationUnitName).to.eql(null);",
											"    pm.expect(data.observationLevel).to.eql(\"PLANT\");",
											"    pm.expect(data.observationLevels).to.eql(\"1\");",
											"    pm.expect(data.plotNumber).to.eql(null);",
											"    pm.expect(data.plantNumber).to.eql(null);",
											"    pm.expect(data.blockNumber).to.eql(null);",
											"    pm.expect(data.replicate).to.eql(null);",
											"    pm.expect(data.germplasmDbId).to.eql(\"21\");",
											"    pm.expect(data.germplasmName).to.eql(\"GP1\");",
											"    pm.expect(data.studyDbId).to.eql(\"1\");",
											"    pm.expect(data.studyName).to.eql(\"Study with Imported Cross Nursery 2018002_1\");",
											"    pm.expect(data.studyLocationDbId).to.eql(\"9001\");",
											"    pm.expect(data.studyLocation).to.eql(\"Africa Rice Centre\");",
											"    pm.expect(data.programName).to.eql(\"API Program\");",
											"    pm.expect(data.x).to.eql(\"1\");",
											"    pm.expect(data.y).to.eql(\"1\");",
											"    pm.expect(data.entryType).to.eql(\"Test entry\");",
											"    pm.expect(data.entryNumber).to.eql(\"1\");",
											"    pm.expect(data.instanceNumber).to.eql(\"1\");",
											"    pm.expect(data.observations).to.eql([]);",
											"",
											"    ",
											"});",
											"",
											"pm.test(\"Verify returned middle record\", function () {",
											"    ",
											"    var data = jsonData.result.data[296];",
											"    pm.expect(data.observationUnitDbId).to.eq(\"35534c9e-755f-4aa5-aae9-085928d04e1f\");",
											"    pm.expect(data.observationUnitName).to.eql(null);",
											"    pm.expect(data.observationLevel).to.eql(\"PLANT\");",
											"    pm.expect(data.observationLevels).to.eql(\"1\");",
											"    pm.expect(data.plotNumber).to.eql(null);",
											"    pm.expect(data.plantNumber).to.eql(null);",
											"    pm.expect(data.blockNumber).to.eql(null);",
											"    pm.expect(data.replicate).to.eql(null);",
											"    pm.expect(data.germplasmDbId).to.eql(\"25\");",
											"    pm.expect(data.germplasmName).to.eql(\"GP5\");",
											"    pm.expect(data.studyDbId).to.eql(\"15\");",
											"    pm.expect(data.studyName).to.eql(\"Study for user 3_1\");",
											"    pm.expect(data.studyLocationDbId).to.eql(\"9001\");",
											"    pm.expect(data.studyLocation).to.eql(\"Africa Rice Centre\");",
											"    pm.expect(data.programName).to.eql(\"API Program\");",
											"    pm.expect(data.x).to.eql(\"1\");",
											"    pm.expect(data.y).to.eql(\"1\");",
											"    pm.expect(data.entryType).to.eql(\"Test entry\");",
											"    pm.expect(data.entryNumber).to.eql(\"5\");",
											"    pm.expect(data.instanceNumber).to.eql(\"1\");",
											"    pm.expect(data.observations).to.eql([]);",
											"    ",
											"});",
											"",
											"pm.test(\"Verify returned last record\", function () {",
											"    ",
											"    var data = jsonData.result.data[599];",
											"    pm.expect(data.observationUnitDbId).to.eq(\"930934f4-64e1-4aba-9f8e-bd80999bd6ce\");",
											"    pm.expect(data.observationUnitName).to.eql(null);",
											"    pm.expect(data.observationLevel).to.eql(\"PLANT\");",
											"    pm.expect(data.observationLevels).to.eql(\"1\");",
											"    pm.expect(data.plotNumber).to.eql(null);",
											"    pm.expect(data.plantNumber).to.eql(null);",
											"    pm.expect(data.blockNumber).to.eql(null);",
											"    pm.expect(data.replicate).to.eql(null);",
											"    pm.expect(data.germplasmDbId).to.eql(\"40\");",
											"    pm.expect(data.germplasmName).to.eql(\"GP20\");",
											"    pm.expect(data.studyDbId).to.eql(\"21\");",
											"    pm.expect(data.studyName).to.eql(\"Study for user 6_1\");",
											"    pm.expect(data.studyLocationDbId).to.eql(\"9001\");",
											"    pm.expect(data.studyLocation).to.eql(\"Africa Rice Centre\");",
											"    pm.expect(data.programName).to.eql(\"API Program\");",
											"    pm.expect(data.x).to.eql(\"1\");",
											"    pm.expect(data.y).to.eql(\"1\");",
											"    pm.expect(data.entryType).to.eql(\"Test entry\");",
											"    pm.expect(data.entryNumber).to.eql(\"20\");",
											"    pm.expect(data.instanceNumber).to.eql(\"1\");",
											"    pm.expect(data.observations).to.eql([]);",
											"    ",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "939328d0-0a20-4d9a-b87b-23725411b690",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"locationDbIds\": [\n\t\t\"9001\",\n\t\t\"9003\"\n\t],\n\t\"observationLevel\": \"PLANT\"\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/phenotypes-search",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"phenotypes-search"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						},
						{
							"name": "Post phenotype search by germplasmDbIds and means observation level",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "246704eb-64d5-48e8-8c3a-2711bb68f787",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(6);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Verify returned first record\", function () {",
											"    ",
											"    var data = jsonData.result.data[0];",
											"    pm.expect(data.observationUnitDbId).to.eq(\"104158af-b4d7-428a-b772-4bbeb59422e9\");",
											"    pm.expect(data.observationUnitName).to.eql(null);",
											"    pm.expect(data.observationLevel).to.eql(\"MEANS\");",
											"    pm.expect(data.observationLevels).to.eql(\"1\");",
											"    pm.expect(data.plotNumber).to.eql(null);",
											"    pm.expect(data.plantNumber).to.eql(null);",
											"    pm.expect(data.blockNumber).to.eql(null);",
											"    pm.expect(data.replicate).to.eql(null);",
											"    pm.expect(data.germplasmDbId).to.eql(\"24\");",
											"    pm.expect(data.germplasmName).to.eql(\"GP4\");",
											"    pm.expect(data.studyDbId).to.eql(\"2\");",
											"    pm.expect(data.studyName).to.eql(\"Randomized Trial 20180003_1\");",
											"    pm.expect(data.studyLocationDbId).to.eql(\"9001\");",
											"    pm.expect(data.studyLocation).to.eql(\"Africa Rice Centre\");",
											"    pm.expect(data.programName).to.eql(\"API Program\");",
											"    pm.expect(data.x).to.eql(\"1\");",
											"    pm.expect(data.y).to.eql(\"1\");",
											"    pm.expect(data.entryType).to.eql(\"Check entry\");",
											"    pm.expect(data.entryNumber).to.eql(\"4\");",
											"    pm.expect(data.instanceNumber).to.eql(\"1\");",
											"    ",
											"    //Verify Biomas_yield_means observation",
											"    var observation = data.observations[0];",
											"    pm.expect(observation.observationDbId).to.eql(\"1500\");",
											"    pm.expect(observation.observationVariableDbId).to.eql(\"100002\");",
											"    pm.expect(observation.observationVariableName).to.eql(\"Biomas_yield_Means\");",
											"    pm.expect(observation.observationTimeStamp).to.eql(\"2019-01-21T15:29:18.000Z\");",
											"    pm.expect(observation.season).to.eql(null);",
											"    pm.expect(observation.collector).to.eql(\"\");",
											"    pm.expect(observation.value).to.eql(\"41.5\");",
											"    ",
											"    //Verify Grain_size_means observation",
											"    observation = data.observations[1];",
											"    pm.expect(observation.observationDbId).to.eql(\"1501\");",
											"    pm.expect(observation.observationVariableDbId).to.eql(\"100003\");",
											"    pm.expect(observation.observationVariableName).to.eql(\"Grain_size_Means\");",
											"    pm.expect(observation.observationTimeStamp).to.eql(\"2019-01-21T15:29:18.000Z\");",
											"    pm.expect(observation.season).to.eql(null);",
											"    pm.expect(observation.collector).to.eql(\"\");",
											"    pm.expect(observation.value).to.eql(\"69.4999999999999\");",
											"    ",
											"});",
											"",
											"pm.test(\"Verify returned last record\", function () {",
											"    ",
											"    var data = jsonData.result.data[5];",
											"    pm.expect(data.observationUnitDbId).to.eq(\"b8232a78-5cd7-436c-bfc8-ad8111318b62\");",
											"    pm.expect(data.observationUnitName).to.eql(null);",
											"    pm.expect(data.observationLevel).to.eql(\"MEANS\");",
											"    pm.expect(data.observationLevels).to.eql(\"1\");",
											"    pm.expect(data.plotNumber).to.eql(null);",
											"    pm.expect(data.plantNumber).to.eql(null);",
											"    pm.expect(data.blockNumber).to.eql(null);",
											"    pm.expect(data.replicate).to.eql(null);",
											"    pm.expect(data.germplasmDbId).to.eql(\"33\");",
											"    pm.expect(data.germplasmName).to.eql(\"GP13\");",
											"    pm.expect(data.studyDbId).to.eql(\"3\");",
											"    pm.expect(data.studyName).to.eql(\"Randomized Trial 20180003_2\");",
											"    pm.expect(data.studyLocationDbId).to.eql(\"9003\");",
											"    pm.expect(data.studyLocation).to.eql(\"Centro Internacional de Agricultura Tropical\");",
											"    pm.expect(data.programName).to.eql(\"API Program\");",
											"    pm.expect(data.x).to.eql(\"1\");",
											"    pm.expect(data.y).to.eql(\"1\");",
											"    pm.expect(data.entryType).to.eql(\"Test entry\");",
											"    pm.expect(data.entryNumber).to.eql(\"13\");",
											"    pm.expect(data.instanceNumber).to.eql(\"2\");",
											"    ",
											"    //Verify Biomas_yield_Means observation",
											"    var observation = data.observations[0];",
											"    pm.expect(observation.observationDbId).to.eql(\"1542\");",
											"    pm.expect(observation.observationVariableDbId).to.eql(\"100002\");",
											"    pm.expect(observation.observationVariableName).to.eql(\"Biomas_yield_Means\");",
											"    pm.expect(observation.observationTimeStamp).to.eql(\"2019-01-21T15:29:18.000Z\");",
											"    pm.expect(observation.season).to.eql(null);",
											"    pm.expect(observation.collector).to.eql(\"\");",
											"    pm.expect(observation.value).to.eql(\"60\");",
											"    ",
											"    //Verify Grain_size_Means observation",
											"    observation = data.observations[1];",
											"    pm.expect(observation.observationDbId).to.eql(\"1543\");",
											"    pm.expect(observation.observationVariableDbId).to.eql(\"100003\");",
											"    pm.expect(observation.observationVariableName).to.eql(\"Grain_size_Means\");",
											"    pm.expect(observation.observationTimeStamp).to.eql(\"2019-01-21T15:29:18.000Z\");",
											"    pm.expect(observation.season).to.eql(null);",
											"    pm.expect(observation.collector).to.eql(\"\");",
											"    pm.expect(observation.value).to.eql(\"34.5\");",
											"    ",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5ba329bd-f568-48ad-bd64-972bbe3dfec8",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"observationLevel\": \"MEANS\",\n\t\"germplasmDbIds\": [\n\t\t\"24\",\n\t\t\"31\",\n\t\t\"33\"\n\t]\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/phenotypes-search",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"phenotypes-search"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						},
						{
							"name": "Post phenotype search by observationVariableId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "94ddc2af-3d5e-4dc7-af1c-394c12a6e111",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(860);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Check if all observation has biomas_yield\", function () {",
											"  var jsonData = pm.response.json();",
											"  ",
											"",
											"  var dataLength = jsonData.result.data.length;",
											"",
											"  for (i = 0; i < dataLength ; i++) {",
											"      var data = jsonData.result.data[i];",
											"      var observationsLength = data.observations.length;",
											"   ",
											"        for (j=0; j < observationsLength; j++) {",
											"            var variableId =data.observations[j].observationVariableDbId",
											"          if(variableId==\"18010\"){",
											"              pm.expect(variableId).to.eql(\"18010\");",
											"              console.log(\"index:\"+j+ \"Found! \");",
											"          }",
											"          ",
											"      }",
											"  }",
											" ",
											"});    ",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b5636d76-ff72-4e75-9426-0a2b1d8ce11e",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"observationVariableDbIds\": [\n    \"18010\"\n  ]\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/phenotypes-search",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"phenotypes-search"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						},
						{
							"name": "Post phenotype search by programDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5977047c-35b6-449f-aa6f-81d1a7222277",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											"  pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											"  pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											"  pm.expect(jsonData.metadata.pagination.totalCount).to.eql(2380);",
											"  pm.expect(jsonData.metadata.pagination.totalPages).to.eql(3);",
											"  pm.expect(jsonData.metadata.status).to.eql([]);",
											"  pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Check if all data has correct programName\", function () {",
											"  var jsonData = pm.response.json();",
											"  var dataLength = jsonData.result.data.length;",
											"",
											"  for (i = 0; i < dataLength; i++) {",
											"    var data = jsonData.result.data[i];",
											"    pm.expect(data.programName).to.eql(\"API Program\");",
											"  }",
											"",
											"});    ",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "02776cd7-0d4a-4919-9958-d75651ca2822",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"programDbIds\": [\n\t\t\"{{api_program_id}}\"\n\t]\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/phenotypes-search",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"phenotypes-search"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						},
						{
							"name": "Post phenotype search by studyDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4506b742-03f5-4a8f-a2b3-fcb4423117c3",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(60);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Check if all data has correct studyDbId\", function () {",
											"  var jsonData = pm.response.json();",
											"  var dataLength = jsonData.result.data.length;",
											"",
											"  for (i = 0; i < dataLength ; i++) {",
											"      var data = jsonData.result.data[i];",
											"      pm.expect(data.studyDbId).to.eql(pm.environment.get(\"studyDbId\"));",
											"  }",
											" ",
											"});    ",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d0131ab3-534c-4eb8-9e5a-41e76f42b9b5",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"studyDbIds\": [\n\t\t\"{{studyDbId}}\"\n\t]\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/phenotypes-search",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"phenotypes-search"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						},
						{
							"name": "Post phenotype search by observationUnitDbIds",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "460c4fbc-5022-4860-aabb-a1e6d784d790",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(1);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Check if all data has correct programName\", function () {",
											"  var jsonData = pm.response.json();",
											"  var dataLength = jsonData.result.data.length;",
											"",
											"  for (i = 0; i < dataLength ; i++) {",
											"      var data = jsonData.result.data[i];",
											"      pm.expect(data.observationUnitDbId).to.eql(\"PKWDPivJxYgde\");",
											"  }",
											" ",
											"});    ",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "73a1e709-d9b9-4351-a98e-10fed5d9cb4f",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"observationUnitDbIds\": [\n    \"PKWDPivJxYgde\"\n\t]\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/phenotypes-search",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"phenotypes-search"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						},
						{
							"name": "Post phenotype search by observationTimeStamps",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "062bdcd6-6751-448c-8a8f-883cbe20851a",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(80);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"",
											"pm.test(\"Check if observation timestamps are within observationTimeStamps\", function () {",
											"  var jsonData = pm.response.json();",
											"  ",
											"  //var returnedTimeStamp = ",
											"",
											"  var dataLength = jsonData.result.data.length;",
											"  var moment = require('moment');",
											"  var timeStampStart = moment(\"2018-01-01 00:00:00\");",
											"  var timeStampEnd = moment(\"2018-12-30 11:59:00\");",
											"  for (i = 0; i < dataLength ; i++) {",
											"      var data = jsonData.result.data[i];",
											"      var observationsLength = data.observations.length;",
											"   ",
											"        for (j=0; j < observationsLength; j++) {",
											"            var moment2 = require('moment');",
											"            var returnedTimeStamp = data.observations[j].observationTimeStamp;",
											"            var isAfter = moment2(returnedTimeStamp).isAfter(timeStampStart);",
											"            var isBefore = moment2(returnedTimeStamp).isBefore(timeStampEnd);",
											"            pm.expect(isAfter).to.eql(true);",
											"            pm.expect(isBefore).to.eql(true);",
											"        ",
											"      }",
											"  }",
											" ",
											"});    ",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "69daf790-9ef1-4c87-8b2a-e759e4f88198",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"trialDbIds\": [\r\n\t\t\"{{trialStudyId}}\"\r\n\t],\r\n        \"observationTimeStampRangeStart\": \"2018-01-01 12:00:00\",\r\n\t    \"observationTimeStampRangeEnd\": \"2018-12-30 11:59:00\"\r\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/phenotypes-search",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"phenotypes-search"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						},
						{
							"name": "Post phenotype search with entered pagination details",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a76a4304-1246-4e75-b8b2-765c33a25d99",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Verify returned metadata\", function () {",
											" pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											" pm.expect(jsonData.metadata.pagination.pageSize).to.eql(10000);",
											" pm.expect(jsonData.metadata.pagination.totalCount).to.eql(860);",
											" pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											" pm.expect(jsonData.metadata.status).to.eql([]);",
											" pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"pm.test(\"Check if all observation has biomas_yield\", function () {",
											"  var jsonData = pm.response.json();",
											"  ",
											"",
											"  var dataLength = jsonData.result.data.length;",
											"",
											"  for (i = 0; i < dataLength ; i++) {",
											"      var data = jsonData.result.data[i];",
											"      var observationsLength = data.observations.length;",
											"   ",
											"        for (j=0; j < observationsLength; j++) {",
											"            var variableId =data.observations[j].observationVariableDbId",
											"          if(variableId==\"18010\"){",
											"              pm.expect(variableId).to.eql(\"18010\");",
											"              console.log(\"index:\"+j+ \"Found! \");",
											"          }",
											"          ",
											"      }",
											"  }",
											" ",
											"});    ",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0474b4e6-3379-4a64-a0fa-3df37d0f8770",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"pageSize\": 10000,\n\t\"page\": 0,\n    \"observationVariableDbIds\": [\n    \"18010\"\n  ]\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/phenotypes-search",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"phenotypes-search"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						},
						{
							"name": "Post phenotype search with entered pageSize greater than max",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5e5a1091-4e50-4e06-9c7f-a1262f00e0da",
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"",
											"pm.test(\"Verify returned error message\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.errors[0].message).to.eql(\"Page size must between 1 and 10000.\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "931141af-a978-442f-8843-69e9e6673d6b",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"pageSize\": 10001,\n\t\"page\": 0,\n    \"observationVariableDbIds\": [\n    \"18010\"\n  ]\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/phenotypes-search",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"phenotypes-search"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						},
						{
							"name": "Post phenotype search with entered invalid page",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7290e834-aae2-4fcb-bbc3-5cfcd6d4e67b",
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"",
											"pm.test(\"Verify returned error message\", function () {",
											"    var jsonData = pm.response.json();",
											" pm.expect(jsonData.errors[0].message).to.eql(\"A total of 1 pages are available, so the page number must between 0 and 1 (exclusive).\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "63ad223d-db45-46c6-9682-93099db19728",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"pageSize\": 10000,\n\t\"page\": 9999,\n    \"observationVariableDbIds\": [\n    \"18010\"\n  ]\n}"
								},
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v1/phenotypes-search",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v1",
										"phenotypes-search"
									]
								},
								"description": "POST /{crop}/brapi/v1/search/germplasm"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "lot-resource-brapi",
			"item": [
				{
					"name": "GET ​/{crop}​/brapi​/v2​/seedlots",
					"item": [
						{
							"name": "Verify response code and body when entered crop name only",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bdc10cf0-8a05-4bc6-a1f1-9cfe819476a8",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"var data = jsonData.result.data[0];",
											"pm.test(\"Verify returned metadata\", function () {",
											"    pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											"    pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											"    pm.expect(jsonData.metadata.pagination.totalCount).to.eql(227);",
											"    pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											"    pm.expect(jsonData.metadata.status).to.eql([]);",
											"    pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"//Verify data of first lot in the results",
											"",
											"pm.test(\"Check amount \", function () {",
											"    pm.expect(data.amount).to.eql(100);",
											"});",
											"",
											"pm.test(\"Check createdDate \", function () {",
											"    pm.expect(data.createdDate).to.eql(\"2018-10-25\");",
											"});",
											"",
											"pm.test(\"Check germplasmDbId \", function () {",
											"    pm.expect(data.germplasmDbId).to.eql(34);",
											"});",
											"",
											"pm.test(\"Check locationDbId \", function () {",
											"    pm.expect(data.locationDbId).to.eql(6000);",
											"});",
											"",
											"pm.test(\"Check seedLotDescription \", function () {",
											"    pm.expect(data.seedLotDescription).to.eql(\"From List Import\");",
											"});",
											"",
											"pm.test(\"Check seedLotName \", function () {",
											"    pm.expect(data.seedLotName).to.eql(\"SID2-14\");",
											"});",
											"",
											"pm.test(\"Check storageLocation \", function () {",
											"    pm.expect(data.storageLocation).to.eql(\"Default Seed Store\");",
											"});",
											"",
											"pm.test(\"Check units \", function () {",
											"    pm.expect(data.units).to.eql(\"SEED_AMOUNT_g\");",
											"});",
											"",
											"pm.test(\"Check seedLotDbId \", function () {",
											"    pm.expect(data.seedLotDbId).to.eql(\"39725719-09b9-11ea-8631-0242ac110002\");",
											"});",
											"",
											"//Check additional info",
											"pm.test(\"Check lotInternalId \", function () {",
											"    pm.expect(data.additionalInfo.lotInternalId).to.eql(21);",
											"});",
											"",
											"pm.test(\"Check actualBalance \", function () {",
											"    pm.expect(data.additionalInfo.actualBalance).to.eql(100);",
											"});",
											"",
											"pm.test(\"Check totalWithdrawals \", function () {",
											"    pm.expect(data.additionalInfo.totalWithdrawals).to.eql(0);",
											"});",
											"",
											"pm.test(\"Check pendingDeposits \", function () {",
											"    pm.expect(data.additionalInfo.pendingDeposits).to.eql(0);",
											"});",
											"",
											"pm.test(\"Check germplasmName \", function () {",
											"    pm.expect(data.additionalInfo.germplasmName).to.eql(\"CML14\");",
											"});",
											"",
											"pm.test(\"Check lastDepositDate \", function () {",
											"    pm.expect(data.additionalInfo.lastDepositDate).to.eql(\"2018-10-25\");",
											"});",
											"",
											"pm.test(\"Check totalReserved \", function () {",
											"    pm.expect(data.additionalInfo.totalReserved).to.eql(0);",
											"});",
											"",
											"pm.test(\"Check username \", function () {",
											"    pm.expect(data.additionalInfo.username).to.eql(\"admin\");",
											"});",
											"",
											"pm.test(\"Check status \", function () {",
											"    pm.expect(data.additionalInfo.status).to.eql(\"ACTIVE\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "db126a2b-11d8-4929-90ef-d4680255696f",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/seedlots",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"seedlots"
									]
								},
								"description": "GET /{crop}​/brapi​/v2​/seedlots"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered seedLotDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0f223e40-745e-4520-b773-7ba5828e5861",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"var data = jsonData.result.data[0];",
											"pm.test(\"Verify returned metadata\", function () {",
											"    pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											"    pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											"    pm.expect(jsonData.metadata.pagination.totalCount).to.eql(1);",
											"    pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											"    pm.expect(jsonData.metadata.status).to.eql([]);",
											"    pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"//Verify data of first lot in the results",
											"",
											"pm.test(\"Check amount \", function () {",
											"    pm.expect(data.amount).to.eql(100);",
											"});",
											"",
											"pm.test(\"Check createdDate \", function () {",
											"    pm.expect(data.createdDate).to.eql(\"2018-10-25\");",
											"});",
											"",
											"pm.test(\"Check germplasmDbId \", function () {",
											"    pm.expect(data.germplasmDbId).to.eql(34);",
											"});",
											"",
											"pm.test(\"Check locationDbId \", function () {",
											"    pm.expect(data.locationDbId).to.eql(6000);",
											"});",
											"",
											"pm.test(\"Check seedLotDescription \", function () {",
											"    pm.expect(data.seedLotDescription).to.eql(\"From List Import\");",
											"});",
											"",
											"pm.test(\"Check seedLotName \", function () {",
											"    pm.expect(data.seedLotName).to.eql(\"SID2-14\");",
											"});",
											"",
											"pm.test(\"Check storageLocation \", function () {",
											"    pm.expect(data.storageLocation).to.eql(\"Default Seed Store\");",
											"});",
											"",
											"pm.test(\"Check units \", function () {",
											"    pm.expect(data.units).to.eql(\"SEED_AMOUNT_g\");",
											"});",
											"",
											"pm.test(\"Check seedLotDbId \", function () {",
											"    pm.expect(data.seedLotDbId).to.eql(\"39725719-09b9-11ea-8631-0242ac110002\");",
											"});",
											"",
											"//Check additional info",
											"pm.test(\"Check lotInternalId \", function () {",
											"    pm.expect(data.additionalInfo.lotInternalId).to.eql(21);",
											"});",
											"",
											"pm.test(\"Check actualBalance \", function () {",
											"    pm.expect(data.additionalInfo.actualBalance).to.eql(100);",
											"});",
											"",
											"pm.test(\"Check totalWithdrawals \", function () {",
											"    pm.expect(data.additionalInfo.totalWithdrawals).to.eql(0);",
											"});",
											"",
											"pm.test(\"Check pendingDeposits \", function () {",
											"    pm.expect(data.additionalInfo.pendingDeposits).to.eql(0);",
											"});",
											"",
											"pm.test(\"Check germplasmName \", function () {",
											"    pm.expect(data.additionalInfo.germplasmName).to.eql(\"CML14\");",
											"});",
											"",
											"pm.test(\"Check lastDepositDate \", function () {",
											"    pm.expect(data.additionalInfo.lastDepositDate).to.eql(\"2018-10-25\");",
											"});",
											"",
											"pm.test(\"Check totalReserved \", function () {",
											"    pm.expect(data.additionalInfo.totalReserved).to.eql(0);",
											"});",
											"",
											"pm.test(\"Check username \", function () {",
											"    pm.expect(data.additionalInfo.username).to.eql(\"admin\");",
											"});",
											"",
											"pm.test(\"Check status \", function () {",
											"    pm.expect(data.additionalInfo.status).to.eql(\"ACTIVE\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "35d99c02-3193-4c5e-bf96-ff2f7e47d7a7",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/seedlots?seedLotDbId=39725719-09b9-11ea-8631-0242ac110002",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"seedlots"
									],
									"query": [
										{
											"key": "seedLotDbId",
											"value": "39725719-09b9-11ea-8631-0242ac110002"
										}
									]
								},
								"description": "GET /{crop}​/brapi​/v2​/seedlots"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered germplasmDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "edd9f8c2-1503-42ca-b45e-2d22e600bab2",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"var data = jsonData.result.data[0];",
											"pm.test(\"Verify returned metadata\", function () {",
											"    pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											"    pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											"    pm.expect(jsonData.metadata.pagination.totalCount).to.eql(1);",
											"    pm.expect(jsonData.metadata.pagination.totalPages).to.eql(1);",
											"    pm.expect(jsonData.metadata.status).to.eql([]);",
											"    pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"//Verify data of first lot in the results",
											"",
											"pm.test(\"Check amount \", function () {",
											"    pm.expect(data.amount).to.eql(100);",
											"});",
											"",
											"pm.test(\"Check createdDate \", function () {",
											"    pm.expect(data.createdDate).to.eql(\"2018-10-25\");",
											"});",
											"",
											"pm.test(\"Check germplasmDbId \", function () {",
											"    pm.expect(data.germplasmDbId).to.eql(34);",
											"});",
											"",
											"pm.test(\"Check locationDbId \", function () {",
											"    pm.expect(data.locationDbId).to.eql(6000);",
											"});",
											"",
											"pm.test(\"Check seedLotDescription \", function () {",
											"    pm.expect(data.seedLotDescription).to.eql(\"From List Import\");",
											"});",
											"",
											"pm.test(\"Check seedLotName \", function () {",
											"    pm.expect(data.seedLotName).to.eql(\"SID2-14\");",
											"});",
											"",
											"pm.test(\"Check storageLocation \", function () {",
											"    pm.expect(data.storageLocation).to.eql(\"Default Seed Store\");",
											"});",
											"",
											"pm.test(\"Check units \", function () {",
											"    pm.expect(data.units).to.eql(\"SEED_AMOUNT_g\");",
											"});",
											"",
											"pm.test(\"Check seedLotDbId \", function () {",
											"    pm.expect(data.seedLotDbId).to.eql(\"39725719-09b9-11ea-8631-0242ac110002\");",
											"});",
											"",
											"//Check additional info",
											"pm.test(\"Check lotInternalId \", function () {",
											"    pm.expect(data.additionalInfo.lotInternalId).to.eql(21);",
											"});",
											"",
											"pm.test(\"Check actualBalance \", function () {",
											"    pm.expect(data.additionalInfo.actualBalance).to.eql(100);",
											"});",
											"",
											"pm.test(\"Check totalWithdrawals \", function () {",
											"    pm.expect(data.additionalInfo.totalWithdrawals).to.eql(0);",
											"});",
											"",
											"pm.test(\"Check pendingDeposits \", function () {",
											"    pm.expect(data.additionalInfo.pendingDeposits).to.eql(0);",
											"});",
											"",
											"pm.test(\"Check germplasmName \", function () {",
											"    pm.expect(data.additionalInfo.germplasmName).to.eql(\"CML14\");",
											"});",
											"",
											"pm.test(\"Check lastDepositDate \", function () {",
											"    pm.expect(data.additionalInfo.lastDepositDate).to.eql(\"2018-10-25\");",
											"});",
											"",
											"pm.test(\"Check totalReserved \", function () {",
											"    pm.expect(data.additionalInfo.totalReserved).to.eql(0);",
											"});",
											"",
											"pm.test(\"Check username \", function () {",
											"    pm.expect(data.additionalInfo.username).to.eql(\"admin\");",
											"});",
											"",
											"pm.test(\"Check status \", function () {",
											"    pm.expect(data.additionalInfo.status).to.eql(\"ACTIVE\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "96df5d50-747b-4537-893a-5c819a635a55",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/seedlots?germplasmDbId=34",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"seedlots"
									],
									"query": [
										{
											"key": "germplasmDbId",
											"value": "34"
										}
									]
								},
								"description": "GET /{crop}​/brapi​/v2​/seedlots"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered page no and pageSize values",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b247ac94-bad0-41f1-b01e-42fc077488a2",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"var data = jsonData.result.data[0];",
											"pm.test(\"Verify returned metadata\", function () {",
											"    pm.expect(jsonData.metadata.pagination.currentPage).to.eql(2);",
											"    pm.expect(jsonData.metadata.pagination.pageSize).to.eql(10);",
											"    pm.expect(jsonData.metadata.pagination.totalCount).to.eql(227);",
											"    pm.expect(jsonData.metadata.pagination.totalPages).to.eql(23);",
											"    pm.expect(jsonData.metadata.status).to.eql([]);",
											"    pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"//Verify data of first lot in the results",
											"",
											"pm.test(\"Check amount \", function () {",
											"    pm.expect(data.amount).to.eql(0.0);",
											"});",
											"",
											"pm.test(\"Check createdDate \", function () {",
											"    pm.expect(data.createdDate).to.eql(\"2020-06-16\");",
											"});",
											"",
											"pm.test(\"Check germplasmDbId \", function () {",
											"    pm.expect(data.germplasmDbId).to.eql(21);",
											"});",
											"",
											"pm.test(\"Check locationDbId \", function () {",
											"    pm.expect(data.locationDbId).to.eql(6000);",
											"});",
											"",
											"pm.test(\"Check seedLotDescription \", function () {",
											"    pm.expect(data.seedLotDescription).to.eql(\"new lot record\");",
											"});",
											"",
											"pm.test(\"Check seedLotName \", function () {",
											"    pm.expect(data.seedLotName).to.eql(\"SID3-1\");",
											"});",
											"",
											"pm.test(\"Check storageLocation \", function () {",
											"    pm.expect(data.storageLocation).to.eql(\"Default Seed Store\");",
											"});",
											"",
											"pm.test(\"Check units \", function () {",
											"    pm.expect(data.units).to.eql(\"SEED_AMOUNT_g\");",
											"});",
											"",
											"pm.test(\"Check seedLotDbId \", function () {",
											"    pm.expect(data.seedLotDbId).to.eql(\"31a74660-3579-4d74-91a8-3a7f74c2cffe\");",
											"});",
											"",
											"//Check additional info",
											"pm.test(\"Check lotInternalId \", function () {",
											"    pm.expect(data.additionalInfo.lotInternalId).to.eql(41);",
											"});",
											"",
											"pm.test(\"Check actualBalance \", function () {",
											"    pm.expect(data.additionalInfo.actualBalance).to.eql(0.0);",
											"});",
											"",
											"pm.test(\"Check totalWithdrawals \", function () {",
											"    pm.expect(data.additionalInfo.totalWithdrawals).to.eql(0.0);",
											"});",
											"",
											"pm.test(\"Check pendingDeposits \", function () {",
											"    pm.expect(data.additionalInfo.pendingDeposits).to.eql(0.0);",
											"});",
											"",
											"pm.test(\"Check germplasmName \", function () {",
											"    pm.expect(data.additionalInfo.germplasmName).to.eql(\"CML1\");",
											"});",
											"",
											"//pm.test(\"Check lastDepositDate \", function () {",
											"//    pm.expect(data.additionalInfo.lastDepositDate).to.eql(\"2018-10-25\");",
											"//});",
											"",
											"pm.test(\"Check totalReserved \", function () {",
											"    pm.expect(data.additionalInfo.totalReserved).to.eql(0.0);",
											"});",
											"",
											"pm.test(\"Check username \", function () {",
											"    pm.expect(data.additionalInfo.username).to.eql(\"admin\");",
											"});",
											"",
											"pm.test(\"Check status \", function () {",
											"    pm.expect(data.additionalInfo.status).to.eql(\"ACTIVE\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "616acd54-396c-4d68-9446-0d6646fffc62",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/seedlots?page=2&pageSize=10",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"seedlots"
									],
									"query": [
										{
											"key": "page",
											"value": "2"
										},
										{
											"key": "pageSize",
											"value": "10"
										}
									]
								},
								"description": "GET /{crop}​/brapi​/v2​/seedlots"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered  page number that does not exist for the given pageSize",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "17e65c6a-e9e5-4d49-8a40-8dc76534e5ff",
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"var jsonData = pm.response.json();",
											"pm.test(\"Check error message\", function () {",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"A total of 23 pages are available, so the page number must between 0 and 23 (exclusive).\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "4ba09cba-6730-48a4-8280-de732c2c966b",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/seedlots?page=10000&pageSize=10",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"seedlots"
									],
									"query": [
										{
											"key": "page",
											"value": "10000"
										},
										{
											"key": "pageSize",
											"value": "10"
										}
									]
								},
								"description": "GET /{crop}​/brapi​/v2​/seedlots"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered pageSize value greater than max pageSize in the system",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ada31935-0153-4fdd-948c-b346e9232fb8",
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"var jsonData = pm.response.json();",
											"pm.test(\"Check error message\", function () {",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Page size must between 1 and 10000.\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2f8ba1cf-4b9f-415b-b725-eae75039c35f",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/seedlots?page=0&pageSize=10001",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"seedlots"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "10001"
										}
									]
								},
								"description": "GET /{crop}​/brapi​/v2​/seedlots"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered seedLotDbId of a closed lot",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "97440584-e4e4-4302-9000-f1dc1a67c8f2",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"pm.test(\"Verify returned metadata\", function () {",
											"    pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											"    pm.expect(jsonData.metadata.pagination.pageSize).to.eql(1000);",
											"    pm.expect(jsonData.metadata.pagination.totalCount).to.eql(0);",
											"    pm.expect(jsonData.metadata.pagination.totalPages).to.eql(0);",
											"    pm.expect(jsonData.metadata.status).to.eql([]);",
											"    pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"//Verify data of first lot in the results",
											"",
											"pm.test(\"Check data \", function () {",
											"    pm.expect(jsonData.result.data).to.eql([]);",
											"});",
											"",
											"pm.test(\"Check observations \", function () {",
											"    pm.expect(jsonData.result.observations).to.eql([]);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d13d49be-7bf6-42dd-81ff-0dc0dd97c8fd",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/seedlots?seedLotDbId=eb55f552-2b21-451b-9e78-3dcf84f0d256",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"seedlots"
									],
									"query": [
										{
											"key": "seedLotDbId",
											"value": "eb55f552-2b21-451b-9e78-3dcf84f0d256"
										}
									]
								},
								"description": "GET /{crop}​/brapi​/v2​/seedlots"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered combination of parameter values",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e792678a-06d2-412b-87f4-97f08403a794",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"pm.test(\"Verify returned metadata\", function () {",
											"    pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0);",
											"    pm.expect(jsonData.metadata.pagination.pageSize).to.eql(10000);",
											"    pm.expect(jsonData.metadata.pagination.totalCount).to.eql(0);",
											"    pm.expect(jsonData.metadata.pagination.totalPages).to.eql(0);",
											"    pm.expect(jsonData.metadata.status).to.eql([]);",
											"    pm.expect(jsonData.metadata.datafiles).to.eql([]);",
											"});",
											"",
											"//Verify data of first lot in the results",
											"",
											"pm.test(\"Check data \", function () {",
											"    pm.expect(jsonData.result.data).to.eql([]);",
											"});",
											"",
											"pm.test(\"Check observations \", function () {",
											"    pm.expect(jsonData.result.observations).to.eql([]);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0fd3949d-c270-4461-8b5f-ae9fd7dc06cb",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{masterToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BMSurl}}/{{crop}}/brapi/v2/seedlots?seedLotDbId=eb55f552-2b21-451b-9e78-3dcf84f0d256&germplasmDbId=34&page=0&pageSize=10000",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"{{crop}}",
										"brapi",
										"v2",
										"seedlots"
									],
									"query": [
										{
											"key": "seedLotDbId",
											"value": "eb55f552-2b21-451b-9e78-3dcf84f0d256"
										},
										{
											"key": "germplasmDbId",
											"value": "34"
										},
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "10000"
										}
									]
								},
								"description": "GET /{crop}​/brapi​/v2​/seedlots"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"protocolProfileBehavior": {}
}
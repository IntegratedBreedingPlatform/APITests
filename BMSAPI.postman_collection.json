{
	"info": {
		"_postman_id": "668dee06-0c4b-4423-8872-ee0f5b4b8dd1",
		"name": "BMSAPI",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "authentication-controller-brapi",
			"item": [
				{
					"name": "Get admin token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "99922372-3fdd-42eb-ac73-6dd6f3c0f907",
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.environment.unset(\"masterToken\");",
									"pm.environment.set(\"masterToken\", jsonData.access_token);",
									"pm.environment.unset(\"masterTokenExpiry\");",
									"pm.environment.set(\"masterTokenExpiry\", jsonData.expires_in);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{masterToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"username\": \"{{bms_user}}\",\r\n  \"password\": \"{{bms_password}}\",\r\n  \"grant_type\": \"\",\r\n  \"client_id\": \"\"\r\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{BMSurl}}/brapi/v1/token",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"brapi",
								"v1",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get test user token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f2cc64d7-2da2-48d0-9a00-90f1975c5731",
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.environment.unset(\"testuser_token\");",
									"pm.environment.set(\"testuser_token\", jsonData.access_token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{masterToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"username\": \"apitestuser\",\r\n  \"password\": \"apitestuser\",\r\n  \"grant_type\": \"\",\r\n  \"client_id\": \"\"\r\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{BMSurl}}/brapi/v1/token",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"brapi",
								"v1",
								"token"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "ontology-get-services",
			"item": [
				{
					"name": "GET /crops/{cropname}/methods",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b18b0587-8f3a-4973-b8ad-22feb595f86f",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Note: Checked details of first, middle and last method only for all methods are too many.",
									"pm.test(\"Check applied method\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].id).to.eql(\"4020\");",
									"    pm.expect(jsonData[0].name).to.eql(\"Applied\");",
									"    pm.expect(jsonData[0].description).to.eql(\"Factor applied\");",
									"});",
									"",
									"",
									"pm.test(\"Check Method for MSE method\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[40].id).to.eql(\"4360\");",
									"    pm.expect(jsonData[40].name).to.eql(\"Method for MSE\");",
									"    pm.expect(jsonData[40].description).to.eql(\"Method for Mean square error statistic\");",
									"});",
									"",
									"",
									"pm.test(\"Check weighed method\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[86].id).to.eql(pm.environment.get(\"weighed_method_id\"));",
									"    pm.expect(jsonData[86].name).to.eql(\"Weighed\");",
									"    pm.expect(jsonData[86].description).to.eql(\"Weighing method\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "1b1a3f7e-7706-47c9-8faf-48d46a501e5a",
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "X-Auth-Token",
								"type": "text",
								"value": "{{masterToken}}"
							}
						],
						"url": {
							"raw": "{{BMSurl}}/crops/{{crop}}/methods?programUUID={{api_program_id}}",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"crops",
								"{{crop}}",
								"methods"
							],
							"query": [
								{
									"key": "programUUID",
									"value": "{{api_program_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /crop/{cropname}/methods/{id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "30b2c2af-f846-494c-a5a3-d73eecb64def",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Check method id\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"weighed_method_id\"));",
									"});",
									"pm.test(\"Check method name\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.name).to.eql(\"Weighed\");",
									"});",
									"pm.test(\"Check method description\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.description).to.eql(\"Weighing method\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "d08d83ff-c265-4753-8a5c-f2aba194ddbd",
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "X-Auth-Token",
								"type": "text",
								"value": "{{masterToken}}"
							}
						],
						"url": {
							"raw": "{{BMSurl}}/crops/{{crop}}/methods/{{weighed_method_id}}?programUUID={{api_program_id}}",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"crops",
								"{{crop}}",
								"methods",
								"{{weighed_method_id}}"
							],
							"query": [
								{
									"key": "programUUID",
									"value": "{{api_program_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /crops/{cropname}/properties",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "54e0d925-6b1a-4507-b01f-4293ec679341",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Note: Checked details of first, middle and last property only for all properties are too many.",
									"pm.test(\"Check altitude property\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].id).to.eql(\"2260\");",
									"    pm.expect(jsonData[0].name).to.eql(\"Altitude\");",
									"    pm.expect(jsonData[0].description).to.eql(\"Altitude\");",
									"});",
									"",
									"",
									"pm.test(\"Check micronutrient property\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[78].id).to.eql(\"2440\");",
									"    pm.expect(jsonData[78].name).to.eql(\"Micronutrient\");",
									"    pm.expect(jsonData[78].description).to.eql(\"Micronutrient\");",
									"});",
									"",
									"",
									"pm.test(\"Check trial instance property\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[162].id).to.eql(\"2100\");",
									"    pm.expect(jsonData[162].name).to.eql(\"Trial instance\");",
									"    pm.expect(jsonData[162].description).to.eql(\"Identifier for an individual experiment ina multi environemt trial\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "280812a2-3275-4a93-84cd-1ce8e23d4c09",
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "X-Auth-Token",
								"type": "text",
								"value": "{{masterToken}}"
							}
						],
						"url": {
							"raw": "{{BMSurl}}/crops/{{crop}}/properties?programUUID={{api_program_id}}",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"crops",
								"{{crop}}",
								"properties"
							],
							"query": [
								{
									"key": "programUUID",
									"value": "{{api_program_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /crops/{cropname}/properties/{id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c8c89047-6942-44a1-b0b1-584f09e73ceb",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check trial instance property\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.id).to.eql(\"2100\");",
									"    pm.expect(jsonData.name).to.eql(\"Trial instance\");",
									"    pm.expect(jsonData.description).to.eql(\"Identifier for an individual experiment ina multi environemt trial\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "6429ca1d-4a67-4994-99df-ca1689398f04",
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "X-Auth-Token",
								"type": "text",
								"value": "{{masterToken}}"
							}
						],
						"url": {
							"raw": "{{BMSurl}}/crops/{{crop}}/properties/{{trial_instance_property_id}}?programUUID={{api_program_id}}",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"crops",
								"{{crop}}",
								"properties",
								"{{trial_instance_property_id}}"
							],
							"query": [
								{
									"key": "programUUID",
									"value": "{{api_program_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /crops/{cropname}/scales",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b134dc27-22be-4c47-925c-9bb057c739fe",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Note: Checked details of first, middle and last property only for all properties are too many.",
									"pm.test(\"Check accession name scale\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].id).to.eql(\"6110\");",
									"    pm.expect(jsonData[0].name).to.eql(\"Accession name\");",
									"    pm.expect(jsonData[0].description).to.eql(\"Unique accession number or name in a genebank or germplasm collection\");",
									"});",
									"",
									"",
									"pm.test(\"Check LOC_ABBR scale\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[41].id).to.eql(\"6016\");",
									"    pm.expect(jsonData[41].name).to.eql(\"LOC_ABBR\");",
									"    pm.expect(jsonData[41].description).to.eql(\"Location abbreviation (from LOCATION.LABBR)\");",
									"});",
									"",
									"",
									"pm.test(\"Check type scale\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[82].id).to.eql(\"6070\");",
									"    pm.expect(jsonData[82].name).to.eql(\"Type\");",
									"    pm.expect(jsonData[82].description).to.eql(\"Type\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "4fa0f3d8-f2cf-4f26-9e0e-9f46a521f501",
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "X-Auth-Token",
								"type": "text",
								"value": "{{masterToken}}"
							}
						],
						"url": {
							"raw": "{{BMSurl}}/crops/{{crop}}/scales?programUUID={{api_program_id}}",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"crops",
								"{{crop}}",
								"scales"
							],
							"query": [
								{
									"key": "programUUID",
									"value": "{{api_program_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /crops/{cropname}/scales/{id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6ecfaa17-3dab-446f-b29a-f9451cb0a54a",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check number scale\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.id).to.eql(\"6040\");",
									"    pm.expect(jsonData.name).to.eql(\"Number\");",
									"    pm.expect(jsonData.description).to.eql(\"Number\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "28882c6b-3c2c-4d7a-a8e7-376dc901fd58",
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "X-Auth-Token",
								"type": "text",
								"value": "{{masterToken}}"
							}
						],
						"url": {
							"raw": "{{BMSurl}}/crops/{{crop}}/scales/{{number_scale_id}}?programUUID={{api_program_id}}",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"crops",
								"{{crop}}",
								"scales",
								"{{number_scale_id}}"
							],
							"query": [
								{
									"key": "programUUID",
									"value": "{{api_program_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /crops/{cropname}/variables",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "550846ab-5804-4878-9904-ae657aee74a4",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Note: Checked details of first, middle and last property only for all properties are too many.",
									"pm.test(\"Check TRIAL_CODE variable\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].id).to.eql(\"8185\");",
									"    pm.expect(jsonData[0].name).to.eql(\"TRIAL_CODE\");",
									"    pm.expect(jsonData[0].description).to.eql(\"Trial code - assigned (text)\");",
									"    //Check properties",
									"    pm.expect(jsonData[0].property.id).to.eql(\"2100\");",
									"    pm.expect(jsonData[0].property.name).to.eql(\"Trial instance\");",
									"    pm.expect(jsonData[0].property.description).to.eql(\"Identifier for an individual experiment ina multi environemt trial\");",
									"    ",
									"    //Check method",
									"    pm.expect(jsonData[0].method.id).to.eql(\"4030\");",
									"    pm.expect(jsonData[0].method.name).to.eql(\"Assigned\");",
									"    pm.expect(jsonData[0].method.description).to.eql(\"Term, name or id assigned\");    ",
									"    ",
									"   //Check scale",
									"    pm.expect(jsonData[0].scale.id).to.eql(\"6020\");",
									"    pm.expect(jsonData[0].scale.name).to.eql(\"Text\");",
									"    pm.expect(jsonData[0].scale.description).to.eql(\"Text\");    ",
									"    ",
									"    ",
									"   //Check variableTypes",
									"    pm.expect(jsonData[0].variableTypes[0].id).to.eql(\"1806\");",
									"    pm.expect(jsonData[0].variableTypes[0].name).to.eql(\"Environment Detail\");",
									"    pm.expect(jsonData[0].variableTypes[0].description).to.eql(\"Administrative details to be tracked per environment.\");   ",
									"    ",
									"    pm.expect(jsonData[0].variableTypes[1].id).to.eql(\"1805\");",
									"    pm.expect(jsonData[0].variableTypes[1].name).to.eql(\"Study Detail\");",
									"    pm.expect(jsonData[0].variableTypes[1].description).to.eql(\"Administrative details to be tracked per study.\");   ",
									"    ",
									"});",
									"",
									"pm.test(\"Check TRIAL_INSTANCE variable\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[1].id).to.eql(\"8170\");",
									"    pm.expect(jsonData[1].name).to.eql(\"TRIAL_INSTANCE\");",
									"    pm.expect(jsonData[1].description).to.eql(\"Trial instance - enumerated (number)\");",
									"    //Check properties",
									"    pm.expect(jsonData[1].property.id).to.eql(\"2100\");",
									"    pm.expect(jsonData[1].property.name).to.eql(\"Trial instance\");",
									"    pm.expect(jsonData[1].property.description).to.eql(\"Identifier for an individual experiment ina multi environemt trial\");",
									"    ",
									"    //Check method",
									"    pm.expect(jsonData[1].method.id).to.eql(\"4040\");",
									"    pm.expect(jsonData[1].method.name).to.eql(\"Enumerated\");",
									"    pm.expect(jsonData[1].method.description).to.eql(\"Levels enumerated - 1,2,3\");    ",
									"    ",
									"   //Check scale",
									"    pm.expect(jsonData[1].scale.id).to.eql(\"6040\");",
									"    pm.expect(jsonData[1].scale.name).to.eql(\"Number\");",
									"    pm.expect(jsonData[1].scale.description).to.eql(\"Number\");    ",
									"    ",
									"    ",
									"   //Check variableTypes",
									"    pm.expect(jsonData[1].variableTypes[0].id).to.eql(\"1806\");",
									"    pm.expect(jsonData[1].variableTypes[0].name).to.eql(\"Environment Detail\");",
									"    pm.expect(jsonData[1].variableTypes[0].description).to.eql(\"Administrative details to be tracked per environment.\");   ",
									"    ",
									"    pm.expect(jsonData[1].variableTypes[0].id).to.eql(\"1806\");",
									"    pm.expect(jsonData[1].variableTypes[0].name).to.eql(\"Environment Detail\");",
									"    pm.expect(jsonData[1].variableTypes[0].description).to.eql(\"Administrative details to be tracked per environment.\");   ",
									"    ",
									"});",
									"",
									"pm.test(\"Check Trial_Type variable\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[2].id).to.eql(\"8670\");",
									"    pm.expect(jsonData[2].name).to.eql(\"Trial_Type\");",
									"    pm.expect(jsonData[2].description).to.eql(\"Code for trial type or series\");",
									"    //Check properties",
									"    pm.expect(jsonData[2].property.id).to.eql(\"2100\");",
									"    pm.expect(jsonData[2].property.name).to.eql(\"Trial instance\");",
									"    pm.expect(jsonData[2].property.description).to.eql(\"Identifier for an individual experiment ina multi environemt trial\");",
									"    ",
									"    //Check method",
									"    pm.expect(jsonData[2].method.id).to.eql(\"4030\");",
									"    pm.expect(jsonData[2].method.name).to.eql(\"Assigned\");",
									"    pm.expect(jsonData[2].method.description).to.eql(\"Term, name or id assigned\");    ",
									"    ",
									"    ",
									"   //Check scale",
									"    pm.expect(jsonData[2].scale.id).to.eql(\"17280\");",
									"    pm.expect(jsonData[2].scale.name).to.eql(\"Code of Trial_Type\");",
									"    pm.expect(jsonData[2].scale.description).to.eql(\"Code of Trial_Type_generated\");    ",
									"    ",
									"    ",
									"   //Check variableTypes",
									"    pm.expect(jsonData[2].variableTypes[0].id).to.eql(\"1806\");",
									"    pm.expect(jsonData[2].variableTypes[0].name).to.eql(\"Environment Detail\");",
									"    pm.expect(jsonData[2].variableTypes[0].description).to.eql(\"Administrative details to be tracked per environment.\");   ",
									"    ",
									"    pm.expect(jsonData[2].variableTypes[1].id).to.eql(\"1805\");",
									"    pm.expect(jsonData[2].variableTypes[1].name).to.eql(\"Study Detail\");",
									"    pm.expect(jsonData[2].variableTypes[1].description).to.eql(\"Administrative details to be tracked per study.\");   ",
									"    ",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "35eb974e-ffa3-48ad-9107-1e7f3e754008",
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "X-Auth-Token",
								"type": "text",
								"value": "{{masterToken}}"
							}
						],
						"url": {
							"raw": "{{BMSurl}}/crops/{{crop}}/variables?property={{trial_instance_property_id}}&favourite=false&programUUID={{api_program_id}}",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"crops",
								"{{crop}}",
								"variables"
							],
							"query": [
								{
									"key": "property",
									"value": "{{trial_instance_property_id}}"
								},
								{
									"key": "favourite",
									"value": "false"
								},
								{
									"key": "programUUID",
									"value": "{{api_program_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /ontology/{cropname}/variables/{id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "960ffea5-7028-48a5-ac2c-167d8a7bf1cb",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check biomass_yield variable\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.id).to.eql(\"18010\");",
									"    pm.expect(jsonData.name).to.eql(\"Biomas_yield\");",
									"    pm.expect(jsonData.description).to.eql(\"Biomas - dry and weigh (t/ha)\");",
									"    ",
									"   ",
									"    pm.expect(jsonData.property.id).to.eql(\"15010\");",
									"    pm.expect(jsonData.property.name).to.eql(\"Biomass\");",
									"    pm.expect(jsonData.property.description).to.eql(\"Biomass\"); ",
									"    ",
									"    pm.expect(jsonData.method.id).to.eql(\"16000\");",
									"    pm.expect(jsonData.method.name).to.eql(\"Dry and weigh\");",
									"    pm.expect(jsonData.method.description).to.eql(\"Dry and weigh\"); ",
									"    ",
									"    pm.expect(jsonData.scale.id).to.eql(\"17010\");",
									"    pm.expect(jsonData.scale.name).to.eql(\"t/ha\");",
									"    pm.expect(jsonData.scale.description).to.eql(\"Tonnesper hectare\"); ",
									"    pm.expect(jsonData.scale.dataType.name).to.eql(\"Numeric\");",
									"    ",
									"    pm.expect(jsonData.variableTypes[0].id).to.eql(\"1808\");",
									"    pm.expect(jsonData.variableTypes[0].name).to.eql(\"Trait\");",
									"    pm.expect(jsonData.variableTypes[0].description).to.eql(\"Characteristics of a germplasm to be recorded during a study.\"); ",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "1bef1c20-6160-417f-852a-31e708bb244d",
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "X-Auth-Token",
								"type": "text",
								"value": "{{masterToken}}"
							}
						],
						"url": {
							"raw": "{{BMSurl}}/crops/{{crop}}/variables/{{study_biomass_cvterm_id}}?programUUID={{api_program_id}}",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"crops",
								"{{crop}}",
								"variables",
								"{{study_biomass_cvterm_id}}"
							],
							"query": [
								{
									"key": "programUUID",
									"value": "{{api_program_id}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "study-resource",
			"item": [
				{
					"name": "GET ​/crops​/{cropName}​/programs​/{programUUID}​/studies​/{studyId}​/sampled",
					"item": [
						{
							"name": "Verify response code and body when entered valid inputs to study with samples",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "53f2e052-55fd-4417-8f8c-699335ff9c92",
										"exec": [
											"pm.test(\"Status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Check returned boolean value\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.eql(true);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "fb5d725f-3648-4fd4-93bd-61ca3998d877",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/sampled",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"sampled"
									]
								},
								"description": "GET /crops​/{cropName}​/programs​/{programUUID}​/studies​/{studyId}​/sampled"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered valid inputs to study with no samples",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2eeeb780-5196-4c0d-b40c-a45d70fe77c3",
										"exec": [
											"pm.test(\"Status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Check returned boolean value\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.eql(false);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "32a1a3f8-3816-422c-9942-ed5e1b8a0ebb",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{locked_studyId}}/sampled",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{locked_studyId}}",
										"sampled"
									]
								},
								"description": "GET /crops​/{cropName}​/programs​/{programUUID}​/studies​/{studyId}​/sampled"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "dataset-resource",
			"item": [
				{
					"name": "GET ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/instances",
					"item": [
						{
							"name": "Verify response code and body when entered valid parameters",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "be6d6e05-7aae-49d6-9492-fba72f55aa31",
										"exec": [
											"pm.test(\"Status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"//    pm.environment.unset(\"study_instanceId\");",
											"//    pm.environment.set(\"study_instanceId\", jsonData[0].instanceDbId);",
											" ",
											"pm.test(\"Check locationName\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].locationName).to.eql(\"Africa Rice Centre\");",
											"});",
											"",
											"pm.test(\"Check locationAbbreviation\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].locationAbbreviation).to.eql(\"WARDA\");",
											"});",
											"pm.test(\"Check instanceNumber\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].instanceNumber).to.eql(1);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f015e377-d53c-4cc4-971c-f3a8507ab4a0",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"value": "{{masterToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_subobs_datasetId}}/instances",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_subobs_datasetId}}",
										"instances"
									]
								},
								"description": "GET /crops/{crop}/studies/{studyId}/datasets/{datasetId}/instances"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid crop",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8a093fea-7499-49c6-a61b-11bbcf5f4842",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Check error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Invalid crop \"+pm.environment.get(\"invalidCrop\")+\" for URL:/crops/\"+pm.environment.get(\"invalidCrop\")+\"/programs/\"+pm.environment.get(\"api_program_id\")+\"/studies/\"+pm.environment.get(\"studyId\")+\"/datasets/\"+pm.environment.get(\"study_subobs_datasetId\")+\"/instances\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a3643dfe-478f-4a1c-b569-52546a6ab108",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"value": "{{masterToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{invalidCrop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_subobs_datasetId}}/instances",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{invalidCrop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_subobs_datasetId}}",
										"instances"
									]
								},
								"description": "GET /crops/{crop}/studies/{studyId}/datasets/{datasetId}/instances"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid program",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a008dfa3-e9fc-45ad-a4b9-db5ea9a028c7",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Check error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Invalid program: invalid for crop: \"+pm.environment.get(\"crop\")+\" for service with path /crops/testdata/programs/invalid/studies/\"+pm.environment.get(\"studyId\")+\"/datasets/\"+pm.environment.get(\"study_subobs_datasetId\")+\"/instances\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e750495f-634c-42aa-8131-d7b9ec51c864",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"value": "{{masterToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/invalid/studies/{{studyId}}/datasets/{{study_subobs_datasetId}}/instances",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"invalid",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_subobs_datasetId}}",
										"instances"
									]
								},
								"description": "GET /crops/{crop}/studies/{studyId}/datasets/{datasetId}/instances"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered non-existing studyId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f53cd226-2093-44c7-8d08-067c5f667863",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"pm.test(\"Verify error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Study does not exist\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "41217efa-5b03-4ecd-b824-faf868492d00",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}//programs/{{api_program_id}}/studies/{{non_existing_study_id}}/datasets/{{study_subobs_datasetId}}/instances",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{non_existing_study_id}}",
										"datasets",
										"{{study_subobs_datasetId}}",
										"instances"
									]
								},
								"description": "GET /crops/{crop}/studies/{studyId}/datasets/{datasetId}/instances"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered non-existing datasetId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f583c707-cdd0-4fe2-bae7-93c7fce59e88",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"pm.test(\"Verify error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Dataset does not exist\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "7a39d74b-62ef-4fa3-ac32-940ca86125b7",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{non_existing_dataset_id}}/instances",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{non_existing_dataset_id}}",
										"instances"
									]
								},
								"description": "GET /crops/{crop}/studies/{studyId}/datasets/{datasetId}/instances"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered datasetId that is not associated to the studyId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0c8a87d6-7b07-4584-875c-2e1cc879a22e",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Verify error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Specified dataset \"+ pm.environment.get(\"locked_study_subobs_datasetId\")+\" does not belong to the study \"+pm.environment.get(\"studyId\"));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "4e798fef-7114-448c-9993-6dd5a2ace383",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{locked_study_subobs_datasetId}}/instances",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{locked_study_subobs_datasetId}}",
										"instances"
									]
								},
								"description": "GET /crops/{crop}/studies/{studyId}/datasets/{datasetId}/instances"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered string input to studyId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a3ff5893-977c-410b-a924-54d36a91901e",
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"pm.test(\"Verify error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"For input string: \\\"asd\\\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c3336e63-34cb-4cd0-9ee2-0f8137ba8fcb",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{string_input}}/datasets/{{study_subobs_datasetId}}/instances",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{string_input}}",
										"datasets",
										"{{study_subobs_datasetId}}",
										"instances"
									]
								},
								"description": "GET /crops/{crop}/studies/{studyId}/datasets/{datasetId}/instances"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered string input to datasetId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "23cddb23-ac3d-4698-81fb-878298ee65ed",
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"pm.test(\"Verify error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"For input string: \\\"asd\\\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ca4dfc1f-2056-4cdb-a08a-f2925e989f4c",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{string_input}}/instances",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{string_input}}",
										"instances"
									]
								},
								"description": "GET /crops/{crop}/studies/{studyId}/datasets/{datasetId}/instances"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "GET /crops/{crop}/programs​/{programUUID}​/studies/{studyId}/datasets",
					"item": [
						{
							"name": "Verify response code and body when entered crop and studyId only",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8e1c8dd8-13a4-4f13-8802-bc1edc5d0b28",
										"exec": [
											"pm.test(\"Status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Check env dataset id\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].datasetId).to.equal(parseInt(pm.environment.get(\"study_env_id\")));",
											"});",
											"pm.test(\"Check env plot dataset id\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[1].datasetId).to.eql(parseInt(pm.environment.get(\"study_plot_datasetId\")));",
											"});",
											"pm.test(\"Check subobs dataset id\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[2].datasetId).to.eql(parseInt(pm.environment.get(\"study_subobs_datasetId\")));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f764214b-2a71-4044-beae-e989073cd223",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"value": "{{masterToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets"
									]
								},
								"description": "GET /crops/{crop}/studies/{studyId}/datasets\n"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid crop",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "639af60c-831c-4f05-97e9-853e69c0794d",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Check error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Invalid crop \"+pm.environment.get(\"invalidCrop\")+\" for URL:/crops/\"+pm.environment.get(\"invalidCrop\")+\"/programs/\"+pm.environment.get(\"api_program_id\")+\"/studies/\"+pm.environment.get(\"studyId\")+\"/datasets\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c6e5064d-de88-4dbb-b0d8-61a71b099a8a",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{invalidCrop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{invalidCrop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets"
									]
								},
								"description": "GET /crops/{crop}/studies/{studyId}/datasets\n"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid program",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4a5bde61-7c39-4679-85b5-c5f4da774f4e",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Check error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Invalid program: invalid for crop: \"+pm.environment.get(\"crop\")+\" for service with path /crops/\"+pm.environment.get(\"crop\")+\"/programs/invalid/studies/\"+pm.environment.get(\"studyId\")+\"/datasets\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "94671b1a-dddc-419b-b39a-b6d6f419558c",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/invalid/studies/{{studyId}}/datasets",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"invalid",
										"studies",
										"{{studyId}}",
										"datasets"
									]
								},
								"description": "GET /crops/{crop}/studies/{studyId}/datasets\n"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered non-existing studyId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f6460172-c0e1-44e5-ac11-ad9c97180d1b",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"pm.test(\"Your test name\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.equal(\"Study does not exist\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "39504106-6a17-4ee0-a473-1bf736b64157",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{non_existing_study_id}}/datasets",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{non_existing_study_id}}",
										"datasets"
									]
								},
								"description": "GET /crops/{crop}/studies/{studyId}/datasets\n"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered multiple datasetTypeIds",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fcfc9859-52cc-4e57-99a0-8ad2f4d9788a",
										"exec": [
											"pm.test(\"Status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Check env dataset id\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].datasetId).to.equal(parseInt(pm.environment.get(\"study_env_id\")));",
											"});",
											"pm.test(\"Check env plot dataset id\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[1].datasetId).to.eql(parseInt(pm.environment.get(\"study_plot_datasetId\")));",
											"});",
											"pm.test(\"Check subobs dataset id\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[2].datasetId).to.eql(parseInt(pm.environment.get(\"study_subobs_datasetId\")));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b3c42892-4518-4526-98e4-c32de7303107",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets?datasetTypeIds={{env_datasetTypeId}}, {{plot_datasetTypeId}},{{plant_subobs_datasetTypeId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets"
									],
									"query": [
										{
											"key": "datasetTypeIds",
											"value": "{{env_datasetTypeId}}, {{plot_datasetTypeId}},{{plant_subobs_datasetTypeId}}"
										}
									]
								},
								"description": "GET /crops/{crop}/studies/{studyId}/datasets\n"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered environment datasetTypeId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3122e028-fd8d-4a6b-aea4-bccaa91decd0",
										"exec": [
											"pm.test(\"Status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Check env dataset id\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].datasetId).to.equal(parseInt(pm.environment.get(\"study_env_id\")));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f3685835-bd6f-4eeb-900b-31d787e4c71e",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets?datasetTypeIds={{env_datasetTypeId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets"
									],
									"query": [
										{
											"key": "datasetTypeIds",
											"value": "{{env_datasetTypeId}}"
										}
									]
								},
								"description": "GET /crops/{crop}/studies/{studyId}/datasets\n"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered plot datasetTypeId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "dc260331-d573-4c05-ab60-2b726d2991c7",
										"exec": [
											"pm.test(\"Status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Check env plot dataset id\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].datasetId).to.eql(parseInt(pm.environment.get(\"study_plot_datasetId\")));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "02ccc11d-bbd1-408f-af4c-e42e5414b6a3",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets?datasetTypeIds={{plot_datasetTypeId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets"
									],
									"query": [
										{
											"key": "datasetTypeIds",
											"value": "{{plot_datasetTypeId}}"
										}
									]
								},
								"description": "GET /crops/{crop}/studies/{studyId}/datasets\n"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered means datasetTypeId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "843fcdd6-173f-41ed-8c12-6faf4909346f",
										"exec": [
											"pm.test(\"Status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Check means dataset id\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].datasetId).to.equal(parseInt(pm.environment.get(\"trialMeansDatasetId\")));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "00f76066-8af1-49c5-9f35-70960894cc04",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{trialStudyId}}/datasets?datasetTypeIds={{means_datasetTypeId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{trialStudyId}}",
										"datasets"
									],
									"query": [
										{
											"key": "datasetTypeIds",
											"value": "{{means_datasetTypeId}}"
										}
									]
								},
								"description": "GET /crops/{crop}/studies/{studyId}/datasets\n"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered subobs datasetTypeId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d6f32744-b9ae-4f40-81c1-5f513d9eb48b",
										"exec": [
											"pm.test(\"Status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Check subobs dataset id\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].datasetId).to.eql(parseInt(pm.environment.get(\"study_subobs_datasetId\")));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f6f56d47-fc73-4442-9979-751a6016d4b4",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets?datasetTypeIds={{plant_subobs_datasetTypeId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets"
									],
									"query": [
										{
											"key": "datasetTypeIds",
											"value": "{{plant_subobs_datasetTypeId}}"
										}
									]
								},
								"description": "GET /crops/{crop}/studies/{studyId}/datasets\n"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered string input to  studyId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "558d2b29-104a-4b28-8a04-1d7554128d14",
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"pm.test(\"Verify error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"For input string: \\\"asd\\\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "50fa7b1b-143e-4617-920c-f63b5516cbad",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{string_input}}/datasets",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{string_input}}",
										"datasets"
									]
								},
								"description": "GET /crops/{crop}/studies/{studyId}/datasets\n"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered string input to  datasetTypeId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7323deaa-4210-4ed4-9f76-e4b449ec3d6a",
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"pm.test(\"Verify error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"For input string: \\\"asd\\\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f8e558ee-f6fd-4f71-aa23-600ddf6ff775",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets?datasetTypeIds={{string_input}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets"
									],
									"query": [
										{
											"key": "datasetTypeIds",
											"value": "{{string_input}}"
										}
									]
								},
								"description": "GET /crops/{crop}/studies/{studyId}/datasets\n"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid  datasetTypeId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e0888218-5b54-4760-9d17-698a8b3cf5e9",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"//Add other assertions here",
											"pm.test(\"Verify error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.equal(\"9,999 is not a valid dataset type\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "8ac48b39-f0bc-4ee0-afaf-841ebc72c6e1",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets?datasetTypeIds={{non_existing_datasetTypeId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets"
									],
									"query": [
										{
											"key": "datasetTypeIds",
											"value": "{{non_existing_datasetTypeId}}"
										}
									]
								},
								"description": "GET /crops/{crop}/studies/{studyId}/datasets\n"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "GET/{crop}/programs​/{programUUID}​/studies/{studyId}/datasets/{datasetId}",
					"item": [
						{
							"name": "Verify response code and body when entered of environment datasetId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c84f046b-d9e4-47cb-a0bd-6366baf49531",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Verify returned studyId\", function () {",
											"    var jsonData = pm.response.json();",
											"    var studyId = Number(pm.environment.get(\"studyId\"));",
											"    pm.expect(jsonData.studyId).to.eql(studyId);",
											"});",
											"pm.test(\"Verify returned datasetId\", function () {",
											"    var jsonData = pm.response.json();",
											"    var datasetId = Number(pm.environment.get(\"study_env_id\"));",
											"    pm.expect(jsonData.datasetId).to.eql(datasetId);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "27a94164-1fc4-4688-af38-d2f3760faacf",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_env_id}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_env_id}}"
									]
								},
								"description": "GET/{crop}/studies/{studyId}/datasets/{datasetId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered of plot datasetId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c20b01b7-7fd4-4e05-a86a-34969eb0c3e6",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Verify returned studyId\", function () {",
											"    var jsonData = pm.response.json();",
											"    var studyId = Number(pm.environment.get(\"studyId\"));",
											"    pm.expect(jsonData.studyId).to.eql(studyId);",
											"});",
											"pm.test(\"Verify returned datasetId\", function () {",
											"    var jsonData = pm.response.json();",
											"    var datasetId = Number(pm.environment.get(\"study_plot_datasetId\"));",
											"    pm.expect(jsonData.datasetId).to.eql(datasetId);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "7d782431-9713-424d-be39-39fb28dc15cb",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_datasetId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_datasetId}}"
									]
								},
								"description": "GET/{crop}/studies/{studyId}/datasets/{datasetId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered of sub-observation datasetId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ea436ff1-d219-4572-ac6d-0b751504ed2e",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Verify returned studyId\", function () {",
											"    var jsonData = pm.response.json();",
											"    var studyId = Number(pm.environment.get(\"studyId\"));",
											"    pm.expect(jsonData.studyId).to.eql(studyId);",
											"});",
											"pm.test(\"Verify returned datasetId\", function () {",
											"    var jsonData = pm.response.json();",
											"    var datasetId = Number(pm.environment.get(\"study_subobs_datasetId\"));",
											"    pm.expect(jsonData.datasetId).to.eql(datasetId);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a5639f76-9960-4084-9a23-20f764b3bb5c",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_subobs_datasetId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_subobs_datasetId}}"
									]
								},
								"description": "GET/{crop}/studies/{studyId}/datasets/{datasetId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered of means datasetId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "caf7f03d-f72a-4223-9aa2-f0fa8e9170be",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"//Other assertions to follow"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "3bc2a7b1-c6c4-4f65-b22b-bdd5f38280cf",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{trialStudyId}}/datasets/{{trialMeansDatasetId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{trialStudyId}}",
										"datasets",
										"{{trialMeansDatasetId}}"
									]
								},
								"description": "GET/{crop}/studies/{studyId}/datasets/{datasetId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid crop",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "56aae794-25b8-437d-a78c-1f3dc1b91ba6",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Your test name\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.equal(\"Invalid crop \"+pm.environment.get(\"invalidCrop\")+\" for URL:/crops/\"+pm.environment.get(\"invalidCrop\")+\"/programs/\"+pm.environment.get(\"api_program_id\")+\"/studies/\"+pm.environment.get(\"studyId\")+\"/datasets/\"+pm.environment.get(\"study_plot_datasetId\"));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "4985229b-97a0-4037-978c-6a376141cdb3",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{invalidCrop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_datasetId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{invalidCrop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_datasetId}}"
									]
								},
								"description": "GET/{crop}/studies/{studyId}/datasets/{datasetId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid program",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "01f6f406-c871-4218-bb6c-9d6d452dcf6d",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Your test name\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.equal(\"Invalid crop \"+pm.environment.get(\"invalidCrop\")+\" for URL:/crops/\"+pm.environment.get(\"invalidCrop\")+\"/programs/\"+pm.environment.get(\"api_program_id\")+\"/studies/\"+pm.environment.get(\"studyId\")+\"/datasets/\"+pm.environment.get(\"study_plot_datasetId\"));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0a093186-4d22-47ef-97fc-c50cf0bc40b3",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{invalidCrop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_datasetId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{invalidCrop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_datasetId}}"
									]
								},
								"description": "GET/{crop}/studies/{studyId}/datasets/{datasetId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered non-existing studyId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fdf3b500-1acc-41a3-8762-ca6be75b8adf",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"pm.test(\"Your test name\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.equal(\"Study does not exist\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1e7cf6ea-9198-4bb5-b942-bfc703bb5e6d",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{non_existing_study_id}}/datasets/{{study_plot_datasetId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{non_existing_study_id}}",
										"datasets",
										"{{study_plot_datasetId}}"
									]
								},
								"description": "GET/{crop}/studies/{studyId}/datasets/{datasetId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered non-existing datasetId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e9e77bd0-871c-49db-8e25-f9fb66ca6604",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"pm.test(\"Verify returned studyId\", function () {",
											"    var jsonData = pm.response.json();",
											"//    var studyId = Number(pm.environment.get(\"studyId\"));",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Dataset does not exist\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b0043ed3-0403-49a3-bbd5-251831442d73",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{non_existing_dataset_id}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{non_existing_dataset_id}}"
									]
								},
								"description": "GET/{crop}/studies/{studyId}/datasets/{datasetId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered datasetId that does not belong to the study",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "28c48432-2c03-4cf0-b34b-e1369974f426",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Check error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Specified dataset \"+pm.environment.get(\"study_plot_dataset_id_noPhenoCount\")+\" does not belong to the study \"+pm.environment.get(\"studyId\"));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c0475454-2cb6-4e20-a101-c7cde40862da",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_dataset_id_noPhenoCount}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_dataset_id_noPhenoCount}}"
									]
								},
								"description": "GET/{crop}/studies/{studyId}/datasets/{datasetId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered string input to studyId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c2fbb377-6cfd-434b-b000-a04ae39c8049",
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"pm.test(\"Verify returned studyId\", function () {",
											"    var jsonData = pm.response.json();",
											"//    var studyId = Number(pm.environment.get(\"studyId\"));",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"For input string: \\\"asd\\\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b6c36bcb-c4e8-46b6-9c9f-b2a961a185b6",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{string_input}}/datasets/{{study_subobs_datasetId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{string_input}}",
										"datasets",
										"{{study_subobs_datasetId}}"
									]
								},
								"description": "GET/{crop}/studies/{studyId}/datasets/{datasetId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered string input to datasetId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1462f517-b89c-4597-bf6d-f9286fc90a3c",
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"pm.test(\"Verify returned studyId\", function () {",
											"    var jsonData = pm.response.json();",
											"//    var studyId = Number(pm.environment.get(\"studyId\"));",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"For input string: \\\"asd\\\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0aa71d8c-690c-42ae-af2d-27ab76bd6279",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{string_input}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{string_input}}"
									]
								},
								"description": "GET/{crop}/studies/{studyId}/datasets/{datasetId}"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "HEAD ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/observationUnits​/{instanceId}",
					"item": [
						{
							"name": "Retrieve phenotype counts for a plot dataset",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c0b99624-104c-47b0-9324-a3ed7e8feaad",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"X-Total-Count is correct\", function () {",
											"    pm.response.to.be.header(\"X-Total-Count\", \"80\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c00b2704-15fe-415e-9efd-7f69ddf4ab7d",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_datasetId}}/observationUnits/{{study_instanceId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"observationUnits",
										"{{study_instanceId}}"
									]
								},
								"description": "HEAD /crops/{crop}/studies/{studyId}/datasets/{datasetId}/observationUnits/{instanceId}"
							},
							"response": []
						},
						{
							"name": "Retrieve phenotype counts for a subobservation dataset",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b6b31ce3-6964-4213-8ceb-9be1f774b808",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"X-Total-Count is correct\", function () {",
											"    pm.response.to.be.header(\"X-Total-Count\", \"110\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "33a8e35f-77a5-4e11-9060-f8387173da20",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_subobs2_datasetId}}/observationUnits/{{study_instanceId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_subobs2_datasetId}}",
										"observationUnits",
										"{{study_instanceId}}"
									]
								},
								"description": "HEAD /crops/{crop}/studies/{studyId}/datasets/{datasetId}/observationUnits/{instanceId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and phenotype count for a dataset with no existing phenotypes",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ea5a9500-596e-48e7-97cd-feb21472d37d",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"X-Total-Count is correct\", function () {",
											"    pm.response.to.be.header(\"X-Total-Count\", \"0\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "7169151b-8c21-49e1-9faa-ad74e70caf0a",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId_noPhenoCount}}/datasets/{{study_plot_dataset_id_noPhenoCount}}/observationUnits/{{study_noPheno_instandId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId_noPhenoCount}}",
										"datasets",
										"{{study_plot_dataset_id_noPhenoCount}}",
										"observationUnits",
										"{{study_noPheno_instandId}}"
									]
								},
								"description": "HEAD /crops/{crop}/studies/{studyId}/datasets/{datasetId}/observationUnits/{instanceId}"
							},
							"response": []
						},
						{
							"name": "Retrieve phenotype counts for a plot dataset with invalid crop",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c1589c45-8248-4fd4-9b26-38b20fb18391",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9883878b-dc79-4a82-9aaf-af526a5e3bad",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{invalidCrop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_datasetId}}/observationUnits/{{study_instanceId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{invalidCrop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"observationUnits",
										"{{study_instanceId}}"
									]
								},
								"description": "HEAD /crops/{crop}/studies/{studyId}/datasets/{datasetId}/observationUnits/{instanceId}"
							},
							"response": []
						},
						{
							"name": "Retrieve phenotype counts for a plot dataset with invalid program",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ac0276af-ac9e-42f4-891f-c6ef1025ff5c",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "37596d3c-2da0-49b9-b69f-111fdaa001dd",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/invalid/studies/{{studyId}}/datasets/{{study_plot_datasetId}}/observationUnits/{{study_instanceId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"invalid",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"observationUnits",
										"{{study_instanceId}}"
									]
								},
								"description": "HEAD /crops/{crop}/studies/{studyId}/datasets/{datasetId}/observationUnits/{instanceId}"
							},
							"response": []
						},
						{
							"name": "Verify response code when entered non-existing studyId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "58197167-1dc4-4f54-b0b6-1670f879fc73",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "48766d63-eeed-45a6-bdda-38af29537c71",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{non_existing_study_id}}/datasets/{{study_plot_datasetId}}/observationUnits/{{study_instanceId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{non_existing_study_id}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"observationUnits",
										"{{study_instanceId}}"
									]
								},
								"description": "HEAD /crops/{crop}/studies/{studyId}/datasets/{datasetId}/observationUnits/{instanceId}"
							},
							"response": []
						},
						{
							"name": "Verify response code when entered non-existing datasetId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "84115973-7ef9-430f-b2ee-8259982a3f19",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e04846ad-2dd9-4d8c-b5e5-e5bef76968e6",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{non_existing_dataset_id}}/observationUnits/{{study_instanceId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{non_existing_dataset_id}}",
										"observationUnits",
										"{{study_instanceId}}"
									]
								},
								"description": "HEAD /crops/{crop}/studies/{studyId}/datasets/{datasetId}/observationUnits/{instanceId}"
							},
							"response": []
						},
						{
							"name": "Verify response code when entered datasetId that does not belong to the study",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1457b4aa-e8d4-407e-a933-072cecf8664e",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f5514deb-9bf6-486d-a8bf-6a672f1dff0b",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_dataset_id_noPhenoCount}}/observationUnits/{{study_instanceId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_dataset_id_noPhenoCount}}",
										"observationUnits",
										"{{study_instanceId}}"
									]
								},
								"description": "HEAD /crops/{crop}/studies/{studyId}/datasets/{datasetId}/observationUnits/{instanceId}"
							},
							"response": []
						},
						{
							"name": "Verify response code when entered invalid studyId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "258a8779-5129-4643-8037-722e38d933ed",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d65eb37b-f1bb-4332-aeff-afb9c504bf43",
										"exec": [
											"pm.sendRequest({",
											"    url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",",
											"    method: 'POST',",
											"    header: {",
											"        'Content-Type': 'application/json'",
											"    },",
											"    body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify(",
											"            { ",
											"                \"username\": \"admin\",",
											"                \"password\": \"@dm1N\",",
											"                \"grant_type\": \"\",",
											"                \"client_id\": \"\"",
											"            ",
											"        })",
											"    }",
											"}, function (err, res) {",
											"    var jsonData = res.json();",
											"    pm.environment.set(\"masterToken\",jsonData.access_token);",
											"",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{invalid_studyId}}/datasets/{{study_plot_datasetId}}/observationUnits/{{study_instanceId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{invalid_studyId}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"observationUnits",
										"{{study_instanceId}}"
									]
								},
								"description": "HEAD /crops/{crop}/studies/{studyId}/datasets/{datasetId}/observationUnits/{instanceId}"
							},
							"response": []
						},
						{
							"name": "Verify response code when entered invalid datasetId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "234fb9c5-0fc8-4ccf-aa54-2645d371b16b",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2bed28b7-e459-4466-b102-8a66bc7c4e1a",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{studyId}}/observationUnits/{{study_instanceId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{studyId}}",
										"observationUnits",
										"{{study_instanceId}}"
									]
								},
								"description": "HEAD /crops/{crop}/studies/{studyId}/datasets/{datasetId}/observationUnits/{instanceId}"
							},
							"response": []
						},
						{
							"name": "Verify response code when entered invalid instanceId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "66061e1a-c0e1-4432-be7e-a9d8eb8a2f78",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "6dcdf271-04d2-4624-a762-af123995df7b",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_datasetId}}/observationUnits/{{studyId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"observationUnits",
										"{{studyId}}"
									]
								},
								"description": "HEAD /crops/{crop}/studies/{studyId}/datasets/{datasetId}/observationUnits/{instanceId}"
							},
							"response": []
						},
						{
							"name": "Verify response code when entered string input to studyId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0e15df24-0110-467e-bcdf-d40f9d0d1bc6",
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "92719f08-cf1a-450d-9ea8-9979fe2840d8",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{string_input}}/datasets/{{study_plot_datasetId}}/observationUnits/{{study_instanceId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{string_input}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"observationUnits",
										"{{study_instanceId}}"
									]
								},
								"description": "HEAD /crops/{crop}/studies/{studyId}/datasets/{datasetId}/observationUnits/{instanceId}"
							},
							"response": []
						},
						{
							"name": "Verify response code when entered string input to datasetId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "50c87306-859a-45ed-b512-7db7c0b252e6",
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e47d4813-037f-4c88-aea5-2c0a19384868",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{string_input}}/observationUnits/{{study_instanceId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{string_input}}",
										"observationUnits",
										"{{study_instanceId}}"
									]
								},
								"description": "HEAD /crops/{crop}/studies/{studyId}/datasets/{datasetId}/observationUnits/{instanceId}"
							},
							"response": []
						},
						{
							"name": "Verify response code when entered string input to instanceId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7e11fd97-db9d-4bcb-8076-717e90ae32ed",
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0fad61ff-868e-470a-aecc-43fb7175bcb8",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_datasetId}}/observationUnits/{{string_input}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"observationUnits",
										"{{string_input}}"
									]
								},
								"description": "HEAD /crops/{crop}/studies/{studyId}/datasets/{datasetId}/observationUnits/{instanceId}"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "GET/crops/{cropName}/programs​/{programUUID}​/studies/{studyId}/datasets/{datasetId}/observationUnits/table/columns",
					"item": [
						{
							"name": "Verify response code and body when entered valid parameters",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "dab534ea-5b10-45e8-8b7c-ff92aadca75f",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Check TRIAL INSTANCE term id and name\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].termId).to.equal(8170);",
											"    pm.expect(jsonData[0].name).to.equal(\"TRIAL_INSTANCE\");",
											"});",
											"",
											"pm.test(\"Check ENTRY TYPE term id and name\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[1].termId).to.equal(8255);",
											"    pm.expect(jsonData[1].name).to.equal(\"ENTRY_TYPE\");",
											"});",
											"",
											"pm.test(\"Check GID term id and name\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[2].termId).to.equal(8240);",
											"    pm.expect(jsonData[2].name).to.equal(\"GID\");",
											"});",
											"",
											"pm.test(\"Check DESIGNATION term id and name\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[3].termId).to.equal(8250);",
											"    pm.expect(jsonData[3].name).to.equal(\"DESIGNATION\");",
											"});",
											"",
											"pm.test(\"Check ENTRY_NO term id and name\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[4].termId).to.equal(8230);",
											"    pm.expect(jsonData[4].name).to.equal(\"ENTRY_NO\");",
											"});",
											"",
											"pm.test(\"Check OBS_UNIT_ID term id and name\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[5].termId).to.equal(8201);",
											"    pm.expect(jsonData[5].name).to.equal(\"OBS_UNIT_ID\");",
											"});",
											"",
											"",
											"pm.test(\"Check PLOT_NO term id and name\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[6].termId).to.equal(8200);",
											"    pm.expect(jsonData[6].name).to.equal(\"PLOT_NO\");",
											"});",
											"",
											"pm.test(\"Check PLANT_NO term id and name\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[7].termId).to.equal(8206);",
											"    pm.expect(jsonData[7].name).to.equal(\"PLANT_NO\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "948759f9-6eaf-4b94-b6a5-e1956e874f52",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_subobs_datasetId}}/observationUnits/table/columns",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_subobs_datasetId}}",
										"observationUnits",
										"table",
										"columns"
									]
								},
								"description": "GET /crops/{crop}/studies/{studyId}/datasets/{datasetId}/observationUnits/table/columns"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid crop",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1cb10290-6d2b-48bd-970f-4fcfa96e056b",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Check error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Invalid crop \"+pm.environment.get(\"invalidCrop\")+\" for URL:/crops/\"+pm.environment.get(\"invalidCrop\")+\"/programs/\"+pm.environment.get(\"api_program_id\")+\"/studies/\"+pm.environment.get(\"studyId\")+\"/datasets/\"+pm.environment.get(\"study_subobs_datasetId\")+\"/observationUnits/table/columns\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2a672564-dd16-49dc-993a-3a810b092977",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{invalidCrop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_subobs_datasetId}}/observationUnits/table/columns",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{invalidCrop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_subobs_datasetId}}",
										"observationUnits",
										"table",
										"columns"
									]
								},
								"description": "GET /crops/{crop}/studies/{studyId}/datasets/{datasetId}/observationUnits/table/columns"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid program",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1c8aac40-5b94-4b52-82d3-a0fca2a75bac",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Check error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Invalid program: invalid for crop: \"+pm.environment.get(\"crop\")+\" for service with path /crops/\"+pm.environment.get(\"crop\")+\"/programs/invalid/studies/\"+pm.environment.get(\"studyId\")+\"/datasets/\"+pm.environment.get(\"study_subobs_datasetId\")+\"/observationUnits/table/columns\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "cde3ee1f-318b-4f09-a9b7-6fff7509dab0",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/invalid/studies/{{studyId}}/datasets/{{study_subobs_datasetId}}/observationUnits/table/columns",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"invalid",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_subobs_datasetId}}",
										"observationUnits",
										"table",
										"columns"
									]
								},
								"description": "GET /crops/{crop}/studies/{studyId}/datasets/{datasetId}/observationUnits/table/columns"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered non-existing studyId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b808858e-7215-4c00-bf43-ff891b4e0afa",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"pm.test(\"Verify error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Study does not exist\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "06a9e26b-6285-4338-9789-ea76dff79284",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{non_existing_study_id}}/datasets/{{study_subobs_datasetId}}/observationUnits/table/columns",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{non_existing_study_id}}",
										"datasets",
										"{{study_subobs_datasetId}}",
										"observationUnits",
										"table",
										"columns"
									]
								},
								"description": "GET /crops/{crop}/studies/{studyId}/datasets/{datasetId}/observationUnits/table/columns"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered non-existing datasetId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7139cdfa-ddef-44dc-b986-21a20f49ce27",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"pm.test(\"Verify error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Dataset does not exist\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b4fd024b-942f-4404-a551-9f887163c391",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{non_existing_dataset_id}}/observationUnits/table/columns",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{non_existing_dataset_id}}",
										"observationUnits",
										"table",
										"columns"
									]
								},
								"description": "GET /crops/{crop}/studies/{studyId}/datasets/{datasetId}/observationUnits/table/columns"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered datasetId that is not associated to the studyId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "adea63e8-b4d6-42c0-8544-edb4119e05ef",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Verify error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Specified dataset \"+ pm.environment.get(\"locked_study_subobs_datasetId\")+ \" does not belong to the study \"+ pm.environment.get(\"studyId\"));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9417043d-9239-4f9a-96c3-a2f9b9ff2a11",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{locked_study_subobs_datasetId}}/observationUnits/table/columns",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{locked_study_subobs_datasetId}}",
										"observationUnits",
										"table",
										"columns"
									]
								},
								"description": "GET /crops/{crop}/studies/{studyId}/datasets/{datasetId}/observationUnits/table/columns"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered string input to studyId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "013597b5-c077-4530-8c97-314a85092243",
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"pm.test(\"Verify error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"For input string: \\\"asd\\\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "6267d559-f0bc-4867-9555-799dff9bdac6",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{string_input}}/datasets/{{study_subobs_datasetId}}/observationUnits/table/columns",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{string_input}}",
										"datasets",
										"{{study_subobs_datasetId}}",
										"observationUnits",
										"table",
										"columns"
									]
								},
								"description": "GET /crops/{crop}/studies/{studyId}/datasets/{datasetId}/observationUnits/table/columns"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered string input to datasetId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f137953f-7406-4c27-a0ab-25384fa087aa",
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"pm.test(\"Verify error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"For input string: \\\"asd\\\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "7abcfaef-0335-42d7-8c7a-bbde7dbfc641",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{string_input}}/observationUnits/table/columns",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{string_input}}",
										"observationUnits",
										"table",
										"columns"
									]
								},
								"description": "GET /crops/{crop}/studies/{studyId}/datasets/{datasetId}/observationUnits/table/columns"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "GET ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/variables​/{variableTypeId}",
					"item": [
						{
							"name": "Verify response code and body when entered valid inputs and trait variableTypeId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "af78aaf4-60a0-4938-95d8-ad5e5fe22db9",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check returned variable id\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].id).to.equal(18100);",
											"    pm.expect(jsonData[1].id).to.equal(18000);",
											"    pm.expect(jsonData[2].id).to.equal(18010);",
											"});",
											"",
											"pm.test(\"Check returned variable names\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].name).to.equal(\"WeedPressure_number\");",
											"    pm.expect(jsonData[1].name).to.equal(\"Grain_yield\");",
											"    pm.expect(jsonData[2].name).to.equal(\"Biomas_yield\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "bb3db879-485b-4203-9b2c-b51c483273ef",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"value": "{{masterToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_datasetId}}/variables/{{Trait_cvtermId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"variables",
										"{{Trait_cvtermId}}"
									]
								},
								"description": "GET /crops/{crop}/studies/{studyId}/datasets/{datasetId}/variables/{variableTypeId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered valid inputs and environment detail variableTypeId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "943c27e1-37c2-4ac0-a7ef-976327f77619",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check returned variable id\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].id).to.equal(8170);",
											"});",
											"",
											"pm.test(\"Check returned variable name\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].name).to.equal(\"TRIAL_INSTANCE\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b93e2724-67ee-4cf7-859b-8f5f2a498e91",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_datasetId}}/variables/{{variableTypeId_env_detail}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"variables",
										"{{variableTypeId_env_detail}}"
									]
								},
								"description": "GET /crops/{crop}/studies/{studyId}/datasets/{datasetId}/variables/{variableTypeId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered valid inputs and experimental design variableTypeId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bdde5a6a-915d-40a7-a56c-c6bc8f215570",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check returned variable id\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].id).to.equal(8200);",
											"});",
											"",
											"pm.test(\"Check returned variable name\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].name).to.equal(\"PLOT_NO\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "348ba99a-9db1-41db-b071-8c388b298596",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_datasetId}}/variables/{{variableTypeId_exp_design}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"variables",
										"{{variableTypeId_exp_design}}"
									]
								},
								"description": "GET /crops/{crop}/studies/{studyId}/datasets/{datasetId}/variables/{variableTypeId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered valid inputs and germplasm descriptor variableTypeId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0cd3c14d-8626-4d3d-b95a-ecfea9e44944",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check returned variable id\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].id).to.equal(8255);",
											"    pm.expect(jsonData[1].id).to.equal(8240);",
											"    pm.expect(jsonData[2].id).to.equal(8250);",
											"    pm.expect(jsonData[3].id).to.equal(8230);",
											"    pm.expect(jsonData[4].id).to.equal(8201);",
											"});",
											"",
											"pm.test(\"Check returned variable name\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].name).to.equal(\"ENTRY_TYPE\");",
											"    pm.expect(jsonData[1].name).to.equal(\"GID\");",
											"    pm.expect(jsonData[2].name).to.equal(\"DESIGNATION\");",
											"    pm.expect(jsonData[3].name).to.equal(\"ENTRY_NO\");",
											"    pm.expect(jsonData[4].name).to.equal(\"OBS_UNIT_ID\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a0ceca9f-0934-4fd1-90d2-000be87bf3d3",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_datasetId}}/variables/{{variableTypeId_germ_desc}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"variables",
										"{{variableTypeId_germ_desc}}"
									]
								},
								"description": "GET /crops/{crop}/studies/{studyId}/datasets/{datasetId}/variables/{variableTypeId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered valid inputs and observation units variableTypeId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "76042776-f4d0-4463-93a8-7ded77d08eec",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check returned variable id\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].id).to.equal(8206);",
											"});",
											"",
											"pm.test(\"Check returned variable name\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].name).to.equal(\"PLANT_NO\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "7417d3c8-5a52-476f-a6aa-fc2f4accd981",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_subobs_datasetId}}/variables/{{variableTypeId_obs_unit}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_subobs_datasetId}}",
										"variables",
										"{{variableTypeId_obs_unit}}"
									]
								},
								"description": "GET /crops/{crop}/studies/{studyId}/datasets/{datasetId}/variables/{variableTypeId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid crop",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4b4870e3-c9aa-43f7-8c46-66f45a925aa5",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Verify error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.equal(\"Invalid crop \"+pm.environment.get(\"invalidCrop\")+\" for URL:/crops/\"+pm.environment.get(\"invalidCrop\")+\"/programs/\"+pm.environment.get(\"api_program_id\")+\"/studies/\"+pm.environment.get(\"studyId\")+\"/datasets/\"+pm.environment.get(\"study_plot_datasetId\")+\"/variables/\"+pm.environment.get(\"Trait_cvtermId\"));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "82ed0446-e2c8-4b64-9cba-73626ca492ec",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{invalidCrop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_datasetId}}/variables/{{Trait_cvtermId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{invalidCrop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"variables",
										"{{Trait_cvtermId}}"
									]
								},
								"description": "GET /crops/{crop}/studies/{studyId}/datasets/{datasetId}/variables/{variableTypeId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid program",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "af40d762-7b73-42b6-a132-c36e00813ae1",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Verify error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.equal(\"Invalid program: invalid for crop: \"+pm.environment.get(\"crop\")+\" for service with path /crops/\"+pm.environment.get(\"crop\")+\"/programs/invalid/studies/\"+pm.environment.get(\"studyId\")+\"/datasets/\"+pm.environment.get(\"study_plot_datasetId\")+\"/variables/\"+pm.environment.get(\"Trait_cvtermId\"));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "8fdff12f-e1f9-4c40-9382-a3fe8dccf31b",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/invalid/studies/{{studyId}}/datasets/{{study_plot_datasetId}}/variables/{{Trait_cvtermId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"invalid",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"variables",
										"{{Trait_cvtermId}}"
									]
								},
								"description": "GET /crops/{crop}/studies/{studyId}/datasets/{datasetId}/variables/{variableTypeId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered non-existing studyId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "efc65e35-2678-4cd4-9c3a-bc489354b1cf",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"pm.test(\"Verify error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.equal(\"Study does not exist\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9df43543-170d-441c-b5d5-061d7b86c822",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{non_existing_study_id}}/datasets/{{study_plot_datasetId}}/variables/{{Trait_cvtermId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{non_existing_study_id}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"variables",
										"{{Trait_cvtermId}}"
									]
								},
								"description": "GET /crops/{crop}/studies/{studyId}/datasets/{datasetId}/variables/{variableTypeId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered non-existing datasetId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "68e61da6-7411-4d4b-ba36-d949fc939628",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"pm.test(\"Verify error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.equal(\"Dataset does not exist\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "63cf7eec-543c-4034-a4df-df50af2598d1",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{non_existing_dataset_id}}/variables/{{Trait_cvtermId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{non_existing_dataset_id}}",
										"variables",
										"{{Trait_cvtermId}}"
									]
								},
								"description": "GET /crops/{crop}/studies/{studyId}/datasets/{datasetId}/variables/{variableTypeId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered datasetId that does not belong to the study",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e1cbd0fe-b94f-46d3-a5f7-6a8c13477d8b",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Check error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Specified dataset \"+pm.environment.get(\"study_plot_dataset_id_noPhenoCount\")+\" does not belong to the study \"+pm.environment.get(\"studyId\"));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "00a87a88-b528-4d55-9191-f22fc4a13efe",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_dataset_id_noPhenoCount}}/variables/{{Trait_cvtermId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_dataset_id_noPhenoCount}}",
										"variables",
										"{{Trait_cvtermId}}"
									]
								},
								"description": "GET /crops/{crop}/studies/{studyId}/datasets/{datasetId}/variables/{variableTypeId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered string input to studyId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "89ba9e6e-30a8-4825-b0ed-e8128f9dc2d0",
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"pm.test(\"Verify error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"For input string: \\\"asd\\\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e5db5b53-a20a-47eb-a671-b18d5c1b8f95",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{string_input}}/datasets/{{study_plot_datasetId}}/variables/{{Trait_cvtermId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{string_input}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"variables",
										"{{Trait_cvtermId}}"
									]
								},
								"description": "GET /crops/{crop}/studies/{studyId}/datasets/{datasetId}/variables/{variableTypeId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered string input to datasetId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "db86a935-4032-4767-8dbb-d9ca09da18c4",
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"pm.test(\"Verify error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"For input string: \\\"asd\\\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "6bbbcc4b-df8e-4010-b180-54018175f486",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{string_input}}/variables/{{Trait_cvtermId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{string_input}}",
										"variables",
										"{{Trait_cvtermId}}"
									]
								},
								"description": "GET /crops/{crop}/studies/{studyId}/datasets/{datasetId}/variables/{variableTypeId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered string input to variableTypeId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3f4a6696-caec-4993-8a32-7e98ee1af270",
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"pm.test(\"Verify error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"For input string: \\\"asd\\\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b6c88b4e-85d2-4b2e-9031-45f1a4374122",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_datasetId}}/variables/{{string_input}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"variables",
										"{{string_input}}"
									]
								},
								"description": "GET /crops/{crop}/studies/{studyId}/datasets/{datasetId}/variables/{variableTypeId}"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "HEAD ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/variables​/observations",
					"item": [
						{
							"name": "Verify response code and body when entered valid inputs and one variableId only",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "dfea04ea-0afb-4788-940b-691416196a76",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"X-Total-Count is correct\", function () {",
											"    pm.response.to.be.header(\"X-Total-Count\", \"40\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d2abfef3-fcba-4abd-a244-68030d73c122",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [
									{
										"key": "X-Auth-Token",
										"value": "{{masterToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_datasetId}}/variables/observations?variableIds={{study_biomass_cvterm_id}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"variables",
										"observations"
									],
									"query": [
										{
											"key": "variableIds",
											"value": "{{study_biomass_cvterm_id}}"
										}
									]
								},
								"description": "HEAD /crops/{crop}/studies/{studyId}/datasets/{datasetId}/variables/observations"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid crop",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8ef5fc74-8657-4567-8dfe-a85c7031265d",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "dff29e20-4157-4386-837a-f12322e086df",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{invalidCrop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_datasetId}}/variables/observations?variableIds={{study_biomass_cvterm_id}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{invalidCrop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"variables",
										"observations"
									],
									"query": [
										{
											"key": "variableIds",
											"value": "{{study_biomass_cvterm_id}}"
										}
									]
								},
								"description": "HEAD /crops/{crop}/studies/{studyId}/datasets/{datasetId}/variables/observations"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid program",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ed58fd27-0879-47bd-8df4-e157245bb1c3",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "332a6ab4-fea9-4419-ae9d-db8ad86e1733",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/invalid/studies/{{studyId}}/datasets/{{study_plot_datasetId}}/variables/observations?variableIds={{study_biomass_cvterm_id}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"invalid",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"variables",
										"observations"
									],
									"query": [
										{
											"key": "variableIds",
											"value": "{{study_biomass_cvterm_id}}"
										}
									]
								},
								"description": "HEAD /crops/{crop}/studies/{studyId}/datasets/{datasetId}/variables/observations"
							},
							"response": []
						},
						{
							"name": "Verify X-Total Count for study with no phenotypes",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b0a9530b-383c-4e76-ad90-0f178724b6b1",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"X-Total-Count is correct\", function () {",
											"    pm.response.to.be.header(\"X-Total-Count\", \"0\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5d87fc2a-4d36-47dd-87de-98357e333ea6",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId_noPhenoCount}}/datasets/{{study_plot_dataset_id_noPhenoCount}}/variables/observations?variableIds={{study_biomass_cvterm_id}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId_noPhenoCount}}",
										"datasets",
										"{{study_plot_dataset_id_noPhenoCount}}",
										"variables",
										"observations"
									],
									"query": [
										{
											"key": "variableIds",
											"value": "{{study_biomass_cvterm_id}}"
										}
									]
								},
								"description": "HEAD /crops/{crop}/studies/{studyId}/datasets/{datasetId}/variables/observations"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when enterd multiple variableIds",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e35c0658-92c6-41de-818a-5ca81351b475",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"X-Total-Count is correct\", function () {",
											"    pm.response.to.be.header(\"X-Total-Count\", \"80\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "51723d90-26f1-4081-9feb-f286b9dda3e2",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "HEAD",
								"header": [
									{
										"key": "X-Auth-Token",
										"value": "{{masterToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_datasetId}}/variables/observations?variableIds={{study_biomass_cvterm_id}},{{study_weedPressure_cvterm_id}},{{study_grainYield_cvterm_id}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"variables",
										"observations"
									],
									"query": [
										{
											"key": "variableIds",
											"value": "{{study_biomass_cvterm_id}},{{study_weedPressure_cvterm_id}},{{study_grainYield_cvterm_id}}"
										}
									]
								},
								"description": "HEAD /crops/{crop}/studies/{studyId}/datasets/{datasetId}/variables/observations"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered non-existing studyID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "dafbbee5-e7a7-48a4-b1ad-8905dac496bd",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d7636f55-b63e-4dd7-8cb8-f3e77d6ca353",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "HEAD",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{nonExistingGID}}/datasets/{{study_plot_datasetId}}/variables/observations?variableIds={{study_biomass_cvterm_id}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{nonExistingGID}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"variables",
										"observations"
									],
									"query": [
										{
											"key": "variableIds",
											"value": "{{study_biomass_cvterm_id}}"
										}
									]
								},
								"description": "HEAD /crops/{crop}/studies/{studyId}/datasets/{datasetId}/variables/observations"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered non-existing datasetId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f7f88d5a-5d37-481b-8f0b-1c358e47e8e4",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5cd91a0c-effa-4043-b847-9bf3bb18ec22",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "HEAD",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{non_existing_study_id}}/datasets/{{non_existing_dataset_id}}/variables/observations?variableIds={{study_biomass_cvterm_id}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{non_existing_study_id}}",
										"datasets",
										"{{non_existing_dataset_id}}",
										"variables",
										"observations"
									],
									"query": [
										{
											"key": "variableIds",
											"value": "{{study_biomass_cvterm_id}}"
										}
									]
								},
								"description": "HEAD /crops/{crop}/studies/{studyId}/datasets/{datasetId}/variables/observations"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered datasetId that does not belong to the study",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1e3f5d03-e465-4187-bc64-9af271104bc1",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "14bdd026-ba24-4a4e-877b-aa5b34bdbcd6",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "HEAD",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_dataset_id_noPhenoCount}}/variables/observations?variableIds={{study_biomass_cvterm_id}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_dataset_id_noPhenoCount}}",
										"variables",
										"observations"
									],
									"query": [
										{
											"key": "variableIds",
											"value": "{{study_biomass_cvterm_id}}"
										}
									]
								},
								"description": "HEAD /crops/{crop}/studies/{studyId}/datasets/{datasetId}/variables/observations"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered string input to studyId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c698a628-8f03-4a2a-bb02-6ece1e156c7f",
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2c9351b0-c3a2-4188-a2bb-0eca50dff966",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "HEAD",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{string_input}}/datasets/{{study_plot_datasetId}}/variables/observations?variableIds={{study_biomass_cvterm_id}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{string_input}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"variables",
										"observations"
									],
									"query": [
										{
											"key": "variableIds",
											"value": "{{study_biomass_cvterm_id}}"
										}
									]
								},
								"description": "HEAD /crops/{crop}/studies/{studyId}/datasets/{datasetId}/variables/observations"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered string input to datasetId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "82c63511-33f8-4a6c-a640-a622a6c26aa4",
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f797302a-679d-445f-bfe0-04df4eea3a38",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "HEAD",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{string_input}}/variables/observations?variableIds={{study_biomass_cvterm_id}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{string_input}}",
										"variables",
										"observations"
									],
									"query": [
										{
											"key": "variableIds",
											"value": "{{study_biomass_cvterm_id}}"
										}
									]
								},
								"description": "HEAD /crops/{crop}/studies/{studyId}/datasets/{datasetId}/variables/observations"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered string inputs to variableId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "77a1691c-4cd0-45cb-90b5-19a15e4df86d",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c5657798-8e57-4c66-97a5-14c2f10eb97f",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_datasetId}}/variables/observations?variableIds={{string_input}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"variables",
										"observations"
									],
									"query": [
										{
											"key": "variableIds",
											"value": "{{string_input}}"
										}
									]
								},
								"description": "HEAD /crops/{crop}/studies/{studyId}/datasets/{datasetId}/variables/observations"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered string input to studyId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d1a8af34-2c71-4e89-a484-723810d7cef4",
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "74536af3-a469-400d-8fb3-e16170a4fcd3",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "HEAD",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{string_input}}/datasets/{{study_plot_datasetId}}/variables/observations?variableIds={{study_biomass_cvterm_id}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{string_input}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"variables",
										"observations"
									],
									"query": [
										{
											"key": "variableIds",
											"value": "{{study_biomass_cvterm_id}}"
										}
									]
								},
								"description": "HEAD /crops/{crop}/studies/{studyId}/datasets/{datasetId}/variables/observations"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "PUT ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/variables",
					"item": [
						{
							"name": "Verify adding variable to a sub obs dataset with a numeric scale",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "426f594b-c306-4fd3-bdc0-3213d8975402",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Check returned \", function () {",
											"    var jsonData = pm.response.json();",
											"    var biomasId = Number(pm.environment.get(\"study_biomass_cvterm_id\"));",
											"    pm.expect(jsonData.termId).to.equal(biomasId);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ea3ee6fa-a860-4848-b8a7-4cf7078bcc91",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"variableTypeId\": \"{{Trait_cvtermId}}\",\r\n  \"variableId\": \"{{study_biomass_cvterm_id}}\",\r\n  \"studyAlias\": \"Biomas_yield\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_subobs_datasetId}}/variables",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_subobs_datasetId}}",
										"variables"
									]
								},
								"description": "PUT ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/variables"
							},
							"response": []
						},
						{
							"name": "Verify adding variable to a sub obs dataset with a categorical scale",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b699bb26-8126-4175-8ad9-41d4f94c1fa6",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Check returned \", function () {",
											"    var jsonData = pm.response.json();",
											"    var biomasId = Number(pm.environment.get(\"study_pestpressure_cvtermId\"));",
											"    pm.expect(jsonData.termId).to.equal(biomasId);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "8f0bd551-e5ed-4872-ae3a-57c82fcb98fd",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"variableTypeId\": \"{{Trait_cvtermId}}\",\r\n  \"variableId\": \"{{study_pestpressure_cvtermId}}\",\r\n  \"studyAlias\": \"PestPressure_0_9\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_subobs_datasetId}}/variables?variableId={{study_pestpressure_cvtermId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_subobs_datasetId}}",
										"variables"
									],
									"query": [
										{
											"key": "variableId",
											"value": "{{study_pestpressure_cvtermId}}"
										}
									]
								},
								"description": "PUT ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/variables"
							},
							"response": []
						},
						{
							"name": "Verify adding variable to a sub obs dataset with a character scale",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9fcda6e8-5eb4-4825-b806-391e2972e093",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Check returned \", function () {",
											"    var jsonData = pm.response.json();",
											"    var biomasId = Number(pm.environment.get(\"study_notes_cvtermId\"));",
											"    pm.expect(jsonData.termId).to.equal(biomasId);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d84d1e4d-fc40-4b62-abce-549f734318a8",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"variableTypeId\": \"{{Trait_cvtermId}}\",\r\n  \"variableId\": \"{{study_notes_cvtermId}}\",\r\n  \"studyAlias\": \"NOTES\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_subobs_datasetId}}/variables",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_subobs_datasetId}}",
										"variables"
									]
								},
								"description": "PUT ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/variables"
							},
							"response": []
						},
						{
							"name": "Verify adding variable to a sub obs dataset with a date scale",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9296a55a-fa4e-4db8-8fbf-ef92573c9cae",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Check returned \", function () {",
											"    var jsonData = pm.response.json();",
											"    var varId = Number(pm.environment.get(\"germitest_date_cvtermId\"));",
											"    pm.expect(jsonData.termId).to.equal(varId);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "46708c2a-a92f-4569-8337-79ccede7ddb5",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"variableTypeId\": \"{{Trait_cvtermId}}\",\r\n  \"variableId\": \"{{germitest_date_cvtermId}}\",\r\n  \"studyAlias\": \"GermiTest_date\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_subobs_datasetId}}/variables",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_subobs_datasetId}}",
										"variables"
									]
								},
								"description": "PUT ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/variables"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid crop",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8b0c1a17-284c-4dfc-aa9a-51ebe37b9f47",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Verify error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.equal(\"Invalid crop \"+pm.environment.get(\"invalidCrop\")+\" for URL:/crops/\"+pm.environment.get(\"invalidCrop\")+\"/programs/\"+pm.environment.get(\"api_program_id\")+\"/studies/\"+pm.environment.get(\"studyId\")+\"/datasets/\"+pm.environment.get(\"study_subobs_datasetId\")+\"/variables\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "dff371d2-8530-441d-9990-26d4544432ed",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"variableTypeId\": \"{{Trait_cvtermId}}\",\r\n  \"variableId\": \"{{study_notes_cvtermId}}\",\r\n  \"studyAlias\": \"NOTES\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{invalidCrop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_subobs_datasetId}}/variables",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{invalidCrop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_subobs_datasetId}}",
										"variables"
									]
								},
								"description": "PUT ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/variables"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid program",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a10818de-8c0a-46bf-aa69-782831da3b99",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Verify error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.equal(\"Invalid program: invalid for crop: \"+pm.environment.get(\"crop\")+\" for service with path /crops/\"+pm.environment.get(\"crop\")+\"/programs/invalid/studies/\"+pm.environment.get(\"studyId\")+\"/datasets/\"+pm.environment.get(\"study_subobs_datasetId\")+\"/variables\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c78d162d-66c2-4531-94f9-f852face624d",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"variableTypeId\": \"{{Trait_cvtermId}}\",\r\n  \"variableId\": \"{{study_notes_cvtermId}}\",\r\n  \"studyAlias\": \"NOTES\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/invalid/studies/{{studyId}}/datasets/{{study_subobs_datasetId}}/variables",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"invalid",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_subobs_datasetId}}",
										"variables"
									]
								},
								"description": "PUT ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/variables"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered non-existing studyId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8b76ccfe-4b60-4675-80a3-f1a015a430a5",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"pm.test(\"Verify error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.equal(\"Study does not exist\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "31743f1f-15ef-4551-9e2c-d7176a887d4f",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"variableTypeId\": \"{{Trait_cvtermId}}\",\r\n  \"variableId\": \"{{study_notes_cvtermId}}\",\r\n  \"studyAlias\": \"NOTES\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{non_existing_study_id}}/datasets/{{study_subobs_datasetId}}/variables",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{non_existing_study_id}}",
										"datasets",
										"{{study_subobs_datasetId}}",
										"variables"
									]
								},
								"description": "PUT ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/variables"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered non-existing datasetId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "26b2a4ab-7646-4625-8399-ce2f75980bb1",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"pm.test(\"Verify error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.equal(\"Dataset does not exist\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "7545911d-84ee-4dd4-bc0f-18bd4a09ba60",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"variableTypeId\": \"{{Trait_cvtermId}}\",\r\n  \"variableId\": \"{{study_notes_cvtermId}}\",\r\n  \"studyAlias\": \"NOTES\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{non_existing_dataset_id}}/variables",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{non_existing_dataset_id}}",
										"variables"
									]
								},
								"description": "PUT ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/variables"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered datasetId that does not belong to the study",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f00b0e3a-5d58-41dd-910a-f0346856e823",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Check error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Specified dataset \"+pm.environment.get(\"study_plot_dataset_id_noPhenoCount\")+\" does not belong to the study \"+pm.environment.get(\"studyId\"));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f903c032-b624-42ea-b0e3-76dd026cccd1",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"variableTypeId\": \"{{Trait_cvtermId}}\",\r\n  \"variableId\": \"{{study_notes_cvtermId}}\",\r\n  \"studyAlias\": \"NOTES\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_dataset_id_noPhenoCount}}/variables",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_dataset_id_noPhenoCount}}",
										"variables"
									]
								},
								"description": "PUT ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/variables"
							},
							"response": []
						},
						{
							"name": "Verify adding variable that is already associated to the dataset",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "09644610-82b3-4ab1-b548-afbbc67379fe",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Verify error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.equal(\"Variable with id 18010 is already a variable of dataset.\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "383f8da2-fa32-41a0-9f40-83c48879e854",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"variableTypeId\": \"{{Trait_cvtermId}}\",\r\n  \"variableId\": \"{{study_biomass_cvterm_id}}\",\r\n  \"studyAlias\": \"Biomas_yield\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_subobs_datasetId}}/variables",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_subobs_datasetId}}",
										"variables"
									]
								},
								"description": "PUT ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/variables"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered variable that is not of given variable type",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a938cf7e-1a00-48b0-98a4-8a8c1e9e0ed6",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Verify error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.equal(\"Variable is not of given variable type.\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "087d0e1b-24e5-414b-9b63-f918212a9f4a",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"variableTypeId\": \"{{Trait_cvtermId}}\",\r\n  \"variableId\": \"{{site_soil_ph_cvtermId}}\",\r\n  \"studyAlias\": \"SITE_SOIL_PH\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_subobs_datasetId}}/variables",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_subobs_datasetId}}",
										"variables"
									]
								},
								"description": "PUT ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/variables"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered selection variable",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9251725b-4dc9-4009-b909-792b7d45b5a8",
										"exec": [
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check returned \", function () {",
											"    var jsonData = pm.response.json();",
											"    var varId = Number(pm.environment.get(\"npsel_cvtermId\"));",
											"    pm.expect(jsonData.termId).to.equal(varId);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "36288b0a-dde3-4a38-bc55-0a7224fc487c",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"variableTypeId\": \"{{selection_method_cvtermId}}\",\r\n  \"variableId\": \"{{npsel_cvtermId}}\",\r\n  \"studyAlias\": \"NPSEL\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_subobs_datasetId}}/variables",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_subobs_datasetId}}",
										"variables"
									]
								},
								"description": "PUT ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/variables"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered not supported variable type",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7f69dc80-e43f-4686-a8d9-e8c06ccb081e",
										"exec": [
											"pm.test(\"Status code is 501\", function () {",
											"    pm.response.to.have.status(501);",
											"});",
											"pm.test(\"Verify error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.equal(\"Variable type is not supported.\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "565f5f48-7b5a-4aee-bf21-5325b04a83b8",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"variableTypeId\": \"{{study_condition_cvtermId}}\",\r\n  \"variableId\": \"{{site_soil_ph_cvtermId}}\",\r\n  \"studyAlias\": \"SITE_SOIL_PH\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_subobs_datasetId}}/variables",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_subobs_datasetId}}",
										"variables"
									]
								},
								"description": "PUT ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/variables"
							},
							"response": []
						},
						{
							"name": "Verify if locked study cannot be updated",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "76dd9d63-8daa-483d-96eb-26abd77551ba",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"pm.test(\"Verify error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.equal(\"Study is locked\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f3c78b30-152f-43f8-8082-e78335266245",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user2\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password2\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('testUserToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('testUserTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{testUserToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"variableTypeId\": \"{{Trait_cvtermId}}\",\r\n  \"variableId\": \"{{study_biomass_cvterm_id}}\",\r\n  \"studyAlias\": \"Biomas_yield\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{locked_studyId}}/datasets/{{locked_study_subobs_datasetId}}/variables",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{locked_studyId}}",
										"datasets",
										"{{locked_study_subobs_datasetId}}",
										"variables"
									]
								},
								"description": "PUT ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/variables"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "POST ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/observationUnits​/{observationUnitId}​/observations",
					"item": [
						{
							"name": "Verify if user can add accepted observation",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4da475e3-b842-44af-9118-044004044418",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Check returned variableId \", function () {",
											"    var biomasId = Number(pm.environment.get(\"study_biomass_cvterm_id\"));",
											"    pm.expect(jsonData.variableId).to.equal(biomasId);",
											"});",
											"pm.test(\"Check returned value \", function () {",
											"    pm.expect(jsonData.value).to.equal(\"5\");",
											"});",
											"",
											"pm.test(\"Check returned categoricalValueId \", function () {",
											"    pm.expect(jsonData.categoricalValueId).to.equal(null);",
											"});",
											"pm.test(\"Check returned status \", function () {",
											"    pm.expect(jsonData.status).to.equal(\"MANUALLY_EDITED\");",
											"});",
											"pm.test(\"Check returned observationUnitId \", function () {",
											"    var observationUnitId = Number(pm.environment.get(\"study_observationUnitId\"));",
											"    pm.expect(jsonData.observationUnitId).to.equal(observationUnitId);",
											"});",
											"pm.test(\"Check returned draftCategoricalValueId \", function () {",
											"    pm.expect(jsonData.draftCategoricalValueId).to.equal(null);",
											"});",
											"pm.test(\"Check returned draftValue \", function () {",
											"    pm.expect(jsonData.draftValue).to.equal(null);",
											"});",
											"pm.test(\"Check returned draftMode \", function () {",
											"    pm.expect(jsonData.draftMode).to.equal(false);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "4d881702-0961-4629-bbb0-7bc3e790a7be",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Auth-Token",
										"value": "{{masterToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"categoricalValueId\": null,\r\n  \"variableId\": \"{{study_biomass_cvterm_id}}\",\r\n  \"value\": \"5\",\r\n  \"observationUnitId\": \"{{study_observationUnitId}}\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_subobs_datasetId}}/observationUnits/{{study_observationUnitId}}/observations",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_subobs_datasetId}}",
										"observationUnits",
										"{{study_observationUnitId}}",
										"observations"
									]
								},
								"description": "POST ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/observationUnits​/{observationUnitId}​/observations"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid crop",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e907b874-387f-4f5a-9461-d6eadab4666b",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Verify error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Invalid crop \"+pm.environment.get(\"invalidCrop\")+\" for URL:/crops/\"+pm.environment.get(\"invalidCrop\")+\"/programs/\"+pm.environment.get(\"api_program_id\")+\"/studies/\"+pm.environment.get(\"studyId\")+\"/datasets/\"+pm.environment.get(\"study_subobs_datasetId\")+\"/observationUnits/\"+pm.environment.get(\"study_observationUnitId\")+\"/observations\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d788fbe9-143c-4683-a4d6-1c04814af2e7",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"categoricalValueId\": null,\r\n  \"variableId\": \"{{study_biomass_cvterm_id}}\",\r\n  \"value\": \"5\",\r\n  \"observationUnitId\": \"{{study_observationUnitId}}\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{invalidCrop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_subobs_datasetId}}/observationUnits/{{study_observationUnitId}}/observations",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{invalidCrop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_subobs_datasetId}}",
										"observationUnits",
										"{{study_observationUnitId}}",
										"observations"
									]
								},
								"description": "POST ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/observationUnits​/{observationUnitId}​/observations"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid program",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "578dda1d-3fbf-4935-9cf4-35dbb8cbd0bc",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Verify error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Invalid program: invalid for crop: \"+pm.environment.get(\"crop\")+\" for service with path /crops/\"+pm.environment.get(\"crop\")+\"/programs/invalid/studies/\"+pm.environment.get(\"studyId\")+\"/datasets/\"+pm.environment.get(\"study_subobs_datasetId\")+\"/observationUnits/\"+pm.environment.get(\"study_observationUnitId\")+\"/observations\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5de4a53e-2719-4954-a39d-44e3454c95dd",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"categoricalValueId\": null,\r\n  \"variableId\": \"{{study_biomass_cvterm_id}}\",\r\n  \"value\": \"5\",\r\n  \"observationUnitId\": \"{{study_observationUnitId}}\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/invalid/studies/{{studyId}}/datasets/{{study_subobs_datasetId}}/observationUnits/{{study_observationUnitId}}/observations",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"invalid",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_subobs_datasetId}}",
										"observationUnits",
										"{{study_observationUnitId}}",
										"observations"
									]
								},
								"description": "POST ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/observationUnits​/{observationUnitId}​/observations"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered non-existing studyId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "64a684b4-031b-466e-b442-d88f3bd098c3",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"pm.test(\"Verify error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Study does not exist\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "762bfffb-1ce2-44b2-b759-c4d46e140c87",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"categoricalValueId\": null,\r\n  \"variableId\": \"{{study_biomass_cvterm_id}}\",\r\n  \"value\": \"5\",\r\n  \"observationUnitId\": \"{{study_observationUnitId}}\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{non_existing_study_id}}/datasets/{{study_subobs_datasetId}}/observationUnits/{{study_observationUnitId}}/observations",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{non_existing_study_id}}",
										"datasets",
										"{{study_subobs_datasetId}}",
										"observationUnits",
										"{{study_observationUnitId}}",
										"observations"
									]
								},
								"description": "POST ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/observationUnits​/{observationUnitId}​/observations"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered non-existing datasetId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f9c26245-7b0e-4869-9d71-4c1a0ee88ed7",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"pm.test(\"Verify error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Dataset does not exist\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "40c111f9-bea2-4111-b7e3-d272734d5989",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"categoricalValueId\": null,\r\n  \"variableId\": \"{{study_biomass_cvterm_id}}\",\r\n  \"value\": \"5\",\r\n  \"observationUnitId\": \"{{study_observationUnitId}}\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{non_existing_dataset_id}}/observationUnits/{{study_observationUnitId}}/observations",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{non_existing_dataset_id}}",
										"observationUnits",
										"{{study_observationUnitId}}",
										"observations"
									]
								},
								"description": "POST ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/observationUnits​/{observationUnitId}​/observations"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered string input to studyId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aa6b38ff-3dc8-4a6c-a1d4-98b76b3f177e",
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"pm.test(\"Verify error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"For input string: \\\"asd\\\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "53f66a4e-7ac3-4089-a594-a37fae30e91f",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"categoricalValueId\": null,\r\n  \"variableId\": \"{{study_biomass_cvterm_id}}\",\r\n  \"value\": \"5\",\r\n  \"observationUnitId\": \"{{study_observationUnitId}}\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{string_input}}/datasets/{{study_observationUnitId}}/observationUnits/{{study_observationUnitId}}/observations",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{string_input}}",
										"datasets",
										"{{study_observationUnitId}}",
										"observationUnits",
										"{{study_observationUnitId}}",
										"observations"
									]
								},
								"description": "POST ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/observationUnits​/{observationUnitId}​/observations"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered string input to datasetId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7406d6e1-621d-4163-846c-857fee48213c",
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"pm.test(\"Verify error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"For input string: \\\"asd\\\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "59db9087-4382-4485-9e6a-f438509cfad1",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"categoricalValueId\": null,\r\n  \"variableId\": \"{{study_biomass_cvterm_id}}\",\r\n  \"value\": \"5\",\r\n  \"observationUnitId\": \"{{study_observationUnitId}}\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{string_input}}/observationUnits/{{study_observationUnitId}}/observations",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{string_input}}",
										"observationUnits",
										"{{study_observationUnitId}}",
										"observations"
									]
								},
								"description": "POST ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/observationUnits​/{observationUnitId}​/observations"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered string input to observationUnitId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1aa456dc-48a6-4635-848b-97040a549e2a",
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"pm.test(\"Verify error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"For input string: \\\"asd\\\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9fb49b19-d2f9-457f-bb38-9d0d7c60e70b",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"categoricalValueId\": null,\r\n  \"variableId\": \"{{study_biomass_cvterm_id}}\",\r\n  \"value\": \"5\",\r\n  \"observationUnitId\": \"{{study_observationUnitId}}\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_subobs_datasetId}}/observationUnits/{{string_input}}/observations",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_subobs_datasetId}}",
										"observationUnits",
										"{{string_input}}",
										"observations"
									]
								},
								"description": "POST ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/observationUnits​/{observationUnitId}​/observations"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered studyId and subobs datasetId do not belong to each other",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "96e414e7-06c5-42ea-b598-88d304fcafcf",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Verify error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Specified dataset \"+pm.environment.get(\"study_subobs_datasetId\") +\" does not belong to the study \"+ pm.environment.get(\"trialStudyId\"));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "93e08e30-e8f1-423c-b3c5-ee5d7acedf7b",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"categoricalValueId\": null,\r\n  \"variableId\": \"{{study_biomass_cvterm_id}}\",\r\n  \"value\": \"5\",\r\n  \"observationUnitId\": \"{{study_observationUnitId}}\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{trialStudyId}}/datasets/{{study_subobs_datasetId}}/observationUnits/{{study_observationUnitId}}/observations",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{trialStudyId}}",
										"datasets",
										"{{study_subobs_datasetId}}",
										"observationUnits",
										"{{study_observationUnitId}}",
										"observations"
									]
								},
								"description": "POST ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/observationUnits​/{observationUnitId}​/observations"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid observationUnitId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "10f752c9-4bb2-48c3-af9b-a4c0293c5d28",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"pm.test(\"Verify error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Invalid observation unit id.\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d548fa45-1456-4ab7-b11c-cb7d31f45a21",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"categoricalValueId\": null,\r\n  \"variableId\": \"{{study_biomass_cvterm_id}}\",\r\n  \"value\": \"5\",\r\n  \"observationUnitId\": \"{{study_observationUnitId}}\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_subobs_datasetId}}/observationUnits/500/observations",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_subobs_datasetId}}",
										"observationUnits",
										"500",
										"observations"
									]
								},
								"description": "POST ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/observationUnits​/{observationUnitId}​/observations"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "DELETE ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/variables",
					"item": [
						{
							"name": "Delete an existing numeric trait from subobservation dataset",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "de67ca8b-975f-44fe-9b6d-11b9d763bb8e",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b4098013-32fb-49d8-b39c-62b2ab4b32ab",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-Auth-Token",
										"value": "{{masterToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_subobs_datasetId}}/variables?variableIds={{study_biomass_cvterm_id}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_subobs_datasetId}}",
										"variables"
									],
									"query": [
										{
											"key": "variableIds",
											"value": "{{study_biomass_cvterm_id}}"
										}
									]
								},
								"description": "DELETE /crops/{crop}/studies/{studyId}/datasets/{datasetId}/variables"
							},
							"response": []
						},
						{
							"name": "Delete an existing categorical trait from subobservation dataset",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7e34513c-1e23-4400-a9f0-e37281d6866b",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b67be8cf-6321-419f-b76b-39252cebb708",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_subobs_datasetId}}/variables?variableIds={{study_pestpressure_cvtermId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_subobs_datasetId}}",
										"variables"
									],
									"query": [
										{
											"key": "variableIds",
											"value": "{{study_pestpressure_cvtermId}}"
										}
									]
								},
								"description": "DELETE /crops/{crop}/studies/{studyId}/datasets/{datasetId}/variables"
							},
							"response": []
						},
						{
							"name": "Delete an existing character trait from subobservation dataset",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6cf6b2f6-f3a8-42b9-807f-f2f384eedfff",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "8c02f4b2-f7b0-4418-a0ba-d3319965272d",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_subobs_datasetId}}/variables?variableIds={{study_notes_cvtermId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_subobs_datasetId}}",
										"variables"
									],
									"query": [
										{
											"key": "variableIds",
											"value": "{{study_notes_cvtermId}}"
										}
									]
								},
								"description": "DELETE /crops/{crop}/studies/{studyId}/datasets/{datasetId}/variables"
							},
							"response": []
						},
						{
							"name": "Delete an existing date trait from subobservation dataset",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4f99a6ea-a2f2-4a34-b92d-b663af768680",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "cd928675-70c6-4745-8d69-17598fc98224",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_subobs_datasetId}}/variables?variableIds={{germitest_date_cvtermId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_subobs_datasetId}}",
										"variables"
									],
									"query": [
										{
											"key": "variableIds",
											"value": "{{germitest_date_cvtermId}}"
										}
									]
								},
								"description": "DELETE /crops/{crop}/studies/{studyId}/datasets/{datasetId}/variables"
							},
							"response": []
						},
						{
							"name": "Delete an existing selection variable from subobservation dataset",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cf0bc4c7-c48b-4fac-8d01-4374f9702ae5",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "6755d95c-a4bb-4186-8077-aa890da4a267",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_subobs_datasetId}}/variables?variableIds={{npsel_cvtermId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_subobs_datasetId}}",
										"variables"
									],
									"query": [
										{
											"key": "variableIds",
											"value": "{{npsel_cvtermId}}"
										}
									]
								},
								"description": "DELETE /crops/{crop}/studies/{studyId}/datasets/{datasetId}/variables"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered a variableId that is not existing in the dataset",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5b1a2ace-ce64-43a1-ab1e-6408437de871",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Verify response message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Variable with id 8390 is not a variable of dataset or it exists with unsupported variable type.\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "7db66c43-ed1a-4950-99ff-63c48dcf7af7",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_subobs_datasetId}}/variables?variableIds={{study_notes_cvtermId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_subobs_datasetId}}",
										"variables"
									],
									"query": [
										{
											"key": "variableIds",
											"value": "{{study_notes_cvtermId}}"
										}
									]
								},
								"description": "DELETE /crops/{crop}/studies/{studyId}/datasets/{datasetId}/variables"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid crop",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c958a766-4a95-4ea6-8b70-3b1b45f124cd",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Verify response message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Invalid crop \"+pm.environment.get(\"invalidCrop\")+\" for URL:/crops/\"+pm.environment.get(\"invalidCrop\")+\"/programs/\"+pm.environment.get(\"api_program_id\")+\"/studies/\"+pm.environment.get(\"studyId\")+\"/datasets/\"+pm.environment.get(\"study_subobs_datasetId\")+\"/variables\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e6f0c258-8788-4653-92e9-f1f7c336b1c7",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{invalidCrop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_subobs_datasetId}}/variables?variableIds={{study_notes_cvtermId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{invalidCrop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_subobs_datasetId}}",
										"variables"
									],
									"query": [
										{
											"key": "variableIds",
											"value": "{{study_notes_cvtermId}}"
										}
									]
								},
								"description": "DELETE /crops/{crop}/studies/{studyId}/datasets/{datasetId}/variables"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid program",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "82722780-8112-419d-837b-e2d57ff54b87",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Verify response message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Invalid program: invalid for crop: \"+pm.environment.get(\"crop\")+\" for service with path /crops/\"+pm.environment.get(\"crop\")+\"/programs/invalid/studies/\"+pm.environment.get(\"studyId\")+\"/datasets/\"+pm.environment.get(\"study_subobs_datasetId\")+\"/variables\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b18bc67a-3f64-4da5-af23-4c9826598674",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/invalid/studies/{{studyId}}/datasets/{{study_subobs_datasetId}}/variables?variableIds={{study_notes_cvtermId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"invalid",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_subobs_datasetId}}",
										"variables"
									],
									"query": [
										{
											"key": "variableIds",
											"value": "{{study_notes_cvtermId}}"
										}
									]
								},
								"description": "DELETE /crops/{crop}/studies/{studyId}/datasets/{datasetId}/variables"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered non-existing studyId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5245f104-3c12-4fa9-ad41-9ccf7b38ae13",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"pm.test(\"Verify response message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Study does not exist\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "12e8efa6-081e-4efc-94c7-955c0fca0a45",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{non_existing_study_id}}/datasets/{{study_subobs_datasetId}}/variables?variableIds={{study_notes_cvtermId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{non_existing_study_id}}",
										"datasets",
										"{{study_subobs_datasetId}}",
										"variables"
									],
									"query": [
										{
											"key": "variableIds",
											"value": "{{study_notes_cvtermId}}"
										}
									]
								},
								"description": "DELETE /crops/{crop}/studies/{studyId}/datasets/{datasetId}/variables"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered non-existing datasetId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "004710fc-2988-464c-aae3-4bec15d05e39",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"pm.test(\"Verify response message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Dataset does not exist\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "bdd50992-270f-4296-9e71-dcd19e3c27d1",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{non_existing_dataset_id}}/variables?variableIds={{study_notes_cvtermId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{non_existing_dataset_id}}",
										"variables"
									],
									"query": [
										{
											"key": "variableIds",
											"value": "{{study_notes_cvtermId}}"
										}
									]
								},
								"description": "DELETE /crops/{crop}/studies/{studyId}/datasets/{datasetId}/variables"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered string input to studyId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c65cfe41-2aad-4d7c-a021-8d29aebf4181",
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"pm.test(\"Verify response message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"For input string: \\\"asd\\\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a45af867-d67a-4136-b5dd-c5b31885dd79",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{string_input}}/datasets/{{study_subobs_datasetId}}/variables?variableIds={{study_notes_cvtermId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{string_input}}",
										"datasets",
										"{{study_subobs_datasetId}}",
										"variables"
									],
									"query": [
										{
											"key": "variableIds",
											"value": "{{study_notes_cvtermId}}"
										}
									]
								},
								"description": "DELETE /crops/{crop}/studies/{studyId}/datasets/{datasetId}/variables"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered string input to datasetId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "68a31297-d8b0-4da2-8ccc-7b43846b4d39",
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"pm.test(\"Verify response message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"For input string: \\\"asd\\\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ee9ea6a0-6f2f-4eda-bbf4-98fcd662d7e5",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{string_input}}/variables?variableIds={{study_notes_cvtermId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{string_input}}",
										"variables"
									],
									"query": [
										{
											"key": "variableIds",
											"value": "{{study_notes_cvtermId}}"
										}
									]
								},
								"description": "DELETE /crops/{crop}/studies/{studyId}/datasets/{datasetId}/variables"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered string input to variableId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "47b30d75-036f-4324-8672-b2c8cc278065",
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"pm.test(\"Verify response message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"For input string: \\\"asd\\\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "be89e914-094c-498b-86ac-b52041d91b50",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_subobs_datasetId}}/variables?variableIds={{string_input}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_subobs_datasetId}}",
										"variables"
									],
									"query": [
										{
											"key": "variableIds",
											"value": "{{string_input}}"
										}
									]
								},
								"description": "DELETE /crops/{crop}/studies/{studyId}/datasets/{datasetId}/variables"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "POST ​/crops​/{cropname}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/observationUnits​/table",
					"item": [
						{
							"name": "Retrieve observation units for 1 instance",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "58a96d40-1930-4375-8d70-760c4a88d133",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Check records filtered \", function () {",
											"    pm.expect(jsonData.recordsFiltered).to.eql(20);",
											"});",
											"pm.test(\"Check records total\", function () {",
											"    pm.expect(jsonData.recordsFiltered).to.eql(20);",
											"});",
											"",
											"//Check data at index 0",
											"",
											"var index = 0;",
											"var selectedData = jsonData.data[index];",
											"",
											"pm.test(\"Check observationUnitId\", function () {",
											"    pm.expect(selectedData.observationUnitId).to.eql(502);",
											"});",
											"",
											"pm.test(\"Check gid\", function () {",
											"    pm.expect(selectedData.gid).to.eql(21);",
											"});",
											"pm.test(\"Check designation\", function () {",
											"    pm.expect(selectedData.designation).to.eql(\"GP1\");",
											"});",
											"pm.test(\"Check entryNumber\", function () {",
											"    pm.expect(selectedData.entryNumber).to.eql(1);",
											"});",
											"pm.test(\"Check trialInstance\", function () {",
											"    pm.expect(selectedData.trialInstance).to.eql(1);",
											"});",
											"pm.test(\"Check action\", function () {",
											"    pm.expect(selectedData.action).to.eql(\"502\");",
											"});",
											"pm.test(\"Check samplesCount\", function () {",
											"    pm.expect(selectedData.samplesCount).to.eql(\"2\");",
											"});",
											"pm.test(\"Check variable COL\", function () {",
											"    pm.expect(selectedData.variables.COL).to.eql({});",
											"});",
											"pm.test(\"Check variable GID\", function () {",
											"    pm.expect(selectedData.variables.GID.value).to.eql(\"21\");",
											"});",
											"pm.test(\"Check variable FIELDMAP RANGE\", function () {",
											"    pm.expect(selectedData.variables[\"FIELDMAP RANGE\"]).to.eql({});",
											"});",
											"pm.test(\"Check variable Grain_yield\", function () {",
											"    pm.expect(selectedData.variables.Grain_yield.observationId).to.eql(1425);",
											"    pm.expect(selectedData.variables.Grain_yield.value  ).to.eql(\"23\");",
											"    pm.expect(selectedData.variables.Grain_yield.variableId).to.eql(18000);",
											"});",
											"pm.test(\"Check variable NPSEL\", function () {",
											"    pm.expect(selectedData.variables.NPSEL.observationId).to.eql(500);",
											"    pm.expect(selectedData.variables.NPSEL.value  ).to.eql(\"2\");",
											"    pm.expect(selectedData.variables.NPSEL.variableId).to.eql(8263);",
											"});",
											"pm.test(\"Check variable FIELDMAP COLUMN\", function () {",
											"    pm.expect(selectedData.variables[\"FIELDMAP COLUMN\"]).to.eql({});",
											"});",
											"pm.test(\"Check variable OBS_UNIT_ID\", function () {",
											"    pm.expect(selectedData.variables.OBS_UNIT_ID.value).to.eql(\"PKWDPtLOzD8Sz\");",
											"});",
											"pm.test(\"Check variable PARENT_OBS_UNIT_ID\", function () {",
											"    pm.expect(selectedData.variables.PARENT_OBS_UNIT_ID).to.eql({});",
											"});",
											"pm.test(\"Check variable Biomas_yield\", function () {",
											"    pm.expect(selectedData.variables.Biomas_yield.observationId).to.eql(2000);",
											"    pm.expect(selectedData.variables.Biomas_yield.value).to.eql(\"40\");",
											"    pm.expect(selectedData.variables.Biomas_yield.variableId).to.eql(18010);",
											"});",
											"pm.test(\"Check variable ENTRY_TYPE\", function () {",
											"    pm.expect(selectedData.variables.ENTRY_TYPE.value).to.eql(\"Test entry\");",
											"});",
											"pm.test(\"Check variable EXPT_DESIGN\", function () {",
											"    pm.expect(selectedData.variables.EXPT_DESIGN.value).to.eql(\"ELO\");",
											"});",
											"pm.test(\"Check variable InputVariable\", function () {",
											"    pm.expect(selectedData.variables.InputVariable.variableId).to.eql(100020);",
											"});",
											"pm.test(\"Check variable ENTRY_NO\", function () {",
											"    pm.expect(selectedData.variables.ENTRY_NO.value).to.eql(\"1\");",
											"});",
											"pm.test(\"Check variable DESIGNATION\", function () {",
											"    pm.expect(selectedData.variables.DESIGNATION.value).to.eql(\"GP1\");",
											"});",
											"pm.test(\"Check variable WeedPressure_number\", function () {",
											"    pm.expect(selectedData.variables.WeedPressure_number.observationId).to.eql(1424);",
											"    pm.expect(selectedData.variables.WeedPressure_number.value  ).to.eql(\"21\");",
											"    pm.expect(selectedData.variables.WeedPressure_number.variableId).to.eql(18100);",
											"});",
											"pm.test(\"Check variable TRIAL_INSTANCE\", function () {",
											"    pm.expect(selectedData.variables.TRIAL_INSTANCE.value).to.eql(\"1\");",
											"});",
											"pm.test(\"Check variable ENTRY_CODE\", function () {",
											"    pm.expect(selectedData.variables.ENTRY_CODE).to.eql({});",
											"});",
											"pm.test(\"Check variable BLOCK_NO\", function () {",
											"    pm.expect(selectedData.variables.BLOCK_NO).to.eql({});",
											"});",
											"pm.test(\"Check variable LOCATION_ID\", function () {",
											"    pm.expect(selectedData.variables.LOCATION_ID.value).to.eql(\"Africa Rice Centre\");",
											"});",
											"pm.test(\"Check variable ROW\", function () {",
											"    pm.expect(selectedData.variables.ROW).to.eql({});",
											"});",
											"pm.test(\"Check variable REP_NO\", function () {",
											"    pm.expect(selectedData.variables.REP_NO).to.eql({});",
											"});",
											"pm.test(\"Check variable PLOT_NO\", function () {",
											"    pm.expect(selectedData.variables.PLOT_NO.value).to.eql(\"1\");",
											"});",
											"pm.test(\"Check environmentVariables\", function () {",
											"    pm.expect(selectedData.environmentVariables).to.eql({});",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "3ab2148d-2223-485c-bb0c-424f1f9543f8",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"draw\": 1,\r\n\t\"instanceId\": 1,\r\n\t\"draftMode\": false,\r\n\t\"filter\": {\r\n\t\t\"byOutOfBound\": null,\r\n\t\t\"byMissing\": null,\r\n\t\t\"byOutOfSync\": null,\r\n\t\t\"byOverwritten\": null,\r\n\t\t\"variableId\": null,\r\n\t\t\"filterColumns\": [],\r\n\t\t\"filteredValues\": {},\r\n\t\t\"filteredTextValues\": {},\r\n\t\t\"variableTypeMap\": {\r\n\t\t\t\"8170\": null,\r\n\t\t\t\"8200\": \"EXPERIMENTAL_DESIGN\",\r\n\t\t\t\"8201\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8230\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8240\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8250\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8255\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8263\": \"SELECTION_METHOD\",\r\n\t\t\t\"18000\": \"TRAIT\",\r\n\t\t\t\"18010\": \"TRAIT\",\r\n\t\t\t\"18100\": \"TRAIT\",\r\n\t\t\t\"100020\": \"TRAIT\"\r\n\t\t}\r\n\t}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_datasetId}}/observationUnits/table?size=50&page=0&sort=8200,asc",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"observationUnits",
										"table"
									],
									"query": [
										{
											"key": "size",
											"value": "50"
										},
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "sort",
											"value": "8200,asc"
										}
									]
								},
								"description": "POST ​/crops​/{cropname}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/observationUnits​/table"
							},
							"response": []
						},
						{
							"name": "Retrieve observation units for all instance",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "03bc522f-862a-4742-bb00-d29e056fe118",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Check records filtered \", function () {",
											"    pm.expect(jsonData.recordsFiltered).to.eql(40);",
											"});",
											"pm.test(\"Check records total\", function () {",
											"    pm.expect(jsonData.recordsFiltered).to.eql(40);",
											"});",
											"",
											"//Check data at index 0",
											"",
											"var index = 0;",
											"var selectedData = jsonData.data[index];",
											"",
											"pm.test(\"Check observationUnitId\", function () {",
											"    pm.expect(selectedData.observationUnitId).to.eql(502);",
											"});",
											"",
											"pm.test(\"Check gid\", function () {",
											"    pm.expect(selectedData.gid).to.eql(21);",
											"});",
											"pm.test(\"Check designation\", function () {",
											"    pm.expect(selectedData.designation).to.eql(\"GP1\");",
											"});",
											"pm.test(\"Check entryNumber\", function () {",
											"    pm.expect(selectedData.entryNumber).to.eql(1);",
											"});",
											"pm.test(\"Check trialInstance\", function () {",
											"    pm.expect(selectedData.trialInstance).to.eql(1);",
											"});",
											"pm.test(\"Check action\", function () {",
											"    pm.expect(selectedData.action).to.eql(\"502\");",
											"});",
											"pm.test(\"Check samplesCount\", function () {",
											"    pm.expect(selectedData.samplesCount).to.eql(\"2\");",
											"});",
											"pm.test(\"Check variable COL\", function () {",
											"    pm.expect(selectedData.variables.COL).to.eql({});",
											"});",
											"pm.test(\"Check variable GID\", function () {",
											"    pm.expect(selectedData.variables.GID.value).to.eql(\"21\");",
											"});",
											"pm.test(\"Check variable FIELDMAP RANGE\", function () {",
											"    pm.expect(selectedData.variables[\"FIELDMAP RANGE\"]).to.eql({});",
											"});",
											"pm.test(\"Check variable Grain_yield\", function () {",
											"    pm.expect(selectedData.variables.Grain_yield.observationId).to.eql(1425);",
											"    pm.expect(selectedData.variables.Grain_yield.value  ).to.eql(\"23\");",
											"    pm.expect(selectedData.variables.Grain_yield.variableId).to.eql(18000);",
											"});",
											"pm.test(\"Check variable NPSEL\", function () {",
											"    pm.expect(selectedData.variables.NPSEL.observationId).to.eql(500);",
											"    pm.expect(selectedData.variables.NPSEL.value  ).to.eql(\"2\");",
											"    pm.expect(selectedData.variables.NPSEL.variableId).to.eql(8263);",
											"});",
											"pm.test(\"Check variable FIELDMAP COLUMN\", function () {",
											"    pm.expect(selectedData.variables[\"FIELDMAP COLUMN\"]).to.eql({});",
											"});",
											"pm.test(\"Check variable OBS_UNIT_ID\", function () {",
											"    pm.expect(selectedData.variables.OBS_UNIT_ID.value).to.eql(\"PKWDPtLOzD8Sz\");",
											"});",
											"pm.test(\"Check variable PARENT_OBS_UNIT_ID\", function () {",
											"    pm.expect(selectedData.variables.PARENT_OBS_UNIT_ID).to.eql({});",
											"});",
											"pm.test(\"Check variable Biomas_yield\", function () {",
											"    pm.expect(selectedData.variables.Biomas_yield.observationId).to.eql(2000);",
											"    pm.expect(selectedData.variables.Biomas_yield.value).to.eql(\"40\");",
											"    pm.expect(selectedData.variables.Biomas_yield.variableId).to.eql(18010);",
											"});",
											"pm.test(\"Check variable ENTRY_TYPE\", function () {",
											"    pm.expect(selectedData.variables.ENTRY_TYPE.value).to.eql(\"Test entry\");",
											"});",
											"pm.test(\"Check variable EXPT_DESIGN\", function () {",
											"    pm.expect(selectedData.variables.EXPT_DESIGN.value).to.eql(\"ELO\");",
											"});",
											"pm.test(\"Check variable InputVariable\", function () {",
											"    pm.expect(selectedData.variables.InputVariable.variableId).to.eql(100020);",
											"});",
											"pm.test(\"Check variable ENTRY_NO\", function () {",
											"    pm.expect(selectedData.variables.ENTRY_NO.value).to.eql(\"1\");",
											"});",
											"pm.test(\"Check variable DESIGNATION\", function () {",
											"    pm.expect(selectedData.variables.DESIGNATION.value).to.eql(\"GP1\");",
											"});",
											"pm.test(\"Check variable WeedPressure_number\", function () {",
											"    pm.expect(selectedData.variables.WeedPressure_number.observationId).to.eql(1424);",
											"    pm.expect(selectedData.variables.WeedPressure_number.value  ).to.eql(\"21\");",
											"    pm.expect(selectedData.variables.WeedPressure_number.variableId).to.eql(18100);",
											"});",
											"pm.test(\"Check variable TRIAL_INSTANCE\", function () {",
											"    pm.expect(selectedData.variables.TRIAL_INSTANCE.value).to.eql(\"1\");",
											"});",
											"pm.test(\"Check variable ENTRY_CODE\", function () {",
											"    pm.expect(selectedData.variables.ENTRY_CODE).to.eql({});",
											"});",
											"pm.test(\"Check variable BLOCK_NO\", function () {",
											"    pm.expect(selectedData.variables.BLOCK_NO).to.eql({});",
											"});",
											"pm.test(\"Check variable LOCATION_ID\", function () {",
											"    pm.expect(selectedData.variables.LOCATION_ID.value).to.eql(\"Africa Rice Centre\");",
											"});",
											"pm.test(\"Check variable ROW\", function () {",
											"    pm.expect(selectedData.variables.ROW).to.eql({});",
											"});",
											"pm.test(\"Check variable REP_NO\", function () {",
											"    pm.expect(selectedData.variables.REP_NO).to.eql({});",
											"});",
											"pm.test(\"Check variable PLOT_NO\", function () {",
											"    pm.expect(selectedData.variables.PLOT_NO.value).to.eql(\"1\");",
											"});",
											"pm.test(\"Check environmentVariables\", function () {",
											"    pm.expect(selectedData.environmentVariables).to.eql({});",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e1e3d0d5-45e7-4f60-8ac3-8ab16a959d03",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"draw\": 2,\n\t\"draftMode\": false,\n\t\"filter\": {\n\t\t\"byOutOfBound\": null,\n\t\t\"byMissing\": null,\n\t\t\"byOutOfSync\": null,\n\t\t\"byOverwritten\": null,\n\t\t\"variableId\": null,\n\t\t\"filterColumns\": [],\n\t\t\"filteredValues\": {},\n\t\t\"filteredTextValues\": {},\n\t\t\"variableTypeMap\": {\n\t\t\t\"8170\": null,\n\t\t\t\"8200\": \"EXPERIMENTAL_DESIGN\",\n\t\t\t\"8201\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8230\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8240\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8250\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8255\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8263\": \"SELECTION_METHOD\",\n\t\t\t\"18000\": \"TRAIT\",\n\t\t\t\"18010\": \"TRAIT\",\n\t\t\t\"18100\": \"TRAIT\",\n\t\t\t\"100020\": \"TRAIT\"\n\t\t}\n\t}\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_datasetId}}/observationUnits/table?size=50&page=0&sort=8200,asc",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"observationUnits",
										"table"
									],
									"query": [
										{
											"key": "size",
											"value": "50"
										},
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "sort",
											"value": "8200,asc"
										}
									]
								},
								"description": "POST ​/crops​/{cropname}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/observationUnits​/table"
							},
							"response": []
						},
						{
							"name": "Retrieve observation units with invalid crop",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0570244e-d29f-4305-a22e-db32c83b92cd",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Check error message\", function () {",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Invalid crop \"+pm.environment.get(\"invalidCrop\")+\" for URL:/crops/\"+pm.environment.get(\"invalidCrop\")+\"/programs/\"+pm.environment.get(\"api_program_id\")+\"/studies/\"+pm.environment.get(\"studyId\")+\"/datasets/\"+pm.environment.get(\"study_plot_datasetId\")+\"/observationUnits/table\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "8a11a187-3d7a-4f16-98fc-4995c8667bee",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"draw\": 2,\n\t\"draftMode\": false,\n\t\"filter\": {\n\t\t\"byOutOfBound\": null,\n\t\t\"byMissing\": null,\n\t\t\"byOutOfSync\": null,\n\t\t\"byOverwritten\": null,\n\t\t\"variableId\": null,\n\t\t\"filterColumns\": [],\n\t\t\"filteredValues\": {},\n\t\t\"filteredTextValues\": {},\n\t\t\"variableTypeMap\": {\n\t\t\t\"8170\": null,\n\t\t\t\"8200\": \"EXPERIMENTAL_DESIGN\",\n\t\t\t\"8201\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8230\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8240\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8250\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8255\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8263\": \"SELECTION_METHOD\",\n\t\t\t\"18000\": \"TRAIT\",\n\t\t\t\"18010\": \"TRAIT\",\n\t\t\t\"18100\": \"TRAIT\",\n\t\t\t\"100020\": \"TRAIT\"\n\t\t}\n\t}\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{invalidCrop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_datasetId}}/observationUnits/table",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{invalidCrop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"observationUnits",
										"table"
									]
								},
								"description": "POST ​/crops​/{cropname}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/observationUnits​/table"
							},
							"response": []
						},
						{
							"name": "Retrieve observation units with invalid program",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c3413a30-cd0c-4445-821a-acc050047291",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Check error message\", function () {",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Invalid program: invalid for crop: \"+pm.environment.get(\"crop\")+\" for service with path /crops/\"+pm.environment.get(\"crop\")+\"/programs/invalid/studies/\"+pm.environment.get(\"studyId\")+\"/datasets/\"+pm.environment.get(\"study_plot_datasetId\")+\"/observationUnits/table\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "84324731-3d90-44bb-882a-fede65f6e72e",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"draw\": 2,\n\t\"draftMode\": false,\n\t\"filter\": {\n\t\t\"byOutOfBound\": null,\n\t\t\"byMissing\": null,\n\t\t\"byOutOfSync\": null,\n\t\t\"byOverwritten\": null,\n\t\t\"variableId\": null,\n\t\t\"filterColumns\": [],\n\t\t\"filteredValues\": {},\n\t\t\"filteredTextValues\": {},\n\t\t\"variableTypeMap\": {\n\t\t\t\"8170\": null,\n\t\t\t\"8200\": \"EXPERIMENTAL_DESIGN\",\n\t\t\t\"8201\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8230\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8240\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8250\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8255\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8263\": \"SELECTION_METHOD\",\n\t\t\t\"18000\": \"TRAIT\",\n\t\t\t\"18010\": \"TRAIT\",\n\t\t\t\"18100\": \"TRAIT\",\n\t\t\t\"100020\": \"TRAIT\"\n\t\t}\n\t}\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/invalid/studies/{{studyId}}/datasets/{{study_plot_datasetId}}/observationUnits/table",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"invalid",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"observationUnits",
										"table"
									]
								},
								"description": "POST ​/crops​/{cropname}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/observationUnits​/table"
							},
							"response": []
						},
						{
							"name": "Retrieve observation units with non-existing studyId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "996c3894-f5c9-4156-837e-74d8dc19b57b",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"pm.test(\"Check error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Study does not exist\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "050171e4-c76e-42ac-9ffe-b4e9b3ab4b94",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"draw\": 2,\n\t\"draftMode\": false,\n\t\"filter\": {\n\t\t\"byOutOfBound\": null,\n\t\t\"byMissing\": null,\n\t\t\"byOutOfSync\": null,\n\t\t\"byOverwritten\": null,\n\t\t\"variableId\": null,\n\t\t\"filterColumns\": [],\n\t\t\"filteredValues\": {},\n\t\t\"filteredTextValues\": {},\n\t\t\"variableTypeMap\": {\n\t\t\t\"8170\": null,\n\t\t\t\"8200\": \"EXPERIMENTAL_DESIGN\",\n\t\t\t\"8201\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8230\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8240\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8250\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8255\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8263\": \"SELECTION_METHOD\",\n\t\t\t\"18000\": \"TRAIT\",\n\t\t\t\"18010\": \"TRAIT\",\n\t\t\t\"18100\": \"TRAIT\",\n\t\t\t\"100020\": \"TRAIT\"\n\t\t}\n\t}\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{non_existing_study_id}}/datasets/{{study_plot_datasetId}}/observationUnits/table",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{non_existing_study_id}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"observationUnits",
										"table"
									]
								},
								"description": "POST ​/crops​/{cropname}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/observationUnits​/table"
							},
							"response": []
						},
						{
							"name": "Retrieve observation units with non-existing datasetId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ac62dbae-799c-47fe-90ad-5eb91ce40f69",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"pm.test(\"Check error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Dataset does not exist\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "be722e29-1c31-45ca-bf9b-64b3106d2e39",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"draw\": 2,\n\t\"draftMode\": false,\n\t\"filter\": {\n\t\t\"byOutOfBound\": null,\n\t\t\"byMissing\": null,\n\t\t\"byOutOfSync\": null,\n\t\t\"byOverwritten\": null,\n\t\t\"variableId\": null,\n\t\t\"filterColumns\": [],\n\t\t\"filteredValues\": {},\n\t\t\"filteredTextValues\": {},\n\t\t\"variableTypeMap\": {\n\t\t\t\"8170\": null,\n\t\t\t\"8200\": \"EXPERIMENTAL_DESIGN\",\n\t\t\t\"8201\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8230\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8240\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8250\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8255\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8263\": \"SELECTION_METHOD\",\n\t\t\t\"18000\": \"TRAIT\",\n\t\t\t\"18010\": \"TRAIT\",\n\t\t\t\"18100\": \"TRAIT\",\n\t\t\t\"100020\": \"TRAIT\"\n\t\t}\n\t}\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{non_existing_dataset_id}}/observationUnits/table",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{non_existing_dataset_id}}",
										"observationUnits",
										"table"
									]
								},
								"description": "POST ​/crops​/{cropname}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/observationUnits​/table"
							},
							"response": []
						},
						{
							"name": "Retrieve observation units sorted by trialInstance asc",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e185ebae-7cfa-4fc0-bc9c-b3ec531dd366",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Check records filtered \", function () {",
											"    pm.expect(jsonData.recordsFiltered).to.eql(40);",
											"});",
											"pm.test(\"Check records total\", function () {",
											"    pm.expect(jsonData.recordsFiltered).to.eql(40);",
											"});",
											"",
											"pm.test(\"Check if next TRIAL_INSTANCE is greater or equal to previous TRIAL_INSTANCE\", function () {",
											"   // var i;",
											"    var selectedData = jsonData.data;",
											"    var proceed = true",
											"    for (var i = 0; i+1 < selectedData.length ; i++) {",
											"        ",
											"           if((parseInt(selectedData[i+1].trialInstance)) >= (parseInt(selectedData[i].trialInstance))){",
											"               proceed = true;",
											"           }else{",
											"              proceed = false;",
											"                             ",
											"     }",
											"     pm.expect(proceed).to.eql(true);  ",
											"   }",
											"        ",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2cb92fd3-8c18-4eae-ae72-ab786c6c5403",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"draw\": 1,\n\t\"draftMode\": false,\n\t\"filter\": {\n\t\t\"byOutOfBound\": null,\n\t\t\"byMissing\": null,\n\t\t\"byOutOfSync\": null,\n\t\t\"byOverwritten\": null,\n\t\t\"variableId\": null,\n\t\t\"filterColumns\": [],\n\t\t\"filteredValues\": {},\n\t\t\"filteredTextValues\": {},\n\t\t\"variableTypeMap\": {\n\t\t\t\"8170\": null,\n\t\t\t\"8200\": \"EXPERIMENTAL_DESIGN\",\n\t\t\t\"8201\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8230\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8240\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8250\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8255\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8263\": \"SELECTION_METHOD\",\n\t\t\t\"18000\": \"TRAIT\",\n\t\t\t\"18010\": \"TRAIT\",\n\t\t\t\"18100\": \"TRAIT\",\n\t\t\t\"100020\": \"TRAIT\",\n\t\t\t\"-2\": null\n\t\t}\n\t}\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_datasetId}}/observationUnits/table?size=50&page=0&sort=8170,asc",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"observationUnits",
										"table"
									],
									"query": [
										{
											"key": "size",
											"value": "50"
										},
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "sort",
											"value": "8170,asc"
										}
									]
								},
								"description": "POST ​/crops​/{cropname}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/observationUnits​/table"
							},
							"response": []
						},
						{
							"name": "Retrieve observation units sorted by trialInstance desc",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "163afe45-53aa-4028-ad9c-b755a9fa2b6b",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Check records filtered \", function () {",
											"    pm.expect(jsonData.recordsFiltered).to.eql(40);",
											"});",
											"pm.test(\"Check records total\", function () {",
											"    pm.expect(jsonData.recordsFiltered).to.eql(40);",
											"});",
											"",
											"pm.test(\"Check if next TRIAL_INSTANCE is greater or equal to previous TRIAL_INSTANCE\", function () {",
											"   // var i;",
											"    var selectedData = jsonData.data;",
											"    var proceed = true",
											"    for (var i = 0; i+1 < selectedData.length ; i++) {",
											"        ",
											"           if((parseInt(selectedData[i+1].trialInstance)) <= (parseInt(selectedData[i].trialInstance))){",
											"               proceed = true;",
											"           }else{",
											"              proceed = false;",
											"     }",
											"     pm.expect(proceed).to.eql(true);  ",
											"   }",
											"        ",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "486c43e9-63d2-4a82-a6fc-394e1a7b5b67",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"draw\": 1,\n\t\"draftMode\": false,\n\t\"filter\": {\n\t\t\"byOutOfBound\": null,\n\t\t\"byMissing\": null,\n\t\t\"byOutOfSync\": null,\n\t\t\"byOverwritten\": null,\n\t\t\"variableId\": null,\n\t\t\"filterColumns\": [],\n\t\t\"filteredValues\": {},\n\t\t\"filteredTextValues\": {},\n\t\t\"variableTypeMap\": {\n\t\t\t\"8170\": null,\n\t\t\t\"8200\": \"EXPERIMENTAL_DESIGN\",\n\t\t\t\"8201\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8230\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8240\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8250\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8255\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8263\": \"SELECTION_METHOD\",\n\t\t\t\"18000\": \"TRAIT\",\n\t\t\t\"18010\": \"TRAIT\",\n\t\t\t\"18100\": \"TRAIT\",\n\t\t\t\"100020\": \"TRAIT\",\n\t\t\t\"-2\": null\n\t\t}\n\t}\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_datasetId}}/observationUnits/table?size=50&page=0&sort=8170,desc",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"observationUnits",
										"table"
									],
									"query": [
										{
											"key": "size",
											"value": "50"
										},
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "sort",
											"value": "8170,desc"
										}
									]
								},
								"description": "POST ​/crops​/{cropname}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/observationUnits​/table"
							},
							"response": []
						},
						{
							"name": "Retrieve observation units sorted by gid asc",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2b287825-eadc-4b5a-86a7-2f9fccec96fe",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Check records filtered \", function () {",
											"    pm.expect(jsonData.recordsFiltered).to.eql(40);",
											"});",
											"pm.test(\"Check records total\", function () {",
											"    pm.expect(jsonData.recordsFiltered).to.eql(40);",
											"});",
											"",
											"pm.test(\"Check if next gid is greater or equal to previous gid\", function () {",
											"   // var i;",
											"    var selectedData = jsonData.data;",
											"    var proceed = true",
											"    for (var i = 0; i+1 < selectedData.length ; i++) {",
											"        ",
											"           if((parseInt(selectedData[i+1].gid)) >= (parseInt(selectedData[i].gid))){",
											"               proceed = true;",
											"           }else{",
											"              proceed = false;",
											"     }",
											"     pm.expect(proceed).to.eql(true);  ",
											"   }",
											"        ",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "da9e76cd-96b6-4beb-be2d-b4016755c472",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"draw\": 5,\n\t\"draftMode\": false,\n\t\"filter\": {\n\t\t\"byOutOfBound\": null,\n\t\t\"byMissing\": null,\n\t\t\"byOutOfSync\": null,\n\t\t\"byOverwritten\": null,\n\t\t\"variableId\": null,\n\t\t\"filterColumns\": [],\n\t\t\"filteredValues\": {},\n\t\t\"filteredTextValues\": {},\n\t\t\"variableTypeMap\": {\n\t\t\t\"8170\": null,\n\t\t\t\"8200\": \"EXPERIMENTAL_DESIGN\",\n\t\t\t\"8201\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8230\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8240\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8250\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8255\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8263\": \"SELECTION_METHOD\",\n\t\t\t\"18000\": \"TRAIT\",\n\t\t\t\"18010\": \"TRAIT\",\n\t\t\t\"18100\": \"TRAIT\",\n\t\t\t\"100020\": \"TRAIT\",\n\t\t\t\"-2\": null\n\t\t}\n\t}\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_datasetId}}/observationUnits/table?size=50&page=0&sort=8240,asc",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"observationUnits",
										"table"
									],
									"query": [
										{
											"key": "size",
											"value": "50"
										},
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "sort",
											"value": "8240,asc"
										}
									]
								},
								"description": "POST ​/crops​/{cropname}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/observationUnits​/table"
							},
							"response": []
						},
						{
							"name": "Retrieve observation units sorted by gid desc",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c7f7919b-3c16-4abf-ae03-a886055bcd09",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Check records filtered \", function () {",
											"    pm.expect(jsonData.recordsFiltered).to.eql(40);",
											"});",
											"pm.test(\"Check records total\", function () {",
											"    pm.expect(jsonData.recordsFiltered).to.eql(40);",
											"});",
											"",
											"pm.test(\"Check if next gid is greater or equal to previous gid\", function () {",
											"   // var i;",
											"    var selectedData = jsonData.data;",
											"    var proceed = true",
											"    for (var i = 0; i+1 < selectedData.length ; i++) {",
											"        ",
											"           if((parseInt(selectedData[i+1].gid)) <= (parseInt(selectedData[i].gid))){",
											"               proceed = true;",
											"           }else{",
											"              proceed = false;",
											"     }",
											"     pm.expect(proceed).to.eql(true);  ",
											"   }",
											"        ",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ac6d2841-e35f-49a4-bee6-fb62e165ad81",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"draw\": 5,\n\t\"draftMode\": false,\n\t\"filter\": {\n\t\t\"byOutOfBound\": null,\n\t\t\"byMissing\": null,\n\t\t\"byOutOfSync\": null,\n\t\t\"byOverwritten\": null,\n\t\t\"variableId\": null,\n\t\t\"filterColumns\": [],\n\t\t\"filteredValues\": {},\n\t\t\"filteredTextValues\": {},\n\t\t\"variableTypeMap\": {\n\t\t\t\"8170\": null,\n\t\t\t\"8200\": \"EXPERIMENTAL_DESIGN\",\n\t\t\t\"8201\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8230\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8240\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8250\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8255\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8263\": \"SELECTION_METHOD\",\n\t\t\t\"18000\": \"TRAIT\",\n\t\t\t\"18010\": \"TRAIT\",\n\t\t\t\"18100\": \"TRAIT\",\n\t\t\t\"100020\": \"TRAIT\",\n\t\t\t\"-2\": null\n\t\t}\n\t}\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_datasetId}}/observationUnits/table?size=50&page=0&sort=8240,desc",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"observationUnits",
										"table"
									],
									"query": [
										{
											"key": "size",
											"value": "50"
										},
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "sort",
											"value": "8240,desc"
										}
									]
								},
								"description": "POST ​/crops​/{cropname}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/observationUnits​/table"
							},
							"response": []
						},
						{
							"name": "Retrieve observation units sorted by entryNumber asc",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "462e7abe-154e-4d22-88a8-a2281cccc2f5",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Check records filtered \", function () {",
											"    pm.expect(jsonData.recordsFiltered).to.eql(40);",
											"});",
											"pm.test(\"Check records total\", function () {",
											"    pm.expect(jsonData.recordsFiltered).to.eql(40);",
											"});",
											"",
											"pm.test(\"Check if next entryNumber is greater or equal to previous entryNumber\", function () {",
											"   // var i;",
											"    var selectedData = jsonData.data;",
											"    var proceed = true",
											"    for (var i = 0; i+1 < selectedData.length ; i++) {",
											"        ",
											"           if((parseInt(selectedData[i+1].entryNumber)) >= (parseInt(selectedData[i].entryNumber))){",
											"               proceed = true;",
											"           }else{",
											"              proceed = false;",
											"     }",
											"     pm.expect(proceed).to.eql(true);  ",
											"   }",
											"        ",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9a454be0-d6c3-4288-9daf-2de9b81b3454",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"draw\": 6,\n\t\"sortedRequest\": {\n\t\t\"pageSize\": 50,\n\t\t\"pageNumber\": 1,\n\t\t\"sortBy\": 8230,\n\t\t\"sortOrder\": \"asc\"\n\t},\n\t\"draftMode\": false,\n\t\"filter\": {\n\t\t\"byOutOfBound\": null,\n\t\t\"byMissing\": null,\n\t\t\"byOutOfSync\": null,\n\t\t\"byOverwritten\": null,\n\t\t\"variableId\": null,\n\t\t\"filterColumns\": [],\n\t\t\"filteredValues\": {},\n\t\t\"filteredTextValues\": {},\n\t\t\"variableTypeMap\": {\n\t\t\t\"8170\": null,\n\t\t\t\"8200\": \"EXPERIMENTAL_DESIGN\",\n\t\t\t\"8201\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8230\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8240\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8250\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8255\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8263\": \"SELECTION_METHOD\",\n\t\t\t\"18000\": \"TRAIT\",\n\t\t\t\"18010\": \"TRAIT\",\n\t\t\t\"18100\": \"TRAIT\",\n\t\t\t\"100020\": \"TRAIT\",\n\t\t\t\"-2\": null\n\t\t}\n\t}\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_datasetId}}/observationUnits/table?size=50&page=0&sort=8230,asc",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"observationUnits",
										"table"
									],
									"query": [
										{
											"key": "size",
											"value": "50"
										},
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "sort",
											"value": "8230,asc"
										}
									]
								},
								"description": "POST ​/crops​/{cropname}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/observationUnits​/table"
							},
							"response": []
						},
						{
							"name": "Retrieve observation units sorted by entryNumber desc",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4daca707-04e0-4fdd-be18-ab1fca235eee",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Check records filtered \", function () {",
											"    pm.expect(jsonData.recordsFiltered).to.eql(40);",
											"});",
											"pm.test(\"Check records total\", function () {",
											"    pm.expect(jsonData.recordsFiltered).to.eql(40);",
											"});",
											"",
											"pm.test(\"Check if next entryNumber is greater or equal to previous entryNumber\", function () {",
											"   // var i;",
											"    var selectedData = jsonData.data;",
											"    var proceed = true",
											"    for (var i = 0; i+1 < selectedData.length ; i++) {",
											"        ",
											"           if((parseInt(selectedData[i+1].entryNumber)) <= (parseInt(selectedData[i].entryNumber))){",
											"               proceed = true;",
											"           }else{",
											"              proceed = false;",
											"     }",
											"     pm.expect(proceed).to.eql(true);  ",
											"   }",
											"        ",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1ec575d6-4599-436e-b461-cdc397b8bfc5",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"draw\": 6,\n\t\"draftMode\": false,\n\t\"filter\": {\n\t\t\"byOutOfBound\": null,\n\t\t\"byMissing\": null,\n\t\t\"byOutOfSync\": null,\n\t\t\"byOverwritten\": null,\n\t\t\"variableId\": null,\n\t\t\"filterColumns\": [],\n\t\t\"filteredValues\": {},\n\t\t\"filteredTextValues\": {},\n\t\t\"variableTypeMap\": {\n\t\t\t\"8170\": null,\n\t\t\t\"8200\": \"EXPERIMENTAL_DESIGN\",\n\t\t\t\"8201\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8230\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8240\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8250\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8255\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8263\": \"SELECTION_METHOD\",\n\t\t\t\"18000\": \"TRAIT\",\n\t\t\t\"18010\": \"TRAIT\",\n\t\t\t\"18100\": \"TRAIT\",\n\t\t\t\"100020\": \"TRAIT\",\n\t\t\t\"-2\": null\n\t\t}\n\t}\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_datasetId}}/observationUnits/table?size=50&page=0&sort=8230,desc",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"observationUnits",
										"table"
									],
									"query": [
										{
											"key": "size",
											"value": "50"
										},
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "sort",
											"value": "8230,desc"
										}
									]
								},
								"description": "POST ​/crops​/{cropname}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/observationUnits​/table"
							},
							"response": []
						},
						{
							"name": "Retrieve observation units sorted by plotNumber asc",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0ab80255-3c50-4525-b2d1-7da0450e3e43",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Check records filtered \", function () {",
											"    pm.expect(jsonData.recordsFiltered).to.eql(40);",
											"});",
											"pm.test(\"Check records total\", function () {",
											"    pm.expect(jsonData.recordsFiltered).to.eql(40);",
											"});",
											"",
											"pm.test(\"Check if next PLOT_NO is greater or equal to previous PLOT_NO\", function () {",
											"   // var i;",
											"    var selectedData = jsonData.data;",
											"    var proceed = true",
											"    for (var i = 0; i+1 < selectedData.length ; i++) {",
											"        ",
											"           if((parseInt(selectedData[i+1].variables.PLOT_NO.value)) >= (parseInt(selectedData[i].variables.PLOT_NO.value))){",
											"               proceed = true;",
											"           }else{",
											"              proceed = false;",
											"     }",
											"     pm.expect(proceed).to.eql(true);  ",
											"   }",
											"        ",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "18043526-0551-4662-9dd4-485e905e9123",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"draw\": 7,\n\t\"draftMode\": false,\n\t\"filter\": {\n\t\t\"byOutOfBound\": null,\n\t\t\"byMissing\": null,\n\t\t\"byOutOfSync\": null,\n\t\t\"byOverwritten\": null,\n\t\t\"variableId\": null,\n\t\t\"filterColumns\": [],\n\t\t\"filteredValues\": {},\n\t\t\"filteredTextValues\": {},\n\t\t\"variableTypeMap\": {\n\t\t\t\"8170\": null,\n\t\t\t\"8200\": \"EXPERIMENTAL_DESIGN\",\n\t\t\t\"8201\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8230\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8240\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8250\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8255\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8263\": \"SELECTION_METHOD\",\n\t\t\t\"18000\": \"TRAIT\",\n\t\t\t\"18010\": \"TRAIT\",\n\t\t\t\"18100\": \"TRAIT\",\n\t\t\t\"100020\": \"TRAIT\",\n\t\t\t\"-2\": null\n\t\t}\n\t}\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_datasetId}}/observationUnits/table?size=50&page=0&sort=8200,asc",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"observationUnits",
										"table"
									],
									"query": [
										{
											"key": "size",
											"value": "50"
										},
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "sort",
											"value": "8200,asc"
										}
									]
								},
								"description": "POST ​/crops​/{cropname}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/observationUnits​/table"
							},
							"response": []
						},
						{
							"name": "Retrieve observation units sorted by plotNumber desc",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6643e64d-14a6-42c9-acdd-bb03b487c29f",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Check records filtered \", function () {",
											"    pm.expect(jsonData.recordsFiltered).to.eql(40);",
											"});",
											"pm.test(\"Check records total\", function () {",
											"    pm.expect(jsonData.recordsFiltered).to.eql(40);",
											"});",
											"",
											"pm.test(\"Check if next PLOT_NO is greater or equal to previous PLOT_NO\", function () {",
											"   // var i;",
											"    var selectedData = jsonData.data;",
											"    var proceed = true",
											"    for (var i = 0; i+1 < selectedData.length ; i++) {",
											"        ",
											"           if((parseInt(selectedData[i+1].variables.PLOT_NO.value)) <= (parseInt(selectedData[i].variables.PLOT_NO.value))){",
											"               proceed = true;",
											"           }else{",
											"              proceed = false;",
											"     }",
											"     pm.expect(proceed).to.eql(true);  ",
											"   }",
											"        ",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d2773501-484f-4226-8eca-de3e1d9154b3",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"draw\": 7,\n\t\"draftMode\": false,\n\t\"filter\": {\n\t\t\"byOutOfBound\": null,\n\t\t\"byMissing\": null,\n\t\t\"byOutOfSync\": null,\n\t\t\"byOverwritten\": null,\n\t\t\"variableId\": null,\n\t\t\"filterColumns\": [],\n\t\t\"filteredValues\": {},\n\t\t\"filteredTextValues\": {},\n\t\t\"variableTypeMap\": {\n\t\t\t\"8170\": null,\n\t\t\t\"8200\": \"EXPERIMENTAL_DESIGN\",\n\t\t\t\"8201\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8230\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8240\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8250\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8255\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8263\": \"SELECTION_METHOD\",\n\t\t\t\"18000\": \"TRAIT\",\n\t\t\t\"18010\": \"TRAIT\",\n\t\t\t\"18100\": \"TRAIT\",\n\t\t\t\"100020\": \"TRAIT\",\n\t\t\t\"-2\": null\n\t\t}\n\t}\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_datasetId}}/observationUnits/table?size=50&page=0&sort=8200,desc",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"observationUnits",
										"table"
									],
									"query": [
										{
											"key": "size",
											"value": "50"
										},
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "sort",
											"value": "8200,desc"
										}
									]
								},
								"description": "POST ​/crops​/{cropname}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/observationUnits​/table"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Manage Observation Data",
					"item": [
						{
							"name": "Add observation to input variable",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4a5594c1-524b-4b23-8563-3ada9130f175",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "27b8cae7-0171-448a-96c7-a8eb27c8acc7",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"processWarnings\": true,\r\n\t\"data\": [\r\n\t\t[\r\n\t\t\t\"TRIAL_INSTANCE\",\r\n\t\t\t\"PI_NAME\",\r\n\t\t\t\"EXPT_DESIGN\",\r\n\t\t\t\"LOCATION_ID\",\r\n\t\t\t\"LOCATION_NAME\",\r\n\t\t\t\"Crop_season_Code\",\r\n\t\t\t\"ENTRY_TYPE\",\r\n\t\t\t\"GID\",\r\n\t\t\t\"DESIGNATION\",\r\n\t\t\t\"ENTRY_NO\",\r\n\t\t\t\"OBS_UNIT_ID\",\r\n\t\t\t\"PLOT_NO\",\r\n\t\t\t\"WeedPressure_number\",\r\n\t\t\t\"Grain_yield\",\r\n\t\t\t\"Biomas_yield\",\r\n\t\t\t\"InputVariable\",\r\n\t\t\t\"NPSEL\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"PKWDPtLOzD8Sz\",\r\n\t\t\t\"1\",\r\n\t\t\t\"21\",\r\n\t\t\t\"23\",\r\n\t\t\t\"40\",\r\n\t\t\t\"\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"PKWDP6ME6bt1l\",\r\n\t\t\t\"2\",\r\n\t\t\t\"15\",\r\n\t\t\t\"12\",\r\n\t\t\t\"45\",\r\n\t\t\t\"\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"PKWDPe2za6TM7\",\r\n\t\t\t\"3\",\r\n\t\t\t\"12\",\r\n\t\t\t\"41\",\r\n\t\t\t\"32\",\r\n\t\t\t\"\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"PKWDPEV6LPs1N\",\r\n\t\t\t\"4\",\r\n\t\t\t\"46\",\r\n\t\t\t\"49\",\r\n\t\t\t\"33\",\r\n\t\t\t\"\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"PKWDPU27n9e9L\",\r\n\t\t\t\"5\",\r\n\t\t\t\"33\",\r\n\t\t\t\"41\",\r\n\t\t\t\"28\",\r\n\t\t\t\"\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"PKWDPmpZgUu6S\",\r\n\t\t\t\"6\",\r\n\t\t\t\"48\",\r\n\t\t\t\"17\",\r\n\t\t\t\"35\",\r\n\t\t\t\"\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"PKWDP0M9lGBzz\",\r\n\t\t\t\"7\",\r\n\t\t\t\"34\",\r\n\t\t\t\"16\",\r\n\t\t\t\"49\",\r\n\t\t\t\"\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"PKWDPsCKr80ks\",\r\n\t\t\t\"8\",\r\n\t\t\t\"17\",\r\n\t\t\t\"28\",\r\n\t\t\t\"15\",\r\n\t\t\t\"\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"PKWDPDotBpZ1y\",\r\n\t\t\t\"9\",\r\n\t\t\t\"45\",\r\n\t\t\t\"28\",\r\n\t\t\t\"49\",\r\n\t\t\t\"\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"PKWDPCYuyqdql\",\r\n\t\t\t\"10\",\r\n\t\t\t\"41\",\r\n\t\t\t\"26\",\r\n\t\t\t\"10\",\r\n\t\t\t\"\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"PKWDP0fPOkMaC\",\r\n\t\t\t\"11\",\r\n\t\t\t\"39\",\r\n\t\t\t\"20\",\r\n\t\t\t\"31\",\r\n\t\t\t\"\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"PKWDPGN6nYdv2\",\r\n\t\t\t\"12\",\r\n\t\t\t\"48\",\r\n\t\t\t\"46\",\r\n\t\t\t\"12\",\r\n\t\t\t\"\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"PKWDPZ19QRNrq\",\r\n\t\t\t\"13\",\r\n\t\t\t\"24\",\r\n\t\t\t\"27\",\r\n\t\t\t\"17\",\r\n\t\t\t\"\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"PKWDPPh1TNHCh\",\r\n\t\t\t\"14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"36\",\r\n\t\t\t\"13\",\r\n\t\t\t\"\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"PKWDPH6Q51k29\",\r\n\t\t\t\"15\",\r\n\t\t\t\"37\",\r\n\t\t\t\"20\",\r\n\t\t\t\"15\",\r\n\t\t\t\"\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"PKWDP2mpwUmS5\",\r\n\t\t\t\"16\",\r\n\t\t\t\"36\",\r\n\t\t\t\"40\",\r\n\t\t\t\"50\",\r\n\t\t\t\"\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"PKWDP07BrGxf2\",\r\n\t\t\t\"17\",\r\n\t\t\t\"25\",\r\n\t\t\t\"29\",\r\n\t\t\t\"49\",\r\n\t\t\t\"\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"PKWDPROG6tAJg\",\r\n\t\t\t\"18\",\r\n\t\t\t\"45\",\r\n\t\t\t\"12\",\r\n\t\t\t\"32\",\r\n\t\t\t\"\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"PKWDPUWYGDKwm\",\r\n\t\t\t\"19\",\r\n\t\t\t\"36\",\r\n\t\t\t\"44\",\r\n\t\t\t\"37\",\r\n\t\t\t\"\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"PKWDPVGUhe5T1\",\r\n\t\t\t\"20\",\r\n\t\t\t\"49\",\r\n\t\t\t\"49\",\r\n\t\t\t\"50\",\r\n\t\t\t\"\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"PKWDPr380Bs8L\",\r\n\t\t\t\"1\",\r\n\t\t\t\"39\",\r\n\t\t\t\"42\",\r\n\t\t\t\"7\",\r\n\t\t\t\"\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"PKWDPaE59GEmX\",\r\n\t\t\t\"2\",\r\n\t\t\t\"35\",\r\n\t\t\t\"41\",\r\n\t\t\t\"21\",\r\n\t\t\t\"\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"PKWDPrmTUoAR7\",\r\n\t\t\t\"3\",\r\n\t\t\t\"28\",\r\n\t\t\t\"15\",\r\n\t\t\t\"33\",\r\n\t\t\t\"\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"PKWDPvY4h2kxU\",\r\n\t\t\t\"4\",\r\n\t\t\t\"22\",\r\n\t\t\t\"25\",\r\n\t\t\t\"3\",\r\n\t\t\t\"\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"PKWDPOHE7tQlB\",\r\n\t\t\t\"5\",\r\n\t\t\t\"33\",\r\n\t\t\t\"15\",\r\n\t\t\t\"41\",\r\n\t\t\t\"\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"PKWDPjLgQAbkj\",\r\n\t\t\t\"6\",\r\n\t\t\t\"39\",\r\n\t\t\t\"17\",\r\n\t\t\t\"48\",\r\n\t\t\t\"\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"PKWDP6Fii9PlK\",\r\n\t\t\t\"7\",\r\n\t\t\t\"38\",\r\n\t\t\t\"32\",\r\n\t\t\t\"2\",\r\n\t\t\t\"\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"PKWDPIdrKcnAt\",\r\n\t\t\t\"8\",\r\n\t\t\t\"28\",\r\n\t\t\t\"28\",\r\n\t\t\t\"27\",\r\n\t\t\t\"\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"PKWDP39sdRbmd\",\r\n\t\t\t\"9\",\r\n\t\t\t\"44\",\r\n\t\t\t\"44\",\r\n\t\t\t\"11\",\r\n\t\t\t\"\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"PKWDPIFfYsTeE\",\r\n\t\t\t\"10\",\r\n\t\t\t\"5\",\r\n\t\t\t\"41\",\r\n\t\t\t\"28\",\r\n\t\t\t\"\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"PKWDPL3EIrzIi\",\r\n\t\t\t\"11\",\r\n\t\t\t\"13\",\r\n\t\t\t\"48\",\r\n\t\t\t\"39\",\r\n\t\t\t\"\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"PKWDPRoNUKI0a\",\r\n\t\t\t\"12\",\r\n\t\t\t\"19\",\r\n\t\t\t\"30\",\r\n\t\t\t\"50\",\r\n\t\t\t\"\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"PKWDPG1xTuED6\",\r\n\t\t\t\"13\",\r\n\t\t\t\"19\",\r\n\t\t\t\"36\",\r\n\t\t\t\"9\",\r\n\t\t\t\"\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"PKWDPbsMoqfPx\",\r\n\t\t\t\"14\",\r\n\t\t\t\"6\",\r\n\t\t\t\"5\",\r\n\t\t\t\"39\",\r\n\t\t\t\"\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"PKWDP9VwAD4Eo\",\r\n\t\t\t\"15\",\r\n\t\t\t\"43\",\r\n\t\t\t\"12\",\r\n\t\t\t\"19\",\r\n\t\t\t\"\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"PKWDPRCjHplai\",\r\n\t\t\t\"16\",\r\n\t\t\t\"14\",\r\n\t\t\t\"49\",\r\n\t\t\t\"4\",\r\n\t\t\t\"\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"PKWDPFU77vd3d\",\r\n\t\t\t\"17\",\r\n\t\t\t\"16\",\r\n\t\t\t\"48\",\r\n\t\t\t\"35\",\r\n\t\t\t\"\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"PKWDP5olR82ll\",\r\n\t\t\t\"18\",\r\n\t\t\t\"46\",\r\n\t\t\t\"45\",\r\n\t\t\t\"14\",\r\n\t\t\t\"\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"PKWDPQvs0xHVx\",\r\n\t\t\t\"19\",\r\n\t\t\t\"45\",\r\n\t\t\t\"37\",\r\n\t\t\t\"41\",\r\n\t\t\t\"\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"PKWDPkP8b8XvQ\",\r\n\t\t\t\"20\",\r\n\t\t\t\"23\",\r\n\t\t\t\"31\",\r\n\t\t\t\"17\",\r\n\t\t\t\"\",\r\n\t\t\t\"3\"\r\n\t\t]\r\n\t],\r\n\t\"draftMode\": true\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_datasetId}}/observationUnits/observations",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"observationUnits",
										"observations"
									]
								},
								"description": "PUT /crops/{cropName}/programs​/{programUUID}​/studies/{studyId}/datasets/{datasetId}/observationUnits/observations"
							},
							"response": []
						},
						{
							"name": "Add observation with invalid crop",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5364b8ec-009b-471c-a4a5-184ddca0ca59",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Check error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Invalid crop \"+pm.environment.get(\"invalidCrop\")+\" for URL:/crops/\"+pm.environment.get(\"invalidCrop\")+\"/programs/\"+pm.environment.get(\"api_program_id\")+\"/studies/\"+pm.environment.get(\"studyId\")+\"/datasets/\"+pm.environment.get(\"study_plot_datasetId\")+\"/observationUnits/observations\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9214b2e4-d003-4511-b7f4-9567cc0e2fb5",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"processWarnings\": true,\r\n\t\"data\": [\r\n\t\t[\r\n\t\t\t\"TRIAL_INSTANCE\",\r\n\t\t\t\"PI_NAME\",\r\n\t\t\t\"EXPT_DESIGN\",\r\n\t\t\t\"LOCATION_ID\",\r\n\t\t\t\"LOCATION_NAME\",\r\n\t\t\t\"Crop_season_Code\",\r\n\t\t\t\"ENTRY_TYPE\",\r\n\t\t\t\"GID\",\r\n\t\t\t\"DESIGNATION\",\r\n\t\t\t\"ENTRY_NO\",\r\n\t\t\t\"OBS_UNIT_ID\",\r\n\t\t\t\"PLOT_NO\",\r\n\t\t\t\"WeedPressure_number\",\r\n\t\t\t\"Grain_yield\",\r\n\t\t\t\"Biomas_yield\",\r\n\t\t\t\"InputVariable\",\r\n\t\t\t\"NPSEL\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"PKWDPtLOzD8Sz\",\r\n\t\t\t\"1\",\r\n\t\t\t\"21\",\r\n\t\t\t\"23\",\r\n\t\t\t\"40\",\r\n\t\t\t\"338\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"PKWDP6ME6bt1l\",\r\n\t\t\t\"2\",\r\n\t\t\t\"15\",\r\n\t\t\t\"12\",\r\n\t\t\t\"45\",\r\n\t\t\t\"285\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"PKWDPe2za6TM7\",\r\n\t\t\t\"3\",\r\n\t\t\t\"12\",\r\n\t\t\t\"41\",\r\n\t\t\t\"32\",\r\n\t\t\t\"176\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"PKWDPEV6LPs1N\",\r\n\t\t\t\"4\",\r\n\t\t\t\"46\",\r\n\t\t\t\"49\",\r\n\t\t\t\"33\",\r\n\t\t\t\"488\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"PKWDPU27n9e9L\",\r\n\t\t\t\"5\",\r\n\t\t\t\"33\",\r\n\t\t\t\"41\",\r\n\t\t\t\"28\",\r\n\t\t\t\"397\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"PKWDPmpZgUu6S\",\r\n\t\t\t\"6\",\r\n\t\t\t\"48\",\r\n\t\t\t\"17\",\r\n\t\t\t\"35\",\r\n\t\t\t\"463\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"PKWDP0M9lGBzz\",\r\n\t\t\t\"7\",\r\n\t\t\t\"34\",\r\n\t\t\t\"16\",\r\n\t\t\t\"49\",\r\n\t\t\t\"105\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"PKWDPsCKr80ks\",\r\n\t\t\t\"8\",\r\n\t\t\t\"17\",\r\n\t\t\t\"28\",\r\n\t\t\t\"15\",\r\n\t\t\t\"379\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"PKWDPDotBpZ1y\",\r\n\t\t\t\"9\",\r\n\t\t\t\"45\",\r\n\t\t\t\"28\",\r\n\t\t\t\"49\",\r\n\t\t\t\"424\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"PKWDPCYuyqdql\",\r\n\t\t\t\"10\",\r\n\t\t\t\"41\",\r\n\t\t\t\"26\",\r\n\t\t\t\"10\",\r\n\t\t\t\"188\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"PKWDP0fPOkMaC\",\r\n\t\t\t\"11\",\r\n\t\t\t\"39\",\r\n\t\t\t\"20\",\r\n\t\t\t\"31\",\r\n\t\t\t\"471\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"PKWDPGN6nYdv2\",\r\n\t\t\t\"12\",\r\n\t\t\t\"48\",\r\n\t\t\t\"46\",\r\n\t\t\t\"12\",\r\n\t\t\t\"395\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"PKWDPZ19QRNrq\",\r\n\t\t\t\"13\",\r\n\t\t\t\"24\",\r\n\t\t\t\"27\",\r\n\t\t\t\"17\",\r\n\t\t\t\"340\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"PKWDPPh1TNHCh\",\r\n\t\t\t\"14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"36\",\r\n\t\t\t\"13\",\r\n\t\t\t\"299\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"PKWDPH6Q51k29\",\r\n\t\t\t\"15\",\r\n\t\t\t\"37\",\r\n\t\t\t\"20\",\r\n\t\t\t\"15\",\r\n\t\t\t\"408\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"PKWDP2mpwUmS5\",\r\n\t\t\t\"16\",\r\n\t\t\t\"36\",\r\n\t\t\t\"40\",\r\n\t\t\t\"50\",\r\n\t\t\t\"472\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"PKWDP07BrGxf2\",\r\n\t\t\t\"17\",\r\n\t\t\t\"25\",\r\n\t\t\t\"29\",\r\n\t\t\t\"49\",\r\n\t\t\t\"138\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"PKWDPROG6tAJg\",\r\n\t\t\t\"18\",\r\n\t\t\t\"45\",\r\n\t\t\t\"12\",\r\n\t\t\t\"32\",\r\n\t\t\t\"356\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"PKWDPUWYGDKwm\",\r\n\t\t\t\"19\",\r\n\t\t\t\"36\",\r\n\t\t\t\"44\",\r\n\t\t\t\"37\",\r\n\t\t\t\"423\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"PKWDPVGUhe5T1\",\r\n\t\t\t\"20\",\r\n\t\t\t\"49\",\r\n\t\t\t\"49\",\r\n\t\t\t\"50\",\r\n\t\t\t\"193\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"dc6a207b-b4eb-42d5-a5b7-b1262193e961\",\r\n\t\t\t\"1\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"125\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"f425bdec-fdc1-41cb-8d4b-19179d9ed7a9\",\r\n\t\t\t\"2\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"337\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"9fe3ff35-a57f-4dc2-b682-d69881ebd3e8\",\r\n\t\t\t\"3\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"317\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"48851c5a-132f-4df2-8139-1b0f8ba4ea13\",\r\n\t\t\t\"4\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"497\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"97b9bbb8-e390-4c6c-a688-3676c7a322a1\",\r\n\t\t\t\"5\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"496\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"5d53e82d-ea2c-42de-8255-5150462cc9e2\",\r\n\t\t\t\"6\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"114\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"bab7f29e-f1ec-4d0a-91a3-08cc0121fffc\",\r\n\t\t\t\"7\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"102\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"6117a4e4-2d58-4020-a047-7d0f568379df\",\r\n\t\t\t\"8\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"479\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"41c3a00c-c372-442c-b87c-b7329e1457ac\",\r\n\t\t\t\"9\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"140\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"0542e1ee-2535-44f7-bf41-fb4787f2de52\",\r\n\t\t\t\"10\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"280\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"02ccc497-fb94-4dcc-83dd-21f5db43f43e\",\r\n\t\t\t\"11\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"437\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"05883cec-d339-4cd0-b763-67f7d9d543ff\",\r\n\t\t\t\"12\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"354\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"74a8d502-8b17-4d96-8741-b38d294ae601\",\r\n\t\t\t\"13\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"430\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"72476b15-4090-46bc-be2f-e4e86171af50\",\r\n\t\t\t\"14\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"478\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"980a592b-bf45-4cbe-8ede-2c0d1d6302c4\",\r\n\t\t\t\"15\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"462\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"e50aeb0a-42ef-45f6-a247-e426f0cbd39c\",\r\n\t\t\t\"16\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"271\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"b7440ad5-4836-44e8-96ba-687e1c7fb0bb\",\r\n\t\t\t\"17\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"479\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"a0b745fd-d1de-45d0-9e86-42021ce43d43\",\r\n\t\t\t\"18\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"305\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"4fca59a2-84c1-40d2-b5a7-86ab957f00cc\",\r\n\t\t\t\"19\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"372\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"9129d101-c4ac-43cf-a818-079d4365c2d5\",\r\n\t\t\t\"20\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"459\",\r\n\t\t\t\"\"\r\n\t\t]\r\n\t],\r\n\t\"draftMode\": true\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{invalidCrop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_datasetId}}/observationUnits/observations",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{invalidCrop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"observationUnits",
										"observations"
									]
								},
								"description": "PUT /crops/{cropName}/programs​/{programUUID}​/studies/{studyId}/datasets/{datasetId}/observationUnits/observations"
							},
							"response": []
						},
						{
							"name": "Add observation with invalid program",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d36b5464-8b59-434d-af3b-f6b9746176f4",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Check error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Invalid program: invalid for crop: \"+pm.environment.get(\"crop\")+\" for service with path /crops/\"+pm.environment.get(\"crop\")+\"/programs/invalid/studies/\"+pm.environment.get(\"studyId\")+\"/datasets/\"+pm.environment.get(\"study_plot_datasetId\")+\"/observationUnits/observations\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9cd2c0a1-a137-4917-a561-729c605567ac",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"processWarnings\": true,\r\n\t\"data\": [\r\n\t\t[\r\n\t\t\t\"TRIAL_INSTANCE\",\r\n\t\t\t\"PI_NAME\",\r\n\t\t\t\"EXPT_DESIGN\",\r\n\t\t\t\"LOCATION_ID\",\r\n\t\t\t\"LOCATION_NAME\",\r\n\t\t\t\"Crop_season_Code\",\r\n\t\t\t\"ENTRY_TYPE\",\r\n\t\t\t\"GID\",\r\n\t\t\t\"DESIGNATION\",\r\n\t\t\t\"ENTRY_NO\",\r\n\t\t\t\"OBS_UNIT_ID\",\r\n\t\t\t\"PLOT_NO\",\r\n\t\t\t\"WeedPressure_number\",\r\n\t\t\t\"Grain_yield\",\r\n\t\t\t\"Biomas_yield\",\r\n\t\t\t\"InputVariable\",\r\n\t\t\t\"NPSEL\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"PKWDPtLOzD8Sz\",\r\n\t\t\t\"1\",\r\n\t\t\t\"21\",\r\n\t\t\t\"23\",\r\n\t\t\t\"40\",\r\n\t\t\t\"338\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"PKWDP6ME6bt1l\",\r\n\t\t\t\"2\",\r\n\t\t\t\"15\",\r\n\t\t\t\"12\",\r\n\t\t\t\"45\",\r\n\t\t\t\"285\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"PKWDPe2za6TM7\",\r\n\t\t\t\"3\",\r\n\t\t\t\"12\",\r\n\t\t\t\"41\",\r\n\t\t\t\"32\",\r\n\t\t\t\"176\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"PKWDPEV6LPs1N\",\r\n\t\t\t\"4\",\r\n\t\t\t\"46\",\r\n\t\t\t\"49\",\r\n\t\t\t\"33\",\r\n\t\t\t\"488\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"PKWDPU27n9e9L\",\r\n\t\t\t\"5\",\r\n\t\t\t\"33\",\r\n\t\t\t\"41\",\r\n\t\t\t\"28\",\r\n\t\t\t\"397\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"PKWDPmpZgUu6S\",\r\n\t\t\t\"6\",\r\n\t\t\t\"48\",\r\n\t\t\t\"17\",\r\n\t\t\t\"35\",\r\n\t\t\t\"463\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"PKWDP0M9lGBzz\",\r\n\t\t\t\"7\",\r\n\t\t\t\"34\",\r\n\t\t\t\"16\",\r\n\t\t\t\"49\",\r\n\t\t\t\"105\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"PKWDPsCKr80ks\",\r\n\t\t\t\"8\",\r\n\t\t\t\"17\",\r\n\t\t\t\"28\",\r\n\t\t\t\"15\",\r\n\t\t\t\"379\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"PKWDPDotBpZ1y\",\r\n\t\t\t\"9\",\r\n\t\t\t\"45\",\r\n\t\t\t\"28\",\r\n\t\t\t\"49\",\r\n\t\t\t\"424\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"PKWDPCYuyqdql\",\r\n\t\t\t\"10\",\r\n\t\t\t\"41\",\r\n\t\t\t\"26\",\r\n\t\t\t\"10\",\r\n\t\t\t\"188\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"PKWDP0fPOkMaC\",\r\n\t\t\t\"11\",\r\n\t\t\t\"39\",\r\n\t\t\t\"20\",\r\n\t\t\t\"31\",\r\n\t\t\t\"471\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"PKWDPGN6nYdv2\",\r\n\t\t\t\"12\",\r\n\t\t\t\"48\",\r\n\t\t\t\"46\",\r\n\t\t\t\"12\",\r\n\t\t\t\"395\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"PKWDPZ19QRNrq\",\r\n\t\t\t\"13\",\r\n\t\t\t\"24\",\r\n\t\t\t\"27\",\r\n\t\t\t\"17\",\r\n\t\t\t\"340\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"PKWDPPh1TNHCh\",\r\n\t\t\t\"14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"36\",\r\n\t\t\t\"13\",\r\n\t\t\t\"299\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"PKWDPH6Q51k29\",\r\n\t\t\t\"15\",\r\n\t\t\t\"37\",\r\n\t\t\t\"20\",\r\n\t\t\t\"15\",\r\n\t\t\t\"408\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"PKWDP2mpwUmS5\",\r\n\t\t\t\"16\",\r\n\t\t\t\"36\",\r\n\t\t\t\"40\",\r\n\t\t\t\"50\",\r\n\t\t\t\"472\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"PKWDP07BrGxf2\",\r\n\t\t\t\"17\",\r\n\t\t\t\"25\",\r\n\t\t\t\"29\",\r\n\t\t\t\"49\",\r\n\t\t\t\"138\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"PKWDPROG6tAJg\",\r\n\t\t\t\"18\",\r\n\t\t\t\"45\",\r\n\t\t\t\"12\",\r\n\t\t\t\"32\",\r\n\t\t\t\"356\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"PKWDPUWYGDKwm\",\r\n\t\t\t\"19\",\r\n\t\t\t\"36\",\r\n\t\t\t\"44\",\r\n\t\t\t\"37\",\r\n\t\t\t\"423\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"PKWDPVGUhe5T1\",\r\n\t\t\t\"20\",\r\n\t\t\t\"49\",\r\n\t\t\t\"49\",\r\n\t\t\t\"50\",\r\n\t\t\t\"193\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"dc6a207b-b4eb-42d5-a5b7-b1262193e961\",\r\n\t\t\t\"1\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"125\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"f425bdec-fdc1-41cb-8d4b-19179d9ed7a9\",\r\n\t\t\t\"2\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"337\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"9fe3ff35-a57f-4dc2-b682-d69881ebd3e8\",\r\n\t\t\t\"3\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"317\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"48851c5a-132f-4df2-8139-1b0f8ba4ea13\",\r\n\t\t\t\"4\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"497\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"97b9bbb8-e390-4c6c-a688-3676c7a322a1\",\r\n\t\t\t\"5\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"496\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"5d53e82d-ea2c-42de-8255-5150462cc9e2\",\r\n\t\t\t\"6\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"114\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"bab7f29e-f1ec-4d0a-91a3-08cc0121fffc\",\r\n\t\t\t\"7\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"102\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"6117a4e4-2d58-4020-a047-7d0f568379df\",\r\n\t\t\t\"8\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"479\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"41c3a00c-c372-442c-b87c-b7329e1457ac\",\r\n\t\t\t\"9\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"140\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"0542e1ee-2535-44f7-bf41-fb4787f2de52\",\r\n\t\t\t\"10\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"280\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"02ccc497-fb94-4dcc-83dd-21f5db43f43e\",\r\n\t\t\t\"11\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"437\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"05883cec-d339-4cd0-b763-67f7d9d543ff\",\r\n\t\t\t\"12\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"354\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"74a8d502-8b17-4d96-8741-b38d294ae601\",\r\n\t\t\t\"13\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"430\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"72476b15-4090-46bc-be2f-e4e86171af50\",\r\n\t\t\t\"14\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"478\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"980a592b-bf45-4cbe-8ede-2c0d1d6302c4\",\r\n\t\t\t\"15\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"462\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"e50aeb0a-42ef-45f6-a247-e426f0cbd39c\",\r\n\t\t\t\"16\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"271\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"b7440ad5-4836-44e8-96ba-687e1c7fb0bb\",\r\n\t\t\t\"17\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"479\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"a0b745fd-d1de-45d0-9e86-42021ce43d43\",\r\n\t\t\t\"18\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"305\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"4fca59a2-84c1-40d2-b5a7-86ab957f00cc\",\r\n\t\t\t\"19\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"372\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"9129d101-c4ac-43cf-a818-079d4365c2d5\",\r\n\t\t\t\"20\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"459\",\r\n\t\t\t\"\"\r\n\t\t]\r\n\t],\r\n\t\"draftMode\": true\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/invalid/studies/{{studyId}}/datasets/{{study_plot_datasetId}}/observationUnits/observations",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"invalid",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"observationUnits",
										"observations"
									]
								},
								"description": "PUT /crops/{cropName}/programs​/{programUUID}​/studies/{studyId}/datasets/{datasetId}/observationUnits/observations"
							},
							"response": []
						},
						{
							"name": "Add observation values with non-existing studyId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0b36a159-5b79-4e53-b471-bde2b383d997",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"pm.test(\"Check error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Study does not exist\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b6e01530-b5b9-4d22-914d-64f3e99231c2",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"processWarnings\": true,\r\n\t\"data\": [\r\n\t\t[\r\n\t\t\t\"TRIAL_INSTANCE\",\r\n\t\t\t\"PI_NAME\",\r\n\t\t\t\"EXPT_DESIGN\",\r\n\t\t\t\"LOCATION_ID\",\r\n\t\t\t\"LOCATION_NAME\",\r\n\t\t\t\"Crop_season_Code\",\r\n\t\t\t\"ENTRY_TYPE\",\r\n\t\t\t\"GID\",\r\n\t\t\t\"DESIGNATION\",\r\n\t\t\t\"ENTRY_NO\",\r\n\t\t\t\"OBS_UNIT_ID\",\r\n\t\t\t\"PLOT_NO\",\r\n\t\t\t\"WeedPressure_number\",\r\n\t\t\t\"Grain_yield\",\r\n\t\t\t\"Biomas_yield\",\r\n\t\t\t\"InputVariable\",\r\n\t\t\t\"NPSEL\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"PKWDPtLOzD8Sz\",\r\n\t\t\t\"1\",\r\n\t\t\t\"21\",\r\n\t\t\t\"23\",\r\n\t\t\t\"40\",\r\n\t\t\t\"338\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"PKWDP6ME6bt1l\",\r\n\t\t\t\"2\",\r\n\t\t\t\"15\",\r\n\t\t\t\"12\",\r\n\t\t\t\"45\",\r\n\t\t\t\"285\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"PKWDPe2za6TM7\",\r\n\t\t\t\"3\",\r\n\t\t\t\"12\",\r\n\t\t\t\"41\",\r\n\t\t\t\"32\",\r\n\t\t\t\"176\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"PKWDPEV6LPs1N\",\r\n\t\t\t\"4\",\r\n\t\t\t\"46\",\r\n\t\t\t\"49\",\r\n\t\t\t\"33\",\r\n\t\t\t\"488\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"PKWDPU27n9e9L\",\r\n\t\t\t\"5\",\r\n\t\t\t\"33\",\r\n\t\t\t\"41\",\r\n\t\t\t\"28\",\r\n\t\t\t\"397\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"PKWDPmpZgUu6S\",\r\n\t\t\t\"6\",\r\n\t\t\t\"48\",\r\n\t\t\t\"17\",\r\n\t\t\t\"35\",\r\n\t\t\t\"463\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"PKWDP0M9lGBzz\",\r\n\t\t\t\"7\",\r\n\t\t\t\"34\",\r\n\t\t\t\"16\",\r\n\t\t\t\"49\",\r\n\t\t\t\"105\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"PKWDPsCKr80ks\",\r\n\t\t\t\"8\",\r\n\t\t\t\"17\",\r\n\t\t\t\"28\",\r\n\t\t\t\"15\",\r\n\t\t\t\"379\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"PKWDPDotBpZ1y\",\r\n\t\t\t\"9\",\r\n\t\t\t\"45\",\r\n\t\t\t\"28\",\r\n\t\t\t\"49\",\r\n\t\t\t\"424\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"PKWDPCYuyqdql\",\r\n\t\t\t\"10\",\r\n\t\t\t\"41\",\r\n\t\t\t\"26\",\r\n\t\t\t\"10\",\r\n\t\t\t\"188\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"PKWDP0fPOkMaC\",\r\n\t\t\t\"11\",\r\n\t\t\t\"39\",\r\n\t\t\t\"20\",\r\n\t\t\t\"31\",\r\n\t\t\t\"471\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"PKWDPGN6nYdv2\",\r\n\t\t\t\"12\",\r\n\t\t\t\"48\",\r\n\t\t\t\"46\",\r\n\t\t\t\"12\",\r\n\t\t\t\"395\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"PKWDPZ19QRNrq\",\r\n\t\t\t\"13\",\r\n\t\t\t\"24\",\r\n\t\t\t\"27\",\r\n\t\t\t\"17\",\r\n\t\t\t\"340\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"PKWDPPh1TNHCh\",\r\n\t\t\t\"14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"36\",\r\n\t\t\t\"13\",\r\n\t\t\t\"299\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"PKWDPH6Q51k29\",\r\n\t\t\t\"15\",\r\n\t\t\t\"37\",\r\n\t\t\t\"20\",\r\n\t\t\t\"15\",\r\n\t\t\t\"408\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"PKWDP2mpwUmS5\",\r\n\t\t\t\"16\",\r\n\t\t\t\"36\",\r\n\t\t\t\"40\",\r\n\t\t\t\"50\",\r\n\t\t\t\"472\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"PKWDP07BrGxf2\",\r\n\t\t\t\"17\",\r\n\t\t\t\"25\",\r\n\t\t\t\"29\",\r\n\t\t\t\"49\",\r\n\t\t\t\"138\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"PKWDPROG6tAJg\",\r\n\t\t\t\"18\",\r\n\t\t\t\"45\",\r\n\t\t\t\"12\",\r\n\t\t\t\"32\",\r\n\t\t\t\"356\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"PKWDPUWYGDKwm\",\r\n\t\t\t\"19\",\r\n\t\t\t\"36\",\r\n\t\t\t\"44\",\r\n\t\t\t\"37\",\r\n\t\t\t\"423\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"PKWDPVGUhe5T1\",\r\n\t\t\t\"20\",\r\n\t\t\t\"49\",\r\n\t\t\t\"49\",\r\n\t\t\t\"50\",\r\n\t\t\t\"193\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"dc6a207b-b4eb-42d5-a5b7-b1262193e961\",\r\n\t\t\t\"1\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"125\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"f425bdec-fdc1-41cb-8d4b-19179d9ed7a9\",\r\n\t\t\t\"2\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"337\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"9fe3ff35-a57f-4dc2-b682-d69881ebd3e8\",\r\n\t\t\t\"3\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"317\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"48851c5a-132f-4df2-8139-1b0f8ba4ea13\",\r\n\t\t\t\"4\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"497\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"97b9bbb8-e390-4c6c-a688-3676c7a322a1\",\r\n\t\t\t\"5\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"496\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"5d53e82d-ea2c-42de-8255-5150462cc9e2\",\r\n\t\t\t\"6\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"114\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"bab7f29e-f1ec-4d0a-91a3-08cc0121fffc\",\r\n\t\t\t\"7\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"102\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"6117a4e4-2d58-4020-a047-7d0f568379df\",\r\n\t\t\t\"8\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"479\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"41c3a00c-c372-442c-b87c-b7329e1457ac\",\r\n\t\t\t\"9\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"140\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"0542e1ee-2535-44f7-bf41-fb4787f2de52\",\r\n\t\t\t\"10\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"280\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"02ccc497-fb94-4dcc-83dd-21f5db43f43e\",\r\n\t\t\t\"11\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"437\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"05883cec-d339-4cd0-b763-67f7d9d543ff\",\r\n\t\t\t\"12\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"354\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"74a8d502-8b17-4d96-8741-b38d294ae601\",\r\n\t\t\t\"13\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"430\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"72476b15-4090-46bc-be2f-e4e86171af50\",\r\n\t\t\t\"14\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"478\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"980a592b-bf45-4cbe-8ede-2c0d1d6302c4\",\r\n\t\t\t\"15\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"462\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"e50aeb0a-42ef-45f6-a247-e426f0cbd39c\",\r\n\t\t\t\"16\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"271\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"b7440ad5-4836-44e8-96ba-687e1c7fb0bb\",\r\n\t\t\t\"17\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"479\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"a0b745fd-d1de-45d0-9e86-42021ce43d43\",\r\n\t\t\t\"18\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"305\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"4fca59a2-84c1-40d2-b5a7-86ab957f00cc\",\r\n\t\t\t\"19\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"372\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"9129d101-c4ac-43cf-a818-079d4365c2d5\",\r\n\t\t\t\"20\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"459\",\r\n\t\t\t\"\"\r\n\t\t]\r\n\t],\r\n\t\"draftMode\": true\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{non_existing_study_id}}/datasets/{{study_plot_datasetId}}/observationUnits/observations",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{non_existing_study_id}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"observationUnits",
										"observations"
									]
								},
								"description": "PUT /crops/{cropName}/programs​/{programUUID}​/studies/{studyId}/datasets/{datasetId}/observationUnits/observations"
							},
							"response": []
						},
						{
							"name": "Add observation values with non-existing datasetId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0a7aa869-e669-4bc1-bcde-8b7544fc8535",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"pm.test(\"Check error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Dataset does not exist\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "3acbce30-8ee2-4259-bccb-225ce4b41f71",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"processWarnings\": true,\r\n\t\"data\": [\r\n\t\t[\r\n\t\t\t\"TRIAL_INSTANCE\",\r\n\t\t\t\"PI_NAME\",\r\n\t\t\t\"EXPT_DESIGN\",\r\n\t\t\t\"LOCATION_ID\",\r\n\t\t\t\"LOCATION_NAME\",\r\n\t\t\t\"Crop_season_Code\",\r\n\t\t\t\"ENTRY_TYPE\",\r\n\t\t\t\"GID\",\r\n\t\t\t\"DESIGNATION\",\r\n\t\t\t\"ENTRY_NO\",\r\n\t\t\t\"OBS_UNIT_ID\",\r\n\t\t\t\"PLOT_NO\",\r\n\t\t\t\"WeedPressure_number\",\r\n\t\t\t\"Grain_yield\",\r\n\t\t\t\"Biomas_yield\",\r\n\t\t\t\"InputVariable\",\r\n\t\t\t\"NPSEL\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"PKWDPtLOzD8Sz\",\r\n\t\t\t\"1\",\r\n\t\t\t\"21\",\r\n\t\t\t\"23\",\r\n\t\t\t\"40\",\r\n\t\t\t\"338\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"PKWDP6ME6bt1l\",\r\n\t\t\t\"2\",\r\n\t\t\t\"15\",\r\n\t\t\t\"12\",\r\n\t\t\t\"45\",\r\n\t\t\t\"285\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"PKWDPe2za6TM7\",\r\n\t\t\t\"3\",\r\n\t\t\t\"12\",\r\n\t\t\t\"41\",\r\n\t\t\t\"32\",\r\n\t\t\t\"176\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"PKWDPEV6LPs1N\",\r\n\t\t\t\"4\",\r\n\t\t\t\"46\",\r\n\t\t\t\"49\",\r\n\t\t\t\"33\",\r\n\t\t\t\"488\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"PKWDPU27n9e9L\",\r\n\t\t\t\"5\",\r\n\t\t\t\"33\",\r\n\t\t\t\"41\",\r\n\t\t\t\"28\",\r\n\t\t\t\"397\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"PKWDPmpZgUu6S\",\r\n\t\t\t\"6\",\r\n\t\t\t\"48\",\r\n\t\t\t\"17\",\r\n\t\t\t\"35\",\r\n\t\t\t\"463\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"PKWDP0M9lGBzz\",\r\n\t\t\t\"7\",\r\n\t\t\t\"34\",\r\n\t\t\t\"16\",\r\n\t\t\t\"49\",\r\n\t\t\t\"105\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"PKWDPsCKr80ks\",\r\n\t\t\t\"8\",\r\n\t\t\t\"17\",\r\n\t\t\t\"28\",\r\n\t\t\t\"15\",\r\n\t\t\t\"379\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"PKWDPDotBpZ1y\",\r\n\t\t\t\"9\",\r\n\t\t\t\"45\",\r\n\t\t\t\"28\",\r\n\t\t\t\"49\",\r\n\t\t\t\"424\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"PKWDPCYuyqdql\",\r\n\t\t\t\"10\",\r\n\t\t\t\"41\",\r\n\t\t\t\"26\",\r\n\t\t\t\"10\",\r\n\t\t\t\"188\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"PKWDP0fPOkMaC\",\r\n\t\t\t\"11\",\r\n\t\t\t\"39\",\r\n\t\t\t\"20\",\r\n\t\t\t\"31\",\r\n\t\t\t\"471\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"PKWDPGN6nYdv2\",\r\n\t\t\t\"12\",\r\n\t\t\t\"48\",\r\n\t\t\t\"46\",\r\n\t\t\t\"12\",\r\n\t\t\t\"395\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"PKWDPZ19QRNrq\",\r\n\t\t\t\"13\",\r\n\t\t\t\"24\",\r\n\t\t\t\"27\",\r\n\t\t\t\"17\",\r\n\t\t\t\"340\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"PKWDPPh1TNHCh\",\r\n\t\t\t\"14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"36\",\r\n\t\t\t\"13\",\r\n\t\t\t\"299\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"PKWDPH6Q51k29\",\r\n\t\t\t\"15\",\r\n\t\t\t\"37\",\r\n\t\t\t\"20\",\r\n\t\t\t\"15\",\r\n\t\t\t\"408\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"PKWDP2mpwUmS5\",\r\n\t\t\t\"16\",\r\n\t\t\t\"36\",\r\n\t\t\t\"40\",\r\n\t\t\t\"50\",\r\n\t\t\t\"472\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"PKWDP07BrGxf2\",\r\n\t\t\t\"17\",\r\n\t\t\t\"25\",\r\n\t\t\t\"29\",\r\n\t\t\t\"49\",\r\n\t\t\t\"138\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"PKWDPROG6tAJg\",\r\n\t\t\t\"18\",\r\n\t\t\t\"45\",\r\n\t\t\t\"12\",\r\n\t\t\t\"32\",\r\n\t\t\t\"356\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"PKWDPUWYGDKwm\",\r\n\t\t\t\"19\",\r\n\t\t\t\"36\",\r\n\t\t\t\"44\",\r\n\t\t\t\"37\",\r\n\t\t\t\"423\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"PKWDPVGUhe5T1\",\r\n\t\t\t\"20\",\r\n\t\t\t\"49\",\r\n\t\t\t\"49\",\r\n\t\t\t\"50\",\r\n\t\t\t\"193\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"dc6a207b-b4eb-42d5-a5b7-b1262193e961\",\r\n\t\t\t\"1\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"125\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"f425bdec-fdc1-41cb-8d4b-19179d9ed7a9\",\r\n\t\t\t\"2\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"337\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"9fe3ff35-a57f-4dc2-b682-d69881ebd3e8\",\r\n\t\t\t\"3\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"317\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"48851c5a-132f-4df2-8139-1b0f8ba4ea13\",\r\n\t\t\t\"4\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"497\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"97b9bbb8-e390-4c6c-a688-3676c7a322a1\",\r\n\t\t\t\"5\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"496\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"5d53e82d-ea2c-42de-8255-5150462cc9e2\",\r\n\t\t\t\"6\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"114\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"bab7f29e-f1ec-4d0a-91a3-08cc0121fffc\",\r\n\t\t\t\"7\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"102\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"6117a4e4-2d58-4020-a047-7d0f568379df\",\r\n\t\t\t\"8\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"479\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"41c3a00c-c372-442c-b87c-b7329e1457ac\",\r\n\t\t\t\"9\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"140\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"0542e1ee-2535-44f7-bf41-fb4787f2de52\",\r\n\t\t\t\"10\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"280\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"02ccc497-fb94-4dcc-83dd-21f5db43f43e\",\r\n\t\t\t\"11\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"437\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"05883cec-d339-4cd0-b763-67f7d9d543ff\",\r\n\t\t\t\"12\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"354\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"74a8d502-8b17-4d96-8741-b38d294ae601\",\r\n\t\t\t\"13\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"430\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"72476b15-4090-46bc-be2f-e4e86171af50\",\r\n\t\t\t\"14\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"478\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"980a592b-bf45-4cbe-8ede-2c0d1d6302c4\",\r\n\t\t\t\"15\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"462\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"e50aeb0a-42ef-45f6-a247-e426f0cbd39c\",\r\n\t\t\t\"16\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"271\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"b7440ad5-4836-44e8-96ba-687e1c7fb0bb\",\r\n\t\t\t\"17\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"479\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"a0b745fd-d1de-45d0-9e86-42021ce43d43\",\r\n\t\t\t\"18\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"305\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"4fca59a2-84c1-40d2-b5a7-86ab957f00cc\",\r\n\t\t\t\"19\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"372\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"9129d101-c4ac-43cf-a818-079d4365c2d5\",\r\n\t\t\t\"20\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"459\",\r\n\t\t\t\"\"\r\n\t\t]\r\n\t],\r\n\t\"draftMode\": true\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{non_existing_dataset_id}}/observationUnits/observations",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{non_existing_dataset_id}}",
										"observationUnits",
										"observations"
									]
								},
								"description": "PUT /crops/{cropName}/programs​/{programUUID}​/studies/{studyId}/datasets/{datasetId}/observationUnits/observations"
							},
							"response": []
						},
						{
							"name": "Add observation values with datasetId that does not belong to the study",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d2e3ef45-84a0-480b-8eb2-e6f4f7230cfb",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Check error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Specified dataset \"+pm.environment.get(\"study_plot_dataset_id_noPhenoCount\")+\" does not belong to the study \"+pm.environment.get(\"studyId\"));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "4a9910c7-981b-4ed8-bc14-b40bc52c5a19",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"processWarnings\": true,\r\n\t\"data\": [\r\n\t\t[\r\n\t\t\t\"TRIAL_INSTANCE\",\r\n\t\t\t\"PI_NAME\",\r\n\t\t\t\"EXPT_DESIGN\",\r\n\t\t\t\"LOCATION_ID\",\r\n\t\t\t\"LOCATION_NAME\",\r\n\t\t\t\"Crop_season_Code\",\r\n\t\t\t\"ENTRY_TYPE\",\r\n\t\t\t\"GID\",\r\n\t\t\t\"DESIGNATION\",\r\n\t\t\t\"ENTRY_NO\",\r\n\t\t\t\"OBS_UNIT_ID\",\r\n\t\t\t\"PLOT_NO\",\r\n\t\t\t\"WeedPressure_number\",\r\n\t\t\t\"Grain_yield\",\r\n\t\t\t\"Biomas_yield\",\r\n\t\t\t\"InputVariable\",\r\n\t\t\t\"NPSEL\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"PKWDPtLOzD8Sz\",\r\n\t\t\t\"1\",\r\n\t\t\t\"21\",\r\n\t\t\t\"23\",\r\n\t\t\t\"40\",\r\n\t\t\t\"338\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"PKWDP6ME6bt1l\",\r\n\t\t\t\"2\",\r\n\t\t\t\"15\",\r\n\t\t\t\"12\",\r\n\t\t\t\"45\",\r\n\t\t\t\"285\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"PKWDPe2za6TM7\",\r\n\t\t\t\"3\",\r\n\t\t\t\"12\",\r\n\t\t\t\"41\",\r\n\t\t\t\"32\",\r\n\t\t\t\"176\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"PKWDPEV6LPs1N\",\r\n\t\t\t\"4\",\r\n\t\t\t\"46\",\r\n\t\t\t\"49\",\r\n\t\t\t\"33\",\r\n\t\t\t\"488\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"PKWDPU27n9e9L\",\r\n\t\t\t\"5\",\r\n\t\t\t\"33\",\r\n\t\t\t\"41\",\r\n\t\t\t\"28\",\r\n\t\t\t\"397\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"PKWDPmpZgUu6S\",\r\n\t\t\t\"6\",\r\n\t\t\t\"48\",\r\n\t\t\t\"17\",\r\n\t\t\t\"35\",\r\n\t\t\t\"463\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"PKWDP0M9lGBzz\",\r\n\t\t\t\"7\",\r\n\t\t\t\"34\",\r\n\t\t\t\"16\",\r\n\t\t\t\"49\",\r\n\t\t\t\"105\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"PKWDPsCKr80ks\",\r\n\t\t\t\"8\",\r\n\t\t\t\"17\",\r\n\t\t\t\"28\",\r\n\t\t\t\"15\",\r\n\t\t\t\"379\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"PKWDPDotBpZ1y\",\r\n\t\t\t\"9\",\r\n\t\t\t\"45\",\r\n\t\t\t\"28\",\r\n\t\t\t\"49\",\r\n\t\t\t\"424\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"PKWDPCYuyqdql\",\r\n\t\t\t\"10\",\r\n\t\t\t\"41\",\r\n\t\t\t\"26\",\r\n\t\t\t\"10\",\r\n\t\t\t\"188\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"PKWDP0fPOkMaC\",\r\n\t\t\t\"11\",\r\n\t\t\t\"39\",\r\n\t\t\t\"20\",\r\n\t\t\t\"31\",\r\n\t\t\t\"471\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"PKWDPGN6nYdv2\",\r\n\t\t\t\"12\",\r\n\t\t\t\"48\",\r\n\t\t\t\"46\",\r\n\t\t\t\"12\",\r\n\t\t\t\"395\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"PKWDPZ19QRNrq\",\r\n\t\t\t\"13\",\r\n\t\t\t\"24\",\r\n\t\t\t\"27\",\r\n\t\t\t\"17\",\r\n\t\t\t\"340\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"PKWDPPh1TNHCh\",\r\n\t\t\t\"14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"36\",\r\n\t\t\t\"13\",\r\n\t\t\t\"299\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"PKWDPH6Q51k29\",\r\n\t\t\t\"15\",\r\n\t\t\t\"37\",\r\n\t\t\t\"20\",\r\n\t\t\t\"15\",\r\n\t\t\t\"408\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"PKWDP2mpwUmS5\",\r\n\t\t\t\"16\",\r\n\t\t\t\"36\",\r\n\t\t\t\"40\",\r\n\t\t\t\"50\",\r\n\t\t\t\"472\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"PKWDP07BrGxf2\",\r\n\t\t\t\"17\",\r\n\t\t\t\"25\",\r\n\t\t\t\"29\",\r\n\t\t\t\"49\",\r\n\t\t\t\"138\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"PKWDPROG6tAJg\",\r\n\t\t\t\"18\",\r\n\t\t\t\"45\",\r\n\t\t\t\"12\",\r\n\t\t\t\"32\",\r\n\t\t\t\"356\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"PKWDPUWYGDKwm\",\r\n\t\t\t\"19\",\r\n\t\t\t\"36\",\r\n\t\t\t\"44\",\r\n\t\t\t\"37\",\r\n\t\t\t\"423\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"PKWDPVGUhe5T1\",\r\n\t\t\t\"20\",\r\n\t\t\t\"49\",\r\n\t\t\t\"49\",\r\n\t\t\t\"50\",\r\n\t\t\t\"193\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"dc6a207b-b4eb-42d5-a5b7-b1262193e961\",\r\n\t\t\t\"1\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"125\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"f425bdec-fdc1-41cb-8d4b-19179d9ed7a9\",\r\n\t\t\t\"2\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"337\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"9fe3ff35-a57f-4dc2-b682-d69881ebd3e8\",\r\n\t\t\t\"3\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"317\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"48851c5a-132f-4df2-8139-1b0f8ba4ea13\",\r\n\t\t\t\"4\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"497\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"97b9bbb8-e390-4c6c-a688-3676c7a322a1\",\r\n\t\t\t\"5\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"496\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"5d53e82d-ea2c-42de-8255-5150462cc9e2\",\r\n\t\t\t\"6\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"114\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"bab7f29e-f1ec-4d0a-91a3-08cc0121fffc\",\r\n\t\t\t\"7\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"102\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"6117a4e4-2d58-4020-a047-7d0f568379df\",\r\n\t\t\t\"8\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"479\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"41c3a00c-c372-442c-b87c-b7329e1457ac\",\r\n\t\t\t\"9\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"140\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"0542e1ee-2535-44f7-bf41-fb4787f2de52\",\r\n\t\t\t\"10\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"280\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"02ccc497-fb94-4dcc-83dd-21f5db43f43e\",\r\n\t\t\t\"11\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"437\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"05883cec-d339-4cd0-b763-67f7d9d543ff\",\r\n\t\t\t\"12\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"354\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"74a8d502-8b17-4d96-8741-b38d294ae601\",\r\n\t\t\t\"13\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"430\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"72476b15-4090-46bc-be2f-e4e86171af50\",\r\n\t\t\t\"14\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"478\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"980a592b-bf45-4cbe-8ede-2c0d1d6302c4\",\r\n\t\t\t\"15\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"462\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"e50aeb0a-42ef-45f6-a247-e426f0cbd39c\",\r\n\t\t\t\"16\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"271\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"b7440ad5-4836-44e8-96ba-687e1c7fb0bb\",\r\n\t\t\t\"17\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"479\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"a0b745fd-d1de-45d0-9e86-42021ce43d43\",\r\n\t\t\t\"18\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"305\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"4fca59a2-84c1-40d2-b5a7-86ab957f00cc\",\r\n\t\t\t\"19\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"372\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"9129d101-c4ac-43cf-a818-079d4365c2d5\",\r\n\t\t\t\"20\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"459\",\r\n\t\t\t\"\"\r\n\t\t]\r\n\t],\r\n\t\"draftMode\": true\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_dataset_id_noPhenoCount}}/observationUnits/observations",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_dataset_id_noPhenoCount}}",
										"observationUnits",
										"observations"
									]
								},
								"description": "PUT /crops/{cropName}/programs​/{programUUID}​/studies/{studyId}/datasets/{datasetId}/observationUnits/observations"
							},
							"response": []
						},
						{
							"name": "Add observation with invalid numeric variable",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6c203e7a-94fc-4a26-8c06-a9f352565cd2",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Check error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"The numeric variable InputVariable contains an invalid value: invalid. Please check the data file and try again.\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c5b0d2e3-2c11-46e0-a3c5-91cdcf80d312",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"processWarnings\": true,\r\n\t\"data\": [\r\n\t\t[\r\n\t\t\t\"TRIAL_INSTANCE\",\r\n\t\t\t\"PI_NAME\",\r\n\t\t\t\"EXPT_DESIGN\",\r\n\t\t\t\"LOCATION_ID\",\r\n\t\t\t\"LOCATION_NAME\",\r\n\t\t\t\"Crop_season_Code\",\r\n\t\t\t\"ENTRY_TYPE\",\r\n\t\t\t\"GID\",\r\n\t\t\t\"DESIGNATION\",\r\n\t\t\t\"ENTRY_NO\",\r\n\t\t\t\"OBS_UNIT_ID\",\r\n\t\t\t\"PLOT_NO\",\r\n\t\t\t\"WeedPressure_number\",\r\n\t\t\t\"Grain_yield\",\r\n\t\t\t\"Biomas_yield\",\r\n\t\t\t\"InputVariable\",\r\n\t\t\t\"NPSEL\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"PKWDPtLOzD8Sz\",\r\n\t\t\t\"1\",\r\n\t\t\t\"21\",\r\n\t\t\t\"23\",\r\n\t\t\t\"40\",\r\n\t\t\t\"invalid\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"PKWDP6ME6bt1l\",\r\n\t\t\t\"2\",\r\n\t\t\t\"15\",\r\n\t\t\t\"12\",\r\n\t\t\t\"45\",\r\n\t\t\t\"285\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"PKWDPe2za6TM7\",\r\n\t\t\t\"3\",\r\n\t\t\t\"12\",\r\n\t\t\t\"41\",\r\n\t\t\t\"32\",\r\n\t\t\t\"176\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"PKWDPEV6LPs1N\",\r\n\t\t\t\"4\",\r\n\t\t\t\"46\",\r\n\t\t\t\"49\",\r\n\t\t\t\"33\",\r\n\t\t\t\"488\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"PKWDPU27n9e9L\",\r\n\t\t\t\"5\",\r\n\t\t\t\"33\",\r\n\t\t\t\"41\",\r\n\t\t\t\"28\",\r\n\t\t\t\"397\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"PKWDPmpZgUu6S\",\r\n\t\t\t\"6\",\r\n\t\t\t\"48\",\r\n\t\t\t\"17\",\r\n\t\t\t\"35\",\r\n\t\t\t\"463\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"PKWDP0M9lGBzz\",\r\n\t\t\t\"7\",\r\n\t\t\t\"34\",\r\n\t\t\t\"16\",\r\n\t\t\t\"49\",\r\n\t\t\t\"105\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"PKWDPsCKr80ks\",\r\n\t\t\t\"8\",\r\n\t\t\t\"17\",\r\n\t\t\t\"28\",\r\n\t\t\t\"15\",\r\n\t\t\t\"379\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"PKWDPDotBpZ1y\",\r\n\t\t\t\"9\",\r\n\t\t\t\"45\",\r\n\t\t\t\"28\",\r\n\t\t\t\"49\",\r\n\t\t\t\"424\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"PKWDPCYuyqdql\",\r\n\t\t\t\"10\",\r\n\t\t\t\"41\",\r\n\t\t\t\"26\",\r\n\t\t\t\"10\",\r\n\t\t\t\"188\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"PKWDP0fPOkMaC\",\r\n\t\t\t\"11\",\r\n\t\t\t\"39\",\r\n\t\t\t\"20\",\r\n\t\t\t\"31\",\r\n\t\t\t\"471\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"PKWDPGN6nYdv2\",\r\n\t\t\t\"12\",\r\n\t\t\t\"48\",\r\n\t\t\t\"46\",\r\n\t\t\t\"12\",\r\n\t\t\t\"395\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"PKWDPZ19QRNrq\",\r\n\t\t\t\"13\",\r\n\t\t\t\"24\",\r\n\t\t\t\"27\",\r\n\t\t\t\"17\",\r\n\t\t\t\"340\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"PKWDPPh1TNHCh\",\r\n\t\t\t\"14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"36\",\r\n\t\t\t\"13\",\r\n\t\t\t\"299\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"PKWDPH6Q51k29\",\r\n\t\t\t\"15\",\r\n\t\t\t\"37\",\r\n\t\t\t\"20\",\r\n\t\t\t\"15\",\r\n\t\t\t\"408\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"PKWDP2mpwUmS5\",\r\n\t\t\t\"16\",\r\n\t\t\t\"36\",\r\n\t\t\t\"40\",\r\n\t\t\t\"50\",\r\n\t\t\t\"472\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"PKWDP07BrGxf2\",\r\n\t\t\t\"17\",\r\n\t\t\t\"25\",\r\n\t\t\t\"29\",\r\n\t\t\t\"49\",\r\n\t\t\t\"138\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"PKWDPROG6tAJg\",\r\n\t\t\t\"18\",\r\n\t\t\t\"45\",\r\n\t\t\t\"12\",\r\n\t\t\t\"32\",\r\n\t\t\t\"356\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"PKWDPUWYGDKwm\",\r\n\t\t\t\"19\",\r\n\t\t\t\"36\",\r\n\t\t\t\"44\",\r\n\t\t\t\"37\",\r\n\t\t\t\"423\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"PKWDPVGUhe5T1\",\r\n\t\t\t\"20\",\r\n\t\t\t\"49\",\r\n\t\t\t\"49\",\r\n\t\t\t\"50\",\r\n\t\t\t\"193\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"dc6a207b-b4eb-42d5-a5b7-b1262193e961\",\r\n\t\t\t\"1\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"125\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"f425bdec-fdc1-41cb-8d4b-19179d9ed7a9\",\r\n\t\t\t\"2\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"337\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"9fe3ff35-a57f-4dc2-b682-d69881ebd3e8\",\r\n\t\t\t\"3\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"317\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"48851c5a-132f-4df2-8139-1b0f8ba4ea13\",\r\n\t\t\t\"4\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"497\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"97b9bbb8-e390-4c6c-a688-3676c7a322a1\",\r\n\t\t\t\"5\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"496\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"5d53e82d-ea2c-42de-8255-5150462cc9e2\",\r\n\t\t\t\"6\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"114\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"bab7f29e-f1ec-4d0a-91a3-08cc0121fffc\",\r\n\t\t\t\"7\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"102\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"6117a4e4-2d58-4020-a047-7d0f568379df\",\r\n\t\t\t\"8\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"479\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"41c3a00c-c372-442c-b87c-b7329e1457ac\",\r\n\t\t\t\"9\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"140\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"0542e1ee-2535-44f7-bf41-fb4787f2de52\",\r\n\t\t\t\"10\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"280\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"02ccc497-fb94-4dcc-83dd-21f5db43f43e\",\r\n\t\t\t\"11\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"437\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"05883cec-d339-4cd0-b763-67f7d9d543ff\",\r\n\t\t\t\"12\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"354\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"74a8d502-8b17-4d96-8741-b38d294ae601\",\r\n\t\t\t\"13\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"430\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"72476b15-4090-46bc-be2f-e4e86171af50\",\r\n\t\t\t\"14\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"478\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"980a592b-bf45-4cbe-8ede-2c0d1d6302c4\",\r\n\t\t\t\"15\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"462\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"e50aeb0a-42ef-45f6-a247-e426f0cbd39c\",\r\n\t\t\t\"16\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"271\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"b7440ad5-4836-44e8-96ba-687e1c7fb0bb\",\r\n\t\t\t\"17\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"479\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"a0b745fd-d1de-45d0-9e86-42021ce43d43\",\r\n\t\t\t\"18\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"305\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"4fca59a2-84c1-40d2-b5a7-86ab957f00cc\",\r\n\t\t\t\"19\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"372\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"9129d101-c4ac-43cf-a818-079d4365c2d5\",\r\n\t\t\t\"20\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"459\",\r\n\t\t\t\"\"\r\n\t\t]\r\n\t],\r\n\t\"draftMode\": true\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_datasetId}}/observationUnits/observations",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"observationUnits",
										"observations"
									]
								},
								"description": "PUT /crops/{cropName}/programs​/{programUUID}​/studies/{studyId}/datasets/{datasetId}/observationUnits/observations"
							},
							"response": []
						},
						{
							"name": "Add observation to a locked study",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "59504cb6-ba7e-49f8-a0ad-81bf2fd91cd0",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"pm.test(\"Verify error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.equal(\"Study is locked\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0e15db41-50b0-42d0-9567-5e94b0afea83",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user2\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password2\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('testUserToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('testUserTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{testUserToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"processWarnings\": true,\r\n\t\"data\": [\r\n\t\t[\r\n\t\t\t\"OBS_UNIT_ID\",\r\n\t\t\t\"ENTRY_TYPE\",\r\n\t\t\t\"GID\",\r\n\t\t\t\"DESIGNATION\",\r\n\t\t\t\"ENTRY_NO\",\r\n\t\t\t\"REP_NO\",\r\n\t\t\t\"PLOT_NO\",\r\n\t\t\t\"Grain_size\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"b9129428-d34a-42d5-8d9b-745b995f3fa1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"382\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"7fb97924-b41d-4f1c-bedb-03118acdf8ab\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"1\",\r\n\t\t\t\"2\",\r\n\t\t\t\"120\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"42d19ca0-9ce5-4ace-a2b4-765e34770036\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"1\",\r\n\t\t\t\"3\",\r\n\t\t\t\"301\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"002389b5-582c-4ee5-aa42-6a07ffe86c7c\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"1\",\r\n\t\t\t\"4\",\r\n\t\t\t\"146\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"e5a64887-76d6-4133-84fc-b088edb35d1c\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"1\",\r\n\t\t\t\"5\",\r\n\t\t\t\"371\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"848e3199-0523-4ee4-a5b3-31783af1919c\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"1\",\r\n\t\t\t\"6\",\r\n\t\t\t\"105\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"dd3e2a9d-a16e-4913-a89d-0aaab936f8ef\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"1\",\r\n\t\t\t\"7\",\r\n\t\t\t\"415\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"df130273-2689-4602-b0fd-9592f93612ba\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"1\",\r\n\t\t\t\"8\",\r\n\t\t\t\"469\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"e741338d-f076-42d2-aa6b-876c8cac51fd\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"1\",\r\n\t\t\t\"9\",\r\n\t\t\t\"388\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"21e85da8-c58d-479a-b540-5a8ce2126260\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"10\",\r\n\t\t\t\"238\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"140b8ca7-8875-4300-8684-0be748b321de\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"1\",\r\n\t\t\t\"11\",\r\n\t\t\t\"424\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"52869132-f86b-47ba-b42a-ab028ed55f39\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"1\",\r\n\t\t\t\"12\",\r\n\t\t\t\"488\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1286dc6b-a330-408c-b22d-2a63da1f0c15\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"1\",\r\n\t\t\t\"13\",\r\n\t\t\t\"299\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"4e3349e0-0786-48cb-bab4-614a7d4bae1d\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"1\",\r\n\t\t\t\"14\",\r\n\t\t\t\"184\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"74c10cc4-a784-471d-92c9-9633d446f5c6\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"1\",\r\n\t\t\t\"15\",\r\n\t\t\t\"271\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"3a8f24d9-5840-48bd-bb8f-ea853b4c96a7\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"1\",\r\n\t\t\t\"16\",\r\n\t\t\t\"208\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"bcd420d7-63ea-48e8-8577-4d627c748e9d\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"1\",\r\n\t\t\t\"17\",\r\n\t\t\t\"117\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"62a5c1e7-b8b6-4ed7-9e8e-b645c1d6635d\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"1\",\r\n\t\t\t\"18\",\r\n\t\t\t\"375\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"f94a5062-9da1-4b1f-a425-f487b4f51cc1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"1\",\r\n\t\t\t\"19\",\r\n\t\t\t\"426\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"0b8672b7-b6ec-4d97-9a90-498a17f2d3ad\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"1\",\r\n\t\t\t\"20\",\r\n\t\t\t\"292\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"c651f61f-7d03-4e20-b8cc-c3a8a2b2884c\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"2\",\r\n\t\t\t\"21\",\r\n\t\t\t\"274\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"e910d405-7270-44ef-9313-5b1111b88068\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"2\",\r\n\t\t\t\"22\",\r\n\t\t\t\"337\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"f7df3116-8a5e-438d-8ed5-0467757a2591\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"2\",\r\n\t\t\t\"23\",\r\n\t\t\t\"391\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"a3b5cd79-ad6b-4bb0-aae7-630a407bf377\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"2\",\r\n\t\t\t\"24\",\r\n\t\t\t\"233\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"b5b14be3-621b-404a-84d3-197a37b5da52\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"2\",\r\n\t\t\t\"25\",\r\n\t\t\t\"148\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"463d33ee-aaf3-4ead-b573-eea0197675cb\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"2\",\r\n\t\t\t\"26\",\r\n\t\t\t\"298\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"259a4362-104c-4bf1-9eab-3b546b67cd4b\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"2\",\r\n\t\t\t\"27\",\r\n\t\t\t\"278\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"30934fb5-20b6-4df1-bcae-66660b0b6867\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"2\",\r\n\t\t\t\"28\",\r\n\t\t\t\"237\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"d97b3b54-2862-49ef-bbd1-ff32267bc23f\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"2\",\r\n\t\t\t\"29\",\r\n\t\t\t\"295\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"41112da6-9b7d-46d4-8b59-fd169a2762b0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"2\",\r\n\t\t\t\"30\",\r\n\t\t\t\"164\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"751818b2-c539-49d2-ae53-8748bd2729c5\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"2\",\r\n\t\t\t\"31\",\r\n\t\t\t\"243\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1e173e16-fb12-49c2-9b76-fb5d799ac18b\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"2\",\r\n\t\t\t\"32\",\r\n\t\t\t\"272\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"62b3309e-29df-4601-b937-e0fd55358543\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"33\",\r\n\t\t\t\"165\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"d9377c1c-b0c9-4273-a49b-e766d0db5218\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"2\",\r\n\t\t\t\"34\",\r\n\t\t\t\"374\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1c01dda0-c5ea-48ac-84ae-bbb2fae500c5\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"2\",\r\n\t\t\t\"35\",\r\n\t\t\t\"154\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2f38e9fa-0623-4579-93d5-8ef6a96e8ddf\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"2\",\r\n\t\t\t\"36\",\r\n\t\t\t\"170\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"8bc7a69c-63ca-4232-ab38-bf4860709124\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"2\",\r\n\t\t\t\"37\",\r\n\t\t\t\"416\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"23fc0361-7b67-4f0d-8227-50801c95c0d1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"2\",\r\n\t\t\t\"38\",\r\n\t\t\t\"166\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"284843ff-3cb8-4f46-99d1-9e7221492e18\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"2\",\r\n\t\t\t\"39\",\r\n\t\t\t\"366\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"98c70963-a2c1-4d6d-8c58-4566cef0dff3\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"2\",\r\n\t\t\t\"40\",\r\n\t\t\t\"255\"\r\n\t\t]\r\n\t],\r\n\t\"draftMode\": true\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{locked_studyId}}/datasets/{{locked_study_plot_datasetId}}/observationUnits/observations",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{locked_studyId}}",
										"datasets",
										"{{locked_study_plot_datasetId}}",
										"observationUnits",
										"observations"
									]
								},
								"description": "PUT /crops/{cropName}/programs​/{programUUID}​/studies/{studyId}/datasets/{datasetId}/observationUnits/observations"
							},
							"response": []
						},
						{
							"name": "Reject pending data",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5c920919-89f9-47fe-8215-8a16a25d0f55",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e42bcad9-0592-4ad2-813b-fe5eec2152c8",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"processWarnings\": true,\r\n\t\"data\": [\r\n\t\t[\r\n\t\t\t\"TRIAL_INSTANCE\",\r\n\t\t\t\"PI_NAME\",\r\n\t\t\t\"EXPT_DESIGN\",\r\n\t\t\t\"LOCATION_ID\",\r\n\t\t\t\"LOCATION_NAME\",\r\n\t\t\t\"Crop_season_Code\",\r\n\t\t\t\"ENTRY_TYPE\",\r\n\t\t\t\"GID\",\r\n\t\t\t\"DESIGNATION\",\r\n\t\t\t\"ENTRY_NO\",\r\n\t\t\t\"OBS_UNIT_ID\",\r\n\t\t\t\"PLOT_NO\",\r\n\t\t\t\"WeedPressure_number\",\r\n\t\t\t\"Grain_yield\",\r\n\t\t\t\"Biomas_yield\",\r\n\t\t\t\"InputVariable\",\r\n\t\t\t\"NPSEL\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"PKWDPtLOzD8Sz\",\r\n\t\t\t\"1\",\r\n\t\t\t\"21\",\r\n\t\t\t\"23\",\r\n\t\t\t\"40\",\r\n\t\t\t\"338\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"PKWDP6ME6bt1l\",\r\n\t\t\t\"2\",\r\n\t\t\t\"15\",\r\n\t\t\t\"12\",\r\n\t\t\t\"45\",\r\n\t\t\t\"285\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"PKWDPe2za6TM7\",\r\n\t\t\t\"3\",\r\n\t\t\t\"12\",\r\n\t\t\t\"41\",\r\n\t\t\t\"32\",\r\n\t\t\t\"176\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"PKWDPEV6LPs1N\",\r\n\t\t\t\"4\",\r\n\t\t\t\"46\",\r\n\t\t\t\"49\",\r\n\t\t\t\"33\",\r\n\t\t\t\"488\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"PKWDPU27n9e9L\",\r\n\t\t\t\"5\",\r\n\t\t\t\"33\",\r\n\t\t\t\"41\",\r\n\t\t\t\"28\",\r\n\t\t\t\"397\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"PKWDPmpZgUu6S\",\r\n\t\t\t\"6\",\r\n\t\t\t\"48\",\r\n\t\t\t\"17\",\r\n\t\t\t\"35\",\r\n\t\t\t\"463\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"PKWDP0M9lGBzz\",\r\n\t\t\t\"7\",\r\n\t\t\t\"34\",\r\n\t\t\t\"16\",\r\n\t\t\t\"49\",\r\n\t\t\t\"105\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"PKWDPsCKr80ks\",\r\n\t\t\t\"8\",\r\n\t\t\t\"17\",\r\n\t\t\t\"28\",\r\n\t\t\t\"15\",\r\n\t\t\t\"379\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"PKWDPDotBpZ1y\",\r\n\t\t\t\"9\",\r\n\t\t\t\"45\",\r\n\t\t\t\"28\",\r\n\t\t\t\"49\",\r\n\t\t\t\"424\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"PKWDPCYuyqdql\",\r\n\t\t\t\"10\",\r\n\t\t\t\"41\",\r\n\t\t\t\"26\",\r\n\t\t\t\"10\",\r\n\t\t\t\"188\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"PKWDP0fPOkMaC\",\r\n\t\t\t\"11\",\r\n\t\t\t\"39\",\r\n\t\t\t\"20\",\r\n\t\t\t\"31\",\r\n\t\t\t\"471\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"PKWDPGN6nYdv2\",\r\n\t\t\t\"12\",\r\n\t\t\t\"48\",\r\n\t\t\t\"46\",\r\n\t\t\t\"12\",\r\n\t\t\t\"395\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"PKWDPZ19QRNrq\",\r\n\t\t\t\"13\",\r\n\t\t\t\"24\",\r\n\t\t\t\"27\",\r\n\t\t\t\"17\",\r\n\t\t\t\"340\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"PKWDPPh1TNHCh\",\r\n\t\t\t\"14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"36\",\r\n\t\t\t\"13\",\r\n\t\t\t\"299\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"PKWDPH6Q51k29\",\r\n\t\t\t\"15\",\r\n\t\t\t\"37\",\r\n\t\t\t\"20\",\r\n\t\t\t\"15\",\r\n\t\t\t\"408\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"PKWDP2mpwUmS5\",\r\n\t\t\t\"16\",\r\n\t\t\t\"36\",\r\n\t\t\t\"40\",\r\n\t\t\t\"50\",\r\n\t\t\t\"472\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"PKWDP07BrGxf2\",\r\n\t\t\t\"17\",\r\n\t\t\t\"25\",\r\n\t\t\t\"29\",\r\n\t\t\t\"49\",\r\n\t\t\t\"138\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"PKWDPROG6tAJg\",\r\n\t\t\t\"18\",\r\n\t\t\t\"45\",\r\n\t\t\t\"12\",\r\n\t\t\t\"32\",\r\n\t\t\t\"356\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"PKWDPUWYGDKwm\",\r\n\t\t\t\"19\",\r\n\t\t\t\"36\",\r\n\t\t\t\"44\",\r\n\t\t\t\"37\",\r\n\t\t\t\"423\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"PKWDPVGUhe5T1\",\r\n\t\t\t\"20\",\r\n\t\t\t\"49\",\r\n\t\t\t\"49\",\r\n\t\t\t\"50\",\r\n\t\t\t\"193\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"dc6a207b-b4eb-42d5-a5b7-b1262193e961\",\r\n\t\t\t\"1\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"125\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"f425bdec-fdc1-41cb-8d4b-19179d9ed7a9\",\r\n\t\t\t\"2\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"337\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"9fe3ff35-a57f-4dc2-b682-d69881ebd3e8\",\r\n\t\t\t\"3\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"317\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"48851c5a-132f-4df2-8139-1b0f8ba4ea13\",\r\n\t\t\t\"4\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"497\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"97b9bbb8-e390-4c6c-a688-3676c7a322a1\",\r\n\t\t\t\"5\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"496\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"5d53e82d-ea2c-42de-8255-5150462cc9e2\",\r\n\t\t\t\"6\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"114\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"bab7f29e-f1ec-4d0a-91a3-08cc0121fffc\",\r\n\t\t\t\"7\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"102\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"6117a4e4-2d58-4020-a047-7d0f568379df\",\r\n\t\t\t\"8\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"479\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"41c3a00c-c372-442c-b87c-b7329e1457ac\",\r\n\t\t\t\"9\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"140\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"0542e1ee-2535-44f7-bf41-fb4787f2de52\",\r\n\t\t\t\"10\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"280\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"02ccc497-fb94-4dcc-83dd-21f5db43f43e\",\r\n\t\t\t\"11\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"437\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"05883cec-d339-4cd0-b763-67f7d9d543ff\",\r\n\t\t\t\"12\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"354\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"74a8d502-8b17-4d96-8741-b38d294ae601\",\r\n\t\t\t\"13\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"430\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"72476b15-4090-46bc-be2f-e4e86171af50\",\r\n\t\t\t\"14\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"478\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"980a592b-bf45-4cbe-8ede-2c0d1d6302c4\",\r\n\t\t\t\"15\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"462\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"e50aeb0a-42ef-45f6-a247-e426f0cbd39c\",\r\n\t\t\t\"16\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"271\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"b7440ad5-4836-44e8-96ba-687e1c7fb0bb\",\r\n\t\t\t\"17\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"479\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"a0b745fd-d1de-45d0-9e86-42021ce43d43\",\r\n\t\t\t\"18\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"305\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"4fca59a2-84c1-40d2-b5a7-86ab957f00cc\",\r\n\t\t\t\"19\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"372\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"9129d101-c4ac-43cf-a818-079d4365c2d5\",\r\n\t\t\t\"20\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"459\",\r\n\t\t\t\"\"\r\n\t\t]\r\n\t],\r\n\t\"draftMode\": true\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_datasetId}}/observation-units/drafts/rejection",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"observation-units",
										"drafts",
										"rejection"
									]
								},
								"description": "POST /crops/{cropName}/programs​/{programUUID}​/studies/{studyId}/datasets/{datasetId}/observation-units/drafts/rejection"
							},
							"response": []
						},
						{
							"name": "Reject pending data with invalid crop",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "76370aa7-9234-407a-b678-d8ef0434a0b1",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Check error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Invalid crop \"+pm.environment.get(\"invalidCrop\")+\" for URL:/crops/\"+pm.environment.get(\"invalidCrop\")+\"/programs/\"+pm.environment.get(\"api_program_id\")+\"/studies/\"+pm.environment.get(\"studyId\")+\"/datasets/\"+pm.environment.get(\"study_plot_datasetId\")+\"/observation-units/drafts/rejection\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "8bf2e6c2-cc79-456d-9c9c-19b6cf81cb88",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"processWarnings\": true,\r\n\t\"data\": [\r\n\t\t[\r\n\t\t\t\"TRIAL_INSTANCE\",\r\n\t\t\t\"PI_NAME\",\r\n\t\t\t\"EXPT_DESIGN\",\r\n\t\t\t\"LOCATION_ID\",\r\n\t\t\t\"LOCATION_NAME\",\r\n\t\t\t\"Crop_season_Code\",\r\n\t\t\t\"ENTRY_TYPE\",\r\n\t\t\t\"GID\",\r\n\t\t\t\"DESIGNATION\",\r\n\t\t\t\"ENTRY_NO\",\r\n\t\t\t\"OBS_UNIT_ID\",\r\n\t\t\t\"PLOT_NO\",\r\n\t\t\t\"WeedPressure_number\",\r\n\t\t\t\"Grain_yield\",\r\n\t\t\t\"Biomas_yield\",\r\n\t\t\t\"InputVariable\",\r\n\t\t\t\"NPSEL\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"PKWDPtLOzD8Sz\",\r\n\t\t\t\"1\",\r\n\t\t\t\"21\",\r\n\t\t\t\"23\",\r\n\t\t\t\"40\",\r\n\t\t\t\"338\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"PKWDP6ME6bt1l\",\r\n\t\t\t\"2\",\r\n\t\t\t\"15\",\r\n\t\t\t\"12\",\r\n\t\t\t\"45\",\r\n\t\t\t\"285\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"PKWDPe2za6TM7\",\r\n\t\t\t\"3\",\r\n\t\t\t\"12\",\r\n\t\t\t\"41\",\r\n\t\t\t\"32\",\r\n\t\t\t\"176\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"PKWDPEV6LPs1N\",\r\n\t\t\t\"4\",\r\n\t\t\t\"46\",\r\n\t\t\t\"49\",\r\n\t\t\t\"33\",\r\n\t\t\t\"488\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"PKWDPU27n9e9L\",\r\n\t\t\t\"5\",\r\n\t\t\t\"33\",\r\n\t\t\t\"41\",\r\n\t\t\t\"28\",\r\n\t\t\t\"397\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"PKWDPmpZgUu6S\",\r\n\t\t\t\"6\",\r\n\t\t\t\"48\",\r\n\t\t\t\"17\",\r\n\t\t\t\"35\",\r\n\t\t\t\"463\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"PKWDP0M9lGBzz\",\r\n\t\t\t\"7\",\r\n\t\t\t\"34\",\r\n\t\t\t\"16\",\r\n\t\t\t\"49\",\r\n\t\t\t\"105\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"PKWDPsCKr80ks\",\r\n\t\t\t\"8\",\r\n\t\t\t\"17\",\r\n\t\t\t\"28\",\r\n\t\t\t\"15\",\r\n\t\t\t\"379\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"PKWDPDotBpZ1y\",\r\n\t\t\t\"9\",\r\n\t\t\t\"45\",\r\n\t\t\t\"28\",\r\n\t\t\t\"49\",\r\n\t\t\t\"424\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"PKWDPCYuyqdql\",\r\n\t\t\t\"10\",\r\n\t\t\t\"41\",\r\n\t\t\t\"26\",\r\n\t\t\t\"10\",\r\n\t\t\t\"188\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"PKWDP0fPOkMaC\",\r\n\t\t\t\"11\",\r\n\t\t\t\"39\",\r\n\t\t\t\"20\",\r\n\t\t\t\"31\",\r\n\t\t\t\"471\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"PKWDPGN6nYdv2\",\r\n\t\t\t\"12\",\r\n\t\t\t\"48\",\r\n\t\t\t\"46\",\r\n\t\t\t\"12\",\r\n\t\t\t\"395\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"PKWDPZ19QRNrq\",\r\n\t\t\t\"13\",\r\n\t\t\t\"24\",\r\n\t\t\t\"27\",\r\n\t\t\t\"17\",\r\n\t\t\t\"340\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"PKWDPPh1TNHCh\",\r\n\t\t\t\"14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"36\",\r\n\t\t\t\"13\",\r\n\t\t\t\"299\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"PKWDPH6Q51k29\",\r\n\t\t\t\"15\",\r\n\t\t\t\"37\",\r\n\t\t\t\"20\",\r\n\t\t\t\"15\",\r\n\t\t\t\"408\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"PKWDP2mpwUmS5\",\r\n\t\t\t\"16\",\r\n\t\t\t\"36\",\r\n\t\t\t\"40\",\r\n\t\t\t\"50\",\r\n\t\t\t\"472\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"PKWDP07BrGxf2\",\r\n\t\t\t\"17\",\r\n\t\t\t\"25\",\r\n\t\t\t\"29\",\r\n\t\t\t\"49\",\r\n\t\t\t\"138\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"PKWDPROG6tAJg\",\r\n\t\t\t\"18\",\r\n\t\t\t\"45\",\r\n\t\t\t\"12\",\r\n\t\t\t\"32\",\r\n\t\t\t\"356\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"PKWDPUWYGDKwm\",\r\n\t\t\t\"19\",\r\n\t\t\t\"36\",\r\n\t\t\t\"44\",\r\n\t\t\t\"37\",\r\n\t\t\t\"423\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"PKWDPVGUhe5T1\",\r\n\t\t\t\"20\",\r\n\t\t\t\"49\",\r\n\t\t\t\"49\",\r\n\t\t\t\"50\",\r\n\t\t\t\"193\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"dc6a207b-b4eb-42d5-a5b7-b1262193e961\",\r\n\t\t\t\"1\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"125\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"f425bdec-fdc1-41cb-8d4b-19179d9ed7a9\",\r\n\t\t\t\"2\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"337\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"9fe3ff35-a57f-4dc2-b682-d69881ebd3e8\",\r\n\t\t\t\"3\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"317\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"48851c5a-132f-4df2-8139-1b0f8ba4ea13\",\r\n\t\t\t\"4\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"497\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"97b9bbb8-e390-4c6c-a688-3676c7a322a1\",\r\n\t\t\t\"5\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"496\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"5d53e82d-ea2c-42de-8255-5150462cc9e2\",\r\n\t\t\t\"6\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"114\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"bab7f29e-f1ec-4d0a-91a3-08cc0121fffc\",\r\n\t\t\t\"7\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"102\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"6117a4e4-2d58-4020-a047-7d0f568379df\",\r\n\t\t\t\"8\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"479\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"41c3a00c-c372-442c-b87c-b7329e1457ac\",\r\n\t\t\t\"9\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"140\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"0542e1ee-2535-44f7-bf41-fb4787f2de52\",\r\n\t\t\t\"10\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"280\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"02ccc497-fb94-4dcc-83dd-21f5db43f43e\",\r\n\t\t\t\"11\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"437\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"05883cec-d339-4cd0-b763-67f7d9d543ff\",\r\n\t\t\t\"12\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"354\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"74a8d502-8b17-4d96-8741-b38d294ae601\",\r\n\t\t\t\"13\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"430\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"72476b15-4090-46bc-be2f-e4e86171af50\",\r\n\t\t\t\"14\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"478\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"980a592b-bf45-4cbe-8ede-2c0d1d6302c4\",\r\n\t\t\t\"15\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"462\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"e50aeb0a-42ef-45f6-a247-e426f0cbd39c\",\r\n\t\t\t\"16\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"271\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"b7440ad5-4836-44e8-96ba-687e1c7fb0bb\",\r\n\t\t\t\"17\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"479\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"a0b745fd-d1de-45d0-9e86-42021ce43d43\",\r\n\t\t\t\"18\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"305\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"4fca59a2-84c1-40d2-b5a7-86ab957f00cc\",\r\n\t\t\t\"19\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"372\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"9129d101-c4ac-43cf-a818-079d4365c2d5\",\r\n\t\t\t\"20\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"459\",\r\n\t\t\t\"\"\r\n\t\t]\r\n\t],\r\n\t\"draftMode\": true\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{invalidCrop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_datasetId}}/observation-units/drafts/rejection",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{invalidCrop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"observation-units",
										"drafts",
										"rejection"
									]
								},
								"description": "POST /crops/{cropName}/programs​/{programUUID}​/studies/{studyId}/datasets/{datasetId}/observation-units/drafts/rejection"
							},
							"response": []
						},
						{
							"name": "Reject pending data with invalid program",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f7d7a77a-ebfc-4b5e-b946-328b2641b202",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Check error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Invalid program: invalid for crop: \"+pm.environment.get(\"crop\")+\" for service with path /crops/\"+pm.environment.get(\"crop\")+\"/programs/invalid/studies/\"+pm.environment.get(\"studyId\")+\"/datasets/\"+pm.environment.get(\"study_plot_datasetId\")+\"/observation-units/drafts/rejection\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ed2a8348-24a9-408e-a3e7-296201e5e565",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"processWarnings\": true,\r\n\t\"data\": [\r\n\t\t[\r\n\t\t\t\"TRIAL_INSTANCE\",\r\n\t\t\t\"PI_NAME\",\r\n\t\t\t\"EXPT_DESIGN\",\r\n\t\t\t\"LOCATION_ID\",\r\n\t\t\t\"LOCATION_NAME\",\r\n\t\t\t\"Crop_season_Code\",\r\n\t\t\t\"ENTRY_TYPE\",\r\n\t\t\t\"GID\",\r\n\t\t\t\"DESIGNATION\",\r\n\t\t\t\"ENTRY_NO\",\r\n\t\t\t\"OBS_UNIT_ID\",\r\n\t\t\t\"PLOT_NO\",\r\n\t\t\t\"WeedPressure_number\",\r\n\t\t\t\"Grain_yield\",\r\n\t\t\t\"Biomas_yield\",\r\n\t\t\t\"InputVariable\",\r\n\t\t\t\"NPSEL\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"PKWDPtLOzD8Sz\",\r\n\t\t\t\"1\",\r\n\t\t\t\"21\",\r\n\t\t\t\"23\",\r\n\t\t\t\"40\",\r\n\t\t\t\"338\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"PKWDP6ME6bt1l\",\r\n\t\t\t\"2\",\r\n\t\t\t\"15\",\r\n\t\t\t\"12\",\r\n\t\t\t\"45\",\r\n\t\t\t\"285\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"PKWDPe2za6TM7\",\r\n\t\t\t\"3\",\r\n\t\t\t\"12\",\r\n\t\t\t\"41\",\r\n\t\t\t\"32\",\r\n\t\t\t\"176\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"PKWDPEV6LPs1N\",\r\n\t\t\t\"4\",\r\n\t\t\t\"46\",\r\n\t\t\t\"49\",\r\n\t\t\t\"33\",\r\n\t\t\t\"488\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"PKWDPU27n9e9L\",\r\n\t\t\t\"5\",\r\n\t\t\t\"33\",\r\n\t\t\t\"41\",\r\n\t\t\t\"28\",\r\n\t\t\t\"397\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"PKWDPmpZgUu6S\",\r\n\t\t\t\"6\",\r\n\t\t\t\"48\",\r\n\t\t\t\"17\",\r\n\t\t\t\"35\",\r\n\t\t\t\"463\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"PKWDP0M9lGBzz\",\r\n\t\t\t\"7\",\r\n\t\t\t\"34\",\r\n\t\t\t\"16\",\r\n\t\t\t\"49\",\r\n\t\t\t\"105\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"PKWDPsCKr80ks\",\r\n\t\t\t\"8\",\r\n\t\t\t\"17\",\r\n\t\t\t\"28\",\r\n\t\t\t\"15\",\r\n\t\t\t\"379\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"PKWDPDotBpZ1y\",\r\n\t\t\t\"9\",\r\n\t\t\t\"45\",\r\n\t\t\t\"28\",\r\n\t\t\t\"49\",\r\n\t\t\t\"424\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"PKWDPCYuyqdql\",\r\n\t\t\t\"10\",\r\n\t\t\t\"41\",\r\n\t\t\t\"26\",\r\n\t\t\t\"10\",\r\n\t\t\t\"188\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"PKWDP0fPOkMaC\",\r\n\t\t\t\"11\",\r\n\t\t\t\"39\",\r\n\t\t\t\"20\",\r\n\t\t\t\"31\",\r\n\t\t\t\"471\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"PKWDPGN6nYdv2\",\r\n\t\t\t\"12\",\r\n\t\t\t\"48\",\r\n\t\t\t\"46\",\r\n\t\t\t\"12\",\r\n\t\t\t\"395\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"PKWDPZ19QRNrq\",\r\n\t\t\t\"13\",\r\n\t\t\t\"24\",\r\n\t\t\t\"27\",\r\n\t\t\t\"17\",\r\n\t\t\t\"340\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"PKWDPPh1TNHCh\",\r\n\t\t\t\"14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"36\",\r\n\t\t\t\"13\",\r\n\t\t\t\"299\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"PKWDPH6Q51k29\",\r\n\t\t\t\"15\",\r\n\t\t\t\"37\",\r\n\t\t\t\"20\",\r\n\t\t\t\"15\",\r\n\t\t\t\"408\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"PKWDP2mpwUmS5\",\r\n\t\t\t\"16\",\r\n\t\t\t\"36\",\r\n\t\t\t\"40\",\r\n\t\t\t\"50\",\r\n\t\t\t\"472\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"PKWDP07BrGxf2\",\r\n\t\t\t\"17\",\r\n\t\t\t\"25\",\r\n\t\t\t\"29\",\r\n\t\t\t\"49\",\r\n\t\t\t\"138\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"PKWDPROG6tAJg\",\r\n\t\t\t\"18\",\r\n\t\t\t\"45\",\r\n\t\t\t\"12\",\r\n\t\t\t\"32\",\r\n\t\t\t\"356\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"PKWDPUWYGDKwm\",\r\n\t\t\t\"19\",\r\n\t\t\t\"36\",\r\n\t\t\t\"44\",\r\n\t\t\t\"37\",\r\n\t\t\t\"423\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"PKWDPVGUhe5T1\",\r\n\t\t\t\"20\",\r\n\t\t\t\"49\",\r\n\t\t\t\"49\",\r\n\t\t\t\"50\",\r\n\t\t\t\"193\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"dc6a207b-b4eb-42d5-a5b7-b1262193e961\",\r\n\t\t\t\"1\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"125\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"f425bdec-fdc1-41cb-8d4b-19179d9ed7a9\",\r\n\t\t\t\"2\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"337\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"9fe3ff35-a57f-4dc2-b682-d69881ebd3e8\",\r\n\t\t\t\"3\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"317\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"48851c5a-132f-4df2-8139-1b0f8ba4ea13\",\r\n\t\t\t\"4\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"497\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"97b9bbb8-e390-4c6c-a688-3676c7a322a1\",\r\n\t\t\t\"5\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"496\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"5d53e82d-ea2c-42de-8255-5150462cc9e2\",\r\n\t\t\t\"6\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"114\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"bab7f29e-f1ec-4d0a-91a3-08cc0121fffc\",\r\n\t\t\t\"7\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"102\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"6117a4e4-2d58-4020-a047-7d0f568379df\",\r\n\t\t\t\"8\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"479\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"41c3a00c-c372-442c-b87c-b7329e1457ac\",\r\n\t\t\t\"9\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"140\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"0542e1ee-2535-44f7-bf41-fb4787f2de52\",\r\n\t\t\t\"10\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"280\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"02ccc497-fb94-4dcc-83dd-21f5db43f43e\",\r\n\t\t\t\"11\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"437\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"05883cec-d339-4cd0-b763-67f7d9d543ff\",\r\n\t\t\t\"12\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"354\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"74a8d502-8b17-4d96-8741-b38d294ae601\",\r\n\t\t\t\"13\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"430\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"72476b15-4090-46bc-be2f-e4e86171af50\",\r\n\t\t\t\"14\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"478\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"980a592b-bf45-4cbe-8ede-2c0d1d6302c4\",\r\n\t\t\t\"15\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"462\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"e50aeb0a-42ef-45f6-a247-e426f0cbd39c\",\r\n\t\t\t\"16\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"271\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"b7440ad5-4836-44e8-96ba-687e1c7fb0bb\",\r\n\t\t\t\"17\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"479\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"a0b745fd-d1de-45d0-9e86-42021ce43d43\",\r\n\t\t\t\"18\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"305\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"4fca59a2-84c1-40d2-b5a7-86ab957f00cc\",\r\n\t\t\t\"19\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"372\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"9129d101-c4ac-43cf-a818-079d4365c2d5\",\r\n\t\t\t\"20\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"459\",\r\n\t\t\t\"\"\r\n\t\t]\r\n\t],\r\n\t\"draftMode\": true\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/invalid/studies/{{studyId}}/datasets/{{study_plot_datasetId}}/observation-units/drafts/rejection",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"invalid",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"observation-units",
										"drafts",
										"rejection"
									]
								},
								"description": "POST /crops/{cropName}/programs​/{programUUID}​/studies/{studyId}/datasets/{datasetId}/observation-units/drafts/rejection"
							},
							"response": []
						},
						{
							"name": "Reject pending data with non-existing studyId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cc95ceec-005c-47be-8ee4-5654861f8b84",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"pm.test(\"Check error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Study does not exist\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c9e725b0-1c29-48d2-8953-3eb7114e0dcb",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"processWarnings\": true,\r\n\t\"data\": [\r\n\t\t[\r\n\t\t\t\"TRIAL_INSTANCE\",\r\n\t\t\t\"PI_NAME\",\r\n\t\t\t\"EXPT_DESIGN\",\r\n\t\t\t\"LOCATION_ID\",\r\n\t\t\t\"LOCATION_NAME\",\r\n\t\t\t\"Crop_season_Code\",\r\n\t\t\t\"ENTRY_TYPE\",\r\n\t\t\t\"GID\",\r\n\t\t\t\"DESIGNATION\",\r\n\t\t\t\"ENTRY_NO\",\r\n\t\t\t\"OBS_UNIT_ID\",\r\n\t\t\t\"PLOT_NO\",\r\n\t\t\t\"WeedPressure_number\",\r\n\t\t\t\"Grain_yield\",\r\n\t\t\t\"Biomas_yield\",\r\n\t\t\t\"InputVariable\",\r\n\t\t\t\"NPSEL\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"PKWDPtLOzD8Sz\",\r\n\t\t\t\"1\",\r\n\t\t\t\"21\",\r\n\t\t\t\"23\",\r\n\t\t\t\"40\",\r\n\t\t\t\"338\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"PKWDP6ME6bt1l\",\r\n\t\t\t\"2\",\r\n\t\t\t\"15\",\r\n\t\t\t\"12\",\r\n\t\t\t\"45\",\r\n\t\t\t\"285\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"PKWDPe2za6TM7\",\r\n\t\t\t\"3\",\r\n\t\t\t\"12\",\r\n\t\t\t\"41\",\r\n\t\t\t\"32\",\r\n\t\t\t\"176\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"PKWDPEV6LPs1N\",\r\n\t\t\t\"4\",\r\n\t\t\t\"46\",\r\n\t\t\t\"49\",\r\n\t\t\t\"33\",\r\n\t\t\t\"488\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"PKWDPU27n9e9L\",\r\n\t\t\t\"5\",\r\n\t\t\t\"33\",\r\n\t\t\t\"41\",\r\n\t\t\t\"28\",\r\n\t\t\t\"397\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"PKWDPmpZgUu6S\",\r\n\t\t\t\"6\",\r\n\t\t\t\"48\",\r\n\t\t\t\"17\",\r\n\t\t\t\"35\",\r\n\t\t\t\"463\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"PKWDP0M9lGBzz\",\r\n\t\t\t\"7\",\r\n\t\t\t\"34\",\r\n\t\t\t\"16\",\r\n\t\t\t\"49\",\r\n\t\t\t\"105\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"PKWDPsCKr80ks\",\r\n\t\t\t\"8\",\r\n\t\t\t\"17\",\r\n\t\t\t\"28\",\r\n\t\t\t\"15\",\r\n\t\t\t\"379\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"PKWDPDotBpZ1y\",\r\n\t\t\t\"9\",\r\n\t\t\t\"45\",\r\n\t\t\t\"28\",\r\n\t\t\t\"49\",\r\n\t\t\t\"424\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"PKWDPCYuyqdql\",\r\n\t\t\t\"10\",\r\n\t\t\t\"41\",\r\n\t\t\t\"26\",\r\n\t\t\t\"10\",\r\n\t\t\t\"188\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"PKWDP0fPOkMaC\",\r\n\t\t\t\"11\",\r\n\t\t\t\"39\",\r\n\t\t\t\"20\",\r\n\t\t\t\"31\",\r\n\t\t\t\"471\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"PKWDPGN6nYdv2\",\r\n\t\t\t\"12\",\r\n\t\t\t\"48\",\r\n\t\t\t\"46\",\r\n\t\t\t\"12\",\r\n\t\t\t\"395\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"PKWDPZ19QRNrq\",\r\n\t\t\t\"13\",\r\n\t\t\t\"24\",\r\n\t\t\t\"27\",\r\n\t\t\t\"17\",\r\n\t\t\t\"340\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"PKWDPPh1TNHCh\",\r\n\t\t\t\"14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"36\",\r\n\t\t\t\"13\",\r\n\t\t\t\"299\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"PKWDPH6Q51k29\",\r\n\t\t\t\"15\",\r\n\t\t\t\"37\",\r\n\t\t\t\"20\",\r\n\t\t\t\"15\",\r\n\t\t\t\"408\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"PKWDP2mpwUmS5\",\r\n\t\t\t\"16\",\r\n\t\t\t\"36\",\r\n\t\t\t\"40\",\r\n\t\t\t\"50\",\r\n\t\t\t\"472\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"PKWDP07BrGxf2\",\r\n\t\t\t\"17\",\r\n\t\t\t\"25\",\r\n\t\t\t\"29\",\r\n\t\t\t\"49\",\r\n\t\t\t\"138\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"PKWDPROG6tAJg\",\r\n\t\t\t\"18\",\r\n\t\t\t\"45\",\r\n\t\t\t\"12\",\r\n\t\t\t\"32\",\r\n\t\t\t\"356\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"PKWDPUWYGDKwm\",\r\n\t\t\t\"19\",\r\n\t\t\t\"36\",\r\n\t\t\t\"44\",\r\n\t\t\t\"37\",\r\n\t\t\t\"423\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"PKWDPVGUhe5T1\",\r\n\t\t\t\"20\",\r\n\t\t\t\"49\",\r\n\t\t\t\"49\",\r\n\t\t\t\"50\",\r\n\t\t\t\"193\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"dc6a207b-b4eb-42d5-a5b7-b1262193e961\",\r\n\t\t\t\"1\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"125\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"f425bdec-fdc1-41cb-8d4b-19179d9ed7a9\",\r\n\t\t\t\"2\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"337\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"9fe3ff35-a57f-4dc2-b682-d69881ebd3e8\",\r\n\t\t\t\"3\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"317\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"48851c5a-132f-4df2-8139-1b0f8ba4ea13\",\r\n\t\t\t\"4\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"497\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"97b9bbb8-e390-4c6c-a688-3676c7a322a1\",\r\n\t\t\t\"5\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"496\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"5d53e82d-ea2c-42de-8255-5150462cc9e2\",\r\n\t\t\t\"6\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"114\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"bab7f29e-f1ec-4d0a-91a3-08cc0121fffc\",\r\n\t\t\t\"7\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"102\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"6117a4e4-2d58-4020-a047-7d0f568379df\",\r\n\t\t\t\"8\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"479\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"41c3a00c-c372-442c-b87c-b7329e1457ac\",\r\n\t\t\t\"9\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"140\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"0542e1ee-2535-44f7-bf41-fb4787f2de52\",\r\n\t\t\t\"10\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"280\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"02ccc497-fb94-4dcc-83dd-21f5db43f43e\",\r\n\t\t\t\"11\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"437\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"05883cec-d339-4cd0-b763-67f7d9d543ff\",\r\n\t\t\t\"12\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"354\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"74a8d502-8b17-4d96-8741-b38d294ae601\",\r\n\t\t\t\"13\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"430\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"72476b15-4090-46bc-be2f-e4e86171af50\",\r\n\t\t\t\"14\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"478\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"980a592b-bf45-4cbe-8ede-2c0d1d6302c4\",\r\n\t\t\t\"15\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"462\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"e50aeb0a-42ef-45f6-a247-e426f0cbd39c\",\r\n\t\t\t\"16\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"271\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"b7440ad5-4836-44e8-96ba-687e1c7fb0bb\",\r\n\t\t\t\"17\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"479\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"a0b745fd-d1de-45d0-9e86-42021ce43d43\",\r\n\t\t\t\"18\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"305\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"4fca59a2-84c1-40d2-b5a7-86ab957f00cc\",\r\n\t\t\t\"19\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"372\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"9129d101-c4ac-43cf-a818-079d4365c2d5\",\r\n\t\t\t\"20\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"459\",\r\n\t\t\t\"\"\r\n\t\t]\r\n\t],\r\n\t\"draftMode\": true\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{non_existing_study_id}}/datasets/{{study_plot_datasetId}}/observation-units/drafts/rejection/",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{non_existing_study_id}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"observation-units",
										"drafts",
										"rejection",
										""
									]
								},
								"description": "POST ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/observation-units​/drafts​ rejection"
							},
							"response": []
						},
						{
							"name": "Reject pending data with non-existing datasetId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3b525224-db50-4757-929c-8f3f266d5e86",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"pm.test(\"Check error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Dataset does not exist\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "bbe4381e-507d-45ca-8aa4-0b62129bf491",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"processWarnings\": true,\r\n\t\"data\": [\r\n\t\t[\r\n\t\t\t\"TRIAL_INSTANCE\",\r\n\t\t\t\"PI_NAME\",\r\n\t\t\t\"EXPT_DESIGN\",\r\n\t\t\t\"LOCATION_ID\",\r\n\t\t\t\"LOCATION_NAME\",\r\n\t\t\t\"Crop_season_Code\",\r\n\t\t\t\"ENTRY_TYPE\",\r\n\t\t\t\"GID\",\r\n\t\t\t\"DESIGNATION\",\r\n\t\t\t\"ENTRY_NO\",\r\n\t\t\t\"OBS_UNIT_ID\",\r\n\t\t\t\"PLOT_NO\",\r\n\t\t\t\"WeedPressure_number\",\r\n\t\t\t\"Grain_yield\",\r\n\t\t\t\"Biomas_yield\",\r\n\t\t\t\"InputVariable\",\r\n\t\t\t\"NPSEL\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"PKWDPtLOzD8Sz\",\r\n\t\t\t\"1\",\r\n\t\t\t\"21\",\r\n\t\t\t\"23\",\r\n\t\t\t\"40\",\r\n\t\t\t\"338\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"PKWDP6ME6bt1l\",\r\n\t\t\t\"2\",\r\n\t\t\t\"15\",\r\n\t\t\t\"12\",\r\n\t\t\t\"45\",\r\n\t\t\t\"285\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"PKWDPe2za6TM7\",\r\n\t\t\t\"3\",\r\n\t\t\t\"12\",\r\n\t\t\t\"41\",\r\n\t\t\t\"32\",\r\n\t\t\t\"176\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"PKWDPEV6LPs1N\",\r\n\t\t\t\"4\",\r\n\t\t\t\"46\",\r\n\t\t\t\"49\",\r\n\t\t\t\"33\",\r\n\t\t\t\"488\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"PKWDPU27n9e9L\",\r\n\t\t\t\"5\",\r\n\t\t\t\"33\",\r\n\t\t\t\"41\",\r\n\t\t\t\"28\",\r\n\t\t\t\"397\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"PKWDPmpZgUu6S\",\r\n\t\t\t\"6\",\r\n\t\t\t\"48\",\r\n\t\t\t\"17\",\r\n\t\t\t\"35\",\r\n\t\t\t\"463\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"PKWDP0M9lGBzz\",\r\n\t\t\t\"7\",\r\n\t\t\t\"34\",\r\n\t\t\t\"16\",\r\n\t\t\t\"49\",\r\n\t\t\t\"105\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"PKWDPsCKr80ks\",\r\n\t\t\t\"8\",\r\n\t\t\t\"17\",\r\n\t\t\t\"28\",\r\n\t\t\t\"15\",\r\n\t\t\t\"379\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"PKWDPDotBpZ1y\",\r\n\t\t\t\"9\",\r\n\t\t\t\"45\",\r\n\t\t\t\"28\",\r\n\t\t\t\"49\",\r\n\t\t\t\"424\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"PKWDPCYuyqdql\",\r\n\t\t\t\"10\",\r\n\t\t\t\"41\",\r\n\t\t\t\"26\",\r\n\t\t\t\"10\",\r\n\t\t\t\"188\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"PKWDP0fPOkMaC\",\r\n\t\t\t\"11\",\r\n\t\t\t\"39\",\r\n\t\t\t\"20\",\r\n\t\t\t\"31\",\r\n\t\t\t\"471\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"PKWDPGN6nYdv2\",\r\n\t\t\t\"12\",\r\n\t\t\t\"48\",\r\n\t\t\t\"46\",\r\n\t\t\t\"12\",\r\n\t\t\t\"395\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"PKWDPZ19QRNrq\",\r\n\t\t\t\"13\",\r\n\t\t\t\"24\",\r\n\t\t\t\"27\",\r\n\t\t\t\"17\",\r\n\t\t\t\"340\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"PKWDPPh1TNHCh\",\r\n\t\t\t\"14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"36\",\r\n\t\t\t\"13\",\r\n\t\t\t\"299\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"PKWDPH6Q51k29\",\r\n\t\t\t\"15\",\r\n\t\t\t\"37\",\r\n\t\t\t\"20\",\r\n\t\t\t\"15\",\r\n\t\t\t\"408\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"PKWDP2mpwUmS5\",\r\n\t\t\t\"16\",\r\n\t\t\t\"36\",\r\n\t\t\t\"40\",\r\n\t\t\t\"50\",\r\n\t\t\t\"472\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"PKWDP07BrGxf2\",\r\n\t\t\t\"17\",\r\n\t\t\t\"25\",\r\n\t\t\t\"29\",\r\n\t\t\t\"49\",\r\n\t\t\t\"138\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"PKWDPROG6tAJg\",\r\n\t\t\t\"18\",\r\n\t\t\t\"45\",\r\n\t\t\t\"12\",\r\n\t\t\t\"32\",\r\n\t\t\t\"356\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"PKWDPUWYGDKwm\",\r\n\t\t\t\"19\",\r\n\t\t\t\"36\",\r\n\t\t\t\"44\",\r\n\t\t\t\"37\",\r\n\t\t\t\"423\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"PKWDPVGUhe5T1\",\r\n\t\t\t\"20\",\r\n\t\t\t\"49\",\r\n\t\t\t\"49\",\r\n\t\t\t\"50\",\r\n\t\t\t\"193\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"dc6a207b-b4eb-42d5-a5b7-b1262193e961\",\r\n\t\t\t\"1\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"125\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"f425bdec-fdc1-41cb-8d4b-19179d9ed7a9\",\r\n\t\t\t\"2\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"337\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"9fe3ff35-a57f-4dc2-b682-d69881ebd3e8\",\r\n\t\t\t\"3\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"317\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"48851c5a-132f-4df2-8139-1b0f8ba4ea13\",\r\n\t\t\t\"4\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"497\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"97b9bbb8-e390-4c6c-a688-3676c7a322a1\",\r\n\t\t\t\"5\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"496\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"5d53e82d-ea2c-42de-8255-5150462cc9e2\",\r\n\t\t\t\"6\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"114\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"bab7f29e-f1ec-4d0a-91a3-08cc0121fffc\",\r\n\t\t\t\"7\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"102\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"6117a4e4-2d58-4020-a047-7d0f568379df\",\r\n\t\t\t\"8\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"479\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"41c3a00c-c372-442c-b87c-b7329e1457ac\",\r\n\t\t\t\"9\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"140\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"0542e1ee-2535-44f7-bf41-fb4787f2de52\",\r\n\t\t\t\"10\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"280\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"02ccc497-fb94-4dcc-83dd-21f5db43f43e\",\r\n\t\t\t\"11\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"437\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"05883cec-d339-4cd0-b763-67f7d9d543ff\",\r\n\t\t\t\"12\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"354\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"74a8d502-8b17-4d96-8741-b38d294ae601\",\r\n\t\t\t\"13\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"430\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"72476b15-4090-46bc-be2f-e4e86171af50\",\r\n\t\t\t\"14\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"478\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"980a592b-bf45-4cbe-8ede-2c0d1d6302c4\",\r\n\t\t\t\"15\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"462\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"e50aeb0a-42ef-45f6-a247-e426f0cbd39c\",\r\n\t\t\t\"16\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"271\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"b7440ad5-4836-44e8-96ba-687e1c7fb0bb\",\r\n\t\t\t\"17\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"479\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"a0b745fd-d1de-45d0-9e86-42021ce43d43\",\r\n\t\t\t\"18\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"305\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"4fca59a2-84c1-40d2-b5a7-86ab957f00cc\",\r\n\t\t\t\"19\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"372\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"9129d101-c4ac-43cf-a818-079d4365c2d5\",\r\n\t\t\t\"20\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"459\",\r\n\t\t\t\"\"\r\n\t\t]\r\n\t],\r\n\t\"draftMode\": true\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{non_existing_dataset_id}}/observation-units/drafts/rejection/",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{non_existing_dataset_id}}",
										"observation-units",
										"drafts",
										"rejection",
										""
									]
								},
								"description": "POST ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/observation-units​/drafts​ rejection"
							},
							"response": []
						},
						{
							"name": "Reject pending data with non-obs datasetId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6518fa7e-67c2-417c-bd3c-9d27a1f40af7",
										"exec": [
											"pm.test(\"Status code is 501\", function () {",
											"    pm.response.to.have.status(501);",
											"});",
											"pm.test(\"Check error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Dataset is not an observation or subobservation dataset.\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "8c8ae184-e55c-4987-8f7e-2d6d9671dc3b",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"processWarnings\": true,\r\n\t\"data\": [\r\n\t\t[\r\n\t\t\t\"TRIAL_INSTANCE\",\r\n\t\t\t\"PI_NAME\",\r\n\t\t\t\"EXPT_DESIGN\",\r\n\t\t\t\"LOCATION_ID\",\r\n\t\t\t\"LOCATION_NAME\",\r\n\t\t\t\"Crop_season_Code\",\r\n\t\t\t\"ENTRY_TYPE\",\r\n\t\t\t\"GID\",\r\n\t\t\t\"DESIGNATION\",\r\n\t\t\t\"ENTRY_NO\",\r\n\t\t\t\"OBS_UNIT_ID\",\r\n\t\t\t\"PLOT_NO\",\r\n\t\t\t\"WeedPressure_number\",\r\n\t\t\t\"Grain_yield\",\r\n\t\t\t\"Biomas_yield\",\r\n\t\t\t\"InputVariable\",\r\n\t\t\t\"NPSEL\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"PKWDPtLOzD8Sz\",\r\n\t\t\t\"1\",\r\n\t\t\t\"21\",\r\n\t\t\t\"23\",\r\n\t\t\t\"40\",\r\n\t\t\t\"338\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"PKWDP6ME6bt1l\",\r\n\t\t\t\"2\",\r\n\t\t\t\"15\",\r\n\t\t\t\"12\",\r\n\t\t\t\"45\",\r\n\t\t\t\"285\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"PKWDPe2za6TM7\",\r\n\t\t\t\"3\",\r\n\t\t\t\"12\",\r\n\t\t\t\"41\",\r\n\t\t\t\"32\",\r\n\t\t\t\"176\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"PKWDPEV6LPs1N\",\r\n\t\t\t\"4\",\r\n\t\t\t\"46\",\r\n\t\t\t\"49\",\r\n\t\t\t\"33\",\r\n\t\t\t\"488\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"PKWDPU27n9e9L\",\r\n\t\t\t\"5\",\r\n\t\t\t\"33\",\r\n\t\t\t\"41\",\r\n\t\t\t\"28\",\r\n\t\t\t\"397\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"PKWDPmpZgUu6S\",\r\n\t\t\t\"6\",\r\n\t\t\t\"48\",\r\n\t\t\t\"17\",\r\n\t\t\t\"35\",\r\n\t\t\t\"463\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"PKWDP0M9lGBzz\",\r\n\t\t\t\"7\",\r\n\t\t\t\"34\",\r\n\t\t\t\"16\",\r\n\t\t\t\"49\",\r\n\t\t\t\"105\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"PKWDPsCKr80ks\",\r\n\t\t\t\"8\",\r\n\t\t\t\"17\",\r\n\t\t\t\"28\",\r\n\t\t\t\"15\",\r\n\t\t\t\"379\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"PKWDPDotBpZ1y\",\r\n\t\t\t\"9\",\r\n\t\t\t\"45\",\r\n\t\t\t\"28\",\r\n\t\t\t\"49\",\r\n\t\t\t\"424\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"PKWDPCYuyqdql\",\r\n\t\t\t\"10\",\r\n\t\t\t\"41\",\r\n\t\t\t\"26\",\r\n\t\t\t\"10\",\r\n\t\t\t\"188\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"PKWDP0fPOkMaC\",\r\n\t\t\t\"11\",\r\n\t\t\t\"39\",\r\n\t\t\t\"20\",\r\n\t\t\t\"31\",\r\n\t\t\t\"471\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"PKWDPGN6nYdv2\",\r\n\t\t\t\"12\",\r\n\t\t\t\"48\",\r\n\t\t\t\"46\",\r\n\t\t\t\"12\",\r\n\t\t\t\"395\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"PKWDPZ19QRNrq\",\r\n\t\t\t\"13\",\r\n\t\t\t\"24\",\r\n\t\t\t\"27\",\r\n\t\t\t\"17\",\r\n\t\t\t\"340\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"PKWDPPh1TNHCh\",\r\n\t\t\t\"14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"36\",\r\n\t\t\t\"13\",\r\n\t\t\t\"299\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"PKWDPH6Q51k29\",\r\n\t\t\t\"15\",\r\n\t\t\t\"37\",\r\n\t\t\t\"20\",\r\n\t\t\t\"15\",\r\n\t\t\t\"408\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"PKWDP2mpwUmS5\",\r\n\t\t\t\"16\",\r\n\t\t\t\"36\",\r\n\t\t\t\"40\",\r\n\t\t\t\"50\",\r\n\t\t\t\"472\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"PKWDP07BrGxf2\",\r\n\t\t\t\"17\",\r\n\t\t\t\"25\",\r\n\t\t\t\"29\",\r\n\t\t\t\"49\",\r\n\t\t\t\"138\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"PKWDPROG6tAJg\",\r\n\t\t\t\"18\",\r\n\t\t\t\"45\",\r\n\t\t\t\"12\",\r\n\t\t\t\"32\",\r\n\t\t\t\"356\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"PKWDPUWYGDKwm\",\r\n\t\t\t\"19\",\r\n\t\t\t\"36\",\r\n\t\t\t\"44\",\r\n\t\t\t\"37\",\r\n\t\t\t\"423\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"PKWDPVGUhe5T1\",\r\n\t\t\t\"20\",\r\n\t\t\t\"49\",\r\n\t\t\t\"49\",\r\n\t\t\t\"50\",\r\n\t\t\t\"193\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"dc6a207b-b4eb-42d5-a5b7-b1262193e961\",\r\n\t\t\t\"1\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"125\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"f425bdec-fdc1-41cb-8d4b-19179d9ed7a9\",\r\n\t\t\t\"2\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"337\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"9fe3ff35-a57f-4dc2-b682-d69881ebd3e8\",\r\n\t\t\t\"3\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"317\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"48851c5a-132f-4df2-8139-1b0f8ba4ea13\",\r\n\t\t\t\"4\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"497\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"97b9bbb8-e390-4c6c-a688-3676c7a322a1\",\r\n\t\t\t\"5\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"496\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"5d53e82d-ea2c-42de-8255-5150462cc9e2\",\r\n\t\t\t\"6\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"114\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"bab7f29e-f1ec-4d0a-91a3-08cc0121fffc\",\r\n\t\t\t\"7\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"102\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"6117a4e4-2d58-4020-a047-7d0f568379df\",\r\n\t\t\t\"8\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"479\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"41c3a00c-c372-442c-b87c-b7329e1457ac\",\r\n\t\t\t\"9\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"140\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"0542e1ee-2535-44f7-bf41-fb4787f2de52\",\r\n\t\t\t\"10\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"280\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"02ccc497-fb94-4dcc-83dd-21f5db43f43e\",\r\n\t\t\t\"11\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"437\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"05883cec-d339-4cd0-b763-67f7d9d543ff\",\r\n\t\t\t\"12\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"354\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"74a8d502-8b17-4d96-8741-b38d294ae601\",\r\n\t\t\t\"13\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"430\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"72476b15-4090-46bc-be2f-e4e86171af50\",\r\n\t\t\t\"14\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"478\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"980a592b-bf45-4cbe-8ede-2c0d1d6302c4\",\r\n\t\t\t\"15\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"462\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"e50aeb0a-42ef-45f6-a247-e426f0cbd39c\",\r\n\t\t\t\"16\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"271\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"b7440ad5-4836-44e8-96ba-687e1c7fb0bb\",\r\n\t\t\t\"17\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"479\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"a0b745fd-d1de-45d0-9e86-42021ce43d43\",\r\n\t\t\t\"18\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"305\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"4fca59a2-84c1-40d2-b5a7-86ab957f00cc\",\r\n\t\t\t\"19\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"372\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"9129d101-c4ac-43cf-a818-079d4365c2d5\",\r\n\t\t\t\"20\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"459\",\r\n\t\t\t\"\"\r\n\t\t]\r\n\t],\r\n\t\"draftMode\": true\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_env_id}}/observation-units/drafts/rejection/",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_env_id}}",
										"observation-units",
										"drafts",
										"rejection",
										""
									]
								},
								"description": "POST ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/observation-units​/drafts​ rejection"
							},
							"response": []
						},
						{
							"name": "Reject pending data with datasetId that does not belong to the study",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "954b44cd-3ef1-4dd0-ae3b-ba3314f751fa",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Check error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Specified dataset \"+pm.environment.get(\"study_plot_dataset_id_noPhenoCount\")+\" does not belong to the study \"+pm.environment.get(\"studyId\"));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d20f1cb7-fd89-459c-9c5e-99aa4aa69df5",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"processWarnings\": true,\r\n\t\"data\": [\r\n\t\t[\r\n\t\t\t\"TRIAL_INSTANCE\",\r\n\t\t\t\"PI_NAME\",\r\n\t\t\t\"EXPT_DESIGN\",\r\n\t\t\t\"LOCATION_ID\",\r\n\t\t\t\"LOCATION_NAME\",\r\n\t\t\t\"Crop_season_Code\",\r\n\t\t\t\"ENTRY_TYPE\",\r\n\t\t\t\"GID\",\r\n\t\t\t\"DESIGNATION\",\r\n\t\t\t\"ENTRY_NO\",\r\n\t\t\t\"OBS_UNIT_ID\",\r\n\t\t\t\"PLOT_NO\",\r\n\t\t\t\"WeedPressure_number\",\r\n\t\t\t\"Grain_yield\",\r\n\t\t\t\"Biomas_yield\",\r\n\t\t\t\"InputVariable\",\r\n\t\t\t\"NPSEL\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"PKWDPtLOzD8Sz\",\r\n\t\t\t\"1\",\r\n\t\t\t\"21\",\r\n\t\t\t\"23\",\r\n\t\t\t\"40\",\r\n\t\t\t\"338\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"PKWDP6ME6bt1l\",\r\n\t\t\t\"2\",\r\n\t\t\t\"15\",\r\n\t\t\t\"12\",\r\n\t\t\t\"45\",\r\n\t\t\t\"285\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"PKWDPe2za6TM7\",\r\n\t\t\t\"3\",\r\n\t\t\t\"12\",\r\n\t\t\t\"41\",\r\n\t\t\t\"32\",\r\n\t\t\t\"176\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"PKWDPEV6LPs1N\",\r\n\t\t\t\"4\",\r\n\t\t\t\"46\",\r\n\t\t\t\"49\",\r\n\t\t\t\"33\",\r\n\t\t\t\"488\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"PKWDPU27n9e9L\",\r\n\t\t\t\"5\",\r\n\t\t\t\"33\",\r\n\t\t\t\"41\",\r\n\t\t\t\"28\",\r\n\t\t\t\"397\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"PKWDPmpZgUu6S\",\r\n\t\t\t\"6\",\r\n\t\t\t\"48\",\r\n\t\t\t\"17\",\r\n\t\t\t\"35\",\r\n\t\t\t\"463\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"PKWDP0M9lGBzz\",\r\n\t\t\t\"7\",\r\n\t\t\t\"34\",\r\n\t\t\t\"16\",\r\n\t\t\t\"49\",\r\n\t\t\t\"105\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"PKWDPsCKr80ks\",\r\n\t\t\t\"8\",\r\n\t\t\t\"17\",\r\n\t\t\t\"28\",\r\n\t\t\t\"15\",\r\n\t\t\t\"379\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"PKWDPDotBpZ1y\",\r\n\t\t\t\"9\",\r\n\t\t\t\"45\",\r\n\t\t\t\"28\",\r\n\t\t\t\"49\",\r\n\t\t\t\"424\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"PKWDPCYuyqdql\",\r\n\t\t\t\"10\",\r\n\t\t\t\"41\",\r\n\t\t\t\"26\",\r\n\t\t\t\"10\",\r\n\t\t\t\"188\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"PKWDP0fPOkMaC\",\r\n\t\t\t\"11\",\r\n\t\t\t\"39\",\r\n\t\t\t\"20\",\r\n\t\t\t\"31\",\r\n\t\t\t\"471\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"PKWDPGN6nYdv2\",\r\n\t\t\t\"12\",\r\n\t\t\t\"48\",\r\n\t\t\t\"46\",\r\n\t\t\t\"12\",\r\n\t\t\t\"395\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"PKWDPZ19QRNrq\",\r\n\t\t\t\"13\",\r\n\t\t\t\"24\",\r\n\t\t\t\"27\",\r\n\t\t\t\"17\",\r\n\t\t\t\"340\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"PKWDPPh1TNHCh\",\r\n\t\t\t\"14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"36\",\r\n\t\t\t\"13\",\r\n\t\t\t\"299\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"PKWDPH6Q51k29\",\r\n\t\t\t\"15\",\r\n\t\t\t\"37\",\r\n\t\t\t\"20\",\r\n\t\t\t\"15\",\r\n\t\t\t\"408\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"PKWDP2mpwUmS5\",\r\n\t\t\t\"16\",\r\n\t\t\t\"36\",\r\n\t\t\t\"40\",\r\n\t\t\t\"50\",\r\n\t\t\t\"472\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"PKWDP07BrGxf2\",\r\n\t\t\t\"17\",\r\n\t\t\t\"25\",\r\n\t\t\t\"29\",\r\n\t\t\t\"49\",\r\n\t\t\t\"138\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"PKWDPROG6tAJg\",\r\n\t\t\t\"18\",\r\n\t\t\t\"45\",\r\n\t\t\t\"12\",\r\n\t\t\t\"32\",\r\n\t\t\t\"356\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"PKWDPUWYGDKwm\",\r\n\t\t\t\"19\",\r\n\t\t\t\"36\",\r\n\t\t\t\"44\",\r\n\t\t\t\"37\",\r\n\t\t\t\"423\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"PKWDPVGUhe5T1\",\r\n\t\t\t\"20\",\r\n\t\t\t\"49\",\r\n\t\t\t\"49\",\r\n\t\t\t\"50\",\r\n\t\t\t\"193\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"dc6a207b-b4eb-42d5-a5b7-b1262193e961\",\r\n\t\t\t\"1\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"125\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"f425bdec-fdc1-41cb-8d4b-19179d9ed7a9\",\r\n\t\t\t\"2\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"337\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"9fe3ff35-a57f-4dc2-b682-d69881ebd3e8\",\r\n\t\t\t\"3\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"317\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"48851c5a-132f-4df2-8139-1b0f8ba4ea13\",\r\n\t\t\t\"4\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"497\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"97b9bbb8-e390-4c6c-a688-3676c7a322a1\",\r\n\t\t\t\"5\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"496\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"5d53e82d-ea2c-42de-8255-5150462cc9e2\",\r\n\t\t\t\"6\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"114\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"bab7f29e-f1ec-4d0a-91a3-08cc0121fffc\",\r\n\t\t\t\"7\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"102\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"6117a4e4-2d58-4020-a047-7d0f568379df\",\r\n\t\t\t\"8\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"479\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"41c3a00c-c372-442c-b87c-b7329e1457ac\",\r\n\t\t\t\"9\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"140\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"0542e1ee-2535-44f7-bf41-fb4787f2de52\",\r\n\t\t\t\"10\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"280\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"02ccc497-fb94-4dcc-83dd-21f5db43f43e\",\r\n\t\t\t\"11\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"437\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"05883cec-d339-4cd0-b763-67f7d9d543ff\",\r\n\t\t\t\"12\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"354\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"74a8d502-8b17-4d96-8741-b38d294ae601\",\r\n\t\t\t\"13\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"430\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"72476b15-4090-46bc-be2f-e4e86171af50\",\r\n\t\t\t\"14\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"478\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"980a592b-bf45-4cbe-8ede-2c0d1d6302c4\",\r\n\t\t\t\"15\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"462\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"e50aeb0a-42ef-45f6-a247-e426f0cbd39c\",\r\n\t\t\t\"16\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"271\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"b7440ad5-4836-44e8-96ba-687e1c7fb0bb\",\r\n\t\t\t\"17\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"479\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"a0b745fd-d1de-45d0-9e86-42021ce43d43\",\r\n\t\t\t\"18\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"305\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"4fca59a2-84c1-40d2-b5a7-86ab957f00cc\",\r\n\t\t\t\"19\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"372\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"9129d101-c4ac-43cf-a818-079d4365c2d5\",\r\n\t\t\t\"20\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"459\",\r\n\t\t\t\"\"\r\n\t\t]\r\n\t],\r\n\t\"draftMode\": true\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_dataset_id_noPhenoCount}}/observation-units/drafts/rejection/",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_dataset_id_noPhenoCount}}",
										"observation-units",
										"drafts",
										"rejection",
										""
									]
								},
								"description": "POST ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/observation-units​/drafts​ rejection"
							},
							"response": []
						},
						{
							"name": "Add observation to input variable",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bd9be878-1471-4e33-8293-68a220188bee",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "996c842f-b617-4828-a5e8-17cb2c0e9b42",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"processWarnings\": true,\r\n\t\"data\": [\r\n\t\t[\r\n\t\t\t\"TRIAL_INSTANCE\",\r\n\t\t\t\"PI_NAME\",\r\n\t\t\t\"EXPT_DESIGN\",\r\n\t\t\t\"LOCATION_ID\",\r\n\t\t\t\"LOCATION_NAME\",\r\n\t\t\t\"Crop_season_Code\",\r\n\t\t\t\"ENTRY_TYPE\",\r\n\t\t\t\"GID\",\r\n\t\t\t\"DESIGNATION\",\r\n\t\t\t\"ENTRY_NO\",\r\n\t\t\t\"OBS_UNIT_ID\",\r\n\t\t\t\"PLOT_NO\",\r\n\t\t\t\"WeedPressure_number\",\r\n\t\t\t\"Grain_yield\",\r\n\t\t\t\"Biomas_yield\",\r\n\t\t\t\"InputVariable\",\r\n\t\t\t\"NPSEL\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"PKWDPtLOzD8Sz\",\r\n\t\t\t\"1\",\r\n\t\t\t\"21\",\r\n\t\t\t\"23\",\r\n\t\t\t\"40\",\r\n\t\t\t\"\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"PKWDP6ME6bt1l\",\r\n\t\t\t\"2\",\r\n\t\t\t\"15\",\r\n\t\t\t\"12\",\r\n\t\t\t\"45\",\r\n\t\t\t\"\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"PKWDPe2za6TM7\",\r\n\t\t\t\"3\",\r\n\t\t\t\"12\",\r\n\t\t\t\"41\",\r\n\t\t\t\"32\",\r\n\t\t\t\"\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"PKWDPEV6LPs1N\",\r\n\t\t\t\"4\",\r\n\t\t\t\"46\",\r\n\t\t\t\"49\",\r\n\t\t\t\"33\",\r\n\t\t\t\"\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"PKWDPU27n9e9L\",\r\n\t\t\t\"5\",\r\n\t\t\t\"33\",\r\n\t\t\t\"41\",\r\n\t\t\t\"28\",\r\n\t\t\t\"\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"PKWDPmpZgUu6S\",\r\n\t\t\t\"6\",\r\n\t\t\t\"48\",\r\n\t\t\t\"17\",\r\n\t\t\t\"35\",\r\n\t\t\t\"\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"PKWDP0M9lGBzz\",\r\n\t\t\t\"7\",\r\n\t\t\t\"34\",\r\n\t\t\t\"16\",\r\n\t\t\t\"49\",\r\n\t\t\t\"\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"PKWDPsCKr80ks\",\r\n\t\t\t\"8\",\r\n\t\t\t\"17\",\r\n\t\t\t\"28\",\r\n\t\t\t\"15\",\r\n\t\t\t\"\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"PKWDPDotBpZ1y\",\r\n\t\t\t\"9\",\r\n\t\t\t\"45\",\r\n\t\t\t\"28\",\r\n\t\t\t\"49\",\r\n\t\t\t\"\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"PKWDPCYuyqdql\",\r\n\t\t\t\"10\",\r\n\t\t\t\"41\",\r\n\t\t\t\"26\",\r\n\t\t\t\"10\",\r\n\t\t\t\"\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"PKWDP0fPOkMaC\",\r\n\t\t\t\"11\",\r\n\t\t\t\"39\",\r\n\t\t\t\"20\",\r\n\t\t\t\"31\",\r\n\t\t\t\"\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"PKWDPGN6nYdv2\",\r\n\t\t\t\"12\",\r\n\t\t\t\"48\",\r\n\t\t\t\"46\",\r\n\t\t\t\"12\",\r\n\t\t\t\"\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"PKWDPZ19QRNrq\",\r\n\t\t\t\"13\",\r\n\t\t\t\"24\",\r\n\t\t\t\"27\",\r\n\t\t\t\"17\",\r\n\t\t\t\"\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"PKWDPPh1TNHCh\",\r\n\t\t\t\"14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"36\",\r\n\t\t\t\"13\",\r\n\t\t\t\"\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"PKWDPH6Q51k29\",\r\n\t\t\t\"15\",\r\n\t\t\t\"37\",\r\n\t\t\t\"20\",\r\n\t\t\t\"15\",\r\n\t\t\t\"\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"PKWDP2mpwUmS5\",\r\n\t\t\t\"16\",\r\n\t\t\t\"36\",\r\n\t\t\t\"40\",\r\n\t\t\t\"50\",\r\n\t\t\t\"\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"PKWDP07BrGxf2\",\r\n\t\t\t\"17\",\r\n\t\t\t\"25\",\r\n\t\t\t\"29\",\r\n\t\t\t\"49\",\r\n\t\t\t\"\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"PKWDPROG6tAJg\",\r\n\t\t\t\"18\",\r\n\t\t\t\"45\",\r\n\t\t\t\"12\",\r\n\t\t\t\"32\",\r\n\t\t\t\"\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"PKWDPUWYGDKwm\",\r\n\t\t\t\"19\",\r\n\t\t\t\"36\",\r\n\t\t\t\"44\",\r\n\t\t\t\"37\",\r\n\t\t\t\"\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"PKWDPVGUhe5T1\",\r\n\t\t\t\"20\",\r\n\t\t\t\"49\",\r\n\t\t\t\"49\",\r\n\t\t\t\"50\",\r\n\t\t\t\"\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"PKWDPr380Bs8L\",\r\n\t\t\t\"1\",\r\n\t\t\t\"39\",\r\n\t\t\t\"42\",\r\n\t\t\t\"7\",\r\n\t\t\t\"\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"PKWDPaE59GEmX\",\r\n\t\t\t\"2\",\r\n\t\t\t\"35\",\r\n\t\t\t\"41\",\r\n\t\t\t\"21\",\r\n\t\t\t\"\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"PKWDPrmTUoAR7\",\r\n\t\t\t\"3\",\r\n\t\t\t\"28\",\r\n\t\t\t\"15\",\r\n\t\t\t\"33\",\r\n\t\t\t\"\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"PKWDPvY4h2kxU\",\r\n\t\t\t\"4\",\r\n\t\t\t\"22\",\r\n\t\t\t\"25\",\r\n\t\t\t\"3\",\r\n\t\t\t\"\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"PKWDPOHE7tQlB\",\r\n\t\t\t\"5\",\r\n\t\t\t\"33\",\r\n\t\t\t\"15\",\r\n\t\t\t\"41\",\r\n\t\t\t\"\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"PKWDPjLgQAbkj\",\r\n\t\t\t\"6\",\r\n\t\t\t\"39\",\r\n\t\t\t\"17\",\r\n\t\t\t\"48\",\r\n\t\t\t\"\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"PKWDP6Fii9PlK\",\r\n\t\t\t\"7\",\r\n\t\t\t\"38\",\r\n\t\t\t\"32\",\r\n\t\t\t\"2\",\r\n\t\t\t\"\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"PKWDPIdrKcnAt\",\r\n\t\t\t\"8\",\r\n\t\t\t\"28\",\r\n\t\t\t\"28\",\r\n\t\t\t\"27\",\r\n\t\t\t\"\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"PKWDP39sdRbmd\",\r\n\t\t\t\"9\",\r\n\t\t\t\"44\",\r\n\t\t\t\"44\",\r\n\t\t\t\"11\",\r\n\t\t\t\"\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"PKWDPIFfYsTeE\",\r\n\t\t\t\"10\",\r\n\t\t\t\"5\",\r\n\t\t\t\"41\",\r\n\t\t\t\"28\",\r\n\t\t\t\"\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"PKWDPL3EIrzIi\",\r\n\t\t\t\"11\",\r\n\t\t\t\"13\",\r\n\t\t\t\"48\",\r\n\t\t\t\"39\",\r\n\t\t\t\"\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"PKWDPRoNUKI0a\",\r\n\t\t\t\"12\",\r\n\t\t\t\"19\",\r\n\t\t\t\"30\",\r\n\t\t\t\"50\",\r\n\t\t\t\"\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"PKWDPG1xTuED6\",\r\n\t\t\t\"13\",\r\n\t\t\t\"19\",\r\n\t\t\t\"36\",\r\n\t\t\t\"9\",\r\n\t\t\t\"\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"PKWDPbsMoqfPx\",\r\n\t\t\t\"14\",\r\n\t\t\t\"6\",\r\n\t\t\t\"5\",\r\n\t\t\t\"39\",\r\n\t\t\t\"\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"PKWDP9VwAD4Eo\",\r\n\t\t\t\"15\",\r\n\t\t\t\"43\",\r\n\t\t\t\"12\",\r\n\t\t\t\"19\",\r\n\t\t\t\"\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"PKWDPRCjHplai\",\r\n\t\t\t\"16\",\r\n\t\t\t\"14\",\r\n\t\t\t\"49\",\r\n\t\t\t\"4\",\r\n\t\t\t\"\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"PKWDPFU77vd3d\",\r\n\t\t\t\"17\",\r\n\t\t\t\"16\",\r\n\t\t\t\"48\",\r\n\t\t\t\"35\",\r\n\t\t\t\"\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"PKWDP5olR82ll\",\r\n\t\t\t\"18\",\r\n\t\t\t\"46\",\r\n\t\t\t\"45\",\r\n\t\t\t\"14\",\r\n\t\t\t\"\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"PKWDPQvs0xHVx\",\r\n\t\t\t\"19\",\r\n\t\t\t\"45\",\r\n\t\t\t\"37\",\r\n\t\t\t\"41\",\r\n\t\t\t\"\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"PKWDPkP8b8XvQ\",\r\n\t\t\t\"20\",\r\n\t\t\t\"23\",\r\n\t\t\t\"31\",\r\n\t\t\t\"17\",\r\n\t\t\t\"\",\r\n\t\t\t\"3\"\r\n\t\t]\r\n\t],\r\n\t\"draftMode\": true\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_datasetId}}/observationUnits/observations",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"observationUnits",
										"observations"
									]
								},
								"description": "PUT ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/variables"
							},
							"response": []
						},
						{
							"name": "Accept pending data",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "42e868b8-203a-4d6e-ab81-b753c3b9d9c4",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0bca1622-7b65-485c-b965-322281397124",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"processWarnings\": true,\r\n\t\"data\": [\r\n\t\t[\r\n\t\t\t\"TRIAL_INSTANCE\",\r\n\t\t\t\"PI_NAME\",\r\n\t\t\t\"EXPT_DESIGN\",\r\n\t\t\t\"LOCATION_ID\",\r\n\t\t\t\"LOCATION_NAME\",\r\n\t\t\t\"Crop_season_Code\",\r\n\t\t\t\"ENTRY_TYPE\",\r\n\t\t\t\"GID\",\r\n\t\t\t\"DESIGNATION\",\r\n\t\t\t\"ENTRY_NO\",\r\n\t\t\t\"OBS_UNIT_ID\",\r\n\t\t\t\"PLOT_NO\",\r\n\t\t\t\"WeedPressure_number\",\r\n\t\t\t\"Grain_yield\",\r\n\t\t\t\"Biomas_yield\",\r\n\t\t\t\"InputVariable\",\r\n\t\t\t\"NPSEL\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"PKWDPtLOzD8Sz\",\r\n\t\t\t\"1\",\r\n\t\t\t\"21\",\r\n\t\t\t\"23\",\r\n\t\t\t\"40\",\r\n\t\t\t\"338\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"PKWDP6ME6bt1l\",\r\n\t\t\t\"2\",\r\n\t\t\t\"15\",\r\n\t\t\t\"12\",\r\n\t\t\t\"45\",\r\n\t\t\t\"285\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"PKWDPe2za6TM7\",\r\n\t\t\t\"3\",\r\n\t\t\t\"12\",\r\n\t\t\t\"41\",\r\n\t\t\t\"32\",\r\n\t\t\t\"176\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"PKWDPEV6LPs1N\",\r\n\t\t\t\"4\",\r\n\t\t\t\"46\",\r\n\t\t\t\"49\",\r\n\t\t\t\"33\",\r\n\t\t\t\"488\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"PKWDPU27n9e9L\",\r\n\t\t\t\"5\",\r\n\t\t\t\"33\",\r\n\t\t\t\"41\",\r\n\t\t\t\"28\",\r\n\t\t\t\"397\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"PKWDPmpZgUu6S\",\r\n\t\t\t\"6\",\r\n\t\t\t\"48\",\r\n\t\t\t\"17\",\r\n\t\t\t\"35\",\r\n\t\t\t\"463\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"PKWDP0M9lGBzz\",\r\n\t\t\t\"7\",\r\n\t\t\t\"34\",\r\n\t\t\t\"16\",\r\n\t\t\t\"49\",\r\n\t\t\t\"105\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"PKWDPsCKr80ks\",\r\n\t\t\t\"8\",\r\n\t\t\t\"17\",\r\n\t\t\t\"28\",\r\n\t\t\t\"15\",\r\n\t\t\t\"379\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"PKWDPDotBpZ1y\",\r\n\t\t\t\"9\",\r\n\t\t\t\"45\",\r\n\t\t\t\"28\",\r\n\t\t\t\"49\",\r\n\t\t\t\"424\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"PKWDPCYuyqdql\",\r\n\t\t\t\"10\",\r\n\t\t\t\"41\",\r\n\t\t\t\"26\",\r\n\t\t\t\"10\",\r\n\t\t\t\"188\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"PKWDP0fPOkMaC\",\r\n\t\t\t\"11\",\r\n\t\t\t\"39\",\r\n\t\t\t\"20\",\r\n\t\t\t\"31\",\r\n\t\t\t\"471\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"PKWDPGN6nYdv2\",\r\n\t\t\t\"12\",\r\n\t\t\t\"48\",\r\n\t\t\t\"46\",\r\n\t\t\t\"12\",\r\n\t\t\t\"395\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"PKWDPZ19QRNrq\",\r\n\t\t\t\"13\",\r\n\t\t\t\"24\",\r\n\t\t\t\"27\",\r\n\t\t\t\"17\",\r\n\t\t\t\"340\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"PKWDPPh1TNHCh\",\r\n\t\t\t\"14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"36\",\r\n\t\t\t\"13\",\r\n\t\t\t\"299\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"PKWDPH6Q51k29\",\r\n\t\t\t\"15\",\r\n\t\t\t\"37\",\r\n\t\t\t\"20\",\r\n\t\t\t\"15\",\r\n\t\t\t\"408\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"PKWDP2mpwUmS5\",\r\n\t\t\t\"16\",\r\n\t\t\t\"36\",\r\n\t\t\t\"40\",\r\n\t\t\t\"50\",\r\n\t\t\t\"472\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"PKWDP07BrGxf2\",\r\n\t\t\t\"17\",\r\n\t\t\t\"25\",\r\n\t\t\t\"29\",\r\n\t\t\t\"49\",\r\n\t\t\t\"138\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"PKWDPROG6tAJg\",\r\n\t\t\t\"18\",\r\n\t\t\t\"45\",\r\n\t\t\t\"12\",\r\n\t\t\t\"32\",\r\n\t\t\t\"356\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"PKWDPUWYGDKwm\",\r\n\t\t\t\"19\",\r\n\t\t\t\"36\",\r\n\t\t\t\"44\",\r\n\t\t\t\"37\",\r\n\t\t\t\"423\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"PKWDPVGUhe5T1\",\r\n\t\t\t\"20\",\r\n\t\t\t\"49\",\r\n\t\t\t\"49\",\r\n\t\t\t\"50\",\r\n\t\t\t\"193\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"dc6a207b-b4eb-42d5-a5b7-b1262193e961\",\r\n\t\t\t\"1\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"125\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"f425bdec-fdc1-41cb-8d4b-19179d9ed7a9\",\r\n\t\t\t\"2\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"337\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"9fe3ff35-a57f-4dc2-b682-d69881ebd3e8\",\r\n\t\t\t\"3\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"317\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"48851c5a-132f-4df2-8139-1b0f8ba4ea13\",\r\n\t\t\t\"4\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"497\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"97b9bbb8-e390-4c6c-a688-3676c7a322a1\",\r\n\t\t\t\"5\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"496\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"5d53e82d-ea2c-42de-8255-5150462cc9e2\",\r\n\t\t\t\"6\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"114\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"bab7f29e-f1ec-4d0a-91a3-08cc0121fffc\",\r\n\t\t\t\"7\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"102\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"6117a4e4-2d58-4020-a047-7d0f568379df\",\r\n\t\t\t\"8\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"479\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"41c3a00c-c372-442c-b87c-b7329e1457ac\",\r\n\t\t\t\"9\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"140\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"0542e1ee-2535-44f7-bf41-fb4787f2de52\",\r\n\t\t\t\"10\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"280\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"02ccc497-fb94-4dcc-83dd-21f5db43f43e\",\r\n\t\t\t\"11\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"437\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"05883cec-d339-4cd0-b763-67f7d9d543ff\",\r\n\t\t\t\"12\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"354\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"74a8d502-8b17-4d96-8741-b38d294ae601\",\r\n\t\t\t\"13\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"430\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"72476b15-4090-46bc-be2f-e4e86171af50\",\r\n\t\t\t\"14\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"478\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"980a592b-bf45-4cbe-8ede-2c0d1d6302c4\",\r\n\t\t\t\"15\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"462\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"e50aeb0a-42ef-45f6-a247-e426f0cbd39c\",\r\n\t\t\t\"16\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"271\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"b7440ad5-4836-44e8-96ba-687e1c7fb0bb\",\r\n\t\t\t\"17\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"479\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"a0b745fd-d1de-45d0-9e86-42021ce43d43\",\r\n\t\t\t\"18\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"305\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"4fca59a2-84c1-40d2-b5a7-86ab957f00cc\",\r\n\t\t\t\"19\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"372\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"9129d101-c4ac-43cf-a818-079d4365c2d5\",\r\n\t\t\t\"20\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"459\",\r\n\t\t\t\"\"\r\n\t\t]\r\n\t],\r\n\t\"draftMode\": true\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_datasetId}}/observation-units/drafts/acceptance",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"observation-units",
										"drafts",
										"acceptance"
									]
								},
								"description": "POST /crops/{cropName}/programs​/{programUUID}​/studies/{studyId}/datasets/{datasetId}/observation-units/drafts/acceptance"
							},
							"response": []
						},
						{
							"name": "Accept pending data with invalid crop",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "324c6864-b50b-4b69-9e05-5189ad666983",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Check error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Invalid crop \"+pm.environment.get(\"invalidCrop\")+\" for URL:/crops/\"+pm.environment.get(\"invalidCrop\")+\"/programs/\"+pm.environment.get(\"api_program_id\")+\"/studies/\"+pm.environment.get(\"studyId\")+\"/datasets/\"+pm.environment.get(\"study_plot_datasetId\")+\"/observation-units/drafts/acceptance\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "830d9a5a-e498-4aea-b056-097c9499b7d6",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"processWarnings\": true,\r\n\t\"data\": [\r\n\t\t[\r\n\t\t\t\"TRIAL_INSTANCE\",\r\n\t\t\t\"PI_NAME\",\r\n\t\t\t\"EXPT_DESIGN\",\r\n\t\t\t\"LOCATION_ID\",\r\n\t\t\t\"LOCATION_NAME\",\r\n\t\t\t\"Crop_season_Code\",\r\n\t\t\t\"ENTRY_TYPE\",\r\n\t\t\t\"GID\",\r\n\t\t\t\"DESIGNATION\",\r\n\t\t\t\"ENTRY_NO\",\r\n\t\t\t\"OBS_UNIT_ID\",\r\n\t\t\t\"PLOT_NO\",\r\n\t\t\t\"WeedPressure_number\",\r\n\t\t\t\"Grain_yield\",\r\n\t\t\t\"Biomas_yield\",\r\n\t\t\t\"InputVariable\",\r\n\t\t\t\"NPSEL\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"PKWDPtLOzD8Sz\",\r\n\t\t\t\"1\",\r\n\t\t\t\"21\",\r\n\t\t\t\"23\",\r\n\t\t\t\"40\",\r\n\t\t\t\"338\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"PKWDP6ME6bt1l\",\r\n\t\t\t\"2\",\r\n\t\t\t\"15\",\r\n\t\t\t\"12\",\r\n\t\t\t\"45\",\r\n\t\t\t\"285\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"PKWDPe2za6TM7\",\r\n\t\t\t\"3\",\r\n\t\t\t\"12\",\r\n\t\t\t\"41\",\r\n\t\t\t\"32\",\r\n\t\t\t\"176\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"PKWDPEV6LPs1N\",\r\n\t\t\t\"4\",\r\n\t\t\t\"46\",\r\n\t\t\t\"49\",\r\n\t\t\t\"33\",\r\n\t\t\t\"488\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"PKWDPU27n9e9L\",\r\n\t\t\t\"5\",\r\n\t\t\t\"33\",\r\n\t\t\t\"41\",\r\n\t\t\t\"28\",\r\n\t\t\t\"397\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"PKWDPmpZgUu6S\",\r\n\t\t\t\"6\",\r\n\t\t\t\"48\",\r\n\t\t\t\"17\",\r\n\t\t\t\"35\",\r\n\t\t\t\"463\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"PKWDP0M9lGBzz\",\r\n\t\t\t\"7\",\r\n\t\t\t\"34\",\r\n\t\t\t\"16\",\r\n\t\t\t\"49\",\r\n\t\t\t\"105\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"PKWDPsCKr80ks\",\r\n\t\t\t\"8\",\r\n\t\t\t\"17\",\r\n\t\t\t\"28\",\r\n\t\t\t\"15\",\r\n\t\t\t\"379\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"PKWDPDotBpZ1y\",\r\n\t\t\t\"9\",\r\n\t\t\t\"45\",\r\n\t\t\t\"28\",\r\n\t\t\t\"49\",\r\n\t\t\t\"424\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"PKWDPCYuyqdql\",\r\n\t\t\t\"10\",\r\n\t\t\t\"41\",\r\n\t\t\t\"26\",\r\n\t\t\t\"10\",\r\n\t\t\t\"188\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"PKWDP0fPOkMaC\",\r\n\t\t\t\"11\",\r\n\t\t\t\"39\",\r\n\t\t\t\"20\",\r\n\t\t\t\"31\",\r\n\t\t\t\"471\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"PKWDPGN6nYdv2\",\r\n\t\t\t\"12\",\r\n\t\t\t\"48\",\r\n\t\t\t\"46\",\r\n\t\t\t\"12\",\r\n\t\t\t\"395\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"PKWDPZ19QRNrq\",\r\n\t\t\t\"13\",\r\n\t\t\t\"24\",\r\n\t\t\t\"27\",\r\n\t\t\t\"17\",\r\n\t\t\t\"340\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"PKWDPPh1TNHCh\",\r\n\t\t\t\"14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"36\",\r\n\t\t\t\"13\",\r\n\t\t\t\"299\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"PKWDPH6Q51k29\",\r\n\t\t\t\"15\",\r\n\t\t\t\"37\",\r\n\t\t\t\"20\",\r\n\t\t\t\"15\",\r\n\t\t\t\"408\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"PKWDP2mpwUmS5\",\r\n\t\t\t\"16\",\r\n\t\t\t\"36\",\r\n\t\t\t\"40\",\r\n\t\t\t\"50\",\r\n\t\t\t\"472\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"PKWDP07BrGxf2\",\r\n\t\t\t\"17\",\r\n\t\t\t\"25\",\r\n\t\t\t\"29\",\r\n\t\t\t\"49\",\r\n\t\t\t\"138\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"PKWDPROG6tAJg\",\r\n\t\t\t\"18\",\r\n\t\t\t\"45\",\r\n\t\t\t\"12\",\r\n\t\t\t\"32\",\r\n\t\t\t\"356\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"PKWDPUWYGDKwm\",\r\n\t\t\t\"19\",\r\n\t\t\t\"36\",\r\n\t\t\t\"44\",\r\n\t\t\t\"37\",\r\n\t\t\t\"423\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"PKWDPVGUhe5T1\",\r\n\t\t\t\"20\",\r\n\t\t\t\"49\",\r\n\t\t\t\"49\",\r\n\t\t\t\"50\",\r\n\t\t\t\"193\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"dc6a207b-b4eb-42d5-a5b7-b1262193e961\",\r\n\t\t\t\"1\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"125\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"f425bdec-fdc1-41cb-8d4b-19179d9ed7a9\",\r\n\t\t\t\"2\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"337\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"9fe3ff35-a57f-4dc2-b682-d69881ebd3e8\",\r\n\t\t\t\"3\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"317\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"48851c5a-132f-4df2-8139-1b0f8ba4ea13\",\r\n\t\t\t\"4\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"497\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"97b9bbb8-e390-4c6c-a688-3676c7a322a1\",\r\n\t\t\t\"5\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"496\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"5d53e82d-ea2c-42de-8255-5150462cc9e2\",\r\n\t\t\t\"6\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"114\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"bab7f29e-f1ec-4d0a-91a3-08cc0121fffc\",\r\n\t\t\t\"7\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"102\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"6117a4e4-2d58-4020-a047-7d0f568379df\",\r\n\t\t\t\"8\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"479\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"41c3a00c-c372-442c-b87c-b7329e1457ac\",\r\n\t\t\t\"9\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"140\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"0542e1ee-2535-44f7-bf41-fb4787f2de52\",\r\n\t\t\t\"10\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"280\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"02ccc497-fb94-4dcc-83dd-21f5db43f43e\",\r\n\t\t\t\"11\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"437\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"05883cec-d339-4cd0-b763-67f7d9d543ff\",\r\n\t\t\t\"12\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"354\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"74a8d502-8b17-4d96-8741-b38d294ae601\",\r\n\t\t\t\"13\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"430\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"72476b15-4090-46bc-be2f-e4e86171af50\",\r\n\t\t\t\"14\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"478\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"980a592b-bf45-4cbe-8ede-2c0d1d6302c4\",\r\n\t\t\t\"15\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"462\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"e50aeb0a-42ef-45f6-a247-e426f0cbd39c\",\r\n\t\t\t\"16\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"271\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"b7440ad5-4836-44e8-96ba-687e1c7fb0bb\",\r\n\t\t\t\"17\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"479\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"a0b745fd-d1de-45d0-9e86-42021ce43d43\",\r\n\t\t\t\"18\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"305\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"4fca59a2-84c1-40d2-b5a7-86ab957f00cc\",\r\n\t\t\t\"19\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"372\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"9129d101-c4ac-43cf-a818-079d4365c2d5\",\r\n\t\t\t\"20\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"459\",\r\n\t\t\t\"\"\r\n\t\t]\r\n\t],\r\n\t\"draftMode\": true\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{invalidCrop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_datasetId}}/observation-units/drafts/acceptance",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{invalidCrop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"observation-units",
										"drafts",
										"acceptance"
									]
								},
								"description": "POST /crops/{cropName}/programs​/{programUUID}​/studies/{studyId}/datasets/{datasetId}/observation-units/drafts/acceptance"
							},
							"response": []
						},
						{
							"name": "Accept pending data with invalid program",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ef86fdc7-8a0e-48d2-9c69-61f6f59f8c15",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Check error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Invalid program: invalid for crop: \"+pm.environment.get(\"crop\")+\" for service with path /crops/\"+pm.environment.get(\"crop\")+\"/programs/invalid/studies/\"+pm.environment.get(\"studyId\")+\"/datasets/\"+pm.environment.get(\"study_plot_datasetId\")+\"/observation-units/drafts/acceptance\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d3b97301-12ba-43d0-bab5-ec4d1ba5f931",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"processWarnings\": true,\r\n\t\"data\": [\r\n\t\t[\r\n\t\t\t\"TRIAL_INSTANCE\",\r\n\t\t\t\"PI_NAME\",\r\n\t\t\t\"EXPT_DESIGN\",\r\n\t\t\t\"LOCATION_ID\",\r\n\t\t\t\"LOCATION_NAME\",\r\n\t\t\t\"Crop_season_Code\",\r\n\t\t\t\"ENTRY_TYPE\",\r\n\t\t\t\"GID\",\r\n\t\t\t\"DESIGNATION\",\r\n\t\t\t\"ENTRY_NO\",\r\n\t\t\t\"OBS_UNIT_ID\",\r\n\t\t\t\"PLOT_NO\",\r\n\t\t\t\"WeedPressure_number\",\r\n\t\t\t\"Grain_yield\",\r\n\t\t\t\"Biomas_yield\",\r\n\t\t\t\"InputVariable\",\r\n\t\t\t\"NPSEL\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"PKWDPtLOzD8Sz\",\r\n\t\t\t\"1\",\r\n\t\t\t\"21\",\r\n\t\t\t\"23\",\r\n\t\t\t\"40\",\r\n\t\t\t\"338\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"PKWDP6ME6bt1l\",\r\n\t\t\t\"2\",\r\n\t\t\t\"15\",\r\n\t\t\t\"12\",\r\n\t\t\t\"45\",\r\n\t\t\t\"285\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"PKWDPe2za6TM7\",\r\n\t\t\t\"3\",\r\n\t\t\t\"12\",\r\n\t\t\t\"41\",\r\n\t\t\t\"32\",\r\n\t\t\t\"176\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"PKWDPEV6LPs1N\",\r\n\t\t\t\"4\",\r\n\t\t\t\"46\",\r\n\t\t\t\"49\",\r\n\t\t\t\"33\",\r\n\t\t\t\"488\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"PKWDPU27n9e9L\",\r\n\t\t\t\"5\",\r\n\t\t\t\"33\",\r\n\t\t\t\"41\",\r\n\t\t\t\"28\",\r\n\t\t\t\"397\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"PKWDPmpZgUu6S\",\r\n\t\t\t\"6\",\r\n\t\t\t\"48\",\r\n\t\t\t\"17\",\r\n\t\t\t\"35\",\r\n\t\t\t\"463\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"PKWDP0M9lGBzz\",\r\n\t\t\t\"7\",\r\n\t\t\t\"34\",\r\n\t\t\t\"16\",\r\n\t\t\t\"49\",\r\n\t\t\t\"105\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"PKWDPsCKr80ks\",\r\n\t\t\t\"8\",\r\n\t\t\t\"17\",\r\n\t\t\t\"28\",\r\n\t\t\t\"15\",\r\n\t\t\t\"379\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"PKWDPDotBpZ1y\",\r\n\t\t\t\"9\",\r\n\t\t\t\"45\",\r\n\t\t\t\"28\",\r\n\t\t\t\"49\",\r\n\t\t\t\"424\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"PKWDPCYuyqdql\",\r\n\t\t\t\"10\",\r\n\t\t\t\"41\",\r\n\t\t\t\"26\",\r\n\t\t\t\"10\",\r\n\t\t\t\"188\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"PKWDP0fPOkMaC\",\r\n\t\t\t\"11\",\r\n\t\t\t\"39\",\r\n\t\t\t\"20\",\r\n\t\t\t\"31\",\r\n\t\t\t\"471\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"PKWDPGN6nYdv2\",\r\n\t\t\t\"12\",\r\n\t\t\t\"48\",\r\n\t\t\t\"46\",\r\n\t\t\t\"12\",\r\n\t\t\t\"395\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"PKWDPZ19QRNrq\",\r\n\t\t\t\"13\",\r\n\t\t\t\"24\",\r\n\t\t\t\"27\",\r\n\t\t\t\"17\",\r\n\t\t\t\"340\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"PKWDPPh1TNHCh\",\r\n\t\t\t\"14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"36\",\r\n\t\t\t\"13\",\r\n\t\t\t\"299\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"PKWDPH6Q51k29\",\r\n\t\t\t\"15\",\r\n\t\t\t\"37\",\r\n\t\t\t\"20\",\r\n\t\t\t\"15\",\r\n\t\t\t\"408\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"PKWDP2mpwUmS5\",\r\n\t\t\t\"16\",\r\n\t\t\t\"36\",\r\n\t\t\t\"40\",\r\n\t\t\t\"50\",\r\n\t\t\t\"472\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"PKWDP07BrGxf2\",\r\n\t\t\t\"17\",\r\n\t\t\t\"25\",\r\n\t\t\t\"29\",\r\n\t\t\t\"49\",\r\n\t\t\t\"138\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"PKWDPROG6tAJg\",\r\n\t\t\t\"18\",\r\n\t\t\t\"45\",\r\n\t\t\t\"12\",\r\n\t\t\t\"32\",\r\n\t\t\t\"356\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"PKWDPUWYGDKwm\",\r\n\t\t\t\"19\",\r\n\t\t\t\"36\",\r\n\t\t\t\"44\",\r\n\t\t\t\"37\",\r\n\t\t\t\"423\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"PKWDPVGUhe5T1\",\r\n\t\t\t\"20\",\r\n\t\t\t\"49\",\r\n\t\t\t\"49\",\r\n\t\t\t\"50\",\r\n\t\t\t\"193\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"dc6a207b-b4eb-42d5-a5b7-b1262193e961\",\r\n\t\t\t\"1\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"125\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"f425bdec-fdc1-41cb-8d4b-19179d9ed7a9\",\r\n\t\t\t\"2\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"337\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"9fe3ff35-a57f-4dc2-b682-d69881ebd3e8\",\r\n\t\t\t\"3\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"317\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"48851c5a-132f-4df2-8139-1b0f8ba4ea13\",\r\n\t\t\t\"4\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"497\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"97b9bbb8-e390-4c6c-a688-3676c7a322a1\",\r\n\t\t\t\"5\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"496\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"5d53e82d-ea2c-42de-8255-5150462cc9e2\",\r\n\t\t\t\"6\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"114\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"bab7f29e-f1ec-4d0a-91a3-08cc0121fffc\",\r\n\t\t\t\"7\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"102\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"6117a4e4-2d58-4020-a047-7d0f568379df\",\r\n\t\t\t\"8\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"479\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"41c3a00c-c372-442c-b87c-b7329e1457ac\",\r\n\t\t\t\"9\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"140\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"0542e1ee-2535-44f7-bf41-fb4787f2de52\",\r\n\t\t\t\"10\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"280\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"02ccc497-fb94-4dcc-83dd-21f5db43f43e\",\r\n\t\t\t\"11\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"437\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"05883cec-d339-4cd0-b763-67f7d9d543ff\",\r\n\t\t\t\"12\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"354\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"74a8d502-8b17-4d96-8741-b38d294ae601\",\r\n\t\t\t\"13\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"430\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"72476b15-4090-46bc-be2f-e4e86171af50\",\r\n\t\t\t\"14\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"478\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"980a592b-bf45-4cbe-8ede-2c0d1d6302c4\",\r\n\t\t\t\"15\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"462\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"e50aeb0a-42ef-45f6-a247-e426f0cbd39c\",\r\n\t\t\t\"16\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"271\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"b7440ad5-4836-44e8-96ba-687e1c7fb0bb\",\r\n\t\t\t\"17\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"479\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"a0b745fd-d1de-45d0-9e86-42021ce43d43\",\r\n\t\t\t\"18\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"305\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"4fca59a2-84c1-40d2-b5a7-86ab957f00cc\",\r\n\t\t\t\"19\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"372\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"9129d101-c4ac-43cf-a818-079d4365c2d5\",\r\n\t\t\t\"20\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"459\",\r\n\t\t\t\"\"\r\n\t\t]\r\n\t],\r\n\t\"draftMode\": true\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/invalid/studies/{{studyId}}/datasets/{{study_plot_datasetId}}/observation-units/drafts/acceptance",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"invalid",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"observation-units",
										"drafts",
										"acceptance"
									]
								},
								"description": "POST /crops/{cropName}/programs​/{programUUID}​/studies/{studyId}/datasets/{datasetId}/observation-units/drafts/acceptance"
							},
							"response": []
						},
						{
							"name": "Accept pending data with non-existing studyId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "09b5950f-4a35-4a88-995d-a2c186835ef6",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"pm.test(\"Check error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Study does not exist\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0bca50db-e89e-43fb-8150-3e56f3ffb2ac",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"processWarnings\": true,\r\n\t\"data\": [\r\n\t\t[\r\n\t\t\t\"TRIAL_INSTANCE\",\r\n\t\t\t\"PI_NAME\",\r\n\t\t\t\"EXPT_DESIGN\",\r\n\t\t\t\"LOCATION_ID\",\r\n\t\t\t\"LOCATION_NAME\",\r\n\t\t\t\"Crop_season_Code\",\r\n\t\t\t\"ENTRY_TYPE\",\r\n\t\t\t\"GID\",\r\n\t\t\t\"DESIGNATION\",\r\n\t\t\t\"ENTRY_NO\",\r\n\t\t\t\"OBS_UNIT_ID\",\r\n\t\t\t\"PLOT_NO\",\r\n\t\t\t\"WeedPressure_number\",\r\n\t\t\t\"Grain_yield\",\r\n\t\t\t\"Biomas_yield\",\r\n\t\t\t\"InputVariable\",\r\n\t\t\t\"NPSEL\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"PKWDPtLOzD8Sz\",\r\n\t\t\t\"1\",\r\n\t\t\t\"21\",\r\n\t\t\t\"23\",\r\n\t\t\t\"40\",\r\n\t\t\t\"338\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"PKWDP6ME6bt1l\",\r\n\t\t\t\"2\",\r\n\t\t\t\"15\",\r\n\t\t\t\"12\",\r\n\t\t\t\"45\",\r\n\t\t\t\"285\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"PKWDPe2za6TM7\",\r\n\t\t\t\"3\",\r\n\t\t\t\"12\",\r\n\t\t\t\"41\",\r\n\t\t\t\"32\",\r\n\t\t\t\"176\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"PKWDPEV6LPs1N\",\r\n\t\t\t\"4\",\r\n\t\t\t\"46\",\r\n\t\t\t\"49\",\r\n\t\t\t\"33\",\r\n\t\t\t\"488\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"PKWDPU27n9e9L\",\r\n\t\t\t\"5\",\r\n\t\t\t\"33\",\r\n\t\t\t\"41\",\r\n\t\t\t\"28\",\r\n\t\t\t\"397\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"PKWDPmpZgUu6S\",\r\n\t\t\t\"6\",\r\n\t\t\t\"48\",\r\n\t\t\t\"17\",\r\n\t\t\t\"35\",\r\n\t\t\t\"463\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"PKWDP0M9lGBzz\",\r\n\t\t\t\"7\",\r\n\t\t\t\"34\",\r\n\t\t\t\"16\",\r\n\t\t\t\"49\",\r\n\t\t\t\"105\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"PKWDPsCKr80ks\",\r\n\t\t\t\"8\",\r\n\t\t\t\"17\",\r\n\t\t\t\"28\",\r\n\t\t\t\"15\",\r\n\t\t\t\"379\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"PKWDPDotBpZ1y\",\r\n\t\t\t\"9\",\r\n\t\t\t\"45\",\r\n\t\t\t\"28\",\r\n\t\t\t\"49\",\r\n\t\t\t\"424\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"PKWDPCYuyqdql\",\r\n\t\t\t\"10\",\r\n\t\t\t\"41\",\r\n\t\t\t\"26\",\r\n\t\t\t\"10\",\r\n\t\t\t\"188\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"PKWDP0fPOkMaC\",\r\n\t\t\t\"11\",\r\n\t\t\t\"39\",\r\n\t\t\t\"20\",\r\n\t\t\t\"31\",\r\n\t\t\t\"471\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"PKWDPGN6nYdv2\",\r\n\t\t\t\"12\",\r\n\t\t\t\"48\",\r\n\t\t\t\"46\",\r\n\t\t\t\"12\",\r\n\t\t\t\"395\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"PKWDPZ19QRNrq\",\r\n\t\t\t\"13\",\r\n\t\t\t\"24\",\r\n\t\t\t\"27\",\r\n\t\t\t\"17\",\r\n\t\t\t\"340\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"PKWDPPh1TNHCh\",\r\n\t\t\t\"14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"36\",\r\n\t\t\t\"13\",\r\n\t\t\t\"299\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"PKWDPH6Q51k29\",\r\n\t\t\t\"15\",\r\n\t\t\t\"37\",\r\n\t\t\t\"20\",\r\n\t\t\t\"15\",\r\n\t\t\t\"408\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"PKWDP2mpwUmS5\",\r\n\t\t\t\"16\",\r\n\t\t\t\"36\",\r\n\t\t\t\"40\",\r\n\t\t\t\"50\",\r\n\t\t\t\"472\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"PKWDP07BrGxf2\",\r\n\t\t\t\"17\",\r\n\t\t\t\"25\",\r\n\t\t\t\"29\",\r\n\t\t\t\"49\",\r\n\t\t\t\"138\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"PKWDPROG6tAJg\",\r\n\t\t\t\"18\",\r\n\t\t\t\"45\",\r\n\t\t\t\"12\",\r\n\t\t\t\"32\",\r\n\t\t\t\"356\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"PKWDPUWYGDKwm\",\r\n\t\t\t\"19\",\r\n\t\t\t\"36\",\r\n\t\t\t\"44\",\r\n\t\t\t\"37\",\r\n\t\t\t\"423\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"PKWDPVGUhe5T1\",\r\n\t\t\t\"20\",\r\n\t\t\t\"49\",\r\n\t\t\t\"49\",\r\n\t\t\t\"50\",\r\n\t\t\t\"193\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"dc6a207b-b4eb-42d5-a5b7-b1262193e961\",\r\n\t\t\t\"1\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"125\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"f425bdec-fdc1-41cb-8d4b-19179d9ed7a9\",\r\n\t\t\t\"2\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"337\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"9fe3ff35-a57f-4dc2-b682-d69881ebd3e8\",\r\n\t\t\t\"3\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"317\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"48851c5a-132f-4df2-8139-1b0f8ba4ea13\",\r\n\t\t\t\"4\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"497\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"97b9bbb8-e390-4c6c-a688-3676c7a322a1\",\r\n\t\t\t\"5\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"496\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"5d53e82d-ea2c-42de-8255-5150462cc9e2\",\r\n\t\t\t\"6\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"114\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"bab7f29e-f1ec-4d0a-91a3-08cc0121fffc\",\r\n\t\t\t\"7\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"102\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"6117a4e4-2d58-4020-a047-7d0f568379df\",\r\n\t\t\t\"8\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"479\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"41c3a00c-c372-442c-b87c-b7329e1457ac\",\r\n\t\t\t\"9\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"140\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"0542e1ee-2535-44f7-bf41-fb4787f2de52\",\r\n\t\t\t\"10\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"280\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"02ccc497-fb94-4dcc-83dd-21f5db43f43e\",\r\n\t\t\t\"11\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"437\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"05883cec-d339-4cd0-b763-67f7d9d543ff\",\r\n\t\t\t\"12\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"354\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"74a8d502-8b17-4d96-8741-b38d294ae601\",\r\n\t\t\t\"13\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"430\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"72476b15-4090-46bc-be2f-e4e86171af50\",\r\n\t\t\t\"14\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"478\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"980a592b-bf45-4cbe-8ede-2c0d1d6302c4\",\r\n\t\t\t\"15\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"462\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"e50aeb0a-42ef-45f6-a247-e426f0cbd39c\",\r\n\t\t\t\"16\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"271\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"b7440ad5-4836-44e8-96ba-687e1c7fb0bb\",\r\n\t\t\t\"17\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"479\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"a0b745fd-d1de-45d0-9e86-42021ce43d43\",\r\n\t\t\t\"18\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"305\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"4fca59a2-84c1-40d2-b5a7-86ab957f00cc\",\r\n\t\t\t\"19\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"372\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"9129d101-c4ac-43cf-a818-079d4365c2d5\",\r\n\t\t\t\"20\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"459\",\r\n\t\t\t\"\"\r\n\t\t]\r\n\t],\r\n\t\"draftMode\": true\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{non_existing_study_id}}/datasets/{{study_plot_datasetId}}/observation-units/drafts/acceptance",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{non_existing_study_id}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"observation-units",
										"drafts",
										"acceptance"
									]
								},
								"description": "POST /crops/{cropName}/programs​/{programUUID}​/studies/{studyId}/datasets/{datasetId}/observation-units/drafts/acceptance"
							},
							"response": []
						},
						{
							"name": "Accept pending data with non-existing datasetId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d3d15561-a0be-4f01-8f8d-01e899246729",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"pm.test(\"Check error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Dataset does not exist\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1db3fba8-89a0-4e85-96d2-6dbfbeb72650",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"processWarnings\": true,\r\n\t\"data\": [\r\n\t\t[\r\n\t\t\t\"TRIAL_INSTANCE\",\r\n\t\t\t\"PI_NAME\",\r\n\t\t\t\"EXPT_DESIGN\",\r\n\t\t\t\"LOCATION_ID\",\r\n\t\t\t\"LOCATION_NAME\",\r\n\t\t\t\"Crop_season_Code\",\r\n\t\t\t\"ENTRY_TYPE\",\r\n\t\t\t\"GID\",\r\n\t\t\t\"DESIGNATION\",\r\n\t\t\t\"ENTRY_NO\",\r\n\t\t\t\"OBS_UNIT_ID\",\r\n\t\t\t\"PLOT_NO\",\r\n\t\t\t\"WeedPressure_number\",\r\n\t\t\t\"Grain_yield\",\r\n\t\t\t\"Biomas_yield\",\r\n\t\t\t\"InputVariable\",\r\n\t\t\t\"NPSEL\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"PKWDPtLOzD8Sz\",\r\n\t\t\t\"1\",\r\n\t\t\t\"21\",\r\n\t\t\t\"23\",\r\n\t\t\t\"40\",\r\n\t\t\t\"338\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"PKWDP6ME6bt1l\",\r\n\t\t\t\"2\",\r\n\t\t\t\"15\",\r\n\t\t\t\"12\",\r\n\t\t\t\"45\",\r\n\t\t\t\"285\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"PKWDPe2za6TM7\",\r\n\t\t\t\"3\",\r\n\t\t\t\"12\",\r\n\t\t\t\"41\",\r\n\t\t\t\"32\",\r\n\t\t\t\"176\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"PKWDPEV6LPs1N\",\r\n\t\t\t\"4\",\r\n\t\t\t\"46\",\r\n\t\t\t\"49\",\r\n\t\t\t\"33\",\r\n\t\t\t\"488\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"PKWDPU27n9e9L\",\r\n\t\t\t\"5\",\r\n\t\t\t\"33\",\r\n\t\t\t\"41\",\r\n\t\t\t\"28\",\r\n\t\t\t\"397\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"PKWDPmpZgUu6S\",\r\n\t\t\t\"6\",\r\n\t\t\t\"48\",\r\n\t\t\t\"17\",\r\n\t\t\t\"35\",\r\n\t\t\t\"463\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"PKWDP0M9lGBzz\",\r\n\t\t\t\"7\",\r\n\t\t\t\"34\",\r\n\t\t\t\"16\",\r\n\t\t\t\"49\",\r\n\t\t\t\"105\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"PKWDPsCKr80ks\",\r\n\t\t\t\"8\",\r\n\t\t\t\"17\",\r\n\t\t\t\"28\",\r\n\t\t\t\"15\",\r\n\t\t\t\"379\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"PKWDPDotBpZ1y\",\r\n\t\t\t\"9\",\r\n\t\t\t\"45\",\r\n\t\t\t\"28\",\r\n\t\t\t\"49\",\r\n\t\t\t\"424\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"PKWDPCYuyqdql\",\r\n\t\t\t\"10\",\r\n\t\t\t\"41\",\r\n\t\t\t\"26\",\r\n\t\t\t\"10\",\r\n\t\t\t\"188\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"PKWDP0fPOkMaC\",\r\n\t\t\t\"11\",\r\n\t\t\t\"39\",\r\n\t\t\t\"20\",\r\n\t\t\t\"31\",\r\n\t\t\t\"471\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"PKWDPGN6nYdv2\",\r\n\t\t\t\"12\",\r\n\t\t\t\"48\",\r\n\t\t\t\"46\",\r\n\t\t\t\"12\",\r\n\t\t\t\"395\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"PKWDPZ19QRNrq\",\r\n\t\t\t\"13\",\r\n\t\t\t\"24\",\r\n\t\t\t\"27\",\r\n\t\t\t\"17\",\r\n\t\t\t\"340\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"PKWDPPh1TNHCh\",\r\n\t\t\t\"14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"36\",\r\n\t\t\t\"13\",\r\n\t\t\t\"299\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"PKWDPH6Q51k29\",\r\n\t\t\t\"15\",\r\n\t\t\t\"37\",\r\n\t\t\t\"20\",\r\n\t\t\t\"15\",\r\n\t\t\t\"408\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"PKWDP2mpwUmS5\",\r\n\t\t\t\"16\",\r\n\t\t\t\"36\",\r\n\t\t\t\"40\",\r\n\t\t\t\"50\",\r\n\t\t\t\"472\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"PKWDP07BrGxf2\",\r\n\t\t\t\"17\",\r\n\t\t\t\"25\",\r\n\t\t\t\"29\",\r\n\t\t\t\"49\",\r\n\t\t\t\"138\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"PKWDPROG6tAJg\",\r\n\t\t\t\"18\",\r\n\t\t\t\"45\",\r\n\t\t\t\"12\",\r\n\t\t\t\"32\",\r\n\t\t\t\"356\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"PKWDPUWYGDKwm\",\r\n\t\t\t\"19\",\r\n\t\t\t\"36\",\r\n\t\t\t\"44\",\r\n\t\t\t\"37\",\r\n\t\t\t\"423\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"PKWDPVGUhe5T1\",\r\n\t\t\t\"20\",\r\n\t\t\t\"49\",\r\n\t\t\t\"49\",\r\n\t\t\t\"50\",\r\n\t\t\t\"193\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"dc6a207b-b4eb-42d5-a5b7-b1262193e961\",\r\n\t\t\t\"1\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"125\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"f425bdec-fdc1-41cb-8d4b-19179d9ed7a9\",\r\n\t\t\t\"2\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"337\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"9fe3ff35-a57f-4dc2-b682-d69881ebd3e8\",\r\n\t\t\t\"3\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"317\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"48851c5a-132f-4df2-8139-1b0f8ba4ea13\",\r\n\t\t\t\"4\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"497\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"97b9bbb8-e390-4c6c-a688-3676c7a322a1\",\r\n\t\t\t\"5\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"496\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"5d53e82d-ea2c-42de-8255-5150462cc9e2\",\r\n\t\t\t\"6\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"114\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"bab7f29e-f1ec-4d0a-91a3-08cc0121fffc\",\r\n\t\t\t\"7\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"102\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"6117a4e4-2d58-4020-a047-7d0f568379df\",\r\n\t\t\t\"8\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"479\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"41c3a00c-c372-442c-b87c-b7329e1457ac\",\r\n\t\t\t\"9\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"140\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"0542e1ee-2535-44f7-bf41-fb4787f2de52\",\r\n\t\t\t\"10\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"280\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"02ccc497-fb94-4dcc-83dd-21f5db43f43e\",\r\n\t\t\t\"11\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"437\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"05883cec-d339-4cd0-b763-67f7d9d543ff\",\r\n\t\t\t\"12\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"354\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"74a8d502-8b17-4d96-8741-b38d294ae601\",\r\n\t\t\t\"13\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"430\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"72476b15-4090-46bc-be2f-e4e86171af50\",\r\n\t\t\t\"14\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"478\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"980a592b-bf45-4cbe-8ede-2c0d1d6302c4\",\r\n\t\t\t\"15\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"462\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"e50aeb0a-42ef-45f6-a247-e426f0cbd39c\",\r\n\t\t\t\"16\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"271\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"b7440ad5-4836-44e8-96ba-687e1c7fb0bb\",\r\n\t\t\t\"17\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"479\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"a0b745fd-d1de-45d0-9e86-42021ce43d43\",\r\n\t\t\t\"18\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"305\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"4fca59a2-84c1-40d2-b5a7-86ab957f00cc\",\r\n\t\t\t\"19\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"372\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"9129d101-c4ac-43cf-a818-079d4365c2d5\",\r\n\t\t\t\"20\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"459\",\r\n\t\t\t\"\"\r\n\t\t]\r\n\t],\r\n\t\"draftMode\": true\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{non_existing_dataset_id}}/observation-units/drafts/acceptance",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{non_existing_dataset_id}}",
										"observation-units",
										"drafts",
										"acceptance"
									]
								},
								"description": "POST /crops/{cropName}/programs​/{programUUID}​/studies/{studyId}/datasets/{datasetId}/observation-units/drafts/acceptance"
							},
							"response": []
						},
						{
							"name": "Accept pending data with datasetId that does not belong to the study",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2efe1be8-d4d9-44b5-b5ed-d4f8018ff0ae",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Check error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Specified dataset \"+pm.environment.get(\"study_plot_dataset_id_noPhenoCount\")+\" does not belong to the study \"+pm.environment.get(\"studyId\"));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "90c938d9-7a59-43fd-8032-96f9f7b9db67",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"processWarnings\": true,\r\n\t\"data\": [\r\n\t\t[\r\n\t\t\t\"TRIAL_INSTANCE\",\r\n\t\t\t\"PI_NAME\",\r\n\t\t\t\"EXPT_DESIGN\",\r\n\t\t\t\"LOCATION_ID\",\r\n\t\t\t\"LOCATION_NAME\",\r\n\t\t\t\"Crop_season_Code\",\r\n\t\t\t\"ENTRY_TYPE\",\r\n\t\t\t\"GID\",\r\n\t\t\t\"DESIGNATION\",\r\n\t\t\t\"ENTRY_NO\",\r\n\t\t\t\"OBS_UNIT_ID\",\r\n\t\t\t\"PLOT_NO\",\r\n\t\t\t\"WeedPressure_number\",\r\n\t\t\t\"Grain_yield\",\r\n\t\t\t\"Biomas_yield\",\r\n\t\t\t\"InputVariable\",\r\n\t\t\t\"NPSEL\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"PKWDPtLOzD8Sz\",\r\n\t\t\t\"1\",\r\n\t\t\t\"21\",\r\n\t\t\t\"23\",\r\n\t\t\t\"40\",\r\n\t\t\t\"338\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"PKWDP6ME6bt1l\",\r\n\t\t\t\"2\",\r\n\t\t\t\"15\",\r\n\t\t\t\"12\",\r\n\t\t\t\"45\",\r\n\t\t\t\"285\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"PKWDPe2za6TM7\",\r\n\t\t\t\"3\",\r\n\t\t\t\"12\",\r\n\t\t\t\"41\",\r\n\t\t\t\"32\",\r\n\t\t\t\"176\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"PKWDPEV6LPs1N\",\r\n\t\t\t\"4\",\r\n\t\t\t\"46\",\r\n\t\t\t\"49\",\r\n\t\t\t\"33\",\r\n\t\t\t\"488\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"PKWDPU27n9e9L\",\r\n\t\t\t\"5\",\r\n\t\t\t\"33\",\r\n\t\t\t\"41\",\r\n\t\t\t\"28\",\r\n\t\t\t\"397\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"PKWDPmpZgUu6S\",\r\n\t\t\t\"6\",\r\n\t\t\t\"48\",\r\n\t\t\t\"17\",\r\n\t\t\t\"35\",\r\n\t\t\t\"463\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"PKWDP0M9lGBzz\",\r\n\t\t\t\"7\",\r\n\t\t\t\"34\",\r\n\t\t\t\"16\",\r\n\t\t\t\"49\",\r\n\t\t\t\"105\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"PKWDPsCKr80ks\",\r\n\t\t\t\"8\",\r\n\t\t\t\"17\",\r\n\t\t\t\"28\",\r\n\t\t\t\"15\",\r\n\t\t\t\"379\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"PKWDPDotBpZ1y\",\r\n\t\t\t\"9\",\r\n\t\t\t\"45\",\r\n\t\t\t\"28\",\r\n\t\t\t\"49\",\r\n\t\t\t\"424\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"PKWDPCYuyqdql\",\r\n\t\t\t\"10\",\r\n\t\t\t\"41\",\r\n\t\t\t\"26\",\r\n\t\t\t\"10\",\r\n\t\t\t\"188\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"PKWDP0fPOkMaC\",\r\n\t\t\t\"11\",\r\n\t\t\t\"39\",\r\n\t\t\t\"20\",\r\n\t\t\t\"31\",\r\n\t\t\t\"471\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"PKWDPGN6nYdv2\",\r\n\t\t\t\"12\",\r\n\t\t\t\"48\",\r\n\t\t\t\"46\",\r\n\t\t\t\"12\",\r\n\t\t\t\"395\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"PKWDPZ19QRNrq\",\r\n\t\t\t\"13\",\r\n\t\t\t\"24\",\r\n\t\t\t\"27\",\r\n\t\t\t\"17\",\r\n\t\t\t\"340\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"PKWDPPh1TNHCh\",\r\n\t\t\t\"14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"36\",\r\n\t\t\t\"13\",\r\n\t\t\t\"299\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"PKWDPH6Q51k29\",\r\n\t\t\t\"15\",\r\n\t\t\t\"37\",\r\n\t\t\t\"20\",\r\n\t\t\t\"15\",\r\n\t\t\t\"408\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"PKWDP2mpwUmS5\",\r\n\t\t\t\"16\",\r\n\t\t\t\"36\",\r\n\t\t\t\"40\",\r\n\t\t\t\"50\",\r\n\t\t\t\"472\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"PKWDP07BrGxf2\",\r\n\t\t\t\"17\",\r\n\t\t\t\"25\",\r\n\t\t\t\"29\",\r\n\t\t\t\"49\",\r\n\t\t\t\"138\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"PKWDPROG6tAJg\",\r\n\t\t\t\"18\",\r\n\t\t\t\"45\",\r\n\t\t\t\"12\",\r\n\t\t\t\"32\",\r\n\t\t\t\"356\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"PKWDPUWYGDKwm\",\r\n\t\t\t\"19\",\r\n\t\t\t\"36\",\r\n\t\t\t\"44\",\r\n\t\t\t\"37\",\r\n\t\t\t\"423\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"PKWDPVGUhe5T1\",\r\n\t\t\t\"20\",\r\n\t\t\t\"49\",\r\n\t\t\t\"49\",\r\n\t\t\t\"50\",\r\n\t\t\t\"193\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"dc6a207b-b4eb-42d5-a5b7-b1262193e961\",\r\n\t\t\t\"1\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"125\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"f425bdec-fdc1-41cb-8d4b-19179d9ed7a9\",\r\n\t\t\t\"2\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"337\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"9fe3ff35-a57f-4dc2-b682-d69881ebd3e8\",\r\n\t\t\t\"3\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"317\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"48851c5a-132f-4df2-8139-1b0f8ba4ea13\",\r\n\t\t\t\"4\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"497\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"97b9bbb8-e390-4c6c-a688-3676c7a322a1\",\r\n\t\t\t\"5\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"496\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"5d53e82d-ea2c-42de-8255-5150462cc9e2\",\r\n\t\t\t\"6\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"114\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"bab7f29e-f1ec-4d0a-91a3-08cc0121fffc\",\r\n\t\t\t\"7\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"102\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"6117a4e4-2d58-4020-a047-7d0f568379df\",\r\n\t\t\t\"8\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"479\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"41c3a00c-c372-442c-b87c-b7329e1457ac\",\r\n\t\t\t\"9\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"140\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"0542e1ee-2535-44f7-bf41-fb4787f2de52\",\r\n\t\t\t\"10\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"280\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"02ccc497-fb94-4dcc-83dd-21f5db43f43e\",\r\n\t\t\t\"11\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"437\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"05883cec-d339-4cd0-b763-67f7d9d543ff\",\r\n\t\t\t\"12\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"354\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"74a8d502-8b17-4d96-8741-b38d294ae601\",\r\n\t\t\t\"13\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"430\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"72476b15-4090-46bc-be2f-e4e86171af50\",\r\n\t\t\t\"14\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"478\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"980a592b-bf45-4cbe-8ede-2c0d1d6302c4\",\r\n\t\t\t\"15\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"462\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"e50aeb0a-42ef-45f6-a247-e426f0cbd39c\",\r\n\t\t\t\"16\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"271\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"b7440ad5-4836-44e8-96ba-687e1c7fb0bb\",\r\n\t\t\t\"17\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"479\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"a0b745fd-d1de-45d0-9e86-42021ce43d43\",\r\n\t\t\t\"18\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"305\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"4fca59a2-84c1-40d2-b5a7-86ab957f00cc\",\r\n\t\t\t\"19\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"372\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"9129d101-c4ac-43cf-a818-079d4365c2d5\",\r\n\t\t\t\"20\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"459\",\r\n\t\t\t\"\"\r\n\t\t]\r\n\t],\r\n\t\"draftMode\": true\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_dataset_id_noPhenoCount}}/observation-units/drafts/acceptance",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_dataset_id_noPhenoCount}}",
										"observation-units",
										"drafts",
										"acceptance"
									]
								},
								"description": "POST /crops/{cropName}/programs​/{programUUID}​/studies/{studyId}/datasets/{datasetId}/observation-units/drafts/acceptance"
							},
							"response": []
						},
						{
							"name": "Accept pending data with non-obs datasetId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1d679bd8-e95d-42f3-ab23-42fbef936f6c",
										"exec": [
											"pm.test(\"Status code is 501\", function () {",
											"    pm.response.to.have.status(501);",
											"});",
											"pm.test(\"Check error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Dataset is not an observation or subobservation dataset.\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2200a29a-92f4-4401-8485-0d5498b06416",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"processWarnings\": true,\r\n\t\"data\": [\r\n\t\t[\r\n\t\t\t\"TRIAL_INSTANCE\",\r\n\t\t\t\"PI_NAME\",\r\n\t\t\t\"EXPT_DESIGN\",\r\n\t\t\t\"LOCATION_ID\",\r\n\t\t\t\"LOCATION_NAME\",\r\n\t\t\t\"Crop_season_Code\",\r\n\t\t\t\"ENTRY_TYPE\",\r\n\t\t\t\"GID\",\r\n\t\t\t\"DESIGNATION\",\r\n\t\t\t\"ENTRY_NO\",\r\n\t\t\t\"OBS_UNIT_ID\",\r\n\t\t\t\"PLOT_NO\",\r\n\t\t\t\"WeedPressure_number\",\r\n\t\t\t\"Grain_yield\",\r\n\t\t\t\"Biomas_yield\",\r\n\t\t\t\"InputVariable\",\r\n\t\t\t\"NPSEL\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"PKWDPtLOzD8Sz\",\r\n\t\t\t\"1\",\r\n\t\t\t\"21\",\r\n\t\t\t\"23\",\r\n\t\t\t\"40\",\r\n\t\t\t\"338\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"PKWDP6ME6bt1l\",\r\n\t\t\t\"2\",\r\n\t\t\t\"15\",\r\n\t\t\t\"12\",\r\n\t\t\t\"45\",\r\n\t\t\t\"285\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"PKWDPe2za6TM7\",\r\n\t\t\t\"3\",\r\n\t\t\t\"12\",\r\n\t\t\t\"41\",\r\n\t\t\t\"32\",\r\n\t\t\t\"176\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"PKWDPEV6LPs1N\",\r\n\t\t\t\"4\",\r\n\t\t\t\"46\",\r\n\t\t\t\"49\",\r\n\t\t\t\"33\",\r\n\t\t\t\"488\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"PKWDPU27n9e9L\",\r\n\t\t\t\"5\",\r\n\t\t\t\"33\",\r\n\t\t\t\"41\",\r\n\t\t\t\"28\",\r\n\t\t\t\"397\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"PKWDPmpZgUu6S\",\r\n\t\t\t\"6\",\r\n\t\t\t\"48\",\r\n\t\t\t\"17\",\r\n\t\t\t\"35\",\r\n\t\t\t\"463\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"PKWDP0M9lGBzz\",\r\n\t\t\t\"7\",\r\n\t\t\t\"34\",\r\n\t\t\t\"16\",\r\n\t\t\t\"49\",\r\n\t\t\t\"105\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"PKWDPsCKr80ks\",\r\n\t\t\t\"8\",\r\n\t\t\t\"17\",\r\n\t\t\t\"28\",\r\n\t\t\t\"15\",\r\n\t\t\t\"379\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"PKWDPDotBpZ1y\",\r\n\t\t\t\"9\",\r\n\t\t\t\"45\",\r\n\t\t\t\"28\",\r\n\t\t\t\"49\",\r\n\t\t\t\"424\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"PKWDPCYuyqdql\",\r\n\t\t\t\"10\",\r\n\t\t\t\"41\",\r\n\t\t\t\"26\",\r\n\t\t\t\"10\",\r\n\t\t\t\"188\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"PKWDP0fPOkMaC\",\r\n\t\t\t\"11\",\r\n\t\t\t\"39\",\r\n\t\t\t\"20\",\r\n\t\t\t\"31\",\r\n\t\t\t\"471\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"PKWDPGN6nYdv2\",\r\n\t\t\t\"12\",\r\n\t\t\t\"48\",\r\n\t\t\t\"46\",\r\n\t\t\t\"12\",\r\n\t\t\t\"395\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"PKWDPZ19QRNrq\",\r\n\t\t\t\"13\",\r\n\t\t\t\"24\",\r\n\t\t\t\"27\",\r\n\t\t\t\"17\",\r\n\t\t\t\"340\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"PKWDPPh1TNHCh\",\r\n\t\t\t\"14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"36\",\r\n\t\t\t\"13\",\r\n\t\t\t\"299\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"PKWDPH6Q51k29\",\r\n\t\t\t\"15\",\r\n\t\t\t\"37\",\r\n\t\t\t\"20\",\r\n\t\t\t\"15\",\r\n\t\t\t\"408\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"PKWDP2mpwUmS5\",\r\n\t\t\t\"16\",\r\n\t\t\t\"36\",\r\n\t\t\t\"40\",\r\n\t\t\t\"50\",\r\n\t\t\t\"472\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"PKWDP07BrGxf2\",\r\n\t\t\t\"17\",\r\n\t\t\t\"25\",\r\n\t\t\t\"29\",\r\n\t\t\t\"49\",\r\n\t\t\t\"138\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"PKWDPROG6tAJg\",\r\n\t\t\t\"18\",\r\n\t\t\t\"45\",\r\n\t\t\t\"12\",\r\n\t\t\t\"32\",\r\n\t\t\t\"356\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"PKWDPUWYGDKwm\",\r\n\t\t\t\"19\",\r\n\t\t\t\"36\",\r\n\t\t\t\"44\",\r\n\t\t\t\"37\",\r\n\t\t\t\"423\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"PKWDPVGUhe5T1\",\r\n\t\t\t\"20\",\r\n\t\t\t\"49\",\r\n\t\t\t\"49\",\r\n\t\t\t\"50\",\r\n\t\t\t\"193\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"dc6a207b-b4eb-42d5-a5b7-b1262193e961\",\r\n\t\t\t\"1\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"125\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"f425bdec-fdc1-41cb-8d4b-19179d9ed7a9\",\r\n\t\t\t\"2\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"337\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"9fe3ff35-a57f-4dc2-b682-d69881ebd3e8\",\r\n\t\t\t\"3\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"317\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"48851c5a-132f-4df2-8139-1b0f8ba4ea13\",\r\n\t\t\t\"4\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"497\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"97b9bbb8-e390-4c6c-a688-3676c7a322a1\",\r\n\t\t\t\"5\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"496\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"5d53e82d-ea2c-42de-8255-5150462cc9e2\",\r\n\t\t\t\"6\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"114\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"bab7f29e-f1ec-4d0a-91a3-08cc0121fffc\",\r\n\t\t\t\"7\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"102\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"6117a4e4-2d58-4020-a047-7d0f568379df\",\r\n\t\t\t\"8\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"479\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"41c3a00c-c372-442c-b87c-b7329e1457ac\",\r\n\t\t\t\"9\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"140\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"0542e1ee-2535-44f7-bf41-fb4787f2de52\",\r\n\t\t\t\"10\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"280\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"02ccc497-fb94-4dcc-83dd-21f5db43f43e\",\r\n\t\t\t\"11\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"437\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"05883cec-d339-4cd0-b763-67f7d9d543ff\",\r\n\t\t\t\"12\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"354\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"74a8d502-8b17-4d96-8741-b38d294ae601\",\r\n\t\t\t\"13\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"430\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"72476b15-4090-46bc-be2f-e4e86171af50\",\r\n\t\t\t\"14\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"478\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"980a592b-bf45-4cbe-8ede-2c0d1d6302c4\",\r\n\t\t\t\"15\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"462\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"e50aeb0a-42ef-45f6-a247-e426f0cbd39c\",\r\n\t\t\t\"16\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"271\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"b7440ad5-4836-44e8-96ba-687e1c7fb0bb\",\r\n\t\t\t\"17\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"479\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"a0b745fd-d1de-45d0-9e86-42021ce43d43\",\r\n\t\t\t\"18\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"305\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"4fca59a2-84c1-40d2-b5a7-86ab957f00cc\",\r\n\t\t\t\"19\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"372\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"9129d101-c4ac-43cf-a818-079d4365c2d5\",\r\n\t\t\t\"20\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"459\",\r\n\t\t\t\"\"\r\n\t\t]\r\n\t],\r\n\t\"draftMode\": true\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_env_id}}/observation-units/drafts/acceptance",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_env_id}}",
										"observation-units",
										"drafts",
										"acceptance"
									]
								},
								"description": "POST /crops/{cropName}/programs​/{programUUID}​/studies/{studyId}/datasets/{datasetId}/observation-units/drafts/acceptance"
							},
							"response": []
						},
						{
							"name": "Retrieve observation units of after updating values",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "32c23ade-d415-44b4-97b8-133e3176581a",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Check records filtered \", function () {",
											"    pm.expect(jsonData.recordsFiltered).to.eql(20);",
											"});",
											"pm.test(\"Check records total\", function () {",
											"    pm.expect(jsonData.recordsFiltered).to.eql(20);",
											"});",
											"",
											"//Check data at index 0",
											"",
											"var index = 0;",
											"",
											"var observationUnitIds = [];",
											"var observationIds = [];",
											"",
											"",
											"for (var i = 0; i < jsonData.data.length; i++){",
											"  var selectedData = jsonData.data[i];",
											"  observationUnitIds[i] = selectedData.observationUnitId;",
											"  observationIds[i] = selectedData.variables.InputVariable.observationId",
											"  console.log(observationIds[i]);",
											"}",
											"",
											"pm.environment.unset(\"observationUnitIds\");",
											"pm.environment.unset(\"observationIds\");",
											"pm.environment.set(\"observationUnitIds\", JSON.stringify(observationUnitIds));",
											"pm.environment.set(\"observationIds\", JSON.stringify(observationIds));",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0cf0a460-9ef3-4294-8e61-51145638bdab",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"draw\": 1,\r\n\t\"sortedRequest\": {\r\n\t\t\"pageSize\": 50,\r\n\t\t\"pageNumber\": 1,\r\n\t\t\"sortBy\": 8200,\r\n\t\t\"sortOrder\": \"asc\"\r\n\t},\r\n\t\"instanceId\": 1,\r\n\t\"draftMode\": false,\r\n\t\"filter\": {\r\n\t\t\"byOutOfBound\": null,\r\n\t\t\"byMissing\": null,\r\n\t\t\"byOutOfSync\": null,\r\n\t\t\"byOverwritten\": null,\r\n\t\t\"variableId\": null,\r\n\t\t\"filterColumns\": [],\r\n\t\t\"filteredValues\": {},\r\n\t\t\"filteredTextValues\": {},\r\n\t\t\"variableTypeMap\": {\r\n\t\t\t\"8170\": null,\r\n\t\t\t\"8200\": \"EXPERIMENTAL_DESIGN\",\r\n\t\t\t\"8201\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8230\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8240\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8250\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8255\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8263\": \"SELECTION_METHOD\",\r\n\t\t\t\"18000\": \"TRAIT\",\r\n\t\t\t\"18010\": \"TRAIT\",\r\n\t\t\t\"18100\": \"TRAIT\",\r\n\t\t\t\"100020\": \"TRAIT\"\r\n\t\t}\r\n\t}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_datasetId}}/observationUnits/table",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"observationUnits",
										"table"
									]
								},
								"description": "POST /crops/{cropName}/programs​/{programUUID}​/studies/{studyId}/datasets/{datasetId}/observation-units/drafts/acceptance"
							},
							"response": []
						},
						{
							"name": "Delete observation",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6a73328c-c0de-452f-9f67-12ab3408ea95",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var observationUnitIds = [];",
											"observationUnitIds = JSON.parse(pm.environment.get(\"observationUnitIds\"));",
											"var observationIds = [];",
											"observationIds = JSON.parse(pm.environment.get(\"observationIds\"));",
											"",
											"if(observationUnitIds.length && observationIds.length > 0){",
											"postman.setNextRequest(\"Delete observation\");",
											"}else{",
											"    postman.setNextRequest(null);",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5c15b744-ed02-4fff-90e4-c74f2c7243ba",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}\r",
											"\r",
											"var observationUnitIds = [];\r",
											"observationUnitIds = JSON.parse(pm.environment.get(\"observationUnitIds\"));\r",
											"var observationIds = [];\r",
											"observationIds = JSON.parse(pm.environment.get(\"observationIds\"));\r",
											"console.log(observationUnitIds.length);\r",
											"var current_observationUnitId = observationUnitIds.shift();\r",
											"var current_observationId = observationIds.shift();\r",
											"pm.environment.set(\"observationUnitId\", current_observationUnitId);\r",
											"pm.environment.set(\"observationId\", current_observationId);\r",
											"pm.environment.set(\"observationUnitIds\", JSON.stringify(observationUnitIds));\r",
											"pm.environment.set(\"observationIds\", JSON.stringify(observationIds));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"processWarnings\": true,\r\n\t\"data\": [\r\n\t\t[\r\n\t\t\t\"TRIAL_INSTANCE\",\r\n\t\t\t\"PI_NAME\",\r\n\t\t\t\"EXPT_DESIGN\",\r\n\t\t\t\"LOCATION_ID\",\r\n\t\t\t\"LOCATION_NAME\",\r\n\t\t\t\"Crop_season_Code\",\r\n\t\t\t\"ENTRY_TYPE\",\r\n\t\t\t\"GID\",\r\n\t\t\t\"DESIGNATION\",\r\n\t\t\t\"ENTRY_NO\",\r\n\t\t\t\"OBS_UNIT_ID\",\r\n\t\t\t\"PLOT_NO\",\r\n\t\t\t\"WeedPressure_number\",\r\n\t\t\t\"Grain_yield\",\r\n\t\t\t\"Biomas_yield\",\r\n\t\t\t\"InputVariable\",\r\n\t\t\t\"NPSEL\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"PKWDPtLOzD8Sz\",\r\n\t\t\t\"1\",\r\n\t\t\t\"21\",\r\n\t\t\t\"23\",\r\n\t\t\t\"40\",\r\n\t\t\t\"\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"PKWDP6ME6bt1l\",\r\n\t\t\t\"2\",\r\n\t\t\t\"15\",\r\n\t\t\t\"12\",\r\n\t\t\t\"45\",\r\n\t\t\t\"\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"PKWDPe2za6TM7\",\r\n\t\t\t\"3\",\r\n\t\t\t\"12\",\r\n\t\t\t\"41\",\r\n\t\t\t\"32\",\r\n\t\t\t\"\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"PKWDPEV6LPs1N\",\r\n\t\t\t\"4\",\r\n\t\t\t\"46\",\r\n\t\t\t\"49\",\r\n\t\t\t\"33\",\r\n\t\t\t\"\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"PKWDPU27n9e9L\",\r\n\t\t\t\"5\",\r\n\t\t\t\"33\",\r\n\t\t\t\"41\",\r\n\t\t\t\"28\",\r\n\t\t\t\"\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"PKWDPmpZgUu6S\",\r\n\t\t\t\"6\",\r\n\t\t\t\"48\",\r\n\t\t\t\"17\",\r\n\t\t\t\"35\",\r\n\t\t\t\"\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"PKWDP0M9lGBzz\",\r\n\t\t\t\"7\",\r\n\t\t\t\"34\",\r\n\t\t\t\"16\",\r\n\t\t\t\"49\",\r\n\t\t\t\"\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"PKWDPsCKr80ks\",\r\n\t\t\t\"8\",\r\n\t\t\t\"17\",\r\n\t\t\t\"28\",\r\n\t\t\t\"15\",\r\n\t\t\t\"\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"PKWDPDotBpZ1y\",\r\n\t\t\t\"9\",\r\n\t\t\t\"45\",\r\n\t\t\t\"28\",\r\n\t\t\t\"49\",\r\n\t\t\t\"\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"PKWDPCYuyqdql\",\r\n\t\t\t\"10\",\r\n\t\t\t\"41\",\r\n\t\t\t\"26\",\r\n\t\t\t\"10\",\r\n\t\t\t\"\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"PKWDP0fPOkMaC\",\r\n\t\t\t\"11\",\r\n\t\t\t\"39\",\r\n\t\t\t\"20\",\r\n\t\t\t\"31\",\r\n\t\t\t\"\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"PKWDPGN6nYdv2\",\r\n\t\t\t\"12\",\r\n\t\t\t\"48\",\r\n\t\t\t\"46\",\r\n\t\t\t\"12\",\r\n\t\t\t\"\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"PKWDPZ19QRNrq\",\r\n\t\t\t\"13\",\r\n\t\t\t\"24\",\r\n\t\t\t\"27\",\r\n\t\t\t\"17\",\r\n\t\t\t\"\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"PKWDPPh1TNHCh\",\r\n\t\t\t\"14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"36\",\r\n\t\t\t\"13\",\r\n\t\t\t\"\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"PKWDPH6Q51k29\",\r\n\t\t\t\"15\",\r\n\t\t\t\"37\",\r\n\t\t\t\"20\",\r\n\t\t\t\"15\",\r\n\t\t\t\"\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"PKWDP2mpwUmS5\",\r\n\t\t\t\"16\",\r\n\t\t\t\"36\",\r\n\t\t\t\"40\",\r\n\t\t\t\"50\",\r\n\t\t\t\"\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"PKWDP07BrGxf2\",\r\n\t\t\t\"17\",\r\n\t\t\t\"25\",\r\n\t\t\t\"29\",\r\n\t\t\t\"49\",\r\n\t\t\t\"\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"PKWDPROG6tAJg\",\r\n\t\t\t\"18\",\r\n\t\t\t\"45\",\r\n\t\t\t\"12\",\r\n\t\t\t\"32\",\r\n\t\t\t\"\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"PKWDPUWYGDKwm\",\r\n\t\t\t\"19\",\r\n\t\t\t\"36\",\r\n\t\t\t\"44\",\r\n\t\t\t\"37\",\r\n\t\t\t\"\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"PKWDPVGUhe5T1\",\r\n\t\t\t\"20\",\r\n\t\t\t\"49\",\r\n\t\t\t\"49\",\r\n\t\t\t\"50\",\r\n\t\t\t\"\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"PKWDPr380Bs8L\",\r\n\t\t\t\"1\",\r\n\t\t\t\"39\",\r\n\t\t\t\"42\",\r\n\t\t\t\"7\",\r\n\t\t\t\"\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"PKWDPaE59GEmX\",\r\n\t\t\t\"2\",\r\n\t\t\t\"35\",\r\n\t\t\t\"41\",\r\n\t\t\t\"21\",\r\n\t\t\t\"\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"PKWDPrmTUoAR7\",\r\n\t\t\t\"3\",\r\n\t\t\t\"28\",\r\n\t\t\t\"15\",\r\n\t\t\t\"33\",\r\n\t\t\t\"\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"PKWDPvY4h2kxU\",\r\n\t\t\t\"4\",\r\n\t\t\t\"22\",\r\n\t\t\t\"25\",\r\n\t\t\t\"3\",\r\n\t\t\t\"\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"PKWDPOHE7tQlB\",\r\n\t\t\t\"5\",\r\n\t\t\t\"33\",\r\n\t\t\t\"15\",\r\n\t\t\t\"41\",\r\n\t\t\t\"\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"PKWDPjLgQAbkj\",\r\n\t\t\t\"6\",\r\n\t\t\t\"39\",\r\n\t\t\t\"17\",\r\n\t\t\t\"48\",\r\n\t\t\t\"\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"PKWDP6Fii9PlK\",\r\n\t\t\t\"7\",\r\n\t\t\t\"38\",\r\n\t\t\t\"32\",\r\n\t\t\t\"2\",\r\n\t\t\t\"\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"PKWDPIdrKcnAt\",\r\n\t\t\t\"8\",\r\n\t\t\t\"28\",\r\n\t\t\t\"28\",\r\n\t\t\t\"27\",\r\n\t\t\t\"\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"PKWDP39sdRbmd\",\r\n\t\t\t\"9\",\r\n\t\t\t\"44\",\r\n\t\t\t\"44\",\r\n\t\t\t\"11\",\r\n\t\t\t\"\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"PKWDPIFfYsTeE\",\r\n\t\t\t\"10\",\r\n\t\t\t\"5\",\r\n\t\t\t\"41\",\r\n\t\t\t\"28\",\r\n\t\t\t\"\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"PKWDPL3EIrzIi\",\r\n\t\t\t\"11\",\r\n\t\t\t\"13\",\r\n\t\t\t\"48\",\r\n\t\t\t\"39\",\r\n\t\t\t\"\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"PKWDPRoNUKI0a\",\r\n\t\t\t\"12\",\r\n\t\t\t\"19\",\r\n\t\t\t\"30\",\r\n\t\t\t\"50\",\r\n\t\t\t\"\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"PKWDPG1xTuED6\",\r\n\t\t\t\"13\",\r\n\t\t\t\"19\",\r\n\t\t\t\"36\",\r\n\t\t\t\"9\",\r\n\t\t\t\"\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"PKWDPbsMoqfPx\",\r\n\t\t\t\"14\",\r\n\t\t\t\"6\",\r\n\t\t\t\"5\",\r\n\t\t\t\"39\",\r\n\t\t\t\"\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"PKWDP9VwAD4Eo\",\r\n\t\t\t\"15\",\r\n\t\t\t\"43\",\r\n\t\t\t\"12\",\r\n\t\t\t\"19\",\r\n\t\t\t\"\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"PKWDPRCjHplai\",\r\n\t\t\t\"16\",\r\n\t\t\t\"14\",\r\n\t\t\t\"49\",\r\n\t\t\t\"4\",\r\n\t\t\t\"\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"PKWDPFU77vd3d\",\r\n\t\t\t\"17\",\r\n\t\t\t\"16\",\r\n\t\t\t\"48\",\r\n\t\t\t\"35\",\r\n\t\t\t\"\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"PKWDP5olR82ll\",\r\n\t\t\t\"18\",\r\n\t\t\t\"46\",\r\n\t\t\t\"45\",\r\n\t\t\t\"14\",\r\n\t\t\t\"\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"PKWDPQvs0xHVx\",\r\n\t\t\t\"19\",\r\n\t\t\t\"45\",\r\n\t\t\t\"37\",\r\n\t\t\t\"41\",\r\n\t\t\t\"\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"PKWDPkP8b8XvQ\",\r\n\t\t\t\"20\",\r\n\t\t\t\"23\",\r\n\t\t\t\"31\",\r\n\t\t\t\"17\",\r\n\t\t\t\"\",\r\n\t\t\t\"3\"\r\n\t\t]\r\n\t],\r\n\t\"draftMode\": true\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_datasetId}}/observationUnits/{{observationUnitId}}/observations/{{observationId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"observationUnits",
										"{{observationUnitId}}",
										"observations",
										"{{observationId}}"
									]
								},
								"description": "DELETE ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/observationUnits​/{observationUnitId}​/observations​/{observationId}"
							},
							"response": []
						},
						{
							"name": "Delete observation invalid crop",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "71b5990c-7cc6-403a-8f6b-69ed2578098a",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Check error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Invalid crop \"+pm.environment.get(\"invalidCrop\")+\" for URL:/crops/\"+pm.environment.get(\"invalidCrop\")+\"/programs/\"+pm.environment.get(\"api_program_id\")+\"/studies/\"+pm.environment.get(\"studyId\")+\"/datasets/\"+pm.environment.get(\"study_plot_datasetId\")+\"/observationUnits/\"+pm.environment.get(\"observationUnitId\")+\"/observations/\"+pm.environment.get(\"observationId\"));",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "214aabd1-bdfc-46d2-852c-0f4356f829a2",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}\r",
											"\r",
											"var observationUnitIds = [];\r",
											"observationUnitIds = JSON.parse(pm.environment.get(\"observationUnitIds\"));\r",
											"var observationIds = [];\r",
											"observationIds = JSON.parse(pm.environment.get(\"observationIds\"));\r",
											"console.log(observationUnitIds.length);\r",
											"var current_observationUnitId = observationUnitIds.shift();\r",
											"var current_observationId = observationIds.shift();\r",
											"pm.environment.set(\"observationUnitId\", current_observationUnitId);\r",
											"pm.environment.set(\"observationId\", current_observationId);\r",
											"pm.environment.set(\"observationUnitIds\", JSON.stringify(observationUnitIds));\r",
											"pm.environment.set(\"observationIds\", JSON.stringify(observationIds));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"processWarnings\": true,\r\n\t\"data\": [\r\n\t\t[\r\n\t\t\t\"TRIAL_INSTANCE\",\r\n\t\t\t\"PI_NAME\",\r\n\t\t\t\"EXPT_DESIGN\",\r\n\t\t\t\"LOCATION_ID\",\r\n\t\t\t\"LOCATION_NAME\",\r\n\t\t\t\"Crop_season_Code\",\r\n\t\t\t\"ENTRY_TYPE\",\r\n\t\t\t\"GID\",\r\n\t\t\t\"DESIGNATION\",\r\n\t\t\t\"ENTRY_NO\",\r\n\t\t\t\"OBS_UNIT_ID\",\r\n\t\t\t\"PLOT_NO\",\r\n\t\t\t\"WeedPressure_number\",\r\n\t\t\t\"Grain_yield\",\r\n\t\t\t\"Biomas_yield\",\r\n\t\t\t\"InputVariable\",\r\n\t\t\t\"NPSEL\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"PKWDPtLOzD8Sz\",\r\n\t\t\t\"1\",\r\n\t\t\t\"21\",\r\n\t\t\t\"23\",\r\n\t\t\t\"40\",\r\n\t\t\t\"338\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"PKWDP6ME6bt1l\",\r\n\t\t\t\"2\",\r\n\t\t\t\"15\",\r\n\t\t\t\"12\",\r\n\t\t\t\"45\",\r\n\t\t\t\"285\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"PKWDPe2za6TM7\",\r\n\t\t\t\"3\",\r\n\t\t\t\"12\",\r\n\t\t\t\"41\",\r\n\t\t\t\"32\",\r\n\t\t\t\"176\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"PKWDPEV6LPs1N\",\r\n\t\t\t\"4\",\r\n\t\t\t\"46\",\r\n\t\t\t\"49\",\r\n\t\t\t\"33\",\r\n\t\t\t\"488\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"PKWDPU27n9e9L\",\r\n\t\t\t\"5\",\r\n\t\t\t\"33\",\r\n\t\t\t\"41\",\r\n\t\t\t\"28\",\r\n\t\t\t\"397\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"PKWDPmpZgUu6S\",\r\n\t\t\t\"6\",\r\n\t\t\t\"48\",\r\n\t\t\t\"17\",\r\n\t\t\t\"35\",\r\n\t\t\t\"463\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"PKWDP0M9lGBzz\",\r\n\t\t\t\"7\",\r\n\t\t\t\"34\",\r\n\t\t\t\"16\",\r\n\t\t\t\"49\",\r\n\t\t\t\"105\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"PKWDPsCKr80ks\",\r\n\t\t\t\"8\",\r\n\t\t\t\"17\",\r\n\t\t\t\"28\",\r\n\t\t\t\"15\",\r\n\t\t\t\"379\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"PKWDPDotBpZ1y\",\r\n\t\t\t\"9\",\r\n\t\t\t\"45\",\r\n\t\t\t\"28\",\r\n\t\t\t\"49\",\r\n\t\t\t\"424\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"PKWDPCYuyqdql\",\r\n\t\t\t\"10\",\r\n\t\t\t\"41\",\r\n\t\t\t\"26\",\r\n\t\t\t\"10\",\r\n\t\t\t\"188\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"PKWDP0fPOkMaC\",\r\n\t\t\t\"11\",\r\n\t\t\t\"39\",\r\n\t\t\t\"20\",\r\n\t\t\t\"31\",\r\n\t\t\t\"471\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"PKWDPGN6nYdv2\",\r\n\t\t\t\"12\",\r\n\t\t\t\"48\",\r\n\t\t\t\"46\",\r\n\t\t\t\"12\",\r\n\t\t\t\"395\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"PKWDPZ19QRNrq\",\r\n\t\t\t\"13\",\r\n\t\t\t\"24\",\r\n\t\t\t\"27\",\r\n\t\t\t\"17\",\r\n\t\t\t\"340\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"PKWDPPh1TNHCh\",\r\n\t\t\t\"14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"36\",\r\n\t\t\t\"13\",\r\n\t\t\t\"299\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"PKWDPH6Q51k29\",\r\n\t\t\t\"15\",\r\n\t\t\t\"37\",\r\n\t\t\t\"20\",\r\n\t\t\t\"15\",\r\n\t\t\t\"408\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"PKWDP2mpwUmS5\",\r\n\t\t\t\"16\",\r\n\t\t\t\"36\",\r\n\t\t\t\"40\",\r\n\t\t\t\"50\",\r\n\t\t\t\"472\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"PKWDP07BrGxf2\",\r\n\t\t\t\"17\",\r\n\t\t\t\"25\",\r\n\t\t\t\"29\",\r\n\t\t\t\"49\",\r\n\t\t\t\"138\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"PKWDPROG6tAJg\",\r\n\t\t\t\"18\",\r\n\t\t\t\"45\",\r\n\t\t\t\"12\",\r\n\t\t\t\"32\",\r\n\t\t\t\"356\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"PKWDPUWYGDKwm\",\r\n\t\t\t\"19\",\r\n\t\t\t\"36\",\r\n\t\t\t\"44\",\r\n\t\t\t\"37\",\r\n\t\t\t\"423\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"PKWDPVGUhe5T1\",\r\n\t\t\t\"20\",\r\n\t\t\t\"49\",\r\n\t\t\t\"49\",\r\n\t\t\t\"50\",\r\n\t\t\t\"193\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"dc6a207b-b4eb-42d5-a5b7-b1262193e961\",\r\n\t\t\t\"1\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"125\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"f425bdec-fdc1-41cb-8d4b-19179d9ed7a9\",\r\n\t\t\t\"2\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"337\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"9fe3ff35-a57f-4dc2-b682-d69881ebd3e8\",\r\n\t\t\t\"3\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"317\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"48851c5a-132f-4df2-8139-1b0f8ba4ea13\",\r\n\t\t\t\"4\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"497\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"97b9bbb8-e390-4c6c-a688-3676c7a322a1\",\r\n\t\t\t\"5\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"496\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"5d53e82d-ea2c-42de-8255-5150462cc9e2\",\r\n\t\t\t\"6\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"114\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"bab7f29e-f1ec-4d0a-91a3-08cc0121fffc\",\r\n\t\t\t\"7\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"102\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"6117a4e4-2d58-4020-a047-7d0f568379df\",\r\n\t\t\t\"8\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"479\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"41c3a00c-c372-442c-b87c-b7329e1457ac\",\r\n\t\t\t\"9\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"140\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"0542e1ee-2535-44f7-bf41-fb4787f2de52\",\r\n\t\t\t\"10\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"280\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"02ccc497-fb94-4dcc-83dd-21f5db43f43e\",\r\n\t\t\t\"11\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"437\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"05883cec-d339-4cd0-b763-67f7d9d543ff\",\r\n\t\t\t\"12\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"354\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"74a8d502-8b17-4d96-8741-b38d294ae601\",\r\n\t\t\t\"13\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"430\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"72476b15-4090-46bc-be2f-e4e86171af50\",\r\n\t\t\t\"14\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"478\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"980a592b-bf45-4cbe-8ede-2c0d1d6302c4\",\r\n\t\t\t\"15\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"462\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"e50aeb0a-42ef-45f6-a247-e426f0cbd39c\",\r\n\t\t\t\"16\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"271\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"b7440ad5-4836-44e8-96ba-687e1c7fb0bb\",\r\n\t\t\t\"17\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"479\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"a0b745fd-d1de-45d0-9e86-42021ce43d43\",\r\n\t\t\t\"18\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"305\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"4fca59a2-84c1-40d2-b5a7-86ab957f00cc\",\r\n\t\t\t\"19\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"372\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"9129d101-c4ac-43cf-a818-079d4365c2d5\",\r\n\t\t\t\"20\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"459\",\r\n\t\t\t\"\"\r\n\t\t]\r\n\t],\r\n\t\"draftMode\": true\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{invalidCrop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_datasetId}}/observationUnits/{{observationUnitId}}/observations/{{observationId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{invalidCrop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"observationUnits",
										"{{observationUnitId}}",
										"observations",
										"{{observationId}}"
									]
								},
								"description": "DELETE ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/observationUnits​/{observationUnitId}​/observations​/{observationId}"
							},
							"response": []
						},
						{
							"name": "Delete observation invalid program",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "072f9f26-cd5c-4c8c-a6a2-7920d64770ea",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Check error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Invalid crop \"+pm.environment.get(\"invalidCrop\")+\" for URL:/crops/\"+pm.environment.get(\"invalidCrop\")+\"/programs/\"+pm.environment.get(\"api_program_id\")+\"/studies/\"+pm.environment.get(\"studyId\")+\"/datasets/\"+pm.environment.get(\"study_plot_datasetId\")+\"/observationUnits/\"+pm.environment.get(\"observationUnitId\")+\"/observations/\"+pm.environment.get(\"observationId\"));",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "edd5f3e3-22ff-4a2e-8810-8e98e90b4ac5",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}\r",
											"\r",
											"var observationUnitIds = [];\r",
											"observationUnitIds = JSON.parse(pm.environment.get(\"observationUnitIds\"));\r",
											"var observationIds = [];\r",
											"observationIds = JSON.parse(pm.environment.get(\"observationIds\"));\r",
											"console.log(observationUnitIds.length);\r",
											"var current_observationUnitId = observationUnitIds.shift();\r",
											"var current_observationId = observationIds.shift();\r",
											"pm.environment.set(\"observationUnitId\", current_observationUnitId);\r",
											"pm.environment.set(\"observationId\", current_observationId);\r",
											"pm.environment.set(\"observationUnitIds\", JSON.stringify(observationUnitIds));\r",
											"pm.environment.set(\"observationIds\", JSON.stringify(observationIds));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"processWarnings\": true,\r\n\t\"data\": [\r\n\t\t[\r\n\t\t\t\"TRIAL_INSTANCE\",\r\n\t\t\t\"PI_NAME\",\r\n\t\t\t\"EXPT_DESIGN\",\r\n\t\t\t\"LOCATION_ID\",\r\n\t\t\t\"LOCATION_NAME\",\r\n\t\t\t\"Crop_season_Code\",\r\n\t\t\t\"ENTRY_TYPE\",\r\n\t\t\t\"GID\",\r\n\t\t\t\"DESIGNATION\",\r\n\t\t\t\"ENTRY_NO\",\r\n\t\t\t\"OBS_UNIT_ID\",\r\n\t\t\t\"PLOT_NO\",\r\n\t\t\t\"WeedPressure_number\",\r\n\t\t\t\"Grain_yield\",\r\n\t\t\t\"Biomas_yield\",\r\n\t\t\t\"InputVariable\",\r\n\t\t\t\"NPSEL\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"PKWDPtLOzD8Sz\",\r\n\t\t\t\"1\",\r\n\t\t\t\"21\",\r\n\t\t\t\"23\",\r\n\t\t\t\"40\",\r\n\t\t\t\"338\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"PKWDP6ME6bt1l\",\r\n\t\t\t\"2\",\r\n\t\t\t\"15\",\r\n\t\t\t\"12\",\r\n\t\t\t\"45\",\r\n\t\t\t\"285\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"PKWDPe2za6TM7\",\r\n\t\t\t\"3\",\r\n\t\t\t\"12\",\r\n\t\t\t\"41\",\r\n\t\t\t\"32\",\r\n\t\t\t\"176\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"PKWDPEV6LPs1N\",\r\n\t\t\t\"4\",\r\n\t\t\t\"46\",\r\n\t\t\t\"49\",\r\n\t\t\t\"33\",\r\n\t\t\t\"488\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"PKWDPU27n9e9L\",\r\n\t\t\t\"5\",\r\n\t\t\t\"33\",\r\n\t\t\t\"41\",\r\n\t\t\t\"28\",\r\n\t\t\t\"397\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"PKWDPmpZgUu6S\",\r\n\t\t\t\"6\",\r\n\t\t\t\"48\",\r\n\t\t\t\"17\",\r\n\t\t\t\"35\",\r\n\t\t\t\"463\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"PKWDP0M9lGBzz\",\r\n\t\t\t\"7\",\r\n\t\t\t\"34\",\r\n\t\t\t\"16\",\r\n\t\t\t\"49\",\r\n\t\t\t\"105\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"PKWDPsCKr80ks\",\r\n\t\t\t\"8\",\r\n\t\t\t\"17\",\r\n\t\t\t\"28\",\r\n\t\t\t\"15\",\r\n\t\t\t\"379\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"PKWDPDotBpZ1y\",\r\n\t\t\t\"9\",\r\n\t\t\t\"45\",\r\n\t\t\t\"28\",\r\n\t\t\t\"49\",\r\n\t\t\t\"424\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"PKWDPCYuyqdql\",\r\n\t\t\t\"10\",\r\n\t\t\t\"41\",\r\n\t\t\t\"26\",\r\n\t\t\t\"10\",\r\n\t\t\t\"188\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"PKWDP0fPOkMaC\",\r\n\t\t\t\"11\",\r\n\t\t\t\"39\",\r\n\t\t\t\"20\",\r\n\t\t\t\"31\",\r\n\t\t\t\"471\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"PKWDPGN6nYdv2\",\r\n\t\t\t\"12\",\r\n\t\t\t\"48\",\r\n\t\t\t\"46\",\r\n\t\t\t\"12\",\r\n\t\t\t\"395\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"PKWDPZ19QRNrq\",\r\n\t\t\t\"13\",\r\n\t\t\t\"24\",\r\n\t\t\t\"27\",\r\n\t\t\t\"17\",\r\n\t\t\t\"340\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"PKWDPPh1TNHCh\",\r\n\t\t\t\"14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"36\",\r\n\t\t\t\"13\",\r\n\t\t\t\"299\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"PKWDPH6Q51k29\",\r\n\t\t\t\"15\",\r\n\t\t\t\"37\",\r\n\t\t\t\"20\",\r\n\t\t\t\"15\",\r\n\t\t\t\"408\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"PKWDP2mpwUmS5\",\r\n\t\t\t\"16\",\r\n\t\t\t\"36\",\r\n\t\t\t\"40\",\r\n\t\t\t\"50\",\r\n\t\t\t\"472\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"PKWDP07BrGxf2\",\r\n\t\t\t\"17\",\r\n\t\t\t\"25\",\r\n\t\t\t\"29\",\r\n\t\t\t\"49\",\r\n\t\t\t\"138\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"PKWDPROG6tAJg\",\r\n\t\t\t\"18\",\r\n\t\t\t\"45\",\r\n\t\t\t\"12\",\r\n\t\t\t\"32\",\r\n\t\t\t\"356\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"PKWDPUWYGDKwm\",\r\n\t\t\t\"19\",\r\n\t\t\t\"36\",\r\n\t\t\t\"44\",\r\n\t\t\t\"37\",\r\n\t\t\t\"423\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"PKWDPVGUhe5T1\",\r\n\t\t\t\"20\",\r\n\t\t\t\"49\",\r\n\t\t\t\"49\",\r\n\t\t\t\"50\",\r\n\t\t\t\"193\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"dc6a207b-b4eb-42d5-a5b7-b1262193e961\",\r\n\t\t\t\"1\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"125\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"f425bdec-fdc1-41cb-8d4b-19179d9ed7a9\",\r\n\t\t\t\"2\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"337\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"9fe3ff35-a57f-4dc2-b682-d69881ebd3e8\",\r\n\t\t\t\"3\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"317\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"48851c5a-132f-4df2-8139-1b0f8ba4ea13\",\r\n\t\t\t\"4\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"497\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"97b9bbb8-e390-4c6c-a688-3676c7a322a1\",\r\n\t\t\t\"5\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"496\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"5d53e82d-ea2c-42de-8255-5150462cc9e2\",\r\n\t\t\t\"6\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"114\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"bab7f29e-f1ec-4d0a-91a3-08cc0121fffc\",\r\n\t\t\t\"7\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"102\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"6117a4e4-2d58-4020-a047-7d0f568379df\",\r\n\t\t\t\"8\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"479\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"41c3a00c-c372-442c-b87c-b7329e1457ac\",\r\n\t\t\t\"9\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"140\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"0542e1ee-2535-44f7-bf41-fb4787f2de52\",\r\n\t\t\t\"10\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"280\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"02ccc497-fb94-4dcc-83dd-21f5db43f43e\",\r\n\t\t\t\"11\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"437\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"05883cec-d339-4cd0-b763-67f7d9d543ff\",\r\n\t\t\t\"12\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"354\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"74a8d502-8b17-4d96-8741-b38d294ae601\",\r\n\t\t\t\"13\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"430\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"72476b15-4090-46bc-be2f-e4e86171af50\",\r\n\t\t\t\"14\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"478\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"980a592b-bf45-4cbe-8ede-2c0d1d6302c4\",\r\n\t\t\t\"15\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"462\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"e50aeb0a-42ef-45f6-a247-e426f0cbd39c\",\r\n\t\t\t\"16\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"271\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"b7440ad5-4836-44e8-96ba-687e1c7fb0bb\",\r\n\t\t\t\"17\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"479\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"a0b745fd-d1de-45d0-9e86-42021ce43d43\",\r\n\t\t\t\"18\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"305\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"4fca59a2-84c1-40d2-b5a7-86ab957f00cc\",\r\n\t\t\t\"19\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"372\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"9129d101-c4ac-43cf-a818-079d4365c2d5\",\r\n\t\t\t\"20\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"459\",\r\n\t\t\t\"\"\r\n\t\t]\r\n\t],\r\n\t\"draftMode\": true\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{invalidCrop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_datasetId}}/observationUnits/{{observationUnitId}}/observations/{{observationId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{invalidCrop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"observationUnits",
										"{{observationUnitId}}",
										"observations",
										"{{observationId}}"
									]
								},
								"description": "DELETE ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/observationUnits​/{observationUnitId}​/observations​/{observationId}"
							},
							"response": []
						},
						{
							"name": "Delete observation with non-existing studyId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "be48396e-30ba-4a18-ac58-0cccb8aec765",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"pm.test(\"Check error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Study does not exist\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1cb4830a-03a6-429a-adf4-3832e9b24c98",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}\r",
											"\r",
											"var observationUnitIds = [];\r",
											"observationUnitIds = JSON.parse(pm.environment.get(\"observationUnitIds\"));\r",
											"var observationIds = [];\r",
											"observationIds = JSON.parse(pm.environment.get(\"observationIds\"));\r",
											"console.log(observationUnitIds.length);\r",
											"var current_observationUnitId = observationUnitIds.shift();\r",
											"var current_observationId = observationIds.shift();\r",
											"pm.environment.set(\"observationUnitId\", current_observationUnitId);\r",
											"pm.environment.set(\"observationId\", current_observationId);\r",
											"pm.environment.set(\"observationUnitIds\", JSON.stringify(observationUnitIds));\r",
											"pm.environment.set(\"observationIds\", JSON.stringify(observationIds));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"processWarnings\": true,\r\n\t\"data\": [\r\n\t\t[\r\n\t\t\t\"TRIAL_INSTANCE\",\r\n\t\t\t\"PI_NAME\",\r\n\t\t\t\"EXPT_DESIGN\",\r\n\t\t\t\"LOCATION_ID\",\r\n\t\t\t\"LOCATION_NAME\",\r\n\t\t\t\"Crop_season_Code\",\r\n\t\t\t\"ENTRY_TYPE\",\r\n\t\t\t\"GID\",\r\n\t\t\t\"DESIGNATION\",\r\n\t\t\t\"ENTRY_NO\",\r\n\t\t\t\"OBS_UNIT_ID\",\r\n\t\t\t\"PLOT_NO\",\r\n\t\t\t\"WeedPressure_number\",\r\n\t\t\t\"Grain_yield\",\r\n\t\t\t\"Biomas_yield\",\r\n\t\t\t\"InputVariable\",\r\n\t\t\t\"NPSEL\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"PKWDPtLOzD8Sz\",\r\n\t\t\t\"1\",\r\n\t\t\t\"21\",\r\n\t\t\t\"23\",\r\n\t\t\t\"40\",\r\n\t\t\t\"338\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"PKWDP6ME6bt1l\",\r\n\t\t\t\"2\",\r\n\t\t\t\"15\",\r\n\t\t\t\"12\",\r\n\t\t\t\"45\",\r\n\t\t\t\"285\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"PKWDPe2za6TM7\",\r\n\t\t\t\"3\",\r\n\t\t\t\"12\",\r\n\t\t\t\"41\",\r\n\t\t\t\"32\",\r\n\t\t\t\"176\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"PKWDPEV6LPs1N\",\r\n\t\t\t\"4\",\r\n\t\t\t\"46\",\r\n\t\t\t\"49\",\r\n\t\t\t\"33\",\r\n\t\t\t\"488\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"PKWDPU27n9e9L\",\r\n\t\t\t\"5\",\r\n\t\t\t\"33\",\r\n\t\t\t\"41\",\r\n\t\t\t\"28\",\r\n\t\t\t\"397\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"PKWDPmpZgUu6S\",\r\n\t\t\t\"6\",\r\n\t\t\t\"48\",\r\n\t\t\t\"17\",\r\n\t\t\t\"35\",\r\n\t\t\t\"463\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"PKWDP0M9lGBzz\",\r\n\t\t\t\"7\",\r\n\t\t\t\"34\",\r\n\t\t\t\"16\",\r\n\t\t\t\"49\",\r\n\t\t\t\"105\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"PKWDPsCKr80ks\",\r\n\t\t\t\"8\",\r\n\t\t\t\"17\",\r\n\t\t\t\"28\",\r\n\t\t\t\"15\",\r\n\t\t\t\"379\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"PKWDPDotBpZ1y\",\r\n\t\t\t\"9\",\r\n\t\t\t\"45\",\r\n\t\t\t\"28\",\r\n\t\t\t\"49\",\r\n\t\t\t\"424\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"PKWDPCYuyqdql\",\r\n\t\t\t\"10\",\r\n\t\t\t\"41\",\r\n\t\t\t\"26\",\r\n\t\t\t\"10\",\r\n\t\t\t\"188\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"PKWDP0fPOkMaC\",\r\n\t\t\t\"11\",\r\n\t\t\t\"39\",\r\n\t\t\t\"20\",\r\n\t\t\t\"31\",\r\n\t\t\t\"471\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"PKWDPGN6nYdv2\",\r\n\t\t\t\"12\",\r\n\t\t\t\"48\",\r\n\t\t\t\"46\",\r\n\t\t\t\"12\",\r\n\t\t\t\"395\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"PKWDPZ19QRNrq\",\r\n\t\t\t\"13\",\r\n\t\t\t\"24\",\r\n\t\t\t\"27\",\r\n\t\t\t\"17\",\r\n\t\t\t\"340\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"PKWDPPh1TNHCh\",\r\n\t\t\t\"14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"36\",\r\n\t\t\t\"13\",\r\n\t\t\t\"299\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"PKWDPH6Q51k29\",\r\n\t\t\t\"15\",\r\n\t\t\t\"37\",\r\n\t\t\t\"20\",\r\n\t\t\t\"15\",\r\n\t\t\t\"408\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"PKWDP2mpwUmS5\",\r\n\t\t\t\"16\",\r\n\t\t\t\"36\",\r\n\t\t\t\"40\",\r\n\t\t\t\"50\",\r\n\t\t\t\"472\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"PKWDP07BrGxf2\",\r\n\t\t\t\"17\",\r\n\t\t\t\"25\",\r\n\t\t\t\"29\",\r\n\t\t\t\"49\",\r\n\t\t\t\"138\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"PKWDPROG6tAJg\",\r\n\t\t\t\"18\",\r\n\t\t\t\"45\",\r\n\t\t\t\"12\",\r\n\t\t\t\"32\",\r\n\t\t\t\"356\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"PKWDPUWYGDKwm\",\r\n\t\t\t\"19\",\r\n\t\t\t\"36\",\r\n\t\t\t\"44\",\r\n\t\t\t\"37\",\r\n\t\t\t\"423\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"PKWDPVGUhe5T1\",\r\n\t\t\t\"20\",\r\n\t\t\t\"49\",\r\n\t\t\t\"49\",\r\n\t\t\t\"50\",\r\n\t\t\t\"193\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"dc6a207b-b4eb-42d5-a5b7-b1262193e961\",\r\n\t\t\t\"1\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"125\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"f425bdec-fdc1-41cb-8d4b-19179d9ed7a9\",\r\n\t\t\t\"2\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"337\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"9fe3ff35-a57f-4dc2-b682-d69881ebd3e8\",\r\n\t\t\t\"3\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"317\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"48851c5a-132f-4df2-8139-1b0f8ba4ea13\",\r\n\t\t\t\"4\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"497\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"97b9bbb8-e390-4c6c-a688-3676c7a322a1\",\r\n\t\t\t\"5\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"496\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"5d53e82d-ea2c-42de-8255-5150462cc9e2\",\r\n\t\t\t\"6\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"114\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"bab7f29e-f1ec-4d0a-91a3-08cc0121fffc\",\r\n\t\t\t\"7\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"102\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"6117a4e4-2d58-4020-a047-7d0f568379df\",\r\n\t\t\t\"8\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"479\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"41c3a00c-c372-442c-b87c-b7329e1457ac\",\r\n\t\t\t\"9\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"140\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"0542e1ee-2535-44f7-bf41-fb4787f2de52\",\r\n\t\t\t\"10\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"280\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"02ccc497-fb94-4dcc-83dd-21f5db43f43e\",\r\n\t\t\t\"11\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"437\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"05883cec-d339-4cd0-b763-67f7d9d543ff\",\r\n\t\t\t\"12\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"354\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"74a8d502-8b17-4d96-8741-b38d294ae601\",\r\n\t\t\t\"13\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"430\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"72476b15-4090-46bc-be2f-e4e86171af50\",\r\n\t\t\t\"14\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"478\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"980a592b-bf45-4cbe-8ede-2c0d1d6302c4\",\r\n\t\t\t\"15\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"462\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"e50aeb0a-42ef-45f6-a247-e426f0cbd39c\",\r\n\t\t\t\"16\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"271\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"b7440ad5-4836-44e8-96ba-687e1c7fb0bb\",\r\n\t\t\t\"17\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"479\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"a0b745fd-d1de-45d0-9e86-42021ce43d43\",\r\n\t\t\t\"18\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"305\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"4fca59a2-84c1-40d2-b5a7-86ab957f00cc\",\r\n\t\t\t\"19\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"372\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"9129d101-c4ac-43cf-a818-079d4365c2d5\",\r\n\t\t\t\"20\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"459\",\r\n\t\t\t\"\"\r\n\t\t]\r\n\t],\r\n\t\"draftMode\": true\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{non_existing_study_id}}/datasets/{{study_plot_datasetId}}/observationUnits/{{observationUnitId}}/observations/{{observationId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{non_existing_study_id}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"observationUnits",
										"{{observationUnitId}}",
										"observations",
										"{{observationId}}"
									]
								},
								"description": "DELETE ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/observationUnits​/{observationUnitId}​/observations​/{observationId}"
							},
							"response": []
						},
						{
							"name": "Delete observation with non-existing datasetId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c99384c9-07b0-4785-a942-1de8c3607d30",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"pm.test(\"Check error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Dataset does not exist\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "488dec8c-89ee-4c0b-9af7-ed4a785ad642",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}\r",
											"\r",
											"var observationUnitIds = [];\r",
											"observationUnitIds = JSON.parse(pm.environment.get(\"observationUnitIds\"));\r",
											"var observationIds = [];\r",
											"observationIds = JSON.parse(pm.environment.get(\"observationIds\"));\r",
											"console.log(observationUnitIds.length);\r",
											"var current_observationUnitId = observationUnitIds.shift();\r",
											"var current_observationId = observationIds.shift();\r",
											"pm.environment.set(\"observationUnitId\", current_observationUnitId);\r",
											"pm.environment.set(\"observationId\", current_observationId);\r",
											"pm.environment.set(\"observationUnitIds\", JSON.stringify(observationUnitIds));\r",
											"pm.environment.set(\"observationIds\", JSON.stringify(observationIds));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"processWarnings\": true,\r\n\t\"data\": [\r\n\t\t[\r\n\t\t\t\"TRIAL_INSTANCE\",\r\n\t\t\t\"PI_NAME\",\r\n\t\t\t\"EXPT_DESIGN\",\r\n\t\t\t\"LOCATION_ID\",\r\n\t\t\t\"LOCATION_NAME\",\r\n\t\t\t\"Crop_season_Code\",\r\n\t\t\t\"ENTRY_TYPE\",\r\n\t\t\t\"GID\",\r\n\t\t\t\"DESIGNATION\",\r\n\t\t\t\"ENTRY_NO\",\r\n\t\t\t\"OBS_UNIT_ID\",\r\n\t\t\t\"PLOT_NO\",\r\n\t\t\t\"WeedPressure_number\",\r\n\t\t\t\"Grain_yield\",\r\n\t\t\t\"Biomas_yield\",\r\n\t\t\t\"InputVariable\",\r\n\t\t\t\"NPSEL\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"PKWDPtLOzD8Sz\",\r\n\t\t\t\"1\",\r\n\t\t\t\"21\",\r\n\t\t\t\"23\",\r\n\t\t\t\"40\",\r\n\t\t\t\"338\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"PKWDP6ME6bt1l\",\r\n\t\t\t\"2\",\r\n\t\t\t\"15\",\r\n\t\t\t\"12\",\r\n\t\t\t\"45\",\r\n\t\t\t\"285\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"PKWDPe2za6TM7\",\r\n\t\t\t\"3\",\r\n\t\t\t\"12\",\r\n\t\t\t\"41\",\r\n\t\t\t\"32\",\r\n\t\t\t\"176\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"PKWDPEV6LPs1N\",\r\n\t\t\t\"4\",\r\n\t\t\t\"46\",\r\n\t\t\t\"49\",\r\n\t\t\t\"33\",\r\n\t\t\t\"488\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"PKWDPU27n9e9L\",\r\n\t\t\t\"5\",\r\n\t\t\t\"33\",\r\n\t\t\t\"41\",\r\n\t\t\t\"28\",\r\n\t\t\t\"397\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"PKWDPmpZgUu6S\",\r\n\t\t\t\"6\",\r\n\t\t\t\"48\",\r\n\t\t\t\"17\",\r\n\t\t\t\"35\",\r\n\t\t\t\"463\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"PKWDP0M9lGBzz\",\r\n\t\t\t\"7\",\r\n\t\t\t\"34\",\r\n\t\t\t\"16\",\r\n\t\t\t\"49\",\r\n\t\t\t\"105\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"PKWDPsCKr80ks\",\r\n\t\t\t\"8\",\r\n\t\t\t\"17\",\r\n\t\t\t\"28\",\r\n\t\t\t\"15\",\r\n\t\t\t\"379\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"PKWDPDotBpZ1y\",\r\n\t\t\t\"9\",\r\n\t\t\t\"45\",\r\n\t\t\t\"28\",\r\n\t\t\t\"49\",\r\n\t\t\t\"424\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"PKWDPCYuyqdql\",\r\n\t\t\t\"10\",\r\n\t\t\t\"41\",\r\n\t\t\t\"26\",\r\n\t\t\t\"10\",\r\n\t\t\t\"188\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"PKWDP0fPOkMaC\",\r\n\t\t\t\"11\",\r\n\t\t\t\"39\",\r\n\t\t\t\"20\",\r\n\t\t\t\"31\",\r\n\t\t\t\"471\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"PKWDPGN6nYdv2\",\r\n\t\t\t\"12\",\r\n\t\t\t\"48\",\r\n\t\t\t\"46\",\r\n\t\t\t\"12\",\r\n\t\t\t\"395\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"PKWDPZ19QRNrq\",\r\n\t\t\t\"13\",\r\n\t\t\t\"24\",\r\n\t\t\t\"27\",\r\n\t\t\t\"17\",\r\n\t\t\t\"340\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"PKWDPPh1TNHCh\",\r\n\t\t\t\"14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"36\",\r\n\t\t\t\"13\",\r\n\t\t\t\"299\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"PKWDPH6Q51k29\",\r\n\t\t\t\"15\",\r\n\t\t\t\"37\",\r\n\t\t\t\"20\",\r\n\t\t\t\"15\",\r\n\t\t\t\"408\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"PKWDP2mpwUmS5\",\r\n\t\t\t\"16\",\r\n\t\t\t\"36\",\r\n\t\t\t\"40\",\r\n\t\t\t\"50\",\r\n\t\t\t\"472\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"PKWDP07BrGxf2\",\r\n\t\t\t\"17\",\r\n\t\t\t\"25\",\r\n\t\t\t\"29\",\r\n\t\t\t\"49\",\r\n\t\t\t\"138\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"PKWDPROG6tAJg\",\r\n\t\t\t\"18\",\r\n\t\t\t\"45\",\r\n\t\t\t\"12\",\r\n\t\t\t\"32\",\r\n\t\t\t\"356\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"PKWDPUWYGDKwm\",\r\n\t\t\t\"19\",\r\n\t\t\t\"36\",\r\n\t\t\t\"44\",\r\n\t\t\t\"37\",\r\n\t\t\t\"423\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"PKWDPVGUhe5T1\",\r\n\t\t\t\"20\",\r\n\t\t\t\"49\",\r\n\t\t\t\"49\",\r\n\t\t\t\"50\",\r\n\t\t\t\"193\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"dc6a207b-b4eb-42d5-a5b7-b1262193e961\",\r\n\t\t\t\"1\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"125\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"f425bdec-fdc1-41cb-8d4b-19179d9ed7a9\",\r\n\t\t\t\"2\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"337\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"9fe3ff35-a57f-4dc2-b682-d69881ebd3e8\",\r\n\t\t\t\"3\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"317\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"48851c5a-132f-4df2-8139-1b0f8ba4ea13\",\r\n\t\t\t\"4\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"497\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"97b9bbb8-e390-4c6c-a688-3676c7a322a1\",\r\n\t\t\t\"5\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"496\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"5d53e82d-ea2c-42de-8255-5150462cc9e2\",\r\n\t\t\t\"6\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"114\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"bab7f29e-f1ec-4d0a-91a3-08cc0121fffc\",\r\n\t\t\t\"7\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"102\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"6117a4e4-2d58-4020-a047-7d0f568379df\",\r\n\t\t\t\"8\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"479\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"41c3a00c-c372-442c-b87c-b7329e1457ac\",\r\n\t\t\t\"9\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"140\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"0542e1ee-2535-44f7-bf41-fb4787f2de52\",\r\n\t\t\t\"10\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"280\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"02ccc497-fb94-4dcc-83dd-21f5db43f43e\",\r\n\t\t\t\"11\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"437\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"05883cec-d339-4cd0-b763-67f7d9d543ff\",\r\n\t\t\t\"12\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"354\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"74a8d502-8b17-4d96-8741-b38d294ae601\",\r\n\t\t\t\"13\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"430\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"72476b15-4090-46bc-be2f-e4e86171af50\",\r\n\t\t\t\"14\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"478\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"980a592b-bf45-4cbe-8ede-2c0d1d6302c4\",\r\n\t\t\t\"15\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"462\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"e50aeb0a-42ef-45f6-a247-e426f0cbd39c\",\r\n\t\t\t\"16\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"271\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"b7440ad5-4836-44e8-96ba-687e1c7fb0bb\",\r\n\t\t\t\"17\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"479\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"a0b745fd-d1de-45d0-9e86-42021ce43d43\",\r\n\t\t\t\"18\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"305\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"4fca59a2-84c1-40d2-b5a7-86ab957f00cc\",\r\n\t\t\t\"19\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"372\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"9129d101-c4ac-43cf-a818-079d4365c2d5\",\r\n\t\t\t\"20\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"459\",\r\n\t\t\t\"\"\r\n\t\t]\r\n\t],\r\n\t\"draftMode\": true\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{non_existing_dataset_id}}/observationUnits/{{observationUnitId}}/observations/{{observationId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{non_existing_dataset_id}}",
										"observationUnits",
										"{{observationUnitId}}",
										"observations",
										"{{observationId}}"
									]
								},
								"description": "DELETE ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/observationUnits​/{observationUnitId}​/observations​/{observationId}"
							},
							"response": []
						},
						{
							"name": "Delete observation with datasetId that does not belong to the study",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "af9d8c57-7626-487a-980d-0b2135dafcb1",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Check error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Specified dataset \"+pm.environment.get(\"study_plot_dataset_id_noPhenoCount\")+\" does not belong to the study \"+pm.environment.get(\"studyId\"));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "efee50d1-44c6-49b3-bda4-1d9a09623587",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}\r",
											"\r",
											"var observationUnitIds = [];\r",
											"observationUnitIds = JSON.parse(pm.environment.get(\"observationUnitIds\"));\r",
											"var observationIds = [];\r",
											"observationIds = JSON.parse(pm.environment.get(\"observationIds\"));\r",
											"console.log(observationUnitIds.length);\r",
											"var current_observationUnitId = observationUnitIds.shift();\r",
											"var current_observationId = observationIds.shift();\r",
											"pm.environment.set(\"observationUnitId\", current_observationUnitId);\r",
											"pm.environment.set(\"observationId\", current_observationId);\r",
											"pm.environment.set(\"observationUnitIds\", JSON.stringify(observationUnitIds));\r",
											"pm.environment.set(\"observationIds\", JSON.stringify(observationIds));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"processWarnings\": true,\r\n\t\"data\": [\r\n\t\t[\r\n\t\t\t\"TRIAL_INSTANCE\",\r\n\t\t\t\"PI_NAME\",\r\n\t\t\t\"EXPT_DESIGN\",\r\n\t\t\t\"LOCATION_ID\",\r\n\t\t\t\"LOCATION_NAME\",\r\n\t\t\t\"Crop_season_Code\",\r\n\t\t\t\"ENTRY_TYPE\",\r\n\t\t\t\"GID\",\r\n\t\t\t\"DESIGNATION\",\r\n\t\t\t\"ENTRY_NO\",\r\n\t\t\t\"OBS_UNIT_ID\",\r\n\t\t\t\"PLOT_NO\",\r\n\t\t\t\"WeedPressure_number\",\r\n\t\t\t\"Grain_yield\",\r\n\t\t\t\"Biomas_yield\",\r\n\t\t\t\"InputVariable\",\r\n\t\t\t\"NPSEL\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"PKWDPtLOzD8Sz\",\r\n\t\t\t\"1\",\r\n\t\t\t\"21\",\r\n\t\t\t\"23\",\r\n\t\t\t\"40\",\r\n\t\t\t\"338\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"PKWDP6ME6bt1l\",\r\n\t\t\t\"2\",\r\n\t\t\t\"15\",\r\n\t\t\t\"12\",\r\n\t\t\t\"45\",\r\n\t\t\t\"285\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"PKWDPe2za6TM7\",\r\n\t\t\t\"3\",\r\n\t\t\t\"12\",\r\n\t\t\t\"41\",\r\n\t\t\t\"32\",\r\n\t\t\t\"176\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"PKWDPEV6LPs1N\",\r\n\t\t\t\"4\",\r\n\t\t\t\"46\",\r\n\t\t\t\"49\",\r\n\t\t\t\"33\",\r\n\t\t\t\"488\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"PKWDPU27n9e9L\",\r\n\t\t\t\"5\",\r\n\t\t\t\"33\",\r\n\t\t\t\"41\",\r\n\t\t\t\"28\",\r\n\t\t\t\"397\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"PKWDPmpZgUu6S\",\r\n\t\t\t\"6\",\r\n\t\t\t\"48\",\r\n\t\t\t\"17\",\r\n\t\t\t\"35\",\r\n\t\t\t\"463\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"PKWDP0M9lGBzz\",\r\n\t\t\t\"7\",\r\n\t\t\t\"34\",\r\n\t\t\t\"16\",\r\n\t\t\t\"49\",\r\n\t\t\t\"105\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"PKWDPsCKr80ks\",\r\n\t\t\t\"8\",\r\n\t\t\t\"17\",\r\n\t\t\t\"28\",\r\n\t\t\t\"15\",\r\n\t\t\t\"379\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"PKWDPDotBpZ1y\",\r\n\t\t\t\"9\",\r\n\t\t\t\"45\",\r\n\t\t\t\"28\",\r\n\t\t\t\"49\",\r\n\t\t\t\"424\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"PKWDPCYuyqdql\",\r\n\t\t\t\"10\",\r\n\t\t\t\"41\",\r\n\t\t\t\"26\",\r\n\t\t\t\"10\",\r\n\t\t\t\"188\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"PKWDP0fPOkMaC\",\r\n\t\t\t\"11\",\r\n\t\t\t\"39\",\r\n\t\t\t\"20\",\r\n\t\t\t\"31\",\r\n\t\t\t\"471\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"PKWDPGN6nYdv2\",\r\n\t\t\t\"12\",\r\n\t\t\t\"48\",\r\n\t\t\t\"46\",\r\n\t\t\t\"12\",\r\n\t\t\t\"395\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"PKWDPZ19QRNrq\",\r\n\t\t\t\"13\",\r\n\t\t\t\"24\",\r\n\t\t\t\"27\",\r\n\t\t\t\"17\",\r\n\t\t\t\"340\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"PKWDPPh1TNHCh\",\r\n\t\t\t\"14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"36\",\r\n\t\t\t\"13\",\r\n\t\t\t\"299\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"PKWDPH6Q51k29\",\r\n\t\t\t\"15\",\r\n\t\t\t\"37\",\r\n\t\t\t\"20\",\r\n\t\t\t\"15\",\r\n\t\t\t\"408\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"PKWDP2mpwUmS5\",\r\n\t\t\t\"16\",\r\n\t\t\t\"36\",\r\n\t\t\t\"40\",\r\n\t\t\t\"50\",\r\n\t\t\t\"472\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"PKWDP07BrGxf2\",\r\n\t\t\t\"17\",\r\n\t\t\t\"25\",\r\n\t\t\t\"29\",\r\n\t\t\t\"49\",\r\n\t\t\t\"138\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"PKWDPROG6tAJg\",\r\n\t\t\t\"18\",\r\n\t\t\t\"45\",\r\n\t\t\t\"12\",\r\n\t\t\t\"32\",\r\n\t\t\t\"356\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"PKWDPUWYGDKwm\",\r\n\t\t\t\"19\",\r\n\t\t\t\"36\",\r\n\t\t\t\"44\",\r\n\t\t\t\"37\",\r\n\t\t\t\"423\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"PKWDPVGUhe5T1\",\r\n\t\t\t\"20\",\r\n\t\t\t\"49\",\r\n\t\t\t\"49\",\r\n\t\t\t\"50\",\r\n\t\t\t\"193\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"dc6a207b-b4eb-42d5-a5b7-b1262193e961\",\r\n\t\t\t\"1\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"125\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"f425bdec-fdc1-41cb-8d4b-19179d9ed7a9\",\r\n\t\t\t\"2\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"337\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"9fe3ff35-a57f-4dc2-b682-d69881ebd3e8\",\r\n\t\t\t\"3\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"317\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"48851c5a-132f-4df2-8139-1b0f8ba4ea13\",\r\n\t\t\t\"4\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"497\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"97b9bbb8-e390-4c6c-a688-3676c7a322a1\",\r\n\t\t\t\"5\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"496\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"5d53e82d-ea2c-42de-8255-5150462cc9e2\",\r\n\t\t\t\"6\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"114\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"bab7f29e-f1ec-4d0a-91a3-08cc0121fffc\",\r\n\t\t\t\"7\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"102\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"6117a4e4-2d58-4020-a047-7d0f568379df\",\r\n\t\t\t\"8\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"479\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"41c3a00c-c372-442c-b87c-b7329e1457ac\",\r\n\t\t\t\"9\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"140\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"0542e1ee-2535-44f7-bf41-fb4787f2de52\",\r\n\t\t\t\"10\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"280\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"02ccc497-fb94-4dcc-83dd-21f5db43f43e\",\r\n\t\t\t\"11\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"437\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"05883cec-d339-4cd0-b763-67f7d9d543ff\",\r\n\t\t\t\"12\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"354\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"74a8d502-8b17-4d96-8741-b38d294ae601\",\r\n\t\t\t\"13\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"430\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"72476b15-4090-46bc-be2f-e4e86171af50\",\r\n\t\t\t\"14\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"478\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"980a592b-bf45-4cbe-8ede-2c0d1d6302c4\",\r\n\t\t\t\"15\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"462\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"e50aeb0a-42ef-45f6-a247-e426f0cbd39c\",\r\n\t\t\t\"16\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"271\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"b7440ad5-4836-44e8-96ba-687e1c7fb0bb\",\r\n\t\t\t\"17\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"479\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"a0b745fd-d1de-45d0-9e86-42021ce43d43\",\r\n\t\t\t\"18\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"305\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"4fca59a2-84c1-40d2-b5a7-86ab957f00cc\",\r\n\t\t\t\"19\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"372\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"9129d101-c4ac-43cf-a818-079d4365c2d5\",\r\n\t\t\t\"20\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"459\",\r\n\t\t\t\"\"\r\n\t\t]\r\n\t],\r\n\t\"draftMode\": true\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_dataset_id_noPhenoCount}}/observationUnits/{{observationUnitId}}/observations/{{observationId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_dataset_id_noPhenoCount}}",
										"observationUnits",
										"{{observationUnitId}}",
										"observations",
										"{{observationId}}"
									]
								},
								"description": "DELETE ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/observationUnits​/{observationUnitId}​/observations​/{observationId}"
							},
							"response": []
						},
						{
							"name": "Count filtered phenotype for 1 instance",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9f41f7a2-b148-4ee9-a1a6-ba45147d3e3a",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											" var jsonData = pm.response.json();",
											"pm.test(\"Check totalFilteredPhenotypes\", function () {",
											"    pm.expect(jsonData.totalFilteredPhenotypes).to.eql(20);",
											"});",
											"pm.test(\"Check totalFilteredPhenotypes\", function () {",
											"    pm.expect(jsonData.totalFilteredInstances).to.eql(1);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "919732fc-ecac-43ee-8162-0773a392baa2",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"instanceId\": 1,\r\n\t\"draftMode\": false,\r\n\t\"filter\": {\r\n\t\t\"byOutOfBound\": null,\r\n\t\t\"byMissing\": null,\r\n\t\t\"byOutOfSync\": null,\r\n\t\t\"byOverwritten\": null,\r\n\t\t\"variableId\": 100020,\r\n\t\t\"filterColumns\": [],\r\n\t\t\"filteredValues\": {},\r\n\t\t\"filteredTextValues\": {},\r\n\t\t\"variableTypeMap\": {\r\n\t\t\t\"8170\": null,\r\n\t\t\t\"8200\": \"EXPERIMENTAL_DESIGN\",\r\n\t\t\t\"8201\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8230\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8240\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8250\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8255\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8263\": \"SELECTION_METHOD\",\r\n\t\t\t\"18000\": \"TRAIT\",\r\n\t\t\t\"18010\": \"TRAIT\",\r\n\t\t\t\"18100\": \"TRAIT\",\r\n\t\t\t\"100020\": \"TRAIT\",\r\n\t\t\t\"-2\": null\r\n\t\t}\r\n\t}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/testdata/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_datasetId}}/observation-units/observations/filter/count",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"testdata",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"observation-units",
										"observations",
										"filter",
										"count"
									]
								},
								"description": "POST ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/observation-units​/observations​ filter​/count"
							},
							"response": []
						},
						{
							"name": "Count filtered phenotype for all instances",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "62f46af4-843d-4e41-9345-63a86e653c72",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											" var jsonData = pm.response.json();",
											"pm.test(\"Check totalFilteredPhenotypes\", function () {",
											"    pm.expect(jsonData.totalFilteredPhenotypes).to.eql(40);",
											"});",
											"pm.test(\"Check totalFilteredPhenotypes\", function () {",
											"    pm.expect(jsonData.totalFilteredInstances).to.eql(2);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "3bb5be8f-4322-4ec0-82f4-d3d0ebcb0024",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"draftMode\": false,\r\n\t\"filter\": {\r\n\t\t\"byOutOfBound\": null,\r\n\t\t\"byMissing\": null,\r\n\t\t\"byOutOfSync\": null,\r\n\t\t\"byOverwritten\": null,\r\n\t\t\"variableId\": 100020,\r\n\t\t\"filterColumns\": [],\r\n\t\t\"filteredValues\": {},\r\n\t\t\"filteredTextValues\": {},\r\n\t\t\"variableTypeMap\": {\r\n\t\t\t\"8170\": null,\r\n\t\t\t\"8200\": \"EXPERIMENTAL_DESIGN\",\r\n\t\t\t\"8201\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8230\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8240\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8250\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8255\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8263\": \"SELECTION_METHOD\",\r\n\t\t\t\"18000\": \"TRAIT\",\r\n\t\t\t\"18010\": \"TRAIT\",\r\n\t\t\t\"18100\": \"TRAIT\",\r\n\t\t\t\"100020\": \"TRAIT\",\r\n\t\t\t\"-2\": null\r\n\t\t}\r\n\t}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/testdata/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_datasetId}}/observation-units/observations/filter/count",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"testdata",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"observation-units",
										"observations",
										"filter",
										"count"
									]
								},
								"description": "POST ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/observation-units​/observations​ filter​/count"
							},
							"response": []
						},
						{
							"name": "Count filtered phenotype with invalid crop",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "26c9c3d2-8208-4120-8c05-4eb7fdfded83",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Check error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Invalid crop \"+pm.environment.get(\"invalidCrop\")+\" for URL:/crops/\"+pm.environment.get(\"invalidCrop\")+\"/programs/\"+pm.environment.get(\"api_program_id\")+\"/studies/\"+pm.environment.get(\"studyId\")+\"/datasets/\"+pm.environment.get(\"study_plot_datasetId\")+\"/observation-units/observations/filter/count\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9075eb09-1b56-44cb-92d1-d81a94d10ae9",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"draftMode\": false,\r\n\t\"filter\": {\r\n\t\t\"byOutOfBound\": null,\r\n\t\t\"byMissing\": null,\r\n\t\t\"byOutOfSync\": null,\r\n\t\t\"byOverwritten\": null,\r\n\t\t\"variableId\": 100020,\r\n\t\t\"filterColumns\": [],\r\n\t\t\"filteredValues\": {},\r\n\t\t\"filteredTextValues\": {},\r\n\t\t\"variableTypeMap\": {\r\n\t\t\t\"8170\": null,\r\n\t\t\t\"8200\": \"EXPERIMENTAL_DESIGN\",\r\n\t\t\t\"8201\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8230\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8240\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8250\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8255\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8263\": \"SELECTION_METHOD\",\r\n\t\t\t\"18000\": \"TRAIT\",\r\n\t\t\t\"18010\": \"TRAIT\",\r\n\t\t\t\"18100\": \"TRAIT\",\r\n\t\t\t\"100020\": \"TRAIT\",\r\n\t\t\t\"-2\": null\r\n\t\t}\r\n\t}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{invalidCrop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_datasetId}}/observation-units/observations/filter/count",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{invalidCrop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"observation-units",
										"observations",
										"filter",
										"count"
									]
								},
								"description": "POST ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/observation-units​/observations​ filter​/count"
							},
							"response": []
						},
						{
							"name": "Count filtered phenotype with invalid program",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2e665561-a3bb-4d1b-ad54-4aff679ea54c",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Check error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Invalid program: invalid for crop: \"+pm.environment.get(\"crop\")+\" for service with path /crops/\"+pm.environment.get(\"crop\")+\"/programs/invalid/studies/\"+pm.environment.get(\"studyId\")+\"/datasets/\"+pm.environment.get(\"study_plot_datasetId\")+\"/observation-units/observations/filter/count\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "15650a1a-a569-4760-a990-04e407b4abac",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"draftMode\": false,\r\n\t\"filter\": {\r\n\t\t\"byOutOfBound\": null,\r\n\t\t\"byMissing\": null,\r\n\t\t\"byOutOfSync\": null,\r\n\t\t\"byOverwritten\": null,\r\n\t\t\"variableId\": 100020,\r\n\t\t\"filterColumns\": [],\r\n\t\t\"filteredValues\": {},\r\n\t\t\"filteredTextValues\": {},\r\n\t\t\"variableTypeMap\": {\r\n\t\t\t\"8170\": null,\r\n\t\t\t\"8200\": \"EXPERIMENTAL_DESIGN\",\r\n\t\t\t\"8201\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8230\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8240\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8250\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8255\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8263\": \"SELECTION_METHOD\",\r\n\t\t\t\"18000\": \"TRAIT\",\r\n\t\t\t\"18010\": \"TRAIT\",\r\n\t\t\t\"18100\": \"TRAIT\",\r\n\t\t\t\"100020\": \"TRAIT\",\r\n\t\t\t\"-2\": null\r\n\t\t}\r\n\t}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/invalid/studies/{{studyId}}/datasets/{{study_plot_datasetId}}/observation-units/observations/filter/count",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"invalid",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"observation-units",
										"observations",
										"filter",
										"count"
									]
								},
								"description": "POST ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/observation-units​/observations​ filter​/count"
							},
							"response": []
						},
						{
							"name": "Count filtered phenotype with non-existing studyId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "13f08baa-b489-4696-88fa-862d65c152cf",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"pm.test(\"Check error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Study does not exist\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "69d3e48f-356b-414d-a23e-67687a56fbc5",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"draftMode\": false,\r\n\t\"filter\": {\r\n\t\t\"byOutOfBound\": null,\r\n\t\t\"byMissing\": null,\r\n\t\t\"byOutOfSync\": null,\r\n\t\t\"byOverwritten\": null,\r\n\t\t\"variableId\": 100020,\r\n\t\t\"filterColumns\": [],\r\n\t\t\"filteredValues\": {},\r\n\t\t\"filteredTextValues\": {},\r\n\t\t\"variableTypeMap\": {\r\n\t\t\t\"8170\": null,\r\n\t\t\t\"8200\": \"EXPERIMENTAL_DESIGN\",\r\n\t\t\t\"8201\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8230\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8240\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8250\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8255\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8263\": \"SELECTION_METHOD\",\r\n\t\t\t\"18000\": \"TRAIT\",\r\n\t\t\t\"18010\": \"TRAIT\",\r\n\t\t\t\"18100\": \"TRAIT\",\r\n\t\t\t\"100020\": \"TRAIT\",\r\n\t\t\t\"-2\": null\r\n\t\t}\r\n\t}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/testdata/programs/{{api_program_id}}/studies/{{non_existing_study_id}}/datasets/{{study_plot_datasetId}}/observation-units/observations/filter/count",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"testdata",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{non_existing_study_id}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"observation-units",
										"observations",
										"filter",
										"count"
									]
								},
								"description": "POST ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/observation-units​/observations​ filter​/count"
							},
							"response": []
						},
						{
							"name": "Count filtered phenotype with non-existing datasetId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ce809799-1ab0-4f42-801b-0ce649662a31",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"pm.test(\"Check error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Dataset does not exist\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9b15a89e-a66d-4e84-9760-d6c0bda740f9",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"draftMode\": false,\r\n\t\"filter\": {\r\n\t\t\"byOutOfBound\": null,\r\n\t\t\"byMissing\": null,\r\n\t\t\"byOutOfSync\": null,\r\n\t\t\"byOverwritten\": null,\r\n\t\t\"variableId\": 100020,\r\n\t\t\"filterColumns\": [],\r\n\t\t\"filteredValues\": {},\r\n\t\t\"filteredTextValues\": {},\r\n\t\t\"variableTypeMap\": {\r\n\t\t\t\"8170\": null,\r\n\t\t\t\"8200\": \"EXPERIMENTAL_DESIGN\",\r\n\t\t\t\"8201\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8230\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8240\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8250\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8255\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8263\": \"SELECTION_METHOD\",\r\n\t\t\t\"18000\": \"TRAIT\",\r\n\t\t\t\"18010\": \"TRAIT\",\r\n\t\t\t\"18100\": \"TRAIT\",\r\n\t\t\t\"100020\": \"TRAIT\",\r\n\t\t\t\"-2\": null\r\n\t\t}\r\n\t}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/testdata/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{non_existing_dataset_id}}/observation-units/observations/filter/count",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"testdata",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{non_existing_dataset_id}}",
										"observation-units",
										"observations",
										"filter",
										"count"
									]
								},
								"description": "POST ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/observation-units​/observations​ filter​/count"
							},
							"response": []
						},
						{
							"name": "Count filtered phenotype with datasetId that does not belong to the study",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "78a1dbe5-727d-4a46-a624-f306c49d25e4",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Check error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Specified dataset \"+pm.environment.get(\"study_plot_dataset_id_noPhenoCount\")+\" does not belong to the study \"+pm.environment.get(\"studyId\"));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1257fbe5-51f1-4b5a-bb60-ac49ee4bb54a",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"draftMode\": false,\r\n\t\"filter\": {\r\n\t\t\"byOutOfBound\": null,\r\n\t\t\"byMissing\": null,\r\n\t\t\"byOutOfSync\": null,\r\n\t\t\"byOverwritten\": null,\r\n\t\t\"variableId\": 100020,\r\n\t\t\"filterColumns\": [],\r\n\t\t\"filteredValues\": {},\r\n\t\t\"filteredTextValues\": {},\r\n\t\t\"variableTypeMap\": {\r\n\t\t\t\"8170\": null,\r\n\t\t\t\"8200\": \"EXPERIMENTAL_DESIGN\",\r\n\t\t\t\"8201\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8230\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8240\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8250\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8255\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8263\": \"SELECTION_METHOD\",\r\n\t\t\t\"18000\": \"TRAIT\",\r\n\t\t\t\"18010\": \"TRAIT\",\r\n\t\t\t\"18100\": \"TRAIT\",\r\n\t\t\t\"100020\": \"TRAIT\",\r\n\t\t\t\"-2\": null\r\n\t\t}\r\n\t}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/testdata/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_dataset_id_noPhenoCount}}/observation-units/observations/filter/count",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"testdata",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_dataset_id_noPhenoCount}}",
										"observation-units",
										"observations",
										"filter",
										"count"
									]
								},
								"description": "POST ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/observation-units​/observations​ filter​/count"
							},
							"response": []
						},
						{
							"name": "Set value for filtered phenotype",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ed7715a0-0b1d-4ee3-9556-290bb283ba96",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "862ce4ac-276e-4b43-b288-8582ae56177d",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"newValue\": \"2\",\r\n\t\"newCategoricalValueId\": null,\r\n\t\"observationUnitsSearchDTO\": {\r\n\t\t\"instanceId\": 1,\r\n\t\t\"draftMode\": false,\r\n\t\t\"filter\": {\r\n\t\t\t\"byOutOfBound\": null,\r\n\t\t\t\"byMissing\": null,\r\n\t\t\t\"byOutOfSync\": null,\r\n\t\t\t\"byOverwritten\": null,\r\n\t\t\t\"variableId\": 100020,\r\n\t\t\t\"filterColumns\": [],\r\n\t\t\t\"filteredValues\": {},\r\n\t\t\t\"filteredTextValues\": {},\r\n\t\t\t\"variableTypeMap\": {\r\n\t\t\t\t\"8170\": null,\r\n\t\t\t\t\"8200\": \"EXPERIMENTAL_DESIGN\",\r\n\t\t\t\t\"8201\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\t\"8230\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\t\"8240\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\t\"8250\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\t\"8255\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\t\"8263\": \"SELECTION_METHOD\",\r\n\t\t\t\t\"18000\": \"TRAIT\",\r\n\t\t\t\t\"18010\": \"TRAIT\",\r\n\t\t\t\t\"18100\": \"TRAIT\",\r\n\t\t\t\t\"100020\": \"TRAIT\",\r\n\t\t\t\t\"-2\": null\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_datasetId}}/observation-units/filter/set-value",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"observation-units",
										"filter",
										"set-value"
									]
								},
								"description": "POST ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/observation-units​/observations​ filter​/count"
							},
							"response": []
						},
						{
							"name": "Set value for filtered phenotype with invalid crop",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "68c576ef-b039-47c0-9825-723710e77fe9",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Check error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Invalid crop \"+pm.environment.get(\"invalidCrop\")+\" for URL:/crops/\"+pm.environment.get(\"invalidCrop\")+\"/programs/\"+pm.environment.get(\"api_program_id\")+\"/studies/\"+pm.environment.get(\"studyId\")+\"/datasets/\"+pm.environment.get(\"study_plot_datasetId\")+\"/observation-units/filter/set-value\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a8f1329d-bdc4-44c4-aaa2-54657b2216d6",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"newValue\": \"2\",\r\n\t\"newCategoricalValueId\": null,\r\n\t\"observationUnitsSearchDTO\": {\r\n\t\t\"instanceId\": 1,\r\n\t\t\"draftMode\": false,\r\n\t\t\"filter\": {\r\n\t\t\t\"byOutOfBound\": null,\r\n\t\t\t\"byMissing\": null,\r\n\t\t\t\"byOutOfSync\": null,\r\n\t\t\t\"byOverwritten\": null,\r\n\t\t\t\"variableId\": 100020,\r\n\t\t\t\"filterColumns\": [],\r\n\t\t\t\"filteredValues\": {},\r\n\t\t\t\"filteredTextValues\": {},\r\n\t\t\t\"variableTypeMap\": {\r\n\t\t\t\t\"8170\": null,\r\n\t\t\t\t\"8200\": \"EXPERIMENTAL_DESIGN\",\r\n\t\t\t\t\"8201\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\t\"8230\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\t\"8240\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\t\"8250\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\t\"8255\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\t\"8263\": \"SELECTION_METHOD\",\r\n\t\t\t\t\"18000\": \"TRAIT\",\r\n\t\t\t\t\"18010\": \"TRAIT\",\r\n\t\t\t\t\"18100\": \"TRAIT\",\r\n\t\t\t\t\"100020\": \"TRAIT\",\r\n\t\t\t\t\"-2\": null\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{invalidCrop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_datasetId}}/observation-units/filter/set-value",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{invalidCrop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"observation-units",
										"filter",
										"set-value"
									]
								},
								"description": "POST ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/observation-units​/observations​ filter​/count"
							},
							"response": []
						},
						{
							"name": "Set value for filtered phenotype with invalid program",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "97c604fe-97e4-41ce-b8f6-1014c5f2a1c4",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Check error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Invalid program: invalid for crop: \"+pm.environment.get(\"crop\")+\" for service with path /crops/testdata/programs/invalid/studies/3009/datasets/3011/observation-units/filter/set-value\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "72cbe6e9-b8cd-466d-a242-b98f15d4fd4c",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"newValue\": \"2\",\r\n\t\"newCategoricalValueId\": null,\r\n\t\"observationUnitsSearchDTO\": {\r\n\t\t\"instanceId\": 1,\r\n\t\t\"draftMode\": false,\r\n\t\t\"filter\": {\r\n\t\t\t\"byOutOfBound\": null,\r\n\t\t\t\"byMissing\": null,\r\n\t\t\t\"byOutOfSync\": null,\r\n\t\t\t\"byOverwritten\": null,\r\n\t\t\t\"variableId\": 100020,\r\n\t\t\t\"filterColumns\": [],\r\n\t\t\t\"filteredValues\": {},\r\n\t\t\t\"filteredTextValues\": {},\r\n\t\t\t\"variableTypeMap\": {\r\n\t\t\t\t\"8170\": null,\r\n\t\t\t\t\"8200\": \"EXPERIMENTAL_DESIGN\",\r\n\t\t\t\t\"8201\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\t\"8230\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\t\"8240\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\t\"8250\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\t\"8255\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\t\"8263\": \"SELECTION_METHOD\",\r\n\t\t\t\t\"18000\": \"TRAIT\",\r\n\t\t\t\t\"18010\": \"TRAIT\",\r\n\t\t\t\t\"18100\": \"TRAIT\",\r\n\t\t\t\t\"100020\": \"TRAIT\",\r\n\t\t\t\t\"-2\": null\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/invalid/studies/{{studyId}}/datasets/{{study_plot_datasetId}}/observation-units/filter/set-value",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"invalid",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"observation-units",
										"filter",
										"set-value"
									]
								},
								"description": "POST ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/observation-units​/observations​ filter​/count"
							},
							"response": []
						},
						{
							"name": "Set value for filtered phenotype with non-existing studyId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "79a31c2d-f538-4f8e-b4de-d8da4086e505",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"pm.test(\"Check error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Study does not exist\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "6b2142f6-5171-455f-bcf4-c95b42102973",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"newValue\": \"2\",\r\n\t\"newCategoricalValueId\": null,\r\n\t\"observationUnitsSearchDTO\": {\r\n\t\t\"instanceId\": 1,\r\n\t\t\"draftMode\": false,\r\n\t\t\"filter\": {\r\n\t\t\t\"byOutOfBound\": null,\r\n\t\t\t\"byMissing\": null,\r\n\t\t\t\"byOutOfSync\": null,\r\n\t\t\t\"byOverwritten\": null,\r\n\t\t\t\"variableId\": 100020,\r\n\t\t\t\"filterColumns\": [],\r\n\t\t\t\"filteredValues\": {},\r\n\t\t\t\"filteredTextValues\": {},\r\n\t\t\t\"variableTypeMap\": {\r\n\t\t\t\t\"8170\": null,\r\n\t\t\t\t\"8200\": \"EXPERIMENTAL_DESIGN\",\r\n\t\t\t\t\"8201\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\t\"8230\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\t\"8240\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\t\"8250\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\t\"8255\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\t\"8263\": \"SELECTION_METHOD\",\r\n\t\t\t\t\"18000\": \"TRAIT\",\r\n\t\t\t\t\"18010\": \"TRAIT\",\r\n\t\t\t\t\"18100\": \"TRAIT\",\r\n\t\t\t\t\"100020\": \"TRAIT\",\r\n\t\t\t\t\"-2\": null\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{non_existing_study_id}}/datasets/{{study_plot_datasetId}}/observation-units/filter/set-value",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{non_existing_study_id}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"observation-units",
										"filter",
										"set-value"
									]
								},
								"description": "POST ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/observation-units​/observations​ filter​/count"
							},
							"response": []
						},
						{
							"name": "Set value for filtered phenotype with non-existing datasetId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "37f3e6d3-deb8-491a-b0df-38c47ab3d7a4",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"pm.test(\"Check error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Dataset does not exist\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0807ba95-003b-4e68-b211-532a6888b7bb",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"newValue\": \"2\",\r\n\t\"newCategoricalValueId\": null,\r\n\t\"observationUnitsSearchDTO\": {\r\n\t\t\"instanceId\": 1,\r\n\t\t\"draftMode\": false,\r\n\t\t\"filter\": {\r\n\t\t\t\"byOutOfBound\": null,\r\n\t\t\t\"byMissing\": null,\r\n\t\t\t\"byOutOfSync\": null,\r\n\t\t\t\"byOverwritten\": null,\r\n\t\t\t\"variableId\": 100020,\r\n\t\t\t\"filterColumns\": [],\r\n\t\t\t\"filteredValues\": {},\r\n\t\t\t\"filteredTextValues\": {},\r\n\t\t\t\"variableTypeMap\": {\r\n\t\t\t\t\"8170\": null,\r\n\t\t\t\t\"8200\": \"EXPERIMENTAL_DESIGN\",\r\n\t\t\t\t\"8201\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\t\"8230\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\t\"8240\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\t\"8250\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\t\"8255\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\t\"8263\": \"SELECTION_METHOD\",\r\n\t\t\t\t\"18000\": \"TRAIT\",\r\n\t\t\t\t\"18010\": \"TRAIT\",\r\n\t\t\t\t\"18100\": \"TRAIT\",\r\n\t\t\t\t\"100020\": \"TRAIT\",\r\n\t\t\t\t\"-2\": null\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{non_existing_dataset_id}}/observation-units/filter/set-value",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{non_existing_dataset_id}}",
										"observation-units",
										"filter",
										"set-value"
									]
								},
								"description": "POST ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/observation-units​/observations​ filter​/count"
							},
							"response": []
						},
						{
							"name": "Set value for filtered phenotype with datasetId that does not belong to the study",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "63959e83-69a5-4c0f-a2bd-99247563a675",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Check error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Specified dataset \"+pm.environment.get(\"study_plot_dataset_id_noPhenoCount\")+\" does not belong to the study \"+pm.environment.get(\"studyId\"));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9b1e2769-d58f-44ac-9b51-14528f6665a1",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"newValue\": \"2\",\r\n\t\"newCategoricalValueId\": null,\r\n\t\"observationUnitsSearchDTO\": {\r\n\t\t\"instanceId\": 1,\r\n\t\t\"draftMode\": false,\r\n\t\t\"filter\": {\r\n\t\t\t\"byOutOfBound\": null,\r\n\t\t\t\"byMissing\": null,\r\n\t\t\t\"byOutOfSync\": null,\r\n\t\t\t\"byOverwritten\": null,\r\n\t\t\t\"variableId\": 100020,\r\n\t\t\t\"filterColumns\": [],\r\n\t\t\t\"filteredValues\": {},\r\n\t\t\t\"filteredTextValues\": {},\r\n\t\t\t\"variableTypeMap\": {\r\n\t\t\t\t\"8170\": null,\r\n\t\t\t\t\"8200\": \"EXPERIMENTAL_DESIGN\",\r\n\t\t\t\t\"8201\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\t\"8230\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\t\"8240\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\t\"8250\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\t\"8255\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\t\"8263\": \"SELECTION_METHOD\",\r\n\t\t\t\t\"18000\": \"TRAIT\",\r\n\t\t\t\t\"18010\": \"TRAIT\",\r\n\t\t\t\t\"18100\": \"TRAIT\",\r\n\t\t\t\t\"100020\": \"TRAIT\",\r\n\t\t\t\t\"-2\": null\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_dataset_id_noPhenoCount}}/observation-units/filter/set-value",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_dataset_id_noPhenoCount}}",
										"observation-units",
										"filter",
										"set-value"
									]
								},
								"description": "POST ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/observation-units​/observations​ filter​/count"
							},
							"response": []
						},
						{
							"name": "Set invalid value for filtered phenotype",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7f486dc4-9ae0-492d-b0d5-768cced047ad",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Check error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Invalid value.\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b8e0f19f-a44f-4f1e-b436-f4312f8baf69",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"newValue\": \"invalidValue\",\r\n\t\"newCategoricalValueId\": null,\r\n\t\"observationUnitsSearchDTO\": {\r\n\t\t\"instanceId\": 1,\r\n\t\t\"draftMode\": false,\r\n\t\t\"filter\": {\r\n\t\t\t\"byOutOfBound\": null,\r\n\t\t\t\"byMissing\": null,\r\n\t\t\t\"byOutOfSync\": null,\r\n\t\t\t\"byOverwritten\": null,\r\n\t\t\t\"variableId\": 100020,\r\n\t\t\t\"filterColumns\": [],\r\n\t\t\t\"filteredValues\": {},\r\n\t\t\t\"filteredTextValues\": {},\r\n\t\t\t\"variableTypeMap\": {\r\n\t\t\t\t\"8170\": null,\r\n\t\t\t\t\"8200\": \"EXPERIMENTAL_DESIGN\",\r\n\t\t\t\t\"8201\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\t\"8230\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\t\"8240\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\t\"8250\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\t\"8255\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\t\"8263\": \"SELECTION_METHOD\",\r\n\t\t\t\t\"18000\": \"TRAIT\",\r\n\t\t\t\t\"18010\": \"TRAIT\",\r\n\t\t\t\t\"18100\": \"TRAIT\",\r\n\t\t\t\t\"100020\": \"TRAIT\",\r\n\t\t\t\t\"-2\": null\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_datasetId}}/observation-units/filter/set-value",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"observation-units",
										"filter",
										"set-value"
									]
								},
								"description": "POST ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/observation-units​/observations​ filter​/count"
							},
							"response": []
						},
						{
							"name": "Retrieve observation units of after updating filtered phenotype",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b2c26c97-cd7a-4606-a6e9-956a0fd97037",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Check records filtered \", function () {",
											"    pm.expect(jsonData.recordsFiltered).to.eql(20);",
											"});",
											"pm.test(\"Check records total\", function () {",
											"    pm.expect(jsonData.recordsFiltered).to.eql(20);",
											"});",
											"",
											"//Check data at index 0",
											"",
											"var index = 0;",
											"",
											"var observationUnitIds = [];",
											"var observationIds = [];",
											"",
											"",
											"for (var i = 0; i < jsonData.data.length; i++){",
											"  var selectedData = jsonData.data[i];",
											"  observationUnitIds[i] = selectedData.observationUnitId;",
											"  observationIds[i] = selectedData.variables.InputVariable.observationId",
											"  console.log(observationIds[i]);",
											"}",
											"",
											"pm.environment.unset(\"observationUnitIds\");",
											"pm.environment.unset(\"observationIds\");",
											"pm.environment.set(\"observationUnitIds\", JSON.stringify(observationUnitIds));",
											"pm.environment.set(\"observationIds\", JSON.stringify(observationIds));",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "53670972-4e6b-4c1d-9a7c-4d8799f35529",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"draw\": 1,\r\n\t\"sortedRequest\": {\r\n\t\t\"pageSize\": 50,\r\n\t\t\"pageNumber\": 1,\r\n\t\t\"sortBy\": 8200,\r\n\t\t\"sortOrder\": \"asc\"\r\n\t},\r\n\t\"instanceId\": 1,\r\n\t\"draftMode\": false,\r\n\t\"filter\": {\r\n\t\t\"byOutOfBound\": null,\r\n\t\t\"byMissing\": null,\r\n\t\t\"byOutOfSync\": null,\r\n\t\t\"byOverwritten\": null,\r\n\t\t\"variableId\": null,\r\n\t\t\"filterColumns\": [],\r\n\t\t\"filteredValues\": {},\r\n\t\t\"filteredTextValues\": {},\r\n\t\t\"variableTypeMap\": {\r\n\t\t\t\"8170\": null,\r\n\t\t\t\"8200\": \"EXPERIMENTAL_DESIGN\",\r\n\t\t\t\"8201\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8230\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8240\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8250\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8255\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8263\": \"SELECTION_METHOD\",\r\n\t\t\t\"18000\": \"TRAIT\",\r\n\t\t\t\"18010\": \"TRAIT\",\r\n\t\t\t\"18100\": \"TRAIT\",\r\n\t\t\t\"100020\": \"TRAIT\"\r\n\t\t}\r\n\t}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_datasetId}}/observationUnits/table",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"observationUnits",
										"table"
									]
								},
								"description": "POST /crops/{cropName}/programs​/{programUUID}​/studies/{studyId}/datasets/{datasetId}/observation-units/drafts/acceptance"
							},
							"response": []
						},
						{
							"name": "Delete observation of upated filtered phenotypes",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d6bc7d08-a12d-4f58-a6c0-2a6b5ea7bbfe",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var observationUnitIds = [];",
											"observationUnitIds = JSON.parse(pm.environment.get(\"observationUnitIds\"));",
											"var observationIds = [];",
											"observationIds = JSON.parse(pm.environment.get(\"observationIds\"));",
											"",
											"if(observationUnitIds.length && observationIds.length > 0){",
											"postman.setNextRequest(\"Delete observation\");",
											"}else{",
											"    postman.setNextRequest(null);",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "292a3f9d-bec5-4838-a697-906eadd5d40a",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}\r",
											"\r",
											"var observationUnitIds = [];\r",
											"observationUnitIds = JSON.parse(pm.environment.get(\"observationUnitIds\"));\r",
											"var observationIds = [];\r",
											"observationIds = JSON.parse(pm.environment.get(\"observationIds\"));\r",
											"console.log(observationUnitIds.length);\r",
											"var current_observationUnitId = observationUnitIds.shift();\r",
											"var current_observationId = observationIds.shift();\r",
											"pm.environment.set(\"observationUnitId\", current_observationUnitId);\r",
											"pm.environment.set(\"observationId\", current_observationId);\r",
											"pm.environment.set(\"observationUnitIds\", JSON.stringify(observationUnitIds));\r",
											"pm.environment.set(\"observationIds\", JSON.stringify(observationIds));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"processWarnings\": true,\r\n\t\"data\": [\r\n\t\t[\r\n\t\t\t\"TRIAL_INSTANCE\",\r\n\t\t\t\"PI_NAME\",\r\n\t\t\t\"EXPT_DESIGN\",\r\n\t\t\t\"LOCATION_ID\",\r\n\t\t\t\"LOCATION_NAME\",\r\n\t\t\t\"Crop_season_Code\",\r\n\t\t\t\"ENTRY_TYPE\",\r\n\t\t\t\"GID\",\r\n\t\t\t\"DESIGNATION\",\r\n\t\t\t\"ENTRY_NO\",\r\n\t\t\t\"OBS_UNIT_ID\",\r\n\t\t\t\"PLOT_NO\",\r\n\t\t\t\"WeedPressure_number\",\r\n\t\t\t\"Grain_yield\",\r\n\t\t\t\"Biomas_yield\",\r\n\t\t\t\"InputVariable\",\r\n\t\t\t\"NPSEL\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"PKWDPtLOzD8Sz\",\r\n\t\t\t\"1\",\r\n\t\t\t\"21\",\r\n\t\t\t\"23\",\r\n\t\t\t\"40\",\r\n\t\t\t\"338\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"PKWDP6ME6bt1l\",\r\n\t\t\t\"2\",\r\n\t\t\t\"15\",\r\n\t\t\t\"12\",\r\n\t\t\t\"45\",\r\n\t\t\t\"285\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"PKWDPe2za6TM7\",\r\n\t\t\t\"3\",\r\n\t\t\t\"12\",\r\n\t\t\t\"41\",\r\n\t\t\t\"32\",\r\n\t\t\t\"176\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"PKWDPEV6LPs1N\",\r\n\t\t\t\"4\",\r\n\t\t\t\"46\",\r\n\t\t\t\"49\",\r\n\t\t\t\"33\",\r\n\t\t\t\"488\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"PKWDPU27n9e9L\",\r\n\t\t\t\"5\",\r\n\t\t\t\"33\",\r\n\t\t\t\"41\",\r\n\t\t\t\"28\",\r\n\t\t\t\"397\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"PKWDPmpZgUu6S\",\r\n\t\t\t\"6\",\r\n\t\t\t\"48\",\r\n\t\t\t\"17\",\r\n\t\t\t\"35\",\r\n\t\t\t\"463\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"PKWDP0M9lGBzz\",\r\n\t\t\t\"7\",\r\n\t\t\t\"34\",\r\n\t\t\t\"16\",\r\n\t\t\t\"49\",\r\n\t\t\t\"105\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"PKWDPsCKr80ks\",\r\n\t\t\t\"8\",\r\n\t\t\t\"17\",\r\n\t\t\t\"28\",\r\n\t\t\t\"15\",\r\n\t\t\t\"379\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"PKWDPDotBpZ1y\",\r\n\t\t\t\"9\",\r\n\t\t\t\"45\",\r\n\t\t\t\"28\",\r\n\t\t\t\"49\",\r\n\t\t\t\"424\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"PKWDPCYuyqdql\",\r\n\t\t\t\"10\",\r\n\t\t\t\"41\",\r\n\t\t\t\"26\",\r\n\t\t\t\"10\",\r\n\t\t\t\"188\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"PKWDP0fPOkMaC\",\r\n\t\t\t\"11\",\r\n\t\t\t\"39\",\r\n\t\t\t\"20\",\r\n\t\t\t\"31\",\r\n\t\t\t\"471\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"PKWDPGN6nYdv2\",\r\n\t\t\t\"12\",\r\n\t\t\t\"48\",\r\n\t\t\t\"46\",\r\n\t\t\t\"12\",\r\n\t\t\t\"395\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"PKWDPZ19QRNrq\",\r\n\t\t\t\"13\",\r\n\t\t\t\"24\",\r\n\t\t\t\"27\",\r\n\t\t\t\"17\",\r\n\t\t\t\"340\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"PKWDPPh1TNHCh\",\r\n\t\t\t\"14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"36\",\r\n\t\t\t\"13\",\r\n\t\t\t\"299\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"PKWDPH6Q51k29\",\r\n\t\t\t\"15\",\r\n\t\t\t\"37\",\r\n\t\t\t\"20\",\r\n\t\t\t\"15\",\r\n\t\t\t\"408\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"PKWDP2mpwUmS5\",\r\n\t\t\t\"16\",\r\n\t\t\t\"36\",\r\n\t\t\t\"40\",\r\n\t\t\t\"50\",\r\n\t\t\t\"472\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"PKWDP07BrGxf2\",\r\n\t\t\t\"17\",\r\n\t\t\t\"25\",\r\n\t\t\t\"29\",\r\n\t\t\t\"49\",\r\n\t\t\t\"138\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"PKWDPROG6tAJg\",\r\n\t\t\t\"18\",\r\n\t\t\t\"45\",\r\n\t\t\t\"12\",\r\n\t\t\t\"32\",\r\n\t\t\t\"356\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"PKWDPUWYGDKwm\",\r\n\t\t\t\"19\",\r\n\t\t\t\"36\",\r\n\t\t\t\"44\",\r\n\t\t\t\"37\",\r\n\t\t\t\"423\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"PKWDPVGUhe5T1\",\r\n\t\t\t\"20\",\r\n\t\t\t\"49\",\r\n\t\t\t\"49\",\r\n\t\t\t\"50\",\r\n\t\t\t\"193\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"dc6a207b-b4eb-42d5-a5b7-b1262193e961\",\r\n\t\t\t\"1\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"125\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"f425bdec-fdc1-41cb-8d4b-19179d9ed7a9\",\r\n\t\t\t\"2\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"337\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"9fe3ff35-a57f-4dc2-b682-d69881ebd3e8\",\r\n\t\t\t\"3\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"317\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"48851c5a-132f-4df2-8139-1b0f8ba4ea13\",\r\n\t\t\t\"4\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"497\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"97b9bbb8-e390-4c6c-a688-3676c7a322a1\",\r\n\t\t\t\"5\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"496\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"5d53e82d-ea2c-42de-8255-5150462cc9e2\",\r\n\t\t\t\"6\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"114\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"bab7f29e-f1ec-4d0a-91a3-08cc0121fffc\",\r\n\t\t\t\"7\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"102\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"6117a4e4-2d58-4020-a047-7d0f568379df\",\r\n\t\t\t\"8\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"479\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"41c3a00c-c372-442c-b87c-b7329e1457ac\",\r\n\t\t\t\"9\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"140\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"0542e1ee-2535-44f7-bf41-fb4787f2de52\",\r\n\t\t\t\"10\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"280\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"02ccc497-fb94-4dcc-83dd-21f5db43f43e\",\r\n\t\t\t\"11\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"437\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"05883cec-d339-4cd0-b763-67f7d9d543ff\",\r\n\t\t\t\"12\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"354\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"74a8d502-8b17-4d96-8741-b38d294ae601\",\r\n\t\t\t\"13\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"430\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"72476b15-4090-46bc-be2f-e4e86171af50\",\r\n\t\t\t\"14\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"478\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"980a592b-bf45-4cbe-8ede-2c0d1d6302c4\",\r\n\t\t\t\"15\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"462\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"e50aeb0a-42ef-45f6-a247-e426f0cbd39c\",\r\n\t\t\t\"16\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"271\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"b7440ad5-4836-44e8-96ba-687e1c7fb0bb\",\r\n\t\t\t\"17\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"479\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"a0b745fd-d1de-45d0-9e86-42021ce43d43\",\r\n\t\t\t\"18\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"305\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"4fca59a2-84c1-40d2-b5a7-86ab957f00cc\",\r\n\t\t\t\"19\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"372\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"9129d101-c4ac-43cf-a818-079d4365c2d5\",\r\n\t\t\t\"20\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"459\",\r\n\t\t\t\"\"\r\n\t\t]\r\n\t],\r\n\t\"draftMode\": true\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_datasetId}}/observationUnits/{{observationUnitId}}/observations/{{observationId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"observationUnits",
										"{{observationUnitId}}",
										"observations",
										"{{observationId}}"
									]
								},
								"description": "DELETE ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/observationUnits​/{observationUnitId}​/observations​/{observationId}"
							},
							"response": []
						},
						{
							"name": "Retrieve observation units of after updating filtered phenotype Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "498f3238-2c18-4328-9c89-6370ebcb225a",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Check records filtered \", function () {",
											"    pm.expect(jsonData.recordsFiltered).to.eql(80);",
											"});",
											"pm.test(\"Check records total\", function () {",
											"    pm.expect(jsonData.recordsFiltered).to.eql(80);",
											"});",
											"",
											"//Check data at index 0",
											"",
											"var index = 0;",
											"",
											"var observationUnitIds = [];",
											"var observationIds = [];",
											"",
											"",
											"for (var i = 0; i < jsonData.data.length; i++){",
											"  var selectedData = jsonData.data[i];",
											"  observationUnitIds[i] = selectedData.observationUnitId;",
											"  observationIds[i] = selectedData.variables.PestPressure_0_9.observationId",
											"  console.log(observationIds[i]);",
											"}",
											"",
											"pm.environment.unset(\"observationUnitIds\");",
											"pm.environment.unset(\"observationIds\");",
											"pm.environment.set(\"observationUnitIds\", JSON.stringify(observationUnitIds));",
											"pm.environment.set(\"observationIds\", JSON.stringify(observationIds));",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ebc00b26-8f9b-4fe5-aceb-e15b4ca18e63",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"draw\": 1,\r\n\t\"sortedRequest\": {\r\n\t\t\"pageSize\": 50,\r\n\t\t\"pageNumber\": 1,\r\n\t\t\"sortBy\": 8200,\r\n\t\t\"sortOrder\": \"asc\"\r\n\t},\r\n\t\"instanceId\": 1,\r\n\t\"draftMode\": false,\r\n\t\"filter\": {\r\n\t\t\"byOutOfBound\": null,\r\n\t\t\"byMissing\": null,\r\n\t\t\"byOutOfSync\": null,\r\n\t\t\"byOverwritten\": null,\r\n\t\t\"variableId\": null,\r\n\t\t\"filterColumns\": [],\r\n\t\t\"filteredValues\": {},\r\n\t\t\"filteredTextValues\": {},\r\n\t\t\"variableTypeMap\": {\r\n\t\t\t\"8170\": null,\r\n\t\t\t\"8200\": \"EXPERIMENTAL_DESIGN\",\r\n\t\t\t\"8201\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8207\": \"OBSERVATION_UNIT\",\r\n\t\t\t\"8230\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8240\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8250\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8255\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"18010\": \"TRAIT\",\r\n\t\t\t\"18090\": \"TRAIT\"\r\n\t\t}\r\n\t}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_subobs2_datasetId}}/observationUnits/table",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_subobs2_datasetId}}",
										"observationUnits",
										"table"
									]
								},
								"description": "POST /crops/{cropName}/programs​/{programUUID}​/studies/{studyId}/datasets/{datasetId}/observation-units/drafts/acceptance"
							},
							"response": []
						},
						{
							"name": "Delete observation of catgorical variable in subobs",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ef498b65-402e-4bc1-aa7c-f6a2f17e1931",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var observationUnitIds = [];",
											"observationUnitIds = JSON.parse(pm.environment.get(\"observationUnitIds\"));",
											"var observationIds = [];",
											"observationIds = JSON.parse(pm.environment.get(\"observationIds\"));",
											"",
											"if(observationUnitIds.length && observationIds.length > 0){",
											"postman.setNextRequest(\"Delete observation of catgorical variable in subobs\");",
											"}else{",
											"    postman.setNextRequest(null);",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f30341f8-192d-41be-b3c9-eeaf12eb2105",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}\r",
											"\r",
											"var observationUnitIds = [];\r",
											"observationUnitIds = JSON.parse(pm.environment.get(\"observationUnitIds\"));\r",
											"var observationIds = [];\r",
											"observationIds = JSON.parse(pm.environment.get(\"observationIds\"));\r",
											"console.log(observationUnitIds.length);\r",
											"var current_observationUnitId = observationUnitIds.shift();\r",
											"var current_observationId = observationIds.shift();\r",
											"pm.environment.set(\"observationUnitId\", current_observationUnitId);\r",
											"pm.environment.set(\"observationId\", current_observationId);\r",
											"pm.environment.set(\"observationUnitIds\", JSON.stringify(observationUnitIds));\r",
											"pm.environment.set(\"observationIds\", JSON.stringify(observationIds));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"processWarnings\": true,\r\n\t\"data\": [\r\n\t\t[\r\n\t\t\t\"TRIAL_INSTANCE\",\r\n\t\t\t\"PI_NAME\",\r\n\t\t\t\"EXPT_DESIGN\",\r\n\t\t\t\"LOCATION_ID\",\r\n\t\t\t\"LOCATION_NAME\",\r\n\t\t\t\"Crop_season_Code\",\r\n\t\t\t\"ENTRY_TYPE\",\r\n\t\t\t\"GID\",\r\n\t\t\t\"DESIGNATION\",\r\n\t\t\t\"ENTRY_NO\",\r\n\t\t\t\"OBS_UNIT_ID\",\r\n\t\t\t\"PLOT_NO\",\r\n\t\t\t\"WeedPressure_number\",\r\n\t\t\t\"Grain_yield\",\r\n\t\t\t\"Biomas_yield\",\r\n\t\t\t\"InputVariable\",\r\n\t\t\t\"NPSEL\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"PKWDPtLOzD8Sz\",\r\n\t\t\t\"1\",\r\n\t\t\t\"21\",\r\n\t\t\t\"23\",\r\n\t\t\t\"40\",\r\n\t\t\t\"338\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"PKWDP6ME6bt1l\",\r\n\t\t\t\"2\",\r\n\t\t\t\"15\",\r\n\t\t\t\"12\",\r\n\t\t\t\"45\",\r\n\t\t\t\"285\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"PKWDPe2za6TM7\",\r\n\t\t\t\"3\",\r\n\t\t\t\"12\",\r\n\t\t\t\"41\",\r\n\t\t\t\"32\",\r\n\t\t\t\"176\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"PKWDPEV6LPs1N\",\r\n\t\t\t\"4\",\r\n\t\t\t\"46\",\r\n\t\t\t\"49\",\r\n\t\t\t\"33\",\r\n\t\t\t\"488\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"PKWDPU27n9e9L\",\r\n\t\t\t\"5\",\r\n\t\t\t\"33\",\r\n\t\t\t\"41\",\r\n\t\t\t\"28\",\r\n\t\t\t\"397\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"PKWDPmpZgUu6S\",\r\n\t\t\t\"6\",\r\n\t\t\t\"48\",\r\n\t\t\t\"17\",\r\n\t\t\t\"35\",\r\n\t\t\t\"463\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"PKWDP0M9lGBzz\",\r\n\t\t\t\"7\",\r\n\t\t\t\"34\",\r\n\t\t\t\"16\",\r\n\t\t\t\"49\",\r\n\t\t\t\"105\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"PKWDPsCKr80ks\",\r\n\t\t\t\"8\",\r\n\t\t\t\"17\",\r\n\t\t\t\"28\",\r\n\t\t\t\"15\",\r\n\t\t\t\"379\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"PKWDPDotBpZ1y\",\r\n\t\t\t\"9\",\r\n\t\t\t\"45\",\r\n\t\t\t\"28\",\r\n\t\t\t\"49\",\r\n\t\t\t\"424\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"PKWDPCYuyqdql\",\r\n\t\t\t\"10\",\r\n\t\t\t\"41\",\r\n\t\t\t\"26\",\r\n\t\t\t\"10\",\r\n\t\t\t\"188\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"PKWDP0fPOkMaC\",\r\n\t\t\t\"11\",\r\n\t\t\t\"39\",\r\n\t\t\t\"20\",\r\n\t\t\t\"31\",\r\n\t\t\t\"471\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"PKWDPGN6nYdv2\",\r\n\t\t\t\"12\",\r\n\t\t\t\"48\",\r\n\t\t\t\"46\",\r\n\t\t\t\"12\",\r\n\t\t\t\"395\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"PKWDPZ19QRNrq\",\r\n\t\t\t\"13\",\r\n\t\t\t\"24\",\r\n\t\t\t\"27\",\r\n\t\t\t\"17\",\r\n\t\t\t\"340\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"PKWDPPh1TNHCh\",\r\n\t\t\t\"14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"36\",\r\n\t\t\t\"13\",\r\n\t\t\t\"299\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"PKWDPH6Q51k29\",\r\n\t\t\t\"15\",\r\n\t\t\t\"37\",\r\n\t\t\t\"20\",\r\n\t\t\t\"15\",\r\n\t\t\t\"408\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"PKWDP2mpwUmS5\",\r\n\t\t\t\"16\",\r\n\t\t\t\"36\",\r\n\t\t\t\"40\",\r\n\t\t\t\"50\",\r\n\t\t\t\"472\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"PKWDP07BrGxf2\",\r\n\t\t\t\"17\",\r\n\t\t\t\"25\",\r\n\t\t\t\"29\",\r\n\t\t\t\"49\",\r\n\t\t\t\"138\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"PKWDPROG6tAJg\",\r\n\t\t\t\"18\",\r\n\t\t\t\"45\",\r\n\t\t\t\"12\",\r\n\t\t\t\"32\",\r\n\t\t\t\"356\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"PKWDPUWYGDKwm\",\r\n\t\t\t\"19\",\r\n\t\t\t\"36\",\r\n\t\t\t\"44\",\r\n\t\t\t\"37\",\r\n\t\t\t\"423\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"PKWDPVGUhe5T1\",\r\n\t\t\t\"20\",\r\n\t\t\t\"49\",\r\n\t\t\t\"49\",\r\n\t\t\t\"50\",\r\n\t\t\t\"193\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"dc6a207b-b4eb-42d5-a5b7-b1262193e961\",\r\n\t\t\t\"1\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"125\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"f425bdec-fdc1-41cb-8d4b-19179d9ed7a9\",\r\n\t\t\t\"2\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"337\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"9fe3ff35-a57f-4dc2-b682-d69881ebd3e8\",\r\n\t\t\t\"3\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"317\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"48851c5a-132f-4df2-8139-1b0f8ba4ea13\",\r\n\t\t\t\"4\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"497\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"97b9bbb8-e390-4c6c-a688-3676c7a322a1\",\r\n\t\t\t\"5\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"496\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"5d53e82d-ea2c-42de-8255-5150462cc9e2\",\r\n\t\t\t\"6\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"114\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"bab7f29e-f1ec-4d0a-91a3-08cc0121fffc\",\r\n\t\t\t\"7\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"102\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"6117a4e4-2d58-4020-a047-7d0f568379df\",\r\n\t\t\t\"8\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"479\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"41c3a00c-c372-442c-b87c-b7329e1457ac\",\r\n\t\t\t\"9\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"140\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"0542e1ee-2535-44f7-bf41-fb4787f2de52\",\r\n\t\t\t\"10\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"280\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"02ccc497-fb94-4dcc-83dd-21f5db43f43e\",\r\n\t\t\t\"11\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"437\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"05883cec-d339-4cd0-b763-67f7d9d543ff\",\r\n\t\t\t\"12\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"354\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"74a8d502-8b17-4d96-8741-b38d294ae601\",\r\n\t\t\t\"13\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"430\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"72476b15-4090-46bc-be2f-e4e86171af50\",\r\n\t\t\t\"14\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"478\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"980a592b-bf45-4cbe-8ede-2c0d1d6302c4\",\r\n\t\t\t\"15\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"462\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"e50aeb0a-42ef-45f6-a247-e426f0cbd39c\",\r\n\t\t\t\"16\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"271\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"b7440ad5-4836-44e8-96ba-687e1c7fb0bb\",\r\n\t\t\t\"17\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"479\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"a0b745fd-d1de-45d0-9e86-42021ce43d43\",\r\n\t\t\t\"18\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"305\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"4fca59a2-84c1-40d2-b5a7-86ab957f00cc\",\r\n\t\t\t\"19\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"372\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"9129d101-c4ac-43cf-a818-079d4365c2d5\",\r\n\t\t\t\"20\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"459\",\r\n\t\t\t\"\"\r\n\t\t]\r\n\t],\r\n\t\"draftMode\": true\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_subobs2_datasetId}}/observationUnits/{{observationUnitId}}/observations/{{observationId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_subobs2_datasetId}}",
										"observationUnits",
										"{{observationUnitId}}",
										"observations",
										"{{observationId}}"
									]
								},
								"description": "DELETE ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/observationUnits​/{observationUnitId}​/observations​/{observationId}"
							},
							"response": []
						},
						{
							"name": "Check existing out of bound values before adding observation",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ce0f4baf-ae7e-45b9-a7e1-96bbbea4207b",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "8f3f5030-a943-4d51-9f00-edc4de782940",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_subobs2_datasetId}}/observation-units/drafts/out-of-bounds",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_subobs2_datasetId}}",
										"observation-units",
										"drafts",
										"out-of-bounds"
									]
								},
								"description": "PUT ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/variables"
							},
							"response": []
						},
						{
							"name": "Add observation to categorical variable in subobs",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3212102c-dd6b-4fcf-b6d0-72193703a76f",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a223e426-6a39-497b-9278-3ba887098898",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"processWarnings\": true,\r\n\t\"data\": [\r\n\t\t[\r\n\t\t\t\"TRIAL_INSTANCE\",\r\n\t\t\t\"PI_NAME\",\r\n\t\t\t\"EXPT_DESIGN\",\r\n\t\t\t\"LOCATION_ID\",\r\n\t\t\t\"LOCATION_NAME\",\r\n\t\t\t\"Crop_season_Code\",\r\n\t\t\t\"ENTRY_TYPE\",\r\n\t\t\t\"GID\",\r\n\t\t\t\"DESIGNATION\",\r\n\t\t\t\"ENTRY_NO\",\r\n\t\t\t\"OBS_UNIT_ID\",\r\n\t\t\t\"PLOT_NO\",\r\n\t\t\t\"QUADRAT_NO\",\r\n\t\t\t\"Biomas_yield\",\r\n\t\t\t\"PestPressure_0_9\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"0b261507-54ce-4713-b3f2-709736761734\",\r\n\t\t\t\"1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"15\",\r\n\t\t\t\"15\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"315fb141-03c0-4182-88f1-7a9c85f72328\",\r\n\t\t\t\"1\",\r\n\t\t\t\"2\",\r\n\t\t\t\"50\",\r\n\t\t\t\"14\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"2d10c00d-4009-4e4e-951e-f7007a313af7\",\r\n\t\t\t\"1\",\r\n\t\t\t\"3\",\r\n\t\t\t\"18\",\r\n\t\t\t\"10\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"899d0d12-e86d-4b17-87ac-e281a94e92ec\",\r\n\t\t\t\"1\",\r\n\t\t\t\"4\",\r\n\t\t\t\"19\",\r\n\t\t\t\"6\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"cfa758b5-9bb8-40dd-9054-0219feca641a\",\r\n\t\t\t\"2\",\r\n\t\t\t\"1\",\r\n\t\t\t\"98\",\r\n\t\t\t\"9\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"69d0f45f-9b50-41e2-8d4a-6d1e819b338e\",\r\n\t\t\t\"2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"69\",\r\n\t\t\t\"4\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"1bfa2437-3b9a-4076-ab76-5a179cc15922\",\r\n\t\t\t\"2\",\r\n\t\t\t\"3\",\r\n\t\t\t\"34\",\r\n\t\t\t\"11\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"2595fc34-8297-4270-a08e-8ccfc7721cb5\",\r\n\t\t\t\"2\",\r\n\t\t\t\"4\",\r\n\t\t\t\"60\",\r\n\t\t\t\"15\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"638ca187-ee3d-4b04-9323-d1445beffe90\",\r\n\t\t\t\"3\",\r\n\t\t\t\"1\",\r\n\t\t\t\"14\",\r\n\t\t\t\"11\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"3cf8a747-33a1-4d67-aa3f-352a00613f00\",\r\n\t\t\t\"3\",\r\n\t\t\t\"2\",\r\n\t\t\t\"61\",\r\n\t\t\t\"16\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"2c1272ee-9c14-46b4-a827-1cdc8f507467\",\r\n\t\t\t\"3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"9\",\r\n\t\t\t\"9\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"1d191e63-4cfa-473a-afbe-40f4be48c64b\",\r\n\t\t\t\"3\",\r\n\t\t\t\"4\",\r\n\t\t\t\"50\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"93580832-f751-453e-a6a2-f95f76b288cf\",\r\n\t\t\t\"4\",\r\n\t\t\t\"1\",\r\n\t\t\t\"63\",\r\n\t\t\t\"10\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"dbb7f2f6-e8cd-4870-a9b5-a3fc00ba12fa\",\r\n\t\t\t\"4\",\r\n\t\t\t\"2\",\r\n\t\t\t\"64\",\r\n\t\t\t\"11\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"1f26c682-785b-4ee6-842f-2f672ba882c9\",\r\n\t\t\t\"4\",\r\n\t\t\t\"3\",\r\n\t\t\t\"58\",\r\n\t\t\t\"15\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"3bbe6c39-a1d6-4652-8bba-7b1723d6ecf5\",\r\n\t\t\t\"4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"43\",\r\n\t\t\t\"14\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"964a445e-bcd2-4482-a1f0-67990a9845cd\",\r\n\t\t\t\"5\",\r\n\t\t\t\"1\",\r\n\t\t\t\"78\",\r\n\t\t\t\"12\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"bd0e959a-cebf-4858-82ed-61433679de02\",\r\n\t\t\t\"5\",\r\n\t\t\t\"2\",\r\n\t\t\t\"49\",\r\n\t\t\t\"10\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"194e49cd-4a72-4337-b207-c0ad03924dc1\",\r\n\t\t\t\"5\",\r\n\t\t\t\"3\",\r\n\t\t\t\"76\",\r\n\t\t\t\"9\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"cfaf837f-508d-4b3c-8eb0-968439a92ad3\",\r\n\t\t\t\"5\",\r\n\t\t\t\"4\",\r\n\t\t\t\"87\",\r\n\t\t\t\"13\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"33f3fd46-745e-40d0-99d4-abb86307c963\",\r\n\t\t\t\"6\",\r\n\t\t\t\"1\",\r\n\t\t\t\"28\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"2ecbc964-212b-4d87-b6d6-8dd86869180c\",\r\n\t\t\t\"6\",\r\n\t\t\t\"2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"19\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"0744db7c-e5f3-44c6-bcde-da6ef23261c6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"3\",\r\n\t\t\t\"21\",\r\n\t\t\t\"5\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"0a864c70-4eb1-4111-9a05-25fc6159dd8a\",\r\n\t\t\t\"6\",\r\n\t\t\t\"4\",\r\n\t\t\t\"36\",\r\n\t\t\t\"4\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"5d7a76f5-407e-45ad-9d3e-caccd110bfe0\",\r\n\t\t\t\"7\",\r\n\t\t\t\"1\",\r\n\t\t\t\"14\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"5909e7a8-e402-4e76-b88d-bd152174fbca\",\r\n\t\t\t\"7\",\r\n\t\t\t\"2\",\r\n\t\t\t\"34\",\r\n\t\t\t\"12\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"524bc770-e069-449b-9973-43efc938f351\",\r\n\t\t\t\"7\",\r\n\t\t\t\"3\",\r\n\t\t\t\"16\",\r\n\t\t\t\"15\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"70cba2b2-df16-42ad-99fd-b43e243cbfdc\",\r\n\t\t\t\"7\",\r\n\t\t\t\"4\",\r\n\t\t\t\"11\",\r\n\t\t\t\"7\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"9456f46a-72a4-4e2f-900e-26a4d056901a\",\r\n\t\t\t\"8\",\r\n\t\t\t\"1\",\r\n\t\t\t\"57\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"ab4c4997-f3ea-4a47-ad22-7c2cc73cd5cc\",\r\n\t\t\t\"8\",\r\n\t\t\t\"2\",\r\n\t\t\t\"77\",\r\n\t\t\t\"18\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"b581068d-e240-4ba0-8df5-228fa2c2f4db\",\r\n\t\t\t\"8\",\r\n\t\t\t\"3\",\r\n\t\t\t\"84\",\r\n\t\t\t\"17\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"6e54de07-9b2e-4f88-9e31-28101efc2c5e\",\r\n\t\t\t\"8\",\r\n\t\t\t\"4\",\r\n\t\t\t\"92\",\r\n\t\t\t\"13\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"8160083f-0c23-4cb6-824d-9b9bd7226437\",\r\n\t\t\t\"9\",\r\n\t\t\t\"1\",\r\n\t\t\t\"73\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"b682d671-e83f-4c90-aa92-e52184e6d72a\",\r\n\t\t\t\"9\",\r\n\t\t\t\"2\",\r\n\t\t\t\"69\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"5bf2357a-b346-41bc-bad2-faba1e35994b\",\r\n\t\t\t\"9\",\r\n\t\t\t\"3\",\r\n\t\t\t\"86\",\r\n\t\t\t\"6\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"7fe198f5-b983-4333-8615-9c801218ad61\",\r\n\t\t\t\"9\",\r\n\t\t\t\"4\",\r\n\t\t\t\"94\",\r\n\t\t\t\"18\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"07126092-8b56-4d5e-8f98-118873f2463d\",\r\n\t\t\t\"10\",\r\n\t\t\t\"1\",\r\n\t\t\t\"46\",\r\n\t\t\t\"14\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"9d1a3fa0-c20b-447b-8b10-bd48a269ff61\",\r\n\t\t\t\"10\",\r\n\t\t\t\"2\",\r\n\t\t\t\"9\",\r\n\t\t\t\"5\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"d6c3a7cf-da8c-41be-8656-0312c86dac10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"3\",\r\n\t\t\t\"56\",\r\n\t\t\t\"13\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"d6f29725-e27b-49ea-b2a4-0e8999189728\",\r\n\t\t\t\"10\",\r\n\t\t\t\"4\",\r\n\t\t\t\"27\",\r\n\t\t\t\"18\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"fac0c26d-0dee-4d30-9a53-82d1d78c741f\",\r\n\t\t\t\"11\",\r\n\t\t\t\"1\",\r\n\t\t\t\"36\",\r\n\t\t\t\"16\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"b634d60f-a7bd-4687-99fe-c92e5b067a90\",\r\n\t\t\t\"11\",\r\n\t\t\t\"2\",\r\n\t\t\t\"33\",\r\n\t\t\t\"7\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"5a08eead-02c6-4146-9114-15d04fd5a9eb\",\r\n\t\t\t\"11\",\r\n\t\t\t\"3\",\r\n\t\t\t\"49\",\r\n\t\t\t\"9\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"080603ca-d4ad-4406-9a70-180bffe645b0\",\r\n\t\t\t\"11\",\r\n\t\t\t\"4\",\r\n\t\t\t\"18\",\r\n\t\t\t\"18\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"e6ce6248-4051-40eb-af4b-ecde2569c82a\",\r\n\t\t\t\"12\",\r\n\t\t\t\"1\",\r\n\t\t\t\"19\",\r\n\t\t\t\"4\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"fbf3a70f-1fd0-414a-ac4e-a0f180d4cbb3\",\r\n\t\t\t\"12\",\r\n\t\t\t\"2\",\r\n\t\t\t\"27\",\r\n\t\t\t\"13\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"48b392cb-3179-42c2-8321-05eb6c57afd4\",\r\n\t\t\t\"12\",\r\n\t\t\t\"3\",\r\n\t\t\t\"18\",\r\n\t\t\t\"15\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"2005942c-616e-4747-8ee8-0ad2f66966b6\",\r\n\t\t\t\"12\",\r\n\t\t\t\"4\",\r\n\t\t\t\"57\",\r\n\t\t\t\"16\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"85d04aea-36cf-4b01-ba39-4ede2e9f5c71\",\r\n\t\t\t\"13\",\r\n\t\t\t\"1\",\r\n\t\t\t\"66\",\r\n\t\t\t\"13\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"314a5e14-0bea-458c-b314-602654b36c21\",\r\n\t\t\t\"13\",\r\n\t\t\t\"2\",\r\n\t\t\t\"84\",\r\n\t\t\t\"6\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"93ffeae1-8695-4b8d-94b7-1f59731b804b\",\r\n\t\t\t\"13\",\r\n\t\t\t\"3\",\r\n\t\t\t\"29\",\r\n\t\t\t\"16\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"d683a7eb-d4d3-46f4-aef1-a9c20ed128ca\",\r\n\t\t\t\"13\",\r\n\t\t\t\"4\",\r\n\t\t\t\"73\",\r\n\t\t\t\"4\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"36f04eb5-63e0-4d60-9a58-9d48e1c01f50\",\r\n\t\t\t\"14\",\r\n\t\t\t\"1\",\r\n\t\t\t\"28\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"3cdd899e-55b0-4eac-ab3f-9f40a2626963\",\r\n\t\t\t\"14\",\r\n\t\t\t\"2\",\r\n\t\t\t\"7\",\r\n\t\t\t\"9\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"af24c30b-e91f-4381-be65-34d7412f73b0\",\r\n\t\t\t\"14\",\r\n\t\t\t\"3\",\r\n\t\t\t\"46\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"f0059745-7bb4-4df0-9363-1a01bc7490d5\",\r\n\t\t\t\"14\",\r\n\t\t\t\"4\",\r\n\t\t\t\"71\",\r\n\t\t\t\"9\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"1243686c-5eea-4d33-b2bf-25b7d34150be\",\r\n\t\t\t\"15\",\r\n\t\t\t\"1\",\r\n\t\t\t\"79\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"e8b6a8ec-90aa-4636-9a7a-563418ca54fc\",\r\n\t\t\t\"15\",\r\n\t\t\t\"2\",\r\n\t\t\t\"98\",\r\n\t\t\t\"18\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"c8f6c6f6-b66f-4a1d-8df2-ced6953e176d\",\r\n\t\t\t\"15\",\r\n\t\t\t\"3\",\r\n\t\t\t\"59\",\r\n\t\t\t\"12\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"bc7b2c2e-1b32-4981-b9b1-713d6df8d43e\",\r\n\t\t\t\"15\",\r\n\t\t\t\"4\",\r\n\t\t\t\"74\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"8d23c31b-cd3b-48b6-978c-32061714cf5e\",\r\n\t\t\t\"16\",\r\n\t\t\t\"1\",\r\n\t\t\t\"33\",\r\n\t\t\t\"15\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"71b7d84a-6b59-4f7b-a2e0-92b2e7799a88\",\r\n\t\t\t\"16\",\r\n\t\t\t\"2\",\r\n\t\t\t\"96\",\r\n\t\t\t\"19\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"2c4940bc-9775-4733-aec3-0599692a00e3\",\r\n\t\t\t\"16\",\r\n\t\t\t\"3\",\r\n\t\t\t\"33\",\r\n\t\t\t\"6\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"66c29362-af06-4280-92cd-65ba393dd025\",\r\n\t\t\t\"16\",\r\n\t\t\t\"4\",\r\n\t\t\t\"9\",\r\n\t\t\t\"7\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"d9771cde-0161-40c8-87ea-0e845d2d7f87\",\r\n\t\t\t\"17\",\r\n\t\t\t\"1\",\r\n\t\t\t\"11\",\r\n\t\t\t\"6\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"59879668-5fa8-4ba7-a930-823c30426ccb\",\r\n\t\t\t\"17\",\r\n\t\t\t\"2\",\r\n\t\t\t\"36\",\r\n\t\t\t\"20\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"5d187628-c118-4f45-aeba-c81328d33f0e\",\r\n\t\t\t\"17\",\r\n\t\t\t\"3\",\r\n\t\t\t\"56\",\r\n\t\t\t\"8\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"86216685-143a-402d-8d52-cccf76c8f949\",\r\n\t\t\t\"17\",\r\n\t\t\t\"4\",\r\n\t\t\t\"62\",\r\n\t\t\t\"8\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"dfc52e00-8a51-4f91-b0b3-a364697da9aa\",\r\n\t\t\t\"18\",\r\n\t\t\t\"1\",\r\n\t\t\t\"68\",\r\n\t\t\t\"5\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"9b745a60-23af-4530-8a10-c002b4cf5061\",\r\n\t\t\t\"18\",\r\n\t\t\t\"2\",\r\n\t\t\t\"33\",\r\n\t\t\t\"15\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"ed32ad4d-711e-4774-b83b-f98aa3e6c4fa\",\r\n\t\t\t\"18\",\r\n\t\t\t\"3\",\r\n\t\t\t\"79\",\r\n\t\t\t\"19\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"d3f269e0-b77e-47e7-906d-554b93060ba6\",\r\n\t\t\t\"18\",\r\n\t\t\t\"4\",\r\n\t\t\t\"78\",\r\n\t\t\t\"16\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"810e5db4-c7ca-466e-a9d7-cb7edde9e531\",\r\n\t\t\t\"19\",\r\n\t\t\t\"1\",\r\n\t\t\t\"60\",\r\n\t\t\t\"4\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"34f406a9-60c6-4957-a644-4a9e16e52382\",\r\n\t\t\t\"19\",\r\n\t\t\t\"2\",\r\n\t\t\t\"17\",\r\n\t\t\t\"14\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"6cf3bc95-85ff-499c-a1f4-84a565f4a4d2\",\r\n\t\t\t\"19\",\r\n\t\t\t\"3\",\r\n\t\t\t\"14\",\r\n\t\t\t\"13\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"a125b0f7-a1b4-4be5-bbcd-50efffa8fbd3\",\r\n\t\t\t\"19\",\r\n\t\t\t\"4\",\r\n\t\t\t\"70\",\r\n\t\t\t\"20\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"0e7688f7-7e7f-435b-bd86-fa541aa4eb13\",\r\n\t\t\t\"20\",\r\n\t\t\t\"1\",\r\n\t\t\t\"77\",\r\n\t\t\t\"16\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"c7cb7363-9d1c-4080-82d7-ef302280baf1\",\r\n\t\t\t\"20\",\r\n\t\t\t\"2\",\r\n\t\t\t\"69\",\r\n\t\t\t\"15\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"7008760c-5e8f-4d6f-9986-c47e8d2a23cb\",\r\n\t\t\t\"20\",\r\n\t\t\t\"3\",\r\n\t\t\t\"46\",\r\n\t\t\t\"7\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"c371cb1e-c0f9-4129-8900-460fff2b58ff\",\r\n\t\t\t\"20\",\r\n\t\t\t\"4\",\r\n\t\t\t\"35\",\r\n\t\t\t\"20\"\r\n\t\t]\r\n\t],\r\n\t\"draftMode\": true\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_subobs2_datasetId}}/observationUnits/observations",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_subobs2_datasetId}}",
										"observationUnits",
										"observations"
									]
								},
								"description": "PUT ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/variables"
							},
							"response": []
						},
						{
							"name": "Check existing out of bound values after adding observation with out of bound values",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "65e474e1-882c-4e46-992e-0c7590ce1718",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "8e8d93de-f332-4436-bb28-ee08465eb4da",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_subobs2_datasetId}}/observation-units/drafts/out-of-bounds",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_subobs2_datasetId}}",
										"observation-units",
										"drafts",
										"out-of-bounds"
									]
								},
								"description": "PUT ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/variables"
							},
							"response": []
						},
						{
							"name": "Check existing out of bound values with invalid crop",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c9206edf-4ee7-483b-a3b5-38351b4c2e7e",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Check error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Invalid crop \"+pm.environment.get(\"invalidCrop\")+\" for URL:/crops/\"+pm.environment.get(\"invalidCrop\")+\"/programs/\"+pm.environment.get(\"api_program_id\")+\"/studies/\"+pm.environment.get(\"studyId\")+\"/datasets/\"+pm.environment.get(\"study_subobs2_datasetId\")+\"/observation-units/drafts/out-of-bounds\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "7d10109b-0685-47c4-8ab4-c2e795597143",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{invalidCrop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_subobs2_datasetId}}/observation-units/drafts/out-of-bounds",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{invalidCrop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_subobs2_datasetId}}",
										"observation-units",
										"drafts",
										"out-of-bounds"
									]
								},
								"description": "PUT ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/variables"
							},
							"response": []
						},
						{
							"name": "Check existing out of bound values with invalid program",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5b7413bc-da3f-4c6e-952c-78acad79f044",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Check error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Invalid program: invalid for crop: \"+pm.environment.get(\"crop\")+\" for service with path /crops/\"+pm.environment.get(\"crop\")+\"/programs/invalid/studies/\"+pm.environment.get(\"studyId\")+\"/datasets/\"+pm.environment.get(\"study_subobs2_datasetId\")+\"/observation-units/drafts/out-of-bounds\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "72dd8c68-a250-4ddb-a3a5-196563cdba82",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/invalid/studies/{{studyId}}/datasets/{{study_subobs2_datasetId}}/observation-units/drafts/out-of-bounds",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"invalid",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_subobs2_datasetId}}",
										"observation-units",
										"drafts",
										"out-of-bounds"
									]
								},
								"description": "PUT ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/variables"
							},
							"response": []
						},
						{
							"name": "Check existing out of bound values with non-existing studyId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6a31e0db-c533-42a3-8c51-e1f81aa313fa",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"pm.test(\"Check error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Study does not exist\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b995f261-f2ce-48d8-a6d8-8715d7df0362",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{non_existing_study_id}}/datasets/{{study_subobs2_datasetId}}/observation-units/drafts/out-of-bounds",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{non_existing_study_id}}",
										"datasets",
										"{{study_subobs2_datasetId}}",
										"observation-units",
										"drafts",
										"out-of-bounds"
									]
								},
								"description": "PUT ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/variables"
							},
							"response": []
						},
						{
							"name": "Check existing out of bound values with non-existing datasetId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c73981e8-8bb5-4de0-85ff-6c308aef6d5d",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"pm.test(\"Check error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Dataset does not exist\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a5c2a526-9ca6-41ce-96d9-54b5ed28cd6b",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{non_existing_dataset_id}}/observation-units/drafts/out-of-bounds",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{non_existing_dataset_id}}",
										"observation-units",
										"drafts",
										"out-of-bounds"
									]
								},
								"description": "PUT ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/variables"
							},
							"response": []
						},
						{
							"name": "Check existing out of bound values with datasetId that does not belong to the study",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cd23a82b-068c-47e7-9b5d-94279cdded86",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Check error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Specified dataset \"+pm.environment.get(\"study_plot_dataset_id_noPhenoCount\")+\" does not belong to the study \"+pm.environment.get(\"studyId\"));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f10ef9f2-87d2-493a-874d-9219846c7dbf",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_dataset_id_noPhenoCount}}/observation-units/drafts/out-of-bounds",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_dataset_id_noPhenoCount}}",
										"observation-units",
										"drafts",
										"out-of-bounds"
									]
								},
								"description": "PUT ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/variables"
							},
							"response": []
						},
						{
							"name": "Accept filtered pending data",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a9da0311-80d0-4e8d-b53c-1f4fd30dfee3",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c8fb19e5-83a9-4d63-906c-cb0c239a87db",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"draftMode\": true,\r\n\t\"filter\": {\r\n\t\t\"byOutOfBound\": null,\r\n\t\t\"byMissing\": null,\r\n\t\t\"byOutOfSync\": null,\r\n\t\t\"byOverwritten\": null,\r\n\t\t\"variableId\": 18090,\r\n\t\t\"filterColumns\": [],\r\n\t\t\"filteredValues\": {},\r\n\t\t\"filteredTextValues\": {},\r\n\t\t\"variableTypeMap\": {\r\n\t\t\t\"8170\": null,\r\n\t\t\t\"8200\": \"EXPERIMENTAL_DESIGN\",\r\n\t\t\t\"8201\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8207\": \"OBSERVATION_UNIT\",\r\n\t\t\t\"8230\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8240\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8250\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8255\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"18090\": \"TRAIT\"\r\n\t\t}\r\n\t}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_subobs2_datasetId}}/observation-units/drafts/filter/acceptance",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_subobs2_datasetId}}",
										"observation-units",
										"drafts",
										"filter",
										"acceptance"
									]
								},
								"description": "POST ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/observation-units​/drafts​/filter​/acceptance"
							},
							"response": []
						},
						{
							"name": "Accept filtered pending data with invalid crop",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c1eae5ca-f68b-4e14-8f29-0f3eec158eb5",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Check error messag\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Invalid crop \"+pm.environment.get(\"invalidCrop\")+\" for URL:/crops/\"+pm.environment.get(\"invalidCrop\")+\"/programs/\"+pm.environment.get(\"api_program_id\")+\"/studies/\"+pm.environment.get(\"studyId\")+\"/datasets/\"+pm.environment.get(\"study_subobs2_datasetId\")+\"/observation-units/drafts/filter/acceptance\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "4afa9a2a-4134-4456-a452-2048d20d7689",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"draftMode\": true,\r\n\t\"filter\": {\r\n\t\t\"byOutOfBound\": null,\r\n\t\t\"byMissing\": null,\r\n\t\t\"byOutOfSync\": null,\r\n\t\t\"byOverwritten\": null,\r\n\t\t\"variableId\": 18090,\r\n\t\t\"filterColumns\": [],\r\n\t\t\"filteredValues\": {},\r\n\t\t\"filteredTextValues\": {},\r\n\t\t\"variableTypeMap\": {\r\n\t\t\t\"8170\": null,\r\n\t\t\t\"8200\": \"EXPERIMENTAL_DESIGN\",\r\n\t\t\t\"8201\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8207\": \"OBSERVATION_UNIT\",\r\n\t\t\t\"8230\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8240\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8250\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8255\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"18090\": \"TRAIT\"\r\n\t\t}\r\n\t}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{invalidCrop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_subobs2_datasetId}}/observation-units/drafts/filter/acceptance",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{invalidCrop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_subobs2_datasetId}}",
										"observation-units",
										"drafts",
										"filter",
										"acceptance"
									]
								},
								"description": "POST /crops/{cropName}/programs​/{programUUID}​/studies/{studyId}/datasets/{datasetId}/observation-units/drafts/acceptance"
							},
							"response": []
						},
						{
							"name": "Accept filtered pending data with invalid program",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3223d8f9-159a-49e7-ab28-04ffea1ebe92",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Check error messag\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Invalid program: invalid for crop: \"+pm.environment.get(\"crop\")+\" for service with path /crops/\"+pm.environment.get(\"crop\")+\"/programs/invalid/studies/\"+pm.environment.get(\"studyId\")+\"/datasets/\"+pm.environment.get(\"study_subobs2_datasetId\")+\"/observation-units/drafts/filter/acceptance\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e3b79803-7299-40ff-be36-beb533f75789",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"draftMode\": true,\r\n\t\"filter\": {\r\n\t\t\"byOutOfBound\": null,\r\n\t\t\"byMissing\": null,\r\n\t\t\"byOutOfSync\": null,\r\n\t\t\"byOverwritten\": null,\r\n\t\t\"variableId\": 18090,\r\n\t\t\"filterColumns\": [],\r\n\t\t\"filteredValues\": {},\r\n\t\t\"filteredTextValues\": {},\r\n\t\t\"variableTypeMap\": {\r\n\t\t\t\"8170\": null,\r\n\t\t\t\"8200\": \"EXPERIMENTAL_DESIGN\",\r\n\t\t\t\"8201\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8207\": \"OBSERVATION_UNIT\",\r\n\t\t\t\"8230\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8240\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8250\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8255\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"18090\": \"TRAIT\"\r\n\t\t}\r\n\t}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/invalid/studies/{{studyId}}/datasets/{{study_subobs2_datasetId}}/observation-units/drafts/filter/acceptance",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"invalid",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_subobs2_datasetId}}",
										"observation-units",
										"drafts",
										"filter",
										"acceptance"
									]
								},
								"description": "POST /crops/{cropName}/programs​/{programUUID}​/studies/{studyId}/datasets/{datasetId}/observation-units/drafts/acceptance"
							},
							"response": []
						},
						{
							"name": "Accept filtered pending data with non-existing studyId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bfb56a78-40c7-4e81-9d37-3f9b3f4bfb34",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"pm.test(\"Check error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Study does not exist\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "166f035e-e3df-4c62-b20e-eb0b64b9b615",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"draftMode\": true,\r\n\t\"filter\": {\r\n\t\t\"byOutOfBound\": null,\r\n\t\t\"byMissing\": null,\r\n\t\t\"byOutOfSync\": null,\r\n\t\t\"byOverwritten\": null,\r\n\t\t\"variableId\": 18090,\r\n\t\t\"filterColumns\": [],\r\n\t\t\"filteredValues\": {},\r\n\t\t\"filteredTextValues\": {},\r\n\t\t\"variableTypeMap\": {\r\n\t\t\t\"8170\": null,\r\n\t\t\t\"8200\": \"EXPERIMENTAL_DESIGN\",\r\n\t\t\t\"8201\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8207\": \"OBSERVATION_UNIT\",\r\n\t\t\t\"8230\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8240\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8250\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8255\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"18090\": \"TRAIT\"\r\n\t\t}\r\n\t}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{non_existing_study_id}}/datasets/{{study_subobs2_datasetId}}/observation-units/drafts/filter/acceptance",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{non_existing_study_id}}",
										"datasets",
										"{{study_subobs2_datasetId}}",
										"observation-units",
										"drafts",
										"filter",
										"acceptance"
									]
								},
								"description": "POST /crops/{cropName}/programs​/{programUUID}​/studies/{studyId}/datasets/{datasetId}/observation-units/drafts/acceptance"
							},
							"response": []
						},
						{
							"name": "Accept filtered pending data with non-existing datasetId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aeb08c3f-5273-4a2d-b4ef-0a149cc982d6",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"pm.test(\"Check error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Dataset does not exist\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "286abe2c-324a-4f8b-ba56-73528398377b",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"draftMode\": true,\r\n\t\"filter\": {\r\n\t\t\"byOutOfBound\": null,\r\n\t\t\"byMissing\": null,\r\n\t\t\"byOutOfSync\": null,\r\n\t\t\"byOverwritten\": null,\r\n\t\t\"variableId\": 18090,\r\n\t\t\"filterColumns\": [],\r\n\t\t\"filteredValues\": {},\r\n\t\t\"filteredTextValues\": {},\r\n\t\t\"variableTypeMap\": {\r\n\t\t\t\"8170\": null,\r\n\t\t\t\"8200\": \"EXPERIMENTAL_DESIGN\",\r\n\t\t\t\"8201\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8207\": \"OBSERVATION_UNIT\",\r\n\t\t\t\"8230\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8240\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8250\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8255\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"18090\": \"TRAIT\"\r\n\t\t}\r\n\t}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{non_existing_dataset_id}}/observation-units/drafts/filter/acceptance",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{non_existing_dataset_id}}",
										"observation-units",
										"drafts",
										"filter",
										"acceptance"
									]
								},
								"description": "POST /crops/{cropName}/programs​/{programUUID}​/studies/{studyId}/datasets/{datasetId}/observation-units/drafts/acceptance"
							},
							"response": []
						},
						{
							"name": "Accept filtered pending data for a non-existing variableId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5d5b4077-b183-4bf3-bfae-9d02983e8c54",
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"pm.test(\"Check error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Variable does not exist\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0ba3e000-b17f-4afd-a31d-d94813ae7206",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"draftMode\": true,\r\n\t\"filter\": {\r\n\t\t\"byOutOfBound\": null,\r\n\t\t\"byMissing\": null,\r\n\t\t\"byOutOfSync\": null,\r\n\t\t\"byOverwritten\": null,\r\n\t\t\"variableId\": 99999,\r\n\t\t\"filterColumns\": [],\r\n\t\t\"filteredValues\": {},\r\n\t\t\"filteredTextValues\": {},\r\n\t\t\"variableTypeMap\": {\r\n\t\t\t\"8170\": null,\r\n\t\t\t\"8200\": \"EXPERIMENTAL_DESIGN\",\r\n\t\t\t\"8201\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8207\": \"OBSERVATION_UNIT\",\r\n\t\t\t\"8230\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8240\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8250\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8255\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"18090\": \"TRAIT\"\r\n\t\t}\r\n\t}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_subobs2_datasetId}}/observation-units/drafts/filter/acceptance",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_subobs2_datasetId}}",
										"observation-units",
										"drafts",
										"filter",
										"acceptance"
									]
								},
								"description": "POST /crops/{cropName}/programs​/{programUUID}​/studies/{studyId}/datasets/{datasetId}/observation-units/drafts/acceptance"
							},
							"response": []
						},
						{
							"name": "Accept filtered pending data with datasetId that does not belong to the study",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "18b3c3d4-82e0-4487-8385-dac8397b2195",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Check error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Specified dataset \"+pm.environment.get(\"study_plot_dataset_id_noPhenoCount\")+\" does not belong to the study \"+pm.environment.get(\"studyId\"));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "303557d5-5190-4a50-8b1d-7a318a0de3eb",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"draftMode\": true,\r\n\t\"filter\": {\r\n\t\t\"byOutOfBound\": null,\r\n\t\t\"byMissing\": null,\r\n\t\t\"byOutOfSync\": null,\r\n\t\t\"byOverwritten\": null,\r\n\t\t\"variableId\": 99999,\r\n\t\t\"filterColumns\": [],\r\n\t\t\"filteredValues\": {},\r\n\t\t\"filteredTextValues\": {},\r\n\t\t\"variableTypeMap\": {\r\n\t\t\t\"8170\": null,\r\n\t\t\t\"8200\": \"EXPERIMENTAL_DESIGN\",\r\n\t\t\t\"8201\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8207\": \"OBSERVATION_UNIT\",\r\n\t\t\t\"8230\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8240\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8250\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8255\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"18090\": \"TRAIT\"\r\n\t\t}\r\n\t}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_dataset_id_noPhenoCount}}/observation-units/drafts/filter/acceptance",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_dataset_id_noPhenoCount}}",
										"observation-units",
										"drafts",
										"filter",
										"acceptance"
									]
								},
								"description": "POST /crops/{cropName}/programs​/{programUUID}​/studies/{studyId}/datasets/{datasetId}/observation-units/drafts/acceptance"
							},
							"response": []
						},
						{
							"name": "Retrieve observation units of after updating filtered phenotype Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "715777cb-41ef-4c50-84e6-4b637089b96f",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Check records filtered \", function () {",
											"    pm.expect(jsonData.recordsFiltered).to.eql(80);",
											"});",
											"pm.test(\"Check records total\", function () {",
											"    pm.expect(jsonData.recordsFiltered).to.eql(80);",
											"});",
											"",
											"//Check data at index 0",
											"",
											"var index = 0;",
											"",
											"var observationUnitIds = [];",
											"var observationIds = [];",
											"",
											"",
											"for (var i = 0; i < jsonData.data.length; i++){",
											"  var selectedData = jsonData.data[i];",
											"  observationUnitIds[i] = selectedData.observationUnitId;",
											"  observationIds[i] = selectedData.variables.PestPressure_0_9.observationId",
											"  console.log(observationIds[i]);",
											"}",
											"",
											"pm.environment.unset(\"observationUnitIds\");",
											"pm.environment.unset(\"observationIds\");",
											"pm.environment.set(\"observationUnitIds\", JSON.stringify(observationUnitIds));",
											"pm.environment.set(\"observationIds\", JSON.stringify(observationIds));",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ca580c7a-53f7-4e83-a72b-2f22938001a1",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"draw\": 1,\r\n\t\"sortedRequest\": {\r\n\t\t\"pageSize\": 50,\r\n\t\t\"pageNumber\": 1,\r\n\t\t\"sortBy\": 8200,\r\n\t\t\"sortOrder\": \"asc\"\r\n\t},\r\n\t\"instanceId\": 1,\r\n\t\"draftMode\": false,\r\n\t\"filter\": {\r\n\t\t\"byOutOfBound\": null,\r\n\t\t\"byMissing\": null,\r\n\t\t\"byOutOfSync\": null,\r\n\t\t\"byOverwritten\": null,\r\n\t\t\"variableId\": null,\r\n\t\t\"filterColumns\": [],\r\n\t\t\"filteredValues\": {},\r\n\t\t\"filteredTextValues\": {},\r\n\t\t\"variableTypeMap\": {\r\n\t\t\t\"8170\": null,\r\n\t\t\t\"8200\": \"EXPERIMENTAL_DESIGN\",\r\n\t\t\t\"8201\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8207\": \"OBSERVATION_UNIT\",\r\n\t\t\t\"8230\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8240\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8250\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8255\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"18010\": \"TRAIT\",\r\n\t\t\t\"18090\": \"TRAIT\"\r\n\t\t}\r\n\t}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_subobs2_datasetId}}/observationUnits/table",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_subobs2_datasetId}}",
										"observationUnits",
										"table"
									]
								},
								"description": "POST /crops/{cropName}/programs​/{programUUID}​/studies/{studyId}/datasets/{datasetId}/observation-units/drafts/acceptance"
							},
							"response": []
						},
						{
							"name": "Delete observation of catgorical variable in subobs",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "292f4efe-acb7-4971-87a6-7efb59071748",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var observationUnitIds = [];",
											"observationUnitIds = JSON.parse(pm.environment.get(\"observationUnitIds\"));",
											"var observationIds = [];",
											"observationIds = JSON.parse(pm.environment.get(\"observationIds\"));",
											"",
											"if(observationUnitIds.length && observationIds.length > 0){",
											"postman.setNextRequest(\"Delete observation of catgorical variable in subobs\");",
											"}else{",
											"    postman.setNextRequest(null);",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "35a132d3-bd4b-4d73-9380-6d523810b5e0",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}\r",
											"\r",
											"var observationUnitIds = [];\r",
											"observationUnitIds = JSON.parse(pm.environment.get(\"observationUnitIds\"));\r",
											"var observationIds = [];\r",
											"observationIds = JSON.parse(pm.environment.get(\"observationIds\"));\r",
											"console.log(observationUnitIds.length);\r",
											"var current_observationUnitId = observationUnitIds.shift();\r",
											"var current_observationId = observationIds.shift();\r",
											"pm.environment.set(\"observationUnitId\", current_observationUnitId);\r",
											"pm.environment.set(\"observationId\", current_observationId);\r",
											"pm.environment.set(\"observationUnitIds\", JSON.stringify(observationUnitIds));\r",
											"pm.environment.set(\"observationIds\", JSON.stringify(observationIds));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"processWarnings\": true,\r\n\t\"data\": [\r\n\t\t[\r\n\t\t\t\"TRIAL_INSTANCE\",\r\n\t\t\t\"PI_NAME\",\r\n\t\t\t\"EXPT_DESIGN\",\r\n\t\t\t\"LOCATION_ID\",\r\n\t\t\t\"LOCATION_NAME\",\r\n\t\t\t\"Crop_season_Code\",\r\n\t\t\t\"ENTRY_TYPE\",\r\n\t\t\t\"GID\",\r\n\t\t\t\"DESIGNATION\",\r\n\t\t\t\"ENTRY_NO\",\r\n\t\t\t\"OBS_UNIT_ID\",\r\n\t\t\t\"PLOT_NO\",\r\n\t\t\t\"WeedPressure_number\",\r\n\t\t\t\"Grain_yield\",\r\n\t\t\t\"Biomas_yield\",\r\n\t\t\t\"InputVariable\",\r\n\t\t\t\"NPSEL\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"PKWDPtLOzD8Sz\",\r\n\t\t\t\"1\",\r\n\t\t\t\"21\",\r\n\t\t\t\"23\",\r\n\t\t\t\"40\",\r\n\t\t\t\"338\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"PKWDP6ME6bt1l\",\r\n\t\t\t\"2\",\r\n\t\t\t\"15\",\r\n\t\t\t\"12\",\r\n\t\t\t\"45\",\r\n\t\t\t\"285\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"PKWDPe2za6TM7\",\r\n\t\t\t\"3\",\r\n\t\t\t\"12\",\r\n\t\t\t\"41\",\r\n\t\t\t\"32\",\r\n\t\t\t\"176\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"PKWDPEV6LPs1N\",\r\n\t\t\t\"4\",\r\n\t\t\t\"46\",\r\n\t\t\t\"49\",\r\n\t\t\t\"33\",\r\n\t\t\t\"488\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"PKWDPU27n9e9L\",\r\n\t\t\t\"5\",\r\n\t\t\t\"33\",\r\n\t\t\t\"41\",\r\n\t\t\t\"28\",\r\n\t\t\t\"397\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"PKWDPmpZgUu6S\",\r\n\t\t\t\"6\",\r\n\t\t\t\"48\",\r\n\t\t\t\"17\",\r\n\t\t\t\"35\",\r\n\t\t\t\"463\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"PKWDP0M9lGBzz\",\r\n\t\t\t\"7\",\r\n\t\t\t\"34\",\r\n\t\t\t\"16\",\r\n\t\t\t\"49\",\r\n\t\t\t\"105\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"PKWDPsCKr80ks\",\r\n\t\t\t\"8\",\r\n\t\t\t\"17\",\r\n\t\t\t\"28\",\r\n\t\t\t\"15\",\r\n\t\t\t\"379\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"PKWDPDotBpZ1y\",\r\n\t\t\t\"9\",\r\n\t\t\t\"45\",\r\n\t\t\t\"28\",\r\n\t\t\t\"49\",\r\n\t\t\t\"424\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"PKWDPCYuyqdql\",\r\n\t\t\t\"10\",\r\n\t\t\t\"41\",\r\n\t\t\t\"26\",\r\n\t\t\t\"10\",\r\n\t\t\t\"188\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"PKWDP0fPOkMaC\",\r\n\t\t\t\"11\",\r\n\t\t\t\"39\",\r\n\t\t\t\"20\",\r\n\t\t\t\"31\",\r\n\t\t\t\"471\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"PKWDPGN6nYdv2\",\r\n\t\t\t\"12\",\r\n\t\t\t\"48\",\r\n\t\t\t\"46\",\r\n\t\t\t\"12\",\r\n\t\t\t\"395\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"PKWDPZ19QRNrq\",\r\n\t\t\t\"13\",\r\n\t\t\t\"24\",\r\n\t\t\t\"27\",\r\n\t\t\t\"17\",\r\n\t\t\t\"340\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"PKWDPPh1TNHCh\",\r\n\t\t\t\"14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"36\",\r\n\t\t\t\"13\",\r\n\t\t\t\"299\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"PKWDPH6Q51k29\",\r\n\t\t\t\"15\",\r\n\t\t\t\"37\",\r\n\t\t\t\"20\",\r\n\t\t\t\"15\",\r\n\t\t\t\"408\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"PKWDP2mpwUmS5\",\r\n\t\t\t\"16\",\r\n\t\t\t\"36\",\r\n\t\t\t\"40\",\r\n\t\t\t\"50\",\r\n\t\t\t\"472\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"PKWDP07BrGxf2\",\r\n\t\t\t\"17\",\r\n\t\t\t\"25\",\r\n\t\t\t\"29\",\r\n\t\t\t\"49\",\r\n\t\t\t\"138\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"PKWDPROG6tAJg\",\r\n\t\t\t\"18\",\r\n\t\t\t\"45\",\r\n\t\t\t\"12\",\r\n\t\t\t\"32\",\r\n\t\t\t\"356\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"PKWDPUWYGDKwm\",\r\n\t\t\t\"19\",\r\n\t\t\t\"36\",\r\n\t\t\t\"44\",\r\n\t\t\t\"37\",\r\n\t\t\t\"423\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"PKWDPVGUhe5T1\",\r\n\t\t\t\"20\",\r\n\t\t\t\"49\",\r\n\t\t\t\"49\",\r\n\t\t\t\"50\",\r\n\t\t\t\"193\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"dc6a207b-b4eb-42d5-a5b7-b1262193e961\",\r\n\t\t\t\"1\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"125\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"f425bdec-fdc1-41cb-8d4b-19179d9ed7a9\",\r\n\t\t\t\"2\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"337\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"9fe3ff35-a57f-4dc2-b682-d69881ebd3e8\",\r\n\t\t\t\"3\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"317\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"48851c5a-132f-4df2-8139-1b0f8ba4ea13\",\r\n\t\t\t\"4\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"497\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"97b9bbb8-e390-4c6c-a688-3676c7a322a1\",\r\n\t\t\t\"5\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"496\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"5d53e82d-ea2c-42de-8255-5150462cc9e2\",\r\n\t\t\t\"6\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"114\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"bab7f29e-f1ec-4d0a-91a3-08cc0121fffc\",\r\n\t\t\t\"7\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"102\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"6117a4e4-2d58-4020-a047-7d0f568379df\",\r\n\t\t\t\"8\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"479\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"41c3a00c-c372-442c-b87c-b7329e1457ac\",\r\n\t\t\t\"9\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"140\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"0542e1ee-2535-44f7-bf41-fb4787f2de52\",\r\n\t\t\t\"10\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"280\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"02ccc497-fb94-4dcc-83dd-21f5db43f43e\",\r\n\t\t\t\"11\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"437\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"05883cec-d339-4cd0-b763-67f7d9d543ff\",\r\n\t\t\t\"12\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"354\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"74a8d502-8b17-4d96-8741-b38d294ae601\",\r\n\t\t\t\"13\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"430\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"72476b15-4090-46bc-be2f-e4e86171af50\",\r\n\t\t\t\"14\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"478\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"980a592b-bf45-4cbe-8ede-2c0d1d6302c4\",\r\n\t\t\t\"15\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"462\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"e50aeb0a-42ef-45f6-a247-e426f0cbd39c\",\r\n\t\t\t\"16\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"271\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"b7440ad5-4836-44e8-96ba-687e1c7fb0bb\",\r\n\t\t\t\"17\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"479\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"a0b745fd-d1de-45d0-9e86-42021ce43d43\",\r\n\t\t\t\"18\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"305\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"4fca59a2-84c1-40d2-b5a7-86ab957f00cc\",\r\n\t\t\t\"19\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"372\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"9129d101-c4ac-43cf-a818-079d4365c2d5\",\r\n\t\t\t\"20\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"459\",\r\n\t\t\t\"\"\r\n\t\t]\r\n\t],\r\n\t\"draftMode\": true\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_subobs2_datasetId}}/observationUnits/{{observationUnitId}}/observations/{{observationId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_subobs2_datasetId}}",
										"observationUnits",
										"{{observationUnitId}}",
										"observations",
										"{{observationId}}"
									]
								},
								"description": "DELETE ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/observationUnits​/{observationUnitId}​/observations​/{observationId}"
							},
							"response": []
						},
						{
							"name": "Add observation to categorical variable in subobs",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7da3d3b5-f675-4624-a509-06f4ac1a7e10",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e409d94c-eded-4afc-aa02-e83902492792",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"processWarnings\": true,\r\n\t\"data\": [\r\n\t\t[\r\n\t\t\t\"TRIAL_INSTANCE\",\r\n\t\t\t\"PI_NAME\",\r\n\t\t\t\"EXPT_DESIGN\",\r\n\t\t\t\"LOCATION_ID\",\r\n\t\t\t\"LOCATION_NAME\",\r\n\t\t\t\"Crop_season_Code\",\r\n\t\t\t\"ENTRY_TYPE\",\r\n\t\t\t\"GID\",\r\n\t\t\t\"DESIGNATION\",\r\n\t\t\t\"ENTRY_NO\",\r\n\t\t\t\"OBS_UNIT_ID\",\r\n\t\t\t\"PLOT_NO\",\r\n\t\t\t\"QUADRAT_NO\",\r\n\t\t\t\"Biomas_yield\",\r\n\t\t\t\"PestPressure_0_9\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"0b261507-54ce-4713-b3f2-709736761734\",\r\n\t\t\t\"1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"15\",\r\n\t\t\t\"15\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"315fb141-03c0-4182-88f1-7a9c85f72328\",\r\n\t\t\t\"1\",\r\n\t\t\t\"2\",\r\n\t\t\t\"50\",\r\n\t\t\t\"14\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"2d10c00d-4009-4e4e-951e-f7007a313af7\",\r\n\t\t\t\"1\",\r\n\t\t\t\"3\",\r\n\t\t\t\"18\",\r\n\t\t\t\"10\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"899d0d12-e86d-4b17-87ac-e281a94e92ec\",\r\n\t\t\t\"1\",\r\n\t\t\t\"4\",\r\n\t\t\t\"19\",\r\n\t\t\t\"6\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"cfa758b5-9bb8-40dd-9054-0219feca641a\",\r\n\t\t\t\"2\",\r\n\t\t\t\"1\",\r\n\t\t\t\"98\",\r\n\t\t\t\"9\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"69d0f45f-9b50-41e2-8d4a-6d1e819b338e\",\r\n\t\t\t\"2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"69\",\r\n\t\t\t\"4\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"1bfa2437-3b9a-4076-ab76-5a179cc15922\",\r\n\t\t\t\"2\",\r\n\t\t\t\"3\",\r\n\t\t\t\"34\",\r\n\t\t\t\"11\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"2595fc34-8297-4270-a08e-8ccfc7721cb5\",\r\n\t\t\t\"2\",\r\n\t\t\t\"4\",\r\n\t\t\t\"60\",\r\n\t\t\t\"15\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"638ca187-ee3d-4b04-9323-d1445beffe90\",\r\n\t\t\t\"3\",\r\n\t\t\t\"1\",\r\n\t\t\t\"14\",\r\n\t\t\t\"11\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"3cf8a747-33a1-4d67-aa3f-352a00613f00\",\r\n\t\t\t\"3\",\r\n\t\t\t\"2\",\r\n\t\t\t\"61\",\r\n\t\t\t\"16\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"2c1272ee-9c14-46b4-a827-1cdc8f507467\",\r\n\t\t\t\"3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"9\",\r\n\t\t\t\"9\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"1d191e63-4cfa-473a-afbe-40f4be48c64b\",\r\n\t\t\t\"3\",\r\n\t\t\t\"4\",\r\n\t\t\t\"50\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"93580832-f751-453e-a6a2-f95f76b288cf\",\r\n\t\t\t\"4\",\r\n\t\t\t\"1\",\r\n\t\t\t\"63\",\r\n\t\t\t\"10\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"dbb7f2f6-e8cd-4870-a9b5-a3fc00ba12fa\",\r\n\t\t\t\"4\",\r\n\t\t\t\"2\",\r\n\t\t\t\"64\",\r\n\t\t\t\"11\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"1f26c682-785b-4ee6-842f-2f672ba882c9\",\r\n\t\t\t\"4\",\r\n\t\t\t\"3\",\r\n\t\t\t\"58\",\r\n\t\t\t\"15\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"3bbe6c39-a1d6-4652-8bba-7b1723d6ecf5\",\r\n\t\t\t\"4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"43\",\r\n\t\t\t\"14\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"964a445e-bcd2-4482-a1f0-67990a9845cd\",\r\n\t\t\t\"5\",\r\n\t\t\t\"1\",\r\n\t\t\t\"78\",\r\n\t\t\t\"12\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"bd0e959a-cebf-4858-82ed-61433679de02\",\r\n\t\t\t\"5\",\r\n\t\t\t\"2\",\r\n\t\t\t\"49\",\r\n\t\t\t\"10\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"194e49cd-4a72-4337-b207-c0ad03924dc1\",\r\n\t\t\t\"5\",\r\n\t\t\t\"3\",\r\n\t\t\t\"76\",\r\n\t\t\t\"9\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"cfaf837f-508d-4b3c-8eb0-968439a92ad3\",\r\n\t\t\t\"5\",\r\n\t\t\t\"4\",\r\n\t\t\t\"87\",\r\n\t\t\t\"13\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"33f3fd46-745e-40d0-99d4-abb86307c963\",\r\n\t\t\t\"6\",\r\n\t\t\t\"1\",\r\n\t\t\t\"28\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"2ecbc964-212b-4d87-b6d6-8dd86869180c\",\r\n\t\t\t\"6\",\r\n\t\t\t\"2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"19\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"0744db7c-e5f3-44c6-bcde-da6ef23261c6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"3\",\r\n\t\t\t\"21\",\r\n\t\t\t\"5\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"0a864c70-4eb1-4111-9a05-25fc6159dd8a\",\r\n\t\t\t\"6\",\r\n\t\t\t\"4\",\r\n\t\t\t\"36\",\r\n\t\t\t\"4\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"5d7a76f5-407e-45ad-9d3e-caccd110bfe0\",\r\n\t\t\t\"7\",\r\n\t\t\t\"1\",\r\n\t\t\t\"14\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"5909e7a8-e402-4e76-b88d-bd152174fbca\",\r\n\t\t\t\"7\",\r\n\t\t\t\"2\",\r\n\t\t\t\"34\",\r\n\t\t\t\"12\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"524bc770-e069-449b-9973-43efc938f351\",\r\n\t\t\t\"7\",\r\n\t\t\t\"3\",\r\n\t\t\t\"16\",\r\n\t\t\t\"15\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"70cba2b2-df16-42ad-99fd-b43e243cbfdc\",\r\n\t\t\t\"7\",\r\n\t\t\t\"4\",\r\n\t\t\t\"11\",\r\n\t\t\t\"7\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"9456f46a-72a4-4e2f-900e-26a4d056901a\",\r\n\t\t\t\"8\",\r\n\t\t\t\"1\",\r\n\t\t\t\"57\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"ab4c4997-f3ea-4a47-ad22-7c2cc73cd5cc\",\r\n\t\t\t\"8\",\r\n\t\t\t\"2\",\r\n\t\t\t\"77\",\r\n\t\t\t\"18\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"b581068d-e240-4ba0-8df5-228fa2c2f4db\",\r\n\t\t\t\"8\",\r\n\t\t\t\"3\",\r\n\t\t\t\"84\",\r\n\t\t\t\"17\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"6e54de07-9b2e-4f88-9e31-28101efc2c5e\",\r\n\t\t\t\"8\",\r\n\t\t\t\"4\",\r\n\t\t\t\"92\",\r\n\t\t\t\"13\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"8160083f-0c23-4cb6-824d-9b9bd7226437\",\r\n\t\t\t\"9\",\r\n\t\t\t\"1\",\r\n\t\t\t\"73\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"b682d671-e83f-4c90-aa92-e52184e6d72a\",\r\n\t\t\t\"9\",\r\n\t\t\t\"2\",\r\n\t\t\t\"69\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"5bf2357a-b346-41bc-bad2-faba1e35994b\",\r\n\t\t\t\"9\",\r\n\t\t\t\"3\",\r\n\t\t\t\"86\",\r\n\t\t\t\"6\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"7fe198f5-b983-4333-8615-9c801218ad61\",\r\n\t\t\t\"9\",\r\n\t\t\t\"4\",\r\n\t\t\t\"94\",\r\n\t\t\t\"18\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"07126092-8b56-4d5e-8f98-118873f2463d\",\r\n\t\t\t\"10\",\r\n\t\t\t\"1\",\r\n\t\t\t\"46\",\r\n\t\t\t\"14\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"9d1a3fa0-c20b-447b-8b10-bd48a269ff61\",\r\n\t\t\t\"10\",\r\n\t\t\t\"2\",\r\n\t\t\t\"9\",\r\n\t\t\t\"5\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"d6c3a7cf-da8c-41be-8656-0312c86dac10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"3\",\r\n\t\t\t\"56\",\r\n\t\t\t\"13\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"d6f29725-e27b-49ea-b2a4-0e8999189728\",\r\n\t\t\t\"10\",\r\n\t\t\t\"4\",\r\n\t\t\t\"27\",\r\n\t\t\t\"18\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"fac0c26d-0dee-4d30-9a53-82d1d78c741f\",\r\n\t\t\t\"11\",\r\n\t\t\t\"1\",\r\n\t\t\t\"36\",\r\n\t\t\t\"16\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"b634d60f-a7bd-4687-99fe-c92e5b067a90\",\r\n\t\t\t\"11\",\r\n\t\t\t\"2\",\r\n\t\t\t\"33\",\r\n\t\t\t\"7\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"5a08eead-02c6-4146-9114-15d04fd5a9eb\",\r\n\t\t\t\"11\",\r\n\t\t\t\"3\",\r\n\t\t\t\"49\",\r\n\t\t\t\"9\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"080603ca-d4ad-4406-9a70-180bffe645b0\",\r\n\t\t\t\"11\",\r\n\t\t\t\"4\",\r\n\t\t\t\"18\",\r\n\t\t\t\"18\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"e6ce6248-4051-40eb-af4b-ecde2569c82a\",\r\n\t\t\t\"12\",\r\n\t\t\t\"1\",\r\n\t\t\t\"19\",\r\n\t\t\t\"4\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"fbf3a70f-1fd0-414a-ac4e-a0f180d4cbb3\",\r\n\t\t\t\"12\",\r\n\t\t\t\"2\",\r\n\t\t\t\"27\",\r\n\t\t\t\"13\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"48b392cb-3179-42c2-8321-05eb6c57afd4\",\r\n\t\t\t\"12\",\r\n\t\t\t\"3\",\r\n\t\t\t\"18\",\r\n\t\t\t\"15\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"2005942c-616e-4747-8ee8-0ad2f66966b6\",\r\n\t\t\t\"12\",\r\n\t\t\t\"4\",\r\n\t\t\t\"57\",\r\n\t\t\t\"16\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"85d04aea-36cf-4b01-ba39-4ede2e9f5c71\",\r\n\t\t\t\"13\",\r\n\t\t\t\"1\",\r\n\t\t\t\"66\",\r\n\t\t\t\"13\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"314a5e14-0bea-458c-b314-602654b36c21\",\r\n\t\t\t\"13\",\r\n\t\t\t\"2\",\r\n\t\t\t\"84\",\r\n\t\t\t\"6\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"93ffeae1-8695-4b8d-94b7-1f59731b804b\",\r\n\t\t\t\"13\",\r\n\t\t\t\"3\",\r\n\t\t\t\"29\",\r\n\t\t\t\"16\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"d683a7eb-d4d3-46f4-aef1-a9c20ed128ca\",\r\n\t\t\t\"13\",\r\n\t\t\t\"4\",\r\n\t\t\t\"73\",\r\n\t\t\t\"4\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"36f04eb5-63e0-4d60-9a58-9d48e1c01f50\",\r\n\t\t\t\"14\",\r\n\t\t\t\"1\",\r\n\t\t\t\"28\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"3cdd899e-55b0-4eac-ab3f-9f40a2626963\",\r\n\t\t\t\"14\",\r\n\t\t\t\"2\",\r\n\t\t\t\"7\",\r\n\t\t\t\"9\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"af24c30b-e91f-4381-be65-34d7412f73b0\",\r\n\t\t\t\"14\",\r\n\t\t\t\"3\",\r\n\t\t\t\"46\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"f0059745-7bb4-4df0-9363-1a01bc7490d5\",\r\n\t\t\t\"14\",\r\n\t\t\t\"4\",\r\n\t\t\t\"71\",\r\n\t\t\t\"9\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"1243686c-5eea-4d33-b2bf-25b7d34150be\",\r\n\t\t\t\"15\",\r\n\t\t\t\"1\",\r\n\t\t\t\"79\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"e8b6a8ec-90aa-4636-9a7a-563418ca54fc\",\r\n\t\t\t\"15\",\r\n\t\t\t\"2\",\r\n\t\t\t\"98\",\r\n\t\t\t\"18\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"c8f6c6f6-b66f-4a1d-8df2-ced6953e176d\",\r\n\t\t\t\"15\",\r\n\t\t\t\"3\",\r\n\t\t\t\"59\",\r\n\t\t\t\"12\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"bc7b2c2e-1b32-4981-b9b1-713d6df8d43e\",\r\n\t\t\t\"15\",\r\n\t\t\t\"4\",\r\n\t\t\t\"74\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"8d23c31b-cd3b-48b6-978c-32061714cf5e\",\r\n\t\t\t\"16\",\r\n\t\t\t\"1\",\r\n\t\t\t\"33\",\r\n\t\t\t\"15\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"71b7d84a-6b59-4f7b-a2e0-92b2e7799a88\",\r\n\t\t\t\"16\",\r\n\t\t\t\"2\",\r\n\t\t\t\"96\",\r\n\t\t\t\"19\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"2c4940bc-9775-4733-aec3-0599692a00e3\",\r\n\t\t\t\"16\",\r\n\t\t\t\"3\",\r\n\t\t\t\"33\",\r\n\t\t\t\"6\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"66c29362-af06-4280-92cd-65ba393dd025\",\r\n\t\t\t\"16\",\r\n\t\t\t\"4\",\r\n\t\t\t\"9\",\r\n\t\t\t\"7\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"d9771cde-0161-40c8-87ea-0e845d2d7f87\",\r\n\t\t\t\"17\",\r\n\t\t\t\"1\",\r\n\t\t\t\"11\",\r\n\t\t\t\"6\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"59879668-5fa8-4ba7-a930-823c30426ccb\",\r\n\t\t\t\"17\",\r\n\t\t\t\"2\",\r\n\t\t\t\"36\",\r\n\t\t\t\"20\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"5d187628-c118-4f45-aeba-c81328d33f0e\",\r\n\t\t\t\"17\",\r\n\t\t\t\"3\",\r\n\t\t\t\"56\",\r\n\t\t\t\"8\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"86216685-143a-402d-8d52-cccf76c8f949\",\r\n\t\t\t\"17\",\r\n\t\t\t\"4\",\r\n\t\t\t\"62\",\r\n\t\t\t\"8\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"dfc52e00-8a51-4f91-b0b3-a364697da9aa\",\r\n\t\t\t\"18\",\r\n\t\t\t\"1\",\r\n\t\t\t\"68\",\r\n\t\t\t\"5\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"9b745a60-23af-4530-8a10-c002b4cf5061\",\r\n\t\t\t\"18\",\r\n\t\t\t\"2\",\r\n\t\t\t\"33\",\r\n\t\t\t\"15\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"ed32ad4d-711e-4774-b83b-f98aa3e6c4fa\",\r\n\t\t\t\"18\",\r\n\t\t\t\"3\",\r\n\t\t\t\"79\",\r\n\t\t\t\"19\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"d3f269e0-b77e-47e7-906d-554b93060ba6\",\r\n\t\t\t\"18\",\r\n\t\t\t\"4\",\r\n\t\t\t\"78\",\r\n\t\t\t\"16\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"810e5db4-c7ca-466e-a9d7-cb7edde9e531\",\r\n\t\t\t\"19\",\r\n\t\t\t\"1\",\r\n\t\t\t\"60\",\r\n\t\t\t\"4\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"34f406a9-60c6-4957-a644-4a9e16e52382\",\r\n\t\t\t\"19\",\r\n\t\t\t\"2\",\r\n\t\t\t\"17\",\r\n\t\t\t\"14\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"6cf3bc95-85ff-499c-a1f4-84a565f4a4d2\",\r\n\t\t\t\"19\",\r\n\t\t\t\"3\",\r\n\t\t\t\"14\",\r\n\t\t\t\"13\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"a125b0f7-a1b4-4be5-bbcd-50efffa8fbd3\",\r\n\t\t\t\"19\",\r\n\t\t\t\"4\",\r\n\t\t\t\"70\",\r\n\t\t\t\"20\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"0e7688f7-7e7f-435b-bd86-fa541aa4eb13\",\r\n\t\t\t\"20\",\r\n\t\t\t\"1\",\r\n\t\t\t\"77\",\r\n\t\t\t\"16\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"c7cb7363-9d1c-4080-82d7-ef302280baf1\",\r\n\t\t\t\"20\",\r\n\t\t\t\"2\",\r\n\t\t\t\"69\",\r\n\t\t\t\"15\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"7008760c-5e8f-4d6f-9986-c47e8d2a23cb\",\r\n\t\t\t\"20\",\r\n\t\t\t\"3\",\r\n\t\t\t\"46\",\r\n\t\t\t\"7\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"c371cb1e-c0f9-4129-8900-460fff2b58ff\",\r\n\t\t\t\"20\",\r\n\t\t\t\"4\",\r\n\t\t\t\"35\",\r\n\t\t\t\"20\"\r\n\t\t]\r\n\t],\r\n\t\"draftMode\": true\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_subobs2_datasetId}}/observationUnits/observations",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_subobs2_datasetId}}",
										"observationUnits",
										"observations"
									]
								},
								"description": "PUT ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/variables"
							},
							"response": []
						},
						{
							"name": "Set out of bound observations as missing",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "04a01fb1-0ef1-4993-9227-8733afbced19",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "77eece91-ec7e-4384-9de8-3a7cf9d467eb",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"draftMode\": true,\r\n\t\"filter\": {\r\n\t\t\"byOutOfBound\": null,\r\n\t\t\"byMissing\": null,\r\n\t\t\"byOutOfSync\": null,\r\n\t\t\"byOverwritten\": null,\r\n\t\t\"variableId\": 18090,\r\n\t\t\"filterColumns\": [],\r\n\t\t\"filteredValues\": {},\r\n\t\t\"filteredTextValues\": {},\r\n\t\t\"variableTypeMap\": {\r\n\t\t\t\"8170\": null,\r\n\t\t\t\"8200\": \"EXPERIMENTAL_DESIGN\",\r\n\t\t\t\"8201\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8207\": \"OBSERVATION_UNIT\",\r\n\t\t\t\"8230\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8240\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8250\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8255\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"18090\": \"TRAIT\"\r\n\t\t}\r\n\t}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_subobs2_datasetId}}/observation-units/drafts/set-as-missing",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_subobs2_datasetId}}",
										"observation-units",
										"drafts",
										"set-as-missing"
									]
								},
								"description": "POST ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/observation-units​/drafts​/set-as-missing"
							},
							"response": []
						},
						{
							"name": "Set out of bound observations as missing with invalid crop",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "95e2b103-954a-47a2-9a81-935c44806dfd",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Check error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Invalid crop \"+pm.environment.get(\"invalidCrop\")+\" for URL:/crops/\"+pm.environment.get(\"invalidCrop\")+\"/programs/\"+pm.environment.get(\"api_program_id\")+\"/studies/\"+pm.environment.get(\"studyId\")+\"/datasets/\"+pm.environment.get(\"study_subobs2_datasetId\")+\"/observation-units/drafts/set-as-missing\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e02e3d8f-28b5-4e87-8c87-148fdf4778cc",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"draftMode\": true,\r\n\t\"filter\": {\r\n\t\t\"byOutOfBound\": null,\r\n\t\t\"byMissing\": null,\r\n\t\t\"byOutOfSync\": null,\r\n\t\t\"byOverwritten\": null,\r\n\t\t\"variableId\": 18090,\r\n\t\t\"filterColumns\": [],\r\n\t\t\"filteredValues\": {},\r\n\t\t\"filteredTextValues\": {},\r\n\t\t\"variableTypeMap\": {\r\n\t\t\t\"8170\": null,\r\n\t\t\t\"8200\": \"EXPERIMENTAL_DESIGN\",\r\n\t\t\t\"8201\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8207\": \"OBSERVATION_UNIT\",\r\n\t\t\t\"8230\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8240\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8250\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8255\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"18090\": \"TRAIT\"\r\n\t\t}\r\n\t}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{invalidCrop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_subobs2_datasetId}}/observation-units/drafts/set-as-missing",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{invalidCrop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_subobs2_datasetId}}",
										"observation-units",
										"drafts",
										"set-as-missing"
									]
								},
								"description": "POST ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/observation-units​/drafts​/set-as-missing"
							},
							"response": []
						},
						{
							"name": "Set out of bound observations as missing with invalid program",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7f42b658-8c9f-4434-9fa6-d4b87a257ce4",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Check error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Invalid program: invalid for crop: \"+pm.environment.get(\"crop\")+\" for service with path /crops/\"+pm.environment.get(\"crop\")+\"/programs/invalid/studies/\"+pm.environment.get(\"studyId\")+\"/datasets/\"+pm.environment.get(\"study_subobs2_datasetId\")+\"/observation-units/drafts/set-as-missing\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "85ec3f2c-79dc-4fe3-a0ef-5abcfe321656",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"draftMode\": true,\r\n\t\"filter\": {\r\n\t\t\"byOutOfBound\": null,\r\n\t\t\"byMissing\": null,\r\n\t\t\"byOutOfSync\": null,\r\n\t\t\"byOverwritten\": null,\r\n\t\t\"variableId\": 18090,\r\n\t\t\"filterColumns\": [],\r\n\t\t\"filteredValues\": {},\r\n\t\t\"filteredTextValues\": {},\r\n\t\t\"variableTypeMap\": {\r\n\t\t\t\"8170\": null,\r\n\t\t\t\"8200\": \"EXPERIMENTAL_DESIGN\",\r\n\t\t\t\"8201\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8207\": \"OBSERVATION_UNIT\",\r\n\t\t\t\"8230\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8240\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8250\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8255\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"18090\": \"TRAIT\"\r\n\t\t}\r\n\t}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/invalid/studies/{{studyId}}/datasets/{{study_subobs2_datasetId}}/observation-units/drafts/set-as-missing",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"invalid",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_subobs2_datasetId}}",
										"observation-units",
										"drafts",
										"set-as-missing"
									]
								},
								"description": "POST ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/observation-units​/drafts​/set-as-missing"
							},
							"response": []
						},
						{
							"name": "Set out of bound observations as missing with non-existing studyId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "27f4523b-303c-4bc2-8811-3f09ce5a1a79",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"pm.test(\"Check error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Study does not exist\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "85df09ed-427d-43e6-af7c-f9ecdb928ed0",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"draftMode\": true,\r\n\t\"filter\": {\r\n\t\t\"byOutOfBound\": null,\r\n\t\t\"byMissing\": null,\r\n\t\t\"byOutOfSync\": null,\r\n\t\t\"byOverwritten\": null,\r\n\t\t\"variableId\": 18090,\r\n\t\t\"filterColumns\": [],\r\n\t\t\"filteredValues\": {},\r\n\t\t\"filteredTextValues\": {},\r\n\t\t\"variableTypeMap\": {\r\n\t\t\t\"8170\": null,\r\n\t\t\t\"8200\": \"EXPERIMENTAL_DESIGN\",\r\n\t\t\t\"8201\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8207\": \"OBSERVATION_UNIT\",\r\n\t\t\t\"8230\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8240\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8250\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8255\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"18090\": \"TRAIT\"\r\n\t\t}\r\n\t}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{non_existing_study_id}}/datasets/{{study_subobs2_datasetId}}/observation-units/drafts/set-as-missing",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{non_existing_study_id}}",
										"datasets",
										"{{study_subobs2_datasetId}}",
										"observation-units",
										"drafts",
										"set-as-missing"
									]
								},
								"description": "POST ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/observation-units​/drafts​/set-as-missing"
							},
							"response": []
						},
						{
							"name": "Set out of bound observations as missing with non-existing datasetId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cb31d187-5bb4-4f19-ac95-d9119e8231a4",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"pm.test(\"Check error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Dataset does not exist\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ba8e6785-9564-4ea4-b748-2e2f5e058733",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"draftMode\": true,\r\n\t\"filter\": {\r\n\t\t\"byOutOfBound\": null,\r\n\t\t\"byMissing\": null,\r\n\t\t\"byOutOfSync\": null,\r\n\t\t\"byOverwritten\": null,\r\n\t\t\"variableId\": 18090,\r\n\t\t\"filterColumns\": [],\r\n\t\t\"filteredValues\": {},\r\n\t\t\"filteredTextValues\": {},\r\n\t\t\"variableTypeMap\": {\r\n\t\t\t\"8170\": null,\r\n\t\t\t\"8200\": \"EXPERIMENTAL_DESIGN\",\r\n\t\t\t\"8201\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8207\": \"OBSERVATION_UNIT\",\r\n\t\t\t\"8230\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8240\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8250\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8255\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"18090\": \"TRAIT\"\r\n\t\t}\r\n\t}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{non_existing_dataset_id}}/observation-units/drafts/set-as-missing",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{non_existing_dataset_id}}",
										"observation-units",
										"drafts",
										"set-as-missing"
									]
								},
								"description": "POST ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/observation-units​/drafts​/set-as-missing"
							},
							"response": []
						},
						{
							"name": "Set out of bound observations as missing with datasetId that does not belong to the study",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "853499ae-fc68-44ed-83ac-5975877163c0",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Check error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Specified dataset \"+pm.environment.get(\"study_plot_dataset_id_noPhenoCount\")+\" does not belong to the study \"+pm.environment.get(\"studyId\"));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "81e3fb6e-fec2-40a5-a23e-38e288803f68",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"draftMode\": true,\r\n\t\"filter\": {\r\n\t\t\"byOutOfBound\": null,\r\n\t\t\"byMissing\": null,\r\n\t\t\"byOutOfSync\": null,\r\n\t\t\"byOverwritten\": null,\r\n\t\t\"variableId\": 18090,\r\n\t\t\"filterColumns\": [],\r\n\t\t\"filteredValues\": {},\r\n\t\t\"filteredTextValues\": {},\r\n\t\t\"variableTypeMap\": {\r\n\t\t\t\"8170\": null,\r\n\t\t\t\"8200\": \"EXPERIMENTAL_DESIGN\",\r\n\t\t\t\"8201\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8207\": \"OBSERVATION_UNIT\",\r\n\t\t\t\"8230\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8240\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8250\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8255\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"18090\": \"TRAIT\"\r\n\t\t}\r\n\t}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_dataset_id_noPhenoCount}}/observation-units/drafts/set-as-missing",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_dataset_id_noPhenoCount}}",
										"observation-units",
										"drafts",
										"set-as-missing"
									]
								},
								"description": "POST ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/observation-units​/drafts​/set-as-missing"
							},
							"response": []
						},
						{
							"name": "Retrieve observation units of after updating filtered phenotype",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a1571e90-e7c2-4bda-a1bb-ce9856e715af",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Check records filtered \", function () {",
											"    pm.expect(jsonData.recordsFiltered).to.eql(80);",
											"});",
											"pm.test(\"Check records total\", function () {",
											"    pm.expect(jsonData.recordsFiltered).to.eql(80);",
											"});",
											"",
											"//Check data at index 0",
											"",
											"var index = 0;",
											"",
											"var observationUnitIds = [];",
											"var observationIds = [];",
											"",
											"",
											"for (var i = 0; i < jsonData.data.length; i++){",
											"  var selectedData = jsonData.data[i];",
											"  observationUnitIds[i] = selectedData.observationUnitId;",
											"  observationIds[i] = selectedData.variables.PestPressure_0_9.observationId",
											"  console.log(observationIds[i]);",
											"}",
											"",
											"pm.environment.unset(\"observationUnitIds\");",
											"pm.environment.unset(\"observationIds\");",
											"pm.environment.set(\"observationUnitIds\", JSON.stringify(observationUnitIds));",
											"pm.environment.set(\"observationIds\", JSON.stringify(observationIds));",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "032c9ccc-db06-42a7-91e6-fb6e11e4157f",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"draw\": 1,\r\n\t\"sortedRequest\": {\r\n\t\t\"pageSize\": 50,\r\n\t\t\"pageNumber\": 1,\r\n\t\t\"sortBy\": 8200,\r\n\t\t\"sortOrder\": \"asc\"\r\n\t},\r\n\t\"instanceId\": 1,\r\n\t\"draftMode\": false,\r\n\t\"filter\": {\r\n\t\t\"byOutOfBound\": null,\r\n\t\t\"byMissing\": null,\r\n\t\t\"byOutOfSync\": null,\r\n\t\t\"byOverwritten\": null,\r\n\t\t\"variableId\": null,\r\n\t\t\"filterColumns\": [],\r\n\t\t\"filteredValues\": {},\r\n\t\t\"filteredTextValues\": {},\r\n\t\t\"variableTypeMap\": {\r\n\t\t\t\"8170\": null,\r\n\t\t\t\"8200\": \"EXPERIMENTAL_DESIGN\",\r\n\t\t\t\"8201\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8207\": \"OBSERVATION_UNIT\",\r\n\t\t\t\"8230\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8240\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8250\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8255\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"18010\": \"TRAIT\",\r\n\t\t\t\"18090\": \"TRAIT\"\r\n\t\t}\r\n\t}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_subobs2_datasetId}}/observationUnits/table",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_subobs2_datasetId}}",
										"observationUnits",
										"table"
									]
								},
								"description": "POST ​/crops​/{cropname}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/observationUnits​/table"
							},
							"response": []
						},
						{
							"name": "Delete observation of catgorical variable with missing values",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d77005ae-7677-48f9-8328-7264f9daf177",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var observationUnitIds = [];",
											"observationUnitIds = JSON.parse(pm.environment.get(\"observationUnitIds\"));",
											"var observationIds = [];",
											"observationIds = JSON.parse(pm.environment.get(\"observationIds\"));",
											"",
											"if(observationUnitIds.length && observationIds.length > 0){",
											"postman.setNextRequest(\"Delete observation of catgorical variable with missing values\");",
											"}else{",
											"    postman.setNextRequest(null);",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b10710e1-34e7-40c8-9f52-0c57c3624946",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}\r",
											"\r",
											"var observationUnitIds = [];\r",
											"observationUnitIds = JSON.parse(pm.environment.get(\"observationUnitIds\"));\r",
											"var observationIds = [];\r",
											"observationIds = JSON.parse(pm.environment.get(\"observationIds\"));\r",
											"console.log(observationUnitIds.length);\r",
											"var current_observationUnitId = observationUnitIds.shift();\r",
											"var current_observationId = observationIds.shift();\r",
											"pm.environment.set(\"observationUnitId\", current_observationUnitId);\r",
											"pm.environment.set(\"observationId\", current_observationId);\r",
											"pm.environment.set(\"observationUnitIds\", JSON.stringify(observationUnitIds));\r",
											"pm.environment.set(\"observationIds\", JSON.stringify(observationIds));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"processWarnings\": true,\r\n\t\"data\": [\r\n\t\t[\r\n\t\t\t\"TRIAL_INSTANCE\",\r\n\t\t\t\"PI_NAME\",\r\n\t\t\t\"EXPT_DESIGN\",\r\n\t\t\t\"LOCATION_ID\",\r\n\t\t\t\"LOCATION_NAME\",\r\n\t\t\t\"Crop_season_Code\",\r\n\t\t\t\"ENTRY_TYPE\",\r\n\t\t\t\"GID\",\r\n\t\t\t\"DESIGNATION\",\r\n\t\t\t\"ENTRY_NO\",\r\n\t\t\t\"OBS_UNIT_ID\",\r\n\t\t\t\"PLOT_NO\",\r\n\t\t\t\"WeedPressure_number\",\r\n\t\t\t\"Grain_yield\",\r\n\t\t\t\"Biomas_yield\",\r\n\t\t\t\"InputVariable\",\r\n\t\t\t\"NPSEL\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"PKWDPtLOzD8Sz\",\r\n\t\t\t\"1\",\r\n\t\t\t\"21\",\r\n\t\t\t\"23\",\r\n\t\t\t\"40\",\r\n\t\t\t\"338\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"PKWDP6ME6bt1l\",\r\n\t\t\t\"2\",\r\n\t\t\t\"15\",\r\n\t\t\t\"12\",\r\n\t\t\t\"45\",\r\n\t\t\t\"285\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"PKWDPe2za6TM7\",\r\n\t\t\t\"3\",\r\n\t\t\t\"12\",\r\n\t\t\t\"41\",\r\n\t\t\t\"32\",\r\n\t\t\t\"176\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"PKWDPEV6LPs1N\",\r\n\t\t\t\"4\",\r\n\t\t\t\"46\",\r\n\t\t\t\"49\",\r\n\t\t\t\"33\",\r\n\t\t\t\"488\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"PKWDPU27n9e9L\",\r\n\t\t\t\"5\",\r\n\t\t\t\"33\",\r\n\t\t\t\"41\",\r\n\t\t\t\"28\",\r\n\t\t\t\"397\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"PKWDPmpZgUu6S\",\r\n\t\t\t\"6\",\r\n\t\t\t\"48\",\r\n\t\t\t\"17\",\r\n\t\t\t\"35\",\r\n\t\t\t\"463\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"PKWDP0M9lGBzz\",\r\n\t\t\t\"7\",\r\n\t\t\t\"34\",\r\n\t\t\t\"16\",\r\n\t\t\t\"49\",\r\n\t\t\t\"105\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"PKWDPsCKr80ks\",\r\n\t\t\t\"8\",\r\n\t\t\t\"17\",\r\n\t\t\t\"28\",\r\n\t\t\t\"15\",\r\n\t\t\t\"379\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"PKWDPDotBpZ1y\",\r\n\t\t\t\"9\",\r\n\t\t\t\"45\",\r\n\t\t\t\"28\",\r\n\t\t\t\"49\",\r\n\t\t\t\"424\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"PKWDPCYuyqdql\",\r\n\t\t\t\"10\",\r\n\t\t\t\"41\",\r\n\t\t\t\"26\",\r\n\t\t\t\"10\",\r\n\t\t\t\"188\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"PKWDP0fPOkMaC\",\r\n\t\t\t\"11\",\r\n\t\t\t\"39\",\r\n\t\t\t\"20\",\r\n\t\t\t\"31\",\r\n\t\t\t\"471\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"PKWDPGN6nYdv2\",\r\n\t\t\t\"12\",\r\n\t\t\t\"48\",\r\n\t\t\t\"46\",\r\n\t\t\t\"12\",\r\n\t\t\t\"395\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"PKWDPZ19QRNrq\",\r\n\t\t\t\"13\",\r\n\t\t\t\"24\",\r\n\t\t\t\"27\",\r\n\t\t\t\"17\",\r\n\t\t\t\"340\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"PKWDPPh1TNHCh\",\r\n\t\t\t\"14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"36\",\r\n\t\t\t\"13\",\r\n\t\t\t\"299\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"PKWDPH6Q51k29\",\r\n\t\t\t\"15\",\r\n\t\t\t\"37\",\r\n\t\t\t\"20\",\r\n\t\t\t\"15\",\r\n\t\t\t\"408\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"PKWDP2mpwUmS5\",\r\n\t\t\t\"16\",\r\n\t\t\t\"36\",\r\n\t\t\t\"40\",\r\n\t\t\t\"50\",\r\n\t\t\t\"472\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"PKWDP07BrGxf2\",\r\n\t\t\t\"17\",\r\n\t\t\t\"25\",\r\n\t\t\t\"29\",\r\n\t\t\t\"49\",\r\n\t\t\t\"138\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"PKWDPROG6tAJg\",\r\n\t\t\t\"18\",\r\n\t\t\t\"45\",\r\n\t\t\t\"12\",\r\n\t\t\t\"32\",\r\n\t\t\t\"356\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"PKWDPUWYGDKwm\",\r\n\t\t\t\"19\",\r\n\t\t\t\"36\",\r\n\t\t\t\"44\",\r\n\t\t\t\"37\",\r\n\t\t\t\"423\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"PKWDPVGUhe5T1\",\r\n\t\t\t\"20\",\r\n\t\t\t\"49\",\r\n\t\t\t\"49\",\r\n\t\t\t\"50\",\r\n\t\t\t\"193\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"dc6a207b-b4eb-42d5-a5b7-b1262193e961\",\r\n\t\t\t\"1\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"125\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"f425bdec-fdc1-41cb-8d4b-19179d9ed7a9\",\r\n\t\t\t\"2\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"337\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"9fe3ff35-a57f-4dc2-b682-d69881ebd3e8\",\r\n\t\t\t\"3\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"317\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"48851c5a-132f-4df2-8139-1b0f8ba4ea13\",\r\n\t\t\t\"4\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"497\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"97b9bbb8-e390-4c6c-a688-3676c7a322a1\",\r\n\t\t\t\"5\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"496\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"5d53e82d-ea2c-42de-8255-5150462cc9e2\",\r\n\t\t\t\"6\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"114\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"bab7f29e-f1ec-4d0a-91a3-08cc0121fffc\",\r\n\t\t\t\"7\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"102\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"6117a4e4-2d58-4020-a047-7d0f568379df\",\r\n\t\t\t\"8\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"479\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"41c3a00c-c372-442c-b87c-b7329e1457ac\",\r\n\t\t\t\"9\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"140\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"0542e1ee-2535-44f7-bf41-fb4787f2de52\",\r\n\t\t\t\"10\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"280\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"02ccc497-fb94-4dcc-83dd-21f5db43f43e\",\r\n\t\t\t\"11\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"437\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"05883cec-d339-4cd0-b763-67f7d9d543ff\",\r\n\t\t\t\"12\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"354\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"74a8d502-8b17-4d96-8741-b38d294ae601\",\r\n\t\t\t\"13\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"430\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"72476b15-4090-46bc-be2f-e4e86171af50\",\r\n\t\t\t\"14\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"478\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"980a592b-bf45-4cbe-8ede-2c0d1d6302c4\",\r\n\t\t\t\"15\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"462\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"e50aeb0a-42ef-45f6-a247-e426f0cbd39c\",\r\n\t\t\t\"16\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"271\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"b7440ad5-4836-44e8-96ba-687e1c7fb0bb\",\r\n\t\t\t\"17\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"479\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"a0b745fd-d1de-45d0-9e86-42021ce43d43\",\r\n\t\t\t\"18\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"305\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"4fca59a2-84c1-40d2-b5a7-86ab957f00cc\",\r\n\t\t\t\"19\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"372\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"9129d101-c4ac-43cf-a818-079d4365c2d5\",\r\n\t\t\t\"20\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"459\",\r\n\t\t\t\"\"\r\n\t\t]\r\n\t],\r\n\t\"draftMode\": true\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_subobs2_datasetId}}/observationUnits/{{observationUnitId}}/observations/{{observationId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_subobs2_datasetId}}",
										"observationUnits",
										"{{observationUnitId}}",
										"observations",
										"{{observationId}}"
									]
								},
								"description": "DELETE ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/observationUnits​/{observationUnitId}​/observations​/{observationId}"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "variable-filter-resource",
			"item": [
				{
					"name": "Verify response when filtered by required parameters only",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "876b7c92-b437-4d60-89fb-3aeaf2156868",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Note: Checked details of first, middle and last property only for all properties are too many.\r",
									"pm.test(\"Check ACCNO variable\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0].id).to.eql(\"8310\");\r",
									"    pm.expect(jsonData[0].name).to.eql(\"ACCNO\");\r",
									"    pm.expect(jsonData[0].description).to.eql(\"Germplasm ID - Assigned (Accession name)\");\r",
									"    //Check properties\r",
									"    pm.expect(jsonData[0].property.id).to.eql(\"2205\");\r",
									"    pm.expect(jsonData[0].property.name).to.eql(\"Germplasm id\");\r",
									"    pm.expect(jsonData[0].property.description).to.eql(\"Germplasm identifier\");\r",
									"    \r",
									"    //Check method\r",
									"    pm.expect(jsonData[0].method.id).to.eql(\"4030\");\r",
									"    pm.expect(jsonData[0].method.name).to.eql(\"Assigned\");\r",
									"    pm.expect(jsonData[0].method.description).to.eql(\"Term, name or id assigned\");    \r",
									"    \r",
									"   //Check scale\r",
									"    pm.expect(jsonData[0].scale.id).to.eql(\"6110\");\r",
									"    pm.expect(jsonData[0].scale.name).to.eql(\"Accession name\");\r",
									"    pm.expect(jsonData[0].scale.description).to.eql(\"Unique accession number or name in a genebank or germplasm collection\");    \r",
									"    \r",
									"    \r",
									"   //Check variableTypes\r",
									"    pm.expect(jsonData[0].variableTypes[0].id).to.eql(\"1804\");\r",
									"    pm.expect(jsonData[0].variableTypes[0].name).to.eql(\"Germplasm Descriptor\");\r",
									"    pm.expect(jsonData[0].variableTypes[0].description).to.eql(\"Information to be recorded about each germplasm in a study.\"); \r",
									"    \r",
									"});\r",
									"\r",
									"pm.test(\"Check NOTES variable\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[81].id).to.eql(\"8390\");\r",
									"    pm.expect(jsonData[81].name).to.eql(\"NOTES\");\r",
									"    pm.expect(jsonData[81].description).to.eql(\"Field notes - observed (text)\");\r",
									"    //Check properties\r",
									"    pm.expect(jsonData[81].property.id).to.eql(\"2065\");\r",
									"    pm.expect(jsonData[81].property.name).to.eql(\"Comment\");\r",
									"    pm.expect(jsonData[81].property.description).to.eql(\"Comment\");\r",
									"    \r",
									"    //Check method\r",
									"    pm.expect(jsonData[81].method.id).to.eql(\"4110\");\r",
									"    pm.expect(jsonData[81].method.name).to.eql(\"Observed\");\r",
									"    pm.expect(jsonData[81].method.description).to.eql(\"Value recorded after observation\");    \r",
									"    \r",
									"   //Check scale\r",
									"    pm.expect(jsonData[81].scale.id).to.eql(\"6020\");\r",
									"    pm.expect(jsonData[81].scale.name).to.eql(\"Text\");\r",
									"    pm.expect(jsonData[81].scale.description).to.eql(\"Text\");    \r",
									"    \r",
									"    \r",
									"   //Check variableTypes\r",
									"    pm.expect(jsonData[81].variableTypes[0].id).to.eql(\"1808\");\r",
									"    pm.expect(jsonData[81].variableTypes[0].name).to.eql(\"Trait\");\r",
									"    pm.expect(jsonData[81].variableTypes[0].description).to.eql(\"Characteristics of a germplasm to be recorded during a study.\");   \r",
									"    \r",
									"});\r",
									"\r",
									"pm.test(\"Check TranspltD_date variable\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[166].id).to.eql(\"8384\");\r",
									"    pm.expect(jsonData[166].name).to.eql(\"TranspltD_date\");\r",
									"    pm.expect(jsonData[166].description).to.eql(\"Date Transplanted -applied (yyyymmdd)\");\r",
									"    //Check properties\r",
									"    pm.expect(jsonData[166].property.id).to.eql(\"2056\");\r",
									"    pm.expect(jsonData[166].property.name).to.eql(\"Transplanting date\");\r",
									"    pm.expect(jsonData[166].property.description).to.eql(\"Transplanting date\");\r",
									"    \r",
									"    //Check method\r",
									"    pm.expect(jsonData[166].method.id).to.eql(\"4020\");\r",
									"    pm.expect(jsonData[166].method.name).to.eql(\"Applied\");\r",
									"    pm.expect(jsonData[166].method.description).to.eql(\"Factor applied\");    \r",
									"    \r",
									"    \r",
									"   //Check scale\r",
									"    pm.expect(jsonData[166].scale.id).to.eql(\"17275\");\r",
									"    pm.expect(jsonData[166].scale.name).to.eql(\"Date (yyyymmdd) of TranspltD_date\");\r",
									"    pm.expect(jsonData[166].scale.description).to.eql(\"Date (yyyymmdd) ofTranspltD_date_generated\");    \r",
									"    \r",
									"    \r",
									"   //Check variableTypes\r",
									"    pm.expect(jsonData[166].variableTypes[0].id).to.eql(\"1806\");\r",
									"    pm.expect(jsonData[166].variableTypes[0].name).to.eql(\"Environment Detail\");\r",
									"    pm.expect(jsonData[166].variableTypes[0].description).to.eql(\"Administrative details to be tracked per environment.\");   \r",
									"    \r",
									"    pm.expect(jsonData[166].variableTypes[1].id).to.eql(\"1805\");\r",
									"    pm.expect(jsonData[166].variableTypes[1].name).to.eql(\"Study Detail\");\r",
									"    pm.expect(jsonData[166].variableTypes[1].description).to.eql(\"Administrative details to be tracked per study.\");   \r",
									"    \r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "1b809368-5d76-4bc5-8775-5ff1b42b78d8",
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "X-Auth-Token",
								"value": "{{masterToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BMSurl}}/crops/{{crop}}/variables/filter?programUUID={{api_program_id}}&methodIds=&scaleIds=&variableIds=&exclusionVariableIds=&dataTypeIds=&variableTypeIds=&propertyClasses=",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"crops",
								"{{crop}}",
								"variables",
								"filter"
							],
							"query": [
								{
									"key": "programUUID",
									"value": "{{api_program_id}}"
								},
								{
									"key": "methodIds",
									"value": ""
								},
								{
									"key": "scaleIds",
									"value": ""
								},
								{
									"key": "variableIds",
									"value": ""
								},
								{
									"key": "exclusionVariableIds",
									"value": ""
								},
								{
									"key": "dataTypeIds",
									"value": ""
								},
								{
									"key": "variableTypeIds",
									"value": ""
								},
								{
									"key": "propertyClasses",
									"value": ""
								}
							]
						},
						"description": "GET /ontology/{cropname}/filtervariables"
					},
					"response": []
				},
				{
					"name": "Verify response when filtered by propertyId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c2b2f463-0539-4f5a-8baf-6c510a2076b9",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Check all property ids are equal to input parameter\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    var i;\r",
									"    for (i = 0; i < jsonData.length; i++) { \r",
									"    pm.expect(jsonData[i].property.id).to.eql(pm.environment.get(\"trial_instance_property_id\"));\r",
									"    }\r",
									"});    \r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "88366c2e-6315-4399-a45d-9235123a88ba",
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "X-Auth-Token",
								"value": "{{masterToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BMSurl}}/crops/{{crop}}/variables/filter?programUUID={{api_program_id}}&propertyIds={{trial_instance_property_id}}&methodIds=&scaleIds=&variableIds=&exclusionVariableIds=&dataTypeIds=&variableTypeIds=&propertyClasses=",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"crops",
								"{{crop}}",
								"variables",
								"filter"
							],
							"query": [
								{
									"key": "programUUID",
									"value": "{{api_program_id}}"
								},
								{
									"key": "propertyIds",
									"value": "{{trial_instance_property_id}}"
								},
								{
									"key": "methodIds",
									"value": ""
								},
								{
									"key": "scaleIds",
									"value": ""
								},
								{
									"key": "variableIds",
									"value": ""
								},
								{
									"key": "exclusionVariableIds",
									"value": ""
								},
								{
									"key": "dataTypeIds",
									"value": ""
								},
								{
									"key": "variableTypeIds",
									"value": ""
								},
								{
									"key": "propertyClasses",
									"value": ""
								}
							]
						},
						"description": "GET /ontology/{cropname}/filtervariables"
					},
					"response": []
				},
				{
					"name": "Verify response when filtered by methodId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e7e38f2c-fb6e-48d0-a1e9-158268c00d96",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Check all method ids are equal to input parameter\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    var i;\r",
									"    for (i = 0; i < jsonData.length; i++) { \r",
									"    pm.expect(jsonData[i].method.id).to.eql(pm.environment.get(\"weighed_method_id\"));\r",
									"    }\r",
									"});    \r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "e7a16dc6-e414-493f-a156-1a8cbf97023c",
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "X-Auth-Token",
								"value": "{{masterToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BMSurl}}/crops/{{crop}}/variables/filter?programUUID={{api_program_id}}&propertyIds=&methodIds={{weighed_method_id}}&scaleIds=&variableIds=&exclusionVariableIds=&dataTypeIds=&variableTypeIds=&propertyClasses=",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"crops",
								"{{crop}}",
								"variables",
								"filter"
							],
							"query": [
								{
									"key": "programUUID",
									"value": "{{api_program_id}}"
								},
								{
									"key": "propertyIds",
									"value": ""
								},
								{
									"key": "methodIds",
									"value": "{{weighed_method_id}}"
								},
								{
									"key": "scaleIds",
									"value": ""
								},
								{
									"key": "variableIds",
									"value": ""
								},
								{
									"key": "exclusionVariableIds",
									"value": ""
								},
								{
									"key": "dataTypeIds",
									"value": ""
								},
								{
									"key": "variableTypeIds",
									"value": ""
								},
								{
									"key": "propertyClasses",
									"value": ""
								}
							]
						},
						"description": "GET /ontology/{cropname}/filtervariables"
					},
					"response": []
				},
				{
					"name": "Verify response when filtered by scaleId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f3d6be54-93b3-47f3-bbfa-571e7d9f4042",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Check all scale ids are equal to input parameter\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    var i;\r",
									"    for (i = 0; i < jsonData.length; i++) { \r",
									"    pm.expect(jsonData[i].scale.id).to.eql(pm.environment.get(\"number_scale_id\"));\r",
									"    }\r",
									"});    \r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "fb5509ee-0160-4588-b4db-6ee7a162ac72",
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "X-Auth-Token",
								"type": "text",
								"value": "{{masterToken}}"
							}
						],
						"url": {
							"raw": "{{BMSurl}}/crops/{{crop}}/variables/filter?programUUID={{api_program_id}}&propertyIds=&methodIds=&scaleIds={{number_scale_id}}&variableIds=&exclusionVariableIds=&dataTypeIds=&variableTypeIds=&propertyClasses=",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"crops",
								"{{crop}}",
								"variables",
								"filter"
							],
							"query": [
								{
									"key": "programUUID",
									"value": "{{api_program_id}}"
								},
								{
									"key": "propertyIds",
									"value": ""
								},
								{
									"key": "methodIds",
									"value": ""
								},
								{
									"key": "scaleIds",
									"value": "{{number_scale_id}}"
								},
								{
									"key": "variableIds",
									"value": ""
								},
								{
									"key": "exclusionVariableIds",
									"value": ""
								},
								{
									"key": "dataTypeIds",
									"value": ""
								},
								{
									"key": "variableTypeIds",
									"value": ""
								},
								{
									"key": "propertyClasses",
									"value": ""
								}
							]
						},
						"description": "GET /ontology/{cropname}/filtervariables"
					},
					"response": []
				},
				{
					"name": "Verify response when filtered by variableId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "78923f5e-b3ba-4131-b193-b2e7b2f11f3b",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Check all variableIds are equal to input parameter\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    var i;\r",
									"    for (i = 0; i < jsonData.length ; i++) { \r",
									"    pm.expect(jsonData[i].id).to.eql(pm.environment.get(\"study_biomass_cvterm_id\"));\r",
									"    }\r",
									"});    \r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "1ada35dd-840a-41cc-9cbc-10d3f5be8d22",
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "X-Auth-Token",
								"type": "text",
								"value": "{{masterToken}}"
							}
						],
						"url": {
							"raw": "{{BMSurl}}/crops/{{crop}}/variables/filter?programUUID={{api_program_id}}&propertyIds=&methodIds=&scaleIds=&variableIds={{study_biomass_cvterm_id}}&exclusionVariableIds=&dataTypeIds=&variableTypeIds=&propertyClasses=",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"crops",
								"{{crop}}",
								"variables",
								"filter"
							],
							"query": [
								{
									"key": "programUUID",
									"value": "{{api_program_id}}"
								},
								{
									"key": "propertyIds",
									"value": ""
								},
								{
									"key": "methodIds",
									"value": ""
								},
								{
									"key": "scaleIds",
									"value": ""
								},
								{
									"key": "variableIds",
									"value": "{{study_biomass_cvterm_id}}"
								},
								{
									"key": "exclusionVariableIds",
									"value": ""
								},
								{
									"key": "dataTypeIds",
									"value": ""
								},
								{
									"key": "variableTypeIds",
									"value": ""
								},
								{
									"key": "propertyClasses",
									"value": ""
								}
							]
						},
						"description": "GET /ontology/{cropname}/filtervariables"
					},
					"response": []
				},
				{
					"name": "Verify response when filtered by exclusionVariableIds",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d2dceac7-c964-49a8-a36d-86ccfb195960",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Check input variableId is not included in the result\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    var i;\r",
									"    for (i = 0; i < jsonData.length ; i++) { \r",
									"    pm.expect(jsonData[i].id).to.not.eql(pm.environment.get(\"study_biomass_cvterm_id\"));\r",
									"    }\r",
									"});    \r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "bc582f96-0732-49e7-a0e8-17c4062ae67d",
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "X-Auth-Token",
								"type": "text",
								"value": "{{masterToken}}"
							}
						],
						"url": {
							"raw": "{{BMSurl}}/crops/{{crop}}/variables/filter?programUUID={{api_program_id}}&propertyIds=&methodIds=&scaleIds=&variableIds=&exclusionVariableIds={{study_biomass_cvterm_id}}&dataTypeIds=&variableTypeIds=&propertyClasses=",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"crops",
								"{{crop}}",
								"variables",
								"filter"
							],
							"query": [
								{
									"key": "programUUID",
									"value": "{{api_program_id}}"
								},
								{
									"key": "propertyIds",
									"value": ""
								},
								{
									"key": "methodIds",
									"value": ""
								},
								{
									"key": "scaleIds",
									"value": ""
								},
								{
									"key": "variableIds",
									"value": ""
								},
								{
									"key": "exclusionVariableIds",
									"value": "{{study_biomass_cvterm_id}}"
								},
								{
									"key": "dataTypeIds",
									"value": ""
								},
								{
									"key": "variableTypeIds",
									"value": ""
								},
								{
									"key": "propertyClasses",
									"value": ""
								}
							]
						},
						"description": "GET /ontology/{cropname}/filtervariables"
					},
					"response": []
				},
				{
					"name": "Verify response when filtered by dataTypeIds",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a1b6d51a-0b7b-40b4-9547-cd72cf28fdf1",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Check all dataTypeIds are equal to the input parameter\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    var i;\r",
									"    for (i = 0; i < jsonData.length ; i++) { \r",
									"    pm.expect(jsonData[i].scale.dataType.id).to.eql(pm.environment.get(\"numeric_dataTypeId\"));\r",
									"    }\r",
									"});    \r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "913320d7-137e-4658-8759-eeb92ead2f3c",
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "X-Auth-Token",
								"type": "text",
								"value": "{{masterToken}}"
							}
						],
						"url": {
							"raw": "{{BMSurl}}/crops/{{crop}}/variables/filter?programUUID={{api_program_id}}&propertyIds=&methodIds=&scaleIds=&variableIds=&exclusionVariableIds=&dataTypeIds={{numeric_dataTypeId}}&variableTypeIds=&propertyClasses=",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"crops",
								"{{crop}}",
								"variables",
								"filter"
							],
							"query": [
								{
									"key": "programUUID",
									"value": "{{api_program_id}}"
								},
								{
									"key": "propertyIds",
									"value": ""
								},
								{
									"key": "methodIds",
									"value": ""
								},
								{
									"key": "scaleIds",
									"value": ""
								},
								{
									"key": "variableIds",
									"value": ""
								},
								{
									"key": "exclusionVariableIds",
									"value": ""
								},
								{
									"key": "dataTypeIds",
									"value": "{{numeric_dataTypeId}}"
								},
								{
									"key": "variableTypeIds",
									"value": ""
								},
								{
									"key": "propertyClasses",
									"value": ""
								}
							]
						},
						"description": "GET /ontology/{cropname}/filtervariables"
					},
					"response": []
				},
				{
					"name": "Verify response when filtered by variableTypeIds",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a45e709d-20a0-45e1-9e0a-9bfe4bc5b82f",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Check if input variableType is present in all variables\", function () {\r",
									"  var jsonData = pm.response.json();\r",
									"  var i,j;\r",
									"  for (i = 0; i < jsonData.length ; i++) {\r",
									"      var variableTypes = jsonData[i].variableTypes;\r",
									"      console.log(\"variable:\"+jsonData[i].id);\r",
									"      console.log(\"variableTypeLength:\"+variableTypes.length)\r",
									"      \r",
									"      for (j=0; j < variableTypes.length; j++) {\r",
									"          if(variableTypes[j].id==\"1808\"){\r",
									"              pm.expect(variableTypes[j].id).to.eql(pm.environment.get(\"variableTypeId_trait\"));\r",
									"              console.log(\"index:\"+j+ \"Found! \"+ \"variableTypeId:\"+ variableTypes[j].id);\r",
									"          }else{\r",
									"              console.log(\"index:\"+j+ \"Not Found! \"+ \"variableTypeId:\"+ variableTypes[j].id);\r",
									"          }\r",
									"          \r",
									"      }\r",
									"  }\r",
									" \r",
									"});    \r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "78ca4f4d-25bf-4691-a5b1-9732c6c3ae61",
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "X-Auth-Token",
								"type": "text",
								"value": "{{masterToken}}"
							}
						],
						"url": {
							"raw": "{{BMSurl}}/crops/{{crop}}/variables/filter?programUUID={{api_program_id}}&propertyIds=&methodIds=&scaleIds=&variableIds=&exclusionVariableIds=&dataTypeIds=&variableTypeIds={{variableTypeId_trait}}&propertyClasses=",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"crops",
								"{{crop}}",
								"variables",
								"filter"
							],
							"query": [
								{
									"key": "programUUID",
									"value": "{{api_program_id}}"
								},
								{
									"key": "propertyIds",
									"value": ""
								},
								{
									"key": "methodIds",
									"value": ""
								},
								{
									"key": "scaleIds",
									"value": ""
								},
								{
									"key": "variableIds",
									"value": ""
								},
								{
									"key": "exclusionVariableIds",
									"value": ""
								},
								{
									"key": "dataTypeIds",
									"value": ""
								},
								{
									"key": "variableTypeIds",
									"value": "{{variableTypeId_trait}}"
								},
								{
									"key": "propertyClasses",
									"value": ""
								}
							]
						},
						"description": "GET /ontology/{cropname}/filtervariables"
					},
					"response": []
				},
				{
					"name": "Verify response when filtered by property classes",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e889f97e-ac0c-45a1-a2c6-e94e553fd93c",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Check if input property class is present in all variables\", function () {\r",
									"  var jsonData = pm.response.json();\r",
									"  var i,j;\r",
									"  for (i = 0; i < jsonData.length ; i++) {\r",
									"      var propertyClasses = jsonData[i].property.classes;\r",
									"      console.log(\"variable:\"+jsonData[i].id);\r",
									"      console.log(\"propertyClassLength:\"+ propertyClasses.length)\r",
									"      \r",
									"      for (j=0; j < propertyClasses.length; j++) {\r",
									"          if(propertyClasses[j]==\"Agronomic\"){\r",
									"              pm.expect(propertyClasses[j]).to.eql(\"Agronomic\");\r",
									"              console.log(\"index:\"+j+ \"Found! \"+ \"propertyClassId:\"+ propertyClasses[j]);\r",
									"          }else{\r",
									"              console.log(\"index:\"+j+ \"Not Found! \"+ \"propertyClassId:\"+ propertyClasses[j]);\r",
									"          }\r",
									"          \r",
									"      }\r",
									"  }\r",
									" \r",
									"});    \r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "e19c6f39-6ee6-401d-9350-8596d3a05e0b",
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "X-Auth-Token",
								"type": "text",
								"value": "{{masterToken}}"
							}
						],
						"url": {
							"raw": "{{BMSurl}}/crops/{{crop}}/variables/filter?programUUID={{api_program_id}}&propertyIds=&methodIds=&scaleIds=&variableIds=&exclusionVariableIds=&dataTypeIds=&variableTypeIds=&propertyClasses=Agronomic",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"crops",
								"{{crop}}",
								"variables",
								"filter"
							],
							"query": [
								{
									"key": "programUUID",
									"value": "{{api_program_id}}"
								},
								{
									"key": "propertyIds",
									"value": ""
								},
								{
									"key": "methodIds",
									"value": ""
								},
								{
									"key": "scaleIds",
									"value": ""
								},
								{
									"key": "variableIds",
									"value": ""
								},
								{
									"key": "exclusionVariableIds",
									"value": ""
								},
								{
									"key": "dataTypeIds",
									"value": ""
								},
								{
									"key": "variableTypeIds",
									"value": ""
								},
								{
									"key": "propertyClasses",
									"value": "Agronomic"
								}
							]
						},
						"description": "GET /ontology/{cropname}/filtervariables"
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "crop-resource",
			"item": [],
			"protocolProfileBehavior": {}
		},
		{
			"name": "class-resource",
			"item": [
				{
					"name": "Verify response code and returned classes when entered valid crop",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "9e854b27-6ca4-4bb7-9226-6529253ec23b",
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "3dd08fc8-51c7-4e3e-a315-bef6252f9e82",
								"exec": [
									"pm.test(\"Status code is 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Check returned classes\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.equal(\"Abiotic condition\");",
									"    pm.expect(jsonData[1]).to.equal(\"Abiotic stress\");",
									"    pm.expect(jsonData[2]).to.equal(\"Agronomic\");",
									"    pm.expect(jsonData[3]).to.equal(\"Biochemical trait\");",
									"    pm.expect(jsonData[4]).to.equal(\"Biotic condition\");",
									"    pm.expect(jsonData[5]).to.equal(\"Biotic stress\");",
									"    pm.expect(jsonData[6]).to.equal(\"Breeding methods\");",
									"    pm.expect(jsonData[7]).to.equal(\"Breedingprocess\");",
									"    pm.expect(jsonData[8]).to.equal(\"Bulking breeding methods\");",
									"    pm.expect(jsonData[9]).to.equal(\"Climatic condition\");",
									"    pm.expect(jsonData[10]).to.equal(\"Crop research ontology\");",
									"    pm.expect(jsonData[11]).to.equal(\"Crop trait ontology\");",
									"    pm.expect(jsonData[12]).to.equal(\"Crossing methods\");",
									"    pm.expect(jsonData[13]).to.equal(\"Cultivar formation methods\");",
									"    pm.expect(jsonData[14]).to.equal(\"Cytogenetic manipulation\");",
									"    pm.expect(jsonData[15]).to.equal(\"Dataset Condition\");",
									"    pm.expect(jsonData[16]).to.equal(\"Derivative breeding methods\");",
									"    pm.expect(jsonData[17]).to.equal(\"Disease resistance\");",
									"    pm.expect(jsonData[18]).to.equal(\"General\");",
									"    pm.expect(jsonData[19]).to.equal(\"Generative breeding methods\");",
									"    pm.expect(jsonData[20]).to.equal(\"Genetic Modification\");",
									"    pm.expect(jsonData[21]).to.equal(\"Germplasm\");",
									"    pm.expect(jsonData[22]).to.equal(\"Insect and pest resistance\");",
									"    pm.expect(jsonData[23]).to.equal(\"Maintenance methods\");",
									"    pm.expect(jsonData[24]).to.equal(\"Molecular property\");",
									"    pm.expect(jsonData[25]).to.equal(\"Morphological\");",
									"    pm.expect(jsonData[26]).to.equal(\"Mutation methods\");",
									"    pm.expect(jsonData[27]).to.equal(\"Non-bulking breedingmethods\");",
									"    pm.expect(jsonData[28]).to.equal(\"Passport\");",
									"    pm.expect(jsonData[29]).to.equal(\"Phenology\");",
									"    pm.expect(jsonData[30]).to.equal(\"Physiological\");",
									"    pm.expect(jsonData[31]).to.equal(\"Post harvest\");",
									"    pm.expect(jsonData[32]).to.equal(\"Quality\");",
									"    pm.expect(jsonData[33]).to.equal(\"Seed acquisation methods\");",
									"    pm.expect(jsonData[34]).to.equal(\"Seed increase methods\");",
									"    pm.expect(jsonData[35]).to.equal(\"Seed storage\");",
									"    pm.expect(jsonData[36]).to.equal(\"Site condition\");",
									"    pm.expect(jsonData[37]).to.equal(\"Soil condition\");",
									"    pm.expect(jsonData[38]).to.equal(\"Study condition\");",
									"    pm.expect(jsonData[39]).to.equal(\"Trial Design\");",
									"    pm.expect(jsonData[40]).to.equal(\"Trial environment\");",
									"    pm.expect(jsonData[41]).to.equal(\"Trial management\");",
									"    pm.expect(jsonData[42]).to.equal(\"Variate condition\");",
									"    pm.expect(jsonData[43]).to.equal(\"Yield component\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Auth-Token",
								"value": "{{masterToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BMSurl}}/crops/{{crop}}/classes?programUUID={{api_program_id}}",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"crops",
								"{{crop}}",
								"classes"
							],
							"query": [
								{
									"key": "programUUID",
									"value": "{{api_program_id}}"
								}
							]
						},
						"description": "GET ​/crops​/{cropname}​/classes"
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "data-type-resource",
			"item": [
				{
					"name": "GET /crops/{crop}/data-types",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0a3bb935-2621-4e59-8733-7b56c82fde2e",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check categorical data type\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].id).to.eql(\"1130\");",
									"    pm.expect(jsonData[0].name).to.eql(\"Categorical\");",
									"    pm.expect(jsonData[0].systemDataType).to.eql(false);",
									"});",
									"",
									"pm.test(\"Check numeric data type\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[1].id).to.eql(\"1110\");",
									"    pm.expect(jsonData[1].name).to.eql(\"Numeric\");",
									"    pm.expect(jsonData[1].systemDataType).to.eql(false);",
									"});",
									"",
									"pm.test(\"Check date data type\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[2].id).to.eql(\"1117\");",
									"    pm.expect(jsonData[2].name).to.eql(\"Date\");",
									"    pm.expect(jsonData[2].systemDataType).to.eql(false);",
									"});",
									"",
									"pm.test(\"Check character data type\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[3].id).to.eql(\"1120\");",
									"    pm.expect(jsonData[3].name).to.eql(\"Character\");",
									"    pm.expect(jsonData[3].systemDataType).to.eql(false);",
									"});",
									"pm.test(\"Check person data type\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[4].id).to.eql(\"1131\");",
									"    pm.expect(jsonData[4].name).to.eql(\"Person\");",
									"    pm.expect(jsonData[4].systemDataType).to.eql(true);",
									"});",
									"pm.test(\"Check location data type\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[5].id).to.eql(\"1132\");",
									"    pm.expect(jsonData[5].name).to.eql(\"Location\");",
									"    pm.expect(jsonData[5].systemDataType).to.eql(true);",
									"});",
									"pm.test(\"Check study data type\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[6].id).to.eql(\"1133\");",
									"    pm.expect(jsonData[6].name).to.eql(\"Study\");",
									"    pm.expect(jsonData[6].systemDataType).to.eql(true);",
									"});",
									"pm.test(\"Check dataset data type\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[7].id).to.eql(\"1134\");",
									"    pm.expect(jsonData[7].name).to.eql(\"Dataset\");",
									"    pm.expect(jsonData[7].systemDataType).to.eql(true);",
									"});",
									"pm.test(\"Check germplasm list data type\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[8].id).to.eql(\"1135\");",
									"    pm.expect(jsonData[8].name).to.eql(\"Germplasm List\");",
									"    pm.expect(jsonData[8].systemDataType).to.eql(true);",
									"});",
									"pm.test(\"Check breeding method data type\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[9].id).to.eql(\"1136\");",
									"    pm.expect(jsonData[9].name).to.eql(\"Breeding Method\");",
									"    pm.expect(jsonData[9].systemDataType).to.eql(true);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "d2dc0bbc-d0f3-4d55-9388-e493f275d34b",
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "X-Auth-Token",
								"value": "{{masterToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BMSurl}}/crops/{{crop}}/data-types?programUUID={{api_program_id}}",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"crops",
								"{{crop}}",
								"data-types"
							],
							"query": [
								{
									"key": "programUUID",
									"value": "{{api_program_id}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "formula-resource",
			"item": [
				{
					"name": "POST /crops/{cropname}/formula",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5c824419-40c0-49a3-94b0-bc6675931167",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"// Store returned variable",
									"    var jsonData = pm.response.json();",
									"    pm.environment.unset(\"new_formula_id\");",
									"    pm.environment.set(\"new_formula_id\", jsonData.formulaId);",
									"    ",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "883e36a1-adcb-4de1-93f5-7fcb3ca62739",
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "X-Auth-Token",
								"type": "text",
								"value": "{{masterToken}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"formulaId\": 0,\r\n  \"inputs\": [\r\n    {\r\n      \"targetTermId\": 0,\r\n      \"dateCreated\": \"\",\r\n      \"dateLastModified\": \"\",\r\n      \"vocabularyId\": 0,\r\n      \"name\": \"\",\r\n      \"obsolete\": false,\r\n      \"definition\": \"\",\r\n      \"id\": 100020\r\n    }\r\n  ],\r\n  \"name\": \"\",\r\n  \"active\": true,\r\n  \"description\": \"\",\r\n  \"definition\": \"{{formula_definition}}\",\r\n  \"target\": {\r\n    \"targetTermId\": 0,\r\n    \"dateCreated\": \"\",\r\n    \"dateLastModified\": \"\",\r\n    \"vocabularyId\": 0,\r\n    \"name\": \"\",\r\n    \"obsolete\": false,\r\n    \"definition\": \"\",\r\n    \"id\": 100019\r\n  }\r\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{BMSurl}}/crops/{{crop}}/formula?programUUID={{api_program_id}}",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"crops",
								"{{crop}}",
								"formula"
							],
							"query": [
								{
									"key": "programUUID",
									"value": "{{api_program_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT /crops/{cropname}/formula/{formulaId}",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "69c0a0d0-2e05-47e8-8092-21553197d028",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "ba087a33-0801-4851-9cfb-b305e82cfad1",
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "X-Auth-Token",
								"type": "text",
								"value": "{{masterToken}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"formulaId\": \"{{new_formula_id}}\",\r\n  \"inputs\": [\r\n    {\r\n      \"targetTermId\": 0,\r\n      \"dateCreated\": \"\",\r\n      \"dateLastModified\": \"\",\r\n      \"vocabularyId\": 0,\r\n      \"name\": \"\",\r\n      \"obsolete\": false,\r\n      \"definition\": \"\",\r\n      \"id\": 100020\r\n    }\r\n  ],\r\n  \"name\": \"\",\r\n  \"active\": true,\r\n  \"description\": \"\",\r\n  \"definition\": \"{{updated_formula_definition}}\",\r\n  \"target\": {\r\n    \"targetTermId\": 0,\r\n    \"dateCreated\": \"\",\r\n    \"dateLastModified\": \"\",\r\n    \"vocabularyId\": 0,\r\n    \"name\": \"\",\r\n    \"obsolete\": false,\r\n    \"definition\": \"\",\r\n    \"id\": 100019\r\n  }\r\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{BMSurl}}/crops/{{crop}}/formula/{{new_formula_id}}?programUUID={{api_program_id}}",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"crops",
								"{{crop}}",
								"formula",
								"{{new_formula_id}}"
							],
							"query": [
								{
									"key": "programUUID",
									"value": "{{api_program_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE /crops/{cropname}/formula/{formulaId}",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "738ce957-23f0-4f4a-bb3b-34724b7fffc7",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "0e276c05-c614-44dd-8562-422568b5a9b4",
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "X-Auth-Token",
								"type": "text",
								"value": "{{masterToken}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{BMSurl}}/crops/{{crop}}/formula/{{new_formula_id}}?programUUID={{api_program_id}}",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"crops",
								"{{crop}}",
								"formula",
								"{{new_formula_id}}"
							],
							"query": [
								{
									"key": "programUUID",
									"value": "{{api_program_id}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "method-resource",
			"item": [
				{
					"name": "POST /crops/{cropname}/methods",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0bdf3562-6587-4485-9b99-de49c1689c5b",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"// Store returned variable",
									"    var jsonData = pm.response.json();",
									"    pm.environment.unset(\"new_method_id\");",
									"    pm.environment.set(\"new_method_id\", jsonData.id);",
									"    ",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "0f3262f1-eedc-4961-988a-e24b35a7857f",
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "X-Auth-Token",
								"value": "{{masterToken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": \"\",\r\n  \"name\": \"{{new_method_name}}\",\r\n  \"description\": \"This is a test method\",\r\n  \"metadata\": {\r\n    \"dateCreated\": \"\",\r\n    \"dateLastModified\": \"\",\r\n    \"editableFields\": [\r\n      \"\"\r\n    ],\r\n    \"deletable\": false,\r\n    \"editable\": true,\r\n    \"usage\": {\r\n      \"variables\": [\r\n        {\r\n          \"id\": \"\",\r\n          \"name\": \"\",\r\n          \"description\": \"\"\r\n        }\r\n      ],\r\n      \"observations\": 0,\r\n      \"studies\": 0,\r\n      \"datasets\": 0\r\n    },\r\n    \"datasets\": 0\r\n  }\r\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{BMSurl}}/crops/{{crop}}/methods?programUUID={{api_program_id}}",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"crops",
								"{{crop}}",
								"methods"
							],
							"query": [
								{
									"key": "programUUID",
									"value": "{{api_program_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT /crops/{cropname}/methods/{id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "932b15c9-764d-4e11-989a-c89d99986688",
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "04c776fd-b505-4454-bc2f-d7e56a09dea7",
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "X-Auth-Token",
								"type": "text",
								"value": "{{masterToken}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": \"\",\r\n  \"name\": \"{{updated_method_name}}\",\r\n  \"description\": \"This is a test methodx\",\r\n  \"metadata\": {\r\n    \"dateCreated\": \"\",\r\n    \"dateLastModified\": \"\",\r\n    \"editableFields\": [\r\n      \"\"\r\n    ],\r\n    \"deletable\": false,\r\n    \"editable\": true,\r\n    \"usage\": {\r\n      \"variables\": [\r\n        {\r\n          \"id\": \"\",\r\n          \"name\": \"\",\r\n          \"description\": \"\"\r\n        }\r\n      ],\r\n      \"observations\": 0,\r\n      \"studies\": 0,\r\n      \"datasets\": 0\r\n    },\r\n    \"datasets\": 0\r\n  }\r\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{BMSurl}}/crops/{{crop}}/methods/{{new_method_id}}?programUUID={{api_program_id}}",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"crops",
								"{{crop}}",
								"methods",
								"{{new_method_id}}"
							],
							"query": [
								{
									"key": "programUUID",
									"value": "{{api_program_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE /crops/{cropname}/methods{id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d7caa95a-130c-4589-a0c1-df14d8c755f0",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"// Note: Checked details of first, middle and last method only for all methods are too many.",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "d7cfabd5-2e73-4d6f-bc90-42bb0ce73ace",
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "X-Auth-Token",
								"type": "text",
								"value": "{{masterToken}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{BMSurl}}/crops/{{crop}}/methods/{{new_method_id}}?programUUID={{api_program_id}}",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"crops",
								"{{crop}}",
								"methods",
								"{{new_method_id}}"
							],
							"query": [
								{
									"key": "programUUID",
									"value": "{{api_program_id}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "property-resource",
			"item": [
				{
					"name": "POST /crops/{cropname}/properties",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e9540ac0-c5fb-4c14-852a-536b46492c3d",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"// Store returned variable",
									"    var jsonData = pm.response.json();",
									"    pm.environment.unset(\"new_property_id\");",
									"    pm.environment.set(\"new_property_id\", jsonData.id);",
									"    ",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "1b7bffe8-803a-4666-8bfa-130a3c214233",
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "X-Auth-Token",
								"type": "text",
								"value": "{{masterToken}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": \"\",\r\n  \"name\": \"{{new_property_name}}\",\r\n  \"description\": \"This is a test property\",\r\n  \"cropOntologyId\": \"\",\r\n  \"classes\": [\r\n    \"Morphological\"\r\n  ],\r\n  \"metadata\": {\r\n    \"dateCreated\": \"\",\r\n    \"dateLastModified\": \"\",\r\n    \"editableFields\": [\r\n      \"\"\r\n    ],\r\n    \"deletable\": false,\r\n    \"editable\": false,\r\n    \"usage\": {\r\n      \"variables\": [\r\n        {\r\n          \"id\": \"\",\r\n          \"name\": \"\",\r\n          \"description\": \"\"\r\n        }\r\n      ],\r\n      \"observations\": 0,\r\n      \"studies\": 0,\r\n      \"datasets\": 0\r\n    },\r\n    \"datasets\": 0\r\n  }\r\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{BMSurl}}/crops/{{crop}}/properties?programUUID={{api_program_id}}",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"crops",
								"{{crop}}",
								"properties"
							],
							"query": [
								{
									"key": "programUUID",
									"value": "{{api_program_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT /crops/{cropname}/properties/{id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6dc43c40-f745-4b2f-b8dd-7030a0f8ca7d",
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "369c0801-4f69-45d6-b6c7-620439a32ce9",
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "X-Auth-Token",
								"type": "text",
								"value": "{{masterToken}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": \"\",\r\n  \"name\": \"{{updated_property_name}}\",\r\n  \"description\": \"This is a test propertyx\",\r\n  \"cropOntologyId\": \"\",\r\n  \"classes\": [\r\n    \"Morphological\"\r\n  ],\r\n  \"metadata\": {\r\n    \"dateCreated\": \"\",\r\n    \"dateLastModified\": \"\",\r\n    \"editableFields\": [\r\n      \"\"\r\n    ],\r\n    \"deletable\": false,\r\n    \"editable\": false,\r\n    \"usage\": {\r\n      \"variables\": [\r\n        {\r\n          \"id\": \"\",\r\n          \"name\": \"\",\r\n          \"description\": \"\"\r\n        }\r\n      ],\r\n      \"observations\": 0,\r\n      \"studies\": 0,\r\n      \"datasets\": 0\r\n    },\r\n    \"datasets\": 0\r\n  }\r\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{BMSurl}}/crops/{{crop}}/properties/{{new_property_id}}?programUUID={{api_program_id}}",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"crops",
								"{{crop}}",
								"properties",
								"{{new_property_id}}"
							],
							"query": [
								{
									"key": "programUUID",
									"value": "{{api_program_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE /crops/{cropname}/properties/{id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "221cf6e2-92bc-43a4-b230-e7fda133aac2",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"// Note: Checked details of first, middle and last method only for all methods are too many.",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "39b4c0a3-cc66-41f8-aa27-6a17309cf9d8",
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "X-Auth-Token",
								"type": "text",
								"value": "{{masterToken}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{BMSurl}}/crops/{{crop}}/properties/{{new_property_id}}?programUUID={{api_program_id}}",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"crops",
								"{{crop}}",
								"properties",
								"{{new_property_id}}"
							],
							"query": [
								{
									"key": "programUUID",
									"value": "{{api_program_id}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "variable-resource",
			"item": [
				{
					"name": "POST /crops/{cropname}/variables",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "04dd5ce6-d03a-4a6e-885f-0a9c309283e3",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"// Store returned variable",
									"    var jsonData = pm.response.json();",
									"    pm.environment.unset(\"new_variable_id\");",
									"    pm.environment.set(\"new_variable_id\", jsonData.id);",
									"    ",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "7a7aef0a-cecb-42b2-a211-85c0f0c5f840",
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "X-Auth-Token",
								"type": "text",
								"value": "{{masterToken}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": \"\",\r\n  \"name\": \"{{new_variable_name}}\",\r\n  \"description\": \"This is a test variable\",\r\n  \"metadata\": {\r\n    \"dateCreated\": \"\",\r\n    \"dateLastModified\": \"\",\r\n    \"editableFields\": [\r\n      \"\"\r\n    ],\r\n    \"deletable\": false,\r\n    \"editable\": true,\r\n    \"usage\": {\r\n      \"variables\": [\r\n        {\r\n          \"id\": \"\",\r\n          \"name\": \"\",\r\n          \"description\": \"\"\r\n        }\r\n      ],\r\n      \"observations\": 0,\r\n      \"studies\": 0,\r\n      \"datasets\": 0\r\n    },\r\n    \"datasets\": 0\r\n  },\r\n  \"programUuid\": \"c9e335d2-3057-4958-a43e-e38cf61d09ca\",\r\n  \"alias\": \"\",\r\n  \"method\": {\r\n        \"id\": \"{{new_var_method_id}}\",\r\n        \"name\": \"{{neW_var_method_name}}\",\r\n        \"description\": \"{{new_var_method_desc}}\",\r\n    \"metadata\": {\r\n      \"dateCreated\": \"\",\r\n      \"dateLastModified\": \"\",\r\n      \"editableFields\": [\r\n        \"\"\r\n      ],\r\n      \"deletable\": false,\r\n      \"editable\": false,\r\n      \"usage\": {\r\n        \"variables\": [\r\n          {\r\n            \"id\": \"\",\r\n            \"name\": \"\",\r\n            \"description\": \"\"\r\n          }\r\n        ],\r\n        \"observations\": 0,\r\n        \"studies\": 0,\r\n        \"datasets\": 0\r\n      },\r\n      \"datasets\": 0\r\n    }\r\n  },\r\n  \"property\": {\r\n        \"id\": \"{{new_var_property_id}}\",\r\n        \"name\": \"{{new_var_property_name}}\",\r\n        \"description\": \"{{new_var_property_desc}}\",\r\n    \"cropOntologyId\": \"\",\r\n    \"classes\": [\r\n      \"\"\r\n    ],\r\n    \"metadata\": {\r\n      \"dateCreated\": \"\",\r\n      \"dateLastModified\": \"\",\r\n      \"editableFields\": [\r\n        \"\"\r\n      ],\r\n      \"deletable\": false,\r\n      \"editable\": false,\r\n      \"usage\": {\r\n        \"variables\": [\r\n          {\r\n            \"id\": \"\",\r\n            \"name\": \"\",\r\n            \"description\": \"\"\r\n          }\r\n        ],\r\n        \"observations\": 0,\r\n        \"studies\": 0,\r\n        \"datasets\": 0\r\n      },\r\n      \"datasets\": 0\r\n    }\r\n  },\r\n  \"scale\": {\r\n    \"id\": \"{{new_var_scale_id}}\",\r\n    \"name\": \"{{new_var_scale_name}}\",\r\n    \"description\": \"{{new_var_scale_desc}}\",\r\n    \"dataType\": {\r\n      \"id\": \"\",\r\n      \"name\": \"\",\r\n      \"systemDataType\": false\r\n    },\r\n    \"validValues\": {\r\n      \"min\": \"\",\r\n      \"max\": \"\",\r\n      \"categories\": [\r\n        {\r\n          \"id\": \"\",\r\n          \"name\": \"\",\r\n          \"description\": \"\",\r\n          \"editable\": false\r\n        }\r\n      ]\r\n    },\r\n    \"metadata\": {\r\n      \"dateCreated\": \"\",\r\n      \"dateLastModified\": \"\",\r\n      \"editableFields\": [\r\n        \"\"\r\n      ],\r\n      \"deletable\": false,\r\n      \"editable\": false,\r\n      \"usage\": {\r\n        \"variables\": [\r\n          {\r\n            \"id\": \"\",\r\n            \"name\": \"\",\r\n            \"description\": \"\"\r\n          }\r\n        ],\r\n        \"observations\": 0,\r\n        \"studies\": 0,\r\n        \"datasets\": 0\r\n      },\r\n      \"datasets\": 0\r\n    }\r\n  },\r\n  \"variableTypes\": [\r\n    {\r\n        \"id\": \"1808\",\r\n        \"name\": \"Trait\",\r\n        \"description\": \"Characteristics of a germplasm to be recorded during a study.\"\r\n    }\r\n  ],\r\n  \"favourite\": false,\r\n  \"expectedRange\": {\r\n    \"min\": \"\",\r\n    \"max\": \"\"\r\n  },\r\n  \"formula\": {\r\n    \"formulaId\": 0,\r\n    \"target\": {\r\n      \"id\": 0,\r\n      \"vocabularyId\": 0,\r\n      \"name\": \"\",\r\n      \"definition\": \"\",\r\n      \"obsolete\": false,\r\n      \"dateCreated\": \"\",\r\n      \"dateLastModified\": \"\",\r\n      \"targetTermId\": 0\r\n    },\r\n    \"inputs\": [\r\n      {\r\n        \"id\": 0,\r\n        \"vocabularyId\": 0,\r\n        \"name\": \"\",\r\n        \"definition\": \"\",\r\n        \"obsolete\": false,\r\n        \"dateCreated\": \"\",\r\n        \"dateLastModified\": \"\",\r\n        \"targetTermId\": 0\r\n      }\r\n    ],\r\n    \"definition\": \"\",\r\n    \"active\": false,\r\n    \"name\": \"\",\r\n    \"description\": \"\"\r\n  },\r\n  \"allowsFormula\": false\r\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{BMSurl}}/crops/{{crop}}/variables?programUUID={{api_program_id}}",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"crops",
								"{{crop}}",
								"variables"
							],
							"query": [
								{
									"key": "programUUID",
									"value": "{{api_program_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT /crops/{cropname}/variables/{id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1a9184cf-211c-4d5a-9c6c-fd8c7ddba2f2",
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "b7fff6de-370d-4c3e-bcbe-152aefa3053e",
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "X-Auth-Token",
								"type": "text",
								"value": "{{masterToken}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": \"\",\r\n  \"name\": \"{{updated_variable_name}}\",\r\n  \"description\": \"This is a test variablex\",\r\n  \"metadata\": {\r\n    \"dateCreated\": \"\",\r\n    \"dateLastModified\": \"\",\r\n    \"editableFields\": [\r\n      \"\"\r\n    ],\r\n    \"deletable\": false,\r\n    \"editable\": true,\r\n    \"usage\": {\r\n      \"variables\": [\r\n        {\r\n          \"id\": \"\",\r\n          \"name\": \"\",\r\n          \"description\": \"\"\r\n        }\r\n      ],\r\n      \"observations\": 0,\r\n      \"studies\": 0,\r\n      \"datasets\": 0\r\n    },\r\n    \"datasets\": 0\r\n  },\r\n  \"programUuid\": \"c9e335d2-3057-4958-a43e-e38cf61d09ca\",\r\n  \"alias\": \"\",\r\n  \"method\": {\r\n        \"id\": \"{{new_var_method_id}}\",\r\n        \"name\": \"{{neW_var_method_name}}\",\r\n        \"description\": \"{{new_var_method_desc}}\",\r\n    \"metadata\": {\r\n      \"dateCreated\": \"\",\r\n      \"dateLastModified\": \"\",\r\n      \"editableFields\": [\r\n        \"\"\r\n      ],\r\n      \"deletable\": false,\r\n      \"editable\": false,\r\n      \"usage\": {\r\n        \"variables\": [\r\n          {\r\n            \"id\": \"\",\r\n            \"name\": \"\",\r\n            \"description\": \"\"\r\n          }\r\n        ],\r\n        \"observations\": 0,\r\n        \"studies\": 0,\r\n        \"datasets\": 0\r\n      },\r\n      \"datasets\": 0\r\n    }\r\n  },\r\n  \"property\": {\r\n        \"id\": \"{{new_var_property_id}}\",\r\n        \"name\": \"{{new_var_property_name}}\",\r\n        \"description\": \"{{new_var_property_desc}}\",\r\n    \"cropOntologyId\": \"\",\r\n    \"classes\": [\r\n      \"\"\r\n    ],\r\n    \"metadata\": {\r\n      \"dateCreated\": \"\",\r\n      \"dateLastModified\": \"\",\r\n      \"editableFields\": [\r\n        \"\"\r\n      ],\r\n      \"deletable\": false,\r\n      \"editable\": false,\r\n      \"usage\": {\r\n        \"variables\": [\r\n          {\r\n            \"id\": \"\",\r\n            \"name\": \"\",\r\n            \"description\": \"\"\r\n          }\r\n        ],\r\n        \"observations\": 0,\r\n        \"studies\": 0,\r\n        \"datasets\": 0\r\n      },\r\n      \"datasets\": 0\r\n    }\r\n  },\r\n  \"scale\": {\r\n    \"id\": \"{{new_var_scale_id}}\",\r\n    \"name\": \"{{new_var_scale_name}}\",\r\n    \"description\": \"{{new_var_scale_desc}}\",\r\n    \"dataType\": {\r\n      \"id\": \"\",\r\n      \"name\": \"\",\r\n      \"systemDataType\": false\r\n    },\r\n    \"validValues\": {\r\n      \"min\": \"\",\r\n      \"max\": \"\",\r\n      \"categories\": [\r\n        {\r\n          \"id\": \"\",\r\n          \"name\": \"\",\r\n          \"description\": \"\",\r\n          \"editable\": false\r\n        }\r\n      ]\r\n    },\r\n    \"metadata\": {\r\n      \"dateCreated\": \"\",\r\n      \"dateLastModified\": \"\",\r\n      \"editableFields\": [\r\n        \"\"\r\n      ],\r\n      \"deletable\": false,\r\n      \"editable\": false,\r\n      \"usage\": {\r\n        \"variables\": [\r\n          {\r\n            \"id\": \"\",\r\n            \"name\": \"\",\r\n            \"description\": \"\"\r\n          }\r\n        ],\r\n        \"observations\": 0,\r\n        \"studies\": 0,\r\n        \"datasets\": 0\r\n      },\r\n      \"datasets\": 0\r\n    }\r\n  },\r\n  \"variableTypes\": [\r\n    {\r\n        \"id\": \"1808\",\r\n        \"name\": \"Trait\",\r\n        \"description\": \"Characteristics of a germplasm to be recorded during a study.\"\r\n    }\r\n  ],\r\n  \"favourite\": false,\r\n  \"expectedRange\": {\r\n    \"min\": \"\",\r\n    \"max\": \"\"\r\n  },\r\n  \"formula\": {\r\n    \"formulaId\": 0,\r\n    \"target\": {\r\n      \"id\": 0,\r\n      \"vocabularyId\": 0,\r\n      \"name\": \"\",\r\n      \"definition\": \"\",\r\n      \"obsolete\": false,\r\n      \"dateCreated\": \"\",\r\n      \"dateLastModified\": \"\",\r\n      \"targetTermId\": 0\r\n    },\r\n    \"inputs\": [\r\n      {\r\n        \"id\": 0,\r\n        \"vocabularyId\": 0,\r\n        \"name\": \"\",\r\n        \"definition\": \"\",\r\n        \"obsolete\": false,\r\n        \"dateCreated\": \"\",\r\n        \"dateLastModified\": \"\",\r\n        \"targetTermId\": 0\r\n      }\r\n    ],\r\n    \"definition\": \"\",\r\n    \"active\": false,\r\n    \"name\": \"\",\r\n    \"description\": \"\"\r\n  },\r\n  \"allowsFormula\": false\r\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{BMSurl}}/crops/{{crop}}/variables/{{new_variable_id}}?programUUID={{api_program_id}}",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"crops",
								"{{crop}}",
								"variables",
								"{{new_variable_id}}"
							],
							"query": [
								{
									"key": "programUUID",
									"value": "{{api_program_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE /crops/{cropname}/variables/{id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "33025f2b-6012-4b2a-96f9-86e17a86c397",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"// Note: Checked details of first, middle and last method only for all methods are too many.",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "15c3f097-0dc4-46c4-9785-065cd659af15",
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "X-Auth-Token",
								"type": "text",
								"value": "{{masterToken}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{BMSurl}}/crops/{{crop}}/variables/{{new_variable_id}}?programUUID={{api_program_id}}",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"crops",
								"{{crop}}",
								"variables",
								"{{new_variable_id}}"
							],
							"query": [
								{
									"key": "programUUID",
									"value": "{{api_program_id}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "variable-type-resource",
			"item": [
				{
					"name": "scale-resource",
					"item": [
						{
							"name": "POST /crops/{cropname}/scales",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e0e437a9-f7cb-42ba-8074-d5d5256d04eb",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"// Store returned variable",
											"    var jsonData = pm.response.json();",
											"    pm.environment.unset(\"new_scale_id\");",
											"    pm.environment.set(\"new_scale_id\", jsonData.id);",
											"    ",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "72933df4-df28-46bc-800f-60ecf234f4b3",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"\",\r\n  \"name\": \"{{new_scale_name}}\",\r\n  \"description\": \"This is a test scale\",\r\n  \"dataType\": {\r\n    \"id\": \"1110\",\r\n    \"name\": \"Numeric\",\r\n    \"systemDataType\": false\r\n  },\r\n  \"validValues\": {\r\n    \"min\": \"\",\r\n    \"max\": \"\",\r\n    \"categories\": [\r\n      {\r\n        \"id\": \"\",\r\n        \"name\": \"\",\r\n        \"description\": \"\",\r\n        \"editable\": false\r\n      }\r\n    ]\r\n  },\r\n  \"metadata\": {\r\n    \"dateCreated\": \"\",\r\n    \"dateLastModified\": \"\",\r\n    \"editableFields\": [\r\n      \"\"\r\n    ],\r\n    \"deletable\": false,\r\n    \"editable\": false,\r\n    \"usage\": {\r\n      \"variables\": [\r\n        {\r\n          \"id\": \"\",\r\n          \"name\": \"\",\r\n          \"description\": \"\"\r\n        }\r\n      ],\r\n      \"observations\": 0,\r\n      \"studies\": 0,\r\n      \"datasets\": 0\r\n    },\r\n    \"datasets\": 0\r\n  }\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/scales?programUUID={{api_program_id}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"scales"
									],
									"query": [
										{
											"key": "programUUID",
											"value": "{{api_program_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT /crops/{cropname}/scales/{id}",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "954ef3f0-324e-4f50-80fb-a67d5bc24036",
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "6eab8625-2b98-4b58-b3a0-13c420a1305c",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"\",\r\n  \"name\": \"{{updated_scale_name}}\",\r\n  \"description\": \"This is a test scalex\",\r\n  \"dataType\": {\r\n    \"id\": \"1110\",\r\n    \"name\": \"Numeric\",\r\n    \"systemDataType\": false\r\n  },\r\n  \"validValues\": {\r\n    \"min\": \"\",\r\n    \"max\": \"\",\r\n    \"categories\": [\r\n      {\r\n        \"id\": \"\",\r\n        \"name\": \"\",\r\n        \"description\": \"\",\r\n        \"editable\": false\r\n      }\r\n    ]\r\n  },\r\n  \"metadata\": {\r\n    \"dateCreated\": \"\",\r\n    \"dateLastModified\": \"\",\r\n    \"editableFields\": [\r\n      \"\"\r\n    ],\r\n    \"deletable\": false,\r\n    \"editable\": false,\r\n    \"usage\": {\r\n      \"variables\": [\r\n        {\r\n          \"id\": \"\",\r\n          \"name\": \"\",\r\n          \"description\": \"\"\r\n        }\r\n      ],\r\n      \"observations\": 0,\r\n      \"studies\": 0,\r\n      \"datasets\": 0\r\n    },\r\n    \"datasets\": 0\r\n  }\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/scales/{{new_scale_id}}?programUUID={{api_program_id}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"scales",
										"{{new_scale_id}}"
									],
									"query": [
										{
											"key": "programUUID",
											"value": "{{api_program_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "DELETE /crops/{cropname}/scales/{id}",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "afb17797-0fcb-46ce-ba6f-2a890e28f373",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"",
											"// Note: Checked details of first, middle and last method only for all methods are too many.",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9508c172-0a59-4501-b8aa-66b97a4a6926",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/scales/{{new_scale_id}}?programUUID={{api_program_id}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"scales",
										"{{new_scale_id}}"
									],
									"query": [
										{
											"key": "programUUID",
											"value": "{{api_program_id}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "GET /crops/{crop}variable-types",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "93604b97-8438-477e-92c2-c9415710bc08",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check analysis variable type\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0].id).to.eql(\"1801\");\r",
									"    pm.expect(jsonData[0].name).to.eql(\"Analysis\");\r",
									"    pm.expect(jsonData[0].description).to.eql(\"Variable to be used only in analysis (for example derived variables).\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check analysis summary variable type\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[1].id).to.eql(\"1811\");\r",
									"    pm.expect(jsonData[1].name).to.eql(\"Analysis Summary\");\r",
									"    pm.expect(jsonData[1].description).to.eql(\"Analysis Summary Variables\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check environment detail variable type\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[2].id).to.eql(\"1806\");\r",
									"    pm.expect(jsonData[2].name).to.eql(\"Environment Detail\");\r",
									"    pm.expect(jsonData[2].description).to.eql(\"Administrative details to be tracked per environment.\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check experimental design variable type\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[3].id).to.eql(\"1810\");\r",
									"    pm.expect(jsonData[3].name).to.eql(\"Experimental Design\");\r",
									"    pm.expect(jsonData[3].description).to.eql(\"Experimental Design Variables\");\r",
									"});\r",
									"pm.test(\"Check germplasm descriptor variable type\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[4].id).to.eql(\"1804\");\r",
									"    pm.expect(jsonData[4].name).to.eql(\"Germplasm Descriptor\");\r",
									"    pm.expect(jsonData[4].description).to.eql(\"Information to be recorded about each germplasm in a study.\");\r",
									"});\r",
									"pm.test(\"Check observation unit variable type\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[5].id).to.eql(\"1812\");\r",
									"    pm.expect(jsonData[5].name).to.eql(\"Observation Unit\");\r",
									"    pm.expect(jsonData[5].description).to.eql(\"Observation Unit Variables\");\r",
									"});\r",
									"pm.test(\"Check selection method variable type\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[6].id).to.eql(\"1807\");\r",
									"    pm.expect(jsonData[6].name).to.eql(\"Selection Method\");\r",
									"    pm.expect(jsonData[6].description).to.eql(\"How material is chosen for advancing to the next generation.\");\r",
									"});\r",
									"pm.test(\"Check study condition variable type\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[7].id).to.eql(\"1802\");\r",
									"    pm.expect(jsonData[7].name).to.eql(\"Study Condition\");\r",
									"    pm.expect(jsonData[7].description).to.eql(\"Observations made of conditions in an individual environment involved in a study.\");\r",
									"});\r",
									"pm.test(\"Check study detail variable type\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[8].id).to.eql(\"1805\");\r",
									"    pm.expect(jsonData[8].name).to.eql(\"Study Detail\");\r",
									"    pm.expect(jsonData[8].description).to.eql(\"Administrative details to be tracked per study.\");\r",
									"});\r",
									"pm.test(\"Check trait variable type\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[9].id).to.eql(\"1808\");\r",
									"    pm.expect(jsonData[9].name).to.eql(\"Trait\");\r",
									"    pm.expect(jsonData[9].description).to.eql(\"Characteristics of a germplasm to be recorded during a study.\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check treatment factor variable type\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[10].id).to.eql(\"1809\");\r",
									"    pm.expect(jsonData[10].name).to.eql(\"Treatment Factor\");\r",
									"    pm.expect(jsonData[10].description).to.eql(\"Treatments to be applied to members of a trial.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "cae922f3-ada9-4d46-af08-f6a67fb013be",
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "X-Auth-Token",
								"type": "text",
								"value": "{{masterToken}}"
							}
						],
						"url": {
							"raw": "{{BMSurl}}/crops/{{crop}}/variable-types?programUUID={{api_program_id}}",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"crops",
								"{{crop}}",
								"variable-types"
							],
							"query": [
								{
									"key": "programUUID",
									"value": "{{api_program_id}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "sample-resource",
			"item": [
				{
					"name": "GET /crops​/{crop}​/programs​/{programUUID}​/samples",
					"item": [
						{
							"name": "Verify response code and body when entered valid inputs to all fields",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "7118f9f1-7922-490a-9e3c-4c6233e33b82",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "b6704ffc-c9a7-4569-82a0-68c10c0c91f9",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify returned sample details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].sampleId).to.eql(1);",
											"    pm.expect(jsonData[0].sampleNumber).to.eql(1);",
											"    pm.expect(jsonData[0].entryNo).to.eql(1);",
											"    pm.expect(jsonData[0].gid).to.eql(21);",
											"    pm.expect(jsonData[0].designation).to.eql(\"GP1\");",
											"    pm.expect(jsonData[0].sampleName).to.eql(\"ACCNO1:1\");",
											"    pm.expect(jsonData[0].sampleBusinessKey).to.eql(pm.environment.get(\"study_sampleId\"));",
											"    pm.expect(jsonData[0].takenBy).to.eql(\"Admin Admin\");",
											"    pm.expect(jsonData[0].sampleList).to.eql(\"Sample List 002\");",
											"    pm.expect(jsonData[0].datasetType).to.eql(\"PLOT\");",
											"    pm.expect(jsonData[0].studyName).to.eql(\"Study with Imported Cross Nursery 2018002\");",
											"    pm.expect(jsonData[0].studyId).to.eql(3009);",
											"    pm.expect(jsonData[0].enumerator).to.eql(\"1\");",
											"    pm.expect(jsonData[0].observationUnitId).to.eql(pm.environment.get(\"study_obs_unit_id\"));",
											"    pm.expect(jsonData[0].samplingDate).to.eql(\"26/10/2018\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"value": "{{masterToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/samples?obsUnitId={{study_obs_unit_id}}&listId={{sample_listId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"samples"
									],
									"query": [
										{
											"key": "obsUnitId",
											"value": "{{study_obs_unit_id}}"
										},
										{
											"key": "listId",
											"value": "{{sample_listId}}"
										}
									]
								},
								"description": "GET /crops​/{crop}​/programs​/{programUUID}​/samples"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered only crop name and programUUID",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "f350d6e7-18af-4e9e-9645-23f304d0ccdb",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "6eec3bb5-486e-4c88-a09f-7e38dadf0c2b",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify returned sample details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].sampleId).to.eql(1);",
											"    pm.expect(jsonData[0].sampleNumber).to.eql(1);",
											"    pm.expect(jsonData[0].entryNo).to.eql(1);",
											"    pm.expect(jsonData[0].gid).to.eql(21);",
											"    pm.expect(jsonData[0].designation).to.eql(\"GP1\");",
											"    pm.expect(jsonData[0].sampleName).to.eql(\"ACCNO1:1\");",
											"    pm.expect(jsonData[0].sampleBusinessKey).to.eql(pm.environment.get(\"study_sampleId\"));",
											"    pm.expect(jsonData[0].takenBy).to.eql(\"Admin Admin\");",
											"    pm.expect(jsonData[0].sampleList).to.eql(\"Sample List 002\");",
											"    pm.expect(jsonData[0].datasetType).to.eql(\"PLOT\");",
											"    pm.expect(jsonData[0].studyName).to.eql(\"Study with Imported Cross Nursery 2018002\");",
											"    pm.expect(jsonData[0].studyId).to.eql(3009);",
											"    pm.expect(jsonData[0].enumerator).to.eql(\"1\");",
											"    pm.expect(jsonData[0].observationUnitId).to.eql(pm.environment.get(\"study_obs_unit_id\"));",
											"    pm.expect(jsonData[0].samplingDate).to.eql(\"26/10/2018\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/samples",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"samples"
									]
								},
								"description": "GET /crops​/{crop}​/programs​/{programUUID}​/samples"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered valid OBS_UNIT_ID",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "afe6b078-8f5c-4631-b854-b4e1dcdbde0b",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "bae55a01-d56f-4b72-9845-63b7861a473c",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify returned sample details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].sampleId).to.eql(1);",
											"    pm.expect(jsonData[0].sampleNumber).to.eql(1);",
											"    pm.expect(jsonData[0].entryNo).to.eql(1);",
											"    pm.expect(jsonData[0].gid).to.eql(21);",
											"    pm.expect(jsonData[0].designation).to.eql(\"GP1\");",
											"    pm.expect(jsonData[0].sampleName).to.eql(\"ACCNO1:1\");",
											"    pm.expect(jsonData[0].sampleBusinessKey).to.eql(pm.environment.get(\"study_sampleId\"));",
											"    pm.expect(jsonData[0].takenBy).to.eql(\"Admin Admin\");",
											"    pm.expect(jsonData[0].sampleList).to.eql(\"Sample List 002\");",
											"    pm.expect(jsonData[0].datasetType).to.eql(\"PLOT\");",
											"    pm.expect(jsonData[0].studyName).to.eql(\"Study with Imported Cross Nursery 2018002\");",
											"    pm.expect(jsonData[0].studyId).to.eql(3009);",
											"    pm.expect(jsonData[0].enumerator).to.eql(\"1\");",
											"    pm.expect(jsonData[0].observationUnitId).to.eql(pm.environment.get(\"study_obs_unit_id\"));",
											"    pm.expect(jsonData[0].samplingDate).to.eql(\"26/10/2018\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/samples?obsUnitId={{study_obs_unit_id}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"samples"
									],
									"query": [
										{
											"key": "obsUnitId",
											"value": "{{study_obs_unit_id}}"
										}
									]
								},
								"description": "GET /crops​/{crop}​/programs​/{programUUID}​/samples"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid OBS_UNIT_ID",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "ed2f2813-3a04-41e8-8599-0854991d7193",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d20d9825-ab6c-4979-9c43-ad99b254ad2e",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify returned sample details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].sampleId).to.eql(1);",
											"    pm.expect(jsonData[0].sampleNumber).to.eql(1);",
											"    pm.expect(jsonData[0].entryNo).to.eql(1);",
											"    pm.expect(jsonData[0].gid).to.eql(21);",
											"    pm.expect(jsonData[0].designation).to.eql(\"GP1\");",
											"    pm.expect(jsonData[0].sampleName).to.eql(\"ACCNO1:1\");",
											"    pm.expect(jsonData[0].sampleBusinessKey).to.eql(pm.environment.get(\"study_sampleId\"));",
											"    pm.expect(jsonData[0].takenBy).to.eql(\"Admin Admin\");",
											"    pm.expect(jsonData[0].sampleList).to.eql(\"Sample List 002\");",
											"    pm.expect(jsonData[0].datasetType).to.eql(\"PLOT\");",
											"    pm.expect(jsonData[0].studyName).to.eql(\"Study with Imported Cross Nursery 2018002\");",
											"    pm.expect(jsonData[0].studyId).to.eql(3009);",
											"    pm.expect(jsonData[0].enumerator).to.eql(\"1\");",
											"    pm.expect(jsonData[0].observationUnitId).to.eql(pm.environment.get(\"study_obs_unit_id\"));",
											"    pm.expect(jsonData[0].samplingDate).to.eql(\"26/10/2018\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/samples?obsUnitId=PKWDPtLOzD8Szx",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"samples"
									],
									"query": [
										{
											"key": "obsUnitId",
											"value": "PKWDPtLOzD8Szx"
										}
									]
								},
								"description": "GET /crops​/{crop}​/programs​/{programUUID}​/samples"
							},
							"response": []
						},
						{
							"name": "Verify response code body when entered string input on listID",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "d3910f6d-23df-4241-9a9b-5467fcda220a",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "dddf3abb-3f5a-4f1a-be97-fbdf67e6180e",
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"pm.test(\"Verify error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"For input string: \\\"asd\\\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"value": "{{masterToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/samples?listId={{string_input}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"samples"
									],
									"query": [
										{
											"key": "listId",
											"value": "{{string_input}}"
										}
									]
								},
								"description": "GET /crops​/{crop}​/programs​/{programUUID}​/samples"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "POST ​/crops​/{crop}​/programs​/{programUUID}​/sample-list-folders",
					"item": [
						{
							"name": "Verify response code and body when entered valid inputs to all fields",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "b11b6539-bf8a-4b08-8ff6-069ff67cbcc6",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "23aaa6c3-1ab4-4682-b0af-7cb36d82d271",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"  var jsonData = pm.response.json();",
											"    pm.environment.unset(\"new_sample_folder_id\");",
											"    pm.environment.set(\"new_sample_folder_id\", jsonData.id);",
											"    "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/sample-list-folders?folderName={{new_sample_folder_name}}&parentId=0",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"sample-list-folders"
									],
									"query": [
										{
											"key": "folderName",
											"value": "{{new_sample_folder_name}}"
										},
										{
											"key": "parentId",
											"value": "0"
										}
									]
								},
								"description": "POST​/crops​/{crop}​/programs​/{programUUID}​/sample-list-folders"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered name of an already existing folder",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "651d0b84-efba-4617-b64b-64e3a0b4a9dd",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "6c69f70f-a07b-4f86-9fc1-3811f310baa4",
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"pm.test(\"Verify error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Folder name should be unique within the same directory\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/sample-list-folders?folderName={{new_sample_folder_name}}&parentId=0",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"sample-list-folders"
									],
									"query": [
										{
											"key": "folderName",
											"value": "{{new_sample_folder_name}}"
										},
										{
											"key": "parentId",
											"value": "0"
										}
									]
								},
								"description": "POST​/crops​/{crop}​/programs​/{programUUID}​/sample-list-folders"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered non-existing parent ID",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "e6906507-4d45-473f-bfb5-1b319a153b9c",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "e694b7f3-b30e-4cd4-b4c6-0c2e74aadd49",
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"pm.test(\"Verify error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Parent Folder does not exist\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/sample-list-folders?folderName={{new_sample_folder_name}}&parentId=99999",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"sample-list-folders"
									],
									"query": [
										{
											"key": "folderName",
											"value": "{{new_sample_folder_name}}"
										},
										{
											"key": "parentId",
											"value": "99999"
										}
									]
								},
								"description": "POST​/crops​/{crop}​/programs​/{programUUID}​/sample-list-folders"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered string input to parent ID",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "5852b1b4-4f68-4085-b93c-f64a0fed2350",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "81afea07-66dd-4407-9cd6-15873f0c7215",
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"pm.test(\"Verify error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"For input string: \\\"asd\\\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/sample-list-folders?folderName={{new_sample_folder_name}}&parentId={{string_input}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"sample-list-folders"
									],
									"query": [
										{
											"key": "folderName",
											"value": "{{new_sample_folder_name}}"
										},
										{
											"key": "parentId",
											"value": "{{string_input}}"
										}
									]
								},
								"description": "POST​/crops​/{crop}​/programs​/{programUUID}​/sample-list-folders"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "PUT​ /crops​/{crop}​/programs​/{programUUID}​/sample-list-folders​/{folderId}",
					"item": [
						{
							"name": "Verify response code and body when entered valid newFolderName and folderId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "37eb6717-b047-4994-a4de-d8798b3cf915",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "a1f6e509-e6d4-4c51-8b1a-a65be41a402c",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Verify returned id\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"new_sample_folder_id\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/sample-list-folders/{{new_sample_folder_id}}?newFolderName={{updated_sample_folder}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"sample-list-folders",
										"{{new_sample_folder_id}}"
									],
									"query": [
										{
											"key": "newFolderName",
											"value": "{{updated_sample_folder}}"
										}
									]
								},
								"description": "PUT​/crops​/{crop}​/programs​/{programUUID}​/sample-list-folders​/{folderId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered name of an already existing folder",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "6487073d-1596-4bbd-a46e-90ea6e2c5db8",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "249e07d5-338e-4f69-86f6-ce29b8d2628d",
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"pm.test(\"Verify error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Folder name should be unique within the same directory\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/sample-list-folders/{{new_sample_folder_id}}?newFolderName={{updated_sample_folder}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"sample-list-folders",
										"{{new_sample_folder_id}}"
									],
									"query": [
										{
											"key": "newFolderName",
											"value": "{{updated_sample_folder}}"
										}
									]
								},
								"description": "PUT​/crops​/{crop}​/programs​/{programUUID}​/sample-list-folders​/{folderId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered non-existing folderId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "f8630dad-521b-4d94-a7da-302546c00c85",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "54f4eda1-947d-4b69-9728-56e267c3ac8f",
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"pm.test(\"Verify error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Folder does not exist\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/sample-list-folders/99999?newFolderName={{updated_sample_folder}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"sample-list-folders",
										"99999"
									],
									"query": [
										{
											"key": "newFolderName",
											"value": "{{updated_sample_folder}}"
										}
									]
								},
								"description": "PUT​/crops​/{crop}​/programs​/{programUUID}​/sample-list-folders​/{folderId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered root folder id",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "81693df8-26db-4441-90cf-2a35cc2fff98",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "b6397f64-78ed-4c48-903a-c272587b8258",
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"pm.test(\"Verify error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Root folder name is not editable\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/sample-list-folders/1?newFolderName={{updated_sample_folder}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"sample-list-folders",
										"1"
									],
									"query": [
										{
											"key": "newFolderName",
											"value": "{{updated_sample_folder}}"
										}
									]
								},
								"description": "PUT​/crops​/{crop}​/programs​/{programUUID}​/sample-list-folders​/{folderId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered string input to folderId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "cd9cbc09-0546-44c5-a99b-9132477e156a",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "359452d1-c640-468a-a95f-2e00ade3439e",
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"pm.test(\"Verify error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"For input string: \\\"asd\\\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/sample-list-folders/{{string_input}}?newFolderName={{updated_sample_folder}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"sample-list-folders",
										"{{string_input}}"
									],
									"query": [
										{
											"key": "newFolderName",
											"value": "{{updated_sample_folder}}"
										}
									]
								},
								"description": "PUT​/crops​/{crop}​/programs​/{programUUID}​/sample-list-folders​/{folderId}"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "PUT /crops​/{crop}​/programs​/{programUUID}​/sample-list-folders​/{folderId}​/move",
					"item": [
						{
							"name": "Move a sample folder to another folder",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "0682ef90-9dd1-4006-8b87-ef00ed68813a",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "88309e0e-8676-41e1-a17b-e7ee2aeaf92c",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Verify returned id\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.parentId).to.eql(pm.environment.get(\"sample_folder_id_with_content\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/sample-list-folders/{{new_sample_folder_id}}/move?newParentId={{sample_folder_id_with_content}}&isCropList=false",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"sample-list-folders",
										"{{new_sample_folder_id}}",
										"move"
									],
									"query": [
										{
											"key": "newParentId",
											"value": "{{sample_folder_id_with_content}}"
										},
										{
											"key": "isCropList",
											"value": "false"
										}
									]
								},
								"description": "PUT /crops​/{crop}​/programs​/{programUUID}​/sample-list-folders​/{folderId}​/move"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered non-existing folderId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "15e33b42-2753-4299-a757-64168603fa83",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "9e868ad9-8082-4adf-be2a-4e1fc1101a46",
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"pm.test(\"Verify error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"sampleList does not exist\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/sample-list-folders/99999/move?newParentId={{sample_folder_id_with_content}}&isCropList=false",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"sample-list-folders",
										"99999",
										"move"
									],
									"query": [
										{
											"key": "newParentId",
											"value": "{{sample_folder_id_with_content}}"
										},
										{
											"key": "isCropList",
											"value": "false"
										}
									]
								},
								"description": "PUT /crops​/{crop}​/programs​/{programUUID}​/sample-list-folders​/{folderId}​/move"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered non-existing parent ID",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "09569587-afc7-4002-82dd-70d27fcc5214",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "8ee988f2-0e5e-48c5-8f9b-16bc2d5a8f28",
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"pm.test(\"Verify error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Specified newParentFolderId does not exist\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/sample-list-folders/{{new_sample_folder_id}}/move?newParentId=99999&isCropList=false",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"sample-list-folders",
										"{{new_sample_folder_id}}",
										"move"
									],
									"query": [
										{
											"key": "newParentId",
											"value": "99999"
										},
										{
											"key": "isCropList",
											"value": "false"
										}
									]
								},
								"description": "PUT /crops​/{crop}​/programs​/{programUUID}​/sample-list-folders​/{folderId}​/move"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered string input to parentId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "1c3e0d2f-4544-4644-ad36-73c8c2843758",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "dd56f76a-ed1a-4c6c-ad79-6dbf3eb6d2a7",
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"pm.test(\"Verify error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"For input string: \\\"asd\\\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/sample-list-folders/{{new_sample_folder_id}}/move?newParentId={{string_input}}&isCropList=false",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"sample-list-folders",
										"{{new_sample_folder_id}}",
										"move"
									],
									"query": [
										{
											"key": "newParentId",
											"value": "{{string_input}}"
										},
										{
											"key": "isCropList",
											"value": "false"
										}
									]
								},
								"description": "PUT /crops​/{crop}​/programs​/{programUUID}​/sample-list-folders​/{folderId}​/move"
							},
							"response": []
						},
						{
							"name": "Move the sample parent folder into its own child",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "0d3dd539-cf09-468f-9240-f76dff03f336",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "f9db9139-21e1-4e13-a4a5-a621765d4e62",
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"pm.test(\"Verify error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"You can not move list because are relatives with parent folder\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/sample-list-folders/{{sample_folder_id_with_content}}/move?newParentId={{new_sample_folder_id}}&isCropList=false",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"sample-list-folders",
										"{{sample_folder_id_with_content}}",
										"move"
									],
									"query": [
										{
											"key": "newParentId",
											"value": "{{new_sample_folder_id}}"
										},
										{
											"key": "isCropList",
											"value": "false"
										}
									]
								},
								"description": "PUT /crops​/{crop}​/programs​/{programUUID}​/sample-list-folders​/{folderId}​/move"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "DELETE ​/crops​/{crop}​/programs​/{programUUID}​/sample-list-folders​/{folderId}",
					"item": [
						{
							"name": "Verify response code and body when entered valid inputs to all fields",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "fd4f22bf-f93c-4e7f-ae0f-e36b6e62d473",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "b7202de8-4096-4f27-9bf1-0abd712d64ab",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/sample-list-folders/{{new_sample_folder_id}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"sample-list-folders",
										"{{new_sample_folder_id}}"
									]
								},
								"description": "DELETE​/crops​/{crop}​/programs​/{programUUID}​/sample-list-folders​/{folderId}"
							},
							"response": []
						},
						{
							"name": "Delete a sample folder with existing contents",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "1f08e747-b32c-4759-8108-f75515c4f477",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d4b2c7f3-2d01-482a-bd60-0cb6e363b619",
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"pm.test(\"Verify error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Folder has children and cannot be deleted\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-Auth-Token",
										"value": "{{masterToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/sample-list-folders/{{sample_folder_id_with_content}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"sample-list-folders",
										"{{sample_folder_id_with_content}}"
									]
								},
								"description": "DELETE​/crops​/{crop}​/programs​/{programUUID}​/sample-list-folders​/{folderId}"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "GET ​/crops​/{crop}​/sample-lists​/search",
					"item": [
						{
							"name": "Verify response code and body when entered valid searchString and exactMatch is false",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "38eef140-7d74-4e5e-9d85-77009b476434",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "c3d6b83e-bbcd-44b9-ad3e-aeaf885c08ab",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify returned sample details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].listName).to.eql(\"Sample List 002\");",
											"    //pm.expect(jsonData[1].listName).to.eql(\"Sample List 003\");",
											"    //pm.expect(jsonData[2].listName).to.eql(\"Sample List 004\");",
											"    //pm.expect(jsonData[3].listName).to.eql(\"Sample List 005\");",
											"    //pm.expect(jsonData[4].listName).to.eql(\"Sample List 006\");",
											"    //pm.expect(jsonData[5].listName).to.eql(\"Sample List 007\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"value": "{{masterToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/sample-lists/search?programUUID={{api_program_id}}&exactMatch=false&searchString={{search_string_not_exact}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"sample-lists",
										"search"
									],
									"query": [
										{
											"key": "programUUID",
											"value": "{{api_program_id}}"
										},
										{
											"key": "exactMatch",
											"value": "false"
										},
										{
											"key": "searchString",
											"value": "{{search_string_not_exact}}"
										}
									]
								},
								"description": "GET ​/crops​/{crop}​/sample-lists​/search"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered valid searchString and exactMatch is true",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "b741608c-0ee7-4270-a74d-cc5bde9dfe12",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "f36b8e54-5bf3-4fef-984c-425f624a8f6f",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify returned sample details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].listName).to.eql(\"Sample List 002\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/sample-lists/search?programUUID={{api_program_id}}&searchString={{search_string_exact}}&exactMatch=false",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"sample-lists",
										"search"
									],
									"query": [
										{
											"key": "programUUID",
											"value": "{{api_program_id}}"
										},
										{
											"key": "searchString",
											"value": "{{search_string_exact}}"
										},
										{
											"key": "exactMatch",
											"value": "false"
										}
									]
								},
								"description": "GET ​/crops​/{crop}​/sample-lists​/search"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "derived-variable-resource",
			"item": [
				{
					"name": "GET ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/derived-variables​/{variableId}​/formula-variables​/dataset-map",
					"item": [
						{
							"name": "Verify response code and body when entered valid inputs",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "1fae8196-554a-451d-be6a-9774f4deacdc",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "819032c7-bb6f-4617-80b0-dff41bdf30f7",
										"exec": [
											"pm.test(\"Status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Check mapped studyId\", function() {",
											"    var jsonData = pm.response.json();",
											"    var inputVariableId = pm.environment.get(\"inputVariable_cvterm_id\")",
											"    pm.expect(jsonData[inputVariableId].datasets[0].id).to.eql(3011);",
											"});",
											"pm.test(\"Check mapped study name\", function() {",
											"    var jsonData = pm.response.json();",
											"    var inputVariableId = pm.environment.get(\"inputVariable_cvterm_id\")",
											"    pm.expect(jsonData[inputVariableId].datasets[0].name).to.eql(\"Study with Imported Cross Nursery 2018002-PLOTDATA\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"value": "{{masterToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_datasetId}}/derived-variables/{{study_biomass_cvterm_id}}/formula-variables/dataset-map",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"derived-variables",
										"{{study_biomass_cvterm_id}}",
										"formula-variables",
										"dataset-map"
									]
								},
								"description": "GET​ /crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/derived-variables​/{variableId}​/formula-variables​/dataset-map"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered non-existing studyId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "95687d45-410b-47b3-b06e-1305522125f1",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "451b60eb-3f24-496f-b0a6-06286aa939d4",
										"exec": [
											"pm.test(\"Status code is 404\", function() {",
											"    pm.response.to.have.status(404);",
											"});",
											"pm.test(\"Check error message\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Study does not exist\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{non_existing_study_id}}/datasets/{{study_plot_datasetId}}/derived-variables/{{study_biomass_cvterm_id}}/formula-variables/dataset-map",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{non_existing_study_id}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"derived-variables",
										"{{study_biomass_cvterm_id}}",
										"formula-variables",
										"dataset-map"
									]
								},
								"description": "GET ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/derived-variables​/{variableId}​/formula-variables​/dataset-map"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered datasetId that does not belong to the study",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "0aaf301a-0949-4c26-8f42-50f8c09bf78d",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "0e409a96-6d6a-4c5c-a755-5b4c628cf28a",
										"exec": [
											"pm.test(\"Status code is 404\", function() {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Check mapped studyId\", function() {",
											"    var jsonData = pm.response.json();",
											"    var inputVariableId = pm.environment.get(\"inputVariable_cvterm_id\")",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Specified dataset \"+ pm.environment.get(\"study_plot_datasetId\")+ \" does not belong to the study \" + pm.environment.get(\"trialStudyId\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{trialStudyId}}/datasets/{{study_plot_datasetId}}/derived-variables/18010/formula-variables/dataset-map",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{trialStudyId}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"derived-variables",
										"18010",
										"formula-variables",
										"dataset-map"
									]
								},
								"description": "GET ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/derived-variables​/{variableId}​/formula-variables​/dataset-map"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered non-existing datasetId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "89299d5e-4f1b-408f-88db-77791ced1a50",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "9a2354b7-bfd0-4d80-9386-495050e485a7",
										"exec": [
											"pm.test(\"Status code is 404\", function() {",
											"    pm.response.to.have.status(404);",
											"});",
											"pm.test(\"Check mapped studyId\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Dataset does not exist\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{non_existing_study_id}}/derived-variables/{{study_biomass_cvterm_id}}/formula-variables/dataset-map",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{non_existing_study_id}}",
										"derived-variables",
										"{{study_biomass_cvterm_id}}",
										"formula-variables",
										"dataset-map"
									]
								},
								"description": "GET ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/derived-variables​/{variableId}​/formula-variables​/dataset-map"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "GET ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/derived-variables​/{variableId}​/formula-variables​/missing",
					"item": [
						{
							"name": "Verify response code and body when entered valid inputs",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "69d6647d-8f01-4f85-9ede-e855e59b4050",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "4aff8290-57af-486b-a784-bc3b28fc06db",
										"exec": [
											"pm.test(\"Status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Check missing variableId\", function() {",
											"    var jsonData = pm.response.json();",
											"    var grainSizeId = Number(pm.environment.get(\"grain_size_cvterm_id\"));",
											"    pm.expect(jsonData[0].id).to.eql(grainSizeId);",
											"});",
											"pm.test(\"Check missing variable name\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].name).to.eql(\"Grain_size\");",
											"});",
											"pm.test(\"Check target termId\", function() {",
											"    var jsonData = pm.response.json();",
											"    var targetTermId = Number(pm.environment.get(\"study_grainYield_cvterm_id\"));",
											"    pm.expect(jsonData[0].targetTermId).to.eql(targetTermId);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_datasetId}}/derived-variables/{{study_grainYield_cvterm_id}}/formula-variables/missing",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"derived-variables",
										"{{study_grainYield_cvterm_id}}",
										"formula-variables",
										"missing"
									]
								},
								"description": "GET /crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/derived-variables​/{variableId}​/formula-variables​/missing"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered non-existing studyId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "84cac021-cb6b-4668-86b2-f607c6d929ed",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "5d971b72-f2bf-469a-ad2e-f4a98022bfcd",
										"exec": [
											"pm.test(\"Status code is 44\", function() {",
											"    pm.response.to.have.status(404);",
											"});",
											"pm.test(\"Check error message\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Study does not exist\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{non_existing_study_id}}/datasets/{{study_plot_datasetId}}/derived-variables/{{study_grainYield_cvterm_id}}/formula-variables/missing",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{non_existing_study_id}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"derived-variables",
										"{{study_grainYield_cvterm_id}}",
										"formula-variables",
										"missing"
									]
								},
								"description": "GET ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/derived-variables​/{variableId}​/formula-variables​/missing"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered datasetId that does not belong to the study",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "ec68a804-b255-4b75-8229-ff1ee1bdf2d6",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "35341c6e-5493-4383-a77f-6b0fc5565e9a",
										"exec": [
											"pm.test(\"Status code is 404\", function() {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Check mapped studyId\", function() {",
											"    var jsonData = pm.response.json();",
											"    var inputVariableId = pm.environment.get(\"inputVariable_cvterm_id\")",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Specified dataset \"+ pm.environment.get(\"study_plot_datasetId\")+ \" does not belong to the study \" + pm.environment.get(\"trialStudyId\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{trialStudyId}}/datasets/{{study_plot_datasetId}}/derived-variables/{{study_grainYield_cvterm_id}}/formula-variables/missing",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{trialStudyId}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"derived-variables",
										"{{study_grainYield_cvterm_id}}",
										"formula-variables",
										"missing"
									]
								},
								"description": "GET ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/derived-variables​/{variableId}​/formula-variables​/missing"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered non-existing datasetId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "8156a0df-afe7-4928-80f6-e01858dbe1f6",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3013a8d9-425f-4d0d-beb4-48d10f060c92",
										"exec": [
											"pm.test(\"Status code is 44\", function() {",
											"    pm.response.to.have.status(404);",
											"});",
											"pm.test(\"Check error message\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Dataset does not exist\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{non_existing_study_id}}/derived-variables/{{study_grainYield_cvterm_id}}/formula-variables/missing",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{non_existing_study_id}}",
										"derived-variables",
										"{{study_grainYield_cvterm_id}}",
										"formula-variables",
										"missing"
									]
								},
								"description": "GET ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/derived-variables​/{variableId}​/formula-variables​/missing"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "HEAD ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/derived-variables",
					"item": [
						{
							"name": "Verify response code and body when entered valid inputs",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "d86d24dd-57f7-4dec-b51d-375522238afe",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "209d347f-757b-47b3-8c75-e719e3fae9da",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"X-Total-Count is correct\", function () {",
											"    pm.response.to.be.header(\"X-Total-Count\", \"2\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/derived-variables?datasetIds={{study_plot_datasetId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"derived-variables"
									],
									"query": [
										{
											"key": "datasetIds",
											"value": "{{study_plot_datasetId}}"
										}
									]
								},
								"description": "HEAD /crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/derived-variables"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered non-existing studyId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "5618ab50-0e31-4255-88f3-6a685cf470ab",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "b470e5cf-cf88-4ffa-971e-900c721c56b5",
										"exec": [
											"pm.test(\"Status code is 404\", function() {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{non_existing_study_id}}/derived-variables?datasetIds={{study_plot_datasetId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{non_existing_study_id}}",
										"derived-variables"
									],
									"query": [
										{
											"key": "datasetIds",
											"value": "{{study_plot_datasetId}}"
										}
									]
								},
								"description": "HEAD /crops/{crop}/studies/{studyId}/derived-variables"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered non-existing datasetId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "4a17023f-26c6-4e28-81d8-b84f2f3af12c",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "b4ab31ba-a082-456d-82ff-038bf4b8b88a",
										"exec": [
											"pm.test(\"Status code is 404\", function() {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/derived-variables?datasetIds={{non_existing_study_id}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"derived-variables"
									],
									"query": [
										{
											"key": "datasetIds",
											"value": "{{non_existing_study_id}}"
										}
									]
								},
								"description": "HEAD /crops/{crop}/studies/{studyId}/derived-variables"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "experimental-design-type-resource",
			"item": [
				{
					"name": "GET ​/crops​/{crop}​/experimental-design-types",
					"item": [
						{
							"name": "Verify if all experimental design types are returned",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "585a2827-b6ca-4609-bae3-b1993c14a08d",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Check id value for each design\", function () {",
											"  var id = [0, 1, 2, 4, 3, 5];",
											"  for (var i = 0; i < jsonData.length-1; i++) {",
											"    pm.expect(jsonData[i].id).to.eql(id[i]);",
											"    }",
											"});",
											"",
											"pm.test(\"Check name value for each design\", function () {",
											"  var name = [\"Randomized Complete Block Design\", \"Resolvable Incomplete Block Design\", \"Row-and-Column\", \"Augmented Randomized Block design\", \"Custom Import Design\", \"Entry list order\", \"P-Rep Design\"];",
											"  for (var i = 0; i < jsonData.length-1; i++) {",
											"    pm.expect(jsonData[i].name).to.eql(name[i]);",
											"    }",
											"});",
											"",
											"pm.test(\"Check termId value for each design\", function () {",
											"  var termId = [10110,10130,10145,10160,10168,10169,10164];",
											"  for (var i = 0; i < jsonData.length-1; i++) {",
											"    pm.expect(jsonData[i].termId).to.eql(termId[i]);",
											"    }",
											"});",
											"",
											"pm.test(\"Check termIdLatinized value for each design\", function () {",
											"  var termIdLatinized = [0,10166,10167,0,0,0,0];",
											"  for (var i = 0; i < jsonData.length-1; i++) {",
											"    pm.expect(jsonData[i].termIdLatinized).to.eql(termIdLatinized[i]);",
											"    }",
											"});",
											"",
											"pm.test(\"Check params value for each design\", function () {",
											"  var params = [\"randomizedCompleteBlockParams.html\",\"incompleteBlockParams.html\",\"rowAndColumnParams.html\",\"augmentedRandomizedBlockParams.html\",null,\"entryListOrderParams.html\",\"pRepParams.html\"];",
											"  for (var i = 0; i < jsonData.length-1; i++) {",
											"    pm.expect(jsonData[i].params).to.eql(params[i]);",
											"    }",
											"});",
											"",
											"pm.test(\"Check repNo value for each design\", function () {",
											"  for (var i = 0; i < jsonData.length-1; i++) {",
											"    pm.expect(jsonData[i].repNo).to.eql(0);",
											"    }",
											"});",
											"",
											"pm.test(\"Check totalNoOfEntries value for each design\", function () {",
											"  for (var i = 0; i < jsonData.length-1; i++) {",
											"    pm.expect(jsonData[i].totalNoOfEntries).to.eql(0);",
											"    }",
											"});",
											"pm.test(\"Check templateName value for each design\", function () {",
											"  var templateName = [\"Randomized Complete Block Design.csv\",\"Resolvable Incomplete Block Design.csv\",\"Row-and-Column.csv\",\"Augmented Randomized Block design.csv\",\"Custom Import Design.csv\",\"Entry list order.csv\",\"P-Rep Design.csv\"];",
											"  for (var i = 0; i < jsonData.length-1; i++) {",
											"    pm.expect(jsonData[i].templateName).to.eql(templateName[i]);",
											"    }",
											"});",
											"pm.test(\"Check bvName value for each design\", function () {",
											"  var bvName = [\"Randomized block design\",\"Resolvable incomplete block design\",\"Resolvable row-column design\",\"Incomplete block design\",\"\",\"\",\"P-rep design\"];",
											"  for (var i = 0; i < jsonData.length-1; i++) {",
											"    pm.expect(jsonData[i].bvName).to.eql(bvName[i]);",
											"    }",
											"});",
											"pm.test(\"Check bvDesignName value for each design\", function () {",
											"  var bvDesignName = [\"RandomizedBlock\",\"ResolvableIncompleteBlock\",\"ResolvableRowColumn\",\"Augmented\",\"\",\"\",\"Prep\"];",
											"  for (var i = 0; i < jsonData.length-1; i++) {",
											"    pm.expect(jsonData[i].bvDesignName).to.eql(bvDesignName[i]);",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "37bd9286-0b09-4c36-a41d-5c2645f318d5",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/experimental-design-types?programUUID={{api_program_id}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"experimental-design-types"
									],
									"query": [
										{
											"key": "programUUID",
											"value": "{{api_program_id}}"
										}
									]
								},
								"description": "GET /crops​/{crop}​/experimental-design-types"
							},
							"response": []
						},
						{
							"name": "Verify if all experimental design types are returned without programUUID input",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "28d3dd98-9a2b-4ef0-9d55-0c2defe1a86a",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Check id value for each design\", function () {",
											"  var id = [0, 1, 2, 4, 3, 5];",
											"  for (var i = 0; i < jsonData.length-1; i++) {",
											"    pm.expect(jsonData[i].id).to.eql(id[i]);",
											"    }",
											"});",
											"",
											"pm.test(\"Check name value for each design\", function () {",
											"  var name = [\"Randomized Complete Block Design\", \"Resolvable Incomplete Block Design\", \"Row-and-Column\", \"Augmented Randomized Block design\", \"Custom Import Design\", \"Entry list order\", \"P-Rep Design\"];",
											"  for (var i = 0; i < jsonData.length-1; i++) {",
											"    pm.expect(jsonData[i].name).to.eql(name[i]);",
											"    }",
											"});",
											"",
											"pm.test(\"Check termId value for each design\", function () {",
											"  var termId = [10110,10130,10145,10160,10168,10169,10164];",
											"  for (var i = 0; i < jsonData.length-1; i++) {",
											"    pm.expect(jsonData[i].termId).to.eql(termId[i]);",
											"    }",
											"});",
											"",
											"pm.test(\"Check termIdLatinized value for each design\", function () {",
											"  var termIdLatinized = [0,10166,10167,0,0,0,0];",
											"  for (var i = 0; i < jsonData.length-1; i++) {",
											"    pm.expect(jsonData[i].termIdLatinized).to.eql(termIdLatinized[i]);",
											"    }",
											"});",
											"",
											"pm.test(\"Check params value for each design\", function () {",
											"  var params = [\"randomizedCompleteBlockParams.html\",\"incompleteBlockParams.html\",\"rowAndColumnParams.html\",\"augmentedRandomizedBlockParams.html\",null,\"entryListOrderParams.html\",\"pRepParams.html\"];",
											"  for (var i = 0; i < jsonData.length-1; i++) {",
											"    pm.expect(jsonData[i].params).to.eql(params[i]);",
											"    }",
											"});",
											"",
											"pm.test(\"Check repNo value for each design\", function () {",
											"  for (var i = 0; i < jsonData.length-1; i++) {",
											"    pm.expect(jsonData[i].repNo).to.eql(0);",
											"    }",
											"});",
											"",
											"pm.test(\"Check totalNoOfEntries value for each design\", function () {",
											"  for (var i = 0; i < jsonData.length-1; i++) {",
											"    pm.expect(jsonData[i].totalNoOfEntries).to.eql(0);",
											"    }",
											"});",
											"pm.test(\"Check templateName value for each design\", function () {",
											"  var templateName = [\"Randomized Complete Block Design.csv\",\"Resolvable Incomplete Block Design.csv\",\"Row-and-Column.csv\",\"Augmented Randomized Block design.csv\",\"Custom Import Design.csv\",\"Entry list order.csv\",\"P-Rep Design.csv\"];",
											"  for (var i = 0; i < jsonData.length-1; i++) {",
											"    pm.expect(jsonData[i].templateName).to.eql(templateName[i]);",
											"    }",
											"});",
											"pm.test(\"Check bvName value for each design\", function () {",
											"  var bvName = [\"Randomized block design\",\"Resolvable incomplete block design\",\"Resolvable row-column design\",\"Incomplete block design\",\"\",\"\",\"P-rep design\"];",
											"  for (var i = 0; i < jsonData.length-1; i++) {",
											"    pm.expect(jsonData[i].bvName).to.eql(bvName[i]);",
											"    }",
											"});",
											"pm.test(\"Check bvDesignName value for each design\", function () {",
											"  var bvDesignName = [\"RandomizedBlock\",\"ResolvableIncompleteBlock\",\"ResolvableRowColumn\",\"Augmented\",\"\",\"\",\"Prep\"];",
											"  for (var i = 0; i < jsonData.length-1; i++) {",
											"    pm.expect(jsonData[i].bvDesignName).to.eql(bvDesignName[i]);",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "379c55be-e10b-4502-9f7d-2a5ab885a288",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/experimental-design-types",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"experimental-design-types"
									]
								},
								"description": "GET /crops​/{crop}​/experimental-design-types"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "study-instance-resource",
			"item": [
				{
					"name": "GET ​/crops​/{cropname}​/programs​/{programUUID}​/studies​/{studyId}​/instances",
					"item": [
						{
							"name": "Verify response code and body when entered valid crop and studyId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "709f67f6-bb27-44bc-9235-5894dbb72d70",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Check locationName\", function () {",
											"  pm.expect(jsonData[0].locationName).to.eql(\"Africa Rice Centre\");   ",
											"});",
											"",
											"pm.test(\"Check locationAbbreviation\", function () {",
											"  pm.expect(jsonData[0].locationAbbreviation).to.eql(\"WARDA\");   ",
											"});",
											"",
											"pm.test(\"Check customLocationAbbreviation\", function () {",
											"  pm.expect(jsonData[0].customLocationAbbreviation).to.eql(null);   ",
											"});",
											"pm.test(\"Check customLocationAbbreviation\", function () {",
											"  pm.expect(jsonData[0].customLocationAbbreviation).to.eql(null);   ",
											"});",
											"",
											"pm.test(\"Check instanceNumber\", function () {",
											"  pm.expect(jsonData[0].instanceNumber).to.eql(1);   ",
											"});",
											"",
											"pm.test(\"Check hasFieldmap\", function () {",
											"  pm.expect(jsonData[0].hasFieldmap).to.eql(false);   ",
											"});",
											"",
											"pm.test(\"Check hasGeoJSON\", function () {",
											"  pm.expect(jsonData[0].hasGeoJSON).to.eql(false);   ",
											"});",
											"",
											"pm.test(\"Check hasFieldLayout\", function () {",
											"  pm.expect(jsonData[0].hasFieldLayout).to.eql(false);   ",
											"});",
											"",
											"pm.test(\"Check hasExperimentalDesign\", function () {",
											"  pm.expect(jsonData[0].hasExperimentalDesign).to.eql(true);   ",
											"});",
											"",
											"pm.test(\"Check hasMeasurements\", function () {",
											"  pm.expect(jsonData[0].hasMeasurements).to.eql(true);   ",
											"});",
											"",
											"pm.test(\"Check canBeDeleted\", function () {",
											"  pm.expect(jsonData[0].canBeDeleted).to.eql(false);   ",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "46a4ffd3-a151-4ad4-b669-0df7c8602823",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"value": "{{masterToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/instances",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"instances"
									]
								},
								"description": "GET ​/crops​/{cropname}​/programs​/{programUUID}​/studies​/{studyId}​/instances"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered non-existing studyId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "49036a12-bd25-4444-a692-5a72970cf0c7",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Check error message\", function () {",
											"  pm.expect(jsonData.errors[0].message).to.eql(\"Study does not exist\");   ",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "8ce05a86-8a14-469d-9e5e-172d60b5fac6",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{non_existing_study_id}}/instances/",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{non_existing_study_id}}",
										"instances",
										""
									]
								},
								"description": "GET ​/crops​/{cropname}​/programs​/{programUUID}​/studies​/{studyId}​/instances"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "POST ​/crops​/{cropname}​/programs​/{programUUID}​/studies​/{studyId}​/instances​/generation",
					"item": [
						{
							"name": "Verify response code and body when entered valid crop and studyId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ffaf5e6a-fc2d-4688-814d-b7bcdb85240f",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.environment.unset(\"newInstanceDbId\");",
											"pm.environment.set(\"newInstanceDbId\", jsonData[0].instanceId);",
											"pm.environment.unset(\"newInstanceNumber\");",
											"pm.environment.set(\"newInstanceNumber\", jsonData[0].instanceNumber);",
											"",
											"pm.test(\"Check locationName\", function () {",
											"  pm.expect(jsonData[0].locationName).to.eql(\"Unspecified Location\");   ",
											"});",
											"",
											"pm.test(\"Check locationAbbreviation\", function () {",
											"  pm.expect(jsonData[0].locationAbbreviation).to.eql(\"NOLOC\");   ",
											"});",
											"",
											"pm.test(\"Check customLocationAbbreviation\", function () {",
											"  pm.expect(jsonData[0].customLocationAbbreviation).to.eql(null);   ",
											"});",
											"",
											"pm.test(\"Check hasFieldmap\", function () {",
											"  pm.expect(jsonData[0].hasFieldmap).to.eql(false);   ",
											"});",
											"",
											"pm.test(\"Check hasGeoJSON\", function () {",
											"  pm.expect(jsonData[0].hasGeoJSON).to.eql(null);   ",
											"});",
											"",
											"pm.test(\"Check hasFieldLayout\", function () {",
											"  pm.expect(jsonData[0].hasFieldLayout).to.eql(null);   ",
											"});",
											"",
											"pm.test(\"Check hasExperimentalDesign\", function () {",
											"  pm.expect(jsonData[0].hasExperimentalDesign).to.eql(false);   ",
											"});",
											"",
											"pm.test(\"Check hasMeasurements\", function () {",
											"  pm.expect(jsonData[0].hasMeasurements).to.eql(false);   ",
											"});",
											"",
											"pm.test(\"Check canBeDeleted\", function () {",
											"  pm.expect(jsonData[0].canBeDeleted).to.eql(true);   ",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "18029450-7476-4d9b-b5f1-d196a834521e",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/instances/generation?numberOfInstancesToGenerate=1",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"instances",
										"generation"
									],
									"query": [
										{
											"key": "numberOfInstancesToGenerate",
											"value": "1"
										}
									]
								},
								"description": "GET ​/crops​/{cropname}​/programs​/{programUUID}​/studies​/{studyId}​/instances"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when passed non-existing studyId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cdf0aed9-7a25-4b8f-ab19-f0058934ebd0",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Check error message\", function () {",
											"  pm.expect(jsonData.errors[0].message).to.eql(\"Study does not exist\");   ",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "288d68ae-c9db-4e85-b4f9-a3d0844e4ea1",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"value": "{{masterToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{non_existing_study_id}}/instances/generation?numberOfInstancesToGenerate=1",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{non_existing_study_id}}",
										"instances",
										"generation"
									],
									"query": [
										{
											"key": "numberOfInstancesToGenerate",
											"value": "1"
										}
									]
								},
								"description": "GET ​/crops​/{cropname}​/programs​/{programUUID}​/studies​/{studyId}​/instances"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when passed another datasetId to studyId field",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "81af5e6b-572b-45e6-9cd2-fa946b27d7b6",
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Check error message\", function () {",
											"  pm.expect(jsonData.errors[0].message).to.eql(\"No Environment Dataset by the supplied studyId [\"+pm.environment.get(\"study_env_id\")+\"] was found.\");   ",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2e7f7f27-00c1-4997-b6ad-73726d2b775b",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"value": "{{masterToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{study_env_id}}/instances/generation?numberOfInstancesToGenerate=1",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{study_env_id}}",
										"instances",
										"generation"
									],
									"query": [
										{
											"key": "numberOfInstancesToGenerate",
											"value": "1"
										}
									]
								},
								"description": "GET ​/crops​/{cropname}​/programs​/{programUUID}​/studies​/{studyId}​/instances"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "GET ​/crops​/{cropname}​/programs​/{programUUID}​/studies​/{studyId}​/instances​/{instanceId}",
					"item": [
						{
							"name": "Verify response code and body when entered valid crop and studyId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0c0a2961-6cb9-4bed-890a-a724c1a4a5b1",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Check instanceId\", function () {",
											"  pm.expect(jsonData.instanceId).to.eql(pm.environment.get(\"newInstanceDbId\"));   ",
											"});",
											"",
											"pm.test(\"Check locationName\", function () {",
											"  pm.expect(jsonData.locationName).to.eql(\"Unspecified Location\");   ",
											"});",
											"",
											"pm.test(\"Check locationAbbreviation\", function () {",
											"  pm.expect(jsonData.locationAbbreviation).to.eql(\"NOLOC\");   ",
											"});",
											"",
											"pm.test(\"Check customLocationAbbreviation\", function () {",
											"  pm.expect(jsonData.customLocationAbbreviation).to.eql(null);   ",
											"});",
											"pm.test(\"Check customLocationAbbreviation\", function () {",
											"  pm.expect(jsonData.customLocationAbbreviation).to.eql(null);   ",
											"});",
											"",
											"pm.test(\"Check instanceNumber\", function () {",
											"  pm.expect(jsonData.instanceNumber).to.eql(pm.environment.get(\"newInstanceNumber\"));   ",
											"});",
											"",
											"pm.test(\"Check hasFieldmap\", function () {",
											"  pm.expect(jsonData.hasFieldmap).to.eql(false);   ",
											"});",
											"",
											"pm.test(\"Check hasGeoJSON\", function () {",
											"  pm.expect(jsonData.hasGeoJSON).to.eql(false);   ",
											"});",
											"",
											"pm.test(\"Check hasFieldLayout\", function () {",
											"  pm.expect(jsonData.hasFieldLayout).to.eql(false);   ",
											"});",
											"",
											"pm.test(\"Check hasExperimentalDesign\", function () {",
											"  pm.expect(jsonData.hasExperimentalDesign).to.eql(false);   ",
											"});",
											"",
											"pm.test(\"Check hasMeasurements\", function () {",
											"  pm.expect(jsonData.hasMeasurements).to.eql(false);   ",
											"});",
											"",
											"pm.test(\"Check canBeDeleted\", function () {",
											"  pm.expect(jsonData.canBeDeleted).to.eql(true);   ",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a7bdcfec-1abc-4f66-a424-a8dc35333bf8",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/instances/{{newInstanceDbId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"instances",
										"{{newInstanceDbId}}"
									]
								},
								"description": "GET ​/crops​/{cropname}​/programs​/{programUUID}​/studies​/{studyId}​/instances​/{instanceId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered non-existing studyId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "00b51daa-3902-4147-82f3-7ecaf2f176df",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Check error message\", function () {",
											"  pm.expect(jsonData.errors[0].message).to.eql(\"Study does not exist\");   ",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "285ad1a1-3e36-4a35-a6af-290ad37f4440",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{non_existing_study_id}}/instances/{{newInstanceDbId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{non_existing_study_id}}",
										"instances",
										"{{newInstanceDbId}}"
									]
								},
								"description": "GET ​/crops​/{cropname}​/programs​/{programUUID}​/studies​/{studyId}​/instances​/{instanceId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered non-existing instanceDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3886e388-36ec-4513-a125-a71621c27e96",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Check error message\", function () {",
											"  pm.expect(jsonData.errors[0].message).to.eql(\"Specified instance(s) does not exist\");   ",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e115dcea-7024-4fbe-bc73-9b828f1466c0",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/instances/{{nonExistingInstanceDbId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"instances",
										"{{nonExistingInstanceDbId}}"
									]
								},
								"description": "GET ​/crops​/{cropname}​/programs​/{programUUID}​/studies​/{studyId}​/instances​/{instanceId}"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "DELETE ​/crops​/{cropname}​/programs​/{programUUID}​/studies​/{studyId}​/instances​/{instanceId}",
					"item": [
						{
							"name": "Verify response code and body when entered valid crop and studyId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "69711d65-ceab-496d-b082-fcb915203657",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "be01a293-969e-4d98-a795-3063262a2a93",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/instances?instanceIds={{newInstanceDbId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"instances"
									],
									"query": [
										{
											"key": "instanceIds",
											"value": "{{newInstanceDbId}}"
										}
									]
								},
								"description": "DELETE ​/crops​/{cropname}​/programs​/{programUUID}​/studies​/{studyId}​/instances​/{instanceId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered non-existing studyId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "983aad71-1c8f-4b7f-bf07-303c5003020e",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Check error message\", function () {",
											"  pm.expect(jsonData.errors[0].message).to.eql(\"Study does not exist\");   ",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c33d5342-8a59-4b96-827c-08630527ed52",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{non_existing_study_id}}/instances?instanceIds={{newInstanceDbId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{non_existing_study_id}}",
										"instances"
									],
									"query": [
										{
											"key": "instanceIds",
											"value": "{{newInstanceDbId}}"
										}
									]
								},
								"description": "DELETE ​/crops​/{cropname}​/programs​/{programUUID}​/studies​/{studyId}​/instances​/{instanceId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered non-existing instanceDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8fbf5902-3751-40f6-ae1d-1f82e9e90fa6",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Check error message\", function () {",
											"  pm.expect(jsonData.errors[0].message).to.eql(\"Specified instance(s) does not exist\");   ",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "bc374d0b-324f-453a-a747-b5aab40fb9d3",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/instances?instanceIds={{newInstanceDbId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"instances"
									],
									"query": [
										{
											"key": "instanceIds",
											"value": "{{newInstanceDbId}}"
										}
									]
								},
								"description": "DELETE ​/crops​/{cropname}​/programs​/{programUUID}​/studies​/{studyId}​/instances​/{instanceId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when tried instance with restrictions",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "90f42e94-0faf-444d-add9-9b7299a35253",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Check error message\", function () {",
											"  pm.expect(jsonData.errors[0].message).to.eql(\"Instance(s) cannot be deleted due to internal validations (samples, sub-observations, inventory transactions associated with the environment or advance/cross list associated with study).\");   ",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f89c772a-22d9-4376-ba41-f4406f0d1332",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/instances?instanceIds=1",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"instances"
									],
									"query": [
										{
											"key": "instanceIds",
											"value": "1"
										}
									]
								},
								"description": "DELETE ​/crops​/{cropname}​/programs​/{programUUID}​/studies​/{studyId}​/instances​/{instanceId}"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "experimental-design-resource",
			"item": [
				{
					"name": "Generate RCBD design",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2d6cfa02-db35-495c-9bf9-e5a89fdfef36",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "61ba36b9-d64f-4150-9fbd-bf3b7f8437f5",
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Auth-Token",
								"type": "text",
								"value": "{{masterToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"blockSize\": null,\n\t\"checkInsertionManner\": \"8414\",\n\t\"checkSpacing\": null,\n\t\"checkStartingPosition\": 1,\n\t\"colsPerReplications\": null,\n\t\"designType\": 0,\n\t\"environments\": [\n\t\t{\n\t\t\t\"experimentId\": 10001,\n\t\t\t\"locationId\": 33,\n\t\t\t\"managementDetailValues\": {\n\t\t\t\t\"8170\": \"1\",\n\t\t\t\t\"8190\": \"9012\"\n\t\t\t},\n\t\t\t\"phenotypeIDMap\": {},\n\t\t\t\"stockId\": 0,\n\t\t\t\"trialDetailValues\": {}\n\t\t}\n\t],\n\t\"fileName\": null,\n\t\"hasMeasurementData\": false,\n\t\"nblatin\": null,\n\t\"nclatin\": null,\n\t\"nrlatin\": null,\n\t\"numberOfBlocks\": null,\n\t\"replatinGroups\": null,\n\t\"replicationPercentage\": null,\n\t\"replicationsArrangement\": null,\n\t\"replicationsCount\": 2,\n\t\"rowsPerReplications\": null,\n\t\"startingPlotNo\": 1,\n\t\"totalGermplasmListCount\": null,\n\t\"treatmentFactors\": {},\n\t\"treatmentFactorsData\": {},\n\t\"trialInstancesForDesignGeneration\": [\n\t\t\"1\"\n\t],\n\t\"trialSettings\": {\n\t\t\"userInput\": {}\n\t},\n\t\"useLatenized\": false\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyForDeisgnGenId}}/experimental-designs/generation",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"crops",
								"{{crop}}",
								"programs",
								"{{api_program_id}}",
								"studies",
								"{{studyForDeisgnGenId}}",
								"experimental-designs",
								"generation"
							]
						},
						"description": "POST ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/experimental-designs​/generation"
					},
					"response": []
				},
				{
					"name": "Delete generated design",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6fc3921b-50cb-4752-807d-19d520f24ab2",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "939672e3-3887-473c-939f-f64d8308cefd",
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "X-Auth-Token",
								"type": "text",
								"value": "{{masterToken}}"
							}
						],
						"url": {
							"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/3083/experimental-designs",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"crops",
								"{{crop}}",
								"programs",
								"{{api_program_id}}",
								"studies",
								"3083",
								"experimental-designs"
							]
						},
						"description": "POST ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/experimental-designs​/generation"
					},
					"response": []
				},
				{
					"name": "Generate RIBD design",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2a0d9e04-43f8-49ed-91c1-a318023872a0",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "edf80eb1-3db5-42ca-9c7a-481e7a8695a7",
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Auth-Token",
								"type": "text",
								"value": "{{masterToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"blockSize\": 2,\n\t\"checkInsertionManner\": \"8414\",\n\t\"checkSpacing\": null,\n\t\"checkStartingPosition\": 1,\n\t\"colsPerReplications\": null,\n\t\"designType\": 1,\n\t\"environments\": [\n\t\t{\n\t\t\t\"experimentId\": 10001,\n\t\t\t\"locationId\": 33,\n\t\t\t\"managementDetailValues\": {\n\t\t\t\t\"8170\": \"1\",\n\t\t\t\t\"8190\": \"9012\"\n\t\t\t},\n\t\t\t\"phenotypeIDMap\": {},\n\t\t\t\"stockId\": 0,\n\t\t\t\"trialDetailValues\": {}\n\t\t}\n\t],\n\t\"fileName\": null,\n\t\"hasMeasurementData\": false,\n\t\"nblatin\": null,\n\t\"nclatin\": null,\n\t\"nrlatin\": null,\n\t\"numberOfBlocks\": null,\n\t\"replatinGroups\": null,\n\t\"replicationPercentage\": null,\n\t\"replicationsArrangement\": null,\n\t\"replicationsCount\": 2,\n\t\"rowsPerReplications\": null,\n\t\"startingPlotNo\": 1,\n\t\"totalGermplasmListCount\": null,\n\t\"treatmentFactors\": {},\n\t\"treatmentFactorsData\": {},\n\t\"trialInstancesForDesignGeneration\": [\n\t\t\"1\"\n\t],\n\t\"trialSettings\": {\n\t\t\"userInput\": {}\n\t},\n\t\"useLatenized\": false\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyForDeisgnGenId}}/experimental-designs/generation",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"crops",
								"{{crop}}",
								"programs",
								"{{api_program_id}}",
								"studies",
								"{{studyForDeisgnGenId}}",
								"experimental-designs",
								"generation"
							]
						},
						"description": "POST ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/experimental-designs​/generation"
					},
					"response": []
				},
				{
					"name": "Delete generated design",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "295c8815-cc98-453b-903e-7193af5e6b57",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "2ccf6912-6a6c-4425-8a40-aa1e2a5c99c6",
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "X-Auth-Token",
								"type": "text",
								"value": "{{masterToken}}"
							}
						],
						"url": {
							"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/3083/experimental-designs",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"crops",
								"{{crop}}",
								"programs",
								"{{api_program_id}}",
								"studies",
								"3083",
								"experimental-designs"
							]
						},
						"description": "POST ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/experimental-designs​/generation"
					},
					"response": []
				},
				{
					"name": "Generate RIBD Latinized design",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0a9ecec1-93ab-43a8-a18c-63b59b1fd592",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "8f277f3b-f314-4665-90e3-d5f08511a230",
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Auth-Token",
								"type": "text",
								"value": "{{masterToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"blockSize\": 2,\n\t\"checkInsertionManner\": \"8414\",\n\t\"checkSpacing\": null,\n\t\"checkStartingPosition\": 1,\n\t\"colsPerReplications\": null,\n\t\"designType\": 1,\n\t\"environments\": [\n\t\t{\n\t\t\t\"experimentId\": 11000,\n\t\t\t\"locationId\": 34,\n\t\t\t\"managementDetailValues\": {\n\t\t\t\t\"8170\": \"1\",\n\t\t\t\t\"8190\": \"9012\"\n\t\t\t},\n\t\t\t\"phenotypeIDMap\": {},\n\t\t\t\"stockId\": 0,\n\t\t\t\"trialDetailValues\": {}\n\t\t}\n\t],\n\t\"fileName\": null,\n\t\"hasMeasurementData\": false,\n\t\"nblatin\": \"2\",\n\t\"nclatin\": null,\n\t\"nrlatin\": null,\n\t\"numberOfBlocks\": null,\n\t\"replatinGroups\": null,\n\t\"replicationPercentage\": null,\n\t\"replicationsArrangement\": \"1\",\n\t\"replicationsCount\": 2,\n\t\"rowsPerReplications\": null,\n\t\"startingPlotNo\": 1,\n\t\"totalGermplasmListCount\": null,\n\t\"treatmentFactors\": {},\n\t\"treatmentFactorsData\": {},\n\t\"trialInstancesForDesignGeneration\": [\n\t\t\"1\"\n\t],\n\t\"trialSettings\": {\n\t\t\"userInput\": {}\n\t},\n\t\"useLatenized\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyForDeisgnGenId}}/experimental-designs/generation",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"crops",
								"{{crop}}",
								"programs",
								"{{api_program_id}}",
								"studies",
								"{{studyForDeisgnGenId}}",
								"experimental-designs",
								"generation"
							]
						},
						"description": "POST ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/experimental-designs​/generation"
					},
					"response": []
				},
				{
					"name": "Delete generated design",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cc8b14c5-a21f-4530-bb49-4c6f39b2f916",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "001548f0-7f73-4497-b874-3d80828f2a6d",
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "X-Auth-Token",
								"type": "text",
								"value": "{{masterToken}}"
							}
						],
						"url": {
							"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/3083/experimental-designs",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"crops",
								"{{crop}}",
								"programs",
								"{{api_program_id}}",
								"studies",
								"3083",
								"experimental-designs"
							]
						},
						"description": "POST ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/experimental-designs​/generation"
					},
					"response": []
				},
				{
					"name": "Generate Row and Col Design",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1d06db59-638a-417f-8033-66403b441474",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "31b6631a-3911-4490-9ad5-f231b7b41ca9",
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Auth-Token",
								"type": "text",
								"value": "{{masterToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"blockSize\": null,\n\t\"checkInsertionManner\": \"8414\",\n\t\"checkSpacing\": null,\n\t\"checkStartingPosition\": 1,\n\t\"colsPerReplications\": 5,\n\t\"designType\": 2,\n\t\"environments\": [\n\t\t{\n\t\t\t\"experimentId\": 11000,\n\t\t\t\"locationId\": 34,\n\t\t\t\"managementDetailValues\": {\n\t\t\t\t\"8170\": \"1\",\n\t\t\t\t\"8190\": 9012\n\t\t\t},\n\t\t\t\"phenotypeIDMap\": {},\n\t\t\t\"stockId\": 0,\n\t\t\t\"trialDetailValues\": {}\n\t\t}\n\t],\n\t\"fileName\": null,\n\t\"hasMeasurementData\": false,\n\t\"nblatin\": null,\n\t\"nclatin\": null,\n\t\"nrlatin\": null,\n\t\"numberOfBlocks\": null,\n\t\"replatinGroups\": null,\n\t\"replicationPercentage\": null,\n\t\"replicationsArrangement\": null,\n\t\"replicationsCount\": 2,\n\t\"rowsPerReplications\": 4,\n\t\"startingPlotNo\": 1,\n\t\"totalGermplasmListCount\": null,\n\t\"treatmentFactors\": {},\n\t\"treatmentFactorsData\": {},\n\t\"trialInstancesForDesignGeneration\": [\n\t\t\"1\"\n\t],\n\t\"trialSettings\": {\n\t\t\"userInput\": {}\n\t},\n\t\"useLatenized\": false\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyForDeisgnGenId}}/experimental-designs/generation",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"crops",
								"{{crop}}",
								"programs",
								"{{api_program_id}}",
								"studies",
								"{{studyForDeisgnGenId}}",
								"experimental-designs",
								"generation"
							]
						},
						"description": "POST ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/experimental-designs​/generation"
					},
					"response": []
				},
				{
					"name": "Delete generated design",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f3bce6c9-50a3-4d4a-afc8-71aef4c80f68",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "53e844ef-8455-453b-9f77-34435eb61a05",
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "X-Auth-Token",
								"type": "text",
								"value": "{{masterToken}}"
							}
						],
						"url": {
							"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/3083/experimental-designs",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"crops",
								"{{crop}}",
								"programs",
								"{{api_program_id}}",
								"studies",
								"3083",
								"experimental-designs"
							]
						},
						"description": "POST ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/experimental-designs​/generation"
					},
					"response": []
				},
				{
					"name": "Generate Row and Col Latinized Design",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e0d82faa-1cae-40c7-9fcf-2a4f459d8cd2",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "92fd902f-68b6-423c-84eb-92475037e1b1",
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Auth-Token",
								"type": "text",
								"value": "{{masterToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"blockSize\": null,\n\t\"checkInsertionManner\": \"8414\",\n\t\"checkSpacing\": null,\n\t\"checkStartingPosition\": 1,\n\t\"colsPerReplications\": 5,\n\t\"designType\": 2,\n\t\"environments\": [\n\t\t{\n\t\t\t\"experimentId\": 11000,\n\t\t\t\"locationId\": 34,\n\t\t\t\"managementDetailValues\": {\n\t\t\t\t\"8170\": \"1\",\n\t\t\t\t\"8190\": \"9012\"\n\t\t\t},\n\t\t\t\"phenotypeIDMap\": {},\n\t\t\t\"stockId\": 0,\n\t\t\t\"trialDetailValues\": {}\n\t\t}\n\t],\n\t\"fileName\": null,\n\t\"hasMeasurementData\": false,\n\t\"nblatin\": null,\n\t\"nclatin\": \"2\",\n\t\"nrlatin\": \"2\",\n\t\"numberOfBlocks\": null,\n\t\"replatinGroups\": \"2\",\n\t\"replicationPercentage\": null,\n\t\"replicationsArrangement\": \"3\",\n\t\"replicationsCount\": 2,\n\t\"rowsPerReplications\": 4,\n\t\"startingPlotNo\": 1,\n\t\"totalGermplasmListCount\": null,\n\t\"treatmentFactors\": {},\n\t\"treatmentFactorsData\": {},\n\t\"trialInstancesForDesignGeneration\": [\n\t\t\"1\"\n\t],\n\t\"trialSettings\": {\n\t\t\"userInput\": {}\n\t},\n\t\"useLatenized\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyForDeisgnGenId}}/experimental-designs/generation",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"crops",
								"{{crop}}",
								"programs",
								"{{api_program_id}}",
								"studies",
								"{{studyForDeisgnGenId}}",
								"experimental-designs",
								"generation"
							]
						},
						"description": "POST ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/experimental-designs​/generation"
					},
					"response": []
				},
				{
					"name": "Delete generated design",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4f18dbbd-5233-49b7-8aed-3ed0147e4332",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "ccfc35c1-3e9b-4d7f-9a08-0b7dede3a480",
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "X-Auth-Token",
								"type": "text",
								"value": "{{masterToken}}"
							}
						],
						"url": {
							"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/3083/experimental-designs",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"crops",
								"{{crop}}",
								"programs",
								"{{api_program_id}}",
								"studies",
								"3083",
								"experimental-designs"
							]
						},
						"description": "POST ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/experimental-designs​/generation"
					},
					"response": []
				},
				{
					"name": "Generate Augmented Design",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d8a91bda-5fa1-4d1e-834b-9d71dc685527",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "6e49b151-2b0a-4255-a92a-fb9cac06d098",
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Auth-Token",
								"type": "text",
								"value": "{{masterToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"blockSize\": null,\n\t\"checkInsertionManner\": \"8414\",\n\t\"checkSpacing\": null,\n\t\"checkStartingPosition\": 1,\n\t\"colsPerReplications\": null,\n\t\"designType\": 4,\n\t\"environments\": [\n\t\t{\n\t\t\t\"experimentId\": 11000,\n\t\t\t\"locationId\": 34,\n\t\t\t\"managementDetailValues\": {\n\t\t\t\t\"8170\": \"1\",\n\t\t\t\t\"8190\": \"9012\"\n\t\t\t},\n\t\t\t\"phenotypeIDMap\": {},\n\t\t\t\"stockId\": 0,\n\t\t\t\"trialDetailValues\": {}\n\t\t}\n\t],\n\t\"fileName\": null,\n\t\"hasMeasurementData\": false,\n\t\"nblatin\": null,\n\t\"nclatin\": null,\n\t\"nrlatin\": null,\n\t\"numberOfBlocks\": 2,\n\t\"replatinGroups\": null,\n\t\"replicationPercentage\": null,\n\t\"replicationsArrangement\": null,\n\t\"replicationsCount\": null,\n\t\"rowsPerReplications\": null,\n\t\"startingPlotNo\": 1,\n\t\"totalGermplasmListCount\": null,\n\t\"treatmentFactors\": {},\n\t\"treatmentFactorsData\": {},\n\t\"trialInstancesForDesignGeneration\": [\n\t\t\"1\"\n\t],\n\t\"trialSettings\": {\n\t\t\"userInput\": {}\n\t},\n\t\"useLatenized\": false\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyForDeisgnGenId}}/experimental-designs/generation",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"crops",
								"{{crop}}",
								"programs",
								"{{api_program_id}}",
								"studies",
								"{{studyForDeisgnGenId}}",
								"experimental-designs",
								"generation"
							]
						},
						"description": "POST ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/experimental-designs​/generation"
					},
					"response": []
				},
				{
					"name": "Delete generated design",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "11c97430-d4e9-44d7-93d7-b22ccfc580a0",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "05695d01-76ef-4cbd-a7b6-768c62c4a878",
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "X-Auth-Token",
								"type": "text",
								"value": "{{masterToken}}"
							}
						],
						"url": {
							"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/3083/experimental-designs",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"crops",
								"{{crop}}",
								"programs",
								"{{api_program_id}}",
								"studies",
								"3083",
								"experimental-designs"
							]
						},
						"description": "POST ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/experimental-designs​/generation"
					},
					"response": []
				},
				{
					"name": "Generate Entry List Order Design",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "600e613b-7d6e-4e4a-b510-06bb09ef6970",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "d3807f53-82b3-425b-9968-57d13f73ec27",
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Auth-Token",
								"type": "text",
								"value": "{{masterToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"blockSize\": null,\n\t\"checkInsertionManner\": \"8414\",\n\t\"checkSpacing\": 5,\n\t\"checkStartingPosition\": 1,\n\t\"colsPerReplications\": null,\n\t\"designType\": 5,\n\t\"environments\": [\n\t\t{\n\t\t\t\"experimentId\": 11000,\n\t\t\t\"locationId\": 34,\n\t\t\t\"managementDetailValues\": {\n\t\t\t\t\"8170\": \"1\",\n\t\t\t\t\"8190\": \"9012\"\n\t\t\t},\n\t\t\t\"phenotypeIDMap\": {},\n\t\t\t\"stockId\": 0,\n\t\t\t\"trialDetailValues\": {}\n\t\t}\n\t],\n\t\"fileName\": null,\n\t\"hasMeasurementData\": false,\n\t\"nblatin\": null,\n\t\"nclatin\": null,\n\t\"nrlatin\": null,\n\t\"numberOfBlocks\": null,\n\t\"replatinGroups\": null,\n\t\"replicationPercentage\": null,\n\t\"replicationsArrangement\": null,\n\t\"replicationsCount\": null,\n\t\"rowsPerReplications\": null,\n\t\"startingPlotNo\": 1,\n\t\"totalGermplasmListCount\": null,\n\t\"treatmentFactors\": {},\n\t\"treatmentFactorsData\": {},\n\t\"trialInstancesForDesignGeneration\": [\n\t\t\"1\"\n\t],\n\t\"trialSettings\": {\n\t\t\"userInput\": {}\n\t},\n\t\"useLatenized\": false\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyForDeisgnGenId}}/experimental-designs/generation",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"crops",
								"{{crop}}",
								"programs",
								"{{api_program_id}}",
								"studies",
								"{{studyForDeisgnGenId}}",
								"experimental-designs",
								"generation"
							]
						},
						"description": "POST ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/experimental-designs​/generation"
					},
					"response": []
				},
				{
					"name": "Delete generated design",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "49ee8b6e-f058-4771-906f-a40998e4b455",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "c2baf4a3-3d25-4e20-8852-02ec8b741881",
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "X-Auth-Token",
								"type": "text",
								"value": "{{masterToken}}"
							}
						],
						"url": {
							"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/3083/experimental-designs",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"crops",
								"{{crop}}",
								"programs",
								"{{api_program_id}}",
								"studies",
								"3083",
								"experimental-designs"
							]
						},
						"description": "POST ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/experimental-designs​/generation"
					},
					"response": []
				},
				{
					"name": "Generate Prep Design",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ab8ef860-a6a8-4f71-ae98-3992ea1e2301",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "6f311a76-23eb-4bb7-97e4-164b801bd4fc",
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Auth-Token",
								"type": "text",
								"value": "{{masterToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"blockSize\": 2,\n\t\"checkInsertionManner\": \"8414\",\n\t\"checkSpacing\": null,\n\t\"checkStartingPosition\": 1,\n\t\"colsPerReplications\": null,\n\t\"designType\": 6,\n\t\"environments\": [\n\t\t{\n\t\t\t\"experimentId\": 11000,\n\t\t\t\"locationId\": 34,\n\t\t\t\"managementDetailValues\": {\n\t\t\t\t\"8170\": \"1\",\n\t\t\t\t\"8190\": \"9012\"\n\t\t\t},\n\t\t\t\"phenotypeIDMap\": {},\n\t\t\t\"stockId\": 0,\n\t\t\t\"trialDetailValues\": {}\n\t\t}\n\t],\n\t\"fileName\": null,\n\t\"hasMeasurementData\": false,\n\t\"nblatin\": null,\n\t\"nclatin\": null,\n\t\"nrlatin\": null,\n\t\"numberOfBlocks\": null,\n\t\"replatinGroups\": null,\n\t\"replicationPercentage\": 40,\n\t\"replicationsArrangement\": null,\n\t\"replicationsCount\": 3,\n\t\"rowsPerReplications\": null,\n\t\"startingPlotNo\": 1,\n\t\"totalGermplasmListCount\": null,\n\t\"treatmentFactors\": {},\n\t\"treatmentFactorsData\": {},\n\t\"trialInstancesForDesignGeneration\": [\n\t\t\"1\"\n\t],\n\t\"trialSettings\": {\n\t\t\"userInput\": {}\n\t},\n\t\"useLatenized\": false\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyForDeisgnGenId}}/experimental-designs/generation",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"crops",
								"{{crop}}",
								"programs",
								"{{api_program_id}}",
								"studies",
								"{{studyForDeisgnGenId}}",
								"experimental-designs",
								"generation"
							]
						},
						"description": "POST ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/experimental-designs​/generation"
					},
					"response": []
				},
				{
					"name": "Delete generated design",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "078f0d82-913a-45a5-8ed0-3858f91fdb62",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "acea08c2-c0a1-461a-b4b1-b44e7b686d92",
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "X-Auth-Token",
								"type": "text",
								"value": "{{masterToken}}"
							}
						],
						"url": {
							"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/3083/experimental-designs",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"crops",
								"{{crop}}",
								"programs",
								"{{api_program_id}}",
								"studies",
								"3083",
								"experimental-designs"
							]
						},
						"description": "POST ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/experimental-designs​/generation"
					},
					"response": []
				},
				{
					"name": "Delete generated design on a study with no design yet",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6a4252af-9d58-46d4-b5c7-3ea7dc28ce74",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Check error message\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors[0].message).to.eql(\"The study has no experiment design yet.\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "369194d0-6752-4aec-b283-65782d5d3ea8",
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "X-Auth-Token",
								"type": "text",
								"value": "{{masterToken}}"
							}
						],
						"url": {
							"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/3083/experimental-designs",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"crops",
								"{{crop}}",
								"programs",
								"{{api_program_id}}",
								"studies",
								"3083",
								"experimental-designs"
							]
						},
						"description": "POST ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/experimental-designs​/generation"
					},
					"response": []
				},
				{
					"name": "Delete generated design on a study with restrictions",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "47ea6a2f-f460-4d06-8608-65599ad162de",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Check error message\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors[0].message).to.eql(\"Instance(s) cannot be deleted due to internal validations (samples, sub-observations, inventory transactions associated with the environment or advance/cross list associated with study).\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "366c18fd-2283-408c-a9cb-57f1b1a5019e",
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "X-Auth-Token",
								"type": "text",
								"value": "{{masterToken}}"
							}
						],
						"url": {
							"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/experimental-designs",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"crops",
								"{{crop}}",
								"programs",
								"{{api_program_id}}",
								"studies",
								"{{studyId}}",
								"experimental-designs"
							]
						},
						"description": "POST ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/experimental-designs​/generation"
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "lot-resource",
			"item": [
				{
					"name": "POST /crops/{cropName}/lots",
					"item": [
						{
							"name": "Verify response code and body when generateStockisTrue",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f14f4aaa-ed11-4c36-bbdf-25c350ce1e3b",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json().result;\r",
											"pm.environment.unset(\"lotUUID\");\r",
											"pm.environment.set(\"lotUUID\", jsonData);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "92fff9dc-90d1-4866-8e7d-24d2bcd88b44",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"generateStock\": true,\r\n  \"gid\": {{germplasmDbId}},\r\n  \"locationId\": 6000,\r\n  \"notes\": \"new lot record\",\r\n  \"stockPrefix\": \"SID\",\r\n  \"unitId\": 8264\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lots",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lots"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered stockId prefix > 15 characters",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2f23a030-a50c-4e32-bc55-90e6501f6f10",
										"exec": [
											"pm.test(\"Status code is 500\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error message\", function () {\r",
											"    var error = pm.response.json().errors[0].message;\r",
											"    pm.expect(error).to.eql(\"Stock ID Prefix must end with a letter\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "cfa097c3-7968-46ec-8758-34aa1b9aac2f",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"generateStock\": true,\r\n  \"gid\": {{germplasmDbId}},\r\n  \"locationId\": 6000,\r\n  \"notes\": \"new lot record\",\r\n  \"stockPrefix\": \"1234\",\r\n  \"unitId\": 8264\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lots",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lots"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered notes > 255 characters",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b39affe6-37f8-41e6-8308-7d7ba82a06ec",
										"exec": [
											"pm.test(\"Status code is 500\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error message\", function () {\r",
											"    var error = pm.response.json().errors[0].message;\r",
											"    pm.expect(error).to.eql(\"The max length of Lot Notes is 255 characters\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "81d0bc6d-8d8a-45fc-93cc-661ae299f0a5",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"generateStock\": true,\r\n  \"gid\": {{germplasmDbId}},\r\n  \"locationId\": 6000,\r\n  \"notes\": \"Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum\",\r\n  \"stockPrefix\": \"SID\",\r\n  \"unitId\": 8264\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lots",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lots"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body when invalid unitId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "72ebd8c3-5626-4df5-a876-81ed4721a0e9",
										"exec": [
											"pm.test(\"Status code is 500\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error message\", function () {\r",
											"    var error = pm.response.json().errors[0].message;\r",
											"    pm.expect(error).to.eql(\"Invalid inventory unit identifier\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ca2a2dcf-b25c-48db-9ed6-7c396735cc3c",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"generateStock\": true,\r\n  \"gid\": {{germplasmDbId}},\r\n  \"locationId\": 6000,\r\n  \"notes\": \"new lot record\",\r\n  \"stockPrefix\": \"SID\",\r\n  \"unitId\": 0\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lots",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lots"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body when invalid locationId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5e445ee4-31b3-460f-8e71-2ca8e9073d5e",
										"exec": [
											"pm.test(\"Status code is 500\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error message\", function () {\r",
											"    var error = pm.response.json().errors[0].message;\r",
											"    pm.expect(error).to.eql(\"Invalid seed storage location\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "8310906d-f618-4ba6-a051-487479d584f5",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"generateStock\": true,\r\n  \"gid\": {{germplasmDbId}},\r\n  \"locationId\": 0,\r\n  \"notes\": \"new lot record\",\r\n  \"stockPrefix\": \"SID\",\r\n  \"unitId\": 8264\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lots",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lots"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body when invalid GID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b9c76477-5487-401a-887a-4f68945b42b8",
										"exec": [
											"pm.test(\"Status code is 500\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error message\", function () {\r",
											"    var error = pm.response.json().errors[0].message;\r",
											"    pm.expect(error).to.eql(\"Invalid germplasm identifier\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "80d49abf-b530-4120-96ea-0e3d80816b9b",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"generateStock\": true,\r\n  \"gid\": 0,\r\n  \"locationId\": 6000,\r\n  \"notes\": \"new lot record\",\r\n  \"stockPrefix\": \"SID\",\r\n  \"unitId\": 8264\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lots",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lots"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body when GID is a string",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3bed4fcb-5928-4142-957a-c954b8499199",
										"exec": [
											"pm.test(\"Status code is 500\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error message\", function () {\r",
											"    var error = pm.response.json().errors[0].message;\r",
											"    pm.expect(error).to.eql(\"Invalid request body.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "693b7fde-4e96-44b4-a0bd-f353389c739f",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"generateStock\": true,\r\n  \"gid\": \"test\",\r\n  \"locationId\": 6000,\r\n  \"notes\": \"new lot record\",\r\n  \"stockPrefix\": \"SID\",\r\n  \"unitId\": 8264\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lots",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lots"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered numeric stockId prefix",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7b5ff34d-0717-4763-989a-39f2a8547e4b",
										"exec": [
											"pm.test(\"Status code is 500\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error message\", function () {\r",
											"    var error = pm.response.json().errors[0].message;\r",
											"    pm.expect(error).to.eql(\"Stock ID Prefix must end with a letter\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e2bc817f-d749-4431-97df-bfbad9192aa5",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"generateStock\": true,\r\n  \"gid\": {{germplasmDbId}},\r\n  \"locationId\": 6000,\r\n  \"notes\": \"new lot record\",\r\n  \"stockPrefix\": \"1234\",\r\n  \"unitId\": 8264\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lots",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lots"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body when generateStockisFalse (withStockId)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "eab36c79-925b-408b-8256-0dc60cdb3fbb",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "cad7d86a-af4f-4e31-8a11-81157c87a97c",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"generateStock\": false,\r\n  \"gid\": {{germplasmDbId}},\r\n  \"locationId\": 6000,\r\n  \"notes\": \"new lot record\",\r\n \"stockId\": \"S{{$timestamp}}-1\", \r\n  \"unitId\": 8264\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lots",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lots"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body when generateStockisFalse (withoutStockId)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "65bb995d-34f5-4040-8c3a-2a63b16dd9fe",
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error message\", function () {\r",
											"    var error = pm.response.json().errors[0].message;\r",
											"    pm.expect(error).to.eql(\"StockId is required\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "737706d8-7c5f-4a05-b16b-4ba85a72be74",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"generateStock\": false,\r\n  \"gid\": {{germplasmDbId}},\r\n  \"locationId\": 6000,\r\n  \"notes\": \"new lot record\",\r\n  \"stockId\": \"\",\r\n  \"unitId\": 8264\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lots",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lots"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "POST /crops/{cropName}/lot-lists",
					"item": [
						{
							"name": "Verify response code when entered valid values to all fields - with StockIDPrefix",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "49c09621-29c8-4134-ab81-df0ed811ab03",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json().result;\r",
											"pm.environment.unset(\"lotUUID\");\r",
											"pm.environment.set(\"lotUUID\", jsonData);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "67ff5f80-f180-45c9-a1ed-17a97ec2821f",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"lotList\": [\r\n    {\r\n      \"gid\": {{germplasmDbId}},\r\n      \"initialBalance\": 100,\r\n      \"notes\": \"created via postman\",\r\n      \"storageLocationAbbr\": \"DSS\",\r\n      \"storageLocationId\": 6000,\r\n      \"unitId\": 8264,\r\n      \"unitName\": \"SEED_AMOUNT_g\"\r\n    }\r\n  ],\r\n  \"stockIdPrefix\": \"SID\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lot-lists",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lot-lists"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code when no unitName specified",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "424df847-f5c0-4f02-93ff-48952727b7d1",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error message\", function () {\r",
											"    var error = pm.response.json().errors[0].message;\r",
											"    pm.expect(error).to.eql(\"Units are mandatory, please check for empty values\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "8e7509e5-c6c4-4dfa-b045-9d0dd3ab9c8c",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"lotList\": [\r\n    {\r\n      \"gid\": {{germplasmDbId}},\r\n      \"initialBalance\": 100,\r\n      \"notes\": \"\",\r\n      \"unitId\":0,\r\n      \"unitName\": \"\",\r\n      \"storageLocationAbbr\": \"DSS\"\r\n    }\r\n  ],\r\n  \"stockIdPrefix\": \"SID\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lot-lists",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lot-lists"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code when no storageLocationAbbr specified",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4d2074b6-1513-45fd-a20c-800d07bc128c",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error message\", function () {\r",
											"    var error = pm.response.json().errors[0].message;\r",
											"    pm.expect(error).to.eql(\"Storage location abbreviations are mandatory, please check for empty values\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "031a7cb2-be2c-453b-84e9-962abb282100",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"lotList\": [\r\n    {\r\n      \"gid\": {{germplasmDbId}},\r\n      \"initialBalance\": 100,\r\n      \"notes\": \"\",\r\n      \"unitId\": 8264,\r\n      \"unitName\": \"SEED_AMOUNT_g\"\r\n      \"storageLocationAbbr\": \"\"\r\n    }\r\n  ],\r\n  \"stockIdPrefix\": \"SID\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lot-lists",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lot-lists"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid GID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e775b430-cfc3-44e9-aacd-35a4ac9fbd14",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error message\", function () {\r",
											"    var error = pm.response.json().errors[0].message;\r",
											"    pm.expect(error).to.eql(\"The following gid(s): 10000 were not found in the system\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "3dd3bd10-080f-43b8-b7b7-d2eca1a3fb38",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"lotList\": [\r\n    {\r\n      \"gid\": 10000,\r\n      \"initialBalance\": 100,\r\n      \"notes\": \"created via postman\",\r\n      \"unitId\": 8264,\r\n      \"unitName\": \"SEED_AMOUNT_g\",\r\n      \"storageLocationAbbr\": \"DSS\"\r\n    }\r\n  ],\r\n  \"stockIdPrefix\": \"SID\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lot-lists",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lot-lists"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered string GID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ef3cd5de-357a-4fdf-b412-62f03874899f",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error message\", function () {\r",
											"    var error = pm.response.json().errors[0].message;\r",
											"    pm.expect(error).to.eql(\"Invalid request body.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e5ee3729-d366-4c48-ad79-9944317c6cba",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"lotList\": [\r\n    {\r\n      \"gid\": \"test\",\r\n      \"initialBalance\": 100,\r\n      \"notes\": \"created via postman\",\r\n      \"unitId\": 8264,\r\n      \"unitName\": \"SEED_AMOUNT_g\",\r\n      \"storageLocationAbbr\": \"DSS\"\r\n    }\r\n  ],\r\n  \"stockIdPrefix\": \"SID\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lot-lists",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lot-lists"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid initial amount",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "975e26e6-1c4e-4af4-a77b-a942b42af33c",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error message\", function () {\r",
											"    var error = pm.response.json().errors[0].message;\r",
											"    pm.expect(error).to.eql(\"Some values for imported Amount have the wrong format, must be a positive integer or decimal number. Please correct them and try again.\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c2a13a17-8759-4c50-99e2-db3f36db0bc5",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"lotList\": [\r\n    {\r\n      \"gid\": {{germplasmDbId}},\r\n      \"initialBalance\": 0,\r\n      \"notes\": \"created via postman\",\r\n      \"unitId\": 8264,\r\n      \"unitName\": \"SEED_AMOUNT_g\",\r\n      \"storageLocationAbbr\": \"DSS\"\r\n    }\r\n  ],\r\n  \"stockIdPrefix\": \"SID\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lot-lists",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lot-lists"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered notes > 255 characters",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c80be111-f332-421b-a820-695ae2b9702a",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error message\", function () {\r",
											"    var error = pm.response.json().errors[0].message;\r",
											"    pm.expect(error).to.eql(\"The max length of Lot Notes is 255 characters\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "89f18ed8-19cc-4c19-adba-e2b9be33dece",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"lotList\": [\r\n    {\r\n      \"gid\": {{germplasmDbId}},\r\n      \"initialBalance\": 100,\r\n      \"notes\": \"Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum\",\r\n      \"unitId\": 8264,\r\n      \"unitName\": \"SEED_AMOUNT_g\",\r\n      \"storageLocationAbbr\": \"DSS\"\r\n    }\r\n  ],\r\n  \"stockIdPrefix\": \"SID\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lot-lists",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lot-lists"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid unit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7fda314c-cfe8-438a-9d24-71397d8c067c",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error message\", function () {\r",
											"    var error = pm.response.json().errors[0].message;\r",
											"    pm.expect(error).to.eql(\"We have not found the following Unit(s) invalid in the system. Please correct them and try again.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c7f6c888-888d-450c-bfdf-21177f8777cd",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"lotList\": [\r\n    {\r\n      \"gid\": {{germplasmDbId}},\r\n      \"initialBalance\": 100,\r\n      \"notes\": \"created via postman\",\r\n      \"unitName\": \"invalid\",\r\n      \"storageLocationAbbr\": \"DSS\"\r\n    }\r\n  ],\r\n  \"stockIdPrefix\": \"SID\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lot-lists",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lot-lists"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid storage location ABBR",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cea68840-de42-495e-b71a-0afe522e59e8",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error message\", function () {\r",
											"    var error = pm.response.json().errors[0].message;\r",
											"    pm.expect(error).to.eql(\"The following Storage Location ABBR(s): invalid does not exist or not correspond to a Storage Location in the system. Please correct them and try again.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2da8c1ad-fd7a-46f2-8331-077228481539",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"lotList\": [\r\n    {\r\n      \"gid\": {{germplasmDbId}},\r\n      \"initialBalance\": 100,\r\n      \"notes\": \"created via postman\",\r\n      \"unitId\": 8264,\r\n      \"unitName\": \"SEED_AMOUNT_g\",\r\n      \"storageLocationAbbr\": \"invalid\"\r\n    }\r\n  ],\r\n  \"stockIdPrefix\": \"SID\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lot-lists",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lot-lists"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code when entered valid values - no StockIDPrefix",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "adf999c7-7052-4d25-9690-2a8f392fcb35",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "dd145530-2b31-4f4a-b74a-1442ee6b9523",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"lotList\": [\r\n    {\r\n      \"gid\": {{germplasmDbId}},\r\n      \"initialBalance\": 100,\r\n      \"notes\": \"created via postman\",\r\n      \"unitId\": 8264,\r\n      \"unitName\": \"SEED_AMOUNT_g\",\r\n      \"storageLocationAbbr\": \"DSS\"\r\n    }\r\n  ],\r\n  \"stockIdPrefix\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lot-lists",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lot-lists"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code when entered stockId Prefix > 15 characters",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ff233757-88f8-496d-9fa6-e45f6bab1021",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error message\", function () {\r",
											"    var error = pm.response.json().errors[0].message;\r",
											"    pm.expect(error).to.eql(\"Prefix length can not have more than 15 characters\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "71f1e06c-76cd-4bb9-9332-beb8dc173dcd",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"lotList\": [\r\n    {\r\n      \"gid\": {{germplasmDbId}},\r\n      \"initialBalance\": 100,\r\n      \"notes\": \"created via postman\",\r\n      \"unitId\": 8264,\r\n      \"unitName\": \"SEED_AMOUNT_g\",\r\n      \"storageLocationAbbr\": \"DSS\"\r\n    }\r\n  ],\r\n  \"stockIdPrefix\": \"Lorem ipsum dolor sit amet, consectetur adipiscing elit.\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lot-lists",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lot-lists"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code when entered duplicate stockId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d998ca10-4816-4b4a-84a6-76951669c407",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error message\", function () {\r",
											"    var error = pm.response.json().errors[0].message;\r",
											"    pm.expect(error).to.eql(\"We have found the following StockId(s): SID1-1 in the system. Please correct them and try again.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "54cfdbba-fa01-492b-8800-9b27fb3e5cd9",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"lotList\": [\r\n    {\r\n      \"gid\": {{germplasmDbId}},\r\n      \"initialBalance\": 100,\r\n      \"notes\": \"created via postman\",\r\n      \"unitId\": 8264,\r\n      \"unitName\": \"SEED_AMOUNT_g\",\r\n      \"storageLocationAbbr\": \"DSS\",\r\n      \"stockId\": \"SID1-1\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lot-lists",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lot-lists"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code when entered stockId > 35 characters",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1e8be005-9665-4f0c-b66b-077c96872fb8",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error message\", function () {\r",
											"    var error = pm.response.json().errors[0].message;\r",
											"    pm.expect(error).to.eql(\"Stock Id can not have more than 35 characters\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d457a474-f29a-4477-a371-a00b1574143f",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"lotList\": [\r\n    {\r\n      \"gid\": {{germplasmDbId}},\r\n      \"initialBalance\": 100,\r\n      \"notes\": \"created via postman\",\r\n      \"unitId\": 8264,\r\n      \"unitName\": \"SEED_AMOUNT_g\",\r\n      \"storageLocationAbbr\": \"DSS\",\r\n      \"stockId\": \"Lorem ipsum dolor sit amet, consectetur adipiscing elit.\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lot-lists",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lot-lists"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "POST /crops/{cropName}/lots/search",
					"item": [
						{
							"name": "Verify response code and body when entered GID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "160dcde5-85ef-44bd-99d7-5434136fa2d0",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"pm.environment.unset(\"searchRequestId\");\r",
											"pm.environment.set(\"searchRequestId\", jsonData.result.searchResultDbId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "629a5477-774a-492d-9a11-b0d65a3a1482",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"gids\": [{{germplasmDbId}}]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lots/search",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lots",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered createdDate",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "91dec673-80f2-4c98-84fb-2ea39c0052b3",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"pm.environment.unset(\"createdDate\");\r",
											"pm.environment.set(\"createdDate\", jsonData.result.searchResultDbId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "aced96b1-30a2-49e7-9fb2-a34e6153a66a",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"createdDate\": \"2020-06-19\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lots/search",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lots",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered status = Active",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8e6644ff-8109-416f-aa8e-0e58861c98db",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"pm.environment.unset(\"lstatus\");\r",
											"pm.environment.set(\"lstatus\", jsonData.result.searchResultDbId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9bd6f318-6bbc-46fc-8a85-10abbe75e250",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"status\": 0\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lots/search",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lots",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body when filter by specific closed lot",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "442bb837-286f-42ba-b23c-de7d9e9a8e3e",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"pm.environment.unset(\"cstatus\");\r",
											"pm.environment.set(\"cstatus\", jsonData.result.searchResultDbId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f9d832df-fdaf-4331-b1fa-80c23f78bd29",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"status\": 1,\r\n  \"stockId\": \"SID9-1\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lots/search",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lots",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered unitId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "feaffd24-6e07-4f0f-b0f7-59b0a44676bb",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"pm.environment.unset(\"unitId\");\r",
											"pm.environment.set(\"unitId\", jsonData.result.searchResultDbId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c596720d-43b0-4af9-bc60-1b04db2b2106",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"unitId\": 8264\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lots/search",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lots",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered createdByUsername",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "60fc7876-4309-4aac-bc65-bd4f68c066db",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"pm.environment.unset(\"createdByUsername\");\r",
											"pm.environment.set(\"createdByUsername\", jsonData.result.searchResultDbId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f13d28ee-80da-42e4-a391-ec437a57291d",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"createdByUsername\": \"admin\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lots/search",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lots",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered germplasmListIds",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "56d3b448-c3c5-4d86-adba-a29ec4e31b6b",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"pm.environment.unset(\"germplasmListIds\");\r",
											"pm.environment.set(\"germplasmListIds\", jsonData.result.searchResultDbId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f4baf8a3-2300-4ea1-b2cb-9a855ee637fc",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"germplasmListIds\": [2]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lots/search",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lots",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered stockId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1285d5f5-bb7c-4a0a-85ff-8e5ae5c09eff",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"pm.environment.unset(\"stockId\");\r",
											"pm.environment.set(\"stockId\", jsonData.result.searchResultDbId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ce6a9c7e-6f2f-42ae-adfa-d0e7b1c207f6",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"stockId\": \"SID1-1\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lots/search",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lots",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered lotUUIDs",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6c897eed-36a3-4d05-8c31-ff4f10068057",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"pm.environment.unset(\"lotUUIDs\");\r",
											"pm.environment.set(\"lotUUIDs\", jsonData.result.searchResultDbId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d64e1d03-7f75-428d-8f9c-72a8058d21da",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"lotUUIDs\": [\"24745a1f-0871-4531-9ec6-b46da0f1c81f\",\"ab5b9671-342f-48c2-9b22-10035b8dd6df\",\"48172afa-7a7f-4ca1-9d68-9f6bccdb2fb1\"]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lots/search",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lots",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered multiple lotids",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f789f51c-a7c0-44ac-9a18-507b26ebdaca",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"pm.environment.unset(\"multiplelots\");\r",
											"pm.environment.set(\"multiplelots\", jsonData.result.searchResultDbId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a09bc575-d1e2-4e31-ba1c-2d5861e012b2",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"lotIds\": [1, 2,3,4]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lots/search",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lots",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered designation",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "db42a824-6b9f-439c-9f05-0a343d5138ca",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"pm.environment.unset(\"lot_desig\");\r",
											"pm.environment.set(\"lot_desig\", jsonData.result.searchResultDbId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "777bd5f1-c846-4a85-b6e7-b55baa247910",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n     \"designation\": \"CML1\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lots/search",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lots",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered actualBalance",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e64acf26-4ec2-4bbe-b8c3-38df367095a0",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"pm.environment.unset(\"actualBalance\");\r",
											"pm.environment.set(\"actualBalance\", jsonData.result.searchResultDbId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "cd84663b-0c40-4fcd-a050-d74a640462f5",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n \"minActualBalance\": 1,\r\n  \"minActualBalance\": 100\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lots/search",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lots",
										"search"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "GET /crops/{cropName}/lots/search",
					"item": [
						{
							"name": "Verify results when entered searchRequestId that filters by GID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "326829fe-b0e3-4a48-94c5-59d707d10d74",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Check existing lot record\", function () {\r",
											"  var jsonData = pm.response.json();\r",
											"  var dataLength = jsonData.length;\r",
											"\r",
											"  for (i = 0; i < dataLength ; i++) {\r",
											"            var lotId =jsonData[i].lotId\r",
											"          if(lotId==194){\r",
											"              pm.expect(jsonData[0].gid).to.eql(21);\r",
											"              pm.expect(jsonData[0].designation).to.eql(\"CML1\");\r",
											"              console.log(\"index:\"+i+ \"Found! \");\r",
											"          }\r",
											"          \r",
											"      }\r",
											"  });\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "087bab11-d917-4d68-9bbc-d7000d0fddd2",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lots/search?searchRequestId={{searchRequestId}}&page=0&size=50&sort=lotid,desc",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lots",
										"search"
									],
									"query": [
										{
											"key": "searchRequestId",
											"value": "{{searchRequestId}}"
										},
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "50"
										},
										{
											"key": "sort",
											"value": "lotid,desc"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify results when entered searchRequestId that filters by createdDate",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d4c31d77-4327-4ef9-8c49-49035b06ed0d",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check existing lot record\", function () {\r",
											"  var jsonData = pm.response.json();\r",
											"  var dataLength = jsonData.length;\r",
											"\r",
											"  for (i = 0; i < dataLength ; i++) {\r",
											"            var lotId =jsonData[i].lotId\r",
											"          if(lotId==194){\r",
											"              pm.expect(jsonData[0].gid).to.eql(21);\r",
											"              pm.expect(jsonData[0].designation).to.eql(\"CML1\");\r",
											"              pm.expect(jsonData[0].createdDate).to.eql(\"2020-06-24\");\r",
											"              console.log(\"index:\"+i+ \"Found! \");\r",
											"          }\r",
											"          \r",
											"      }\r",
											"  });\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ac2a955f-a4da-4e7e-be08-6963dc7de4df",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lots/search?searchRequestId={{createdDate}}&page=0&size=50&sort=lotid,desc",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lots",
										"search"
									],
									"query": [
										{
											"key": "searchRequestId",
											"value": "{{createdDate}}"
										},
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "50"
										},
										{
											"key": "sort",
											"value": "lotid,desc"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify results when entered searchRequestId that filters by status=Active",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "050f47f0-03ed-44ff-9b21-ef7fa287ae86",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Check existing lot record\", function () {\r",
											"  var jsonData = pm.response.json();\r",
											"  var dataLength = jsonData.length;\r",
											"\r",
											"  for (i = 0; i < dataLength ; i++) {\r",
											"            var lotId =jsonData[i].lotId\r",
											"          if(lotId==194){\r",
											"              pm.expect(jsonData[0].gid).to.eql(21);\r",
											"              pm.expect(jsonData[0].status).to.eql(\"ACTIVE\");\r",
											"              console.log(\"index:\"+i+ \"Found! \");\r",
											"          }\r",
											"          \r",
											"      }\r",
											"  });\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a444f570-c379-4aac-8b27-d0db4e0bba38",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lots/search?searchRequestId={{lstatus}}&page=0&size=50&sort=lotid,desc",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lots",
										"search"
									],
									"query": [
										{
											"key": "searchRequestId",
											"value": "{{lstatus}}"
										},
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "50"
										},
										{
											"key": "sort",
											"value": "lotid,desc"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify results when entered searchRequestId that filters by unitId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "82b51fba-9e31-4951-bd45-19d207dc413b",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check existing lot record\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var dataLength = jsonData.length;\r",
											"\r",
											"    for (i = 0; i < dataLength; i++) {\r",
											"        var lotId = jsonData[i].lotId\r",
											"        if (lotId == 194) {\r",
											"            pm.expect(jsonData[0].gid).to.eql(21);\r",
											"            pm.expect(jsonData[0].designation).to.eql(\"CML1\");\r",
											"            pm.expect(jsonData[0].createdDate).to.eql(\"2020-06-24\");\r",
											"             pm.expect(jsonData[0].unitName).to.eql(\"SEED_AMOUNT_kg\");\r",
											"            console.log(\"index:\" + i + \"Found! \");\r",
											"        }\r",
											"\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0bc62f87-b210-4523-bc83-e2a1d4239b83",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lots/search?searchRequestId={{unitId}}&page=0&size=50&sort=lotid,desc",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lots",
										"search"
									],
									"query": [
										{
											"key": "searchRequestId",
											"value": "{{unitId}}"
										},
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "50"
										},
										{
											"key": "sort",
											"value": "lotid,desc"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify results when entered searchRequestId that filters by germplasmListIds",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "85a84d58-b3cb-4c64-8fa8-0f9f18235281",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Check existing lot record\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var dataLength = jsonData.length;\r",
											"\r",
											"    for (i = 0; i < dataLength; i++) {\r",
											"        var lotId = jsonData[i].lotId\r",
											"        if (lotId == 194) {\r",
											"            pm.expect(jsonData[0].gid).to.eql(21);\r",
											"            pm.expect(jsonData[0].designation).to.eql(\"CML1\");\r",
											"            pm.expect(jsonData[0].createdDate).to.eql(\"2020-06-24\");\r",
											"             pm.expect(jsonData[0].unitName).to.eql(\"SEED_AMOUNT_kg\");\r",
											"            console.log(\"index:\" + i + \"Found! \");\r",
											"        }\r",
											"\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "fe1ec6c1-54e0-42f7-a05c-0090f6c720df",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lots/search?searchRequestId={{germplasmListIds}}&page=0&size=50&sort=lotid,desc",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lots",
										"search"
									],
									"query": [
										{
											"key": "searchRequestId",
											"value": "{{germplasmListIds}}"
										},
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "50"
										},
										{
											"key": "sort",
											"value": "lotid,desc"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify results when entered searchRequestId that filters by multiple lot ids",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ef93d8d4-8d02-4b1e-bf52-42fab8b8bc34",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Check existing lot record\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var dataLength = jsonData.length;\r",
											"\r",
											"    for (i = 0; i < dataLength; i++) {\r",
											"        var lotId = jsonData[i].lotId\r",
											"        if (lotId == 194) {\r",
											"            pm.expect(jsonData[0].gid).to.eql(21);\r",
											"            pm.expect(jsonData[0].designation).to.eql(\"CML1\");\r",
											"            pm.expect(jsonData[0].createdDate).to.eql(\"2020-06-24\");\r",
											"             pm.expect(jsonData[0].unitName).to.eql(\"SEED_AMOUNT_kg\");\r",
											"            console.log(\"index:\" + i + \"Found! \");\r",
											"        }\r",
											"\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2c93fb1b-ef43-47a6-9de6-705b7cbdd78e",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lots/search?searchRequestId={{multiplelots}}&page=0&size=50&sort=lotid,desc",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lots",
										"search"
									],
									"query": [
										{
											"key": "searchRequestId",
											"value": "{{multiplelots}}"
										},
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "50"
										},
										{
											"key": "sort",
											"value": "lotid,desc"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify results when entered searchRequestId that filters by designation",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0ccda29a-05b6-44e8-94bf-af35672c5223",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Check existing lot record\", function () {\r",
											"  var jsonData = pm.response.json();\r",
											"  var dataLength = jsonData.length;\r",
											"\r",
											"  for (i = 0; i < dataLength ; i++) {\r",
											"            var lotId =jsonData[i].lotId\r",
											"          if(lotId==194){\r",
											"              pm.expect(jsonData[0].gid).to.eql(21);\r",
											"              pm.expect(jsonData[0].designation).to.eql(\"CML1\");\r",
											"              console.log(\"index:\"+i+ \"Found! \");\r",
											"          }\r",
											"          \r",
											"      }\r",
											"  });\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5f1702c5-7aa2-4b29-aea6-1c1ab852b891",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lots/search?searchRequestId={{lot_desig}}&page=0&size=50&sort=lotid,desc",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lots",
										"search"
									],
									"query": [
										{
											"key": "searchRequestId",
											"value": "{{lot_desig}}"
										},
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "50"
										},
										{
											"key": "sort",
											"value": "lotid,desc"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify results when entered searchRequestId that filters by stockId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "86f32074-9d65-47d9-b12e-2f0117ffd30e",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Check existing lot record\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var dataLength = jsonData.length;\r",
											"\r",
											"    for (i = 0; i < dataLength; i++) {\r",
											"        var lotId = jsonData[i].lotId\r",
											"        if (lotId == 194) {\r",
											"            pm.expect(jsonData[0].gid).to.eql(21);\r",
											"            pm.expect(jsonData[0].designation).to.eql(\"CML1\");\r",
											"            pm.expect(jsonData[0].createdDate).to.eql(\"2020-06-24\");\r",
											"             pm.expect(jsonData[0].stockId).to.eql(\"SID21-1\");\r",
											"            console.log(\"index:\" + i + \"Found! \");\r",
											"        }\r",
											"\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "6cae2e67-66ca-45fe-bce8-e3ef80f83cf1",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lots/search?searchRequestId={{stockId}}&page=0&size=50&sort=lotid,desc",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lots",
										"search"
									],
									"query": [
										{
											"key": "searchRequestId",
											"value": "{{stockId}}"
										},
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "50"
										},
										{
											"key": "sort",
											"value": "lotid,desc"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify results when entered searchRequestId that filters by lotUUIDs",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fa683e14-131c-47ba-aa9f-179c3862ac81",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check existing lot record\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var dataLength = jsonData.length;\r",
											"\r",
											"    for (i = 0; i < dataLength; i++) {\r",
											"        var lotId = jsonData[i].lotId\r",
											"        if (lotId == 194) {\r",
											"            pm.expect(jsonData[0].gid).to.eql(21);\r",
											"             pm.expect(jsonData[0].lotUUID).to.eql(\"269ab93d-2390-4be2-ad0e-6e32b84c644e\");\r",
											"            console.log(\"index:\" + i + \"Found! \");\r",
											"        }\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "24c6bf2f-74a5-44ee-a9e8-6830392bff8f",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lots/search?searchRequestId={{lotUUIDs}}&page=0&size=50&sort=lotid,desc",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lots",
										"search"
									],
									"query": [
										{
											"key": "searchRequestId",
											"value": "{{lotUUIDs}}"
										},
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "50"
										},
										{
											"key": "sort",
											"value": "lotid,desc"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify results when entered searchRequestId that filters by createdByUsername",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1bef3f07-4818-49a1-b6a6-47b5e6a03687",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check existing lot record\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var dataLength = jsonData.length;\r",
											"\r",
											"    for (i = 0; i < dataLength; i++) {\r",
											"        var lotId = jsonData[i].lotId\r",
											"        if (lotId == 194) {\r",
											"            pm.expect(jsonData[0].gid).to.eql(21);\r",
											"             pm.expect(jsonData[0].createdByUsername).to.eql(\"admin\");\r",
											"            console.log(\"index:\" + i + \"Found! \");\r",
											"        }\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c0e1ff42-2880-48b8-ae10-6a7c93286e01",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lots/search?searchRequestId={{createdByUsername}}&page=0&size=50&sort=lotid,desc",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lots",
										"search"
									],
									"query": [
										{
											"key": "searchRequestId",
											"value": "{{createdByUsername}}"
										},
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "50"
										},
										{
											"key": "sort",
											"value": "lotid,desc"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify results when entered searchRequestId that filters by actualBalance",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1f4d2b1c-99c3-44cc-a69d-386efaae10a3",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Check existing lot record\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var dataLength = jsonData.length;\r",
											"\r",
											"    for (i = 0; i < dataLength; i++) {\r",
											"        var lotId = jsonData[i].lotId\r",
											"        if (lotId == 194) {\r",
											"            pm.expect(jsonData[0].gid).to.eql(21);\r",
											"             pm.expect(jsonData[0].actualBalance).to.eql(100.0);\r",
											"            console.log(\"index:\" + i + \"Found! \");\r",
											"        }\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "fe884a88-4f6e-45ea-bb68-1aee7a61e972",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lots/search?searchRequestId={{actualBalance}}&page=0&size=50&sort=lotid,desc",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lots",
										"search"
									],
									"query": [
										{
											"key": "searchRequestId",
											"value": "{{actualBalance}}"
										},
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "50"
										},
										{
											"key": "sort",
											"value": "lotid,desc"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify results when entered invalid searchRequestId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "71b14ae2-a863-4646-ad1a-d1b18ece7520",
										"exec": [
											"pm.test(\"Status code is 500\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error message\", function () {\r",
											"    var error = pm.response.json().errors[0].message;\r",
											"    pm.expect(error).to.eql(\"Error when trying to get the search request. Id is null or does not exist\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0b5321c3-9518-4f75-8609-381b0f55d9ee",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lots/search?searchRequestId=0&page=0&size=50&sort=lotid,desc",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lots",
										"search"
									],
									"query": [
										{
											"key": "searchRequestId",
											"value": "0"
										},
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "50"
										},
										{
											"key": "sort",
											"value": "lotid,desc"
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "POST /crops/{cropName}/lots/metadata",
					"item": [
						{
							"name": "Verify response code and body when entered valid lotUUID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "67c09591-6ea0-499c-b29e-9fd1da3da276",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check lotsCountByUnitName is not null\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.lotsCountByUnitName).not.eql(null);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "67be92a6-7b51-412f-914a-77625698f757",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"itemIds\": [\r\n    \"{{lotUUID}}\"\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lots/metadata",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lots",
										"metadata"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid lotid",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d7b63bc5-6283-4988-9ecf-8d8be40859f7",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error message\", function () {\r",
											"    var error = pm.response.json().errors[0].message;\r",
											"    pm.expect(error).to.eql(\"Some of the lot UUIDs were not found. Please review\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "45a65e4c-57f9-4039-b306-a4695a856d33",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"itemIds\": [\r\n    0\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lots/metadata",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lots",
										"metadata"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid searchRequest",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4ba5293a-2e0d-4bc6-8b66-f0086cf11bfb",
										"exec": [
											"pm.test(\"Status code is 500\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error message\", function () {\r",
											"    var error = pm.response.json().errors[0].message;\r",
											"    pm.expect(error).to.eql(\"Error when trying to get the search request. Id is null or does not exist\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5aac1dec-43a0-46be-82dd-36daedd4d9aa",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"searchRequest\": 0\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lots/metadata",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lots",
										"metadata"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered valid searchRequest",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b1e9d47a-6675-402a-9fd7-4ad7e8143e8f",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify returned lotsCountByUnitName\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.lotsCountByUnitName.SEED_AMOUNT_kg).to.not.eql(null);\r",
											"    pm.expect(jsonData.lotsCountByUnitName.SEED_AMOUNT_g).to.not.eql(null);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "19aa32bc-4acd-4f7b-9d24-d85e4b4a59fa",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"searchRequest\": {{searchRequestId}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lots/metadata",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lots",
										"metadata"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "PATCH /crops/{cropName}/lot-lists",
					"item": [
						{
							"name": "Verify response code and body when all values are valid - lotUUID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "873fe47c-3e0e-4381-8293-c4489d535089",
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "77aee0a3-d40d-45b9-ad34-a8fd654cd032",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PATCH",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"gid\": 21,\r\n  \"locationId\": 6000,\r\n  \"notes\": \"updated via postman\",\r\n  \"searchComposite\": {\r\n    \"itemIds\": [\r\n       \"{{lotUUID}}\"\r\n    ]\r\n  },\r\n  \"unitId\": 8264\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lot-lists",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lot-lists"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid lotUUID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c25a8406-4774-4ace-8332-49e790bcaeeb",
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error message\", function () {\r",
											"    var error = pm.response.json().errors[0].message;\r",
											"    pm.expect(error).to.eql(\"Some of the lot UUIDs were not found. Please review\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1f007296-6733-4d26-93de-eb2a8cd26c08",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PATCH",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"gid\": 22,\r\n  \"locationId\": 6000,\r\n  \"notes\": \"updated via postman\",\r\n  \"searchComposite\": {\r\n    \"itemIds\": [\r\n      0\r\n    ]\r\n  },\r\n  \"unitId\": 8264\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lot-lists",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lot-lists"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid searchRequestId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "16d76498-9392-4e4c-8236-1d6c0a7e9cd4",
										"exec": [
											"pm.test(\"Status code is 500\", function () {\r",
											"pm.globals.set(\"variable_key\", \"variable_value\");\r",
											"    pm.response.to.have.status(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error message\", function () {\r",
											"    var error = pm.response.json().errors[0].message;\r",
											"    pm.expect(error).to.eql(\"Error when trying to get the search request. Id is null or does not exist\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "67984217-9d05-4d61-9906-a289391e8888",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PATCH",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"gid\": 0,\r\n  \"locationId\": 6000,\r\n  \"notes\": \"updated via postman\",\r\n  \"searchComposite\": {\r\n    \"searchRequest\": 10\r\n  },\r\n  \"unitId\": 8264\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lot-lists",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lot-lists"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid GID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "504c248f-55b2-4a3a-b3fb-4f5bc6dc5d4f",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error message\", function () {\r",
											"    var error = pm.response.json().errors[0].message;\r",
											"    pm.expect(error).to.eql(\"Invalid germplasm identifier\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b0c777f1-1266-45a4-a861-1b44f790cb05",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PATCH",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"gid\": 1111111111,\r\n  \"locationId\": 6000,\r\n  \"notes\": \"updated via postman\",\r\n  \"searchComposite\": {\r\n    \"itemIds\": [\r\n       \"{{lotUUID}}\"\r\n    ]\r\n  },\r\n  \"unitId\": 8264\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lot-lists",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lot-lists"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered notes > 255 characters",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e0674a65-188c-4350-95b8-1780bddf4f81",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error message\", function () {\r",
											"    var error = pm.response.json().errors[0].message;\r",
											"    pm.expect(error).to.eql(\"The max length of Lot Notes is 255 characters\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1813698f-9622-4a38-bf82-7ea8c8bb446c",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PATCH",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"gid\": 21,\r\n  \"locationId\": 6000,\r\n  \"notes\": \"Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum\",\r\n    \"scaleName\": \"SEED_AMOUNT_kg\",\r\n  \"searchComposite\": {\r\n    \"itemIds\": [\r\n       \"{{lotUUID}}\"\r\n    ]\r\n  },\r\n  \"unitId\": 8264\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lot-lists",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lot-lists"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid unitId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e82bc44e-b205-48c4-b676-c6bf5e483fac",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error message\", function () {\r",
											"    var error = pm.response.json().errors[0].message;\r",
											"    pm.expect(error).to.eql(\"Invalid inventory unit identifier\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b7f50955-af5f-46c6-91c2-2e2b730db239",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PATCH",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"gid\": 24,\r\n  \"locationId\": 6000,\r\n  \"notes\": \"updated via postman\",\r\n  \"searchComposite\": {\r\n    \"itemIds\": [\r\n       \"{{lotUUID}}\"\r\n    ]\r\n  },\r\n  \"unitId\": 0\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lot-lists",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lot-lists"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid locationId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e1887432-40e6-4585-88d5-4b54bb3dfda7",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error message\", function () {\r",
											"    var error = pm.response.json().errors[0].message;\r",
											"    pm.expect(error).to.eql(\"Invalid seed storage location\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ba77595e-a24b-4d60-9f32-4bcb6ed8e485",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PATCH",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"gid\": 21,\r\n  \"locationId\": 0,\r\n  \"notes\": \"updated via postman\",\r\n  \"searchComposite\": {\r\n    \"itemIds\": [\r\n       \"{{lotUUID}}\"\r\n    ]\r\n  },\r\n  \"unitId\": 8264\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lot-lists",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lot-lists"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body if there is a closed lot",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "13b027e4-73d5-41cd-97ec-bc1767f79c95",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Verify error message\", function () {\r",
											"    var error = pm.response.json().errors[0].message;\r",
											"    pm.expect(error).to.eql(\"1 selected lots are closed. Please review \");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9264a26b-aff5-48a9-8fe8-dd4f7718bb11",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PATCH",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"locationId\": 6000,\r\n  \"notes\": \"updated via postman\",\r\n  \"searchComposite\": {\r\n    \"searchRequest\": {{cstatus}}\r\n  },\r\n    \"unitId\": 8264\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lot-lists",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lot-lists"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "GET ​/crops​/{cropName}​/lots​/lotUUID",
					"item": [
						{
							"name": "Verify response code and body when entered valid lotUUID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4125df2f-9e69-4e87-8d37-6842648cee45",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check existing lot record\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var dataLength = jsonData.length;\r",
											"\r",
											"    for (i = 0; i < dataLength; i++) {\r",
											"        var lotId = jsonData[i].lotId\r",
											"        if (lotId == 194) {\r",
											"            pm.expect(jsonData[0].gid).to.eql(21);\r",
											"             pm.expect(jsonData[0].lotUUID).to.eql(\"269ab93d-2390-4be2-ad0e-6e32b84c644e\");\r",
											"            console.log(\"index:\" + i + \"Found! \");\r",
											"        }\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "33ce5499-5c8f-4d93-a596-41bda5e9aa66",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lots/{{lotUUID}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lots",
										"{{lotUUID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid lotUUID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d3f50f1d-8678-484c-b8fe-1793cd7cdf29",
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "56680665-6274-42f0-b0c4-7b2ae8b913a3",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lots/0",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lots",
										"0"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "POST /crops/{cropName}/lots/close",
					"item": [
						{
							"name": "Verify response code and body when entered valid lotUUID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8c1e79a3-4021-41e5-8c7a-af11a3dce160",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "bc049555-43b6-4f7f-9225-96b3d19d7c21",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"itemIds\": [\r\n       \"{{lotUUID}}\"\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lots/close",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lots",
										"close"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid lotUUID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5af86253-347c-4599-8589-90767d90c866",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error message\", function () {\r",
											"    var error = pm.response.json().errors[0].message;\r",
											"    pm.expect(error).to.eql(\"Some of the lot UUIDs were not found. Please review\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5969e683-16ef-4d60-b97e-15267f16e6b6",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"itemIds\": [\r\n    \"0\"\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lots/close",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lots",
										"close"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid searchRequest",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d8e3cc50-d8fd-4229-8343-dcc17961bfc4",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error message\", function () {\r",
											"    var error = pm.response.json().errors[0].message;\r",
											"    pm.expect(error).to.eql(\"Error when trying to get the search request. Id is null or does not exist\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "05aa0355-d159-4e02-97e1-bd209f33708a",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"searchRequest\": 0\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lots/close",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lots",
										"close"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body if there is an existing closed lot - valid searchRequestId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "698347c2-4005-4a1d-83ec-d19761e0e21d",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error message\", function () {\r",
											"    var error = pm.response.json().errors[0].message;\r",
											"    pm.expect(error).to.eql(\"1 selected lots are closed. Please review \");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d03184b4-93f9-4463-8976-f6ae51ddf8cd",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"searchRequest\": {{cstatus}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lots/close",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lots",
										"close"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "GET /crops/{cropName}/lot-lists/template/xls",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f5343307-f502-4014-be74-efd97ef69d16",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "5da86c1b-bf14-4483-850f-9b837a73dc88",
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "X-Auth-Token",
								"type": "text",
								"value": "{{masterToken}}"
							}
						],
						"url": {
							"raw": "{{BMSurl}}/crops/{{crop}}/lot-lists/templates/xls",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"crops",
								"{{crop}}",
								"lot-lists",
								"templates",
								"xls"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "inventory-unit-resource",
			"item": [
				{
					"name": "GET ​/crops​/{cropName}​/inventory-units",
					"item": [
						{
							"name": "Verify response code and body when entered valid input",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "03c08b50-2431-46e1-a307-d9947972c23a",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Check id value for each item\", function () {",
											"  var id = [\"8264\",\"8267\", \"8266\", \"8268\", \"8710\"];",
											"  for (var i = 0; i < jsonData.length - 1; i++) {",
											"    pm.expect(jsonData[i].id).to.eql(id[i]);",
											"  }",
											"});",
											"",
											"pm.test(\"Check name value for each item\", function () {",
											"  var name = [\"SEED_AMOUNT_g\", \"SEED_AMOUNT_kg\", \"SEED_AMOUNT_No\", \"SEED_AMOUNT_Packets\", \"SEED_AMOUNT_t\"];",
											"  for (var i = 0; i < jsonData.length - 1; i++) {",
											"    pm.expect(jsonData[i].name).to.eql(name[i]);",
											"  }",
											"});",
											"",
											"pm.test(\"Check alias value for each item\", function () {",
											"  for (var i = 0; i < jsonData.length - 1; i++) {",
											"    pm.expect(jsonData[i].alias).to.eql(\"\");",
											"  }",
											"});",
											"",
											"pm.test(\"Check description value for each design\", function () {",
											"  var description = [\"Seed inventory amount deposited or withdrawn (g)\", \"Seed inventory amount deposited or withdrawn (kg)\",\"Seed inventoryamount deposited or withdrawn (no)\", \"Seed inventory amountdeposited or withdrawn (packets)\", \"Seed inventory amount deposited or withdrawn (t)\"];",
											"  for (var i = 0; i < jsonData.length - 1; i++) {",
											"    pm.expect(jsonData[i].description).to.eql(description[i]);",
											"  }",
											"});",
											"",
											"pm.test(\"Check property id value for each item\", function () {",
											"  for (var i = 0; i < jsonData.length - 1; i++) {",
											"    pm.expect(jsonData[i].property.id).to.eql(\"2620\");",
											"  }",
											"});",
											"",
											"pm.test(\"Check property name for each item\", function () {",
											"  for (var i = 0; i < jsonData.length - 1; i++) {",
											"    pm.expect(jsonData[i].property.name).to.eql(\"Inventory amount\");",
											"  }",
											"});",
											"pm.test(\"Check property description for each item\", function () {",
											"  for (var i = 0; i < jsonData.length - 1; i++) {",
											"    pm.expect(jsonData[i].property.description).to.eql(\"Amount of inventory storedor withdrawn\");",
											"  }",
											"});",
											"pm.test(\"Check property cropOntologyId for each item\", function () {",
											"  for (var i = 0; i < jsonData.length - 1; i++) {",
											"    pm.expect(jsonData[i].property.cropOntologyId).to.eql(null);",
											"  }",
											"});",
											"pm.test(\"Check property classes for each item\", function () {",
											"  for (var i = 0; i < jsonData.length - 1; i++) {",
											"    pm.expect(jsonData[i].property.classes[0]).to.eql(\"Seed storage\");",
											"    pm.expect(jsonData[i].property.classes[1]).to.eql(\"Seed increase methods\");",
											"  }",
											"});",
											"pm.test(\"Check property metadata for each item\", function () {",
											"  for (var i = 0; i < jsonData.length - 1; i++) {",
											"    pm.expect(jsonData[i].property.metadata.dateCreated).to.eql(\"2016-01-28T19:36:53.000Z\");",
											"     pm.expect(jsonData[i].property.metadata.lastModified).to.eql(null);",
											"     pm.expect(jsonData[i].property.metadata.editableFields).to.eql([]);",
											"     pm.expect(jsonData[i].property.metadata.deletable).to.eql(false);",
											"     pm.expect(jsonData[i].property.metadata.usage.observations).to.eql(0);",
											"     pm.expect(jsonData[i].property.metadata.usage.studies).to.eql(0);",
											"  }",
											"});",
											"",
											"pm.test(\"Check method for each item\", function () {",
											"  var itemsWithWeighedMeth = [0,1,4];",
											"  var itemsWithCountedMeth = [2,3];",
											"  for (var i = 0; i < itemsWithWeighedMeth.length - 1; i++) {",
											"    pm.expect(jsonData[i].method.id).to.eql(\"4090\");",
											"    pm.expect(jsonData[i].method.name).to.eql(\"Weighed\");",
											"    pm.expect(jsonData[i].method.description).to.eql(\"Weighing method\");",
											"    pm.expect(jsonData[i].property.metadata.dateCreated).to.eql(\"2016-01-28T19:36:53.000Z\");",
											"     pm.expect(jsonData[i].property.metadata.lastModified).to.eql(null);",
											"     pm.expect(jsonData[i].property.metadata.editableFields).to.eql([]);",
											"     pm.expect(jsonData[i].property.metadata.deletable).to.eql(false);",
											"     pm.expect(jsonData[i].property.metadata.usage.observations).to.eql(0);",
											"     pm.expect(jsonData[i].property.metadata.usage.studies).to.eql(0);",
											"  }",
											"    for (var j = 0; i < itemsWithCountedMeth.length - 1; j++) {",
											"    pm.expect(jsonData[i].method.id).to.eql(\"4080\");",
											"    pm.expect(jsonData[i].method.name).to.eql(\"Counted\");",
											"    pm.expect(jsonData[i].method.description).to.eql(\"Counting method\");",
											"    pm.expect(jsonData[i].property.metadata.dateCreated).to.eql(\"2016-01-28T19:36:53.000Z\");",
											"     pm.expect(jsonData[i].property.metadata.lastModified).to.eql(null);",
											"     pm.expect(jsonData[i].property.metadata.editableFields).to.eql([]);",
											"     pm.expect(jsonData[i].property.metadata.deletable).to.eql(false);",
											"     pm.expect(jsonData[i].property.metadata.usage.observations).to.eql(0);",
											"     pm.expect(jsonData[i].property.metadata.usage.studies).to.eql(0);",
											"  }",
											"});",
											"",
											"",
											"//Todo assert remaining of the details"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d1d7d59f-3592-4b36-9a54-2ad05e1df027",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/inventory-units",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"inventory-units"
									]
								},
								"description": "GET ​/crops​/{cropName}​/inventory-units"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "36cfc448-0182-4c76-9a61-d49f523aa65c",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "9d7243c0-d987-4fac-bfbc-1a84f6bdade2",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"protocolProfileBehavior": {}
}